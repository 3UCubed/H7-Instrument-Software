
H7-Test-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dcf0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800df88  0800df88  0001df88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dfe4  0800dfe4  0001dfe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dfec  0800dfec  0001dfec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dff0  0800dff0  0001dff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000034  24000000  0800dff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000548  24000034  0800e028  00020034  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400057c  0800e028  0002057c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 10 .debug_info   000232a7  00000000  00000000  00020062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003553  00000000  00000000  00043309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ac8  00000000  00000000  00046860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001990  00000000  00000000  00048328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ada1  00000000  00000000  00049cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000237bc  00000000  00000000  00084a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017fe96  00000000  00000000  000a8215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002280ab  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000074cc  00000000  00000000  002280fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000034 	.word	0x24000034
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800df70 	.word	0x0800df70

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000038 	.word	0x24000038
 80002d4:	0800df70 	.word	0x0800df70

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ee:	4904      	ldr	r1, [pc, #16]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x28>)
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f6:	f3bf 8f4f 	dsb	sy
}
 80005fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <__NVIC_SystemReset+0x20>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	05fa0004 	.word	0x05fa0004

08000608 <HAL_TIM_OC_DelayElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b092      	sub	sp, #72	; 0x48
 800060c:	af02      	add	r7, sp, #8
 800060e:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4aab      	ldr	r2, [pc, #684]	; (80008c0 <HAL_TIM_OC_DelayElapsedCallback+0x2b8>)
 8000614:	4293      	cmp	r3, r2
 8000616:	f040 82e3 	bne.w	8000be0 <HAL_TIM_OC_DelayElapsedCallback+0x5d8>
  {
    if (1)
    { // check pin state
      if (ERPA_ON)
 800061a:	4baa      	ldr	r3, [pc, #680]	; (80008c4 <HAL_TIM_OC_DelayElapsedCallback+0x2bc>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	f000 8083 	beq.w	800072a <HAL_TIM_OC_DelayElapsedCallback+0x122>
         * +/- 0.5v Every 100ms
         */

        /* Write to SPI (begin transfer?) */

		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11));
 8000624:	bf00      	nop
 8000626:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800062a:	48a7      	ldr	r0, [pc, #668]	; (80008c8 <HAL_TIM_OC_DelayElapsedCallback+0x2c0>)
 800062c:	f006 f8a4 	bl	8006778 <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1f7      	bne.n	8000626 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		 * Steps DAC
		 * +/- 0.5v Every 100ms
		*/

		  /* Write to SPI (begin transfer?) */
		HAL_SPI_Transmit(&hspi2, (uint8_t * ) &WRITE, 1, 1);
 8000636:	2301      	movs	r3, #1
 8000638:	2201      	movs	r2, #1
 800063a:	49a4      	ldr	r1, [pc, #656]	; (80008cc <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 800063c:	48a4      	ldr	r0, [pc, #656]	; (80008d0 <HAL_TIM_OC_DelayElapsedCallback+0x2c8>)
 800063e:	f00a f919 	bl	800a874 <HAL_SPI_Transmit>
		//SPI2->CR1 |= 1<<10; // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
	    erpa_raw = SPI2->RXDR;
 8000642:	4ba4      	ldr	r3, [pc, #656]	; (80008d4 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	461a      	mov	r2, r3
 8000648:	4ba3      	ldr	r3, [pc, #652]	; (80008d8 <HAL_TIM_OC_DelayElapsedCallback+0x2d0>)
 800064a:	601a      	str	r2, [r3, #0]


		DAC1->DHR12R1 = DAC_OUT[step];
 800064c:	4ba3      	ldr	r3, [pc, #652]	; (80008dc <HAL_TIM_OC_DelayElapsedCallback+0x2d4>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4619      	mov	r1, r3
 8000652:	4aa3      	ldr	r2, [pc, #652]	; (80008e0 <HAL_TIM_OC_DelayElapsedCallback+0x2d8>)
 8000654:	4ba3      	ldr	r3, [pc, #652]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x2dc>)
 8000656:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800065a:	6093      	str	r3, [r2, #8]

		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcResultsDMA,adcChannelCount);
 800065c:	230f      	movs	r3, #15
 800065e:	461a      	mov	r2, r3
 8000660:	49a1      	ldr	r1, [pc, #644]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 8000662:	48a2      	ldr	r0, [pc, #648]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x2e4>)
 8000664:	f002 fbee 	bl	8002e44 <HAL_ADC_Start_DMA>
		uint16_t PA0 = adcResultsDMA[0]; 				// ADC_IN0, END_mon: entrance/collimator monitor
 8000668:	4b9f      	ldr	r3, [pc, #636]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	867b      	strh	r3, [r7, #50]	; 0x32
		uint16_t PA7 = adcResultsDMA[6]; 				// ADC_IN7, SWP_mon: Sweep voltage monitor
 800066e:	4b9e      	ldr	r3, [pc, #632]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 8000670:	899b      	ldrh	r3, [r3, #12]
 8000672:	863b      	strh	r3, [r7, #48]	; 0x30
		uint16_t PB0 = adcResultsDMA[7]; 				// ADC_IN8, TMP 1: Sweep temperature
 8000674:	4b9c      	ldr	r3, [pc, #624]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 8000676:	89db      	ldrh	r3, [r3, #14]
 8000678:	85fb      	strh	r3, [r7, #46]	; 0x2e
		uint16_t PB1 = adcResultsDMA[8]; 				// ADC_IN9, TMP 2: feedbacks
 800067a:	4b9b      	ldr	r3, [pc, #620]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 800067c:	8a1b      	ldrh	r3, [r3, #16]
 800067e:	85bb      	strh	r3, [r7, #44]	; 0x2c

		erpa_buf[0] = erpa_sync;                  		// ERPA SYNC 0xAA MSB
 8000680:	22aa      	movs	r2, #170	; 0xaa
 8000682:	4b9b      	ldr	r3, [pc, #620]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 8000684:	701a      	strb	r2, [r3, #0]
		erpa_buf[1] = erpa_sync;                  		// ERPA SYNC 0xAA LSB
 8000686:	22aa      	movs	r2, #170	; 0xaa
 8000688:	4b99      	ldr	r3, [pc, #612]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 800068a:	705a      	strb	r2, [r3, #1]
		erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 		// ERPA SEQ # MSB
 800068c:	4b99      	ldr	r3, [pc, #612]	; (80008f4 <HAL_TIM_OC_DelayElapsedCallback+0x2ec>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	0a1b      	lsrs	r3, r3, #8
 8000692:	b29b      	uxth	r3, r3
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4b96      	ldr	r3, [pc, #600]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 8000698:	709a      	strb	r2, [r3, #2]
		erpa_buf[3] = (erpa_seq & 0xFF);          		// ERPA SEQ # MSB
 800069a:	4b96      	ldr	r3, [pc, #600]	; (80008f4 <HAL_TIM_OC_DelayElapsedCallback+0x2ec>)
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	4b93      	ldr	r3, [pc, #588]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 80006a2:	70da      	strb	r2, [r3, #3]
		erpa_buf[4] = ((PA0 & 0xFF00) >> 8); 	  		// ENDmon MSB
 80006a4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80006a6:	0a1b      	lsrs	r3, r3, #8
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	4b90      	ldr	r3, [pc, #576]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 80006ae:	711a      	strb	r2, [r3, #4]
		erpa_buf[5] = (PA0 & 0xFF);               		// ENDmon LSB
 80006b0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	4b8e      	ldr	r3, [pc, #568]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 80006b6:	715a      	strb	r2, [r3, #5]
		erpa_buf[6] = ((PA7 & 0xFF00) >> 8);      		// SWP Monitored MSB
 80006b8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80006ba:	0a1b      	lsrs	r3, r3, #8
 80006bc:	b29b      	uxth	r3, r3
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b8b      	ldr	r3, [pc, #556]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 80006c2:	719a      	strb	r2, [r3, #6]
		erpa_buf[7] = (PA7 & 0xFF);               		// SWP Monitored LSB
 80006c4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	4b89      	ldr	r3, [pc, #548]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 80006ca:	71da      	strb	r2, [r3, #7]
		erpa_buf[8] = ((PB0 & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 80006cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80006ce:	0a1b      	lsrs	r3, r3, #8
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b86      	ldr	r3, [pc, #536]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 80006d6:	721a      	strb	r2, [r3, #8]
		erpa_buf[9] = (PB0 & 0xFF);               		// TEMPURATURE 1 LSB
 80006d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b84      	ldr	r3, [pc, #528]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 80006de:	725a      	strb	r2, [r3, #9]
		erpa_buf[10] = ((PB1 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 80006e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80006e2:	0a1b      	lsrs	r3, r3, #8
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	4b81      	ldr	r3, [pc, #516]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 80006ea:	729a      	strb	r2, [r3, #10]
		erpa_buf[11] = (PB1 & 0xFF);                    // TEMPURATURE 2 LSB
 80006ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b7f      	ldr	r3, [pc, #508]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 80006f2:	72da      	strb	r2, [r3, #11]
		erpa_buf[12] = ((erpa_raw & 0xFF00) >> 8);      // ERPA eADC MSB
 80006f4:	4b78      	ldr	r3, [pc, #480]	; (80008d8 <HAL_TIM_OC_DelayElapsedCallback+0x2d0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	121b      	asrs	r3, r3, #8
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	4b7c      	ldr	r3, [pc, #496]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 80006fe:	731a      	strb	r2, [r3, #12]
		erpa_buf[13] = (erpa_raw & 0xFF);               // ERPA eADC LSB
 8000700:	4b75      	ldr	r3, [pc, #468]	; (80008d8 <HAL_TIM_OC_DelayElapsedCallback+0x2d0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4b7a      	ldr	r3, [pc, #488]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 8000708:	735a      	strb	r2, [r3, #13]

		erpa_seq++;
 800070a:	4b7a      	ldr	r3, [pc, #488]	; (80008f4 <HAL_TIM_OC_DelayElapsedCallback+0x2ec>)
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	3301      	adds	r3, #1
 8000710:	b29a      	uxth	r2, r3
 8000712:	4b78      	ldr	r3, [pc, #480]	; (80008f4 <HAL_TIM_OC_DelayElapsedCallback+0x2ec>)
 8000714:	801a      	strh	r2, [r3, #0]
		if (ERPA_ON)
 8000716:	4b6b      	ldr	r3, [pc, #428]	; (80008c4 <HAL_TIM_OC_DelayElapsedCallback+0x2bc>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d005      	beq.n	800072a <HAL_TIM_OC_DelayElapsedCallback+0x122>
		{
		  HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 800071e:	2364      	movs	r3, #100	; 0x64
 8000720:	220e      	movs	r2, #14
 8000722:	4973      	ldr	r1, [pc, #460]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 8000724:	4874      	ldr	r0, [pc, #464]	; (80008f8 <HAL_TIM_OC_DelayElapsedCallback+0x2f0>)
 8000726:	f00b fc9d 	bl	800c064 <HAL_UART_Transmit>
		}
      }
      if (HK_ON)
 800072a:	4b74      	ldr	r3, [pc, #464]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x2f4>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	f000 829d 	beq.w	8000c6e <HAL_TIM_OC_DelayElapsedCallback+0x666>
      {
        if (hk_counter == HK_CADENCE)
 8000734:	4b72      	ldr	r3, [pc, #456]	; (8000900 <HAL_TIM_OC_DelayElapsedCallback+0x2f8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2201      	movs	r2, #1
 800073a:	4293      	cmp	r3, r2
 800073c:	f040 823c 	bne.w	8000bb8 <HAL_TIM_OC_DelayElapsedCallback+0x5b0>
          int16_t output1;
          int16_t output2;
          int16_t output3;
          int16_t output4;

          buf[0] = REG_TEMP;
 8000740:	2300      	movs	r3, #0
 8000742:	733b      	strb	r3, [r7, #12]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_1, buf, 1,
 8000744:	2390      	movs	r3, #144	; 0x90
 8000746:	b299      	uxth	r1, r3
 8000748:	f107 020c 	add.w	r2, r7, #12
 800074c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	2301      	movs	r3, #1
 8000754:	486b      	ldr	r0, [pc, #428]	; (8000904 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 8000756:	f006 f8d1 	bl	80068fc <HAL_I2C_Master_Transmit>
 800075a:	4603      	mov	r3, r0
 800075c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                        1000);
          if (ret != HAL_OK)
 8000760:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000764:	2b00      	cmp	r3, #0
 8000766:	d009      	beq.n	800077c <HAL_TIM_OC_DelayElapsedCallback+0x174>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	4a66      	ldr	r2, [pc, #408]	; (8000908 <HAL_TIM_OC_DelayElapsedCallback+0x300>)
 800076e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000770:	c303      	stmia	r3!, {r0, r1}
 8000772:	801a      	strh	r2, [r3, #0]
 8000774:	3302      	adds	r3, #2
 8000776:	0c12      	lsrs	r2, r2, #16
 8000778:	701a      	strb	r2, [r3, #0]
 800077a:	e024      	b.n	80007c6 <HAL_TIM_OC_DelayElapsedCallback+0x1be>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_1, buf, 2,
 800077c:	2390      	movs	r3, #144	; 0x90
 800077e:	b299      	uxth	r1, r3
 8000780:	f107 020c 	add.w	r2, r7, #12
 8000784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2302      	movs	r3, #2
 800078c:	485d      	ldr	r0, [pc, #372]	; (8000904 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 800078e:	f006 f9a9 	bl	8006ae4 <HAL_I2C_Master_Receive>
 8000792:	4603      	mov	r3, r0
 8000794:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                         1000);
            if (ret != HAL_OK)
 8000798:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800079c:	2b00      	cmp	r3, #0
 800079e:	d009      	beq.n	80007b4 <HAL_TIM_OC_DelayElapsedCallback+0x1ac>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	4a59      	ldr	r2, [pc, #356]	; (800090c <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 80007a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80007a8:	c303      	stmia	r3!, {r0, r1}
 80007aa:	801a      	strh	r2, [r3, #0]
 80007ac:	3302      	adds	r3, #2
 80007ae:	0c12      	lsrs	r2, r2, #16
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	e008      	b.n	80007c6 <HAL_TIM_OC_DelayElapsedCallback+0x1be>
            }
            else
            {
              output1 = (int16_t)(buf[0] << 8);
 80007b4:	7b3b      	ldrb	r3, [r7, #12]
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
              output1 = (output1 | buf[1]) >> 3;
 80007ba:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80007be:	7b7a      	ldrb	r2, [r7, #13]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	10db      	asrs	r3, r3, #3
 80007c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }
          }

          /* Tell ADT7410_2 that we want to read from the temperature register */
          buf[0] = REG_TEMP;
 80007c6:	2300      	movs	r3, #0
 80007c8:	733b      	strb	r3, [r7, #12]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_2, buf, 1,
 80007ca:	2394      	movs	r3, #148	; 0x94
 80007cc:	b299      	uxth	r1, r3
 80007ce:	f107 020c 	add.w	r2, r7, #12
 80007d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2301      	movs	r3, #1
 80007da:	484a      	ldr	r0, [pc, #296]	; (8000904 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 80007dc:	f006 f88e 	bl	80068fc <HAL_I2C_Master_Transmit>
 80007e0:	4603      	mov	r3, r0
 80007e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 80007e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d009      	beq.n	8000802 <HAL_TIM_OC_DelayElapsedCallback+0x1fa>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	4a45      	ldr	r2, [pc, #276]	; (8000908 <HAL_TIM_OC_DelayElapsedCallback+0x300>)
 80007f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80007f6:	c303      	stmia	r3!, {r0, r1}
 80007f8:	801a      	strh	r2, [r3, #0]
 80007fa:	3302      	adds	r3, #2
 80007fc:	0c12      	lsrs	r2, r2, #16
 80007fe:	701a      	strb	r2, [r3, #0]
 8000800:	e024      	b.n	800084c <HAL_TIM_OC_DelayElapsedCallback+0x244>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_2, buf, 2,
 8000802:	2394      	movs	r3, #148	; 0x94
 8000804:	b299      	uxth	r1, r3
 8000806:	f107 020c 	add.w	r2, r7, #12
 800080a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	2302      	movs	r3, #2
 8000812:	483c      	ldr	r0, [pc, #240]	; (8000904 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 8000814:	f006 f966 	bl	8006ae4 <HAL_I2C_Master_Receive>
 8000818:	4603      	mov	r3, r0
 800081a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                         1000);
            if (ret != HAL_OK)
 800081e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000822:	2b00      	cmp	r3, #0
 8000824:	d009      	beq.n	800083a <HAL_TIM_OC_DelayElapsedCallback+0x232>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4a38      	ldr	r2, [pc, #224]	; (800090c <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 800082c:	ca07      	ldmia	r2, {r0, r1, r2}
 800082e:	c303      	stmia	r3!, {r0, r1}
 8000830:	801a      	strh	r2, [r3, #0]
 8000832:	3302      	adds	r3, #2
 8000834:	0c12      	lsrs	r2, r2, #16
 8000836:	701a      	strb	r2, [r3, #0]
 8000838:	e008      	b.n	800084c <HAL_TIM_OC_DelayElapsedCallback+0x244>
            }
            else
            {

              output2 = (int16_t)(buf[0] << 8);
 800083a:	7b3b      	ldrb	r3, [r7, #12]
 800083c:	021b      	lsls	r3, r3, #8
 800083e:	87bb      	strh	r3, [r7, #60]	; 0x3c
              output2 = (output2 | buf[1]) >> 3;
 8000840:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8000844:	7b7a      	ldrb	r2, [r7, #13]
 8000846:	4313      	orrs	r3, r2
 8000848:	10db      	asrs	r3, r3, #3
 800084a:	87bb      	strh	r3, [r7, #60]	; 0x3c
            }
          }
          // TEMP SENSOR 3
          buf[0] = REG_TEMP;
 800084c:	2300      	movs	r3, #0
 800084e:	733b      	strb	r3, [r7, #12]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_3, buf, 1,
 8000850:	2392      	movs	r3, #146	; 0x92
 8000852:	b299      	uxth	r1, r3
 8000854:	f107 020c 	add.w	r2, r7, #12
 8000858:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	2301      	movs	r3, #1
 8000860:	4828      	ldr	r0, [pc, #160]	; (8000904 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 8000862:	f006 f84b 	bl	80068fc <HAL_I2C_Master_Transmit>
 8000866:	4603      	mov	r3, r0
 8000868:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 800086c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000870:	2b00      	cmp	r3, #0
 8000872:	d009      	beq.n	8000888 <HAL_TIM_OC_DelayElapsedCallback+0x280>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	4a23      	ldr	r2, [pc, #140]	; (8000908 <HAL_TIM_OC_DelayElapsedCallback+0x300>)
 800087a:	ca07      	ldmia	r2, {r0, r1, r2}
 800087c:	c303      	stmia	r3!, {r0, r1}
 800087e:	801a      	strh	r2, [r3, #0]
 8000880:	3302      	adds	r3, #2
 8000882:	0c12      	lsrs	r2, r2, #16
 8000884:	701a      	strb	r2, [r3, #0]
 8000886:	e04c      	b.n	8000922 <HAL_TIM_OC_DelayElapsedCallback+0x31a>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_3, buf, 2,
 8000888:	2392      	movs	r3, #146	; 0x92
 800088a:	b299      	uxth	r1, r3
 800088c:	f107 020c 	add.w	r2, r7, #12
 8000890:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2302      	movs	r3, #2
 8000898:	481a      	ldr	r0, [pc, #104]	; (8000904 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 800089a:	f006 f923 	bl	8006ae4 <HAL_I2C_Master_Receive>
 800089e:	4603      	mov	r3, r0
 80008a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                         1000);
            if (ret != HAL_OK)
 80008a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d031      	beq.n	8000910 <HAL_TIM_OC_DelayElapsedCallback+0x308>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	4a16      	ldr	r2, [pc, #88]	; (800090c <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 80008b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80008b4:	c303      	stmia	r3!, {r0, r1}
 80008b6:	801a      	strh	r2, [r3, #0]
 80008b8:	3302      	adds	r3, #2
 80008ba:	0c12      	lsrs	r2, r2, #16
 80008bc:	701a      	strb	r2, [r3, #0]
 80008be:	e030      	b.n	8000922 <HAL_TIM_OC_DelayElapsedCallback+0x31a>
 80008c0:	240003c4 	.word	0x240003c4
 80008c4:	24000021 	.word	0x24000021
 80008c8:	58020400 	.word	0x58020400
 80008cc:	0800dfa0 	.word	0x0800dfa0
 80008d0:	240002f0 	.word	0x240002f0
 80008d4:	40003800 	.word	0x40003800
 80008d8:	24000530 	.word	0x24000530
 80008dc:	2400052a 	.word	0x2400052a
 80008e0:	40007400 	.word	0x40007400
 80008e4:	24000000 	.word	0x24000000
 80008e8:	2400050c 	.word	0x2400050c
 80008ec:	24000050 	.word	0x24000050
 80008f0:	24000534 	.word	0x24000534
 80008f4:	24000542 	.word	0x24000542
 80008f8:	24000410 	.word	0x24000410
 80008fc:	24000022 	.word	0x24000022
 8000900:	24000574 	.word	0x24000574
 8000904:	2400021c 	.word	0x2400021c
 8000908:	0800df88 	.word	0x0800df88
 800090c:	0800df94 	.word	0x0800df94
            }
            else
            {

              output3 = (int16_t)(buf[0] << 8);
 8000910:	7b3b      	ldrb	r3, [r7, #12]
 8000912:	021b      	lsls	r3, r3, #8
 8000914:	877b      	strh	r3, [r7, #58]	; 0x3a
              output3 = (output3 | buf[1]) >> 3;
 8000916:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800091a:	7b7a      	ldrb	r2, [r7, #13]
 800091c:	4313      	orrs	r3, r2
 800091e:	10db      	asrs	r3, r3, #3
 8000920:	877b      	strh	r3, [r7, #58]	; 0x3a
            }
          }
          /* TEMP SENSOR 4 */
          buf[0] = REG_TEMP;
 8000922:	2300      	movs	r3, #0
 8000924:	733b      	strb	r3, [r7, #12]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_4, buf, 1,
 8000926:	2396      	movs	r3, #150	; 0x96
 8000928:	b299      	uxth	r1, r3
 800092a:	f107 020c 	add.w	r2, r7, #12
 800092e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2301      	movs	r3, #1
 8000936:	4818      	ldr	r0, [pc, #96]	; (8000998 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 8000938:	f005 ffe0 	bl	80068fc <HAL_I2C_Master_Transmit>
 800093c:	4603      	mov	r3, r0
 800093e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 8000942:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000946:	2b00      	cmp	r3, #0
 8000948:	d009      	beq.n	800095e <HAL_TIM_OC_DelayElapsedCallback+0x356>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	4a13      	ldr	r2, [pc, #76]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 8000950:	ca07      	ldmia	r2, {r0, r1, r2}
 8000952:	c303      	stmia	r3!, {r0, r1}
 8000954:	801a      	strh	r2, [r3, #0]
 8000956:	3302      	adds	r3, #2
 8000958:	0c12      	lsrs	r2, r2, #16
 800095a:	701a      	strb	r2, [r3, #0]
 800095c:	e02b      	b.n	80009b6 <HAL_TIM_OC_DelayElapsedCallback+0x3ae>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_4, buf, 2,
 800095e:	2396      	movs	r3, #150	; 0x96
 8000960:	b299      	uxth	r1, r3
 8000962:	f107 020c 	add.w	r2, r7, #12
 8000966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	2302      	movs	r3, #2
 800096e:	480a      	ldr	r0, [pc, #40]	; (8000998 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 8000970:	f006 f8b8 	bl	8006ae4 <HAL_I2C_Master_Receive>
 8000974:	4603      	mov	r3, r0
 8000976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                         1000);
            if (ret != HAL_OK)
 800097a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800097e:	2b00      	cmp	r3, #0
 8000980:	d010      	beq.n	80009a4 <HAL_TIM_OC_DelayElapsedCallback+0x39c>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	4a06      	ldr	r2, [pc, #24]	; (80009a0 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 8000988:	ca07      	ldmia	r2, {r0, r1, r2}
 800098a:	c303      	stmia	r3!, {r0, r1}
 800098c:	801a      	strh	r2, [r3, #0]
 800098e:	3302      	adds	r3, #2
 8000990:	0c12      	lsrs	r2, r2, #16
 8000992:	701a      	strb	r2, [r3, #0]
 8000994:	e00f      	b.n	80009b6 <HAL_TIM_OC_DelayElapsedCallback+0x3ae>
 8000996:	bf00      	nop
 8000998:	2400021c 	.word	0x2400021c
 800099c:	0800df88 	.word	0x0800df88
 80009a0:	0800df94 	.word	0x0800df94
            }
            else
            {

              output4 = (int16_t)(buf[0] << 8);
 80009a4:	7b3b      	ldrb	r3, [r7, #12]
 80009a6:	021b      	lsls	r3, r3, #8
 80009a8:	873b      	strh	r3, [r7, #56]	; 0x38
              output4 = (output4 | buf[1]) >> 3;
 80009aa:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80009ae:	7b7a      	ldrb	r2, [r7, #13]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	10db      	asrs	r3, r3, #3
 80009b4:	873b      	strh	r3, [r7, #56]	; 0x38
            }
          }

          HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcResultsDMA,
 80009b6:	230f      	movs	r3, #15
 80009b8:	461a      	mov	r2, r3
 80009ba:	4982      	ldr	r1, [pc, #520]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x5bc>)
 80009bc:	4882      	ldr	r0, [pc, #520]	; (8000bc8 <HAL_TIM_OC_DelayElapsedCallback+0x5c0>)
 80009be:	f002 fa41 	bl	8002e44 <HAL_ADC_Start_DMA>
                            adcChannelCount);

          uint16_t PA1 = adcResultsDMA[1];       // ADC_IN1, BUS_Vmon: instrument bus voltage monitor
 80009c2:	4b80      	ldr	r3, [pc, #512]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x5bc>)
 80009c4:	885b      	ldrh	r3, [r3, #2]
 80009c6:	853b      	strh	r3, [r7, #40]	; 0x28
          uint16_t PA2 = adcResultsDMA[2];       // ADC_IN2, BUS_Imon: instrument bus current monitor
 80009c8:	4b7e      	ldr	r3, [pc, #504]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x5bc>)
 80009ca:	889b      	ldrh	r3, [r3, #4]
 80009cc:	84fb      	strh	r3, [r7, #38]	; 0x26
          uint16_t PA3 = adcResultsDMA[3];       // ADC_IN3, 3v3_mon: Accurate 5V for ADC monitor
 80009ce:	4b7d      	ldr	r3, [pc, #500]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x5bc>)
 80009d0:	88db      	ldrh	r3, [r3, #6]
 80009d2:	84bb      	strh	r3, [r7, #36]	; 0x24
          uint16_t PA5 = adcResultsDMA[4];       // ADC_IN5, n150v_mon: n150 voltage monitor
 80009d4:	4b7b      	ldr	r3, [pc, #492]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x5bc>)
 80009d6:	891b      	ldrh	r3, [r3, #8]
 80009d8:	847b      	strh	r3, [r7, #34]	; 0x22
          uint16_t PA6 = adcResultsDMA[5];       // ADC_IN6, n800v_mon: n800 voltage monitor
 80009da:	4b7a      	ldr	r3, [pc, #488]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x5bc>)
 80009dc:	895b      	ldrh	r3, [r3, #10]
 80009de:	843b      	strh	r3, [r7, #32]
          uint16_t PC0 = adcResultsDMA[9];       // ADC_IN10, 2v5_mon: 2.5v voltage monitor
 80009e0:	4b78      	ldr	r3, [pc, #480]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x5bc>)
 80009e2:	8a5b      	ldrh	r3, [r3, #18]
 80009e4:	83fb      	strh	r3, [r7, #30]
          uint16_t PC1 = adcResultsDMA[10];      // ADC_IN11, n5v_mon: n5v voltage monitor
 80009e6:	4b77      	ldr	r3, [pc, #476]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x5bc>)
 80009e8:	8a9b      	ldrh	r3, [r3, #20]
 80009ea:	83bb      	strh	r3, [r7, #28]
          uint16_t PC2 = adcResultsDMA[11];      // ADC_IN12, 5v_mon: 5v voltage monitor
 80009ec:	4b75      	ldr	r3, [pc, #468]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x5bc>)
 80009ee:	8adb      	ldrh	r3, [r3, #22]
 80009f0:	837b      	strh	r3, [r7, #26]
          uint16_t PC3 = adcResultsDMA[12];      // ADC_IN13, n3v3_mon: n3v3 voltage monitor
 80009f2:	4b74      	ldr	r3, [pc, #464]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x5bc>)
 80009f4:	8b1b      	ldrh	r3, [r3, #24]
 80009f6:	833b      	strh	r3, [r7, #24]
          uint16_t PC4 = adcResultsDMA[13];      // ADC_IN14, 5vref_mon: 5v reference voltage monitor
 80009f8:	4b72      	ldr	r3, [pc, #456]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x5bc>)
 80009fa:	8b5b      	ldrh	r3, [r3, #26]
 80009fc:	82fb      	strh	r3, [r7, #22]
          uint16_t PC5 = adcResultsDMA[14];      // ADC_IN15, 15v_mon: 15v voltage monitor
 80009fe:	4b71      	ldr	r3, [pc, #452]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x5bc>)
 8000a00:	8b9b      	ldrh	r3, [r3, #28]
 8000a02:	82bb      	strh	r3, [r7, #20]
          uint16_t MCU_TEMP =  0;   // adcResultsDMA[15]; //(internally connected) ADC_IN16, VSENSE
 8000a04:	2300      	movs	r3, #0
 8000a06:	827b      	strh	r3, [r7, #18]
          uint16_t MCU_VREF =  0;  // adcResultsDMA[16]; //(internally connected) ADC_IN17, VREFINT
 8000a08:	2300      	movs	r3, #0
 8000a0a:	823b      	strh	r3, [r7, #16]


          hk_buf[0] = hk_sync;                     // HK SYNC 0xCC MSB					0 SYNC
 8000a0c:	22cc      	movs	r2, #204	; 0xcc
 8000a0e:	4b6f      	ldr	r3, [pc, #444]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000a10:	701a      	strb	r2, [r3, #0]
          hk_buf[1] = hk_sync;                     // HK SYNC 0xCC LSB
 8000a12:	22cc      	movs	r2, #204	; 0xcc
 8000a14:	4b6d      	ldr	r3, [pc, #436]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000a16:	705a      	strb	r2, [r3, #1]
          hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    // HK SEQ # MSB		1 SEQUENCE
 8000a18:	4b6d      	ldr	r3, [pc, #436]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4b6a      	ldr	r3, [pc, #424]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000a24:	709a      	strb	r2, [r3, #2]
          hk_buf[3] = (hk_seq & 0xFF);             // HK SEQ # LSB
 8000a26:	4b6a      	ldr	r3, [pc, #424]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	4b67      	ldr	r3, [pc, #412]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000a2e:	70da      	strb	r2, [r3, #3]
          hk_buf[4] = ((MCU_TEMP & 0xFF00) >> 8); // VSENSE MSB		13 VSENSE
 8000a30:	8a7b      	ldrh	r3, [r7, #18]
 8000a32:	0a1b      	lsrs	r3, r3, #8
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	4b64      	ldr	r3, [pc, #400]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000a3a:	711a      	strb	r2, [r3, #4]
          hk_buf[5] = (MCU_TEMP & 0xFF);          // VSENSE LSB
 8000a3c:	8a7b      	ldrh	r3, [r7, #18]
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	4b62      	ldr	r3, [pc, #392]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000a42:	715a      	strb	r2, [r3, #5]
          hk_buf[6] = ((MCU_VREF & 0xFF00) >> 8);
 8000a44:	8a3b      	ldrh	r3, [r7, #16]
 8000a46:	0a1b      	lsrs	r3, r3, #8
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	4b5f      	ldr	r3, [pc, #380]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000a4e:	719a      	strb	r2, [r3, #6]
          hk_buf[7] = (MCU_VREF & 0xFF);
 8000a50:	8a3b      	ldrh	r3, [r7, #16]
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	4b5d      	ldr	r3, [pc, #372]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000a56:	71da      	strb	r2, [r3, #7]
          hk_buf[8] = ((output1 & 0xFF00) >> 8);
 8000a58:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8000a5c:	121b      	asrs	r3, r3, #8
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	4b5a      	ldr	r3, [pc, #360]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000a62:	721a      	strb	r2, [r3, #8]
          hk_buf[9] = (output1 & 0xFF);
 8000a64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	4b58      	ldr	r3, [pc, #352]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000a6a:	725a      	strb	r2, [r3, #9]
          hk_buf[10] = ((output2 & 0xFF00) >> 8);
 8000a6c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8000a70:	121b      	asrs	r3, r3, #8
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	4b55      	ldr	r3, [pc, #340]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000a76:	729a      	strb	r2, [r3, #10]
          hk_buf[11] = (output2 & 0xFF);
 8000a78:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	4b53      	ldr	r3, [pc, #332]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000a7e:	72da      	strb	r2, [r3, #11]
          hk_buf[12] = ((output3 & 0xFF00) >> 8);
 8000a80:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8000a84:	121b      	asrs	r3, r3, #8
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b50      	ldr	r3, [pc, #320]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000a8a:	731a      	strb	r2, [r3, #12]
          hk_buf[13] = (output3 & 0xFF);
 8000a8c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b4e      	ldr	r3, [pc, #312]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000a92:	735a      	strb	r2, [r3, #13]
          hk_buf[14] = ((output4 & 0xFF00) >> 8);
 8000a94:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8000a98:	121b      	asrs	r3, r3, #8
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b4b      	ldr	r3, [pc, #300]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000a9e:	739a      	strb	r2, [r3, #14]
          hk_buf[15] = (output4 & 0xFF);
 8000aa0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	4b49      	ldr	r3, [pc, #292]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000aa6:	73da      	strb	r2, [r3, #15]
          hk_buf[16] = ((PA1 & 0xFF00) >> 8);       // BUS_Vmon MSB			2 BUS_VMON PA1
 8000aa8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000aaa:	0a1b      	lsrs	r3, r3, #8
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	4b46      	ldr	r3, [pc, #280]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000ab2:	741a      	strb	r2, [r3, #16]
          hk_buf[17] = (PA1 & 0xFF);                // BUS_Vmon LSB
 8000ab4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b44      	ldr	r3, [pc, #272]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000aba:	745a      	strb	r2, [r3, #17]
          hk_buf[18] = ((PA2 & 0xFF00) >> 8);       // BUS_Imon MSB			3 BUS_IMON PA2
 8000abc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000abe:	0a1b      	lsrs	r3, r3, #8
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	4b41      	ldr	r3, [pc, #260]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000ac6:	749a      	strb	r2, [r3, #18]
          hk_buf[19] = (PA2 & 0xFF);                // BUS_Imon LSB
 8000ac8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	4b3f      	ldr	r3, [pc, #252]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000ace:	74da      	strb	r2, [r3, #19]
          hk_buf[20] = ((PC0 & 0xFF00) >> 8);      	// 2v5_mon MSB			7 2V5_MON PC0
 8000ad0:	8bfb      	ldrh	r3, [r7, #30]
 8000ad2:	0a1b      	lsrs	r3, r3, #8
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	4b3c      	ldr	r3, [pc, #240]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000ada:	751a      	strb	r2, [r3, #20]
          hk_buf[21] = (PC0 & 0xFF);               	// 2v5_mon LSB
 8000adc:	8bfb      	ldrh	r3, [r7, #30]
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	4b3a      	ldr	r3, [pc, #232]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000ae2:	755a      	strb	r2, [r3, #21]
          hk_buf[22] = ((PA3 & 0xFF00) >> 8);       // 3v3_mon MSB			4 3v3_MON PA3
 8000ae4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ae6:	0a1b      	lsrs	r3, r3, #8
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	4b37      	ldr	r3, [pc, #220]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000aee:	759a      	strb	r2, [r3, #22]
          hk_buf[23] = (PA3 & 0xFF);                // 3v3_mon LSB
 8000af0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	4b35      	ldr	r3, [pc, #212]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000af6:	75da      	strb	r2, [r3, #23]
          hk_buf[24] = ((PC2 & 0xFF00) >> 8);      	// 5v_mon MSB			9 5V_MON PC2
 8000af8:	8b7b      	ldrh	r3, [r7, #26]
 8000afa:	0a1b      	lsrs	r3, r3, #8
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	4b32      	ldr	r3, [pc, #200]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000b02:	761a      	strb	r2, [r3, #24]
          hk_buf[25] = (PC2 & 0xFF);               	// 5v_mon LSB
 8000b04:	8b7b      	ldrh	r3, [r7, #26]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000b0a:	765a      	strb	r2, [r3, #25]
          hk_buf[26] = ((PC3 & 0xFF00) >> 8);      	// n3v3_mon MSB			10 N3V3_MON PC3
 8000b0c:	8b3b      	ldrh	r3, [r7, #24]
 8000b0e:	0a1b      	lsrs	r3, r3, #8
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000b16:	769a      	strb	r2, [r3, #26]
          hk_buf[27] = (PC3 & 0xFF);               	// n3v3_mon LSB
 8000b18:	8b3b      	ldrh	r3, [r7, #24]
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000b1e:	76da      	strb	r2, [r3, #27]
          hk_buf[28] = ((PC1 & 0xFF00) >> 8);      	// n5v_mon MSB			8 N5V_MON PC1
 8000b20:	8bbb      	ldrh	r3, [r7, #28]
 8000b22:	0a1b      	lsrs	r3, r3, #8
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000b2a:	771a      	strb	r2, [r3, #28]
          hk_buf[29] = (PC1 & 0xFF);               	// n5v_mon LSB
 8000b2c:	8bbb      	ldrh	r3, [r7, #28]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000b32:	775a      	strb	r2, [r3, #29]
          hk_buf[30] = ((PC5 & 0xFF00) >> 8);      	// 15v_mon MSB			12 15V_MON PC5
 8000b34:	8abb      	ldrh	r3, [r7, #20]
 8000b36:	0a1b      	lsrs	r3, r3, #8
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000b3e:	779a      	strb	r2, [r3, #30]
          hk_buf[31] = (PC5 & 0xFF);               	// 15v_mon LSB
 8000b40:	8abb      	ldrh	r3, [r7, #20]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000b46:	77da      	strb	r2, [r3, #31]
          hk_buf[32] = ((PC4 & 0xFF00) >> 8);      	// 5vref_mon MSB		11 5VREF_MON PC4
 8000b48:	8afb      	ldrh	r3, [r7, #22]
 8000b4a:	0a1b      	lsrs	r3, r3, #8
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000b52:	f883 2020 	strb.w	r2, [r3, #32]
          hk_buf[33] = (PC4 & 0xFF);               	// 5vref_mon LSB
 8000b56:	8afb      	ldrh	r3, [r7, #22]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000b5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          hk_buf[34] = ((PA5 & 0xFF00) >> 8);      	// n150v_mon MSB		5 N150V_MON PA5
 8000b60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000b62:	0a1b      	lsrs	r3, r3, #8
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000b6a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
          hk_buf[35] = (PA5 & 0xFF);               	// n150v_mon LSB
 8000b6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000b74:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
          hk_buf[36] = ((PA6 & 0xFF00) >> 8);      	// n800v_mon MSB		6 N800V_MON PA6
 8000b78:	8c3b      	ldrh	r3, [r7, #32]
 8000b7a:	0a1b      	lsrs	r3, r3, #8
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          hk_buf[37] = (PA6 & 0xFF);               	// n800v_mon LSB
 8000b86:	8c3b      	ldrh	r3, [r7, #32]
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000b8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

          if (HK_ON)
 8000b90:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <HAL_TIM_OC_DelayElapsedCallback+0x5cc>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d005      	beq.n	8000ba4 <HAL_TIM_OC_DelayElapsedCallback+0x59c>
          {
           HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000b98:	2364      	movs	r3, #100	; 0x64
 8000b9a:	2226      	movs	r2, #38	; 0x26
 8000b9c:	490b      	ldr	r1, [pc, #44]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 8000b9e:	480e      	ldr	r0, [pc, #56]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x5d0>)
 8000ba0:	f00b fa60 	bl	800c064 <HAL_UART_Transmit>
          }
          hk_counter = 1;
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x5d4>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	601a      	str	r2, [r3, #0]
          hk_seq++;
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000bb4:	801a      	strh	r2, [r3, #0]
      }
    }
  }

  /* Timer 3 also called but doesn't need to do anything on IT */
}
 8000bb6:	e05a      	b.n	8000c6e <HAL_TIM_OC_DelayElapsedCallback+0x666>
          hk_counter++;
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x5d4>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	4a07      	ldr	r2, [pc, #28]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x5d4>)
 8000bc0:	6013      	str	r3, [r2, #0]
}
 8000bc2:	e054      	b.n	8000c6e <HAL_TIM_OC_DelayElapsedCallback+0x666>
 8000bc4:	2400050c 	.word	0x2400050c
 8000bc8:	24000050 	.word	0x24000050
 8000bcc:	2400054c 	.word	0x2400054c
 8000bd0:	24000572 	.word	0x24000572
 8000bd4:	24000022 	.word	0x24000022
 8000bd8:	24000410 	.word	0x24000410
 8000bdc:	24000574 	.word	0x24000574
  else if (htim == &htim1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a25      	ldr	r2, [pc, #148]	; (8000c78 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d142      	bne.n	8000c6e <HAL_TIM_OC_DelayElapsedCallback+0x666>
      if (PMT_ON)
 8000be8:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d03e      	beq.n	8000c6e <HAL_TIM_OC_DelayElapsedCallback+0x666>
    	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8));
 8000bf0:	bf00      	nop
 8000bf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf6:	4822      	ldr	r0, [pc, #136]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000bf8:	f005 fdbe 	bl	8006778 <HAL_GPIO_ReadPin>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1f7      	bne.n	8000bf2 <HAL_TIM_OC_DelayElapsedCallback+0x5ea>
  		HAL_SPI_Transmit(&hspi1, (uint8_t * ) &WRITE, 1, 1);
 8000c02:	2301      	movs	r3, #1
 8000c04:	2201      	movs	r2, #1
 8000c06:	491f      	ldr	r1, [pc, #124]	; (8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x67c>)
 8000c08:	481f      	ldr	r0, [pc, #124]	; (8000c88 <HAL_TIM_OC_DelayElapsedCallback+0x680>)
 8000c0a:	f009 fe33 	bl	800a874 <HAL_SPI_Transmit>
		pmt_raw = SPI1->RXDR;
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x684>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a1f      	ldr	r2, [pc, #124]	; (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x688>)
 8000c14:	6013      	str	r3, [r2, #0]
		uint32_t r = pmt_raw;
 8000c16:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x688>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	637b      	str	r3, [r7, #52]	; 0x34
    	  pmt_buf[0] = pmt_sync;
 8000c1c:	22bb      	movs	r2, #187	; 0xbb
 8000c1e:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <HAL_TIM_OC_DelayElapsedCallback+0x68c>)
 8000c20:	701a      	strb	r2, [r3, #0]
		  pmt_buf[1] = pmt_sync;
 8000c22:	22bb      	movs	r2, #187	; 0xbb
 8000c24:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <HAL_TIM_OC_DelayElapsedCallback+0x68c>)
 8000c26:	705a      	strb	r2, [r3, #1]
		  pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 8000c28:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <HAL_TIM_OC_DelayElapsedCallback+0x690>)
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <HAL_TIM_OC_DelayElapsedCallback+0x68c>)
 8000c34:	709a      	strb	r2, [r3, #2]
		  pmt_buf[3] = (pmt_seq & 0xFF);
 8000c36:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <HAL_TIM_OC_DelayElapsedCallback+0x690>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <HAL_TIM_OC_DelayElapsedCallback+0x68c>)
 8000c3e:	70da      	strb	r2, [r3, #3]
		  pmt_buf[4] = ((pmt_raw & 0xFF00) >> 8);
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x688>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_TIM_OC_DelayElapsedCallback+0x68c>)
 8000c4a:	711a      	strb	r2, [r3, #4]
		  pmt_buf[5] = (pmt_raw & 0xFF);
 8000c4c:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x688>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <HAL_TIM_OC_DelayElapsedCallback+0x68c>)
 8000c54:	715a      	strb	r2, [r3, #5]
		  pmt_seq++;
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <HAL_TIM_OC_DelayElapsedCallback+0x690>)
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_TIM_OC_DelayElapsedCallback+0x690>)
 8000c60:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000c62:	2364      	movs	r3, #100	; 0x64
 8000c64:	2206      	movs	r2, #6
 8000c66:	490b      	ldr	r1, [pc, #44]	; (8000c94 <HAL_TIM_OC_DelayElapsedCallback+0x68c>)
 8000c68:	480c      	ldr	r0, [pc, #48]	; (8000c9c <HAL_TIM_OC_DelayElapsedCallback+0x694>)
 8000c6a:	f00b f9fb 	bl	800c064 <HAL_UART_Transmit>
}
 8000c6e:	bf00      	nop
 8000c70:	3740      	adds	r7, #64	; 0x40
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	24000378 	.word	0x24000378
 8000c7c:	24000020 	.word	0x24000020
 8000c80:	58020000 	.word	0x58020000
 8000c84:	0800dfa0 	.word	0x0800dfa0
 8000c88:	24000268 	.word	0x24000268
 8000c8c:	40013000 	.word	0x40013000
 8000c90:	2400052c 	.word	0x2400052c
 8000c94:	24000544 	.word	0x24000544
 8000c98:	2400054a 	.word	0x2400054a
 8000c9c:	24000410 	.word	0x24000410

08000ca0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	498e      	ldr	r1, [pc, #568]	; (8000ee4 <HAL_UART_RxCpltCallback+0x244>)
 8000cac:	488e      	ldr	r0, [pc, #568]	; (8000ee8 <HAL_UART_RxCpltCallback+0x248>)
 8000cae:	f00b fa6f 	bl	800c190 <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000cb2:	4b8c      	ldr	r3, [pc, #560]	; (8000ee4 <HAL_UART_RxCpltCallback+0x244>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	73fb      	strb	r3, [r7, #15]

  switch (key)
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	2b1c      	cmp	r3, #28
 8000cbc:	f200 810d 	bhi.w	8000eda <HAL_UART_RxCpltCallback+0x23a>
 8000cc0:	a201      	add	r2, pc, #4	; (adr r2, 8000cc8 <HAL_UART_RxCpltCallback+0x28>)
 8000cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc6:	bf00      	nop
 8000cc8:	08000da5 	.word	0x08000da5
 8000ccc:	08000dc1 	.word	0x08000dc1
 8000cd0:	08000ddd 	.word	0x08000ddd
 8000cd4:	08000dfd 	.word	0x08000dfd
 8000cd8:	08000e1d 	.word	0x08000e1d
 8000cdc:	08000e39 	.word	0x08000e39
 8000ce0:	08000e59 	.word	0x08000e59
 8000ce4:	08000e79 	.word	0x08000e79
 8000ce8:	08000d59 	.word	0x08000d59
 8000cec:	08000d67 	.word	0x08000d67
 8000cf0:	08000d4b 	.word	0x08000d4b
 8000cf4:	08000d3d 	.word	0x08000d3d
 8000cf8:	08000e95 	.word	0x08000e95
 8000cfc:	08000ea5 	.word	0x08000ea5
 8000d00:	08000eb5 	.word	0x08000eb5
 8000d04:	08000ec5 	.word	0x08000ec5
 8000d08:	08000ead 	.word	0x08000ead
 8000d0c:	08000ebd 	.word	0x08000ebd
 8000d10:	08000ecd 	.word	0x08000ecd
 8000d14:	08000db3 	.word	0x08000db3
 8000d18:	08000dcf 	.word	0x08000dcf
 8000d1c:	08000ded 	.word	0x08000ded
 8000d20:	08000e0d 	.word	0x08000e0d
 8000d24:	08000e2b 	.word	0x08000e2b
 8000d28:	08000e49 	.word	0x08000e49
 8000d2c:	08000e69 	.word	0x08000e69
 8000d30:	08000e87 	.word	0x08000e87
 8000d34:	08000d75 	.word	0x08000d75
 8000d38:	08000d8d 	.word	0x08000d8d
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000d3c:	4b6b      	ldr	r3, [pc, #428]	; (8000eec <HAL_UART_RxCpltCallback+0x24c>)
 8000d3e:	2140      	movs	r1, #64	; 0x40
 8000d40:	2201      	movs	r2, #1
 8000d42:	4618      	mov	r0, r3
 8000d44:	f005 fd30 	bl	80067a8 <HAL_GPIO_WritePin>
    break;
 8000d48:	e0c7      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000d4a:	4b68      	ldr	r3, [pc, #416]	; (8000eec <HAL_UART_RxCpltCallback+0x24c>)
 8000d4c:	2140      	movs	r1, #64	; 0x40
 8000d4e:	2200      	movs	r2, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f005 fd29 	bl	80067a8 <HAL_GPIO_WritePin>
    break;
 8000d56:	e0c0      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
  }

  case 0x08:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 8000d58:	4b64      	ldr	r3, [pc, #400]	; (8000eec <HAL_UART_RxCpltCallback+0x24c>)
 8000d5a:	2180      	movs	r1, #128	; 0x80
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f005 fd22 	bl	80067a8 <HAL_GPIO_WritePin>
    break;
 8000d64:	e0b9      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x09:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 8000d66:	4b61      	ldr	r3, [pc, #388]	; (8000eec <HAL_UART_RxCpltCallback+0x24c>)
 8000d68:	2180      	movs	r1, #128	; 0x80
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f005 fd1b 	bl	80067a8 <HAL_GPIO_WritePin>
    break;
 8000d72:	e0b2      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x1B:
  {
    if (step < 7)
 8000d74:	4b5e      	ldr	r3, [pc, #376]	; (8000ef0 <HAL_UART_RxCpltCallback+0x250>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b06      	cmp	r3, #6
 8000d7a:	f200 80ab 	bhi.w	8000ed4 <HAL_UART_RxCpltCallback+0x234>
    {
      step++;
 8000d7e:	4b5c      	ldr	r3, [pc, #368]	; (8000ef0 <HAL_UART_RxCpltCallback+0x250>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	3301      	adds	r3, #1
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4b5a      	ldr	r3, [pc, #360]	; (8000ef0 <HAL_UART_RxCpltCallback+0x250>)
 8000d88:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000d8a:	e0a3      	b.n	8000ed4 <HAL_UART_RxCpltCallback+0x234>
  }
  case 0x1C:
  {
    if (step > 0)
 8000d8c:	4b58      	ldr	r3, [pc, #352]	; (8000ef0 <HAL_UART_RxCpltCallback+0x250>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	f000 80a1 	beq.w	8000ed8 <HAL_UART_RxCpltCallback+0x238>
    {
      step--;
 8000d96:	4b56      	ldr	r3, [pc, #344]	; (8000ef0 <HAL_UART_RxCpltCallback+0x250>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4b54      	ldr	r3, [pc, #336]	; (8000ef0 <HAL_UART_RxCpltCallback+0x250>)
 8000da0:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000da2:	e099      	b.n	8000ed8 <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x00:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000da4:	4b53      	ldr	r3, [pc, #332]	; (8000ef4 <HAL_UART_RxCpltCallback+0x254>)
 8000da6:	2120      	movs	r1, #32
 8000da8:	2201      	movs	r2, #1
 8000daa:	4618      	mov	r0, r3
 8000dac:	f005 fcfc 	bl	80067a8 <HAL_GPIO_WritePin>
    break;
 8000db0:	e093      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x13:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000db2:	4b50      	ldr	r3, [pc, #320]	; (8000ef4 <HAL_UART_RxCpltCallback+0x254>)
 8000db4:	2120      	movs	r1, #32
 8000db6:	2200      	movs	r2, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f005 fcf5 	bl	80067a8 <HAL_GPIO_WritePin>
    break;
 8000dbe:	e08c      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x01:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000dc0:	4b4c      	ldr	r3, [pc, #304]	; (8000ef4 <HAL_UART_RxCpltCallback+0x254>)
 8000dc2:	2140      	movs	r1, #64	; 0x40
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f005 fcee 	bl	80067a8 <HAL_GPIO_WritePin>
    break;
 8000dcc:	e085      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000dce:	4b49      	ldr	r3, [pc, #292]	; (8000ef4 <HAL_UART_RxCpltCallback+0x254>)
 8000dd0:	2140      	movs	r1, #64	; 0x40
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f005 fce7 	bl	80067a8 <HAL_GPIO_WritePin>
    break;
 8000dda:	e07e      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000ddc:	4b46      	ldr	r3, [pc, #280]	; (8000ef8 <HAL_UART_RxCpltCallback+0x258>)
 8000dde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de2:	2201      	movs	r2, #1
 8000de4:	4618      	mov	r0, r3
 8000de6:	f005 fcdf 	bl	80067a8 <HAL_GPIO_WritePin>
    break;
 8000dea:	e076      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000dec:	4b42      	ldr	r3, [pc, #264]	; (8000ef8 <HAL_UART_RxCpltCallback+0x258>)
 8000dee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df2:	2200      	movs	r2, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f005 fcd7 	bl	80067a8 <HAL_GPIO_WritePin>
    break;
 8000dfa:	e06e      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000dfc:	4b3e      	ldr	r3, [pc, #248]	; (8000ef8 <HAL_UART_RxCpltCallback+0x258>)
 8000dfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e02:	2201      	movs	r2, #1
 8000e04:	4618      	mov	r0, r3
 8000e06:	f005 fccf 	bl	80067a8 <HAL_GPIO_WritePin>
    break;
 8000e0a:	e066      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000e0c:	4b3a      	ldr	r3, [pc, #232]	; (8000ef8 <HAL_UART_RxCpltCallback+0x258>)
 8000e0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e12:	2200      	movs	r2, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f005 fcc7 	bl	80067a8 <HAL_GPIO_WritePin>
    break;
 8000e1a:	e05e      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000e1c:	4b36      	ldr	r3, [pc, #216]	; (8000ef8 <HAL_UART_RxCpltCallback+0x258>)
 8000e1e:	2180      	movs	r1, #128	; 0x80
 8000e20:	2201      	movs	r2, #1
 8000e22:	4618      	mov	r0, r3
 8000e24:	f005 fcc0 	bl	80067a8 <HAL_GPIO_WritePin>
    break;
 8000e28:	e057      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000e2a:	4b33      	ldr	r3, [pc, #204]	; (8000ef8 <HAL_UART_RxCpltCallback+0x258>)
 8000e2c:	2180      	movs	r1, #128	; 0x80
 8000e2e:	2200      	movs	r2, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f005 fcb9 	bl	80067a8 <HAL_GPIO_WritePin>
    break;
 8000e36:	e050      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000e38:	4b2f      	ldr	r3, [pc, #188]	; (8000ef8 <HAL_UART_RxCpltCallback+0x258>)
 8000e3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e3e:	2201      	movs	r2, #1
 8000e40:	4618      	mov	r0, r3
 8000e42:	f005 fcb1 	bl	80067a8 <HAL_GPIO_WritePin>
    break;
 8000e46:	e048      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000e48:	4b2b      	ldr	r3, [pc, #172]	; (8000ef8 <HAL_UART_RxCpltCallback+0x258>)
 8000e4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e4e:	2200      	movs	r2, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f005 fca9 	bl	80067a8 <HAL_GPIO_WritePin>
    break;
 8000e56:	e040      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000e58:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <HAL_UART_RxCpltCallback+0x258>)
 8000e5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e5e:	2201      	movs	r2, #1
 8000e60:	4618      	mov	r0, r3
 8000e62:	f005 fca1 	bl	80067a8 <HAL_GPIO_WritePin>
    break;
 8000e66:	e038      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000e68:	4b23      	ldr	r3, [pc, #140]	; (8000ef8 <HAL_UART_RxCpltCallback+0x258>)
 8000e6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e6e:	2200      	movs	r2, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f005 fc99 	bl	80067a8 <HAL_GPIO_WritePin>
    break;
 8000e76:	e030      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000e78:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <HAL_UART_RxCpltCallback+0x258>)
 8000e7a:	2140      	movs	r1, #64	; 0x40
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f005 fc92 	bl	80067a8 <HAL_GPIO_WritePin>
    break;
 8000e84:	e029      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000e86:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <HAL_UART_RxCpltCallback+0x258>)
 8000e88:	2140      	movs	r1, #64	; 0x40
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f005 fc8b 	bl	80067a8 <HAL_GPIO_WritePin>
    break;
 8000e92:	e022      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x0C:
  {
      HAL_SuspendTick();
 8000e94:	f001 fc1a 	bl	80026cc <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000e98:	2101      	movs	r1, #1
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f006 fa28 	bl	80072f0 <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8000ea0:	f7ff fb9c 	bl	80005dc <__NVIC_SystemReset>
      break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 8000ea4:	4b15      	ldr	r3, [pc, #84]	; (8000efc <HAL_UART_RxCpltCallback+0x25c>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
    break;
 8000eaa:	e016      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x10:
  {
    PMT_ON = 0;
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <HAL_UART_RxCpltCallback+0x25c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
    break;
 8000eb2:	e012      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_UART_RxCpltCallback+0x260>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	701a      	strb	r2, [r3, #0]
    break;
 8000eba:	e00e      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 8000ebc:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <HAL_UART_RxCpltCallback+0x260>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
    break;
 8000ec2:	e00a      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x0F:
  {
    HK_ON = 1;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <HAL_UART_RxCpltCallback+0x264>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	701a      	strb	r2, [r3, #0]
    break;
 8000eca:	e006      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x12:
  {
    HK_ON = 0;
 8000ecc:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <HAL_UART_RxCpltCallback+0x264>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
    break;
 8000ed2:	e002      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
    break;
 8000ed4:	bf00      	nop
 8000ed6:	e000      	b.n	8000eda <HAL_UART_RxCpltCallback+0x23a>
    break;
 8000ed8:	bf00      	nop
  }
  }
}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	240004a0 	.word	0x240004a0
 8000ee8:	24000410 	.word	0x24000410
 8000eec:	58021400 	.word	0x58021400
 8000ef0:	2400052a 	.word	0x2400052a
 8000ef4:	58020400 	.word	0x58020400
 8000ef8:	58020800 	.word	0x58020800
 8000efc:	24000020 	.word	0x24000020
 8000f00:	24000021 	.word	0x24000021
 8000f04:	24000022 	.word	0x24000022

08000f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f0c:	f001 fb28 	bl	8002560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f10:	f000 f868 	bl	8000fe4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f14:	f000 f8ec 	bl	80010f0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f18:	f000 fd52 	bl	80019c0 <MX_GPIO_Init>
  MX_DAC1_Init();
 8000f1c:	f000 fad0 	bl	80014c0 <MX_DAC1_Init>
  MX_TIM1_Init();
 8000f20:	f000 fbf0 	bl	8001704 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f24:	f000 fc7e 	bl	8001824 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000f28:	f000 fafc 	bl	8001524 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f2c:	f000 fb3a 	bl	80015a4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000f30:	f000 fb90 	bl	8001654 <MX_SPI2_Init>
  MX_DMA_Init();
 8000f34:	f000 fd1c 	bl	8001970 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000f38:	f000 fcce 	bl	80018d8 <MX_USART1_UART_Init>
  MX_ADC3_Init();
 8000f3c:	f000 fa36 	bl	80013ac <MX_ADC3_Init>
  MX_ADC1_Init();
 8000f40:	f000 f904 	bl	800114c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000f44:	2100      	movs	r1, #0
 8000f46:	4821      	ldr	r0, [pc, #132]	; (8000fcc <main+0xc4>)
 8000f48:	f003 f80b 	bl	8003f62 <HAL_DAC_Start>

  /* Start Timers with OC & Interrupt */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4820      	ldr	r0, [pc, #128]	; (8000fd0 <main+0xc8>)
 8000f50:	f009 ff6c 	bl	800ae2c <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000f54:	210c      	movs	r1, #12
 8000f56:	481f      	ldr	r0, [pc, #124]	; (8000fd4 <main+0xcc>)
 8000f58:	f009 ff68 	bl	800ae2c <HAL_TIM_OC_Start_IT>

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8000f5c:	bf00      	nop
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <main+0xd0>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	69db      	ldr	r3, [r3, #28]
 8000f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f6c:	d0f7      	beq.n	8000f5e <main+0x56>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8000f6e:	bf00      	nop
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <main+0xd0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f7e:	d1f7      	bne.n	8000f70 <main+0x68>

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <main+0xd4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <main+0xd4>)
 8000f88:	2210      	movs	r2, #16
 8000f8a:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x5B; // send "["
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <main+0xd4>)
 8000f8e:	225b      	movs	r2, #91	; 0x5b
 8000f90:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <main+0xd4>)
 8000f94:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000f98:	480f      	ldr	r0, [pc, #60]	; (8000fd8 <main+0xd0>)
 8000f9a:	f00c fe09 	bl	800dbb0 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <main+0xa0>
      Error_Handler();
 8000fa4:	f000 fdca 	bl	8001b3c <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <main+0xd0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <main+0xd0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000fb6:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 8000fb8:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <main+0xd0>)
 8000fba:	f00c fe54 	bl	800dc66 <HAL_UARTEx_EnableStopMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4907      	ldr	r1, [pc, #28]	; (8000fe0 <main+0xd8>)
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <main+0xd0>)
 8000fc4:	f00b f8e4 	bl	800c190 <HAL_UART_Receive_IT>
 8000fc8:	e7f9      	b.n	8000fbe <main+0xb6>
 8000fca:	bf00      	nop
 8000fcc:	24000208 	.word	0x24000208
 8000fd0:	24000378 	.word	0x24000378
 8000fd4:	240003c4 	.word	0x240003c4
 8000fd8:	24000410 	.word	0x24000410
 8000fdc:	24000504 	.word	0x24000504
 8000fe0:	240004a0 	.word	0x240004a0

08000fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b09c      	sub	sp, #112	; 0x70
 8000fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fee:	224c      	movs	r2, #76	; 0x4c
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f00c ffb4 	bl	800df60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	2220      	movs	r2, #32
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f00c ffae 	bl	800df60 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001004:	2002      	movs	r0, #2
 8001006:	f006 f9af 	bl	8007368 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800100a:	2300      	movs	r3, #0
 800100c:	603b      	str	r3, [r7, #0]
 800100e:	4b35      	ldr	r3, [pc, #212]	; (80010e4 <SystemClock_Config+0x100>)
 8001010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001012:	4a34      	ldr	r2, [pc, #208]	; (80010e4 <SystemClock_Config+0x100>)
 8001014:	f023 0301 	bic.w	r3, r3, #1
 8001018:	62d3      	str	r3, [r2, #44]	; 0x2c
 800101a:	4b32      	ldr	r3, [pc, #200]	; (80010e4 <SystemClock_Config+0x100>)
 800101c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <SystemClock_Config+0x104>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800102c:	4a2e      	ldr	r2, [pc, #184]	; (80010e8 <SystemClock_Config+0x104>)
 800102e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001032:	6193      	str	r3, [r2, #24]
 8001034:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <SystemClock_Config+0x104>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001040:	bf00      	nop
 8001042:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <SystemClock_Config+0x104>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800104a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800104e:	d1f8      	bne.n	8001042 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001050:	4b26      	ldr	r3, [pc, #152]	; (80010ec <SystemClock_Config+0x108>)
 8001052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001054:	4a25      	ldr	r2, [pc, #148]	; (80010ec <SystemClock_Config+0x108>)
 8001056:	f023 0303 	bic.w	r3, r3, #3
 800105a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800105c:	2302      	movs	r3, #2
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001060:	2301      	movs	r3, #1
 8001062:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001064:	2340      	movs	r3, #64	; 0x40
 8001066:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001068:	2302      	movs	r3, #2
 800106a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800106c:	2300      	movs	r3, #0
 800106e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001070:	2304      	movs	r3, #4
 8001072:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001074:	230c      	movs	r3, #12
 8001076:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001078:	2302      	movs	r3, #2
 800107a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800107c:	2302      	movs	r3, #2
 800107e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001080:	2302      	movs	r3, #2
 8001082:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001084:	230c      	movs	r3, #12
 8001086:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001088:	2300      	movs	r3, #0
 800108a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001094:	4618      	mov	r0, r3
 8001096:	f006 f9a1 	bl	80073dc <HAL_RCC_OscConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010a0:	f000 fd4c 	bl	8001b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a4:	233f      	movs	r3, #63	; 0x3f
 80010a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a8:	2303      	movs	r3, #3
 80010aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 80010ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2101      	movs	r1, #1
 80010ca:	4618      	mov	r0, r3
 80010cc:	f006 fdb4 	bl	8007c38 <HAL_RCC_ClockConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80010d6:	f000 fd31 	bl	8001b3c <Error_Handler>
  }
}
 80010da:	bf00      	nop
 80010dc:	3770      	adds	r7, #112	; 0x70
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	58000400 	.word	0x58000400
 80010e8:	58024800 	.word	0x58024800
 80010ec:	58024400 	.word	0x58024400

080010f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b0b0      	sub	sp, #192	; 0xc0
 80010f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	22bc      	movs	r2, #188	; 0xbc
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f00c ff2f 	bl	800df60 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001102:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001106:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001108:	2304      	movs	r3, #4
 800110a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 800110c:	2309      	movs	r3, #9
 800110e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001110:	2304      	movs	r3, #4
 8001112:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001114:	2302      	movs	r3, #2
 8001116:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001118:	2302      	movs	r3, #2
 800111a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800111c:	23c0      	movs	r3, #192	; 0xc0
 800111e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001120:	2320      	movs	r3, #32
 8001122:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001124:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800112a:	2300      	movs	r3, #0
 800112c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4618      	mov	r0, r3
 8001134:	f007 f90c 	bl	8008350 <HAL_RCCEx_PeriphCLKConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 800113e:	f000 fcfd 	bl	8001b3c <Error_Handler>
  }
}
 8001142:	bf00      	nop
 8001144:	37c0      	adds	r7, #192	; 0xc0
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800115e:	463b      	mov	r3, r7
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
 800116c:	615a      	str	r2, [r3, #20]
 800116e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001170:	4b8a      	ldr	r3, [pc, #552]	; (800139c <MX_ADC1_Init+0x250>)
 8001172:	4a8b      	ldr	r2, [pc, #556]	; (80013a0 <MX_ADC1_Init+0x254>)
 8001174:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001176:	4b89      	ldr	r3, [pc, #548]	; (800139c <MX_ADC1_Init+0x250>)
 8001178:	2200      	movs	r2, #0
 800117a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800117c:	4b87      	ldr	r3, [pc, #540]	; (800139c <MX_ADC1_Init+0x250>)
 800117e:	2208      	movs	r2, #8
 8001180:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001182:	4b86      	ldr	r3, [pc, #536]	; (800139c <MX_ADC1_Init+0x250>)
 8001184:	2201      	movs	r2, #1
 8001186:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001188:	4b84      	ldr	r3, [pc, #528]	; (800139c <MX_ADC1_Init+0x250>)
 800118a:	2204      	movs	r2, #4
 800118c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800118e:	4b83      	ldr	r3, [pc, #524]	; (800139c <MX_ADC1_Init+0x250>)
 8001190:	2200      	movs	r2, #0
 8001192:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001194:	4b81      	ldr	r3, [pc, #516]	; (800139c <MX_ADC1_Init+0x250>)
 8001196:	2200      	movs	r2, #0
 8001198:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 15;
 800119a:	4b80      	ldr	r3, [pc, #512]	; (800139c <MX_ADC1_Init+0x250>)
 800119c:	220f      	movs	r2, #15
 800119e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011a0:	4b7e      	ldr	r3, [pc, #504]	; (800139c <MX_ADC1_Init+0x250>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a6:	4b7d      	ldr	r3, [pc, #500]	; (800139c <MX_ADC1_Init+0x250>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ac:	4b7b      	ldr	r3, [pc, #492]	; (800139c <MX_ADC1_Init+0x250>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80011b2:	4b7a      	ldr	r3, [pc, #488]	; (800139c <MX_ADC1_Init+0x250>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011b8:	4b78      	ldr	r3, [pc, #480]	; (800139c <MX_ADC1_Init+0x250>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80011be:	4b77      	ldr	r3, [pc, #476]	; (800139c <MX_ADC1_Init+0x250>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011c4:	4b75      	ldr	r3, [pc, #468]	; (800139c <MX_ADC1_Init+0x250>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011cc:	4873      	ldr	r0, [pc, #460]	; (800139c <MX_ADC1_Init+0x250>)
 80011ce:	f001 fc97 	bl	8002b00 <HAL_ADC_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011d8:	f000 fcb0 	bl	8001b3c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	4619      	mov	r1, r3
 80011e6:	486d      	ldr	r0, [pc, #436]	; (800139c <MX_ADC1_Init+0x250>)
 80011e8:	f002 fcac 	bl	8003b44 <HAL_ADCEx_MultiModeConfigChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80011f2:	f000 fca3 	bl	8001b3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80011f6:	4b6b      	ldr	r3, [pc, #428]	; (80013a4 <MX_ADC1_Init+0x258>)
 80011f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011fa:	2306      	movs	r3, #6
 80011fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001202:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001206:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001208:	2304      	movs	r3, #4
 800120a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	4619      	mov	r1, r3
 8001218:	4860      	ldr	r0, [pc, #384]	; (800139c <MX_ADC1_Init+0x250>)
 800121a:	f001 fef5 	bl	8003008 <HAL_ADC_ConfigChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001224:	f000 fc8a 	bl	8001b3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001228:	4b5f      	ldr	r3, [pc, #380]	; (80013a8 <MX_ADC1_Init+0x25c>)
 800122a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800122c:	230c      	movs	r3, #12
 800122e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001230:	463b      	mov	r3, r7
 8001232:	4619      	mov	r1, r3
 8001234:	4859      	ldr	r0, [pc, #356]	; (800139c <MX_ADC1_Init+0x250>)
 8001236:	f001 fee7 	bl	8003008 <HAL_ADC_ConfigChannel>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8001240:	f000 fc7c 	bl	8001b3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001244:	2312      	movs	r3, #18
 8001246:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001248:	463b      	mov	r3, r7
 800124a:	4619      	mov	r1, r3
 800124c:	4853      	ldr	r0, [pc, #332]	; (800139c <MX_ADC1_Init+0x250>)
 800124e:	f001 fedb 	bl	8003008 <HAL_ADC_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8001258:	f000 fc70 	bl	8001b3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800125c:	2318      	movs	r3, #24
 800125e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001260:	463b      	mov	r3, r7
 8001262:	4619      	mov	r1, r3
 8001264:	484d      	ldr	r0, [pc, #308]	; (800139c <MX_ADC1_Init+0x250>)
 8001266:	f001 fecf 	bl	8003008 <HAL_ADC_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 8001270:	f000 fc64 	bl	8001b3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001278:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800127a:	463b      	mov	r3, r7
 800127c:	4619      	mov	r1, r3
 800127e:	4847      	ldr	r0, [pc, #284]	; (800139c <MX_ADC1_Init+0x250>)
 8001280:	f001 fec2 	bl	8003008 <HAL_ADC_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_ADC1_Init+0x142>
  {
    Error_Handler();
 800128a:	f000 fc57 	bl	8001b3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800128e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001292:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001294:	463b      	mov	r3, r7
 8001296:	4619      	mov	r1, r3
 8001298:	4840      	ldr	r0, [pc, #256]	; (800139c <MX_ADC1_Init+0x250>)
 800129a:	f001 feb5 	bl	8003008 <HAL_ADC_ConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 80012a4:	f000 fc4a 	bl	8001b3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80012a8:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80012ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ae:	463b      	mov	r3, r7
 80012b0:	4619      	mov	r1, r3
 80012b2:	483a      	ldr	r0, [pc, #232]	; (800139c <MX_ADC1_Init+0x250>)
 80012b4:	f001 fea8 	bl	8003008 <HAL_ADC_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_ADC1_Init+0x176>
  {
    Error_Handler();
 80012be:	f000 fc3d 	bl	8001b3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80012c2:	f44f 7389 	mov.w	r3, #274	; 0x112
 80012c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	4619      	mov	r1, r3
 80012cc:	4833      	ldr	r0, [pc, #204]	; (800139c <MX_ADC1_Init+0x250>)
 80012ce:	f001 fe9b 	bl	8003008 <HAL_ADC_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 80012d8:	f000 fc30 	bl	8001b3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80012dc:	f44f 738c 	mov.w	r3, #280	; 0x118
 80012e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e2:	463b      	mov	r3, r7
 80012e4:	4619      	mov	r1, r3
 80012e6:	482d      	ldr	r0, [pc, #180]	; (800139c <MX_ADC1_Init+0x250>)
 80012e8:	f001 fe8e 	bl	8003008 <HAL_ADC_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 80012f2:	f000 fc23 	bl	8001b3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80012f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fc:	463b      	mov	r3, r7
 80012fe:	4619      	mov	r1, r3
 8001300:	4826      	ldr	r0, [pc, #152]	; (800139c <MX_ADC1_Init+0x250>)
 8001302:	f001 fe81 	bl	8003008 <HAL_ADC_ConfigChannel>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 800130c:	f000 fc16 	bl	8001b3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001310:	f240 2306 	movw	r3, #518	; 0x206
 8001314:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001316:	463b      	mov	r3, r7
 8001318:	4619      	mov	r1, r3
 800131a:	4820      	ldr	r0, [pc, #128]	; (800139c <MX_ADC1_Init+0x250>)
 800131c:	f001 fe74 	bl	8003008 <HAL_ADC_ConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_ADC1_Init+0x1de>
  {
    Error_Handler();
 8001326:	f000 fc09 	bl	8001b3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_12;
 800132a:	f44f 7303 	mov.w	r3, #524	; 0x20c
 800132e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001330:	463b      	mov	r3, r7
 8001332:	4619      	mov	r1, r3
 8001334:	4819      	ldr	r0, [pc, #100]	; (800139c <MX_ADC1_Init+0x250>)
 8001336:	f001 fe67 	bl	8003008 <HAL_ADC_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_ADC1_Init+0x1f8>
  {
    Error_Handler();
 8001340:	f000 fbfc 	bl	8001b3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8001344:	f240 2312 	movw	r3, #530	; 0x212
 8001348:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134a:	463b      	mov	r3, r7
 800134c:	4619      	mov	r1, r3
 800134e:	4813      	ldr	r0, [pc, #76]	; (800139c <MX_ADC1_Init+0x250>)
 8001350:	f001 fe5a 	bl	8003008 <HAL_ADC_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 800135a:	f000 fbef 	bl	8001b3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_14;
 800135e:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001362:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001364:	463b      	mov	r3, r7
 8001366:	4619      	mov	r1, r3
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <MX_ADC1_Init+0x250>)
 800136a:	f001 fe4d 	bl	8003008 <HAL_ADC_ConfigChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_ADC1_Init+0x22c>
  {
    Error_Handler();
 8001374:	f000 fbe2 	bl	8001b3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8001378:	f44f 7340 	mov.w	r3, #768	; 0x300
 800137c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800137e:	463b      	mov	r3, r7
 8001380:	4619      	mov	r1, r3
 8001382:	4806      	ldr	r0, [pc, #24]	; (800139c <MX_ADC1_Init+0x250>)
 8001384:	f001 fe40 	bl	8003008 <HAL_ADC_ConfigChannel>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_ADC1_Init+0x246>
  {
    Error_Handler();
 800138e:	f000 fbd5 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	3728      	adds	r7, #40	; 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	24000050 	.word	0x24000050
 80013a0:	40022000 	.word	0x40022000
 80013a4:	2e300800 	.word	0x2e300800
 80013a8:	08600004 	.word	0x08600004

080013ac <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
 80013c0:	615a      	str	r2, [r3, #20]
 80013c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013c4:	4b3a      	ldr	r3, [pc, #232]	; (80014b0 <MX_ADC3_Init+0x104>)
 80013c6:	4a3b      	ldr	r2, [pc, #236]	; (80014b4 <MX_ADC3_Init+0x108>)
 80013c8:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013ca:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <MX_ADC3_Init+0x104>)
 80013cc:	2208      	movs	r2, #8
 80013ce:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013d0:	4b37      	ldr	r3, [pc, #220]	; (80014b0 <MX_ADC3_Init+0x104>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013d6:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <MX_ADC3_Init+0x104>)
 80013d8:	2204      	movs	r2, #4
 80013da:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80013dc:	4b34      	ldr	r3, [pc, #208]	; (80014b0 <MX_ADC3_Init+0x104>)
 80013de:	2200      	movs	r2, #0
 80013e0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80013e2:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <MX_ADC3_Init+0x104>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80013e8:	4b31      	ldr	r3, [pc, #196]	; (80014b0 <MX_ADC3_Init+0x104>)
 80013ea:	2204      	movs	r2, #4
 80013ec:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013ee:	4b30      	ldr	r3, [pc, #192]	; (80014b0 <MX_ADC3_Init+0x104>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013f4:	4b2e      	ldr	r3, [pc, #184]	; (80014b0 <MX_ADC3_Init+0x104>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013fa:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <MX_ADC3_Init+0x104>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001400:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <MX_ADC3_Init+0x104>)
 8001402:	2200      	movs	r2, #0
 8001404:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001406:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <MX_ADC3_Init+0x104>)
 8001408:	2200      	movs	r2, #0
 800140a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800140c:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <MX_ADC3_Init+0x104>)
 800140e:	2200      	movs	r2, #0
 8001410:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001412:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <MX_ADC3_Init+0x104>)
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800141a:	4825      	ldr	r0, [pc, #148]	; (80014b0 <MX_ADC3_Init+0x104>)
 800141c:	f001 fb70 	bl	8002b00 <HAL_ADC_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8001426:	f000 fb89 	bl	8001b3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800142a:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <MX_ADC3_Init+0x10c>)
 800142c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800142e:	2306      	movs	r3, #6
 8001430:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001436:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800143a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800143c:	2304      	movs	r3, #4
 800143e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	4619      	mov	r1, r3
 800144c:	4818      	ldr	r0, [pc, #96]	; (80014b0 <MX_ADC3_Init+0x104>)
 800144e:	f001 fddb 	bl	8003008 <HAL_ADC_ConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001458:	f000 fb70 	bl	8001b3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800145c:	4b17      	ldr	r3, [pc, #92]	; (80014bc <MX_ADC3_Init+0x110>)
 800145e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001460:	230c      	movs	r3, #12
 8001462:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	4619      	mov	r1, r3
 8001468:	4811      	ldr	r0, [pc, #68]	; (80014b0 <MX_ADC3_Init+0x104>)
 800146a:	f001 fdcd 	bl	8003008 <HAL_ADC_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8001474:	f000 fb62 	bl	8001b3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001478:	2312      	movs	r3, #18
 800147a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	4619      	mov	r1, r3
 8001480:	480b      	ldr	r0, [pc, #44]	; (80014b0 <MX_ADC3_Init+0x104>)
 8001482:	f001 fdc1 	bl	8003008 <HAL_ADC_ConfigChannel>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 800148c:	f000 fb56 	bl	8001b3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001490:	2318      	movs	r3, #24
 8001492:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	4619      	mov	r1, r3
 8001498:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_ADC3_Init+0x104>)
 800149a:	f001 fdb5 	bl	8003008 <HAL_ADC_ConfigChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_ADC3_Init+0xfc>
  {
    Error_Handler();
 80014a4:	f000 fb4a 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	3720      	adds	r7, #32
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	240000b4 	.word	0x240000b4
 80014b4:	58026000 	.word	0x58026000
 80014b8:	cb840000 	.word	0xcb840000
 80014bc:	04300002 	.word	0x04300002

080014c0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2224      	movs	r2, #36	; 0x24
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f00c fd47 	bl	800df60 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <MX_DAC1_Init+0x5c>)
 80014d4:	4a12      	ldr	r2, [pc, #72]	; (8001520 <MX_DAC1_Init+0x60>)
 80014d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014d8:	4810      	ldr	r0, [pc, #64]	; (800151c <MX_DAC1_Init+0x5c>)
 80014da:	f002 fd20 	bl	8003f1e <HAL_DAC_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80014e4:	f000 fb2a 	bl	8001b3c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80014f4:	2301      	movs	r3, #1
 80014f6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	2200      	movs	r2, #0
 8001500:	4619      	mov	r1, r3
 8001502:	4806      	ldr	r0, [pc, #24]	; (800151c <MX_DAC1_Init+0x5c>)
 8001504:	f002 fd80 	bl	8004008 <HAL_DAC_ConfigChannel>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800150e:	f000 fb15 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	3728      	adds	r7, #40	; 0x28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	24000208 	.word	0x24000208
 8001520:	40007400 	.word	0x40007400

08001524 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001528:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <MX_I2C1_Init+0x74>)
 800152a:	4a1c      	ldr	r2, [pc, #112]	; (800159c <MX_I2C1_Init+0x78>)
 800152c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800152e:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <MX_I2C1_Init+0x74>)
 8001530:	4a1b      	ldr	r2, [pc, #108]	; (80015a0 <MX_I2C1_Init+0x7c>)
 8001532:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001534:	4b18      	ldr	r3, [pc, #96]	; (8001598 <MX_I2C1_Init+0x74>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800153a:	4b17      	ldr	r3, [pc, #92]	; (8001598 <MX_I2C1_Init+0x74>)
 800153c:	2201      	movs	r2, #1
 800153e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001540:	4b15      	ldr	r3, [pc, #84]	; (8001598 <MX_I2C1_Init+0x74>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <MX_I2C1_Init+0x74>)
 8001548:	2200      	movs	r2, #0
 800154a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <MX_I2C1_Init+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_I2C1_Init+0x74>)
 8001554:	2200      	movs	r2, #0
 8001556:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <MX_I2C1_Init+0x74>)
 800155a:	2200      	movs	r2, #0
 800155c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800155e:	480e      	ldr	r0, [pc, #56]	; (8001598 <MX_I2C1_Init+0x74>)
 8001560:	f005 f93c 	bl	80067dc <HAL_I2C_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800156a:	f000 fae7 	bl	8001b3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800156e:	2100      	movs	r1, #0
 8001570:	4809      	ldr	r0, [pc, #36]	; (8001598 <MX_I2C1_Init+0x74>)
 8001572:	f005 fe25 	bl	80071c0 <HAL_I2CEx_ConfigAnalogFilter>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800157c:	f000 fade 	bl	8001b3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001580:	2100      	movs	r1, #0
 8001582:	4805      	ldr	r0, [pc, #20]	; (8001598 <MX_I2C1_Init+0x74>)
 8001584:	f005 fe67 	bl	8007256 <HAL_I2CEx_ConfigDigitalFilter>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800158e:	f000 fad5 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2400021c 	.word	0x2400021c
 800159c:	40005400 	.word	0x40005400
 80015a0:	20303e5d 	.word	0x20303e5d

080015a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015a8:	4b28      	ldr	r3, [pc, #160]	; (800164c <MX_SPI1_Init+0xa8>)
 80015aa:	4a29      	ldr	r2, [pc, #164]	; (8001650 <MX_SPI1_Init+0xac>)
 80015ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ae:	4b27      	ldr	r3, [pc, #156]	; (800164c <MX_SPI1_Init+0xa8>)
 80015b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80015b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80015b6:	4b25      	ldr	r3, [pc, #148]	; (800164c <MX_SPI1_Init+0xa8>)
 80015b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015bc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80015be:	4b23      	ldr	r3, [pc, #140]	; (800164c <MX_SPI1_Init+0xa8>)
 80015c0:	220f      	movs	r2, #15
 80015c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015c4:	4b21      	ldr	r3, [pc, #132]	; (800164c <MX_SPI1_Init+0xa8>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <MX_SPI1_Init+0xa8>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015d0:	4b1e      	ldr	r3, [pc, #120]	; (800164c <MX_SPI1_Init+0xa8>)
 80015d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80015d8:	4b1c      	ldr	r3, [pc, #112]	; (800164c <MX_SPI1_Init+0xa8>)
 80015da:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80015de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <MX_SPI1_Init+0xa8>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015e6:	4b19      	ldr	r3, [pc, #100]	; (800164c <MX_SPI1_Init+0xa8>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ec:	4b17      	ldr	r3, [pc, #92]	; (800164c <MX_SPI1_Init+0xa8>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80015f2:	4b16      	ldr	r3, [pc, #88]	; (800164c <MX_SPI1_Init+0xa8>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <MX_SPI1_Init+0xa8>)
 80015fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015fe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <MX_SPI1_Init+0xa8>)
 8001602:	2200      	movs	r2, #0
 8001604:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <MX_SPI1_Init+0xa8>)
 8001608:	2200      	movs	r2, #0
 800160a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <MX_SPI1_Init+0xa8>)
 800160e:	2200      	movs	r2, #0
 8001610:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <MX_SPI1_Init+0xa8>)
 8001614:	2200      	movs	r2, #0
 8001616:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <MX_SPI1_Init+0xa8>)
 800161a:	2200      	movs	r2, #0
 800161c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <MX_SPI1_Init+0xa8>)
 8001620:	2200      	movs	r2, #0
 8001622:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_SPI1_Init+0xa8>)
 8001626:	2200      	movs	r2, #0
 8001628:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <MX_SPI1_Init+0xa8>)
 800162c:	2200      	movs	r2, #0
 800162e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <MX_SPI1_Init+0xa8>)
 8001632:	2200      	movs	r2, #0
 8001634:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_SPI1_Init+0xa8>)
 8001638:	f009 f816 	bl	800a668 <HAL_SPI_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001642:	f000 fa7b 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	24000268 	.word	0x24000268
 8001650:	40013000 	.word	0x40013000

08001654 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001658:	4b28      	ldr	r3, [pc, #160]	; (80016fc <MX_SPI2_Init+0xa8>)
 800165a:	4a29      	ldr	r2, [pc, #164]	; (8001700 <MX_SPI2_Init+0xac>)
 800165c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800165e:	4b27      	ldr	r3, [pc, #156]	; (80016fc <MX_SPI2_Init+0xa8>)
 8001660:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001664:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001666:	4b25      	ldr	r3, [pc, #148]	; (80016fc <MX_SPI2_Init+0xa8>)
 8001668:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800166c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800166e:	4b23      	ldr	r3, [pc, #140]	; (80016fc <MX_SPI2_Init+0xa8>)
 8001670:	220f      	movs	r2, #15
 8001672:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001674:	4b21      	ldr	r3, [pc, #132]	; (80016fc <MX_SPI2_Init+0xa8>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800167a:	4b20      	ldr	r3, [pc, #128]	; (80016fc <MX_SPI2_Init+0xa8>)
 800167c:	2200      	movs	r2, #0
 800167e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001680:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <MX_SPI2_Init+0xa8>)
 8001682:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001686:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001688:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <MX_SPI2_Init+0xa8>)
 800168a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800168e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001690:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <MX_SPI2_Init+0xa8>)
 8001692:	2200      	movs	r2, #0
 8001694:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001696:	4b19      	ldr	r3, [pc, #100]	; (80016fc <MX_SPI2_Init+0xa8>)
 8001698:	2200      	movs	r2, #0
 800169a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800169c:	4b17      	ldr	r3, [pc, #92]	; (80016fc <MX_SPI2_Init+0xa8>)
 800169e:	2200      	movs	r2, #0
 80016a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <MX_SPI2_Init+0xa8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <MX_SPI2_Init+0xa8>)
 80016aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ae:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <MX_SPI2_Init+0xa8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <MX_SPI2_Init+0xa8>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <MX_SPI2_Init+0xa8>)
 80016be:	2200      	movs	r2, #0
 80016c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <MX_SPI2_Init+0xa8>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <MX_SPI2_Init+0xa8>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <MX_SPI2_Init+0xa8>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <MX_SPI2_Init+0xa8>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <MX_SPI2_Init+0xa8>)
 80016dc:	2200      	movs	r2, #0
 80016de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <MX_SPI2_Init+0xa8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016e6:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_SPI2_Init+0xa8>)
 80016e8:	f008 ffbe 	bl	800a668 <HAL_SPI_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80016f2:	f000 fa23 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	240002f0 	.word	0x240002f0
 8001700:	40003800 	.word	0x40003800

08001704 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b096      	sub	sp, #88	; 0x58
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001716:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]
 8001726:	615a      	str	r2, [r3, #20]
 8001728:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	222c      	movs	r2, #44	; 0x2c
 800172e:	2100      	movs	r1, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f00c fc15 	bl	800df60 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001736:	4b39      	ldr	r3, [pc, #228]	; (800181c <MX_TIM1_Init+0x118>)
 8001738:	4a39      	ldr	r2, [pc, #228]	; (8001820 <MX_TIM1_Init+0x11c>)
 800173a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 800173c:	4b37      	ldr	r3, [pc, #220]	; (800181c <MX_TIM1_Init+0x118>)
 800173e:	2263      	movs	r2, #99	; 0x63
 8001740:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001742:	4b36      	ldr	r3, [pc, #216]	; (800181c <MX_TIM1_Init+0x118>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 48000 - 1;
 8001748:	4b34      	ldr	r3, [pc, #208]	; (800181c <MX_TIM1_Init+0x118>)
 800174a:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 800174e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001750:	4b32      	ldr	r3, [pc, #200]	; (800181c <MX_TIM1_Init+0x118>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001756:	4b31      	ldr	r3, [pc, #196]	; (800181c <MX_TIM1_Init+0x118>)
 8001758:	2200      	movs	r2, #0
 800175a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175c:	4b2f      	ldr	r3, [pc, #188]	; (800181c <MX_TIM1_Init+0x118>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001762:	482e      	ldr	r0, [pc, #184]	; (800181c <MX_TIM1_Init+0x118>)
 8001764:	f009 fcbc 	bl	800b0e0 <HAL_TIM_PWM_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800176e:	f000 f9e5 	bl	8001b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001772:	2300      	movs	r3, #0
 8001774:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001776:	2300      	movs	r3, #0
 8001778:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800177e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001782:	4619      	mov	r1, r3
 8001784:	4825      	ldr	r0, [pc, #148]	; (800181c <MX_TIM1_Init+0x118>)
 8001786:	f00a faf3 	bl	800bd70 <HAL_TIMEx_MasterConfigSynchronization>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001790:	f000 f9d4 	bl	8001b3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001794:	2360      	movs	r3, #96	; 0x60
 8001796:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480 -1;
 8001798:	f240 13df 	movw	r3, #479	; 0x1df
 800179c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800179e:	2300      	movs	r3, #0
 80017a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017a2:	2300      	movs	r3, #0
 80017a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017ae:	2300      	movs	r3, #0
 80017b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017b6:	2200      	movs	r2, #0
 80017b8:	4619      	mov	r1, r3
 80017ba:	4818      	ldr	r0, [pc, #96]	; (800181c <MX_TIM1_Init+0x118>)
 80017bc:	f009 fe06 	bl	800b3cc <HAL_TIM_PWM_ConfigChannel>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80017c6:	f000 f9b9 	bl	8001b3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	4619      	mov	r1, r3
 80017fe:	4807      	ldr	r0, [pc, #28]	; (800181c <MX_TIM1_Init+0x118>)
 8001800:	f00a fb44 	bl	800be8c <HAL_TIMEx_ConfigBreakDeadTime>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800180a:	f000 f997 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800180e:	4803      	ldr	r0, [pc, #12]	; (800181c <MX_TIM1_Init+0x118>)
 8001810:	f000 fcba 	bl	8002188 <HAL_TIM_MspPostInit>

}
 8001814:	bf00      	nop
 8001816:	3758      	adds	r7, #88	; 0x58
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	24000378 	.word	0x24000378
 8001820:	40010000 	.word	0x40010000

08001824 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	; 0x28
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182a:	f107 031c 	add.w	r3, r7, #28
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001836:	463b      	mov	r3, r7
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
 8001844:	615a      	str	r2, [r3, #20]
 8001846:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001848:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <MX_TIM2_Init+0xb0>)
 800184a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800184e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 -1;
 8001850:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <MX_TIM2_Init+0xb0>)
 8001852:	2263      	movs	r2, #99	; 0x63
 8001854:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001856:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <MX_TIM2_Init+0xb0>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000 - 1;
 800185c:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <MX_TIM2_Init+0xb0>)
 800185e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001862:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <MX_TIM2_Init+0xb0>)
 8001866:	2200      	movs	r2, #0
 8001868:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186a:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <MX_TIM2_Init+0xb0>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001870:	4818      	ldr	r0, [pc, #96]	; (80018d4 <MX_TIM2_Init+0xb0>)
 8001872:	f009 fc35 	bl	800b0e0 <HAL_TIM_PWM_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800187c:	f000 f95e 	bl	8001b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001888:	f107 031c 	add.w	r3, r7, #28
 800188c:	4619      	mov	r1, r3
 800188e:	4811      	ldr	r0, [pc, #68]	; (80018d4 <MX_TIM2_Init+0xb0>)
 8001890:	f00a fa6e 	bl	800bd70 <HAL_TIMEx_MasterConfigSynchronization>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800189a:	f000 f94f 	bl	8001b3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800189e:	2360      	movs	r3, #96	; 0x60
 80018a0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 480 - 1;
 80018a2:	f240 13df 	movw	r3, #479	; 0x1df
 80018a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018b0:	463b      	mov	r3, r7
 80018b2:	220c      	movs	r2, #12
 80018b4:	4619      	mov	r1, r3
 80018b6:	4807      	ldr	r0, [pc, #28]	; (80018d4 <MX_TIM2_Init+0xb0>)
 80018b8:	f009 fd88 	bl	800b3cc <HAL_TIM_PWM_ConfigChannel>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80018c2:	f000 f93b 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018c6:	4803      	ldr	r0, [pc, #12]	; (80018d4 <MX_TIM2_Init+0xb0>)
 80018c8:	f000 fc5e 	bl	8002188 <HAL_TIM_MspPostInit>

}
 80018cc:	bf00      	nop
 80018ce:	3728      	adds	r7, #40	; 0x28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	240003c4 	.word	0x240003c4

080018d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018dc:	4b22      	ldr	r3, [pc, #136]	; (8001968 <MX_USART1_UART_Init+0x90>)
 80018de:	4a23      	ldr	r2, [pc, #140]	; (800196c <MX_USART1_UART_Init+0x94>)
 80018e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80018e2:	4b21      	ldr	r3, [pc, #132]	; (8001968 <MX_USART1_UART_Init+0x90>)
 80018e4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80018e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ea:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <MX_USART1_UART_Init+0x90>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018f0:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <MX_USART1_UART_Init+0x90>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018f6:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <MX_USART1_UART_Init+0x90>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018fc:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <MX_USART1_UART_Init+0x90>)
 80018fe:	220c      	movs	r2, #12
 8001900:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001902:	4b19      	ldr	r3, [pc, #100]	; (8001968 <MX_USART1_UART_Init+0x90>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001908:	4b17      	ldr	r3, [pc, #92]	; (8001968 <MX_USART1_UART_Init+0x90>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <MX_USART1_UART_Init+0x90>)
 8001910:	2200      	movs	r2, #0
 8001912:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <MX_USART1_UART_Init+0x90>)
 8001916:	2200      	movs	r2, #0
 8001918:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800191a:	4b13      	ldr	r3, [pc, #76]	; (8001968 <MX_USART1_UART_Init+0x90>)
 800191c:	2200      	movs	r2, #0
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001920:	4811      	ldr	r0, [pc, #68]	; (8001968 <MX_USART1_UART_Init+0x90>)
 8001922:	f00a fb4f 	bl	800bfc4 <HAL_UART_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800192c:	f000 f906 	bl	8001b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001930:	2100      	movs	r1, #0
 8001932:	480d      	ldr	r0, [pc, #52]	; (8001968 <MX_USART1_UART_Init+0x90>)
 8001934:	f00c fa03 	bl	800dd3e <HAL_UARTEx_SetTxFifoThreshold>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800193e:	f000 f8fd 	bl	8001b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001942:	2100      	movs	r1, #0
 8001944:	4808      	ldr	r0, [pc, #32]	; (8001968 <MX_USART1_UART_Init+0x90>)
 8001946:	f00c fa38 	bl	800ddba <HAL_UARTEx_SetRxFifoThreshold>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001950:	f000 f8f4 	bl	8001b3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001954:	4804      	ldr	r0, [pc, #16]	; (8001968 <MX_USART1_UART_Init+0x90>)
 8001956:	f00c f9b9 	bl	800dccc <HAL_UARTEx_DisableFifoMode>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001960:	f000 f8ec 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	24000410 	.word	0x24000410
 800196c:	40011000 	.word	0x40011000

08001970 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001976:	4b11      	ldr	r3, [pc, #68]	; (80019bc <MX_DMA_Init+0x4c>)
 8001978:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800197c:	4a0f      	ldr	r2, [pc, #60]	; (80019bc <MX_DMA_Init+0x4c>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001986:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <MX_DMA_Init+0x4c>)
 8001988:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001994:	2200      	movs	r2, #0
 8001996:	2100      	movs	r1, #0
 8001998:	200b      	movs	r0, #11
 800199a:	f002 fa8c 	bl	8003eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800199e:	200b      	movs	r0, #11
 80019a0:	f002 faa3 	bl	8003eea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2100      	movs	r1, #0
 80019a8:	200c      	movs	r0, #12
 80019aa:	f002 fa84 	bl	8003eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80019ae:	200c      	movs	r0, #12
 80019b0:	f002 fa9b 	bl	8003eea <HAL_NVIC_EnableIRQ>

}
 80019b4:	bf00      	nop
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	58024400 	.word	0x58024400

080019c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08c      	sub	sp, #48	; 0x30
 80019c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
 80019d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d6:	4b54      	ldr	r3, [pc, #336]	; (8001b28 <MX_GPIO_Init+0x168>)
 80019d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019dc:	4a52      	ldr	r2, [pc, #328]	; (8001b28 <MX_GPIO_Init+0x168>)
 80019de:	f043 0304 	orr.w	r3, r3, #4
 80019e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019e6:	4b50      	ldr	r3, [pc, #320]	; (8001b28 <MX_GPIO_Init+0x168>)
 80019e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	61bb      	str	r3, [r7, #24]
 80019f2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019f4:	4b4c      	ldr	r3, [pc, #304]	; (8001b28 <MX_GPIO_Init+0x168>)
 80019f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fa:	4a4b      	ldr	r2, [pc, #300]	; (8001b28 <MX_GPIO_Init+0x168>)
 80019fc:	f043 0320 	orr.w	r3, r3, #32
 8001a00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a04:	4b48      	ldr	r3, [pc, #288]	; (8001b28 <MX_GPIO_Init+0x168>)
 8001a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0a:	f003 0320 	and.w	r3, r3, #32
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a12:	4b45      	ldr	r3, [pc, #276]	; (8001b28 <MX_GPIO_Init+0x168>)
 8001a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a18:	4a43      	ldr	r2, [pc, #268]	; (8001b28 <MX_GPIO_Init+0x168>)
 8001a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a22:	4b41      	ldr	r3, [pc, #260]	; (8001b28 <MX_GPIO_Init+0x168>)
 8001a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a30:	4b3d      	ldr	r3, [pc, #244]	; (8001b28 <MX_GPIO_Init+0x168>)
 8001a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a36:	4a3c      	ldr	r2, [pc, #240]	; (8001b28 <MX_GPIO_Init+0x168>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a40:	4b39      	ldr	r3, [pc, #228]	; (8001b28 <MX_GPIO_Init+0x168>)
 8001a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4e:	4b36      	ldr	r3, [pc, #216]	; (8001b28 <MX_GPIO_Init+0x168>)
 8001a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a54:	4a34      	ldr	r2, [pc, #208]	; (8001b28 <MX_GPIO_Init+0x168>)
 8001a56:	f043 0302 	orr.w	r3, r3, #2
 8001a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a5e:	4b32      	ldr	r3, [pc, #200]	; (8001b28 <MX_GPIO_Init+0x168>)
 8001a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a6c:	4b2e      	ldr	r3, [pc, #184]	; (8001b28 <MX_GPIO_Init+0x168>)
 8001a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a72:	4a2d      	ldr	r2, [pc, #180]	; (8001b28 <MX_GPIO_Init+0x168>)
 8001a74:	f043 0308 	orr.w	r3, r3, #8
 8001a78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a7c:	4b2a      	ldr	r3, [pc, #168]	; (8001b28 <MX_GPIO_Init+0x168>)
 8001a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	21c0      	movs	r1, #192	; 0xc0
 8001a8e:	4827      	ldr	r0, [pc, #156]	; (8001b2c <MX_GPIO_Init+0x16c>)
 8001a90:	f004 fe8a 	bl	80067a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001a94:	2200      	movs	r2, #0
 8001a96:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8001a9a:	4825      	ldr	r0, [pc, #148]	; (8001b30 <MX_GPIO_Init+0x170>)
 8001a9c:	f004 fe84 	bl	80067a8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2160      	movs	r1, #96	; 0x60
 8001aa4:	4823      	ldr	r0, [pc, #140]	; (8001b34 <MX_GPIO_Init+0x174>)
 8001aa6:	f004 fe7f 	bl	80067a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aaa:	23c0      	movs	r3, #192	; 0xc0
 8001aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001aba:	f107 031c 	add.w	r3, r7, #28
 8001abe:	4619      	mov	r1, r3
 8001ac0:	481a      	ldr	r0, [pc, #104]	; (8001b2c <MX_GPIO_Init+0x16c>)
 8001ac2:	f004 fca9 	bl	8006418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001ac6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001aca:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001acc:	2301      	movs	r3, #1
 8001ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad8:	f107 031c 	add.w	r3, r7, #28
 8001adc:	4619      	mov	r1, r3
 8001ade:	4814      	ldr	r0, [pc, #80]	; (8001b30 <MX_GPIO_Init+0x170>)
 8001ae0:	f004 fc9a 	bl	8006418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001ae4:	2360      	movs	r3, #96	; 0x60
 8001ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001af4:	2307      	movs	r3, #7
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af8:	f107 031c 	add.w	r3, r7, #28
 8001afc:	4619      	mov	r1, r3
 8001afe:	480e      	ldr	r0, [pc, #56]	; (8001b38 <MX_GPIO_Init+0x178>)
 8001b00:	f004 fc8a 	bl	8006418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001b04:	2360      	movs	r3, #96	; 0x60
 8001b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b14:	f107 031c 	add.w	r3, r7, #28
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4806      	ldr	r0, [pc, #24]	; (8001b34 <MX_GPIO_Init+0x174>)
 8001b1c:	f004 fc7c 	bl	8006418 <HAL_GPIO_Init>

}
 8001b20:	bf00      	nop
 8001b22:	3730      	adds	r7, #48	; 0x30
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	58024400 	.word	0x58024400
 8001b2c:	58021400 	.word	0x58021400
 8001b30:	58020800 	.word	0x58020800
 8001b34:	58020400 	.word	0x58020400
 8001b38:	58020c00 	.word	0x58020c00

08001b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b40:	b672      	cpsid	i
}
 8001b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <Error_Handler+0x8>
	...

08001b48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <HAL_MspInit+0x30>)
 8001b50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b54:	4a08      	ldr	r2, [pc, #32]	; (8001b78 <HAL_MspInit+0x30>)
 8001b56:	f043 0302 	orr.w	r3, r3, #2
 8001b5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_MspInit+0x30>)
 8001b60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	607b      	str	r3, [r7, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	58024400 	.word	0x58024400

08001b7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b090      	sub	sp, #64	; 0x40
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a93      	ldr	r2, [pc, #588]	; (8001de8 <HAL_ADC_MspInit+0x26c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	f040 80ac 	bne.w	8001cf8 <HAL_ADC_MspInit+0x17c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001ba0:	4b92      	ldr	r3, [pc, #584]	; (8001dec <HAL_ADC_MspInit+0x270>)
 8001ba2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ba6:	4a91      	ldr	r2, [pc, #580]	; (8001dec <HAL_ADC_MspInit+0x270>)
 8001ba8:	f043 0320 	orr.w	r3, r3, #32
 8001bac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001bb0:	4b8e      	ldr	r3, [pc, #568]	; (8001dec <HAL_ADC_MspInit+0x270>)
 8001bb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bb6:	f003 0320 	and.w	r3, r3, #32
 8001bba:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbe:	4b8b      	ldr	r3, [pc, #556]	; (8001dec <HAL_ADC_MspInit+0x270>)
 8001bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc4:	4a89      	ldr	r2, [pc, #548]	; (8001dec <HAL_ADC_MspInit+0x270>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bce:	4b87      	ldr	r3, [pc, #540]	; (8001dec <HAL_ADC_MspInit+0x270>)
 8001bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bdc:	4b83      	ldr	r3, [pc, #524]	; (8001dec <HAL_ADC_MspInit+0x270>)
 8001bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be2:	4a82      	ldr	r2, [pc, #520]	; (8001dec <HAL_ADC_MspInit+0x270>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bec:	4b7f      	ldr	r3, [pc, #508]	; (8001dec <HAL_ADC_MspInit+0x270>)
 8001bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	623b      	str	r3, [r7, #32]
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfa:	4b7c      	ldr	r3, [pc, #496]	; (8001dec <HAL_ADC_MspInit+0x270>)
 8001bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c00:	4a7a      	ldr	r2, [pc, #488]	; (8001dec <HAL_ADC_MspInit+0x270>)
 8001c02:	f043 0302 	orr.w	r3, r3, #2
 8001c06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c0a:	4b78      	ldr	r3, [pc, #480]	; (8001dec <HAL_ADC_MspInit+0x270>)
 8001c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c18:	4b74      	ldr	r3, [pc, #464]	; (8001dec <HAL_ADC_MspInit+0x270>)
 8001c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1e:	4a73      	ldr	r2, [pc, #460]	; (8001dec <HAL_ADC_MspInit+0x270>)
 8001c20:	f043 0320 	orr.w	r3, r3, #32
 8001c24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c28:	4b70      	ldr	r3, [pc, #448]	; (8001dec <HAL_ADC_MspInit+0x270>)
 8001c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c2e:	f003 0320 	and.w	r3, r3, #32
 8001c32:	61bb      	str	r3, [r7, #24]
 8001c34:	69bb      	ldr	r3, [r7, #24]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001c36:	2333      	movs	r3, #51	; 0x33
 8001c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c46:	4619      	mov	r1, r3
 8001c48:	4869      	ldr	r0, [pc, #420]	; (8001df0 <HAL_ADC_MspInit+0x274>)
 8001c4a:	f004 fbe5 	bl	8006418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001c4e:	23ef      	movs	r3, #239	; 0xef
 8001c50:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c52:	2303      	movs	r3, #3
 8001c54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4864      	ldr	r0, [pc, #400]	; (8001df4 <HAL_ADC_MspInit+0x278>)
 8001c62:	f004 fbd9 	bl	8006418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c66:	2303      	movs	r3, #3
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c76:	4619      	mov	r1, r3
 8001c78:	485f      	ldr	r0, [pc, #380]	; (8001df8 <HAL_ADC_MspInit+0x27c>)
 8001c7a:	f004 fbcd 	bl	8006418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c7e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c84:	2303      	movs	r3, #3
 8001c86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c90:	4619      	mov	r1, r3
 8001c92:	485a      	ldr	r0, [pc, #360]	; (8001dfc <HAL_ADC_MspInit+0x280>)
 8001c94:	f004 fbc0 	bl	8006418 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001c98:	4b59      	ldr	r3, [pc, #356]	; (8001e00 <HAL_ADC_MspInit+0x284>)
 8001c9a:	4a5a      	ldr	r2, [pc, #360]	; (8001e04 <HAL_ADC_MspInit+0x288>)
 8001c9c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001c9e:	4b58      	ldr	r3, [pc, #352]	; (8001e00 <HAL_ADC_MspInit+0x284>)
 8001ca0:	2209      	movs	r2, #9
 8001ca2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ca4:	4b56      	ldr	r3, [pc, #344]	; (8001e00 <HAL_ADC_MspInit+0x284>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001caa:	4b55      	ldr	r3, [pc, #340]	; (8001e00 <HAL_ADC_MspInit+0x284>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cb0:	4b53      	ldr	r3, [pc, #332]	; (8001e00 <HAL_ADC_MspInit+0x284>)
 8001cb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cb6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cb8:	4b51      	ldr	r3, [pc, #324]	; (8001e00 <HAL_ADC_MspInit+0x284>)
 8001cba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cbe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cc0:	4b4f      	ldr	r3, [pc, #316]	; (8001e00 <HAL_ADC_MspInit+0x284>)
 8001cc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cc6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001cc8:	4b4d      	ldr	r3, [pc, #308]	; (8001e00 <HAL_ADC_MspInit+0x284>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001cce:	4b4c      	ldr	r3, [pc, #304]	; (8001e00 <HAL_ADC_MspInit+0x284>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cd4:	4b4a      	ldr	r3, [pc, #296]	; (8001e00 <HAL_ADC_MspInit+0x284>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cda:	4849      	ldr	r0, [pc, #292]	; (8001e00 <HAL_ADC_MspInit+0x284>)
 8001cdc:	f002 fac4 	bl	8004268 <HAL_DMA_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_ADC_MspInit+0x16e>
    {
      Error_Handler();
 8001ce6:	f7ff ff29 	bl	8001b3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a44      	ldr	r2, [pc, #272]	; (8001e00 <HAL_ADC_MspInit+0x284>)
 8001cee:	64da      	str	r2, [r3, #76]	; 0x4c
 8001cf0:	4a43      	ldr	r2, [pc, #268]	; (8001e00 <HAL_ADC_MspInit+0x284>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001cf6:	e073      	b.n	8001de0 <HAL_ADC_MspInit+0x264>
  else if(hadc->Instance==ADC3)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a42      	ldr	r2, [pc, #264]	; (8001e08 <HAL_ADC_MspInit+0x28c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d16e      	bne.n	8001de0 <HAL_ADC_MspInit+0x264>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001d02:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <HAL_ADC_MspInit+0x270>)
 8001d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d08:	4a38      	ldr	r2, [pc, #224]	; (8001dec <HAL_ADC_MspInit+0x270>)
 8001d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d12:	4b36      	ldr	r3, [pc, #216]	; (8001dec <HAL_ADC_MspInit+0x270>)
 8001d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d20:	4b32      	ldr	r3, [pc, #200]	; (8001dec <HAL_ADC_MspInit+0x270>)
 8001d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d26:	4a31      	ldr	r2, [pc, #196]	; (8001dec <HAL_ADC_MspInit+0x270>)
 8001d28:	f043 0320 	orr.w	r3, r3, #32
 8001d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d30:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <HAL_ADC_MspInit+0x270>)
 8001d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d36:	f003 0320 	and.w	r3, r3, #32
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3e:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <HAL_ADC_MspInit+0x270>)
 8001d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d44:	4a29      	ldr	r2, [pc, #164]	; (8001dec <HAL_ADC_MspInit+0x270>)
 8001d46:	f043 0304 	orr.w	r3, r3, #4
 8001d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d4e:	4b27      	ldr	r3, [pc, #156]	; (8001dec <HAL_ADC_MspInit+0x270>)
 8001d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d62:	2303      	movs	r3, #3
 8001d64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4822      	ldr	r0, [pc, #136]	; (8001dfc <HAL_ADC_MspInit+0x280>)
 8001d72:	f004 fb51 	bl	8006418 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001d76:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001d7a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001d7e:	f000 fcc1 	bl	8002704 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001d82:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <HAL_ADC_MspInit+0x290>)
 8001d84:	4a22      	ldr	r2, [pc, #136]	; (8001e10 <HAL_ADC_MspInit+0x294>)
 8001d86:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001d88:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <HAL_ADC_MspInit+0x290>)
 8001d8a:	2273      	movs	r2, #115	; 0x73
 8001d8c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <HAL_ADC_MspInit+0x290>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d94:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_ADC_MspInit+0x290>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <HAL_ADC_MspInit+0x290>)
 8001d9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001da0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001da2:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <HAL_ADC_MspInit+0x290>)
 8001da4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001da8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001daa:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <HAL_ADC_MspInit+0x290>)
 8001dac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001db0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001db2:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <HAL_ADC_MspInit+0x290>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001db8:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <HAL_ADC_MspInit+0x290>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dbe:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <HAL_ADC_MspInit+0x290>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001dc4:	4811      	ldr	r0, [pc, #68]	; (8001e0c <HAL_ADC_MspInit+0x290>)
 8001dc6:	f002 fa4f 	bl	8004268 <HAL_DMA_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_ADC_MspInit+0x258>
      Error_Handler();
 8001dd0:	f7ff feb4 	bl	8001b3c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a0d      	ldr	r2, [pc, #52]	; (8001e0c <HAL_ADC_MspInit+0x290>)
 8001dd8:	64da      	str	r2, [r3, #76]	; 0x4c
 8001dda:	4a0c      	ldr	r2, [pc, #48]	; (8001e0c <HAL_ADC_MspInit+0x290>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001de0:	bf00      	nop
 8001de2:	3740      	adds	r7, #64	; 0x40
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40022000 	.word	0x40022000
 8001dec:	58024400 	.word	0x58024400
 8001df0:	58020800 	.word	0x58020800
 8001df4:	58020000 	.word	0x58020000
 8001df8:	58020400 	.word	0x58020400
 8001dfc:	58021400 	.word	0x58021400
 8001e00:	24000118 	.word	0x24000118
 8001e04:	40020010 	.word	0x40020010
 8001e08:	58026000 	.word	0x58026000
 8001e0c:	24000190 	.word	0x24000190
 8001e10:	40020028 	.word	0x40020028

08001e14 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08a      	sub	sp, #40	; 0x28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a18      	ldr	r2, [pc, #96]	; (8001e94 <HAL_DAC_MspInit+0x80>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d129      	bne.n	8001e8a <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001e36:	4b18      	ldr	r3, [pc, #96]	; (8001e98 <HAL_DAC_MspInit+0x84>)
 8001e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e3c:	4a16      	ldr	r2, [pc, #88]	; (8001e98 <HAL_DAC_MspInit+0x84>)
 8001e3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e46:	4b14      	ldr	r3, [pc, #80]	; (8001e98 <HAL_DAC_MspInit+0x84>)
 8001e48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e54:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <HAL_DAC_MspInit+0x84>)
 8001e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e5a:	4a0f      	ldr	r2, [pc, #60]	; (8001e98 <HAL_DAC_MspInit+0x84>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <HAL_DAC_MspInit+0x84>)
 8001e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e72:	2310      	movs	r3, #16
 8001e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e76:	2303      	movs	r3, #3
 8001e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7e:	f107 0314 	add.w	r3, r7, #20
 8001e82:	4619      	mov	r1, r3
 8001e84:	4805      	ldr	r0, [pc, #20]	; (8001e9c <HAL_DAC_MspInit+0x88>)
 8001e86:	f004 fac7 	bl	8006418 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001e8a:	bf00      	nop
 8001e8c:	3728      	adds	r7, #40	; 0x28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40007400 	.word	0x40007400
 8001e98:	58024400 	.word	0x58024400
 8001e9c:	58020000 	.word	0x58020000

08001ea0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b0b8      	sub	sp, #224	; 0xe0
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eb8:	f107 0310 	add.w	r3, r7, #16
 8001ebc:	22bc      	movs	r2, #188	; 0xbc
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f00c f84d 	bl	800df60 <memset>
  if(hi2c->Instance==I2C1)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a25      	ldr	r2, [pc, #148]	; (8001f60 <HAL_I2C_MspInit+0xc0>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d142      	bne.n	8001f56 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ed0:	2308      	movs	r3, #8
 8001ed2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eda:	f107 0310 	add.w	r3, r7, #16
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f006 fa36 	bl	8008350 <HAL_RCCEx_PeriphCLKConfig>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001eea:	f7ff fe27 	bl	8001b3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eee:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <HAL_I2C_MspInit+0xc4>)
 8001ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef4:	4a1b      	ldr	r2, [pc, #108]	; (8001f64 <HAL_I2C_MspInit+0xc4>)
 8001ef6:	f043 0302 	orr.w	r3, r3, #2
 8001efa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001efe:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <HAL_I2C_MspInit+0xc4>)
 8001f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f14:	2312      	movs	r3, #18
 8001f16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f26:	2304      	movs	r3, #4
 8001f28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f30:	4619      	mov	r1, r3
 8001f32:	480d      	ldr	r0, [pc, #52]	; (8001f68 <HAL_I2C_MspInit+0xc8>)
 8001f34:	f004 fa70 	bl	8006418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f38:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_I2C_MspInit+0xc4>)
 8001f3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f3e:	4a09      	ldr	r2, [pc, #36]	; (8001f64 <HAL_I2C_MspInit+0xc4>)
 8001f40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f44:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_I2C_MspInit+0xc4>)
 8001f4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f56:	bf00      	nop
 8001f58:	37e0      	adds	r7, #224	; 0xe0
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40005400 	.word	0x40005400
 8001f64:	58024400 	.word	0x58024400
 8001f68:	58020400 	.word	0x58020400

08001f6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b0ba      	sub	sp, #232	; 0xe8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f84:	f107 0318 	add.w	r3, r7, #24
 8001f88:	22bc      	movs	r2, #188	; 0xbc
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f00b ffe7 	bl	800df60 <memset>
  if(hspi->Instance==SPI1)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a49      	ldr	r2, [pc, #292]	; (80020bc <HAL_SPI_MspInit+0x150>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d142      	bne.n	8002022 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fa6:	f107 0318 	add.w	r3, r7, #24
 8001faa:	4618      	mov	r0, r3
 8001fac:	f006 f9d0 	bl	8008350 <HAL_RCCEx_PeriphCLKConfig>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001fb6:	f7ff fdc1 	bl	8001b3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fba:	4b41      	ldr	r3, [pc, #260]	; (80020c0 <HAL_SPI_MspInit+0x154>)
 8001fbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fc0:	4a3f      	ldr	r2, [pc, #252]	; (80020c0 <HAL_SPI_MspInit+0x154>)
 8001fc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fc6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001fca:	4b3d      	ldr	r3, [pc, #244]	; (80020c0 <HAL_SPI_MspInit+0x154>)
 8001fcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd8:	4b39      	ldr	r3, [pc, #228]	; (80020c0 <HAL_SPI_MspInit+0x154>)
 8001fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fde:	4a38      	ldr	r2, [pc, #224]	; (80020c0 <HAL_SPI_MspInit+0x154>)
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fe8:	4b35      	ldr	r3, [pc, #212]	; (80020c0 <HAL_SPI_MspInit+0x154>)
 8001fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001ff6:	2318      	movs	r3, #24
 8001ff8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002008:	2300      	movs	r3, #0
 800200a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800200e:	2305      	movs	r3, #5
 8002010:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002014:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002018:	4619      	mov	r1, r3
 800201a:	482a      	ldr	r0, [pc, #168]	; (80020c4 <HAL_SPI_MspInit+0x158>)
 800201c:	f004 f9fc 	bl	8006418 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002020:	e047      	b.n	80020b2 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a28      	ldr	r2, [pc, #160]	; (80020c8 <HAL_SPI_MspInit+0x15c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d142      	bne.n	80020b2 <HAL_SPI_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800202c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002030:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002032:	2300      	movs	r3, #0
 8002034:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002036:	f107 0318 	add.w	r3, r7, #24
 800203a:	4618      	mov	r0, r3
 800203c:	f006 f988 	bl	8008350 <HAL_RCCEx_PeriphCLKConfig>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_SPI_MspInit+0xde>
      Error_Handler();
 8002046:	f7ff fd79 	bl	8001b3c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800204a:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <HAL_SPI_MspInit+0x154>)
 800204c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002050:	4a1b      	ldr	r2, [pc, #108]	; (80020c0 <HAL_SPI_MspInit+0x154>)
 8002052:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002056:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800205a:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <HAL_SPI_MspInit+0x154>)
 800205c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002068:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <HAL_SPI_MspInit+0x154>)
 800206a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800206e:	4a14      	ldr	r2, [pc, #80]	; (80020c0 <HAL_SPI_MspInit+0x154>)
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <HAL_SPI_MspInit+0x154>)
 800207a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002086:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800208a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208e:	2302      	movs	r3, #2
 8002090:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209a:	2300      	movs	r3, #0
 800209c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020a0:	2305      	movs	r3, #5
 80020a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020aa:	4619      	mov	r1, r3
 80020ac:	4805      	ldr	r0, [pc, #20]	; (80020c4 <HAL_SPI_MspInit+0x158>)
 80020ae:	f004 f9b3 	bl	8006418 <HAL_GPIO_Init>
}
 80020b2:	bf00      	nop
 80020b4:	37e8      	adds	r7, #232	; 0xe8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40013000 	.word	0x40013000
 80020c0:	58024400 	.word	0x58024400
 80020c4:	58020400 	.word	0x58020400
 80020c8:	40003800 	.word	0x40003800

080020cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a29      	ldr	r2, [pc, #164]	; (8002180 <HAL_TIM_PWM_MspInit+0xb4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d12f      	bne.n	800213e <HAL_TIM_PWM_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020de:	4b29      	ldr	r3, [pc, #164]	; (8002184 <HAL_TIM_PWM_MspInit+0xb8>)
 80020e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020e4:	4a27      	ldr	r2, [pc, #156]	; (8002184 <HAL_TIM_PWM_MspInit+0xb8>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80020ee:	4b25      	ldr	r3, [pc, #148]	; (8002184 <HAL_TIM_PWM_MspInit+0xb8>)
 80020f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2100      	movs	r1, #0
 8002100:	2018      	movs	r0, #24
 8002102:	f001 fed8 	bl	8003eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002106:	2018      	movs	r0, #24
 8002108:	f001 feef 	bl	8003eea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800210c:	2200      	movs	r2, #0
 800210e:	2100      	movs	r1, #0
 8002110:	2019      	movs	r0, #25
 8002112:	f001 fed0 	bl	8003eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002116:	2019      	movs	r0, #25
 8002118:	f001 fee7 	bl	8003eea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800211c:	2200      	movs	r2, #0
 800211e:	2100      	movs	r1, #0
 8002120:	201a      	movs	r0, #26
 8002122:	f001 fec8 	bl	8003eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002126:	201a      	movs	r0, #26
 8002128:	f001 fedf 	bl	8003eea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800212c:	2200      	movs	r2, #0
 800212e:	2100      	movs	r1, #0
 8002130:	201b      	movs	r0, #27
 8002132:	f001 fec0 	bl	8003eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002136:	201b      	movs	r0, #27
 8002138:	f001 fed7 	bl	8003eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800213c:	e01b      	b.n	8002176 <HAL_TIM_PWM_MspInit+0xaa>
  else if(htim_pwm->Instance==TIM2)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002146:	d116      	bne.n	8002176 <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002148:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <HAL_TIM_PWM_MspInit+0xb8>)
 800214a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800214e:	4a0d      	ldr	r2, [pc, #52]	; (8002184 <HAL_TIM_PWM_MspInit+0xb8>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002158:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <HAL_TIM_PWM_MspInit+0xb8>)
 800215a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002166:	2200      	movs	r2, #0
 8002168:	2100      	movs	r1, #0
 800216a:	201c      	movs	r0, #28
 800216c:	f001 fea3 	bl	8003eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002170:	201c      	movs	r0, #28
 8002172:	f001 feba 	bl	8003eea <HAL_NVIC_EnableIRQ>
}
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40010000 	.word	0x40010000
 8002184:	58024400 	.word	0x58024400

08002188 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08a      	sub	sp, #40	; 0x28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a26      	ldr	r2, [pc, #152]	; (8002240 <HAL_TIM_MspPostInit+0xb8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d120      	bne.n	80021ec <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	4b26      	ldr	r3, [pc, #152]	; (8002244 <HAL_TIM_MspPostInit+0xbc>)
 80021ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b0:	4a24      	ldr	r2, [pc, #144]	; (8002244 <HAL_TIM_MspPostInit+0xbc>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ba:	4b22      	ldr	r3, [pc, #136]	; (8002244 <HAL_TIM_MspPostInit+0xbc>)
 80021bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d6:	2300      	movs	r3, #0
 80021d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021da:	2301      	movs	r3, #1
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	4619      	mov	r1, r3
 80021e4:	4818      	ldr	r0, [pc, #96]	; (8002248 <HAL_TIM_MspPostInit+0xc0>)
 80021e6:	f004 f917 	bl	8006418 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80021ea:	e024      	b.n	8002236 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f4:	d11f      	bne.n	8002236 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <HAL_TIM_MspPostInit+0xbc>)
 80021f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021fc:	4a11      	ldr	r2, [pc, #68]	; (8002244 <HAL_TIM_MspPostInit+0xbc>)
 80021fe:	f043 0302 	orr.w	r3, r3, #2
 8002202:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <HAL_TIM_MspPostInit+0xbc>)
 8002208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002214:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	2300      	movs	r3, #0
 8002224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002226:	2301      	movs	r3, #1
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	4619      	mov	r1, r3
 8002230:	4806      	ldr	r0, [pc, #24]	; (800224c <HAL_TIM_MspPostInit+0xc4>)
 8002232:	f004 f8f1 	bl	8006418 <HAL_GPIO_Init>
}
 8002236:	bf00      	nop
 8002238:	3728      	adds	r7, #40	; 0x28
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40010000 	.word	0x40010000
 8002244:	58024400 	.word	0x58024400
 8002248:	58020000 	.word	0x58020000
 800224c:	58020400 	.word	0x58020400

08002250 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b0b8      	sub	sp, #224	; 0xe0
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002258:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002268:	f107 0310 	add.w	r3, r7, #16
 800226c:	22bc      	movs	r2, #188	; 0xbc
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f00b fe75 	bl	800df60 <memset>
  if(huart->Instance==USART1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a25      	ldr	r2, [pc, #148]	; (8002310 <HAL_UART_MspInit+0xc0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d142      	bne.n	8002306 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002280:	2301      	movs	r3, #1
 8002282:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002284:	2300      	movs	r3, #0
 8002286:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800228a:	f107 0310 	add.w	r3, r7, #16
 800228e:	4618      	mov	r0, r3
 8002290:	f006 f85e 	bl	8008350 <HAL_RCCEx_PeriphCLKConfig>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800229a:	f7ff fc4f 	bl	8001b3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800229e:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <HAL_UART_MspInit+0xc4>)
 80022a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022a4:	4a1b      	ldr	r2, [pc, #108]	; (8002314 <HAL_UART_MspInit+0xc4>)
 80022a6:	f043 0310 	orr.w	r3, r3, #16
 80022aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022ae:	4b19      	ldr	r3, [pc, #100]	; (8002314 <HAL_UART_MspInit+0xc4>)
 80022b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022bc:	4b15      	ldr	r3, [pc, #84]	; (8002314 <HAL_UART_MspInit+0xc4>)
 80022be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c2:	4a14      	ldr	r2, [pc, #80]	; (8002314 <HAL_UART_MspInit+0xc4>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022cc:	4b11      	ldr	r3, [pc, #68]	; (8002314 <HAL_UART_MspInit+0xc4>)
 80022ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e2:	2302      	movs	r3, #2
 80022e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022f4:	2307      	movs	r3, #7
 80022f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022fe:	4619      	mov	r1, r3
 8002300:	4805      	ldr	r0, [pc, #20]	; (8002318 <HAL_UART_MspInit+0xc8>)
 8002302:	f004 f889 	bl	8006418 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002306:	bf00      	nop
 8002308:	37e0      	adds	r7, #224	; 0xe0
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40011000 	.word	0x40011000
 8002314:	58024400 	.word	0x58024400
 8002318:	58020000 	.word	0x58020000

0800231c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002320:	e7fe      	b.n	8002320 <NMI_Handler+0x4>

08002322 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002326:	e7fe      	b.n	8002326 <HardFault_Handler+0x4>

08002328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800232c:	e7fe      	b.n	800232c <MemManage_Handler+0x4>

0800232e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002332:	e7fe      	b.n	8002332 <BusFault_Handler+0x4>

08002334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002338:	e7fe      	b.n	8002338 <UsageFault_Handler+0x4>

0800233a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002368:	f000 f96c 	bl	8002644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800236c:	bf00      	nop
 800236e:	bd80      	pop	{r7, pc}

08002370 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002374:	4802      	ldr	r0, [pc, #8]	; (8002380 <DMA1_Stream0_IRQHandler+0x10>)
 8002376:	f002 fd3d 	bl	8004df4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	24000118 	.word	0x24000118

08002384 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002388:	4802      	ldr	r0, [pc, #8]	; (8002394 <DMA1_Stream1_IRQHandler+0x10>)
 800238a:	f002 fd33 	bl	8004df4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	24000190 	.word	0x24000190

08002398 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800239c:	4802      	ldr	r0, [pc, #8]	; (80023a8 <TIM1_BRK_IRQHandler+0x10>)
 800239e:	f008 fef6 	bl	800b18e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	24000378 	.word	0x24000378

080023ac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023b0:	4802      	ldr	r0, [pc, #8]	; (80023bc <TIM1_UP_IRQHandler+0x10>)
 80023b2:	f008 feec 	bl	800b18e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	24000378 	.word	0x24000378

080023c0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023c4:	4802      	ldr	r0, [pc, #8]	; (80023d0 <TIM1_TRG_COM_IRQHandler+0x10>)
 80023c6:	f008 fee2 	bl	800b18e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	24000378 	.word	0x24000378

080023d4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <TIM1_CC_IRQHandler+0x10>)
 80023da:	f008 fed8 	bl	800b18e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	24000378 	.word	0x24000378

080023e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <TIM2_IRQHandler+0x10>)
 80023ee:	f008 fece 	bl	800b18e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	240003c4 	.word	0x240003c4

080023fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002400:	4b37      	ldr	r3, [pc, #220]	; (80024e0 <SystemInit+0xe4>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002406:	4a36      	ldr	r2, [pc, #216]	; (80024e0 <SystemInit+0xe4>)
 8002408:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800240c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002410:	4b34      	ldr	r3, [pc, #208]	; (80024e4 <SystemInit+0xe8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	2b06      	cmp	r3, #6
 800241a:	d807      	bhi.n	800242c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800241c:	4b31      	ldr	r3, [pc, #196]	; (80024e4 <SystemInit+0xe8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f023 030f 	bic.w	r3, r3, #15
 8002424:	4a2f      	ldr	r2, [pc, #188]	; (80024e4 <SystemInit+0xe8>)
 8002426:	f043 0307 	orr.w	r3, r3, #7
 800242a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800242c:	4b2e      	ldr	r3, [pc, #184]	; (80024e8 <SystemInit+0xec>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a2d      	ldr	r2, [pc, #180]	; (80024e8 <SystemInit+0xec>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002438:	4b2b      	ldr	r3, [pc, #172]	; (80024e8 <SystemInit+0xec>)
 800243a:	2200      	movs	r2, #0
 800243c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800243e:	4b2a      	ldr	r3, [pc, #168]	; (80024e8 <SystemInit+0xec>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	4929      	ldr	r1, [pc, #164]	; (80024e8 <SystemInit+0xec>)
 8002444:	4b29      	ldr	r3, [pc, #164]	; (80024ec <SystemInit+0xf0>)
 8002446:	4013      	ands	r3, r2
 8002448:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800244a:	4b26      	ldr	r3, [pc, #152]	; (80024e4 <SystemInit+0xe8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d007      	beq.n	8002466 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002456:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <SystemInit+0xe8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f023 030f 	bic.w	r3, r3, #15
 800245e:	4a21      	ldr	r2, [pc, #132]	; (80024e4 <SystemInit+0xe8>)
 8002460:	f043 0307 	orr.w	r3, r3, #7
 8002464:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002466:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <SystemInit+0xec>)
 8002468:	2200      	movs	r2, #0
 800246a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800246c:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <SystemInit+0xec>)
 800246e:	2200      	movs	r2, #0
 8002470:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002472:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <SystemInit+0xec>)
 8002474:	2200      	movs	r2, #0
 8002476:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002478:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <SystemInit+0xec>)
 800247a:	4a1d      	ldr	r2, [pc, #116]	; (80024f0 <SystemInit+0xf4>)
 800247c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <SystemInit+0xec>)
 8002480:	4a1c      	ldr	r2, [pc, #112]	; (80024f4 <SystemInit+0xf8>)
 8002482:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002484:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <SystemInit+0xec>)
 8002486:	4a1c      	ldr	r2, [pc, #112]	; (80024f8 <SystemInit+0xfc>)
 8002488:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800248a:	4b17      	ldr	r3, [pc, #92]	; (80024e8 <SystemInit+0xec>)
 800248c:	2200      	movs	r2, #0
 800248e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002490:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <SystemInit+0xec>)
 8002492:	4a19      	ldr	r2, [pc, #100]	; (80024f8 <SystemInit+0xfc>)
 8002494:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002496:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <SystemInit+0xec>)
 8002498:	2200      	movs	r2, #0
 800249a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800249c:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <SystemInit+0xec>)
 800249e:	4a16      	ldr	r2, [pc, #88]	; (80024f8 <SystemInit+0xfc>)
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80024a2:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <SystemInit+0xec>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024a8:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <SystemInit+0xec>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0e      	ldr	r2, [pc, #56]	; (80024e8 <SystemInit+0xec>)
 80024ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <SystemInit+0xec>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <SystemInit+0x100>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	4b10      	ldr	r3, [pc, #64]	; (8002500 <SystemInit+0x104>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024c6:	d202      	bcs.n	80024ce <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80024c8:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <SystemInit+0x108>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80024ce:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <SystemInit+0x10c>)
 80024d0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80024d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000ed00 	.word	0xe000ed00
 80024e4:	52002000 	.word	0x52002000
 80024e8:	58024400 	.word	0x58024400
 80024ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80024f0:	02020200 	.word	0x02020200
 80024f4:	01ff0000 	.word	0x01ff0000
 80024f8:	01010280 	.word	0x01010280
 80024fc:	5c001000 	.word	0x5c001000
 8002500:	ffff0000 	.word	0xffff0000
 8002504:	51008108 	.word	0x51008108
 8002508:	52004000 	.word	0x52004000

0800250c <Reset_Handler>:
 800250c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002544 <LoopFillZerobss+0xe>
 8002510:	f7ff ff74 	bl	80023fc <SystemInit>
 8002514:	480c      	ldr	r0, [pc, #48]	; (8002548 <LoopFillZerobss+0x12>)
 8002516:	490d      	ldr	r1, [pc, #52]	; (800254c <LoopFillZerobss+0x16>)
 8002518:	4a0d      	ldr	r2, [pc, #52]	; (8002550 <LoopFillZerobss+0x1a>)
 800251a:	2300      	movs	r3, #0
 800251c:	e002      	b.n	8002524 <LoopCopyDataInit>

0800251e <CopyDataInit>:
 800251e:	58d4      	ldr	r4, [r2, r3]
 8002520:	50c4      	str	r4, [r0, r3]
 8002522:	3304      	adds	r3, #4

08002524 <LoopCopyDataInit>:
 8002524:	18c4      	adds	r4, r0, r3
 8002526:	428c      	cmp	r4, r1
 8002528:	d3f9      	bcc.n	800251e <CopyDataInit>
 800252a:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <LoopFillZerobss+0x1e>)
 800252c:	4c0a      	ldr	r4, [pc, #40]	; (8002558 <LoopFillZerobss+0x22>)
 800252e:	2300      	movs	r3, #0
 8002530:	e001      	b.n	8002536 <LoopFillZerobss>

08002532 <FillZerobss>:
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	3204      	adds	r2, #4

08002536 <LoopFillZerobss>:
 8002536:	42a2      	cmp	r2, r4
 8002538:	d3fb      	bcc.n	8002532 <FillZerobss>
 800253a:	f00b fced 	bl	800df18 <__libc_init_array>
 800253e:	f7fe fce3 	bl	8000f08 <main>
 8002542:	4770      	bx	lr
 8002544:	24080000 	.word	0x24080000
 8002548:	24000000 	.word	0x24000000
 800254c:	24000034 	.word	0x24000034
 8002550:	0800dff4 	.word	0x0800dff4
 8002554:	24000034 	.word	0x24000034
 8002558:	2400057c 	.word	0x2400057c

0800255c <ADC3_IRQHandler>:
 800255c:	e7fe      	b.n	800255c <ADC3_IRQHandler>
	...

08002560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002566:	2003      	movs	r0, #3
 8002568:	f001 fc9a 	bl	8003ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800256c:	f005 fd1a 	bl	8007fa4 <HAL_RCC_GetSysClockFreq>
 8002570:	4602      	mov	r2, r0
 8002572:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <HAL_Init+0x68>)
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	0a1b      	lsrs	r3, r3, #8
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	4913      	ldr	r1, [pc, #76]	; (80025cc <HAL_Init+0x6c>)
 800257e:	5ccb      	ldrb	r3, [r1, r3]
 8002580:	f003 031f 	and.w	r3, r3, #31
 8002584:	fa22 f303 	lsr.w	r3, r2, r3
 8002588:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800258a:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <HAL_Init+0x68>)
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	4a0e      	ldr	r2, [pc, #56]	; (80025cc <HAL_Init+0x6c>)
 8002594:	5cd3      	ldrb	r3, [r2, r3]
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
 80025a0:	4a0b      	ldr	r2, [pc, #44]	; (80025d0 <HAL_Init+0x70>)
 80025a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025a4:	4a0b      	ldr	r2, [pc, #44]	; (80025d4 <HAL_Init+0x74>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025aa:	200f      	movs	r0, #15
 80025ac:	f000 f814 	bl	80025d8 <HAL_InitTick>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e002      	b.n	80025c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80025ba:	f7ff fac5 	bl	8001b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	58024400 	.word	0x58024400
 80025cc:	0800dfa4 	.word	0x0800dfa4
 80025d0:	24000028 	.word	0x24000028
 80025d4:	24000024 	.word	0x24000024

080025d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80025e0:	4b15      	ldr	r3, [pc, #84]	; (8002638 <HAL_InitTick+0x60>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e021      	b.n	8002630 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80025ec:	4b13      	ldr	r3, [pc, #76]	; (800263c <HAL_InitTick+0x64>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <HAL_InitTick+0x60>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	4619      	mov	r1, r3
 80025f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80025fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002602:	4618      	mov	r0, r3
 8002604:	f001 fc7f 	bl	8003f06 <HAL_SYSTICK_Config>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e00e      	b.n	8002630 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b0f      	cmp	r3, #15
 8002616:	d80a      	bhi.n	800262e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002618:	2200      	movs	r2, #0
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002620:	f001 fc49 	bl	8003eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002624:	4a06      	ldr	r2, [pc, #24]	; (8002640 <HAL_InitTick+0x68>)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	e000      	b.n	8002630 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
}
 8002630:	4618      	mov	r0, r3
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	24000030 	.word	0x24000030
 800263c:	24000024 	.word	0x24000024
 8002640:	2400002c 	.word	0x2400002c

08002644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_IncTick+0x20>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_IncTick+0x24>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4413      	add	r3, r2
 8002654:	4a04      	ldr	r2, [pc, #16]	; (8002668 <HAL_IncTick+0x24>)
 8002656:	6013      	str	r3, [r2, #0]
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	24000030 	.word	0x24000030
 8002668:	24000578 	.word	0x24000578

0800266c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return uwTick;
 8002670:	4b03      	ldr	r3, [pc, #12]	; (8002680 <HAL_GetTick+0x14>)
 8002672:	681b      	ldr	r3, [r3, #0]
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	24000578 	.word	0x24000578

08002684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800268c:	f7ff ffee 	bl	800266c <HAL_GetTick>
 8002690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800269c:	d005      	beq.n	80026aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <HAL_Delay+0x44>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4413      	add	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026aa:	bf00      	nop
 80026ac:	f7ff ffde 	bl	800266c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d8f7      	bhi.n	80026ac <HAL_Delay+0x28>
  {
  }
}
 80026bc:	bf00      	nop
 80026be:	bf00      	nop
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	24000030 	.word	0x24000030

080026cc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_SuspendTick+0x1c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <HAL_SuspendTick+0x1c>)
 80026d6:	f023 0302 	bic.w	r3, r3, #2
 80026da:	6013      	str	r3, [r2, #0]
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000e010 	.word	0xe000e010

080026ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80026f0:	4b03      	ldr	r3, [pc, #12]	; (8002700 <HAL_GetREVID+0x14>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	0c1b      	lsrs	r3, r3, #16
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	5c001000 	.word	0x5c001000

08002704 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	43db      	mvns	r3, r3
 8002716:	401a      	ands	r2, r3
 8002718:	4904      	ldr	r1, [pc, #16]	; (800272c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	58000400 	.word	0x58000400

08002730 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	609a      	str	r2, [r3, #8]
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	609a      	str	r2, [r3, #8]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	3360      	adds	r3, #96	; 0x60
 80027aa:	461a      	mov	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	430b      	orrs	r3, r1
 80027c6:	431a      	orrs	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80027cc:	bf00      	nop
 80027ce:	371c      	adds	r7, #28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	fa01 f303 	lsl.w	r3, r1, r3
 80027f8:	431a      	orrs	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	611a      	str	r2, [r3, #16]
}
 80027fe:	bf00      	nop
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800280a:	b480      	push	{r7}
 800280c:	b087      	sub	sp, #28
 800280e:	af00      	add	r7, sp, #0
 8002810:	60f8      	str	r0, [r7, #12]
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	3360      	adds	r3, #96	; 0x60
 800281a:	461a      	mov	r2, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	431a      	orrs	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	601a      	str	r2, [r3, #0]
  }
}
 8002834:	bf00      	nop
 8002836:	371c      	adds	r7, #28
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002866:	b480      	push	{r7}
 8002868:	b087      	sub	sp, #28
 800286a:	af00      	add	r7, sp, #0
 800286c:	60f8      	str	r0, [r7, #12]
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3330      	adds	r3, #48	; 0x30
 8002876:	461a      	mov	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	0a1b      	lsrs	r3, r3, #8
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	4413      	add	r3, r2
 8002884:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	211f      	movs	r1, #31
 8002892:	fa01 f303 	lsl.w	r3, r1, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	401a      	ands	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	0e9b      	lsrs	r3, r3, #26
 800289e:	f003 011f 	and.w	r1, r3, #31
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ac:	431a      	orrs	r2, r3
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028b2:	bf00      	nop
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f023 0203 	bic.w	r2, r3, #3
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	60da      	str	r2, [r3, #12]
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b087      	sub	sp, #28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	3314      	adds	r3, #20
 80028f4:	461a      	mov	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	0e5b      	lsrs	r3, r3, #25
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	4413      	add	r3, r2
 8002902:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	0d1b      	lsrs	r3, r3, #20
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	2107      	movs	r1, #7
 8002912:	fa01 f303 	lsl.w	r3, r1, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	401a      	ands	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	0d1b      	lsrs	r3, r3, #20
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	fa01 f303 	lsl.w	r3, r1, r3
 8002928:	431a      	orrs	r2, r3
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800292e:	bf00      	nop
 8002930:	371c      	adds	r7, #28
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002954:	43db      	mvns	r3, r3
 8002956:	401a      	ands	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f003 0318 	and.w	r3, r3, #24
 800295e:	4908      	ldr	r1, [pc, #32]	; (8002980 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002960:	40d9      	lsrs	r1, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	400b      	ands	r3, r1
 8002966:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800296a:	431a      	orrs	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002972:	bf00      	nop
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	000fffff 	.word	0x000fffff

08002984 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 031f 	and.w	r3, r3, #31
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80029ae:	4013      	ands	r3, r2
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6093      	str	r3, [r2, #8]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	5fffffc0 	.word	0x5fffffc0

080029c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029d8:	d101      	bne.n	80029de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <LL_ADC_EnableInternalRegulator+0x24>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	6fffffc0 	.word	0x6fffffc0

08002a14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a28:	d101      	bne.n	8002a2e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <LL_ADC_Enable+0x24>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	f043 0201 	orr.w	r2, r3, #1
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	7fffffc0 	.word	0x7fffffc0

08002a64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d101      	bne.n	8002a7c <LL_ADC_IsEnabled+0x18>
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <LL_ADC_IsEnabled+0x1a>
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
	...

08002a8c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <LL_ADC_REG_StartConversion+0x24>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	f043 0204 	orr.w	r2, r3, #4
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	7fffffc0 	.word	0x7fffffc0

08002ab4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d101      	bne.n	8002acc <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d101      	bne.n	8002af2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b00:	b590      	push	{r4, r7, lr}
 8002b02:	b089      	sub	sp, #36	; 0x24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e18f      	b.n	8002e3a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d109      	bne.n	8002b3c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff f827 	bl	8001b7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff ff3f 	bl	80029c4 <LL_ADC_IsDeepPowerDownEnabled>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d004      	beq.n	8002b56 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ff25 	bl	80029a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff ff5a 	bl	8002a14 <LL_ADC_IsInternalRegulatorEnabled>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d114      	bne.n	8002b90 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff ff3e 	bl	80029ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b70:	4b87      	ldr	r3, [pc, #540]	; (8002d90 <HAL_ADC_Init+0x290>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	099b      	lsrs	r3, r3, #6
 8002b76:	4a87      	ldr	r2, [pc, #540]	; (8002d94 <HAL_ADC_Init+0x294>)
 8002b78:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7c:	099b      	lsrs	r3, r3, #6
 8002b7e:	3301      	adds	r3, #1
 8002b80:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b82:	e002      	b.n	8002b8a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1f9      	bne.n	8002b84 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff ff3d 	bl	8002a14 <LL_ADC_IsInternalRegulatorEnabled>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10d      	bne.n	8002bbc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba4:	f043 0210 	orr.w	r2, r3, #16
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb0:	f043 0201 	orr.w	r2, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff ff77 	bl	8002ab4 <LL_ADC_REG_IsConversionOngoing>
 8002bc6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bcc:	f003 0310 	and.w	r3, r3, #16
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f040 8129 	bne.w	8002e28 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f040 8125 	bne.w	8002e28 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002be6:	f043 0202 	orr.w	r2, r3, #2
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff ff36 	bl	8002a64 <LL_ADC_IsEnabled>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d136      	bne.n	8002c6c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a65      	ldr	r2, [pc, #404]	; (8002d98 <HAL_ADC_Init+0x298>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d004      	beq.n	8002c12 <HAL_ADC_Init+0x112>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a63      	ldr	r2, [pc, #396]	; (8002d9c <HAL_ADC_Init+0x29c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d10e      	bne.n	8002c30 <HAL_ADC_Init+0x130>
 8002c12:	4861      	ldr	r0, [pc, #388]	; (8002d98 <HAL_ADC_Init+0x298>)
 8002c14:	f7ff ff26 	bl	8002a64 <LL_ADC_IsEnabled>
 8002c18:	4604      	mov	r4, r0
 8002c1a:	4860      	ldr	r0, [pc, #384]	; (8002d9c <HAL_ADC_Init+0x29c>)
 8002c1c:	f7ff ff22 	bl	8002a64 <LL_ADC_IsEnabled>
 8002c20:	4603      	mov	r3, r0
 8002c22:	4323      	orrs	r3, r4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf0c      	ite	eq
 8002c28:	2301      	moveq	r3, #1
 8002c2a:	2300      	movne	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	e008      	b.n	8002c42 <HAL_ADC_Init+0x142>
 8002c30:	485b      	ldr	r0, [pc, #364]	; (8002da0 <HAL_ADC_Init+0x2a0>)
 8002c32:	f7ff ff17 	bl	8002a64 <LL_ADC_IsEnabled>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2301      	moveq	r3, #1
 8002c3e:	2300      	movne	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d012      	beq.n	8002c6c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a53      	ldr	r2, [pc, #332]	; (8002d98 <HAL_ADC_Init+0x298>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d004      	beq.n	8002c5a <HAL_ADC_Init+0x15a>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a51      	ldr	r2, [pc, #324]	; (8002d9c <HAL_ADC_Init+0x29c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d101      	bne.n	8002c5e <HAL_ADC_Init+0x15e>
 8002c5a:	4a52      	ldr	r2, [pc, #328]	; (8002da4 <HAL_ADC_Init+0x2a4>)
 8002c5c:	e000      	b.n	8002c60 <HAL_ADC_Init+0x160>
 8002c5e:	4a52      	ldr	r2, [pc, #328]	; (8002da8 <HAL_ADC_Init+0x2a8>)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	4619      	mov	r1, r3
 8002c66:	4610      	mov	r0, r2
 8002c68:	f7ff fd62 	bl	8002730 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002c6c:	f7ff fd3e 	bl	80026ec <HAL_GetREVID>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d914      	bls.n	8002ca4 <HAL_ADC_Init+0x1a4>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b10      	cmp	r3, #16
 8002c80:	d110      	bne.n	8002ca4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	7d5b      	ldrb	r3, [r3, #21]
 8002c86:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c8c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002c92:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	7f1b      	ldrb	r3, [r3, #28]
 8002c98:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002c9a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c9c:	f043 030c 	orr.w	r3, r3, #12
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	e00d      	b.n	8002cc0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	7d5b      	ldrb	r3, [r3, #21]
 8002ca8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002cae:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002cb4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	7f1b      	ldrb	r3, [r3, #28]
 8002cba:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	7f1b      	ldrb	r3, [r3, #28]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d106      	bne.n	8002cd6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	045b      	lsls	r3, r3, #17
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d009      	beq.n	8002cf2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cea:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	4b2c      	ldr	r3, [pc, #176]	; (8002dac <HAL_ADC_Init+0x2ac>)
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	69b9      	ldr	r1, [r7, #24]
 8002d02:	430b      	orrs	r3, r1
 8002d04:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff fed2 	bl	8002ab4 <LL_ADC_REG_IsConversionOngoing>
 8002d10:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fedf 	bl	8002ada <LL_ADC_INJ_IsConversionOngoing>
 8002d1c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d15f      	bne.n	8002de4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d15c      	bne.n	8002de4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	7d1b      	ldrb	r3, [r3, #20]
 8002d2e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	4b1c      	ldr	r3, [pc, #112]	; (8002db0 <HAL_ADC_Init+0x2b0>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	69b9      	ldr	r1, [r7, #24]
 8002d48:	430b      	orrs	r3, r1
 8002d4a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d130      	bne.n	8002db8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	4b14      	ldr	r3, [pc, #80]	; (8002db4 <HAL_ADC_Init+0x2b4>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d6a:	3a01      	subs	r2, #1
 8002d6c:	0411      	lsls	r1, r2, #16
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d72:	4311      	orrs	r1, r2
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d78:	4311      	orrs	r1, r2
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	611a      	str	r2, [r3, #16]
 8002d8c:	e01c      	b.n	8002dc8 <HAL_ADC_Init+0x2c8>
 8002d8e:	bf00      	nop
 8002d90:	24000024 	.word	0x24000024
 8002d94:	053e2d63 	.word	0x053e2d63
 8002d98:	40022000 	.word	0x40022000
 8002d9c:	40022100 	.word	0x40022100
 8002da0:	58026000 	.word	0x58026000
 8002da4:	40022300 	.word	0x40022300
 8002da8:	58026300 	.word	0x58026300
 8002dac:	fff0c003 	.word	0xfff0c003
 8002db0:	ffffbffc 	.word	0xffffbffc
 8002db4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691a      	ldr	r2, [r3, #16]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 fd80 	bl	80038e4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d10c      	bne.n	8002e06 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f023 010f 	bic.w	r1, r3, #15
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	1e5a      	subs	r2, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	631a      	str	r2, [r3, #48]	; 0x30
 8002e04:	e007      	b.n	8002e16 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 020f 	bic.w	r2, r2, #15
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1a:	f023 0303 	bic.w	r3, r3, #3
 8002e1e:	f043 0201 	orr.w	r2, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	655a      	str	r2, [r3, #84]	; 0x54
 8002e26:	e007      	b.n	8002e38 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2c:	f043 0210 	orr.w	r2, r3, #16
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e38:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3724      	adds	r7, #36	; 0x24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd90      	pop	{r4, r7, pc}
 8002e42:	bf00      	nop

08002e44 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a55      	ldr	r2, [pc, #340]	; (8002fac <HAL_ADC_Start_DMA+0x168>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d004      	beq.n	8002e64 <HAL_ADC_Start_DMA+0x20>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a54      	ldr	r2, [pc, #336]	; (8002fb0 <HAL_ADC_Start_DMA+0x16c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d101      	bne.n	8002e68 <HAL_ADC_Start_DMA+0x24>
 8002e64:	4b53      	ldr	r3, [pc, #332]	; (8002fb4 <HAL_ADC_Start_DMA+0x170>)
 8002e66:	e000      	b.n	8002e6a <HAL_ADC_Start_DMA+0x26>
 8002e68:	4b53      	ldr	r3, [pc, #332]	; (8002fb8 <HAL_ADC_Start_DMA+0x174>)
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff fd8a 	bl	8002984 <LL_ADC_GetMultimode>
 8002e70:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff fe1c 	bl	8002ab4 <LL_ADC_REG_IsConversionOngoing>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f040 808c 	bne.w	8002f9c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_ADC_Start_DMA+0x4e>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e087      	b.n	8002fa2 <HAL_ADC_Start_DMA+0x15e>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	2b05      	cmp	r3, #5
 8002ea4:	d002      	beq.n	8002eac <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	2b09      	cmp	r3, #9
 8002eaa:	d170      	bne.n	8002f8e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 fbfb 	bl	80036a8 <ADC_Enable>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002eb6:	7dfb      	ldrb	r3, [r7, #23]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d163      	bne.n	8002f84 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ec0:	4b3e      	ldr	r3, [pc, #248]	; (8002fbc <HAL_ADC_Start_DMA+0x178>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a37      	ldr	r2, [pc, #220]	; (8002fb0 <HAL_ADC_Start_DMA+0x16c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d002      	beq.n	8002edc <HAL_ADC_Start_DMA+0x98>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	e000      	b.n	8002ede <HAL_ADC_Start_DMA+0x9a>
 8002edc:	4b33      	ldr	r3, [pc, #204]	; (8002fac <HAL_ADC_Start_DMA+0x168>)
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d002      	beq.n	8002eec <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d105      	bne.n	8002ef8 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d006      	beq.n	8002f12 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f08:	f023 0206 	bic.w	r2, r3, #6
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	659a      	str	r2, [r3, #88]	; 0x58
 8002f10:	e002      	b.n	8002f18 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1c:	4a28      	ldr	r2, [pc, #160]	; (8002fc0 <HAL_ADC_Start_DMA+0x17c>)
 8002f1e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f24:	4a27      	ldr	r2, [pc, #156]	; (8002fc4 <HAL_ADC_Start_DMA+0x180>)
 8002f26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2c:	4a26      	ldr	r2, [pc, #152]	; (8002fc8 <HAL_ADC_Start_DMA+0x184>)
 8002f2e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	221c      	movs	r2, #28
 8002f36:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0210 	orr.w	r2, r2, #16
 8002f4e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	f7ff fcaf 	bl	80028be <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	3340      	adds	r3, #64	; 0x40
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f001 fcd6 	bl	8004920 <HAL_DMA_Start_IT>
 8002f74:	4603      	mov	r3, r0
 8002f76:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff fd85 	bl	8002a8c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002f82:	e00d      	b.n	8002fa0 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002f8c:	e008      	b.n	8002fa0 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002f9a:	e001      	b.n	8002fa0 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40022000 	.word	0x40022000
 8002fb0:	40022100 	.word	0x40022100
 8002fb4:	40022300 	.word	0x40022300
 8002fb8:	58026300 	.word	0x58026300
 8002fbc:	fffff0fe 	.word	0xfffff0fe
 8002fc0:	080037bd 	.word	0x080037bd
 8002fc4:	08003895 	.word	0x08003895
 8002fc8:	080038b1 	.word	0x080038b1

08002fcc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b0a1      	sub	sp, #132	; 0x84
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4a9d      	ldr	r2, [pc, #628]	; (8003298 <HAL_ADC_ConfigChannel+0x290>)
 8003022:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x2a>
 800302e:	2302      	movs	r3, #2
 8003030:	e321      	b.n	8003676 <HAL_ADC_ConfigChannel+0x66e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fd38 	bl	8002ab4 <LL_ADC_REG_IsConversionOngoing>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	f040 8306 	bne.w	8003658 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003054:	2b00      	cmp	r3, #0
 8003056:	d108      	bne.n	800306a <HAL_ADC_ConfigChannel+0x62>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	0e9b      	lsrs	r3, r3, #26
 800305e:	f003 031f 	and.w	r3, r3, #31
 8003062:	2201      	movs	r2, #1
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	e016      	b.n	8003098 <HAL_ADC_ConfigChannel+0x90>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003072:	fa93 f3a3 	rbit	r3, r3
 8003076:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003078:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800307a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800307c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003082:	2320      	movs	r3, #32
 8003084:	e003      	b.n	800308e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003086:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003088:	fab3 f383 	clz	r3, r3
 800308c:	b2db      	uxtb	r3, r3
 800308e:	f003 031f 	and.w	r3, r3, #31
 8003092:	2201      	movs	r2, #1
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	69d1      	ldr	r1, [r2, #28]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	430b      	orrs	r3, r1
 80030a4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6818      	ldr	r0, [r3, #0]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6859      	ldr	r1, [r3, #4]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	f7ff fbd7 	bl	8002866 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fcf9 	bl	8002ab4 <LL_ADC_REG_IsConversionOngoing>
 80030c2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff fd06 	bl	8002ada <LL_ADC_INJ_IsConversionOngoing>
 80030ce:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f040 80b3 	bne.w	800323e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f040 80af 	bne.w	800323e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	6819      	ldr	r1, [r3, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	461a      	mov	r2, r3
 80030ee:	f7ff fbf9 	bl	80028e4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80030f2:	4b6a      	ldr	r3, [pc, #424]	; (800329c <HAL_ADC_ConfigChannel+0x294>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80030fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030fe:	d10b      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x110>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	695a      	ldr	r2, [r3, #20]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	089b      	lsrs	r3, r3, #2
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	e01d      	b.n	8003154 <HAL_ADC_ConfigChannel+0x14c>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10b      	bne.n	800313e <HAL_ADC_ConfigChannel+0x136>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	089b      	lsrs	r3, r3, #2
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	e00a      	b.n	8003154 <HAL_ADC_ConfigChannel+0x14c>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	695a      	ldr	r2, [r3, #20]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	089b      	lsrs	r3, r3, #2
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	2b04      	cmp	r3, #4
 800315c:	d027      	beq.n	80031ae <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6818      	ldr	r0, [r3, #0]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	6919      	ldr	r1, [r3, #16]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800316c:	f7ff fb14 	bl	8002798 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6818      	ldr	r0, [r3, #0]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	6919      	ldr	r1, [r3, #16]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	7e5b      	ldrb	r3, [r3, #25]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d102      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x17e>
 8003180:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003184:	e000      	b.n	8003188 <HAL_ADC_ConfigChannel+0x180>
 8003186:	2300      	movs	r3, #0
 8003188:	461a      	mov	r2, r3
 800318a:	f7ff fb3e 	bl	800280a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6818      	ldr	r0, [r3, #0]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	6919      	ldr	r1, [r3, #16]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	7e1b      	ldrb	r3, [r3, #24]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d102      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x19c>
 800319e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031a2:	e000      	b.n	80031a6 <HAL_ADC_ConfigChannel+0x19e>
 80031a4:	2300      	movs	r3, #0
 80031a6:	461a      	mov	r2, r3
 80031a8:	f7ff fb16 	bl	80027d8 <LL_ADC_SetDataRightShift>
 80031ac:	e047      	b.n	800323e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	069b      	lsls	r3, r3, #26
 80031be:	429a      	cmp	r2, r3
 80031c0:	d107      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031d0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	069b      	lsls	r3, r3, #26
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d107      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031f4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	069b      	lsls	r3, r3, #26
 8003206:	429a      	cmp	r2, r3
 8003208:	d107      	bne.n	800321a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003218:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003220:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	069b      	lsls	r3, r3, #26
 800322a:	429a      	cmp	r2, r3
 800322c:	d107      	bne.n	800323e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800323c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff fc0e 	bl	8002a64 <LL_ADC_IsEnabled>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	f040 820d 	bne.w	800366a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	6819      	ldr	r1, [r3, #0]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	461a      	mov	r2, r3
 800325e:	f7ff fb6d 	bl	800293c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	4a0c      	ldr	r2, [pc, #48]	; (8003298 <HAL_ADC_ConfigChannel+0x290>)
 8003268:	4293      	cmp	r3, r2
 800326a:	f040 8133 	bne.w	80034d4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800327a:	2b00      	cmp	r3, #0
 800327c:	d110      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x298>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	0e9b      	lsrs	r3, r3, #26
 8003284:	3301      	adds	r3, #1
 8003286:	f003 031f 	and.w	r3, r3, #31
 800328a:	2b09      	cmp	r3, #9
 800328c:	bf94      	ite	ls
 800328e:	2301      	movls	r3, #1
 8003290:	2300      	movhi	r3, #0
 8003292:	b2db      	uxtb	r3, r3
 8003294:	e01e      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x2cc>
 8003296:	bf00      	nop
 8003298:	47ff0000 	.word	0x47ff0000
 800329c:	5c001000 	.word	0x5c001000
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032a8:	fa93 f3a3 	rbit	r3, r3
 80032ac:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80032ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80032b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80032b8:	2320      	movs	r3, #32
 80032ba:	e003      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80032bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032be:	fab3 f383 	clz	r3, r3
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	3301      	adds	r3, #1
 80032c6:	f003 031f 	and.w	r3, r3, #31
 80032ca:	2b09      	cmp	r3, #9
 80032cc:	bf94      	ite	ls
 80032ce:	2301      	movls	r3, #1
 80032d0:	2300      	movhi	r3, #0
 80032d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d079      	beq.n	80033cc <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d107      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x2ec>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	0e9b      	lsrs	r3, r3, #26
 80032ea:	3301      	adds	r3, #1
 80032ec:	069b      	lsls	r3, r3, #26
 80032ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032f2:	e015      	b.n	8003320 <HAL_ADC_ConfigChannel+0x318>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032fc:	fa93 f3a3 	rbit	r3, r3
 8003300:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003304:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800330c:	2320      	movs	r3, #32
 800330e:	e003      	b.n	8003318 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003312:	fab3 f383 	clz	r3, r3
 8003316:	b2db      	uxtb	r3, r3
 8003318:	3301      	adds	r3, #1
 800331a:	069b      	lsls	r3, r3, #26
 800331c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003328:	2b00      	cmp	r3, #0
 800332a:	d109      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x338>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	0e9b      	lsrs	r3, r3, #26
 8003332:	3301      	adds	r3, #1
 8003334:	f003 031f 	and.w	r3, r3, #31
 8003338:	2101      	movs	r1, #1
 800333a:	fa01 f303 	lsl.w	r3, r1, r3
 800333e:	e017      	b.n	8003370 <HAL_ADC_ConfigChannel+0x368>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003348:	fa93 f3a3 	rbit	r3, r3
 800334c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800334e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003350:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003358:	2320      	movs	r3, #32
 800335a:	e003      	b.n	8003364 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800335c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800335e:	fab3 f383 	clz	r3, r3
 8003362:	b2db      	uxtb	r3, r3
 8003364:	3301      	adds	r3, #1
 8003366:	f003 031f 	and.w	r3, r3, #31
 800336a:	2101      	movs	r1, #1
 800336c:	fa01 f303 	lsl.w	r3, r1, r3
 8003370:	ea42 0103 	orr.w	r1, r2, r3
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10a      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x38e>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	0e9b      	lsrs	r3, r3, #26
 8003386:	3301      	adds	r3, #1
 8003388:	f003 021f 	and.w	r2, r3, #31
 800338c:	4613      	mov	r3, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	4413      	add	r3, r2
 8003392:	051b      	lsls	r3, r3, #20
 8003394:	e018      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x3c0>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800339e:	fa93 f3a3 	rbit	r3, r3
 80033a2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80033a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80033a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80033ae:	2320      	movs	r3, #32
 80033b0:	e003      	b.n	80033ba <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80033b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b4:	fab3 f383 	clz	r3, r3
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	3301      	adds	r3, #1
 80033bc:	f003 021f 	and.w	r2, r3, #31
 80033c0:	4613      	mov	r3, r2
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	4413      	add	r3, r2
 80033c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033c8:	430b      	orrs	r3, r1
 80033ca:	e07e      	b.n	80034ca <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d107      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x3e0>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	0e9b      	lsrs	r3, r3, #26
 80033de:	3301      	adds	r3, #1
 80033e0:	069b      	lsls	r3, r3, #26
 80033e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033e6:	e015      	b.n	8003414 <HAL_ADC_ConfigChannel+0x40c>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f0:	fa93 f3a3 	rbit	r3, r3
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80033fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003400:	2320      	movs	r3, #32
 8003402:	e003      	b.n	800340c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
 800340c:	3301      	adds	r3, #1
 800340e:	069b      	lsls	r3, r3, #26
 8003410:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800341c:	2b00      	cmp	r3, #0
 800341e:	d109      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x42c>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	0e9b      	lsrs	r3, r3, #26
 8003426:	3301      	adds	r3, #1
 8003428:	f003 031f 	and.w	r3, r3, #31
 800342c:	2101      	movs	r1, #1
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	e017      	b.n	8003464 <HAL_ADC_ConfigChannel+0x45c>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	fa93 f3a3 	rbit	r3, r3
 8003440:	61bb      	str	r3, [r7, #24]
  return result;
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800344c:	2320      	movs	r3, #32
 800344e:	e003      	b.n	8003458 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	fab3 f383 	clz	r3, r3
 8003456:	b2db      	uxtb	r3, r3
 8003458:	3301      	adds	r3, #1
 800345a:	f003 031f 	and.w	r3, r3, #31
 800345e:	2101      	movs	r1, #1
 8003460:	fa01 f303 	lsl.w	r3, r1, r3
 8003464:	ea42 0103 	orr.w	r1, r2, r3
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10d      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x488>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	0e9b      	lsrs	r3, r3, #26
 800347a:	3301      	adds	r3, #1
 800347c:	f003 021f 	and.w	r2, r3, #31
 8003480:	4613      	mov	r3, r2
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	4413      	add	r3, r2
 8003486:	3b1e      	subs	r3, #30
 8003488:	051b      	lsls	r3, r3, #20
 800348a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800348e:	e01b      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x4c0>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	fa93 f3a3 	rbit	r3, r3
 800349c:	60fb      	str	r3, [r7, #12]
  return result;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80034a8:	2320      	movs	r3, #32
 80034aa:	e003      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	fab3 f383 	clz	r3, r3
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	3301      	adds	r3, #1
 80034b6:	f003 021f 	and.w	r2, r3, #31
 80034ba:	4613      	mov	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4413      	add	r3, r2
 80034c0:	3b1e      	subs	r3, #30
 80034c2:	051b      	lsls	r3, r3, #20
 80034c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034c8:	430b      	orrs	r3, r1
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	6892      	ldr	r2, [r2, #8]
 80034ce:	4619      	mov	r1, r3
 80034d0:	f7ff fa08 	bl	80028e4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f280 80c6 	bge.w	800366a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a67      	ldr	r2, [pc, #412]	; (8003680 <HAL_ADC_ConfigChannel+0x678>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d004      	beq.n	80034f2 <HAL_ADC_ConfigChannel+0x4ea>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a65      	ldr	r2, [pc, #404]	; (8003684 <HAL_ADC_ConfigChannel+0x67c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d101      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x4ee>
 80034f2:	4b65      	ldr	r3, [pc, #404]	; (8003688 <HAL_ADC_ConfigChannel+0x680>)
 80034f4:	e000      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x4f0>
 80034f6:	4b65      	ldr	r3, [pc, #404]	; (800368c <HAL_ADC_ConfigChannel+0x684>)
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff f93f 	bl	800277c <LL_ADC_GetCommonPathInternalCh>
 80034fe:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a5e      	ldr	r2, [pc, #376]	; (8003680 <HAL_ADC_ConfigChannel+0x678>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d004      	beq.n	8003514 <HAL_ADC_ConfigChannel+0x50c>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a5d      	ldr	r2, [pc, #372]	; (8003684 <HAL_ADC_ConfigChannel+0x67c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d10e      	bne.n	8003532 <HAL_ADC_ConfigChannel+0x52a>
 8003514:	485a      	ldr	r0, [pc, #360]	; (8003680 <HAL_ADC_ConfigChannel+0x678>)
 8003516:	f7ff faa5 	bl	8002a64 <LL_ADC_IsEnabled>
 800351a:	4604      	mov	r4, r0
 800351c:	4859      	ldr	r0, [pc, #356]	; (8003684 <HAL_ADC_ConfigChannel+0x67c>)
 800351e:	f7ff faa1 	bl	8002a64 <LL_ADC_IsEnabled>
 8003522:	4603      	mov	r3, r0
 8003524:	4323      	orrs	r3, r4
 8003526:	2b00      	cmp	r3, #0
 8003528:	bf0c      	ite	eq
 800352a:	2301      	moveq	r3, #1
 800352c:	2300      	movne	r3, #0
 800352e:	b2db      	uxtb	r3, r3
 8003530:	e008      	b.n	8003544 <HAL_ADC_ConfigChannel+0x53c>
 8003532:	4857      	ldr	r0, [pc, #348]	; (8003690 <HAL_ADC_ConfigChannel+0x688>)
 8003534:	f7ff fa96 	bl	8002a64 <LL_ADC_IsEnabled>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	bf0c      	ite	eq
 800353e:	2301      	moveq	r3, #1
 8003540:	2300      	movne	r3, #0
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d07d      	beq.n	8003644 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a51      	ldr	r2, [pc, #324]	; (8003694 <HAL_ADC_ConfigChannel+0x68c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d130      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x5ac>
 8003552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003554:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d12b      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a4b      	ldr	r2, [pc, #300]	; (8003690 <HAL_ADC_ConfigChannel+0x688>)
 8003562:	4293      	cmp	r3, r2
 8003564:	f040 8081 	bne.w	800366a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a44      	ldr	r2, [pc, #272]	; (8003680 <HAL_ADC_ConfigChannel+0x678>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d004      	beq.n	800357c <HAL_ADC_ConfigChannel+0x574>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a43      	ldr	r2, [pc, #268]	; (8003684 <HAL_ADC_ConfigChannel+0x67c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d101      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x578>
 800357c:	4a42      	ldr	r2, [pc, #264]	; (8003688 <HAL_ADC_ConfigChannel+0x680>)
 800357e:	e000      	b.n	8003582 <HAL_ADC_ConfigChannel+0x57a>
 8003580:	4a42      	ldr	r2, [pc, #264]	; (800368c <HAL_ADC_ConfigChannel+0x684>)
 8003582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003584:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003588:	4619      	mov	r1, r3
 800358a:	4610      	mov	r0, r2
 800358c:	f7ff f8e3 	bl	8002756 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003590:	4b41      	ldr	r3, [pc, #260]	; (8003698 <HAL_ADC_ConfigChannel+0x690>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	099b      	lsrs	r3, r3, #6
 8003596:	4a41      	ldr	r2, [pc, #260]	; (800369c <HAL_ADC_ConfigChannel+0x694>)
 8003598:	fba2 2303 	umull	r2, r3, r2, r3
 800359c:	099b      	lsrs	r3, r3, #6
 800359e:	3301      	adds	r3, #1
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80035a4:	e002      	b.n	80035ac <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	3b01      	subs	r3, #1
 80035aa:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f9      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035b2:	e05a      	b.n	800366a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a39      	ldr	r2, [pc, #228]	; (80036a0 <HAL_ADC_ConfigChannel+0x698>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d11e      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x5f4>
 80035be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d119      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a30      	ldr	r2, [pc, #192]	; (8003690 <HAL_ADC_ConfigChannel+0x688>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d14b      	bne.n	800366a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a2a      	ldr	r2, [pc, #168]	; (8003680 <HAL_ADC_ConfigChannel+0x678>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d004      	beq.n	80035e6 <HAL_ADC_ConfigChannel+0x5de>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a28      	ldr	r2, [pc, #160]	; (8003684 <HAL_ADC_ConfigChannel+0x67c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d101      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x5e2>
 80035e6:	4a28      	ldr	r2, [pc, #160]	; (8003688 <HAL_ADC_ConfigChannel+0x680>)
 80035e8:	e000      	b.n	80035ec <HAL_ADC_ConfigChannel+0x5e4>
 80035ea:	4a28      	ldr	r2, [pc, #160]	; (800368c <HAL_ADC_ConfigChannel+0x684>)
 80035ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035f2:	4619      	mov	r1, r3
 80035f4:	4610      	mov	r0, r2
 80035f6:	f7ff f8ae 	bl	8002756 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035fa:	e036      	b.n	800366a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a28      	ldr	r2, [pc, #160]	; (80036a4 <HAL_ADC_ConfigChannel+0x69c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d131      	bne.n	800366a <HAL_ADC_ConfigChannel+0x662>
 8003606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d12c      	bne.n	800366a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1e      	ldr	r2, [pc, #120]	; (8003690 <HAL_ADC_ConfigChannel+0x688>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d127      	bne.n	800366a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a18      	ldr	r2, [pc, #96]	; (8003680 <HAL_ADC_ConfigChannel+0x678>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d004      	beq.n	800362e <HAL_ADC_ConfigChannel+0x626>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a16      	ldr	r2, [pc, #88]	; (8003684 <HAL_ADC_ConfigChannel+0x67c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d101      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x62a>
 800362e:	4a16      	ldr	r2, [pc, #88]	; (8003688 <HAL_ADC_ConfigChannel+0x680>)
 8003630:	e000      	b.n	8003634 <HAL_ADC_ConfigChannel+0x62c>
 8003632:	4a16      	ldr	r2, [pc, #88]	; (800368c <HAL_ADC_ConfigChannel+0x684>)
 8003634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003636:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800363a:	4619      	mov	r1, r3
 800363c:	4610      	mov	r0, r2
 800363e:	f7ff f88a 	bl	8002756 <LL_ADC_SetCommonPathInternalCh>
 8003642:	e012      	b.n	800366a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003648:	f043 0220 	orr.w	r2, r3, #32
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003656:	e008      	b.n	800366a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365c:	f043 0220 	orr.w	r2, r3, #32
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003672:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003676:	4618      	mov	r0, r3
 8003678:	3784      	adds	r7, #132	; 0x84
 800367a:	46bd      	mov	sp, r7
 800367c:	bd90      	pop	{r4, r7, pc}
 800367e:	bf00      	nop
 8003680:	40022000 	.word	0x40022000
 8003684:	40022100 	.word	0x40022100
 8003688:	40022300 	.word	0x40022300
 800368c:	58026300 	.word	0x58026300
 8003690:	58026000 	.word	0x58026000
 8003694:	cb840000 	.word	0xcb840000
 8003698:	24000024 	.word	0x24000024
 800369c:	053e2d63 	.word	0x053e2d63
 80036a0:	c7520000 	.word	0xc7520000
 80036a4:	cfb80000 	.word	0xcfb80000

080036a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff f9d5 	bl	8002a64 <LL_ADC_IsEnabled>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d16e      	bne.n	800379e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	4b38      	ldr	r3, [pc, #224]	; (80037a8 <ADC_Enable+0x100>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00d      	beq.n	80036ea <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d2:	f043 0210 	orr.w	r2, r3, #16
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036de:	f043 0201 	orr.w	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e05a      	b.n	80037a0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff f9a4 	bl	8002a3c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80036f4:	f7fe ffba 	bl	800266c <HAL_GetTick>
 80036f8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a2b      	ldr	r2, [pc, #172]	; (80037ac <ADC_Enable+0x104>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d004      	beq.n	800370e <ADC_Enable+0x66>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a29      	ldr	r2, [pc, #164]	; (80037b0 <ADC_Enable+0x108>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d101      	bne.n	8003712 <ADC_Enable+0x6a>
 800370e:	4b29      	ldr	r3, [pc, #164]	; (80037b4 <ADC_Enable+0x10c>)
 8003710:	e000      	b.n	8003714 <ADC_Enable+0x6c>
 8003712:	4b29      	ldr	r3, [pc, #164]	; (80037b8 <ADC_Enable+0x110>)
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff f935 	bl	8002984 <LL_ADC_GetMultimode>
 800371a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a23      	ldr	r2, [pc, #140]	; (80037b0 <ADC_Enable+0x108>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d002      	beq.n	800372c <ADC_Enable+0x84>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	e000      	b.n	800372e <ADC_Enable+0x86>
 800372c:	4b1f      	ldr	r3, [pc, #124]	; (80037ac <ADC_Enable+0x104>)
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6812      	ldr	r2, [r2, #0]
 8003732:	4293      	cmp	r3, r2
 8003734:	d02c      	beq.n	8003790 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d130      	bne.n	800379e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800373c:	e028      	b.n	8003790 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff f98e 	bl	8002a64 <LL_ADC_IsEnabled>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d104      	bne.n	8003758 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff f972 	bl	8002a3c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003758:	f7fe ff88 	bl	800266c <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d914      	bls.n	8003790 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b01      	cmp	r3, #1
 8003772:	d00d      	beq.n	8003790 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003778:	f043 0210 	orr.w	r2, r3, #16
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003784:	f043 0201 	orr.w	r2, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e007      	b.n	80037a0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b01      	cmp	r3, #1
 800379c:	d1cf      	bne.n	800373e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	8000003f 	.word	0x8000003f
 80037ac:	40022000 	.word	0x40022000
 80037b0:	40022100 	.word	0x40022100
 80037b4:	40022300 	.word	0x40022300
 80037b8:	58026300 	.word	0x58026300

080037bc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d14b      	bne.n	800386e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d021      	beq.n	8003834 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff f823 	bl	8002840 <LL_ADC_REG_IsTriggerSourceSWStart>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d032      	beq.n	8003866 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d12b      	bne.n	8003866 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003812:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d11f      	bne.n	8003866 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382a:	f043 0201 	orr.w	r2, r3, #1
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	655a      	str	r2, [r3, #84]	; 0x54
 8003832:	e018      	b.n	8003866 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d111      	bne.n	8003866 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003846:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d105      	bne.n	8003866 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385e:	f043 0201 	orr.w	r2, r3, #1
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f7ff fbb0 	bl	8002fcc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800386c:	e00e      	b.n	800388c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f7ff fbba 	bl	8002ff4 <HAL_ADC_ErrorCallback>
}
 8003880:	e004      	b.n	800388c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	4798      	blx	r3
}
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f7ff fb9c 	bl	8002fe0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038a8:	bf00      	nop
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038bc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ce:	f043 0204 	orr.w	r2, r3, #4
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f7ff fb8c 	bl	8002ff4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038dc:	bf00      	nop
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a79      	ldr	r2, [pc, #484]	; (8003ad8 <ADC_ConfigureBoostMode+0x1f4>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d004      	beq.n	8003900 <ADC_ConfigureBoostMode+0x1c>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a78      	ldr	r2, [pc, #480]	; (8003adc <ADC_ConfigureBoostMode+0x1f8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d109      	bne.n	8003914 <ADC_ConfigureBoostMode+0x30>
 8003900:	4b77      	ldr	r3, [pc, #476]	; (8003ae0 <ADC_ConfigureBoostMode+0x1fc>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003908:	2b00      	cmp	r3, #0
 800390a:	bf14      	ite	ne
 800390c:	2301      	movne	r3, #1
 800390e:	2300      	moveq	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	e008      	b.n	8003926 <ADC_ConfigureBoostMode+0x42>
 8003914:	4b73      	ldr	r3, [pc, #460]	; (8003ae4 <ADC_ConfigureBoostMode+0x200>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800391c:	2b00      	cmp	r3, #0
 800391e:	bf14      	ite	ne
 8003920:	2301      	movne	r3, #1
 8003922:	2300      	moveq	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d01c      	beq.n	8003964 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800392a:	f004 fcb5 	bl	8008298 <HAL_RCC_GetHCLKFreq>
 800392e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003938:	d010      	beq.n	800395c <ADC_ConfigureBoostMode+0x78>
 800393a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800393e:	d871      	bhi.n	8003a24 <ADC_ConfigureBoostMode+0x140>
 8003940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003944:	d002      	beq.n	800394c <ADC_ConfigureBoostMode+0x68>
 8003946:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800394a:	d16b      	bne.n	8003a24 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	0c1b      	lsrs	r3, r3, #16
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	fbb2 f3f3 	udiv	r3, r2, r3
 8003958:	60fb      	str	r3, [r7, #12]
        break;
 800395a:	e066      	b.n	8003a2a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	089b      	lsrs	r3, r3, #2
 8003960:	60fb      	str	r3, [r7, #12]
        break;
 8003962:	e062      	b.n	8003a2a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003964:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003968:	f005 fc38 	bl	80091dc <HAL_RCCEx_GetPeriphCLKFreq>
 800396c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003976:	d051      	beq.n	8003a1c <ADC_ConfigureBoostMode+0x138>
 8003978:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800397c:	d854      	bhi.n	8003a28 <ADC_ConfigureBoostMode+0x144>
 800397e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003982:	d047      	beq.n	8003a14 <ADC_ConfigureBoostMode+0x130>
 8003984:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003988:	d84e      	bhi.n	8003a28 <ADC_ConfigureBoostMode+0x144>
 800398a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800398e:	d03d      	beq.n	8003a0c <ADC_ConfigureBoostMode+0x128>
 8003990:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003994:	d848      	bhi.n	8003a28 <ADC_ConfigureBoostMode+0x144>
 8003996:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800399a:	d033      	beq.n	8003a04 <ADC_ConfigureBoostMode+0x120>
 800399c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039a0:	d842      	bhi.n	8003a28 <ADC_ConfigureBoostMode+0x144>
 80039a2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80039a6:	d029      	beq.n	80039fc <ADC_ConfigureBoostMode+0x118>
 80039a8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80039ac:	d83c      	bhi.n	8003a28 <ADC_ConfigureBoostMode+0x144>
 80039ae:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80039b2:	d01a      	beq.n	80039ea <ADC_ConfigureBoostMode+0x106>
 80039b4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80039b8:	d836      	bhi.n	8003a28 <ADC_ConfigureBoostMode+0x144>
 80039ba:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80039be:	d014      	beq.n	80039ea <ADC_ConfigureBoostMode+0x106>
 80039c0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80039c4:	d830      	bhi.n	8003a28 <ADC_ConfigureBoostMode+0x144>
 80039c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039ca:	d00e      	beq.n	80039ea <ADC_ConfigureBoostMode+0x106>
 80039cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039d0:	d82a      	bhi.n	8003a28 <ADC_ConfigureBoostMode+0x144>
 80039d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80039d6:	d008      	beq.n	80039ea <ADC_ConfigureBoostMode+0x106>
 80039d8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80039dc:	d824      	bhi.n	8003a28 <ADC_ConfigureBoostMode+0x144>
 80039de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039e2:	d002      	beq.n	80039ea <ADC_ConfigureBoostMode+0x106>
 80039e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039e8:	d11e      	bne.n	8003a28 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	0c9b      	lsrs	r3, r3, #18
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f8:	60fb      	str	r3, [r7, #12]
        break;
 80039fa:	e016      	b.n	8003a2a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	091b      	lsrs	r3, r3, #4
 8003a00:	60fb      	str	r3, [r7, #12]
        break;
 8003a02:	e012      	b.n	8003a2a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	60fb      	str	r3, [r7, #12]
        break;
 8003a0a:	e00e      	b.n	8003a2a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	099b      	lsrs	r3, r3, #6
 8003a10:	60fb      	str	r3, [r7, #12]
        break;
 8003a12:	e00a      	b.n	8003a2a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	09db      	lsrs	r3, r3, #7
 8003a18:	60fb      	str	r3, [r7, #12]
        break;
 8003a1a:	e006      	b.n	8003a2a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	0a1b      	lsrs	r3, r3, #8
 8003a20:	60fb      	str	r3, [r7, #12]
        break;
 8003a22:	e002      	b.n	8003a2a <ADC_ConfigureBoostMode+0x146>
        break;
 8003a24:	bf00      	nop
 8003a26:	e000      	b.n	8003a2a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003a28:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003a2a:	f7fe fe5f 	bl	80026ec <HAL_GetREVID>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d815      	bhi.n	8003a64 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4a2b      	ldr	r2, [pc, #172]	; (8003ae8 <ADC_ConfigureBoostMode+0x204>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d908      	bls.n	8003a52 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a4e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003a50:	e03e      	b.n	8003ad0 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a60:	609a      	str	r2, [r3, #8]
}
 8003a62:	e035      	b.n	8003ad0 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	085b      	lsrs	r3, r3, #1
 8003a68:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4a1f      	ldr	r2, [pc, #124]	; (8003aec <ADC_ConfigureBoostMode+0x208>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d808      	bhi.n	8003a84 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003a80:	609a      	str	r2, [r3, #8]
}
 8003a82:	e025      	b.n	8003ad0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4a1a      	ldr	r2, [pc, #104]	; (8003af0 <ADC_ConfigureBoostMode+0x20c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d80a      	bhi.n	8003aa2 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a9e:	609a      	str	r2, [r3, #8]
}
 8003aa0:	e016      	b.n	8003ad0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4a13      	ldr	r2, [pc, #76]	; (8003af4 <ADC_ConfigureBoostMode+0x210>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d80a      	bhi.n	8003ac0 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003abc:	609a      	str	r2, [r3, #8]
}
 8003abe:	e007      	b.n	8003ad0 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003ace:	609a      	str	r2, [r3, #8]
}
 8003ad0:	bf00      	nop
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40022000 	.word	0x40022000
 8003adc:	40022100 	.word	0x40022100
 8003ae0:	40022300 	.word	0x40022300
 8003ae4:	58026300 	.word	0x58026300
 8003ae8:	01312d00 	.word	0x01312d00
 8003aec:	005f5e10 	.word	0x005f5e10
 8003af0:	00bebc20 	.word	0x00bebc20
 8003af4:	017d7840 	.word	0x017d7840

08003af8 <LL_ADC_IsEnabled>:
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d101      	bne.n	8003b10 <LL_ADC_IsEnabled+0x18>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <LL_ADC_IsEnabled+0x1a>
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <LL_ADC_REG_IsConversionOngoing>:
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d101      	bne.n	8003b36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003b44:	b590      	push	{r4, r7, lr}
 8003b46:	b09f      	sub	sp, #124	; 0x7c
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e0be      	b.n	8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a5c      	ldr	r2, [pc, #368]	; (8003ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d102      	bne.n	8003b82 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003b7c:	4b5b      	ldr	r3, [pc, #364]	; (8003cec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	e001      	b.n	8003b86 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003b82:	2300      	movs	r3, #0
 8003b84:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10b      	bne.n	8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b90:	f043 0220 	orr.w	r2, r3, #32
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e09d      	b.n	8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff ffb9 	bl	8003b1e <LL_ADC_REG_IsConversionOngoing>
 8003bac:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7ff ffb3 	bl	8003b1e <LL_ADC_REG_IsConversionOngoing>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d17f      	bne.n	8003cbe <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003bbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d17c      	bne.n	8003cbe <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a47      	ldr	r2, [pc, #284]	; (8003ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d004      	beq.n	8003bd8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a46      	ldr	r2, [pc, #280]	; (8003cec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d101      	bne.n	8003bdc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003bd8:	4b45      	ldr	r3, [pc, #276]	; (8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003bda:	e000      	b.n	8003bde <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003bdc:	4b45      	ldr	r3, [pc, #276]	; (8003cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003bde:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d039      	beq.n	8003c5c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a3a      	ldr	r2, [pc, #232]	; (8003ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d004      	beq.n	8003c0e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a38      	ldr	r2, [pc, #224]	; (8003cec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d10e      	bne.n	8003c2c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003c0e:	4836      	ldr	r0, [pc, #216]	; (8003ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c10:	f7ff ff72 	bl	8003af8 <LL_ADC_IsEnabled>
 8003c14:	4604      	mov	r4, r0
 8003c16:	4835      	ldr	r0, [pc, #212]	; (8003cec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c18:	f7ff ff6e 	bl	8003af8 <LL_ADC_IsEnabled>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	4323      	orrs	r3, r4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bf0c      	ite	eq
 8003c24:	2301      	moveq	r3, #1
 8003c26:	2300      	movne	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	e008      	b.n	8003c3e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003c2c:	4832      	ldr	r0, [pc, #200]	; (8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003c2e:	f7ff ff63 	bl	8003af8 <LL_ADC_IsEnabled>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d047      	beq.n	8003cd2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	4b2d      	ldr	r3, [pc, #180]	; (8003cfc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	6811      	ldr	r1, [r2, #0]
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	6892      	ldr	r2, [r2, #8]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	431a      	orrs	r2, r3
 8003c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c58:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c5a:	e03a      	b.n	8003cd2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c66:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a1e      	ldr	r2, [pc, #120]	; (8003ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d004      	beq.n	8003c7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a1d      	ldr	r2, [pc, #116]	; (8003cec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d10e      	bne.n	8003c9a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003c7c:	481a      	ldr	r0, [pc, #104]	; (8003ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c7e:	f7ff ff3b 	bl	8003af8 <LL_ADC_IsEnabled>
 8003c82:	4604      	mov	r4, r0
 8003c84:	4819      	ldr	r0, [pc, #100]	; (8003cec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c86:	f7ff ff37 	bl	8003af8 <LL_ADC_IsEnabled>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	4323      	orrs	r3, r4
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	bf0c      	ite	eq
 8003c92:	2301      	moveq	r3, #1
 8003c94:	2300      	movne	r3, #0
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	e008      	b.n	8003cac <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003c9a:	4817      	ldr	r0, [pc, #92]	; (8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003c9c:	f7ff ff2c 	bl	8003af8 <LL_ADC_IsEnabled>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	bf0c      	ite	eq
 8003ca6:	2301      	moveq	r3, #1
 8003ca8:	2300      	movne	r3, #0
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d010      	beq.n	8003cd2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cba:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cbc:	e009      	b.n	8003cd2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc2:	f043 0220 	orr.w	r2, r3, #32
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003cd0:	e000      	b.n	8003cd4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cd2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003cdc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	377c      	adds	r7, #124	; 0x7c
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd90      	pop	{r4, r7, pc}
 8003ce8:	40022000 	.word	0x40022000
 8003cec:	40022100 	.word	0x40022100
 8003cf0:	40022300 	.word	0x40022300
 8003cf4:	58026300 	.word	0x58026300
 8003cf8:	58026000 	.word	0x58026000
 8003cfc:	fffff0e0 	.word	0xfffff0e0

08003d00 <__NVIC_SetPriorityGrouping>:
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f003 0307 	and.w	r3, r3, #7
 8003d0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <__NVIC_SetPriorityGrouping+0x40>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d28:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <__NVIC_SetPriorityGrouping+0x44>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d2e:	4a04      	ldr	r2, [pc, #16]	; (8003d40 <__NVIC_SetPriorityGrouping+0x40>)
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	60d3      	str	r3, [r2, #12]
}
 8003d34:	bf00      	nop
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	e000ed00 	.word	0xe000ed00
 8003d44:	05fa0000 	.word	0x05fa0000

08003d48 <__NVIC_GetPriorityGrouping>:
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d4c:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <__NVIC_GetPriorityGrouping+0x18>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	0a1b      	lsrs	r3, r3, #8
 8003d52:	f003 0307 	and.w	r3, r3, #7
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	e000ed00 	.word	0xe000ed00

08003d64 <__NVIC_EnableIRQ>:
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	db0b      	blt.n	8003d8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d76:	88fb      	ldrh	r3, [r7, #6]
 8003d78:	f003 021f 	and.w	r2, r3, #31
 8003d7c:	4907      	ldr	r1, [pc, #28]	; (8003d9c <__NVIC_EnableIRQ+0x38>)
 8003d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d82:	095b      	lsrs	r3, r3, #5
 8003d84:	2001      	movs	r0, #1
 8003d86:	fa00 f202 	lsl.w	r2, r0, r2
 8003d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	e000e100 	.word	0xe000e100

08003da0 <__NVIC_SetPriority>:
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	4603      	mov	r3, r0
 8003da8:	6039      	str	r1, [r7, #0]
 8003daa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003dac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	db0a      	blt.n	8003dca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	490c      	ldr	r1, [pc, #48]	; (8003dec <__NVIC_SetPriority+0x4c>)
 8003dba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dbe:	0112      	lsls	r2, r2, #4
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003dc8:	e00a      	b.n	8003de0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	4908      	ldr	r1, [pc, #32]	; (8003df0 <__NVIC_SetPriority+0x50>)
 8003dd0:	88fb      	ldrh	r3, [r7, #6]
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	3b04      	subs	r3, #4
 8003dd8:	0112      	lsls	r2, r2, #4
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	440b      	add	r3, r1
 8003dde:	761a      	strb	r2, [r3, #24]
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	e000e100 	.word	0xe000e100
 8003df0:	e000ed00 	.word	0xe000ed00

08003df4 <NVIC_EncodePriority>:
{
 8003df4:	b480      	push	{r7}
 8003df6:	b089      	sub	sp, #36	; 0x24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f1c3 0307 	rsb	r3, r3, #7
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	bf28      	it	cs
 8003e12:	2304      	movcs	r3, #4
 8003e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	3304      	adds	r3, #4
 8003e1a:	2b06      	cmp	r3, #6
 8003e1c:	d902      	bls.n	8003e24 <NVIC_EncodePriority+0x30>
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	3b03      	subs	r3, #3
 8003e22:	e000      	b.n	8003e26 <NVIC_EncodePriority+0x32>
 8003e24:	2300      	movs	r3, #0
 8003e26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	43da      	mvns	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	401a      	ands	r2, r3
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	fa01 f303 	lsl.w	r3, r1, r3
 8003e46:	43d9      	mvns	r1, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e4c:	4313      	orrs	r3, r2
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3724      	adds	r7, #36	; 0x24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
	...

08003e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e6c:	d301      	bcc.n	8003e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e00f      	b.n	8003e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e72:	4a0a      	ldr	r2, [pc, #40]	; (8003e9c <SysTick_Config+0x40>)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e7a:	210f      	movs	r1, #15
 8003e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e80:	f7ff ff8e 	bl	8003da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e84:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <SysTick_Config+0x40>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e8a:	4b04      	ldr	r3, [pc, #16]	; (8003e9c <SysTick_Config+0x40>)
 8003e8c:	2207      	movs	r2, #7
 8003e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	e000e010 	.word	0xe000e010

08003ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7ff ff29 	bl	8003d00 <__NVIC_SetPriorityGrouping>
}
 8003eae:	bf00      	nop
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b086      	sub	sp, #24
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	607a      	str	r2, [r7, #4]
 8003ec2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ec4:	f7ff ff40 	bl	8003d48 <__NVIC_GetPriorityGrouping>
 8003ec8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	6978      	ldr	r0, [r7, #20]
 8003ed0:	f7ff ff90 	bl	8003df4 <NVIC_EncodePriority>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003eda:	4611      	mov	r1, r2
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff ff5f 	bl	8003da0 <__NVIC_SetPriority>
}
 8003ee2:	bf00      	nop
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b082      	sub	sp, #8
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ef4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff ff33 	bl	8003d64 <__NVIC_EnableIRQ>
}
 8003efe:	bf00      	nop
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b082      	sub	sp, #8
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7ff ffa4 	bl	8003e5c <SysTick_Config>
 8003f14:	4603      	mov	r3, r0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b082      	sub	sp, #8
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e014      	b.n	8003f5a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	791b      	ldrb	r3, [r3, #4]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d105      	bne.n	8003f46 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7fd ff67 	bl	8001e14 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2202      	movs	r2, #2
 8003f4a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	795b      	ldrb	r3, [r3, #5]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_DAC_Start+0x16>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e040      	b.n	8003ffa <HAL_DAC_Start+0x98>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2202      	movs	r2, #2
 8003f82:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6819      	ldr	r1, [r3, #0]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	f003 0310 	and.w	r3, r3, #16
 8003f90:	2201      	movs	r2, #1
 8003f92:	409a      	lsls	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10f      	bne.n	8003fc2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d11d      	bne.n	8003fec <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0201 	orr.w	r2, r2, #1
 8003fbe:	605a      	str	r2, [r3, #4]
 8003fc0:	e014      	b.n	8003fec <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	f003 0310 	and.w	r3, r3, #16
 8003fd2:	2102      	movs	r1, #2
 8003fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d107      	bne.n	8003fec <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0202 	orr.w	r2, r2, #2
 8003fea:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
	...

08004008 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b088      	sub	sp, #32
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	795b      	ldrb	r3, [r3, #5]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_DAC_ConfigChannel+0x18>
 800401c:	2302      	movs	r3, #2
 800401e:	e11d      	b.n	800425c <HAL_DAC_ConfigChannel+0x254>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2201      	movs	r2, #1
 8004024:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2202      	movs	r2, #2
 800402a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b04      	cmp	r3, #4
 8004032:	d174      	bne.n	800411e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004034:	f7fe fb1a 	bl	800266c <HAL_GetTick>
 8004038:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d134      	bne.n	80040aa <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004040:	e011      	b.n	8004066 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004042:	f7fe fb13 	bl	800266c <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b01      	cmp	r3, #1
 800404e:	d90a      	bls.n	8004066 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	f043 0208 	orr.w	r2, r3, #8
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2203      	movs	r2, #3
 8004060:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e0fa      	b.n	800425c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800406c:	4b7d      	ldr	r3, [pc, #500]	; (8004264 <HAL_DAC_ConfigChannel+0x25c>)
 800406e:	4013      	ands	r3, r2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1e6      	bne.n	8004042 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004074:	2001      	movs	r0, #1
 8004076:	f7fe fb05 	bl	8002684 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	6992      	ldr	r2, [r2, #24]
 8004082:	641a      	str	r2, [r3, #64]	; 0x40
 8004084:	e01e      	b.n	80040c4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004086:	f7fe faf1 	bl	800266c <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b01      	cmp	r3, #1
 8004092:	d90a      	bls.n	80040aa <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f043 0208 	orr.w	r2, r3, #8
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2203      	movs	r2, #3
 80040a4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e0d8      	b.n	800425c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	dbe8      	blt.n	8004086 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80040b4:	2001      	movs	r0, #1
 80040b6:	f7fe fae5 	bl	8002684 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	6992      	ldr	r2, [r2, #24]
 80040c2:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f003 0310 	and.w	r3, r3, #16
 80040d0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80040d4:	fa01 f303 	lsl.w	r3, r1, r3
 80040d8:	43db      	mvns	r3, r3
 80040da:	ea02 0103 	and.w	r1, r2, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	69da      	ldr	r2, [r3, #28]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	409a      	lsls	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f003 0310 	and.w	r3, r3, #16
 80040fe:	21ff      	movs	r1, #255	; 0xff
 8004100:	fa01 f303 	lsl.w	r3, r1, r3
 8004104:	43db      	mvns	r3, r3
 8004106:	ea02 0103 	and.w	r1, r2, r3
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	6a1a      	ldr	r2, [r3, #32]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f003 0310 	and.w	r3, r3, #16
 8004114:	409a      	lsls	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d11d      	bne.n	8004162 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f003 0310 	and.w	r3, r3, #16
 8004134:	221f      	movs	r2, #31
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	43db      	mvns	r3, r3
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	4013      	ands	r3, r2
 8004140:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f003 0310 	and.w	r3, r3, #16
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004168:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2207      	movs	r2, #7
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	43db      	mvns	r3, r3
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	4013      	ands	r3, r2
 800417c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d102      	bne.n	800418c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004186:	2300      	movs	r3, #0
 8004188:	61fb      	str	r3, [r7, #28]
 800418a:	e00f      	b.n	80041ac <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	2b02      	cmp	r3, #2
 8004192:	d102      	bne.n	800419a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004194:	2301      	movs	r3, #1
 8004196:	61fb      	str	r3, [r7, #28]
 8004198:	e008      	b.n	80041ac <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d102      	bne.n	80041a8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80041a2:	2301      	movs	r3, #1
 80041a4:	61fb      	str	r3, [r7, #28]
 80041a6:	e001      	b.n	80041ac <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	69fa      	ldr	r2, [r7, #28]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f003 0310 	and.w	r3, r3, #16
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6819      	ldr	r1, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f003 0310 	and.w	r3, r3, #16
 80041e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	43da      	mvns	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	400a      	ands	r2, r1
 80041f2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f003 0310 	and.w	r3, r3, #16
 8004202:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	43db      	mvns	r3, r3
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	4013      	ands	r3, r2
 8004210:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6819      	ldr	r1, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f003 0310 	and.w	r3, r3, #16
 800423e:	22c0      	movs	r2, #192	; 0xc0
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	43da      	mvns	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	400a      	ands	r2, r1
 800424c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3720      	adds	r7, #32
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	20008000 	.word	0x20008000

08004268 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004270:	f7fe f9fc 	bl	800266c <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e316      	b.n	80048ae <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a66      	ldr	r2, [pc, #408]	; (8004420 <HAL_DMA_Init+0x1b8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d04a      	beq.n	8004320 <HAL_DMA_Init+0xb8>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a65      	ldr	r2, [pc, #404]	; (8004424 <HAL_DMA_Init+0x1bc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d045      	beq.n	8004320 <HAL_DMA_Init+0xb8>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a63      	ldr	r2, [pc, #396]	; (8004428 <HAL_DMA_Init+0x1c0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d040      	beq.n	8004320 <HAL_DMA_Init+0xb8>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a62      	ldr	r2, [pc, #392]	; (800442c <HAL_DMA_Init+0x1c4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d03b      	beq.n	8004320 <HAL_DMA_Init+0xb8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a60      	ldr	r2, [pc, #384]	; (8004430 <HAL_DMA_Init+0x1c8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d036      	beq.n	8004320 <HAL_DMA_Init+0xb8>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a5f      	ldr	r2, [pc, #380]	; (8004434 <HAL_DMA_Init+0x1cc>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d031      	beq.n	8004320 <HAL_DMA_Init+0xb8>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a5d      	ldr	r2, [pc, #372]	; (8004438 <HAL_DMA_Init+0x1d0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d02c      	beq.n	8004320 <HAL_DMA_Init+0xb8>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a5c      	ldr	r2, [pc, #368]	; (800443c <HAL_DMA_Init+0x1d4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d027      	beq.n	8004320 <HAL_DMA_Init+0xb8>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a5a      	ldr	r2, [pc, #360]	; (8004440 <HAL_DMA_Init+0x1d8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d022      	beq.n	8004320 <HAL_DMA_Init+0xb8>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a59      	ldr	r2, [pc, #356]	; (8004444 <HAL_DMA_Init+0x1dc>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d01d      	beq.n	8004320 <HAL_DMA_Init+0xb8>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a57      	ldr	r2, [pc, #348]	; (8004448 <HAL_DMA_Init+0x1e0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d018      	beq.n	8004320 <HAL_DMA_Init+0xb8>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a56      	ldr	r2, [pc, #344]	; (800444c <HAL_DMA_Init+0x1e4>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d013      	beq.n	8004320 <HAL_DMA_Init+0xb8>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a54      	ldr	r2, [pc, #336]	; (8004450 <HAL_DMA_Init+0x1e8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d00e      	beq.n	8004320 <HAL_DMA_Init+0xb8>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a53      	ldr	r2, [pc, #332]	; (8004454 <HAL_DMA_Init+0x1ec>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d009      	beq.n	8004320 <HAL_DMA_Init+0xb8>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a51      	ldr	r2, [pc, #324]	; (8004458 <HAL_DMA_Init+0x1f0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d004      	beq.n	8004320 <HAL_DMA_Init+0xb8>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a50      	ldr	r2, [pc, #320]	; (800445c <HAL_DMA_Init+0x1f4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d101      	bne.n	8004324 <HAL_DMA_Init+0xbc>
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <HAL_DMA_Init+0xbe>
 8004324:	2300      	movs	r3, #0
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 813b 	beq.w	80045a2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a37      	ldr	r2, [pc, #220]	; (8004420 <HAL_DMA_Init+0x1b8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d04a      	beq.n	80043dc <HAL_DMA_Init+0x174>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a36      	ldr	r2, [pc, #216]	; (8004424 <HAL_DMA_Init+0x1bc>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d045      	beq.n	80043dc <HAL_DMA_Init+0x174>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a34      	ldr	r2, [pc, #208]	; (8004428 <HAL_DMA_Init+0x1c0>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d040      	beq.n	80043dc <HAL_DMA_Init+0x174>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a33      	ldr	r2, [pc, #204]	; (800442c <HAL_DMA_Init+0x1c4>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d03b      	beq.n	80043dc <HAL_DMA_Init+0x174>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a31      	ldr	r2, [pc, #196]	; (8004430 <HAL_DMA_Init+0x1c8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d036      	beq.n	80043dc <HAL_DMA_Init+0x174>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a30      	ldr	r2, [pc, #192]	; (8004434 <HAL_DMA_Init+0x1cc>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d031      	beq.n	80043dc <HAL_DMA_Init+0x174>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a2e      	ldr	r2, [pc, #184]	; (8004438 <HAL_DMA_Init+0x1d0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d02c      	beq.n	80043dc <HAL_DMA_Init+0x174>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a2d      	ldr	r2, [pc, #180]	; (800443c <HAL_DMA_Init+0x1d4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d027      	beq.n	80043dc <HAL_DMA_Init+0x174>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a2b      	ldr	r2, [pc, #172]	; (8004440 <HAL_DMA_Init+0x1d8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d022      	beq.n	80043dc <HAL_DMA_Init+0x174>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a2a      	ldr	r2, [pc, #168]	; (8004444 <HAL_DMA_Init+0x1dc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d01d      	beq.n	80043dc <HAL_DMA_Init+0x174>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a28      	ldr	r2, [pc, #160]	; (8004448 <HAL_DMA_Init+0x1e0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d018      	beq.n	80043dc <HAL_DMA_Init+0x174>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a27      	ldr	r2, [pc, #156]	; (800444c <HAL_DMA_Init+0x1e4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d013      	beq.n	80043dc <HAL_DMA_Init+0x174>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a25      	ldr	r2, [pc, #148]	; (8004450 <HAL_DMA_Init+0x1e8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00e      	beq.n	80043dc <HAL_DMA_Init+0x174>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a24      	ldr	r2, [pc, #144]	; (8004454 <HAL_DMA_Init+0x1ec>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d009      	beq.n	80043dc <HAL_DMA_Init+0x174>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a22      	ldr	r2, [pc, #136]	; (8004458 <HAL_DMA_Init+0x1f0>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d004      	beq.n	80043dc <HAL_DMA_Init+0x174>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a21      	ldr	r2, [pc, #132]	; (800445c <HAL_DMA_Init+0x1f4>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d108      	bne.n	80043ee <HAL_DMA_Init+0x186>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0201 	bic.w	r2, r2, #1
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	e007      	b.n	80043fe <HAL_DMA_Init+0x196>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0201 	bic.w	r2, r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80043fe:	e02f      	b.n	8004460 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004400:	f7fe f934 	bl	800266c <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b05      	cmp	r3, #5
 800440c:	d928      	bls.n	8004460 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2220      	movs	r2, #32
 8004412:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2203      	movs	r2, #3
 8004418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e246      	b.n	80048ae <HAL_DMA_Init+0x646>
 8004420:	40020010 	.word	0x40020010
 8004424:	40020028 	.word	0x40020028
 8004428:	40020040 	.word	0x40020040
 800442c:	40020058 	.word	0x40020058
 8004430:	40020070 	.word	0x40020070
 8004434:	40020088 	.word	0x40020088
 8004438:	400200a0 	.word	0x400200a0
 800443c:	400200b8 	.word	0x400200b8
 8004440:	40020410 	.word	0x40020410
 8004444:	40020428 	.word	0x40020428
 8004448:	40020440 	.word	0x40020440
 800444c:	40020458 	.word	0x40020458
 8004450:	40020470 	.word	0x40020470
 8004454:	40020488 	.word	0x40020488
 8004458:	400204a0 	.word	0x400204a0
 800445c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1c8      	bne.n	8004400 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	4b83      	ldr	r3, [pc, #524]	; (8004688 <HAL_DMA_Init+0x420>)
 800447a:	4013      	ands	r3, r2
 800447c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004486:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004492:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800449e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d107      	bne.n	80044c4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	4313      	orrs	r3, r2
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80044c4:	4b71      	ldr	r3, [pc, #452]	; (800468c <HAL_DMA_Init+0x424>)
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	4b71      	ldr	r3, [pc, #452]	; (8004690 <HAL_DMA_Init+0x428>)
 80044ca:	4013      	ands	r3, r2
 80044cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044d0:	d328      	bcc.n	8004524 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b28      	cmp	r3, #40	; 0x28
 80044d8:	d903      	bls.n	80044e2 <HAL_DMA_Init+0x27a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b2e      	cmp	r3, #46	; 0x2e
 80044e0:	d917      	bls.n	8004512 <HAL_DMA_Init+0x2aa>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b3e      	cmp	r3, #62	; 0x3e
 80044e8:	d903      	bls.n	80044f2 <HAL_DMA_Init+0x28a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b42      	cmp	r3, #66	; 0x42
 80044f0:	d90f      	bls.n	8004512 <HAL_DMA_Init+0x2aa>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b46      	cmp	r3, #70	; 0x46
 80044f8:	d903      	bls.n	8004502 <HAL_DMA_Init+0x29a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b48      	cmp	r3, #72	; 0x48
 8004500:	d907      	bls.n	8004512 <HAL_DMA_Init+0x2aa>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b4e      	cmp	r3, #78	; 0x4e
 8004508:	d905      	bls.n	8004516 <HAL_DMA_Init+0x2ae>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b52      	cmp	r3, #82	; 0x52
 8004510:	d801      	bhi.n	8004516 <HAL_DMA_Init+0x2ae>
 8004512:	2301      	movs	r3, #1
 8004514:	e000      	b.n	8004518 <HAL_DMA_Init+0x2b0>
 8004516:	2300      	movs	r3, #0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004522:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f023 0307 	bic.w	r3, r3, #7
 800453a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	4313      	orrs	r3, r2
 8004544:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	2b04      	cmp	r3, #4
 800454c:	d117      	bne.n	800457e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	4313      	orrs	r3, r2
 8004556:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00e      	beq.n	800457e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f001 fdcf 	bl	8006104 <DMA_CheckFifoParam>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d008      	beq.n	800457e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2240      	movs	r2, #64	; 0x40
 8004570:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e197      	b.n	80048ae <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f001 fd0a 	bl	8005fa0 <DMA_CalcBaseAndBitshift>
 800458c:	4603      	mov	r3, r0
 800458e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004594:	f003 031f 	and.w	r3, r3, #31
 8004598:	223f      	movs	r2, #63	; 0x3f
 800459a:	409a      	lsls	r2, r3
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	609a      	str	r2, [r3, #8]
 80045a0:	e0cd      	b.n	800473e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a3b      	ldr	r2, [pc, #236]	; (8004694 <HAL_DMA_Init+0x42c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d022      	beq.n	80045f2 <HAL_DMA_Init+0x38a>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a39      	ldr	r2, [pc, #228]	; (8004698 <HAL_DMA_Init+0x430>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d01d      	beq.n	80045f2 <HAL_DMA_Init+0x38a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a38      	ldr	r2, [pc, #224]	; (800469c <HAL_DMA_Init+0x434>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d018      	beq.n	80045f2 <HAL_DMA_Init+0x38a>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a36      	ldr	r2, [pc, #216]	; (80046a0 <HAL_DMA_Init+0x438>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d013      	beq.n	80045f2 <HAL_DMA_Init+0x38a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a35      	ldr	r2, [pc, #212]	; (80046a4 <HAL_DMA_Init+0x43c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d00e      	beq.n	80045f2 <HAL_DMA_Init+0x38a>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a33      	ldr	r2, [pc, #204]	; (80046a8 <HAL_DMA_Init+0x440>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d009      	beq.n	80045f2 <HAL_DMA_Init+0x38a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a32      	ldr	r2, [pc, #200]	; (80046ac <HAL_DMA_Init+0x444>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d004      	beq.n	80045f2 <HAL_DMA_Init+0x38a>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a30      	ldr	r2, [pc, #192]	; (80046b0 <HAL_DMA_Init+0x448>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d101      	bne.n	80045f6 <HAL_DMA_Init+0x38e>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <HAL_DMA_Init+0x390>
 80045f6:	2300      	movs	r3, #0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 8097 	beq.w	800472c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a24      	ldr	r2, [pc, #144]	; (8004694 <HAL_DMA_Init+0x42c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d021      	beq.n	800464c <HAL_DMA_Init+0x3e4>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a22      	ldr	r2, [pc, #136]	; (8004698 <HAL_DMA_Init+0x430>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d01c      	beq.n	800464c <HAL_DMA_Init+0x3e4>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a21      	ldr	r2, [pc, #132]	; (800469c <HAL_DMA_Init+0x434>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d017      	beq.n	800464c <HAL_DMA_Init+0x3e4>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a1f      	ldr	r2, [pc, #124]	; (80046a0 <HAL_DMA_Init+0x438>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d012      	beq.n	800464c <HAL_DMA_Init+0x3e4>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a1e      	ldr	r2, [pc, #120]	; (80046a4 <HAL_DMA_Init+0x43c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d00d      	beq.n	800464c <HAL_DMA_Init+0x3e4>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a1c      	ldr	r2, [pc, #112]	; (80046a8 <HAL_DMA_Init+0x440>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d008      	beq.n	800464c <HAL_DMA_Init+0x3e4>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a1b      	ldr	r2, [pc, #108]	; (80046ac <HAL_DMA_Init+0x444>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d003      	beq.n	800464c <HAL_DMA_Init+0x3e4>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a19      	ldr	r2, [pc, #100]	; (80046b0 <HAL_DMA_Init+0x448>)
 800464a:	4293      	cmp	r3, r2
 800464c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2202      	movs	r2, #2
 8004652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4b12      	ldr	r3, [pc, #72]	; (80046b4 <HAL_DMA_Init+0x44c>)
 800466a:	4013      	ands	r3, r2
 800466c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b40      	cmp	r3, #64	; 0x40
 8004674:	d020      	beq.n	80046b8 <HAL_DMA_Init+0x450>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2b80      	cmp	r3, #128	; 0x80
 800467c:	d102      	bne.n	8004684 <HAL_DMA_Init+0x41c>
 800467e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004682:	e01a      	b.n	80046ba <HAL_DMA_Init+0x452>
 8004684:	2300      	movs	r3, #0
 8004686:	e018      	b.n	80046ba <HAL_DMA_Init+0x452>
 8004688:	fe10803f 	.word	0xfe10803f
 800468c:	5c001000 	.word	0x5c001000
 8004690:	ffff0000 	.word	0xffff0000
 8004694:	58025408 	.word	0x58025408
 8004698:	5802541c 	.word	0x5802541c
 800469c:	58025430 	.word	0x58025430
 80046a0:	58025444 	.word	0x58025444
 80046a4:	58025458 	.word	0x58025458
 80046a8:	5802546c 	.word	0x5802546c
 80046ac:	58025480 	.word	0x58025480
 80046b0:	58025494 	.word	0x58025494
 80046b4:	fffe000f 	.word	0xfffe000f
 80046b8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	68d2      	ldr	r2, [r2, #12]
 80046be:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80046c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80046c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80046d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80046d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80046e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80046e8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	461a      	mov	r2, r3
 80046fe:	4b6e      	ldr	r3, [pc, #440]	; (80048b8 <HAL_DMA_Init+0x650>)
 8004700:	4413      	add	r3, r2
 8004702:	4a6e      	ldr	r2, [pc, #440]	; (80048bc <HAL_DMA_Init+0x654>)
 8004704:	fba2 2303 	umull	r2, r3, r2, r3
 8004708:	091b      	lsrs	r3, r3, #4
 800470a:	009a      	lsls	r2, r3, #2
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f001 fc45 	bl	8005fa0 <DMA_CalcBaseAndBitshift>
 8004716:	4603      	mov	r3, r0
 8004718:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800471e:	f003 031f 	and.w	r3, r3, #31
 8004722:	2201      	movs	r2, #1
 8004724:	409a      	lsls	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	605a      	str	r2, [r3, #4]
 800472a:	e008      	b.n	800473e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2240      	movs	r2, #64	; 0x40
 8004730:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2203      	movs	r2, #3
 8004736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e0b7      	b.n	80048ae <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a5f      	ldr	r2, [pc, #380]	; (80048c0 <HAL_DMA_Init+0x658>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d072      	beq.n	800482e <HAL_DMA_Init+0x5c6>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a5d      	ldr	r2, [pc, #372]	; (80048c4 <HAL_DMA_Init+0x65c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d06d      	beq.n	800482e <HAL_DMA_Init+0x5c6>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a5c      	ldr	r2, [pc, #368]	; (80048c8 <HAL_DMA_Init+0x660>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d068      	beq.n	800482e <HAL_DMA_Init+0x5c6>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a5a      	ldr	r2, [pc, #360]	; (80048cc <HAL_DMA_Init+0x664>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d063      	beq.n	800482e <HAL_DMA_Init+0x5c6>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a59      	ldr	r2, [pc, #356]	; (80048d0 <HAL_DMA_Init+0x668>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d05e      	beq.n	800482e <HAL_DMA_Init+0x5c6>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a57      	ldr	r2, [pc, #348]	; (80048d4 <HAL_DMA_Init+0x66c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d059      	beq.n	800482e <HAL_DMA_Init+0x5c6>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a56      	ldr	r2, [pc, #344]	; (80048d8 <HAL_DMA_Init+0x670>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d054      	beq.n	800482e <HAL_DMA_Init+0x5c6>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a54      	ldr	r2, [pc, #336]	; (80048dc <HAL_DMA_Init+0x674>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d04f      	beq.n	800482e <HAL_DMA_Init+0x5c6>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a53      	ldr	r2, [pc, #332]	; (80048e0 <HAL_DMA_Init+0x678>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d04a      	beq.n	800482e <HAL_DMA_Init+0x5c6>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a51      	ldr	r2, [pc, #324]	; (80048e4 <HAL_DMA_Init+0x67c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d045      	beq.n	800482e <HAL_DMA_Init+0x5c6>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a50      	ldr	r2, [pc, #320]	; (80048e8 <HAL_DMA_Init+0x680>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d040      	beq.n	800482e <HAL_DMA_Init+0x5c6>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a4e      	ldr	r2, [pc, #312]	; (80048ec <HAL_DMA_Init+0x684>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d03b      	beq.n	800482e <HAL_DMA_Init+0x5c6>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a4d      	ldr	r2, [pc, #308]	; (80048f0 <HAL_DMA_Init+0x688>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d036      	beq.n	800482e <HAL_DMA_Init+0x5c6>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a4b      	ldr	r2, [pc, #300]	; (80048f4 <HAL_DMA_Init+0x68c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d031      	beq.n	800482e <HAL_DMA_Init+0x5c6>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a4a      	ldr	r2, [pc, #296]	; (80048f8 <HAL_DMA_Init+0x690>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d02c      	beq.n	800482e <HAL_DMA_Init+0x5c6>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a48      	ldr	r2, [pc, #288]	; (80048fc <HAL_DMA_Init+0x694>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d027      	beq.n	800482e <HAL_DMA_Init+0x5c6>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a47      	ldr	r2, [pc, #284]	; (8004900 <HAL_DMA_Init+0x698>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d022      	beq.n	800482e <HAL_DMA_Init+0x5c6>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a45      	ldr	r2, [pc, #276]	; (8004904 <HAL_DMA_Init+0x69c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d01d      	beq.n	800482e <HAL_DMA_Init+0x5c6>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a44      	ldr	r2, [pc, #272]	; (8004908 <HAL_DMA_Init+0x6a0>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d018      	beq.n	800482e <HAL_DMA_Init+0x5c6>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a42      	ldr	r2, [pc, #264]	; (800490c <HAL_DMA_Init+0x6a4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d013      	beq.n	800482e <HAL_DMA_Init+0x5c6>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a41      	ldr	r2, [pc, #260]	; (8004910 <HAL_DMA_Init+0x6a8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00e      	beq.n	800482e <HAL_DMA_Init+0x5c6>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a3f      	ldr	r2, [pc, #252]	; (8004914 <HAL_DMA_Init+0x6ac>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d009      	beq.n	800482e <HAL_DMA_Init+0x5c6>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a3e      	ldr	r2, [pc, #248]	; (8004918 <HAL_DMA_Init+0x6b0>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d004      	beq.n	800482e <HAL_DMA_Init+0x5c6>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a3c      	ldr	r2, [pc, #240]	; (800491c <HAL_DMA_Init+0x6b4>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d101      	bne.n	8004832 <HAL_DMA_Init+0x5ca>
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <HAL_DMA_Init+0x5cc>
 8004832:	2300      	movs	r3, #0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d032      	beq.n	800489e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f001 fcdf 	bl	80061fc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	2b80      	cmp	r3, #128	; 0x80
 8004844:	d102      	bne.n	800484c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004860:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d010      	beq.n	800488c <HAL_DMA_Init+0x624>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b08      	cmp	r3, #8
 8004870:	d80c      	bhi.n	800488c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f001 fd5c 	bl	8006330 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004888:	605a      	str	r2, [r3, #4]
 800488a:	e008      	b.n	800489e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	a7fdabf8 	.word	0xa7fdabf8
 80048bc:	cccccccd 	.word	0xcccccccd
 80048c0:	40020010 	.word	0x40020010
 80048c4:	40020028 	.word	0x40020028
 80048c8:	40020040 	.word	0x40020040
 80048cc:	40020058 	.word	0x40020058
 80048d0:	40020070 	.word	0x40020070
 80048d4:	40020088 	.word	0x40020088
 80048d8:	400200a0 	.word	0x400200a0
 80048dc:	400200b8 	.word	0x400200b8
 80048e0:	40020410 	.word	0x40020410
 80048e4:	40020428 	.word	0x40020428
 80048e8:	40020440 	.word	0x40020440
 80048ec:	40020458 	.word	0x40020458
 80048f0:	40020470 	.word	0x40020470
 80048f4:	40020488 	.word	0x40020488
 80048f8:	400204a0 	.word	0x400204a0
 80048fc:	400204b8 	.word	0x400204b8
 8004900:	58025408 	.word	0x58025408
 8004904:	5802541c 	.word	0x5802541c
 8004908:	58025430 	.word	0x58025430
 800490c:	58025444 	.word	0x58025444
 8004910:	58025458 	.word	0x58025458
 8004914:	5802546c 	.word	0x5802546c
 8004918:	58025480 	.word	0x58025480
 800491c:	58025494 	.word	0x58025494

08004920 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e226      	b.n	8004d8a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004942:	2b01      	cmp	r3, #1
 8004944:	d101      	bne.n	800494a <HAL_DMA_Start_IT+0x2a>
 8004946:	2302      	movs	r3, #2
 8004948:	e21f      	b.n	8004d8a <HAL_DMA_Start_IT+0x46a>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b01      	cmp	r3, #1
 800495c:	f040 820a 	bne.w	8004d74 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a68      	ldr	r2, [pc, #416]	; (8004b14 <HAL_DMA_Start_IT+0x1f4>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d04a      	beq.n	8004a0e <HAL_DMA_Start_IT+0xee>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a66      	ldr	r2, [pc, #408]	; (8004b18 <HAL_DMA_Start_IT+0x1f8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d045      	beq.n	8004a0e <HAL_DMA_Start_IT+0xee>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a65      	ldr	r2, [pc, #404]	; (8004b1c <HAL_DMA_Start_IT+0x1fc>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d040      	beq.n	8004a0e <HAL_DMA_Start_IT+0xee>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a63      	ldr	r2, [pc, #396]	; (8004b20 <HAL_DMA_Start_IT+0x200>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d03b      	beq.n	8004a0e <HAL_DMA_Start_IT+0xee>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a62      	ldr	r2, [pc, #392]	; (8004b24 <HAL_DMA_Start_IT+0x204>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d036      	beq.n	8004a0e <HAL_DMA_Start_IT+0xee>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a60      	ldr	r2, [pc, #384]	; (8004b28 <HAL_DMA_Start_IT+0x208>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d031      	beq.n	8004a0e <HAL_DMA_Start_IT+0xee>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a5f      	ldr	r2, [pc, #380]	; (8004b2c <HAL_DMA_Start_IT+0x20c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d02c      	beq.n	8004a0e <HAL_DMA_Start_IT+0xee>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a5d      	ldr	r2, [pc, #372]	; (8004b30 <HAL_DMA_Start_IT+0x210>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d027      	beq.n	8004a0e <HAL_DMA_Start_IT+0xee>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a5c      	ldr	r2, [pc, #368]	; (8004b34 <HAL_DMA_Start_IT+0x214>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d022      	beq.n	8004a0e <HAL_DMA_Start_IT+0xee>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a5a      	ldr	r2, [pc, #360]	; (8004b38 <HAL_DMA_Start_IT+0x218>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d01d      	beq.n	8004a0e <HAL_DMA_Start_IT+0xee>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a59      	ldr	r2, [pc, #356]	; (8004b3c <HAL_DMA_Start_IT+0x21c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d018      	beq.n	8004a0e <HAL_DMA_Start_IT+0xee>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a57      	ldr	r2, [pc, #348]	; (8004b40 <HAL_DMA_Start_IT+0x220>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d013      	beq.n	8004a0e <HAL_DMA_Start_IT+0xee>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a56      	ldr	r2, [pc, #344]	; (8004b44 <HAL_DMA_Start_IT+0x224>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00e      	beq.n	8004a0e <HAL_DMA_Start_IT+0xee>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a54      	ldr	r2, [pc, #336]	; (8004b48 <HAL_DMA_Start_IT+0x228>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d009      	beq.n	8004a0e <HAL_DMA_Start_IT+0xee>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a53      	ldr	r2, [pc, #332]	; (8004b4c <HAL_DMA_Start_IT+0x22c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d004      	beq.n	8004a0e <HAL_DMA_Start_IT+0xee>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a51      	ldr	r2, [pc, #324]	; (8004b50 <HAL_DMA_Start_IT+0x230>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d108      	bne.n	8004a20 <HAL_DMA_Start_IT+0x100>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0201 	bic.w	r2, r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	e007      	b.n	8004a30 <HAL_DMA_Start_IT+0x110>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0201 	bic.w	r2, r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	68b9      	ldr	r1, [r7, #8]
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f001 f906 	bl	8005c48 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a34      	ldr	r2, [pc, #208]	; (8004b14 <HAL_DMA_Start_IT+0x1f4>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d04a      	beq.n	8004adc <HAL_DMA_Start_IT+0x1bc>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a33      	ldr	r2, [pc, #204]	; (8004b18 <HAL_DMA_Start_IT+0x1f8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d045      	beq.n	8004adc <HAL_DMA_Start_IT+0x1bc>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a31      	ldr	r2, [pc, #196]	; (8004b1c <HAL_DMA_Start_IT+0x1fc>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d040      	beq.n	8004adc <HAL_DMA_Start_IT+0x1bc>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a30      	ldr	r2, [pc, #192]	; (8004b20 <HAL_DMA_Start_IT+0x200>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d03b      	beq.n	8004adc <HAL_DMA_Start_IT+0x1bc>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a2e      	ldr	r2, [pc, #184]	; (8004b24 <HAL_DMA_Start_IT+0x204>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d036      	beq.n	8004adc <HAL_DMA_Start_IT+0x1bc>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a2d      	ldr	r2, [pc, #180]	; (8004b28 <HAL_DMA_Start_IT+0x208>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d031      	beq.n	8004adc <HAL_DMA_Start_IT+0x1bc>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a2b      	ldr	r2, [pc, #172]	; (8004b2c <HAL_DMA_Start_IT+0x20c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d02c      	beq.n	8004adc <HAL_DMA_Start_IT+0x1bc>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a2a      	ldr	r2, [pc, #168]	; (8004b30 <HAL_DMA_Start_IT+0x210>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d027      	beq.n	8004adc <HAL_DMA_Start_IT+0x1bc>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a28      	ldr	r2, [pc, #160]	; (8004b34 <HAL_DMA_Start_IT+0x214>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d022      	beq.n	8004adc <HAL_DMA_Start_IT+0x1bc>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a27      	ldr	r2, [pc, #156]	; (8004b38 <HAL_DMA_Start_IT+0x218>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d01d      	beq.n	8004adc <HAL_DMA_Start_IT+0x1bc>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a25      	ldr	r2, [pc, #148]	; (8004b3c <HAL_DMA_Start_IT+0x21c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d018      	beq.n	8004adc <HAL_DMA_Start_IT+0x1bc>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a24      	ldr	r2, [pc, #144]	; (8004b40 <HAL_DMA_Start_IT+0x220>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d013      	beq.n	8004adc <HAL_DMA_Start_IT+0x1bc>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a22      	ldr	r2, [pc, #136]	; (8004b44 <HAL_DMA_Start_IT+0x224>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d00e      	beq.n	8004adc <HAL_DMA_Start_IT+0x1bc>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a21      	ldr	r2, [pc, #132]	; (8004b48 <HAL_DMA_Start_IT+0x228>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d009      	beq.n	8004adc <HAL_DMA_Start_IT+0x1bc>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a1f      	ldr	r2, [pc, #124]	; (8004b4c <HAL_DMA_Start_IT+0x22c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d004      	beq.n	8004adc <HAL_DMA_Start_IT+0x1bc>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a1e      	ldr	r2, [pc, #120]	; (8004b50 <HAL_DMA_Start_IT+0x230>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d101      	bne.n	8004ae0 <HAL_DMA_Start_IT+0x1c0>
 8004adc:	2301      	movs	r3, #1
 8004ade:	e000      	b.n	8004ae2 <HAL_DMA_Start_IT+0x1c2>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d036      	beq.n	8004b54 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f023 021e 	bic.w	r2, r3, #30
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f042 0216 	orr.w	r2, r2, #22
 8004af8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d03e      	beq.n	8004b80 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f042 0208 	orr.w	r2, r2, #8
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	e035      	b.n	8004b80 <HAL_DMA_Start_IT+0x260>
 8004b14:	40020010 	.word	0x40020010
 8004b18:	40020028 	.word	0x40020028
 8004b1c:	40020040 	.word	0x40020040
 8004b20:	40020058 	.word	0x40020058
 8004b24:	40020070 	.word	0x40020070
 8004b28:	40020088 	.word	0x40020088
 8004b2c:	400200a0 	.word	0x400200a0
 8004b30:	400200b8 	.word	0x400200b8
 8004b34:	40020410 	.word	0x40020410
 8004b38:	40020428 	.word	0x40020428
 8004b3c:	40020440 	.word	0x40020440
 8004b40:	40020458 	.word	0x40020458
 8004b44:	40020470 	.word	0x40020470
 8004b48:	40020488 	.word	0x40020488
 8004b4c:	400204a0 	.word	0x400204a0
 8004b50:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f023 020e 	bic.w	r2, r3, #14
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 020a 	orr.w	r2, r2, #10
 8004b66:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d007      	beq.n	8004b80 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0204 	orr.w	r2, r2, #4
 8004b7e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a83      	ldr	r2, [pc, #524]	; (8004d94 <HAL_DMA_Start_IT+0x474>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d072      	beq.n	8004c70 <HAL_DMA_Start_IT+0x350>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a82      	ldr	r2, [pc, #520]	; (8004d98 <HAL_DMA_Start_IT+0x478>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d06d      	beq.n	8004c70 <HAL_DMA_Start_IT+0x350>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a80      	ldr	r2, [pc, #512]	; (8004d9c <HAL_DMA_Start_IT+0x47c>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d068      	beq.n	8004c70 <HAL_DMA_Start_IT+0x350>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a7f      	ldr	r2, [pc, #508]	; (8004da0 <HAL_DMA_Start_IT+0x480>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d063      	beq.n	8004c70 <HAL_DMA_Start_IT+0x350>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a7d      	ldr	r2, [pc, #500]	; (8004da4 <HAL_DMA_Start_IT+0x484>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d05e      	beq.n	8004c70 <HAL_DMA_Start_IT+0x350>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a7c      	ldr	r2, [pc, #496]	; (8004da8 <HAL_DMA_Start_IT+0x488>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d059      	beq.n	8004c70 <HAL_DMA_Start_IT+0x350>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a7a      	ldr	r2, [pc, #488]	; (8004dac <HAL_DMA_Start_IT+0x48c>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d054      	beq.n	8004c70 <HAL_DMA_Start_IT+0x350>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a79      	ldr	r2, [pc, #484]	; (8004db0 <HAL_DMA_Start_IT+0x490>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d04f      	beq.n	8004c70 <HAL_DMA_Start_IT+0x350>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a77      	ldr	r2, [pc, #476]	; (8004db4 <HAL_DMA_Start_IT+0x494>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d04a      	beq.n	8004c70 <HAL_DMA_Start_IT+0x350>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a76      	ldr	r2, [pc, #472]	; (8004db8 <HAL_DMA_Start_IT+0x498>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d045      	beq.n	8004c70 <HAL_DMA_Start_IT+0x350>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a74      	ldr	r2, [pc, #464]	; (8004dbc <HAL_DMA_Start_IT+0x49c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d040      	beq.n	8004c70 <HAL_DMA_Start_IT+0x350>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a73      	ldr	r2, [pc, #460]	; (8004dc0 <HAL_DMA_Start_IT+0x4a0>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d03b      	beq.n	8004c70 <HAL_DMA_Start_IT+0x350>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a71      	ldr	r2, [pc, #452]	; (8004dc4 <HAL_DMA_Start_IT+0x4a4>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d036      	beq.n	8004c70 <HAL_DMA_Start_IT+0x350>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a70      	ldr	r2, [pc, #448]	; (8004dc8 <HAL_DMA_Start_IT+0x4a8>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d031      	beq.n	8004c70 <HAL_DMA_Start_IT+0x350>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a6e      	ldr	r2, [pc, #440]	; (8004dcc <HAL_DMA_Start_IT+0x4ac>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d02c      	beq.n	8004c70 <HAL_DMA_Start_IT+0x350>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a6d      	ldr	r2, [pc, #436]	; (8004dd0 <HAL_DMA_Start_IT+0x4b0>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d027      	beq.n	8004c70 <HAL_DMA_Start_IT+0x350>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a6b      	ldr	r2, [pc, #428]	; (8004dd4 <HAL_DMA_Start_IT+0x4b4>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d022      	beq.n	8004c70 <HAL_DMA_Start_IT+0x350>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a6a      	ldr	r2, [pc, #424]	; (8004dd8 <HAL_DMA_Start_IT+0x4b8>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d01d      	beq.n	8004c70 <HAL_DMA_Start_IT+0x350>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a68      	ldr	r2, [pc, #416]	; (8004ddc <HAL_DMA_Start_IT+0x4bc>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d018      	beq.n	8004c70 <HAL_DMA_Start_IT+0x350>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a67      	ldr	r2, [pc, #412]	; (8004de0 <HAL_DMA_Start_IT+0x4c0>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d013      	beq.n	8004c70 <HAL_DMA_Start_IT+0x350>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a65      	ldr	r2, [pc, #404]	; (8004de4 <HAL_DMA_Start_IT+0x4c4>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00e      	beq.n	8004c70 <HAL_DMA_Start_IT+0x350>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a64      	ldr	r2, [pc, #400]	; (8004de8 <HAL_DMA_Start_IT+0x4c8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d009      	beq.n	8004c70 <HAL_DMA_Start_IT+0x350>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a62      	ldr	r2, [pc, #392]	; (8004dec <HAL_DMA_Start_IT+0x4cc>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d004      	beq.n	8004c70 <HAL_DMA_Start_IT+0x350>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a61      	ldr	r2, [pc, #388]	; (8004df0 <HAL_DMA_Start_IT+0x4d0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d101      	bne.n	8004c74 <HAL_DMA_Start_IT+0x354>
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <HAL_DMA_Start_IT+0x356>
 8004c74:	2300      	movs	r3, #0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d01a      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d007      	beq.n	8004c98 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c96:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d007      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004caa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cae:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a37      	ldr	r2, [pc, #220]	; (8004d94 <HAL_DMA_Start_IT+0x474>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d04a      	beq.n	8004d50 <HAL_DMA_Start_IT+0x430>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a36      	ldr	r2, [pc, #216]	; (8004d98 <HAL_DMA_Start_IT+0x478>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d045      	beq.n	8004d50 <HAL_DMA_Start_IT+0x430>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a34      	ldr	r2, [pc, #208]	; (8004d9c <HAL_DMA_Start_IT+0x47c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d040      	beq.n	8004d50 <HAL_DMA_Start_IT+0x430>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a33      	ldr	r2, [pc, #204]	; (8004da0 <HAL_DMA_Start_IT+0x480>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d03b      	beq.n	8004d50 <HAL_DMA_Start_IT+0x430>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a31      	ldr	r2, [pc, #196]	; (8004da4 <HAL_DMA_Start_IT+0x484>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d036      	beq.n	8004d50 <HAL_DMA_Start_IT+0x430>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a30      	ldr	r2, [pc, #192]	; (8004da8 <HAL_DMA_Start_IT+0x488>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d031      	beq.n	8004d50 <HAL_DMA_Start_IT+0x430>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a2e      	ldr	r2, [pc, #184]	; (8004dac <HAL_DMA_Start_IT+0x48c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d02c      	beq.n	8004d50 <HAL_DMA_Start_IT+0x430>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a2d      	ldr	r2, [pc, #180]	; (8004db0 <HAL_DMA_Start_IT+0x490>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d027      	beq.n	8004d50 <HAL_DMA_Start_IT+0x430>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a2b      	ldr	r2, [pc, #172]	; (8004db4 <HAL_DMA_Start_IT+0x494>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d022      	beq.n	8004d50 <HAL_DMA_Start_IT+0x430>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a2a      	ldr	r2, [pc, #168]	; (8004db8 <HAL_DMA_Start_IT+0x498>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d01d      	beq.n	8004d50 <HAL_DMA_Start_IT+0x430>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a28      	ldr	r2, [pc, #160]	; (8004dbc <HAL_DMA_Start_IT+0x49c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d018      	beq.n	8004d50 <HAL_DMA_Start_IT+0x430>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a27      	ldr	r2, [pc, #156]	; (8004dc0 <HAL_DMA_Start_IT+0x4a0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d013      	beq.n	8004d50 <HAL_DMA_Start_IT+0x430>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a25      	ldr	r2, [pc, #148]	; (8004dc4 <HAL_DMA_Start_IT+0x4a4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d00e      	beq.n	8004d50 <HAL_DMA_Start_IT+0x430>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a24      	ldr	r2, [pc, #144]	; (8004dc8 <HAL_DMA_Start_IT+0x4a8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d009      	beq.n	8004d50 <HAL_DMA_Start_IT+0x430>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a22      	ldr	r2, [pc, #136]	; (8004dcc <HAL_DMA_Start_IT+0x4ac>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d004      	beq.n	8004d50 <HAL_DMA_Start_IT+0x430>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a21      	ldr	r2, [pc, #132]	; (8004dd0 <HAL_DMA_Start_IT+0x4b0>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d108      	bne.n	8004d62 <HAL_DMA_Start_IT+0x442>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
 8004d60:	e012      	b.n	8004d88 <HAL_DMA_Start_IT+0x468>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0201 	orr.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	e009      	b.n	8004d88 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d7a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40020010 	.word	0x40020010
 8004d98:	40020028 	.word	0x40020028
 8004d9c:	40020040 	.word	0x40020040
 8004da0:	40020058 	.word	0x40020058
 8004da4:	40020070 	.word	0x40020070
 8004da8:	40020088 	.word	0x40020088
 8004dac:	400200a0 	.word	0x400200a0
 8004db0:	400200b8 	.word	0x400200b8
 8004db4:	40020410 	.word	0x40020410
 8004db8:	40020428 	.word	0x40020428
 8004dbc:	40020440 	.word	0x40020440
 8004dc0:	40020458 	.word	0x40020458
 8004dc4:	40020470 	.word	0x40020470
 8004dc8:	40020488 	.word	0x40020488
 8004dcc:	400204a0 	.word	0x400204a0
 8004dd0:	400204b8 	.word	0x400204b8
 8004dd4:	58025408 	.word	0x58025408
 8004dd8:	5802541c 	.word	0x5802541c
 8004ddc:	58025430 	.word	0x58025430
 8004de0:	58025444 	.word	0x58025444
 8004de4:	58025458 	.word	0x58025458
 8004de8:	5802546c 	.word	0x5802546c
 8004dec:	58025480 	.word	0x58025480
 8004df0:	58025494 	.word	0x58025494

08004df4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08a      	sub	sp, #40	; 0x28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e00:	4b67      	ldr	r3, [pc, #412]	; (8004fa0 <HAL_DMA_IRQHandler+0x1ac>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a67      	ldr	r2, [pc, #412]	; (8004fa4 <HAL_DMA_IRQHandler+0x1b0>)
 8004e06:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0a:	0a9b      	lsrs	r3, r3, #10
 8004e0c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e12:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e18:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a5f      	ldr	r2, [pc, #380]	; (8004fa8 <HAL_DMA_IRQHandler+0x1b4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d04a      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xd2>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a5d      	ldr	r2, [pc, #372]	; (8004fac <HAL_DMA_IRQHandler+0x1b8>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d045      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xd2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a5c      	ldr	r2, [pc, #368]	; (8004fb0 <HAL_DMA_IRQHandler+0x1bc>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d040      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xd2>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a5a      	ldr	r2, [pc, #360]	; (8004fb4 <HAL_DMA_IRQHandler+0x1c0>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d03b      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xd2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a59      	ldr	r2, [pc, #356]	; (8004fb8 <HAL_DMA_IRQHandler+0x1c4>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d036      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xd2>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a57      	ldr	r2, [pc, #348]	; (8004fbc <HAL_DMA_IRQHandler+0x1c8>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d031      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xd2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a56      	ldr	r2, [pc, #344]	; (8004fc0 <HAL_DMA_IRQHandler+0x1cc>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d02c      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xd2>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a54      	ldr	r2, [pc, #336]	; (8004fc4 <HAL_DMA_IRQHandler+0x1d0>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d027      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xd2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a53      	ldr	r2, [pc, #332]	; (8004fc8 <HAL_DMA_IRQHandler+0x1d4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d022      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xd2>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a51      	ldr	r2, [pc, #324]	; (8004fcc <HAL_DMA_IRQHandler+0x1d8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d01d      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xd2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a50      	ldr	r2, [pc, #320]	; (8004fd0 <HAL_DMA_IRQHandler+0x1dc>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d018      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xd2>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a4e      	ldr	r2, [pc, #312]	; (8004fd4 <HAL_DMA_IRQHandler+0x1e0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d013      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xd2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a4d      	ldr	r2, [pc, #308]	; (8004fd8 <HAL_DMA_IRQHandler+0x1e4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d00e      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xd2>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a4b      	ldr	r2, [pc, #300]	; (8004fdc <HAL_DMA_IRQHandler+0x1e8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d009      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xd2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a4a      	ldr	r2, [pc, #296]	; (8004fe0 <HAL_DMA_IRQHandler+0x1ec>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d004      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xd2>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a48      	ldr	r2, [pc, #288]	; (8004fe4 <HAL_DMA_IRQHandler+0x1f0>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d101      	bne.n	8004eca <HAL_DMA_IRQHandler+0xd6>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e000      	b.n	8004ecc <HAL_DMA_IRQHandler+0xd8>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 842b 	beq.w	8005728 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed6:	f003 031f 	and.w	r3, r3, #31
 8004eda:	2208      	movs	r2, #8
 8004edc:	409a      	lsls	r2, r3
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 80a2 	beq.w	800502c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a2e      	ldr	r2, [pc, #184]	; (8004fa8 <HAL_DMA_IRQHandler+0x1b4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d04a      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x194>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a2d      	ldr	r2, [pc, #180]	; (8004fac <HAL_DMA_IRQHandler+0x1b8>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d045      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x194>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a2b      	ldr	r2, [pc, #172]	; (8004fb0 <HAL_DMA_IRQHandler+0x1bc>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d040      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x194>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a2a      	ldr	r2, [pc, #168]	; (8004fb4 <HAL_DMA_IRQHandler+0x1c0>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d03b      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x194>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a28      	ldr	r2, [pc, #160]	; (8004fb8 <HAL_DMA_IRQHandler+0x1c4>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d036      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x194>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a27      	ldr	r2, [pc, #156]	; (8004fbc <HAL_DMA_IRQHandler+0x1c8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d031      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x194>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a25      	ldr	r2, [pc, #148]	; (8004fc0 <HAL_DMA_IRQHandler+0x1cc>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d02c      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x194>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a24      	ldr	r2, [pc, #144]	; (8004fc4 <HAL_DMA_IRQHandler+0x1d0>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d027      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x194>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a22      	ldr	r2, [pc, #136]	; (8004fc8 <HAL_DMA_IRQHandler+0x1d4>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d022      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x194>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a21      	ldr	r2, [pc, #132]	; (8004fcc <HAL_DMA_IRQHandler+0x1d8>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d01d      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x194>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a1f      	ldr	r2, [pc, #124]	; (8004fd0 <HAL_DMA_IRQHandler+0x1dc>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d018      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x194>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a1e      	ldr	r2, [pc, #120]	; (8004fd4 <HAL_DMA_IRQHandler+0x1e0>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d013      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x194>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a1c      	ldr	r2, [pc, #112]	; (8004fd8 <HAL_DMA_IRQHandler+0x1e4>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d00e      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x194>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a1b      	ldr	r2, [pc, #108]	; (8004fdc <HAL_DMA_IRQHandler+0x1e8>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d009      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x194>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a19      	ldr	r2, [pc, #100]	; (8004fe0 <HAL_DMA_IRQHandler+0x1ec>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d004      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x194>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a18      	ldr	r2, [pc, #96]	; (8004fe4 <HAL_DMA_IRQHandler+0x1f0>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d12f      	bne.n	8004fe8 <HAL_DMA_IRQHandler+0x1f4>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	bf14      	ite	ne
 8004f96:	2301      	movne	r3, #1
 8004f98:	2300      	moveq	r3, #0
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	e02e      	b.n	8004ffc <HAL_DMA_IRQHandler+0x208>
 8004f9e:	bf00      	nop
 8004fa0:	24000024 	.word	0x24000024
 8004fa4:	1b4e81b5 	.word	0x1b4e81b5
 8004fa8:	40020010 	.word	0x40020010
 8004fac:	40020028 	.word	0x40020028
 8004fb0:	40020040 	.word	0x40020040
 8004fb4:	40020058 	.word	0x40020058
 8004fb8:	40020070 	.word	0x40020070
 8004fbc:	40020088 	.word	0x40020088
 8004fc0:	400200a0 	.word	0x400200a0
 8004fc4:	400200b8 	.word	0x400200b8
 8004fc8:	40020410 	.word	0x40020410
 8004fcc:	40020428 	.word	0x40020428
 8004fd0:	40020440 	.word	0x40020440
 8004fd4:	40020458 	.word	0x40020458
 8004fd8:	40020470 	.word	0x40020470
 8004fdc:	40020488 	.word	0x40020488
 8004fe0:	400204a0 	.word	0x400204a0
 8004fe4:	400204b8 	.word	0x400204b8
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	bf14      	ite	ne
 8004ff6:	2301      	movne	r3, #1
 8004ff8:	2300      	moveq	r3, #0
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d015      	beq.n	800502c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0204 	bic.w	r2, r2, #4
 800500e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005014:	f003 031f 	and.w	r3, r3, #31
 8005018:	2208      	movs	r2, #8
 800501a:	409a      	lsls	r2, r3
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005024:	f043 0201 	orr.w	r2, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005030:	f003 031f 	and.w	r3, r3, #31
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	fa22 f303 	lsr.w	r3, r2, r3
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d06e      	beq.n	8005120 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a69      	ldr	r2, [pc, #420]	; (80051ec <HAL_DMA_IRQHandler+0x3f8>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d04a      	beq.n	80050e2 <HAL_DMA_IRQHandler+0x2ee>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a67      	ldr	r2, [pc, #412]	; (80051f0 <HAL_DMA_IRQHandler+0x3fc>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d045      	beq.n	80050e2 <HAL_DMA_IRQHandler+0x2ee>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a66      	ldr	r2, [pc, #408]	; (80051f4 <HAL_DMA_IRQHandler+0x400>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d040      	beq.n	80050e2 <HAL_DMA_IRQHandler+0x2ee>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a64      	ldr	r2, [pc, #400]	; (80051f8 <HAL_DMA_IRQHandler+0x404>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d03b      	beq.n	80050e2 <HAL_DMA_IRQHandler+0x2ee>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a63      	ldr	r2, [pc, #396]	; (80051fc <HAL_DMA_IRQHandler+0x408>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d036      	beq.n	80050e2 <HAL_DMA_IRQHandler+0x2ee>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a61      	ldr	r2, [pc, #388]	; (8005200 <HAL_DMA_IRQHandler+0x40c>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d031      	beq.n	80050e2 <HAL_DMA_IRQHandler+0x2ee>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a60      	ldr	r2, [pc, #384]	; (8005204 <HAL_DMA_IRQHandler+0x410>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d02c      	beq.n	80050e2 <HAL_DMA_IRQHandler+0x2ee>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a5e      	ldr	r2, [pc, #376]	; (8005208 <HAL_DMA_IRQHandler+0x414>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d027      	beq.n	80050e2 <HAL_DMA_IRQHandler+0x2ee>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a5d      	ldr	r2, [pc, #372]	; (800520c <HAL_DMA_IRQHandler+0x418>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d022      	beq.n	80050e2 <HAL_DMA_IRQHandler+0x2ee>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a5b      	ldr	r2, [pc, #364]	; (8005210 <HAL_DMA_IRQHandler+0x41c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d01d      	beq.n	80050e2 <HAL_DMA_IRQHandler+0x2ee>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a5a      	ldr	r2, [pc, #360]	; (8005214 <HAL_DMA_IRQHandler+0x420>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d018      	beq.n	80050e2 <HAL_DMA_IRQHandler+0x2ee>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a58      	ldr	r2, [pc, #352]	; (8005218 <HAL_DMA_IRQHandler+0x424>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d013      	beq.n	80050e2 <HAL_DMA_IRQHandler+0x2ee>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a57      	ldr	r2, [pc, #348]	; (800521c <HAL_DMA_IRQHandler+0x428>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d00e      	beq.n	80050e2 <HAL_DMA_IRQHandler+0x2ee>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a55      	ldr	r2, [pc, #340]	; (8005220 <HAL_DMA_IRQHandler+0x42c>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d009      	beq.n	80050e2 <HAL_DMA_IRQHandler+0x2ee>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a54      	ldr	r2, [pc, #336]	; (8005224 <HAL_DMA_IRQHandler+0x430>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d004      	beq.n	80050e2 <HAL_DMA_IRQHandler+0x2ee>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a52      	ldr	r2, [pc, #328]	; (8005228 <HAL_DMA_IRQHandler+0x434>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d10a      	bne.n	80050f8 <HAL_DMA_IRQHandler+0x304>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	bf14      	ite	ne
 80050f0:	2301      	movne	r3, #1
 80050f2:	2300      	moveq	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	e003      	b.n	8005100 <HAL_DMA_IRQHandler+0x30c>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2300      	movs	r3, #0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00d      	beq.n	8005120 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005108:	f003 031f 	and.w	r3, r3, #31
 800510c:	2201      	movs	r2, #1
 800510e:	409a      	lsls	r2, r3
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005118:	f043 0202 	orr.w	r2, r3, #2
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005124:	f003 031f 	and.w	r3, r3, #31
 8005128:	2204      	movs	r2, #4
 800512a:	409a      	lsls	r2, r3
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	4013      	ands	r3, r2
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 808f 	beq.w	8005254 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a2c      	ldr	r2, [pc, #176]	; (80051ec <HAL_DMA_IRQHandler+0x3f8>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d04a      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x3e2>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a2a      	ldr	r2, [pc, #168]	; (80051f0 <HAL_DMA_IRQHandler+0x3fc>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d045      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x3e2>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a29      	ldr	r2, [pc, #164]	; (80051f4 <HAL_DMA_IRQHandler+0x400>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d040      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x3e2>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a27      	ldr	r2, [pc, #156]	; (80051f8 <HAL_DMA_IRQHandler+0x404>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d03b      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x3e2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a26      	ldr	r2, [pc, #152]	; (80051fc <HAL_DMA_IRQHandler+0x408>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d036      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x3e2>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a24      	ldr	r2, [pc, #144]	; (8005200 <HAL_DMA_IRQHandler+0x40c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d031      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x3e2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a23      	ldr	r2, [pc, #140]	; (8005204 <HAL_DMA_IRQHandler+0x410>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d02c      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x3e2>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a21      	ldr	r2, [pc, #132]	; (8005208 <HAL_DMA_IRQHandler+0x414>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d027      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x3e2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a20      	ldr	r2, [pc, #128]	; (800520c <HAL_DMA_IRQHandler+0x418>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d022      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x3e2>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a1e      	ldr	r2, [pc, #120]	; (8005210 <HAL_DMA_IRQHandler+0x41c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d01d      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x3e2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a1d      	ldr	r2, [pc, #116]	; (8005214 <HAL_DMA_IRQHandler+0x420>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d018      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x3e2>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a1b      	ldr	r2, [pc, #108]	; (8005218 <HAL_DMA_IRQHandler+0x424>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d013      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x3e2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a1a      	ldr	r2, [pc, #104]	; (800521c <HAL_DMA_IRQHandler+0x428>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00e      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x3e2>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a18      	ldr	r2, [pc, #96]	; (8005220 <HAL_DMA_IRQHandler+0x42c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d009      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x3e2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a17      	ldr	r2, [pc, #92]	; (8005224 <HAL_DMA_IRQHandler+0x430>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d004      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x3e2>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a15      	ldr	r2, [pc, #84]	; (8005228 <HAL_DMA_IRQHandler+0x434>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d12a      	bne.n	800522c <HAL_DMA_IRQHandler+0x438>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	bf14      	ite	ne
 80051e4:	2301      	movne	r3, #1
 80051e6:	2300      	moveq	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	e023      	b.n	8005234 <HAL_DMA_IRQHandler+0x440>
 80051ec:	40020010 	.word	0x40020010
 80051f0:	40020028 	.word	0x40020028
 80051f4:	40020040 	.word	0x40020040
 80051f8:	40020058 	.word	0x40020058
 80051fc:	40020070 	.word	0x40020070
 8005200:	40020088 	.word	0x40020088
 8005204:	400200a0 	.word	0x400200a0
 8005208:	400200b8 	.word	0x400200b8
 800520c:	40020410 	.word	0x40020410
 8005210:	40020428 	.word	0x40020428
 8005214:	40020440 	.word	0x40020440
 8005218:	40020458 	.word	0x40020458
 800521c:	40020470 	.word	0x40020470
 8005220:	40020488 	.word	0x40020488
 8005224:	400204a0 	.word	0x400204a0
 8005228:	400204b8 	.word	0x400204b8
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2300      	movs	r3, #0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00d      	beq.n	8005254 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523c:	f003 031f 	and.w	r3, r3, #31
 8005240:	2204      	movs	r2, #4
 8005242:	409a      	lsls	r2, r3
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524c:	f043 0204 	orr.w	r2, r3, #4
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005258:	f003 031f 	and.w	r3, r3, #31
 800525c:	2210      	movs	r2, #16
 800525e:	409a      	lsls	r2, r3
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	4013      	ands	r3, r2
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 80a6 	beq.w	80053b6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a85      	ldr	r2, [pc, #532]	; (8005484 <HAL_DMA_IRQHandler+0x690>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d04a      	beq.n	800530a <HAL_DMA_IRQHandler+0x516>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a83      	ldr	r2, [pc, #524]	; (8005488 <HAL_DMA_IRQHandler+0x694>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d045      	beq.n	800530a <HAL_DMA_IRQHandler+0x516>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a82      	ldr	r2, [pc, #520]	; (800548c <HAL_DMA_IRQHandler+0x698>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d040      	beq.n	800530a <HAL_DMA_IRQHandler+0x516>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a80      	ldr	r2, [pc, #512]	; (8005490 <HAL_DMA_IRQHandler+0x69c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d03b      	beq.n	800530a <HAL_DMA_IRQHandler+0x516>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a7f      	ldr	r2, [pc, #508]	; (8005494 <HAL_DMA_IRQHandler+0x6a0>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d036      	beq.n	800530a <HAL_DMA_IRQHandler+0x516>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a7d      	ldr	r2, [pc, #500]	; (8005498 <HAL_DMA_IRQHandler+0x6a4>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d031      	beq.n	800530a <HAL_DMA_IRQHandler+0x516>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a7c      	ldr	r2, [pc, #496]	; (800549c <HAL_DMA_IRQHandler+0x6a8>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d02c      	beq.n	800530a <HAL_DMA_IRQHandler+0x516>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a7a      	ldr	r2, [pc, #488]	; (80054a0 <HAL_DMA_IRQHandler+0x6ac>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d027      	beq.n	800530a <HAL_DMA_IRQHandler+0x516>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a79      	ldr	r2, [pc, #484]	; (80054a4 <HAL_DMA_IRQHandler+0x6b0>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d022      	beq.n	800530a <HAL_DMA_IRQHandler+0x516>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a77      	ldr	r2, [pc, #476]	; (80054a8 <HAL_DMA_IRQHandler+0x6b4>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d01d      	beq.n	800530a <HAL_DMA_IRQHandler+0x516>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a76      	ldr	r2, [pc, #472]	; (80054ac <HAL_DMA_IRQHandler+0x6b8>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d018      	beq.n	800530a <HAL_DMA_IRQHandler+0x516>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a74      	ldr	r2, [pc, #464]	; (80054b0 <HAL_DMA_IRQHandler+0x6bc>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d013      	beq.n	800530a <HAL_DMA_IRQHandler+0x516>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a73      	ldr	r2, [pc, #460]	; (80054b4 <HAL_DMA_IRQHandler+0x6c0>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00e      	beq.n	800530a <HAL_DMA_IRQHandler+0x516>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a71      	ldr	r2, [pc, #452]	; (80054b8 <HAL_DMA_IRQHandler+0x6c4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d009      	beq.n	800530a <HAL_DMA_IRQHandler+0x516>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a70      	ldr	r2, [pc, #448]	; (80054bc <HAL_DMA_IRQHandler+0x6c8>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d004      	beq.n	800530a <HAL_DMA_IRQHandler+0x516>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a6e      	ldr	r2, [pc, #440]	; (80054c0 <HAL_DMA_IRQHandler+0x6cc>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d10a      	bne.n	8005320 <HAL_DMA_IRQHandler+0x52c>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0308 	and.w	r3, r3, #8
 8005314:	2b00      	cmp	r3, #0
 8005316:	bf14      	ite	ne
 8005318:	2301      	movne	r3, #1
 800531a:	2300      	moveq	r3, #0
 800531c:	b2db      	uxtb	r3, r3
 800531e:	e009      	b.n	8005334 <HAL_DMA_IRQHandler+0x540>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0304 	and.w	r3, r3, #4
 800532a:	2b00      	cmp	r3, #0
 800532c:	bf14      	ite	ne
 800532e:	2301      	movne	r3, #1
 8005330:	2300      	moveq	r3, #0
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d03e      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800533c:	f003 031f 	and.w	r3, r3, #31
 8005340:	2210      	movs	r2, #16
 8005342:	409a      	lsls	r2, r3
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d018      	beq.n	8005388 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d108      	bne.n	8005376 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005368:	2b00      	cmp	r3, #0
 800536a:	d024      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	4798      	blx	r3
 8005374:	e01f      	b.n	80053b6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800537a:	2b00      	cmp	r3, #0
 800537c:	d01b      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	4798      	blx	r3
 8005386:	e016      	b.n	80053b6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005392:	2b00      	cmp	r3, #0
 8005394:	d107      	bne.n	80053a6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0208 	bic.w	r2, r2, #8
 80053a4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ba:	f003 031f 	and.w	r3, r3, #31
 80053be:	2220      	movs	r2, #32
 80053c0:	409a      	lsls	r2, r3
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	4013      	ands	r3, r2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f000 8110 	beq.w	80055ec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a2c      	ldr	r2, [pc, #176]	; (8005484 <HAL_DMA_IRQHandler+0x690>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d04a      	beq.n	800546c <HAL_DMA_IRQHandler+0x678>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a2b      	ldr	r2, [pc, #172]	; (8005488 <HAL_DMA_IRQHandler+0x694>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d045      	beq.n	800546c <HAL_DMA_IRQHandler+0x678>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a29      	ldr	r2, [pc, #164]	; (800548c <HAL_DMA_IRQHandler+0x698>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d040      	beq.n	800546c <HAL_DMA_IRQHandler+0x678>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a28      	ldr	r2, [pc, #160]	; (8005490 <HAL_DMA_IRQHandler+0x69c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d03b      	beq.n	800546c <HAL_DMA_IRQHandler+0x678>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a26      	ldr	r2, [pc, #152]	; (8005494 <HAL_DMA_IRQHandler+0x6a0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d036      	beq.n	800546c <HAL_DMA_IRQHandler+0x678>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a25      	ldr	r2, [pc, #148]	; (8005498 <HAL_DMA_IRQHandler+0x6a4>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d031      	beq.n	800546c <HAL_DMA_IRQHandler+0x678>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a23      	ldr	r2, [pc, #140]	; (800549c <HAL_DMA_IRQHandler+0x6a8>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d02c      	beq.n	800546c <HAL_DMA_IRQHandler+0x678>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a22      	ldr	r2, [pc, #136]	; (80054a0 <HAL_DMA_IRQHandler+0x6ac>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d027      	beq.n	800546c <HAL_DMA_IRQHandler+0x678>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a20      	ldr	r2, [pc, #128]	; (80054a4 <HAL_DMA_IRQHandler+0x6b0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d022      	beq.n	800546c <HAL_DMA_IRQHandler+0x678>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a1f      	ldr	r2, [pc, #124]	; (80054a8 <HAL_DMA_IRQHandler+0x6b4>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d01d      	beq.n	800546c <HAL_DMA_IRQHandler+0x678>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a1d      	ldr	r2, [pc, #116]	; (80054ac <HAL_DMA_IRQHandler+0x6b8>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d018      	beq.n	800546c <HAL_DMA_IRQHandler+0x678>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a1c      	ldr	r2, [pc, #112]	; (80054b0 <HAL_DMA_IRQHandler+0x6bc>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d013      	beq.n	800546c <HAL_DMA_IRQHandler+0x678>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a1a      	ldr	r2, [pc, #104]	; (80054b4 <HAL_DMA_IRQHandler+0x6c0>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00e      	beq.n	800546c <HAL_DMA_IRQHandler+0x678>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a19      	ldr	r2, [pc, #100]	; (80054b8 <HAL_DMA_IRQHandler+0x6c4>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d009      	beq.n	800546c <HAL_DMA_IRQHandler+0x678>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a17      	ldr	r2, [pc, #92]	; (80054bc <HAL_DMA_IRQHandler+0x6c8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d004      	beq.n	800546c <HAL_DMA_IRQHandler+0x678>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a16      	ldr	r2, [pc, #88]	; (80054c0 <HAL_DMA_IRQHandler+0x6cc>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d12b      	bne.n	80054c4 <HAL_DMA_IRQHandler+0x6d0>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0310 	and.w	r3, r3, #16
 8005476:	2b00      	cmp	r3, #0
 8005478:	bf14      	ite	ne
 800547a:	2301      	movne	r3, #1
 800547c:	2300      	moveq	r3, #0
 800547e:	b2db      	uxtb	r3, r3
 8005480:	e02a      	b.n	80054d8 <HAL_DMA_IRQHandler+0x6e4>
 8005482:	bf00      	nop
 8005484:	40020010 	.word	0x40020010
 8005488:	40020028 	.word	0x40020028
 800548c:	40020040 	.word	0x40020040
 8005490:	40020058 	.word	0x40020058
 8005494:	40020070 	.word	0x40020070
 8005498:	40020088 	.word	0x40020088
 800549c:	400200a0 	.word	0x400200a0
 80054a0:	400200b8 	.word	0x400200b8
 80054a4:	40020410 	.word	0x40020410
 80054a8:	40020428 	.word	0x40020428
 80054ac:	40020440 	.word	0x40020440
 80054b0:	40020458 	.word	0x40020458
 80054b4:	40020470 	.word	0x40020470
 80054b8:	40020488 	.word	0x40020488
 80054bc:	400204a0 	.word	0x400204a0
 80054c0:	400204b8 	.word	0x400204b8
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	bf14      	ite	ne
 80054d2:	2301      	movne	r3, #1
 80054d4:	2300      	moveq	r3, #0
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 8087 	beq.w	80055ec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e2:	f003 031f 	and.w	r3, r3, #31
 80054e6:	2220      	movs	r2, #32
 80054e8:	409a      	lsls	r2, r3
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d139      	bne.n	800556e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0216 	bic.w	r2, r2, #22
 8005508:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	695a      	ldr	r2, [r3, #20]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005518:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	d103      	bne.n	800552a <HAL_DMA_IRQHandler+0x736>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005526:	2b00      	cmp	r3, #0
 8005528:	d007      	beq.n	800553a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 0208 	bic.w	r2, r2, #8
 8005538:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800553e:	f003 031f 	and.w	r3, r3, #31
 8005542:	223f      	movs	r2, #63	; 0x3f
 8005544:	409a      	lsls	r2, r3
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 834a 	beq.w	8005bf8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	4798      	blx	r3
          }
          return;
 800556c:	e344      	b.n	8005bf8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d018      	beq.n	80055ae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d108      	bne.n	800559c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558e:	2b00      	cmp	r3, #0
 8005590:	d02c      	beq.n	80055ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	4798      	blx	r3
 800559a:	e027      	b.n	80055ec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d023      	beq.n	80055ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	4798      	blx	r3
 80055ac:	e01e      	b.n	80055ec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10f      	bne.n	80055dc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 0210 	bic.w	r2, r2, #16
 80055ca:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d003      	beq.n	80055ec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 8306 	beq.w	8005c02 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 8088 	beq.w	8005714 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2204      	movs	r2, #4
 8005608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a7a      	ldr	r2, [pc, #488]	; (80057fc <HAL_DMA_IRQHandler+0xa08>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d04a      	beq.n	80056ac <HAL_DMA_IRQHandler+0x8b8>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a79      	ldr	r2, [pc, #484]	; (8005800 <HAL_DMA_IRQHandler+0xa0c>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d045      	beq.n	80056ac <HAL_DMA_IRQHandler+0x8b8>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a77      	ldr	r2, [pc, #476]	; (8005804 <HAL_DMA_IRQHandler+0xa10>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d040      	beq.n	80056ac <HAL_DMA_IRQHandler+0x8b8>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a76      	ldr	r2, [pc, #472]	; (8005808 <HAL_DMA_IRQHandler+0xa14>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d03b      	beq.n	80056ac <HAL_DMA_IRQHandler+0x8b8>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a74      	ldr	r2, [pc, #464]	; (800580c <HAL_DMA_IRQHandler+0xa18>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d036      	beq.n	80056ac <HAL_DMA_IRQHandler+0x8b8>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a73      	ldr	r2, [pc, #460]	; (8005810 <HAL_DMA_IRQHandler+0xa1c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d031      	beq.n	80056ac <HAL_DMA_IRQHandler+0x8b8>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a71      	ldr	r2, [pc, #452]	; (8005814 <HAL_DMA_IRQHandler+0xa20>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d02c      	beq.n	80056ac <HAL_DMA_IRQHandler+0x8b8>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a70      	ldr	r2, [pc, #448]	; (8005818 <HAL_DMA_IRQHandler+0xa24>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d027      	beq.n	80056ac <HAL_DMA_IRQHandler+0x8b8>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a6e      	ldr	r2, [pc, #440]	; (800581c <HAL_DMA_IRQHandler+0xa28>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d022      	beq.n	80056ac <HAL_DMA_IRQHandler+0x8b8>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a6d      	ldr	r2, [pc, #436]	; (8005820 <HAL_DMA_IRQHandler+0xa2c>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d01d      	beq.n	80056ac <HAL_DMA_IRQHandler+0x8b8>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a6b      	ldr	r2, [pc, #428]	; (8005824 <HAL_DMA_IRQHandler+0xa30>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d018      	beq.n	80056ac <HAL_DMA_IRQHandler+0x8b8>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a6a      	ldr	r2, [pc, #424]	; (8005828 <HAL_DMA_IRQHandler+0xa34>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d013      	beq.n	80056ac <HAL_DMA_IRQHandler+0x8b8>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a68      	ldr	r2, [pc, #416]	; (800582c <HAL_DMA_IRQHandler+0xa38>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00e      	beq.n	80056ac <HAL_DMA_IRQHandler+0x8b8>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a67      	ldr	r2, [pc, #412]	; (8005830 <HAL_DMA_IRQHandler+0xa3c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d009      	beq.n	80056ac <HAL_DMA_IRQHandler+0x8b8>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a65      	ldr	r2, [pc, #404]	; (8005834 <HAL_DMA_IRQHandler+0xa40>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d004      	beq.n	80056ac <HAL_DMA_IRQHandler+0x8b8>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a64      	ldr	r2, [pc, #400]	; (8005838 <HAL_DMA_IRQHandler+0xa44>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d108      	bne.n	80056be <HAL_DMA_IRQHandler+0x8ca>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0201 	bic.w	r2, r2, #1
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	e007      	b.n	80056ce <HAL_DMA_IRQHandler+0x8da>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0201 	bic.w	r2, r2, #1
 80056cc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3301      	adds	r3, #1
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d307      	bcc.n	80056ea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1f2      	bne.n	80056ce <HAL_DMA_IRQHandler+0x8da>
 80056e8:	e000      	b.n	80056ec <HAL_DMA_IRQHandler+0x8f8>
            break;
 80056ea:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d004      	beq.n	8005704 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2203      	movs	r2, #3
 80056fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005702:	e003      	b.n	800570c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 8272 	beq.w	8005c02 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	4798      	blx	r3
 8005726:	e26c      	b.n	8005c02 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a43      	ldr	r2, [pc, #268]	; (800583c <HAL_DMA_IRQHandler+0xa48>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d022      	beq.n	8005778 <HAL_DMA_IRQHandler+0x984>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a42      	ldr	r2, [pc, #264]	; (8005840 <HAL_DMA_IRQHandler+0xa4c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d01d      	beq.n	8005778 <HAL_DMA_IRQHandler+0x984>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a40      	ldr	r2, [pc, #256]	; (8005844 <HAL_DMA_IRQHandler+0xa50>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d018      	beq.n	8005778 <HAL_DMA_IRQHandler+0x984>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a3f      	ldr	r2, [pc, #252]	; (8005848 <HAL_DMA_IRQHandler+0xa54>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d013      	beq.n	8005778 <HAL_DMA_IRQHandler+0x984>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a3d      	ldr	r2, [pc, #244]	; (800584c <HAL_DMA_IRQHandler+0xa58>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00e      	beq.n	8005778 <HAL_DMA_IRQHandler+0x984>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a3c      	ldr	r2, [pc, #240]	; (8005850 <HAL_DMA_IRQHandler+0xa5c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d009      	beq.n	8005778 <HAL_DMA_IRQHandler+0x984>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a3a      	ldr	r2, [pc, #232]	; (8005854 <HAL_DMA_IRQHandler+0xa60>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d004      	beq.n	8005778 <HAL_DMA_IRQHandler+0x984>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a39      	ldr	r2, [pc, #228]	; (8005858 <HAL_DMA_IRQHandler+0xa64>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d101      	bne.n	800577c <HAL_DMA_IRQHandler+0x988>
 8005778:	2301      	movs	r3, #1
 800577a:	e000      	b.n	800577e <HAL_DMA_IRQHandler+0x98a>
 800577c:	2300      	movs	r3, #0
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 823f 	beq.w	8005c02 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005790:	f003 031f 	and.w	r3, r3, #31
 8005794:	2204      	movs	r2, #4
 8005796:	409a      	lsls	r2, r3
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	4013      	ands	r3, r2
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 80cd 	beq.w	800593c <HAL_DMA_IRQHandler+0xb48>
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 80c7 	beq.w	800593c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b2:	f003 031f 	and.w	r3, r3, #31
 80057b6:	2204      	movs	r2, #4
 80057b8:	409a      	lsls	r2, r3
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d049      	beq.n	800585c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d109      	bne.n	80057e6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 8210 	beq.w	8005bfc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057e4:	e20a      	b.n	8005bfc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f000 8206 	beq.w	8005bfc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057f8:	e200      	b.n	8005bfc <HAL_DMA_IRQHandler+0xe08>
 80057fa:	bf00      	nop
 80057fc:	40020010 	.word	0x40020010
 8005800:	40020028 	.word	0x40020028
 8005804:	40020040 	.word	0x40020040
 8005808:	40020058 	.word	0x40020058
 800580c:	40020070 	.word	0x40020070
 8005810:	40020088 	.word	0x40020088
 8005814:	400200a0 	.word	0x400200a0
 8005818:	400200b8 	.word	0x400200b8
 800581c:	40020410 	.word	0x40020410
 8005820:	40020428 	.word	0x40020428
 8005824:	40020440 	.word	0x40020440
 8005828:	40020458 	.word	0x40020458
 800582c:	40020470 	.word	0x40020470
 8005830:	40020488 	.word	0x40020488
 8005834:	400204a0 	.word	0x400204a0
 8005838:	400204b8 	.word	0x400204b8
 800583c:	58025408 	.word	0x58025408
 8005840:	5802541c 	.word	0x5802541c
 8005844:	58025430 	.word	0x58025430
 8005848:	58025444 	.word	0x58025444
 800584c:	58025458 	.word	0x58025458
 8005850:	5802546c 	.word	0x5802546c
 8005854:	58025480 	.word	0x58025480
 8005858:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b00      	cmp	r3, #0
 8005864:	d160      	bne.n	8005928 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a7f      	ldr	r2, [pc, #508]	; (8005a68 <HAL_DMA_IRQHandler+0xc74>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d04a      	beq.n	8005906 <HAL_DMA_IRQHandler+0xb12>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a7d      	ldr	r2, [pc, #500]	; (8005a6c <HAL_DMA_IRQHandler+0xc78>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d045      	beq.n	8005906 <HAL_DMA_IRQHandler+0xb12>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a7c      	ldr	r2, [pc, #496]	; (8005a70 <HAL_DMA_IRQHandler+0xc7c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d040      	beq.n	8005906 <HAL_DMA_IRQHandler+0xb12>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a7a      	ldr	r2, [pc, #488]	; (8005a74 <HAL_DMA_IRQHandler+0xc80>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d03b      	beq.n	8005906 <HAL_DMA_IRQHandler+0xb12>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a79      	ldr	r2, [pc, #484]	; (8005a78 <HAL_DMA_IRQHandler+0xc84>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d036      	beq.n	8005906 <HAL_DMA_IRQHandler+0xb12>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a77      	ldr	r2, [pc, #476]	; (8005a7c <HAL_DMA_IRQHandler+0xc88>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d031      	beq.n	8005906 <HAL_DMA_IRQHandler+0xb12>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a76      	ldr	r2, [pc, #472]	; (8005a80 <HAL_DMA_IRQHandler+0xc8c>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d02c      	beq.n	8005906 <HAL_DMA_IRQHandler+0xb12>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a74      	ldr	r2, [pc, #464]	; (8005a84 <HAL_DMA_IRQHandler+0xc90>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d027      	beq.n	8005906 <HAL_DMA_IRQHandler+0xb12>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a73      	ldr	r2, [pc, #460]	; (8005a88 <HAL_DMA_IRQHandler+0xc94>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d022      	beq.n	8005906 <HAL_DMA_IRQHandler+0xb12>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a71      	ldr	r2, [pc, #452]	; (8005a8c <HAL_DMA_IRQHandler+0xc98>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d01d      	beq.n	8005906 <HAL_DMA_IRQHandler+0xb12>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a70      	ldr	r2, [pc, #448]	; (8005a90 <HAL_DMA_IRQHandler+0xc9c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d018      	beq.n	8005906 <HAL_DMA_IRQHandler+0xb12>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a6e      	ldr	r2, [pc, #440]	; (8005a94 <HAL_DMA_IRQHandler+0xca0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d013      	beq.n	8005906 <HAL_DMA_IRQHandler+0xb12>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a6d      	ldr	r2, [pc, #436]	; (8005a98 <HAL_DMA_IRQHandler+0xca4>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d00e      	beq.n	8005906 <HAL_DMA_IRQHandler+0xb12>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a6b      	ldr	r2, [pc, #428]	; (8005a9c <HAL_DMA_IRQHandler+0xca8>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d009      	beq.n	8005906 <HAL_DMA_IRQHandler+0xb12>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a6a      	ldr	r2, [pc, #424]	; (8005aa0 <HAL_DMA_IRQHandler+0xcac>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d004      	beq.n	8005906 <HAL_DMA_IRQHandler+0xb12>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a68      	ldr	r2, [pc, #416]	; (8005aa4 <HAL_DMA_IRQHandler+0xcb0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d108      	bne.n	8005918 <HAL_DMA_IRQHandler+0xb24>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 0208 	bic.w	r2, r2, #8
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	e007      	b.n	8005928 <HAL_DMA_IRQHandler+0xb34>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 0204 	bic.w	r2, r2, #4
 8005926:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 8165 	beq.w	8005bfc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800593a:	e15f      	b.n	8005bfc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005940:	f003 031f 	and.w	r3, r3, #31
 8005944:	2202      	movs	r2, #2
 8005946:	409a      	lsls	r2, r3
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	4013      	ands	r3, r2
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 80c5 	beq.w	8005adc <HAL_DMA_IRQHandler+0xce8>
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 80bf 	beq.w	8005adc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005962:	f003 031f 	and.w	r3, r3, #31
 8005966:	2202      	movs	r2, #2
 8005968:	409a      	lsls	r2, r3
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d018      	beq.n	80059aa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d109      	bne.n	8005996 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005986:	2b00      	cmp	r3, #0
 8005988:	f000 813a 	beq.w	8005c00 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005994:	e134      	b.n	8005c00 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 8130 	beq.w	8005c00 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059a8:	e12a      	b.n	8005c00 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f003 0320 	and.w	r3, r3, #32
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f040 8089 	bne.w	8005ac8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a2b      	ldr	r2, [pc, #172]	; (8005a68 <HAL_DMA_IRQHandler+0xc74>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d04a      	beq.n	8005a56 <HAL_DMA_IRQHandler+0xc62>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a29      	ldr	r2, [pc, #164]	; (8005a6c <HAL_DMA_IRQHandler+0xc78>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d045      	beq.n	8005a56 <HAL_DMA_IRQHandler+0xc62>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a28      	ldr	r2, [pc, #160]	; (8005a70 <HAL_DMA_IRQHandler+0xc7c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d040      	beq.n	8005a56 <HAL_DMA_IRQHandler+0xc62>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a26      	ldr	r2, [pc, #152]	; (8005a74 <HAL_DMA_IRQHandler+0xc80>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d03b      	beq.n	8005a56 <HAL_DMA_IRQHandler+0xc62>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a25      	ldr	r2, [pc, #148]	; (8005a78 <HAL_DMA_IRQHandler+0xc84>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d036      	beq.n	8005a56 <HAL_DMA_IRQHandler+0xc62>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a23      	ldr	r2, [pc, #140]	; (8005a7c <HAL_DMA_IRQHandler+0xc88>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d031      	beq.n	8005a56 <HAL_DMA_IRQHandler+0xc62>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a22      	ldr	r2, [pc, #136]	; (8005a80 <HAL_DMA_IRQHandler+0xc8c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d02c      	beq.n	8005a56 <HAL_DMA_IRQHandler+0xc62>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a20      	ldr	r2, [pc, #128]	; (8005a84 <HAL_DMA_IRQHandler+0xc90>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d027      	beq.n	8005a56 <HAL_DMA_IRQHandler+0xc62>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a1f      	ldr	r2, [pc, #124]	; (8005a88 <HAL_DMA_IRQHandler+0xc94>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d022      	beq.n	8005a56 <HAL_DMA_IRQHandler+0xc62>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a1d      	ldr	r2, [pc, #116]	; (8005a8c <HAL_DMA_IRQHandler+0xc98>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d01d      	beq.n	8005a56 <HAL_DMA_IRQHandler+0xc62>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a1c      	ldr	r2, [pc, #112]	; (8005a90 <HAL_DMA_IRQHandler+0xc9c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d018      	beq.n	8005a56 <HAL_DMA_IRQHandler+0xc62>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a1a      	ldr	r2, [pc, #104]	; (8005a94 <HAL_DMA_IRQHandler+0xca0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d013      	beq.n	8005a56 <HAL_DMA_IRQHandler+0xc62>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a19      	ldr	r2, [pc, #100]	; (8005a98 <HAL_DMA_IRQHandler+0xca4>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d00e      	beq.n	8005a56 <HAL_DMA_IRQHandler+0xc62>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a17      	ldr	r2, [pc, #92]	; (8005a9c <HAL_DMA_IRQHandler+0xca8>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d009      	beq.n	8005a56 <HAL_DMA_IRQHandler+0xc62>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a16      	ldr	r2, [pc, #88]	; (8005aa0 <HAL_DMA_IRQHandler+0xcac>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d004      	beq.n	8005a56 <HAL_DMA_IRQHandler+0xc62>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a14      	ldr	r2, [pc, #80]	; (8005aa4 <HAL_DMA_IRQHandler+0xcb0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d128      	bne.n	8005aa8 <HAL_DMA_IRQHandler+0xcb4>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f022 0214 	bic.w	r2, r2, #20
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	e027      	b.n	8005ab8 <HAL_DMA_IRQHandler+0xcc4>
 8005a68:	40020010 	.word	0x40020010
 8005a6c:	40020028 	.word	0x40020028
 8005a70:	40020040 	.word	0x40020040
 8005a74:	40020058 	.word	0x40020058
 8005a78:	40020070 	.word	0x40020070
 8005a7c:	40020088 	.word	0x40020088
 8005a80:	400200a0 	.word	0x400200a0
 8005a84:	400200b8 	.word	0x400200b8
 8005a88:	40020410 	.word	0x40020410
 8005a8c:	40020428 	.word	0x40020428
 8005a90:	40020440 	.word	0x40020440
 8005a94:	40020458 	.word	0x40020458
 8005a98:	40020470 	.word	0x40020470
 8005a9c:	40020488 	.word	0x40020488
 8005aa0:	400204a0 	.word	0x400204a0
 8005aa4:	400204b8 	.word	0x400204b8
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 020a 	bic.w	r2, r2, #10
 8005ab6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 8097 	beq.w	8005c00 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ada:	e091      	b.n	8005c00 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae0:	f003 031f 	and.w	r3, r3, #31
 8005ae4:	2208      	movs	r2, #8
 8005ae6:	409a      	lsls	r2, r3
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	4013      	ands	r3, r2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 8088 	beq.w	8005c02 <HAL_DMA_IRQHandler+0xe0e>
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	f003 0308 	and.w	r3, r3, #8
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 8082 	beq.w	8005c02 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a41      	ldr	r2, [pc, #260]	; (8005c08 <HAL_DMA_IRQHandler+0xe14>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d04a      	beq.n	8005b9e <HAL_DMA_IRQHandler+0xdaa>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a3f      	ldr	r2, [pc, #252]	; (8005c0c <HAL_DMA_IRQHandler+0xe18>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d045      	beq.n	8005b9e <HAL_DMA_IRQHandler+0xdaa>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a3e      	ldr	r2, [pc, #248]	; (8005c10 <HAL_DMA_IRQHandler+0xe1c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d040      	beq.n	8005b9e <HAL_DMA_IRQHandler+0xdaa>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a3c      	ldr	r2, [pc, #240]	; (8005c14 <HAL_DMA_IRQHandler+0xe20>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d03b      	beq.n	8005b9e <HAL_DMA_IRQHandler+0xdaa>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a3b      	ldr	r2, [pc, #236]	; (8005c18 <HAL_DMA_IRQHandler+0xe24>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d036      	beq.n	8005b9e <HAL_DMA_IRQHandler+0xdaa>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a39      	ldr	r2, [pc, #228]	; (8005c1c <HAL_DMA_IRQHandler+0xe28>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d031      	beq.n	8005b9e <HAL_DMA_IRQHandler+0xdaa>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a38      	ldr	r2, [pc, #224]	; (8005c20 <HAL_DMA_IRQHandler+0xe2c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d02c      	beq.n	8005b9e <HAL_DMA_IRQHandler+0xdaa>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a36      	ldr	r2, [pc, #216]	; (8005c24 <HAL_DMA_IRQHandler+0xe30>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d027      	beq.n	8005b9e <HAL_DMA_IRQHandler+0xdaa>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a35      	ldr	r2, [pc, #212]	; (8005c28 <HAL_DMA_IRQHandler+0xe34>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d022      	beq.n	8005b9e <HAL_DMA_IRQHandler+0xdaa>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a33      	ldr	r2, [pc, #204]	; (8005c2c <HAL_DMA_IRQHandler+0xe38>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d01d      	beq.n	8005b9e <HAL_DMA_IRQHandler+0xdaa>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a32      	ldr	r2, [pc, #200]	; (8005c30 <HAL_DMA_IRQHandler+0xe3c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d018      	beq.n	8005b9e <HAL_DMA_IRQHandler+0xdaa>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a30      	ldr	r2, [pc, #192]	; (8005c34 <HAL_DMA_IRQHandler+0xe40>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d013      	beq.n	8005b9e <HAL_DMA_IRQHandler+0xdaa>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a2f      	ldr	r2, [pc, #188]	; (8005c38 <HAL_DMA_IRQHandler+0xe44>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d00e      	beq.n	8005b9e <HAL_DMA_IRQHandler+0xdaa>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a2d      	ldr	r2, [pc, #180]	; (8005c3c <HAL_DMA_IRQHandler+0xe48>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d009      	beq.n	8005b9e <HAL_DMA_IRQHandler+0xdaa>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a2c      	ldr	r2, [pc, #176]	; (8005c40 <HAL_DMA_IRQHandler+0xe4c>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d004      	beq.n	8005b9e <HAL_DMA_IRQHandler+0xdaa>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a2a      	ldr	r2, [pc, #168]	; (8005c44 <HAL_DMA_IRQHandler+0xe50>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d108      	bne.n	8005bb0 <HAL_DMA_IRQHandler+0xdbc>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 021c 	bic.w	r2, r2, #28
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	e007      	b.n	8005bc0 <HAL_DMA_IRQHandler+0xdcc>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 020e 	bic.w	r2, r2, #14
 8005bbe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc4:	f003 031f 	and.w	r3, r3, #31
 8005bc8:	2201      	movs	r2, #1
 8005bca:	409a      	lsls	r2, r3
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d009      	beq.n	8005c02 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	4798      	blx	r3
 8005bf6:	e004      	b.n	8005c02 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005bf8:	bf00      	nop
 8005bfa:	e002      	b.n	8005c02 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bfc:	bf00      	nop
 8005bfe:	e000      	b.n	8005c02 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c00:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005c02:	3728      	adds	r7, #40	; 0x28
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	40020010 	.word	0x40020010
 8005c0c:	40020028 	.word	0x40020028
 8005c10:	40020040 	.word	0x40020040
 8005c14:	40020058 	.word	0x40020058
 8005c18:	40020070 	.word	0x40020070
 8005c1c:	40020088 	.word	0x40020088
 8005c20:	400200a0 	.word	0x400200a0
 8005c24:	400200b8 	.word	0x400200b8
 8005c28:	40020410 	.word	0x40020410
 8005c2c:	40020428 	.word	0x40020428
 8005c30:	40020440 	.word	0x40020440
 8005c34:	40020458 	.word	0x40020458
 8005c38:	40020470 	.word	0x40020470
 8005c3c:	40020488 	.word	0x40020488
 8005c40:	400204a0 	.word	0x400204a0
 8005c44:	400204b8 	.word	0x400204b8

08005c48 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
 8005c54:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c5a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c60:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a7f      	ldr	r2, [pc, #508]	; (8005e64 <DMA_SetConfig+0x21c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d072      	beq.n	8005d52 <DMA_SetConfig+0x10a>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a7d      	ldr	r2, [pc, #500]	; (8005e68 <DMA_SetConfig+0x220>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d06d      	beq.n	8005d52 <DMA_SetConfig+0x10a>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a7c      	ldr	r2, [pc, #496]	; (8005e6c <DMA_SetConfig+0x224>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d068      	beq.n	8005d52 <DMA_SetConfig+0x10a>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a7a      	ldr	r2, [pc, #488]	; (8005e70 <DMA_SetConfig+0x228>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d063      	beq.n	8005d52 <DMA_SetConfig+0x10a>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a79      	ldr	r2, [pc, #484]	; (8005e74 <DMA_SetConfig+0x22c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d05e      	beq.n	8005d52 <DMA_SetConfig+0x10a>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a77      	ldr	r2, [pc, #476]	; (8005e78 <DMA_SetConfig+0x230>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d059      	beq.n	8005d52 <DMA_SetConfig+0x10a>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a76      	ldr	r2, [pc, #472]	; (8005e7c <DMA_SetConfig+0x234>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d054      	beq.n	8005d52 <DMA_SetConfig+0x10a>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a74      	ldr	r2, [pc, #464]	; (8005e80 <DMA_SetConfig+0x238>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d04f      	beq.n	8005d52 <DMA_SetConfig+0x10a>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a73      	ldr	r2, [pc, #460]	; (8005e84 <DMA_SetConfig+0x23c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d04a      	beq.n	8005d52 <DMA_SetConfig+0x10a>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a71      	ldr	r2, [pc, #452]	; (8005e88 <DMA_SetConfig+0x240>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d045      	beq.n	8005d52 <DMA_SetConfig+0x10a>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a70      	ldr	r2, [pc, #448]	; (8005e8c <DMA_SetConfig+0x244>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d040      	beq.n	8005d52 <DMA_SetConfig+0x10a>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a6e      	ldr	r2, [pc, #440]	; (8005e90 <DMA_SetConfig+0x248>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d03b      	beq.n	8005d52 <DMA_SetConfig+0x10a>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a6d      	ldr	r2, [pc, #436]	; (8005e94 <DMA_SetConfig+0x24c>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d036      	beq.n	8005d52 <DMA_SetConfig+0x10a>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a6b      	ldr	r2, [pc, #428]	; (8005e98 <DMA_SetConfig+0x250>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d031      	beq.n	8005d52 <DMA_SetConfig+0x10a>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a6a      	ldr	r2, [pc, #424]	; (8005e9c <DMA_SetConfig+0x254>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d02c      	beq.n	8005d52 <DMA_SetConfig+0x10a>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a68      	ldr	r2, [pc, #416]	; (8005ea0 <DMA_SetConfig+0x258>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d027      	beq.n	8005d52 <DMA_SetConfig+0x10a>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a67      	ldr	r2, [pc, #412]	; (8005ea4 <DMA_SetConfig+0x25c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d022      	beq.n	8005d52 <DMA_SetConfig+0x10a>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a65      	ldr	r2, [pc, #404]	; (8005ea8 <DMA_SetConfig+0x260>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d01d      	beq.n	8005d52 <DMA_SetConfig+0x10a>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a64      	ldr	r2, [pc, #400]	; (8005eac <DMA_SetConfig+0x264>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d018      	beq.n	8005d52 <DMA_SetConfig+0x10a>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a62      	ldr	r2, [pc, #392]	; (8005eb0 <DMA_SetConfig+0x268>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d013      	beq.n	8005d52 <DMA_SetConfig+0x10a>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a61      	ldr	r2, [pc, #388]	; (8005eb4 <DMA_SetConfig+0x26c>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d00e      	beq.n	8005d52 <DMA_SetConfig+0x10a>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a5f      	ldr	r2, [pc, #380]	; (8005eb8 <DMA_SetConfig+0x270>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d009      	beq.n	8005d52 <DMA_SetConfig+0x10a>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a5e      	ldr	r2, [pc, #376]	; (8005ebc <DMA_SetConfig+0x274>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d004      	beq.n	8005d52 <DMA_SetConfig+0x10a>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a5c      	ldr	r2, [pc, #368]	; (8005ec0 <DMA_SetConfig+0x278>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d101      	bne.n	8005d56 <DMA_SetConfig+0x10e>
 8005d52:	2301      	movs	r3, #1
 8005d54:	e000      	b.n	8005d58 <DMA_SetConfig+0x110>
 8005d56:	2300      	movs	r3, #0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00d      	beq.n	8005d78 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d64:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d004      	beq.n	8005d78 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005d76:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a39      	ldr	r2, [pc, #228]	; (8005e64 <DMA_SetConfig+0x21c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d04a      	beq.n	8005e18 <DMA_SetConfig+0x1d0>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a38      	ldr	r2, [pc, #224]	; (8005e68 <DMA_SetConfig+0x220>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d045      	beq.n	8005e18 <DMA_SetConfig+0x1d0>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a36      	ldr	r2, [pc, #216]	; (8005e6c <DMA_SetConfig+0x224>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d040      	beq.n	8005e18 <DMA_SetConfig+0x1d0>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a35      	ldr	r2, [pc, #212]	; (8005e70 <DMA_SetConfig+0x228>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d03b      	beq.n	8005e18 <DMA_SetConfig+0x1d0>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a33      	ldr	r2, [pc, #204]	; (8005e74 <DMA_SetConfig+0x22c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d036      	beq.n	8005e18 <DMA_SetConfig+0x1d0>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a32      	ldr	r2, [pc, #200]	; (8005e78 <DMA_SetConfig+0x230>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d031      	beq.n	8005e18 <DMA_SetConfig+0x1d0>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a30      	ldr	r2, [pc, #192]	; (8005e7c <DMA_SetConfig+0x234>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d02c      	beq.n	8005e18 <DMA_SetConfig+0x1d0>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a2f      	ldr	r2, [pc, #188]	; (8005e80 <DMA_SetConfig+0x238>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d027      	beq.n	8005e18 <DMA_SetConfig+0x1d0>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a2d      	ldr	r2, [pc, #180]	; (8005e84 <DMA_SetConfig+0x23c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d022      	beq.n	8005e18 <DMA_SetConfig+0x1d0>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a2c      	ldr	r2, [pc, #176]	; (8005e88 <DMA_SetConfig+0x240>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d01d      	beq.n	8005e18 <DMA_SetConfig+0x1d0>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a2a      	ldr	r2, [pc, #168]	; (8005e8c <DMA_SetConfig+0x244>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d018      	beq.n	8005e18 <DMA_SetConfig+0x1d0>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a29      	ldr	r2, [pc, #164]	; (8005e90 <DMA_SetConfig+0x248>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d013      	beq.n	8005e18 <DMA_SetConfig+0x1d0>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a27      	ldr	r2, [pc, #156]	; (8005e94 <DMA_SetConfig+0x24c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00e      	beq.n	8005e18 <DMA_SetConfig+0x1d0>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a26      	ldr	r2, [pc, #152]	; (8005e98 <DMA_SetConfig+0x250>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d009      	beq.n	8005e18 <DMA_SetConfig+0x1d0>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a24      	ldr	r2, [pc, #144]	; (8005e9c <DMA_SetConfig+0x254>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d004      	beq.n	8005e18 <DMA_SetConfig+0x1d0>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a23      	ldr	r2, [pc, #140]	; (8005ea0 <DMA_SetConfig+0x258>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d101      	bne.n	8005e1c <DMA_SetConfig+0x1d4>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e000      	b.n	8005e1e <DMA_SetConfig+0x1d6>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d059      	beq.n	8005ed6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e26:	f003 031f 	and.w	r3, r3, #31
 8005e2a:	223f      	movs	r2, #63	; 0x3f
 8005e2c:	409a      	lsls	r2, r3
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e40:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	2b40      	cmp	r3, #64	; 0x40
 8005e50:	d138      	bne.n	8005ec4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005e62:	e086      	b.n	8005f72 <DMA_SetConfig+0x32a>
 8005e64:	40020010 	.word	0x40020010
 8005e68:	40020028 	.word	0x40020028
 8005e6c:	40020040 	.word	0x40020040
 8005e70:	40020058 	.word	0x40020058
 8005e74:	40020070 	.word	0x40020070
 8005e78:	40020088 	.word	0x40020088
 8005e7c:	400200a0 	.word	0x400200a0
 8005e80:	400200b8 	.word	0x400200b8
 8005e84:	40020410 	.word	0x40020410
 8005e88:	40020428 	.word	0x40020428
 8005e8c:	40020440 	.word	0x40020440
 8005e90:	40020458 	.word	0x40020458
 8005e94:	40020470 	.word	0x40020470
 8005e98:	40020488 	.word	0x40020488
 8005e9c:	400204a0 	.word	0x400204a0
 8005ea0:	400204b8 	.word	0x400204b8
 8005ea4:	58025408 	.word	0x58025408
 8005ea8:	5802541c 	.word	0x5802541c
 8005eac:	58025430 	.word	0x58025430
 8005eb0:	58025444 	.word	0x58025444
 8005eb4:	58025458 	.word	0x58025458
 8005eb8:	5802546c 	.word	0x5802546c
 8005ebc:	58025480 	.word	0x58025480
 8005ec0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	60da      	str	r2, [r3, #12]
}
 8005ed4:	e04d      	b.n	8005f72 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a29      	ldr	r2, [pc, #164]	; (8005f80 <DMA_SetConfig+0x338>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d022      	beq.n	8005f26 <DMA_SetConfig+0x2de>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a27      	ldr	r2, [pc, #156]	; (8005f84 <DMA_SetConfig+0x33c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d01d      	beq.n	8005f26 <DMA_SetConfig+0x2de>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a26      	ldr	r2, [pc, #152]	; (8005f88 <DMA_SetConfig+0x340>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d018      	beq.n	8005f26 <DMA_SetConfig+0x2de>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a24      	ldr	r2, [pc, #144]	; (8005f8c <DMA_SetConfig+0x344>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d013      	beq.n	8005f26 <DMA_SetConfig+0x2de>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a23      	ldr	r2, [pc, #140]	; (8005f90 <DMA_SetConfig+0x348>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00e      	beq.n	8005f26 <DMA_SetConfig+0x2de>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a21      	ldr	r2, [pc, #132]	; (8005f94 <DMA_SetConfig+0x34c>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d009      	beq.n	8005f26 <DMA_SetConfig+0x2de>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a20      	ldr	r2, [pc, #128]	; (8005f98 <DMA_SetConfig+0x350>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d004      	beq.n	8005f26 <DMA_SetConfig+0x2de>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a1e      	ldr	r2, [pc, #120]	; (8005f9c <DMA_SetConfig+0x354>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d101      	bne.n	8005f2a <DMA_SetConfig+0x2e2>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e000      	b.n	8005f2c <DMA_SetConfig+0x2e4>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d020      	beq.n	8005f72 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f34:	f003 031f 	and.w	r3, r3, #31
 8005f38:	2201      	movs	r2, #1
 8005f3a:	409a      	lsls	r2, r3
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	2b40      	cmp	r3, #64	; 0x40
 8005f4e:	d108      	bne.n	8005f62 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	60da      	str	r2, [r3, #12]
}
 8005f60:	e007      	b.n	8005f72 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	60da      	str	r2, [r3, #12]
}
 8005f72:	bf00      	nop
 8005f74:	371c      	adds	r7, #28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	58025408 	.word	0x58025408
 8005f84:	5802541c 	.word	0x5802541c
 8005f88:	58025430 	.word	0x58025430
 8005f8c:	58025444 	.word	0x58025444
 8005f90:	58025458 	.word	0x58025458
 8005f94:	5802546c 	.word	0x5802546c
 8005f98:	58025480 	.word	0x58025480
 8005f9c:	58025494 	.word	0x58025494

08005fa0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a42      	ldr	r2, [pc, #264]	; (80060b8 <DMA_CalcBaseAndBitshift+0x118>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d04a      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a41      	ldr	r2, [pc, #260]	; (80060bc <DMA_CalcBaseAndBitshift+0x11c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d045      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a3f      	ldr	r2, [pc, #252]	; (80060c0 <DMA_CalcBaseAndBitshift+0x120>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d040      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a3e      	ldr	r2, [pc, #248]	; (80060c4 <DMA_CalcBaseAndBitshift+0x124>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d03b      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a3c      	ldr	r2, [pc, #240]	; (80060c8 <DMA_CalcBaseAndBitshift+0x128>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d036      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a3b      	ldr	r2, [pc, #236]	; (80060cc <DMA_CalcBaseAndBitshift+0x12c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d031      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a39      	ldr	r2, [pc, #228]	; (80060d0 <DMA_CalcBaseAndBitshift+0x130>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d02c      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a38      	ldr	r2, [pc, #224]	; (80060d4 <DMA_CalcBaseAndBitshift+0x134>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d027      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a36      	ldr	r2, [pc, #216]	; (80060d8 <DMA_CalcBaseAndBitshift+0x138>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d022      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a35      	ldr	r2, [pc, #212]	; (80060dc <DMA_CalcBaseAndBitshift+0x13c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d01d      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a33      	ldr	r2, [pc, #204]	; (80060e0 <DMA_CalcBaseAndBitshift+0x140>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d018      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a32      	ldr	r2, [pc, #200]	; (80060e4 <DMA_CalcBaseAndBitshift+0x144>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d013      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a30      	ldr	r2, [pc, #192]	; (80060e8 <DMA_CalcBaseAndBitshift+0x148>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d00e      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a2f      	ldr	r2, [pc, #188]	; (80060ec <DMA_CalcBaseAndBitshift+0x14c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d009      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a2d      	ldr	r2, [pc, #180]	; (80060f0 <DMA_CalcBaseAndBitshift+0x150>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d004      	beq.n	8006048 <DMA_CalcBaseAndBitshift+0xa8>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a2c      	ldr	r2, [pc, #176]	; (80060f4 <DMA_CalcBaseAndBitshift+0x154>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d101      	bne.n	800604c <DMA_CalcBaseAndBitshift+0xac>
 8006048:	2301      	movs	r3, #1
 800604a:	e000      	b.n	800604e <DMA_CalcBaseAndBitshift+0xae>
 800604c:	2300      	movs	r3, #0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d024      	beq.n	800609c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	b2db      	uxtb	r3, r3
 8006058:	3b10      	subs	r3, #16
 800605a:	4a27      	ldr	r2, [pc, #156]	; (80060f8 <DMA_CalcBaseAndBitshift+0x158>)
 800605c:	fba2 2303 	umull	r2, r3, r2, r3
 8006060:	091b      	lsrs	r3, r3, #4
 8006062:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	4a24      	ldr	r2, [pc, #144]	; (80060fc <DMA_CalcBaseAndBitshift+0x15c>)
 800606c:	5cd3      	ldrb	r3, [r2, r3]
 800606e:	461a      	mov	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2b03      	cmp	r3, #3
 8006078:	d908      	bls.n	800608c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	4b1f      	ldr	r3, [pc, #124]	; (8006100 <DMA_CalcBaseAndBitshift+0x160>)
 8006082:	4013      	ands	r3, r2
 8006084:	1d1a      	adds	r2, r3, #4
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	659a      	str	r2, [r3, #88]	; 0x58
 800608a:	e00d      	b.n	80060a8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	461a      	mov	r2, r3
 8006092:	4b1b      	ldr	r3, [pc, #108]	; (8006100 <DMA_CalcBaseAndBitshift+0x160>)
 8006094:	4013      	ands	r3, r2
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	6593      	str	r3, [r2, #88]	; 0x58
 800609a:	e005      	b.n	80060a8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	40020010 	.word	0x40020010
 80060bc:	40020028 	.word	0x40020028
 80060c0:	40020040 	.word	0x40020040
 80060c4:	40020058 	.word	0x40020058
 80060c8:	40020070 	.word	0x40020070
 80060cc:	40020088 	.word	0x40020088
 80060d0:	400200a0 	.word	0x400200a0
 80060d4:	400200b8 	.word	0x400200b8
 80060d8:	40020410 	.word	0x40020410
 80060dc:	40020428 	.word	0x40020428
 80060e0:	40020440 	.word	0x40020440
 80060e4:	40020458 	.word	0x40020458
 80060e8:	40020470 	.word	0x40020470
 80060ec:	40020488 	.word	0x40020488
 80060f0:	400204a0 	.word	0x400204a0
 80060f4:	400204b8 	.word	0x400204b8
 80060f8:	aaaaaaab 	.word	0xaaaaaaab
 80060fc:	0800dfb4 	.word	0x0800dfb4
 8006100:	fffffc00 	.word	0xfffffc00

08006104 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800610c:	2300      	movs	r3, #0
 800610e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d120      	bne.n	800615a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611c:	2b03      	cmp	r3, #3
 800611e:	d858      	bhi.n	80061d2 <DMA_CheckFifoParam+0xce>
 8006120:	a201      	add	r2, pc, #4	; (adr r2, 8006128 <DMA_CheckFifoParam+0x24>)
 8006122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006126:	bf00      	nop
 8006128:	08006139 	.word	0x08006139
 800612c:	0800614b 	.word	0x0800614b
 8006130:	08006139 	.word	0x08006139
 8006134:	080061d3 	.word	0x080061d3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d048      	beq.n	80061d6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006148:	e045      	b.n	80061d6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006152:	d142      	bne.n	80061da <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006158:	e03f      	b.n	80061da <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006162:	d123      	bne.n	80061ac <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006168:	2b03      	cmp	r3, #3
 800616a:	d838      	bhi.n	80061de <DMA_CheckFifoParam+0xda>
 800616c:	a201      	add	r2, pc, #4	; (adr r2, 8006174 <DMA_CheckFifoParam+0x70>)
 800616e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006172:	bf00      	nop
 8006174:	08006185 	.word	0x08006185
 8006178:	0800618b 	.word	0x0800618b
 800617c:	08006185 	.word	0x08006185
 8006180:	0800619d 	.word	0x0800619d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	73fb      	strb	r3, [r7, #15]
        break;
 8006188:	e030      	b.n	80061ec <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d025      	beq.n	80061e2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800619a:	e022      	b.n	80061e2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061a4:	d11f      	bne.n	80061e6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80061aa:	e01c      	b.n	80061e6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d902      	bls.n	80061ba <DMA_CheckFifoParam+0xb6>
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d003      	beq.n	80061c0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80061b8:	e018      	b.n	80061ec <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	73fb      	strb	r3, [r7, #15]
        break;
 80061be:	e015      	b.n	80061ec <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00e      	beq.n	80061ea <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	73fb      	strb	r3, [r7, #15]
    break;
 80061d0:	e00b      	b.n	80061ea <DMA_CheckFifoParam+0xe6>
        break;
 80061d2:	bf00      	nop
 80061d4:	e00a      	b.n	80061ec <DMA_CheckFifoParam+0xe8>
        break;
 80061d6:	bf00      	nop
 80061d8:	e008      	b.n	80061ec <DMA_CheckFifoParam+0xe8>
        break;
 80061da:	bf00      	nop
 80061dc:	e006      	b.n	80061ec <DMA_CheckFifoParam+0xe8>
        break;
 80061de:	bf00      	nop
 80061e0:	e004      	b.n	80061ec <DMA_CheckFifoParam+0xe8>
        break;
 80061e2:	bf00      	nop
 80061e4:	e002      	b.n	80061ec <DMA_CheckFifoParam+0xe8>
        break;
 80061e6:	bf00      	nop
 80061e8:	e000      	b.n	80061ec <DMA_CheckFifoParam+0xe8>
    break;
 80061ea:	bf00      	nop
    }
  }

  return status;
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop

080061fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a38      	ldr	r2, [pc, #224]	; (80062f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d022      	beq.n	800625a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a36      	ldr	r2, [pc, #216]	; (80062f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d01d      	beq.n	800625a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a35      	ldr	r2, [pc, #212]	; (80062f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d018      	beq.n	800625a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a33      	ldr	r2, [pc, #204]	; (80062fc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d013      	beq.n	800625a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a32      	ldr	r2, [pc, #200]	; (8006300 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00e      	beq.n	800625a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a30      	ldr	r2, [pc, #192]	; (8006304 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d009      	beq.n	800625a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a2f      	ldr	r2, [pc, #188]	; (8006308 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d004      	beq.n	800625a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a2d      	ldr	r2, [pc, #180]	; (800630c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d101      	bne.n	800625e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800625a:	2301      	movs	r3, #1
 800625c:	e000      	b.n	8006260 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800625e:	2300      	movs	r3, #0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d01a      	beq.n	800629a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	b2db      	uxtb	r3, r3
 800626a:	3b08      	subs	r3, #8
 800626c:	4a28      	ldr	r2, [pc, #160]	; (8006310 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800626e:	fba2 2303 	umull	r2, r3, r2, r3
 8006272:	091b      	lsrs	r3, r3, #4
 8006274:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	4b26      	ldr	r3, [pc, #152]	; (8006314 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800627a:	4413      	add	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	461a      	mov	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a24      	ldr	r2, [pc, #144]	; (8006318 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006288:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f003 031f 	and.w	r3, r3, #31
 8006290:	2201      	movs	r2, #1
 8006292:	409a      	lsls	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006298:	e024      	b.n	80062e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	3b10      	subs	r3, #16
 80062a2:	4a1e      	ldr	r2, [pc, #120]	; (800631c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80062a4:	fba2 2303 	umull	r2, r3, r2, r3
 80062a8:	091b      	lsrs	r3, r3, #4
 80062aa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4a1c      	ldr	r2, [pc, #112]	; (8006320 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d806      	bhi.n	80062c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	4a1b      	ldr	r2, [pc, #108]	; (8006324 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d902      	bls.n	80062c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	3308      	adds	r3, #8
 80062c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	4b18      	ldr	r3, [pc, #96]	; (8006328 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80062c6:	4413      	add	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	461a      	mov	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a16      	ldr	r2, [pc, #88]	; (800632c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80062d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f003 031f 	and.w	r3, r3, #31
 80062dc:	2201      	movs	r2, #1
 80062de:	409a      	lsls	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80062e4:	bf00      	nop
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	58025408 	.word	0x58025408
 80062f4:	5802541c 	.word	0x5802541c
 80062f8:	58025430 	.word	0x58025430
 80062fc:	58025444 	.word	0x58025444
 8006300:	58025458 	.word	0x58025458
 8006304:	5802546c 	.word	0x5802546c
 8006308:	58025480 	.word	0x58025480
 800630c:	58025494 	.word	0x58025494
 8006310:	cccccccd 	.word	0xcccccccd
 8006314:	16009600 	.word	0x16009600
 8006318:	58025880 	.word	0x58025880
 800631c:	aaaaaaab 	.word	0xaaaaaaab
 8006320:	400204b8 	.word	0x400204b8
 8006324:	4002040f 	.word	0x4002040f
 8006328:	10008200 	.word	0x10008200
 800632c:	40020880 	.word	0x40020880

08006330 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d04a      	beq.n	80063dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2b08      	cmp	r3, #8
 800634a:	d847      	bhi.n	80063dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a25      	ldr	r2, [pc, #148]	; (80063e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d022      	beq.n	800639c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a24      	ldr	r2, [pc, #144]	; (80063ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d01d      	beq.n	800639c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a22      	ldr	r2, [pc, #136]	; (80063f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d018      	beq.n	800639c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a21      	ldr	r2, [pc, #132]	; (80063f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d013      	beq.n	800639c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a1f      	ldr	r2, [pc, #124]	; (80063f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00e      	beq.n	800639c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a1e      	ldr	r2, [pc, #120]	; (80063fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d009      	beq.n	800639c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a1c      	ldr	r2, [pc, #112]	; (8006400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d004      	beq.n	800639c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a1b      	ldr	r2, [pc, #108]	; (8006404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d101      	bne.n	80063a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800639c:	2301      	movs	r3, #1
 800639e:	e000      	b.n	80063a2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80063a0:	2300      	movs	r3, #0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	4b17      	ldr	r3, [pc, #92]	; (8006408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80063aa:	4413      	add	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	461a      	mov	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a15      	ldr	r2, [pc, #84]	; (800640c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80063b8:	671a      	str	r2, [r3, #112]	; 0x70
 80063ba:	e009      	b.n	80063d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	4b14      	ldr	r3, [pc, #80]	; (8006410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80063c0:	4413      	add	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	461a      	mov	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a11      	ldr	r2, [pc, #68]	; (8006414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80063ce:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	2201      	movs	r2, #1
 80063d6:	409a      	lsls	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80063dc:	bf00      	nop
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	58025408 	.word	0x58025408
 80063ec:	5802541c 	.word	0x5802541c
 80063f0:	58025430 	.word	0x58025430
 80063f4:	58025444 	.word	0x58025444
 80063f8:	58025458 	.word	0x58025458
 80063fc:	5802546c 	.word	0x5802546c
 8006400:	58025480 	.word	0x58025480
 8006404:	58025494 	.word	0x58025494
 8006408:	1600963f 	.word	0x1600963f
 800640c:	58025940 	.word	0x58025940
 8006410:	1000823f 	.word	0x1000823f
 8006414:	40020940 	.word	0x40020940

08006418 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006418:	b480      	push	{r7}
 800641a:	b089      	sub	sp, #36	; 0x24
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006422:	2300      	movs	r3, #0
 8006424:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006426:	4b89      	ldr	r3, [pc, #548]	; (800664c <HAL_GPIO_Init+0x234>)
 8006428:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800642a:	e194      	b.n	8006756 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	2101      	movs	r1, #1
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	fa01 f303 	lsl.w	r3, r1, r3
 8006438:	4013      	ands	r3, r2
 800643a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 8186 	beq.w	8006750 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f003 0303 	and.w	r3, r3, #3
 800644c:	2b01      	cmp	r3, #1
 800644e:	d005      	beq.n	800645c <HAL_GPIO_Init+0x44>
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f003 0303 	and.w	r3, r3, #3
 8006458:	2b02      	cmp	r3, #2
 800645a:	d130      	bne.n	80064be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	2203      	movs	r2, #3
 8006468:	fa02 f303 	lsl.w	r3, r2, r3
 800646c:	43db      	mvns	r3, r3
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	4013      	ands	r3, r2
 8006472:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	68da      	ldr	r2, [r3, #12]
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	005b      	lsls	r3, r3, #1
 800647c:	fa02 f303 	lsl.w	r3, r2, r3
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	4313      	orrs	r3, r2
 8006484:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006492:	2201      	movs	r2, #1
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	fa02 f303 	lsl.w	r3, r2, r3
 800649a:	43db      	mvns	r3, r3
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	4013      	ands	r3, r2
 80064a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	091b      	lsrs	r3, r3, #4
 80064a8:	f003 0201 	and.w	r2, r3, #1
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	fa02 f303 	lsl.w	r3, r2, r3
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f003 0303 	and.w	r3, r3, #3
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d017      	beq.n	80064fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	005b      	lsls	r3, r3, #1
 80064d4:	2203      	movs	r2, #3
 80064d6:	fa02 f303 	lsl.w	r3, r2, r3
 80064da:	43db      	mvns	r3, r3
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	4013      	ands	r3, r2
 80064e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	689a      	ldr	r2, [r3, #8]
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	005b      	lsls	r3, r3, #1
 80064ea:	fa02 f303 	lsl.w	r3, r2, r3
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	69ba      	ldr	r2, [r7, #24]
 80064f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f003 0303 	and.w	r3, r3, #3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d123      	bne.n	800654e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	08da      	lsrs	r2, r3, #3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	3208      	adds	r2, #8
 800650e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	220f      	movs	r2, #15
 800651e:	fa02 f303 	lsl.w	r3, r2, r3
 8006522:	43db      	mvns	r3, r3
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	4013      	ands	r3, r2
 8006528:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	691a      	ldr	r2, [r3, #16]
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	f003 0307 	and.w	r3, r3, #7
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	fa02 f303 	lsl.w	r3, r2, r3
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	4313      	orrs	r3, r2
 800653e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	08da      	lsrs	r2, r3, #3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3208      	adds	r2, #8
 8006548:	69b9      	ldr	r1, [r7, #24]
 800654a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	2203      	movs	r2, #3
 800655a:	fa02 f303 	lsl.w	r3, r2, r3
 800655e:	43db      	mvns	r3, r3
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	4013      	ands	r3, r2
 8006564:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f003 0203 	and.w	r2, r3, #3
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	fa02 f303 	lsl.w	r3, r2, r3
 8006576:	69ba      	ldr	r2, [r7, #24]
 8006578:	4313      	orrs	r3, r2
 800657a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 80e0 	beq.w	8006750 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006590:	4b2f      	ldr	r3, [pc, #188]	; (8006650 <HAL_GPIO_Init+0x238>)
 8006592:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006596:	4a2e      	ldr	r2, [pc, #184]	; (8006650 <HAL_GPIO_Init+0x238>)
 8006598:	f043 0302 	orr.w	r3, r3, #2
 800659c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80065a0:	4b2b      	ldr	r3, [pc, #172]	; (8006650 <HAL_GPIO_Init+0x238>)
 80065a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065ae:	4a29      	ldr	r2, [pc, #164]	; (8006654 <HAL_GPIO_Init+0x23c>)
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	089b      	lsrs	r3, r3, #2
 80065b4:	3302      	adds	r3, #2
 80065b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	f003 0303 	and.w	r3, r3, #3
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	220f      	movs	r2, #15
 80065c6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ca:	43db      	mvns	r3, r3
 80065cc:	69ba      	ldr	r2, [r7, #24]
 80065ce:	4013      	ands	r3, r2
 80065d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a20      	ldr	r2, [pc, #128]	; (8006658 <HAL_GPIO_Init+0x240>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d052      	beq.n	8006680 <HAL_GPIO_Init+0x268>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a1f      	ldr	r2, [pc, #124]	; (800665c <HAL_GPIO_Init+0x244>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d031      	beq.n	8006646 <HAL_GPIO_Init+0x22e>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a1e      	ldr	r2, [pc, #120]	; (8006660 <HAL_GPIO_Init+0x248>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d02b      	beq.n	8006642 <HAL_GPIO_Init+0x22a>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a1d      	ldr	r2, [pc, #116]	; (8006664 <HAL_GPIO_Init+0x24c>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d025      	beq.n	800663e <HAL_GPIO_Init+0x226>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a1c      	ldr	r2, [pc, #112]	; (8006668 <HAL_GPIO_Init+0x250>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d01f      	beq.n	800663a <HAL_GPIO_Init+0x222>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a1b      	ldr	r2, [pc, #108]	; (800666c <HAL_GPIO_Init+0x254>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d019      	beq.n	8006636 <HAL_GPIO_Init+0x21e>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a1a      	ldr	r2, [pc, #104]	; (8006670 <HAL_GPIO_Init+0x258>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d013      	beq.n	8006632 <HAL_GPIO_Init+0x21a>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a19      	ldr	r2, [pc, #100]	; (8006674 <HAL_GPIO_Init+0x25c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d00d      	beq.n	800662e <HAL_GPIO_Init+0x216>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a18      	ldr	r2, [pc, #96]	; (8006678 <HAL_GPIO_Init+0x260>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d007      	beq.n	800662a <HAL_GPIO_Init+0x212>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a17      	ldr	r2, [pc, #92]	; (800667c <HAL_GPIO_Init+0x264>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d101      	bne.n	8006626 <HAL_GPIO_Init+0x20e>
 8006622:	2309      	movs	r3, #9
 8006624:	e02d      	b.n	8006682 <HAL_GPIO_Init+0x26a>
 8006626:	230a      	movs	r3, #10
 8006628:	e02b      	b.n	8006682 <HAL_GPIO_Init+0x26a>
 800662a:	2308      	movs	r3, #8
 800662c:	e029      	b.n	8006682 <HAL_GPIO_Init+0x26a>
 800662e:	2307      	movs	r3, #7
 8006630:	e027      	b.n	8006682 <HAL_GPIO_Init+0x26a>
 8006632:	2306      	movs	r3, #6
 8006634:	e025      	b.n	8006682 <HAL_GPIO_Init+0x26a>
 8006636:	2305      	movs	r3, #5
 8006638:	e023      	b.n	8006682 <HAL_GPIO_Init+0x26a>
 800663a:	2304      	movs	r3, #4
 800663c:	e021      	b.n	8006682 <HAL_GPIO_Init+0x26a>
 800663e:	2303      	movs	r3, #3
 8006640:	e01f      	b.n	8006682 <HAL_GPIO_Init+0x26a>
 8006642:	2302      	movs	r3, #2
 8006644:	e01d      	b.n	8006682 <HAL_GPIO_Init+0x26a>
 8006646:	2301      	movs	r3, #1
 8006648:	e01b      	b.n	8006682 <HAL_GPIO_Init+0x26a>
 800664a:	bf00      	nop
 800664c:	58000080 	.word	0x58000080
 8006650:	58024400 	.word	0x58024400
 8006654:	58000400 	.word	0x58000400
 8006658:	58020000 	.word	0x58020000
 800665c:	58020400 	.word	0x58020400
 8006660:	58020800 	.word	0x58020800
 8006664:	58020c00 	.word	0x58020c00
 8006668:	58021000 	.word	0x58021000
 800666c:	58021400 	.word	0x58021400
 8006670:	58021800 	.word	0x58021800
 8006674:	58021c00 	.word	0x58021c00
 8006678:	58022000 	.word	0x58022000
 800667c:	58022400 	.word	0x58022400
 8006680:	2300      	movs	r3, #0
 8006682:	69fa      	ldr	r2, [r7, #28]
 8006684:	f002 0203 	and.w	r2, r2, #3
 8006688:	0092      	lsls	r2, r2, #2
 800668a:	4093      	lsls	r3, r2
 800668c:	69ba      	ldr	r2, [r7, #24]
 800668e:	4313      	orrs	r3, r2
 8006690:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006692:	4938      	ldr	r1, [pc, #224]	; (8006774 <HAL_GPIO_Init+0x35c>)
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	089b      	lsrs	r3, r3, #2
 8006698:	3302      	adds	r3, #2
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80066a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	43db      	mvns	r3, r3
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	4013      	ands	r3, r2
 80066b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80066c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80066ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	43db      	mvns	r3, r3
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	4013      	ands	r3, r2
 80066de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d003      	beq.n	80066f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80066f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	43db      	mvns	r3, r3
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	4013      	ands	r3, r2
 800670a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	4313      	orrs	r3, r2
 800671e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	43db      	mvns	r3, r3
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	4013      	ands	r3, r2
 8006734:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d003      	beq.n	800674a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	4313      	orrs	r3, r2
 8006748:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	3301      	adds	r3, #1
 8006754:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	fa22 f303 	lsr.w	r3, r2, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	f47f ae63 	bne.w	800642c <HAL_GPIO_Init+0x14>
  }
}
 8006766:	bf00      	nop
 8006768:	bf00      	nop
 800676a:	3724      	adds	r7, #36	; 0x24
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	58000400 	.word	0x58000400

08006778 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	460b      	mov	r3, r1
 8006782:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	691a      	ldr	r2, [r3, #16]
 8006788:	887b      	ldrh	r3, [r7, #2]
 800678a:	4013      	ands	r3, r2
 800678c:	2b00      	cmp	r3, #0
 800678e:	d002      	beq.n	8006796 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006790:	2301      	movs	r3, #1
 8006792:	73fb      	strb	r3, [r7, #15]
 8006794:	e001      	b.n	800679a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006796:	2300      	movs	r3, #0
 8006798:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800679a:	7bfb      	ldrb	r3, [r7, #15]
}
 800679c:	4618      	mov	r0, r3
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	807b      	strh	r3, [r7, #2]
 80067b4:	4613      	mov	r3, r2
 80067b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80067b8:	787b      	ldrb	r3, [r7, #1]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067be:	887a      	ldrh	r2, [r7, #2]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80067c4:	e003      	b.n	80067ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80067c6:	887b      	ldrh	r3, [r7, #2]
 80067c8:	041a      	lsls	r2, r3, #16
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	619a      	str	r2, [r3, #24]
}
 80067ce:	bf00      	nop
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
	...

080067dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e07f      	b.n	80068ee <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d106      	bne.n	8006808 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7fb fb4c 	bl	8001ea0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2224      	movs	r2, #36	; 0x24
 800680c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f022 0201 	bic.w	r2, r2, #1
 800681e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800682c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	689a      	ldr	r2, [r3, #8]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800683c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d107      	bne.n	8006856 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	689a      	ldr	r2, [r3, #8]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006852:	609a      	str	r2, [r3, #8]
 8006854:	e006      	b.n	8006864 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689a      	ldr	r2, [r3, #8]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006862:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	2b02      	cmp	r3, #2
 800686a:	d104      	bne.n	8006876 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006874:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6859      	ldr	r1, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	4b1d      	ldr	r3, [pc, #116]	; (80068f8 <HAL_I2C_Init+0x11c>)
 8006882:	430b      	orrs	r3, r1
 8006884:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68da      	ldr	r2, [r3, #12]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006894:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	691a      	ldr	r2, [r3, #16]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	69d9      	ldr	r1, [r3, #28]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1a      	ldr	r2, [r3, #32]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	430a      	orrs	r2, r1
 80068be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f042 0201 	orr.w	r2, r2, #1
 80068ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2220      	movs	r2, #32
 80068da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3708      	adds	r7, #8
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	02008000 	.word	0x02008000

080068fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b088      	sub	sp, #32
 8006900:	af02      	add	r7, sp, #8
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	607a      	str	r2, [r7, #4]
 8006906:	461a      	mov	r2, r3
 8006908:	460b      	mov	r3, r1
 800690a:	817b      	strh	r3, [r7, #10]
 800690c:	4613      	mov	r3, r2
 800690e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b20      	cmp	r3, #32
 800691a:	f040 80da 	bne.w	8006ad2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006924:	2b01      	cmp	r3, #1
 8006926:	d101      	bne.n	800692c <HAL_I2C_Master_Transmit+0x30>
 8006928:	2302      	movs	r3, #2
 800692a:	e0d3      	b.n	8006ad4 <HAL_I2C_Master_Transmit+0x1d8>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006934:	f7fb fe9a 	bl	800266c <HAL_GetTick>
 8006938:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	2319      	movs	r3, #25
 8006940:	2201      	movs	r2, #1
 8006942:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f000 f9e6 	bl	8006d18 <I2C_WaitOnFlagUntilTimeout>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e0be      	b.n	8006ad4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2221      	movs	r2, #33	; 0x21
 800695a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2210      	movs	r2, #16
 8006962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	893a      	ldrh	r2, [r7, #8]
 8006976:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006982:	b29b      	uxth	r3, r3
 8006984:	2bff      	cmp	r3, #255	; 0xff
 8006986:	d90e      	bls.n	80069a6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	22ff      	movs	r2, #255	; 0xff
 800698c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006992:	b2da      	uxtb	r2, r3
 8006994:	8979      	ldrh	r1, [r7, #10]
 8006996:	4b51      	ldr	r3, [pc, #324]	; (8006adc <HAL_I2C_Master_Transmit+0x1e0>)
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f000 fbdc 	bl	800715c <I2C_TransferConfig>
 80069a4:	e06c      	b.n	8006a80 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	8979      	ldrh	r1, [r7, #10]
 80069b8:	4b48      	ldr	r3, [pc, #288]	; (8006adc <HAL_I2C_Master_Transmit+0x1e0>)
 80069ba:	9300      	str	r3, [sp, #0]
 80069bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 fbcb 	bl	800715c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80069c6:	e05b      	b.n	8006a80 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	6a39      	ldr	r1, [r7, #32]
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 f9e3 	bl	8006d98 <I2C_WaitOnTXISFlagUntilTimeout>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d001      	beq.n	80069dc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e07b      	b.n	8006ad4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e0:	781a      	ldrb	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ec:	1c5a      	adds	r2, r3, #1
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	3b01      	subs	r3, #1
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a04:	3b01      	subs	r3, #1
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d034      	beq.n	8006a80 <HAL_I2C_Master_Transmit+0x184>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d130      	bne.n	8006a80 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	2200      	movs	r2, #0
 8006a26:	2180      	movs	r1, #128	; 0x80
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f000 f975 	bl	8006d18 <I2C_WaitOnFlagUntilTimeout>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d001      	beq.n	8006a38 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e04d      	b.n	8006ad4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	2bff      	cmp	r3, #255	; 0xff
 8006a40:	d90e      	bls.n	8006a60 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	22ff      	movs	r2, #255	; 0xff
 8006a46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	8979      	ldrh	r1, [r7, #10]
 8006a50:	2300      	movs	r3, #0
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f000 fb7f 	bl	800715c <I2C_TransferConfig>
 8006a5e:	e00f      	b.n	8006a80 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	8979      	ldrh	r1, [r7, #10]
 8006a72:	2300      	movs	r3, #0
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f000 fb6e 	bl	800715c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d19e      	bne.n	80069c8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	6a39      	ldr	r1, [r7, #32]
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f000 f9c2 	bl	8006e18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e01a      	b.n	8006ad4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6859      	ldr	r1, [r3, #4]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	4b0b      	ldr	r3, [pc, #44]	; (8006ae0 <HAL_I2C_Master_Transmit+0x1e4>)
 8006ab2:	400b      	ands	r3, r1
 8006ab4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	e000      	b.n	8006ad4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006ad2:	2302      	movs	r3, #2
  }
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3718      	adds	r7, #24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	80002000 	.word	0x80002000
 8006ae0:	fe00e800 	.word	0xfe00e800

08006ae4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b088      	sub	sp, #32
 8006ae8:	af02      	add	r7, sp, #8
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	607a      	str	r2, [r7, #4]
 8006aee:	461a      	mov	r2, r3
 8006af0:	460b      	mov	r3, r1
 8006af2:	817b      	strh	r3, [r7, #10]
 8006af4:	4613      	mov	r3, r2
 8006af6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b20      	cmp	r3, #32
 8006b02:	f040 80db 	bne.w	8006cbc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d101      	bne.n	8006b14 <HAL_I2C_Master_Receive+0x30>
 8006b10:	2302      	movs	r3, #2
 8006b12:	e0d4      	b.n	8006cbe <HAL_I2C_Master_Receive+0x1da>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b1c:	f7fb fda6 	bl	800266c <HAL_GetTick>
 8006b20:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	9300      	str	r3, [sp, #0]
 8006b26:	2319      	movs	r3, #25
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 f8f2 	bl	8006d18 <I2C_WaitOnFlagUntilTimeout>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e0bf      	b.n	8006cbe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2222      	movs	r2, #34	; 0x22
 8006b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2210      	movs	r2, #16
 8006b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	893a      	ldrh	r2, [r7, #8]
 8006b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	2bff      	cmp	r3, #255	; 0xff
 8006b6e:	d90e      	bls.n	8006b8e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	22ff      	movs	r2, #255	; 0xff
 8006b74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	8979      	ldrh	r1, [r7, #10]
 8006b7e:	4b52      	ldr	r3, [pc, #328]	; (8006cc8 <HAL_I2C_Master_Receive+0x1e4>)
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 fae8 	bl	800715c <I2C_TransferConfig>
 8006b8c:	e06d      	b.n	8006c6a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	8979      	ldrh	r1, [r7, #10]
 8006ba0:	4b49      	ldr	r3, [pc, #292]	; (8006cc8 <HAL_I2C_Master_Receive+0x1e4>)
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f000 fad7 	bl	800715c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006bae:	e05c      	b.n	8006c6a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	6a39      	ldr	r1, [r7, #32]
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 f96b 	bl	8006e90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e07c      	b.n	8006cbe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bce:	b2d2      	uxtb	r2, r2
 8006bd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd6:	1c5a      	adds	r2, r3, #1
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006be0:	3b01      	subs	r3, #1
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d034      	beq.n	8006c6a <HAL_I2C_Master_Receive+0x186>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d130      	bne.n	8006c6a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	2180      	movs	r1, #128	; 0x80
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 f880 	bl	8006d18 <I2C_WaitOnFlagUntilTimeout>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e04d      	b.n	8006cbe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	2bff      	cmp	r3, #255	; 0xff
 8006c2a:	d90e      	bls.n	8006c4a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	22ff      	movs	r2, #255	; 0xff
 8006c30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	8979      	ldrh	r1, [r7, #10]
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 fa8a 	bl	800715c <I2C_TransferConfig>
 8006c48:	e00f      	b.n	8006c6a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	8979      	ldrh	r1, [r7, #10]
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f000 fa79 	bl	800715c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d19d      	bne.n	8006bb0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	6a39      	ldr	r1, [r7, #32]
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f000 f8cd 	bl	8006e18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d001      	beq.n	8006c88 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e01a      	b.n	8006cbe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6859      	ldr	r1, [r3, #4]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	4b0c      	ldr	r3, [pc, #48]	; (8006ccc <HAL_I2C_Master_Receive+0x1e8>)
 8006c9c:	400b      	ands	r3, r1
 8006c9e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	e000      	b.n	8006cbe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006cbc:	2302      	movs	r3, #2
  }
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	80002400 	.word	0x80002400
 8006ccc:	fe00e800 	.word	0xfe00e800

08006cd0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d103      	bne.n	8006cee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2200      	movs	r2, #0
 8006cec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d007      	beq.n	8006d0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	699a      	ldr	r2, [r3, #24]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f042 0201 	orr.w	r2, r2, #1
 8006d0a:	619a      	str	r2, [r3, #24]
  }
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	603b      	str	r3, [r7, #0]
 8006d24:	4613      	mov	r3, r2
 8006d26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d28:	e022      	b.n	8006d70 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d30:	d01e      	beq.n	8006d70 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d32:	f7fb fc9b 	bl	800266c <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d302      	bcc.n	8006d48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d113      	bne.n	8006d70 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d4c:	f043 0220 	orr.w	r2, r3, #32
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2220      	movs	r2, #32
 8006d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e00f      	b.n	8006d90 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	699a      	ldr	r2, [r3, #24]
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	4013      	ands	r3, r2
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	bf0c      	ite	eq
 8006d80:	2301      	moveq	r3, #1
 8006d82:	2300      	movne	r3, #0
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	461a      	mov	r2, r3
 8006d88:	79fb      	ldrb	r3, [r7, #7]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d0cd      	beq.n	8006d2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006da4:	e02c      	b.n	8006e00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	68b9      	ldr	r1, [r7, #8]
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 f8ea 	bl	8006f84 <I2C_IsErrorOccurred>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e02a      	b.n	8006e10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dc0:	d01e      	beq.n	8006e00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dc2:	f7fb fc53 	bl	800266c <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d302      	bcc.n	8006dd8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d113      	bne.n	8006e00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ddc:	f043 0220 	orr.w	r2, r3, #32
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2220      	movs	r2, #32
 8006de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e007      	b.n	8006e10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d1cb      	bne.n	8006da6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e24:	e028      	b.n	8006e78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	68b9      	ldr	r1, [r7, #8]
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f000 f8aa 	bl	8006f84 <I2C_IsErrorOccurred>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d001      	beq.n	8006e3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e026      	b.n	8006e88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e3a:	f7fb fc17 	bl	800266c <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d302      	bcc.n	8006e50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d113      	bne.n	8006e78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e54:	f043 0220 	orr.w	r2, r3, #32
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e007      	b.n	8006e88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	f003 0320 	and.w	r3, r3, #32
 8006e82:	2b20      	cmp	r3, #32
 8006e84:	d1cf      	bne.n	8006e26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e9c:	e064      	b.n	8006f68 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	68b9      	ldr	r1, [r7, #8]
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 f86e 	bl	8006f84 <I2C_IsErrorOccurred>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e062      	b.n	8006f78 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	f003 0320 	and.w	r3, r3, #32
 8006ebc:	2b20      	cmp	r3, #32
 8006ebe:	d138      	bne.n	8006f32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	f003 0304 	and.w	r3, r3, #4
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d105      	bne.n	8006eda <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d001      	beq.n	8006eda <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	e04e      	b.n	8006f78 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	699b      	ldr	r3, [r3, #24]
 8006ee0:	f003 0310 	and.w	r3, r3, #16
 8006ee4:	2b10      	cmp	r3, #16
 8006ee6:	d107      	bne.n	8006ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2210      	movs	r2, #16
 8006eee:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2204      	movs	r2, #4
 8006ef4:	645a      	str	r2, [r3, #68]	; 0x44
 8006ef6:	e002      	b.n	8006efe <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2220      	movs	r2, #32
 8006f04:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6859      	ldr	r1, [r3, #4]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	4b1b      	ldr	r3, [pc, #108]	; (8006f80 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006f12:	400b      	ands	r3, r1
 8006f14:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2220      	movs	r2, #32
 8006f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e022      	b.n	8006f78 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f32:	f7fb fb9b 	bl	800266c <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d302      	bcc.n	8006f48 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10f      	bne.n	8006f68 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f4c:	f043 0220 	orr.w	r2, r3, #32
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2220      	movs	r2, #32
 8006f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e007      	b.n	8006f78 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	f003 0304 	and.w	r3, r3, #4
 8006f72:	2b04      	cmp	r3, #4
 8006f74:	d193      	bne.n	8006e9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	fe00e800 	.word	0xfe00e800

08006f84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b08a      	sub	sp, #40	; 0x28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	f003 0310 	and.w	r3, r3, #16
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d075      	beq.n	800709c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2210      	movs	r2, #16
 8006fb6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006fb8:	e056      	b.n	8007068 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fc0:	d052      	beq.n	8007068 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006fc2:	f7fb fb53 	bl	800266c <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d302      	bcc.n	8006fd8 <I2C_IsErrorOccurred+0x54>
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d147      	bne.n	8007068 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fe2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ffa:	d12e      	bne.n	800705a <I2C_IsErrorOccurred+0xd6>
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007002:	d02a      	beq.n	800705a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007004:	7cfb      	ldrb	r3, [r7, #19]
 8007006:	2b20      	cmp	r3, #32
 8007008:	d027      	beq.n	800705a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007018:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800701a:	f7fb fb27 	bl	800266c <HAL_GetTick>
 800701e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007020:	e01b      	b.n	800705a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007022:	f7fb fb23 	bl	800266c <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	2b19      	cmp	r3, #25
 800702e:	d914      	bls.n	800705a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007034:	f043 0220 	orr.w	r2, r3, #32
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2220      	movs	r2, #32
 8007040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	f003 0320 	and.w	r3, r3, #32
 8007064:	2b20      	cmp	r3, #32
 8007066:	d1dc      	bne.n	8007022 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b20      	cmp	r3, #32
 8007074:	d003      	beq.n	800707e <I2C_IsErrorOccurred+0xfa>
 8007076:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800707a:	2b00      	cmp	r3, #0
 800707c:	d09d      	beq.n	8006fba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800707e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007082:	2b00      	cmp	r3, #0
 8007084:	d103      	bne.n	800708e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2220      	movs	r2, #32
 800708c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	f043 0304 	orr.w	r3, r3, #4
 8007094:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00b      	beq.n	80070c6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	f043 0301 	orr.w	r3, r3, #1
 80070b4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00b      	beq.n	80070e8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80070d0:	6a3b      	ldr	r3, [r7, #32]
 80070d2:	f043 0308 	orr.w	r3, r3, #8
 80070d6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80070e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00b      	beq.n	800710a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80070f2:	6a3b      	ldr	r3, [r7, #32]
 80070f4:	f043 0302 	orr.w	r3, r3, #2
 80070f8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007102:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800710a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800710e:	2b00      	cmp	r3, #0
 8007110:	d01c      	beq.n	800714c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f7ff fddc 	bl	8006cd0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6859      	ldr	r1, [r3, #4]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	4b0d      	ldr	r3, [pc, #52]	; (8007158 <I2C_IsErrorOccurred+0x1d4>)
 8007124:	400b      	ands	r3, r1
 8007126:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	431a      	orrs	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2220      	movs	r2, #32
 8007138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800714c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007150:	4618      	mov	r0, r3
 8007152:	3728      	adds	r7, #40	; 0x28
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	fe00e800 	.word	0xfe00e800

0800715c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800715c:	b480      	push	{r7}
 800715e:	b087      	sub	sp, #28
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	607b      	str	r3, [r7, #4]
 8007166:	460b      	mov	r3, r1
 8007168:	817b      	strh	r3, [r7, #10]
 800716a:	4613      	mov	r3, r2
 800716c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800716e:	897b      	ldrh	r3, [r7, #10]
 8007170:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007174:	7a7b      	ldrb	r3, [r7, #9]
 8007176:	041b      	lsls	r3, r3, #16
 8007178:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800717c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007182:	6a3b      	ldr	r3, [r7, #32]
 8007184:	4313      	orrs	r3, r2
 8007186:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800718a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685a      	ldr	r2, [r3, #4]
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	0d5b      	lsrs	r3, r3, #21
 8007196:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800719a:	4b08      	ldr	r3, [pc, #32]	; (80071bc <I2C_TransferConfig+0x60>)
 800719c:	430b      	orrs	r3, r1
 800719e:	43db      	mvns	r3, r3
 80071a0:	ea02 0103 	and.w	r1, r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80071ae:	bf00      	nop
 80071b0:	371c      	adds	r7, #28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	03ff63ff 	.word	0x03ff63ff

080071c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b20      	cmp	r3, #32
 80071d4:	d138      	bne.n	8007248 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d101      	bne.n	80071e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80071e0:	2302      	movs	r3, #2
 80071e2:	e032      	b.n	800724a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2224      	movs	r2, #36	; 0x24
 80071f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 0201 	bic.w	r2, r2, #1
 8007202:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007212:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6819      	ldr	r1, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	430a      	orrs	r2, r1
 8007222:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f042 0201 	orr.w	r2, r2, #1
 8007232:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2220      	movs	r2, #32
 8007238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007244:	2300      	movs	r3, #0
 8007246:	e000      	b.n	800724a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007248:	2302      	movs	r3, #2
  }
}
 800724a:	4618      	mov	r0, r3
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007256:	b480      	push	{r7}
 8007258:	b085      	sub	sp, #20
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b20      	cmp	r3, #32
 800726a:	d139      	bne.n	80072e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007272:	2b01      	cmp	r3, #1
 8007274:	d101      	bne.n	800727a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007276:	2302      	movs	r3, #2
 8007278:	e033      	b.n	80072e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2224      	movs	r2, #36	; 0x24
 8007286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 0201 	bic.w	r2, r2, #1
 8007298:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80072a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	021b      	lsls	r3, r3, #8
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f042 0201 	orr.w	r2, r2, #1
 80072ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2220      	movs	r2, #32
 80072d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	e000      	b.n	80072e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80072e0:	2302      	movs	r3, #2
  }
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
	...

080072f0 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	460b      	mov	r3, r1
 80072fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 80072fc:	4b18      	ldr	r3, [pc, #96]	; (8007360 <HAL_PWR_EnterSTOPMode+0x70>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f023 0201 	bic.w	r2, r3, #1
 8007304:	4916      	ldr	r1, [pc, #88]	; (8007360 <HAL_PWR_EnterSTOPMode+0x70>)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4313      	orrs	r3, r2
 800730a:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800730c:	4b14      	ldr	r3, [pc, #80]	; (8007360 <HAL_PWR_EnterSTOPMode+0x70>)
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	4a13      	ldr	r2, [pc, #76]	; (8007360 <HAL_PWR_EnterSTOPMode+0x70>)
 8007312:	f023 0305 	bic.w	r3, r3, #5
 8007316:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8007318:	4b11      	ldr	r3, [pc, #68]	; (8007360 <HAL_PWR_EnterSTOPMode+0x70>)
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	4a10      	ldr	r2, [pc, #64]	; (8007360 <HAL_PWR_EnterSTOPMode+0x70>)
 800731e:	f023 0302 	bic.w	r3, r3, #2
 8007322:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8007324:	4b0f      	ldr	r3, [pc, #60]	; (8007364 <HAL_PWR_EnterSTOPMode+0x74>)
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	4a0e      	ldr	r2, [pc, #56]	; (8007364 <HAL_PWR_EnterSTOPMode+0x74>)
 800732a:	f043 0304 	orr.w	r3, r3, #4
 800732e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8007330:	f3bf 8f4f 	dsb	sy
}
 8007334:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007336:	f3bf 8f6f 	isb	sy
}
 800733a:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800733c:	78fb      	ldrb	r3, [r7, #3]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d101      	bne.n	8007346 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8007342:	bf30      	wfi
 8007344:	e000      	b.n	8007348 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8007346:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8007348:	4b06      	ldr	r3, [pc, #24]	; (8007364 <HAL_PWR_EnterSTOPMode+0x74>)
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	4a05      	ldr	r2, [pc, #20]	; (8007364 <HAL_PWR_EnterSTOPMode+0x74>)
 800734e:	f023 0304 	bic.w	r3, r3, #4
 8007352:	6113      	str	r3, [r2, #16]
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr
 8007360:	58024800 	.word	0x58024800
 8007364:	e000ed00 	.word	0xe000ed00

08007368 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007370:	4b19      	ldr	r3, [pc, #100]	; (80073d8 <HAL_PWREx_ConfigSupply+0x70>)
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	f003 0304 	and.w	r3, r3, #4
 8007378:	2b04      	cmp	r3, #4
 800737a:	d00a      	beq.n	8007392 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800737c:	4b16      	ldr	r3, [pc, #88]	; (80073d8 <HAL_PWREx_ConfigSupply+0x70>)
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	f003 0307 	and.w	r3, r3, #7
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	429a      	cmp	r2, r3
 8007388:	d001      	beq.n	800738e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e01f      	b.n	80073ce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	e01d      	b.n	80073ce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007392:	4b11      	ldr	r3, [pc, #68]	; (80073d8 <HAL_PWREx_ConfigSupply+0x70>)
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	f023 0207 	bic.w	r2, r3, #7
 800739a:	490f      	ldr	r1, [pc, #60]	; (80073d8 <HAL_PWREx_ConfigSupply+0x70>)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4313      	orrs	r3, r2
 80073a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80073a2:	f7fb f963 	bl	800266c <HAL_GetTick>
 80073a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80073a8:	e009      	b.n	80073be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80073aa:	f7fb f95f 	bl	800266c <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073b8:	d901      	bls.n	80073be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e007      	b.n	80073ce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80073be:	4b06      	ldr	r3, [pc, #24]	; (80073d8 <HAL_PWREx_ConfigSupply+0x70>)
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073ca:	d1ee      	bne.n	80073aa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	58024800 	.word	0x58024800

080073dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b08c      	sub	sp, #48	; 0x30
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d102      	bne.n	80073f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	f000 bc1d 	b.w	8007c2a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f000 8087 	beq.w	800750c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073fe:	4b99      	ldr	r3, [pc, #612]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007406:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007408:	4b96      	ldr	r3, [pc, #600]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 800740a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800740e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007410:	2b10      	cmp	r3, #16
 8007412:	d007      	beq.n	8007424 <HAL_RCC_OscConfig+0x48>
 8007414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007416:	2b18      	cmp	r3, #24
 8007418:	d110      	bne.n	800743c <HAL_RCC_OscConfig+0x60>
 800741a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741c:	f003 0303 	and.w	r3, r3, #3
 8007420:	2b02      	cmp	r3, #2
 8007422:	d10b      	bne.n	800743c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007424:	4b8f      	ldr	r3, [pc, #572]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d06c      	beq.n	800750a <HAL_RCC_OscConfig+0x12e>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d168      	bne.n	800750a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e3f6      	b.n	8007c2a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007444:	d106      	bne.n	8007454 <HAL_RCC_OscConfig+0x78>
 8007446:	4b87      	ldr	r3, [pc, #540]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a86      	ldr	r2, [pc, #536]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 800744c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007450:	6013      	str	r3, [r2, #0]
 8007452:	e02e      	b.n	80074b2 <HAL_RCC_OscConfig+0xd6>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10c      	bne.n	8007476 <HAL_RCC_OscConfig+0x9a>
 800745c:	4b81      	ldr	r3, [pc, #516]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a80      	ldr	r2, [pc, #512]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 8007462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007466:	6013      	str	r3, [r2, #0]
 8007468:	4b7e      	ldr	r3, [pc, #504]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a7d      	ldr	r2, [pc, #500]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 800746e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007472:	6013      	str	r3, [r2, #0]
 8007474:	e01d      	b.n	80074b2 <HAL_RCC_OscConfig+0xd6>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800747e:	d10c      	bne.n	800749a <HAL_RCC_OscConfig+0xbe>
 8007480:	4b78      	ldr	r3, [pc, #480]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a77      	ldr	r2, [pc, #476]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 8007486:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800748a:	6013      	str	r3, [r2, #0]
 800748c:	4b75      	ldr	r3, [pc, #468]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a74      	ldr	r2, [pc, #464]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 8007492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007496:	6013      	str	r3, [r2, #0]
 8007498:	e00b      	b.n	80074b2 <HAL_RCC_OscConfig+0xd6>
 800749a:	4b72      	ldr	r3, [pc, #456]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a71      	ldr	r2, [pc, #452]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 80074a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074a4:	6013      	str	r3, [r2, #0]
 80074a6:	4b6f      	ldr	r3, [pc, #444]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a6e      	ldr	r2, [pc, #440]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 80074ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d013      	beq.n	80074e2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ba:	f7fb f8d7 	bl	800266c <HAL_GetTick>
 80074be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074c0:	e008      	b.n	80074d4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074c2:	f7fb f8d3 	bl	800266c <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b64      	cmp	r3, #100	; 0x64
 80074ce:	d901      	bls.n	80074d4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e3aa      	b.n	8007c2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074d4:	4b63      	ldr	r3, [pc, #396]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d0f0      	beq.n	80074c2 <HAL_RCC_OscConfig+0xe6>
 80074e0:	e014      	b.n	800750c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074e2:	f7fb f8c3 	bl	800266c <HAL_GetTick>
 80074e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80074e8:	e008      	b.n	80074fc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074ea:	f7fb f8bf 	bl	800266c <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	2b64      	cmp	r3, #100	; 0x64
 80074f6:	d901      	bls.n	80074fc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e396      	b.n	8007c2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80074fc:	4b59      	ldr	r3, [pc, #356]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1f0      	bne.n	80074ea <HAL_RCC_OscConfig+0x10e>
 8007508:	e000      	b.n	800750c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800750a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0302 	and.w	r3, r3, #2
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 80cb 	beq.w	80076b0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800751a:	4b52      	ldr	r3, [pc, #328]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007522:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007524:	4b4f      	ldr	r3, [pc, #316]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 8007526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007528:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800752a:	6a3b      	ldr	r3, [r7, #32]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d007      	beq.n	8007540 <HAL_RCC_OscConfig+0x164>
 8007530:	6a3b      	ldr	r3, [r7, #32]
 8007532:	2b18      	cmp	r3, #24
 8007534:	d156      	bne.n	80075e4 <HAL_RCC_OscConfig+0x208>
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	f003 0303 	and.w	r3, r3, #3
 800753c:	2b00      	cmp	r3, #0
 800753e:	d151      	bne.n	80075e4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007540:	4b48      	ldr	r3, [pc, #288]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0304 	and.w	r3, r3, #4
 8007548:	2b00      	cmp	r3, #0
 800754a:	d005      	beq.n	8007558 <HAL_RCC_OscConfig+0x17c>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d101      	bne.n	8007558 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e368      	b.n	8007c2a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007558:	4b42      	ldr	r3, [pc, #264]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f023 0219 	bic.w	r2, r3, #25
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	493f      	ldr	r1, [pc, #252]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 8007566:	4313      	orrs	r3, r2
 8007568:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800756a:	f7fb f87f 	bl	800266c <HAL_GetTick>
 800756e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007570:	e008      	b.n	8007584 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007572:	f7fb f87b 	bl	800266c <HAL_GetTick>
 8007576:	4602      	mov	r2, r0
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	2b02      	cmp	r3, #2
 800757e:	d901      	bls.n	8007584 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	e352      	b.n	8007c2a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007584:	4b37      	ldr	r3, [pc, #220]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0304 	and.w	r3, r3, #4
 800758c:	2b00      	cmp	r3, #0
 800758e:	d0f0      	beq.n	8007572 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007590:	f7fb f8ac 	bl	80026ec <HAL_GetREVID>
 8007594:	4603      	mov	r3, r0
 8007596:	f241 0203 	movw	r2, #4099	; 0x1003
 800759a:	4293      	cmp	r3, r2
 800759c:	d817      	bhi.n	80075ce <HAL_RCC_OscConfig+0x1f2>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	2b40      	cmp	r3, #64	; 0x40
 80075a4:	d108      	bne.n	80075b8 <HAL_RCC_OscConfig+0x1dc>
 80075a6:	4b2f      	ldr	r3, [pc, #188]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80075ae:	4a2d      	ldr	r2, [pc, #180]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 80075b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075b4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075b6:	e07b      	b.n	80076b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075b8:	4b2a      	ldr	r3, [pc, #168]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	031b      	lsls	r3, r3, #12
 80075c6:	4927      	ldr	r1, [pc, #156]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075cc:	e070      	b.n	80076b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075ce:	4b25      	ldr	r3, [pc, #148]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	061b      	lsls	r3, r3, #24
 80075dc:	4921      	ldr	r1, [pc, #132]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075e2:	e065      	b.n	80076b0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d048      	beq.n	800767e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80075ec:	4b1d      	ldr	r3, [pc, #116]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f023 0219 	bic.w	r2, r3, #25
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	491a      	ldr	r1, [pc, #104]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 80075fa:	4313      	orrs	r3, r2
 80075fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075fe:	f7fb f835 	bl	800266c <HAL_GetTick>
 8007602:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007604:	e008      	b.n	8007618 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007606:	f7fb f831 	bl	800266c <HAL_GetTick>
 800760a:	4602      	mov	r2, r0
 800760c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	2b02      	cmp	r3, #2
 8007612:	d901      	bls.n	8007618 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	e308      	b.n	8007c2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007618:	4b12      	ldr	r3, [pc, #72]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0304 	and.w	r3, r3, #4
 8007620:	2b00      	cmp	r3, #0
 8007622:	d0f0      	beq.n	8007606 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007624:	f7fb f862 	bl	80026ec <HAL_GetREVID>
 8007628:	4603      	mov	r3, r0
 800762a:	f241 0203 	movw	r2, #4099	; 0x1003
 800762e:	4293      	cmp	r3, r2
 8007630:	d81a      	bhi.n	8007668 <HAL_RCC_OscConfig+0x28c>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	2b40      	cmp	r3, #64	; 0x40
 8007638:	d108      	bne.n	800764c <HAL_RCC_OscConfig+0x270>
 800763a:	4b0a      	ldr	r3, [pc, #40]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007642:	4a08      	ldr	r2, [pc, #32]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 8007644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007648:	6053      	str	r3, [r2, #4]
 800764a:	e031      	b.n	80076b0 <HAL_RCC_OscConfig+0x2d4>
 800764c:	4b05      	ldr	r3, [pc, #20]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	031b      	lsls	r3, r3, #12
 800765a:	4902      	ldr	r1, [pc, #8]	; (8007664 <HAL_RCC_OscConfig+0x288>)
 800765c:	4313      	orrs	r3, r2
 800765e:	604b      	str	r3, [r1, #4]
 8007660:	e026      	b.n	80076b0 <HAL_RCC_OscConfig+0x2d4>
 8007662:	bf00      	nop
 8007664:	58024400 	.word	0x58024400
 8007668:	4b9a      	ldr	r3, [pc, #616]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	061b      	lsls	r3, r3, #24
 8007676:	4997      	ldr	r1, [pc, #604]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 8007678:	4313      	orrs	r3, r2
 800767a:	604b      	str	r3, [r1, #4]
 800767c:	e018      	b.n	80076b0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800767e:	4b95      	ldr	r3, [pc, #596]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a94      	ldr	r2, [pc, #592]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 8007684:	f023 0301 	bic.w	r3, r3, #1
 8007688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800768a:	f7fa ffef 	bl	800266c <HAL_GetTick>
 800768e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007690:	e008      	b.n	80076a4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007692:	f7fa ffeb 	bl	800266c <HAL_GetTick>
 8007696:	4602      	mov	r2, r0
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	2b02      	cmp	r3, #2
 800769e:	d901      	bls.n	80076a4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e2c2      	b.n	8007c2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80076a4:	4b8b      	ldr	r3, [pc, #556]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0304 	and.w	r3, r3, #4
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1f0      	bne.n	8007692 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0310 	and.w	r3, r3, #16
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f000 80a9 	beq.w	8007810 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076be:	4b85      	ldr	r3, [pc, #532]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80076c8:	4b82      	ldr	r3, [pc, #520]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 80076ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076cc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	2b08      	cmp	r3, #8
 80076d2:	d007      	beq.n	80076e4 <HAL_RCC_OscConfig+0x308>
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	2b18      	cmp	r3, #24
 80076d8:	d13a      	bne.n	8007750 <HAL_RCC_OscConfig+0x374>
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	f003 0303 	and.w	r3, r3, #3
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d135      	bne.n	8007750 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80076e4:	4b7b      	ldr	r3, [pc, #492]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d005      	beq.n	80076fc <HAL_RCC_OscConfig+0x320>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	69db      	ldr	r3, [r3, #28]
 80076f4:	2b80      	cmp	r3, #128	; 0x80
 80076f6:	d001      	beq.n	80076fc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e296      	b.n	8007c2a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80076fc:	f7fa fff6 	bl	80026ec <HAL_GetREVID>
 8007700:	4603      	mov	r3, r0
 8007702:	f241 0203 	movw	r2, #4099	; 0x1003
 8007706:	4293      	cmp	r3, r2
 8007708:	d817      	bhi.n	800773a <HAL_RCC_OscConfig+0x35e>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	2b20      	cmp	r3, #32
 8007710:	d108      	bne.n	8007724 <HAL_RCC_OscConfig+0x348>
 8007712:	4b70      	ldr	r3, [pc, #448]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800771a:	4a6e      	ldr	r2, [pc, #440]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 800771c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007720:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007722:	e075      	b.n	8007810 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007724:	4b6b      	ldr	r3, [pc, #428]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a1b      	ldr	r3, [r3, #32]
 8007730:	069b      	lsls	r3, r3, #26
 8007732:	4968      	ldr	r1, [pc, #416]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 8007734:	4313      	orrs	r3, r2
 8007736:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007738:	e06a      	b.n	8007810 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800773a:	4b66      	ldr	r3, [pc, #408]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	061b      	lsls	r3, r3, #24
 8007748:	4962      	ldr	r1, [pc, #392]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 800774a:	4313      	orrs	r3, r2
 800774c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800774e:	e05f      	b.n	8007810 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	69db      	ldr	r3, [r3, #28]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d042      	beq.n	80077de <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007758:	4b5e      	ldr	r3, [pc, #376]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a5d      	ldr	r2, [pc, #372]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 800775e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007764:	f7fa ff82 	bl	800266c <HAL_GetTick>
 8007768:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800776a:	e008      	b.n	800777e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800776c:	f7fa ff7e 	bl	800266c <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	2b02      	cmp	r3, #2
 8007778:	d901      	bls.n	800777e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e255      	b.n	8007c2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800777e:	4b55      	ldr	r3, [pc, #340]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007786:	2b00      	cmp	r3, #0
 8007788:	d0f0      	beq.n	800776c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800778a:	f7fa ffaf 	bl	80026ec <HAL_GetREVID>
 800778e:	4603      	mov	r3, r0
 8007790:	f241 0203 	movw	r2, #4099	; 0x1003
 8007794:	4293      	cmp	r3, r2
 8007796:	d817      	bhi.n	80077c8 <HAL_RCC_OscConfig+0x3ec>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a1b      	ldr	r3, [r3, #32]
 800779c:	2b20      	cmp	r3, #32
 800779e:	d108      	bne.n	80077b2 <HAL_RCC_OscConfig+0x3d6>
 80077a0:	4b4c      	ldr	r3, [pc, #304]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80077a8:	4a4a      	ldr	r2, [pc, #296]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 80077aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077ae:	6053      	str	r3, [r2, #4]
 80077b0:	e02e      	b.n	8007810 <HAL_RCC_OscConfig+0x434>
 80077b2:	4b48      	ldr	r3, [pc, #288]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	069b      	lsls	r3, r3, #26
 80077c0:	4944      	ldr	r1, [pc, #272]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 80077c2:	4313      	orrs	r3, r2
 80077c4:	604b      	str	r3, [r1, #4]
 80077c6:	e023      	b.n	8007810 <HAL_RCC_OscConfig+0x434>
 80077c8:	4b42      	ldr	r3, [pc, #264]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a1b      	ldr	r3, [r3, #32]
 80077d4:	061b      	lsls	r3, r3, #24
 80077d6:	493f      	ldr	r1, [pc, #252]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	60cb      	str	r3, [r1, #12]
 80077dc:	e018      	b.n	8007810 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80077de:	4b3d      	ldr	r3, [pc, #244]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a3c      	ldr	r2, [pc, #240]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 80077e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ea:	f7fa ff3f 	bl	800266c <HAL_GetTick>
 80077ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80077f0:	e008      	b.n	8007804 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80077f2:	f7fa ff3b 	bl	800266c <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d901      	bls.n	8007804 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e212      	b.n	8007c2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007804:	4b33      	ldr	r3, [pc, #204]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1f0      	bne.n	80077f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0308 	and.w	r3, r3, #8
 8007818:	2b00      	cmp	r3, #0
 800781a:	d036      	beq.n	800788a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	695b      	ldr	r3, [r3, #20]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d019      	beq.n	8007858 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007824:	4b2b      	ldr	r3, [pc, #172]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 8007826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007828:	4a2a      	ldr	r2, [pc, #168]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 800782a:	f043 0301 	orr.w	r3, r3, #1
 800782e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007830:	f7fa ff1c 	bl	800266c <HAL_GetTick>
 8007834:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007836:	e008      	b.n	800784a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007838:	f7fa ff18 	bl	800266c <HAL_GetTick>
 800783c:	4602      	mov	r2, r0
 800783e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	2b02      	cmp	r3, #2
 8007844:	d901      	bls.n	800784a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e1ef      	b.n	8007c2a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800784a:	4b22      	ldr	r3, [pc, #136]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 800784c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800784e:	f003 0302 	and.w	r3, r3, #2
 8007852:	2b00      	cmp	r3, #0
 8007854:	d0f0      	beq.n	8007838 <HAL_RCC_OscConfig+0x45c>
 8007856:	e018      	b.n	800788a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007858:	4b1e      	ldr	r3, [pc, #120]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 800785a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800785c:	4a1d      	ldr	r2, [pc, #116]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 800785e:	f023 0301 	bic.w	r3, r3, #1
 8007862:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007864:	f7fa ff02 	bl	800266c <HAL_GetTick>
 8007868:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800786a:	e008      	b.n	800787e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800786c:	f7fa fefe 	bl	800266c <HAL_GetTick>
 8007870:	4602      	mov	r2, r0
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	2b02      	cmp	r3, #2
 8007878:	d901      	bls.n	800787e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e1d5      	b.n	8007c2a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800787e:	4b15      	ldr	r3, [pc, #84]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 8007880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007882:	f003 0302 	and.w	r3, r3, #2
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1f0      	bne.n	800786c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 0320 	and.w	r3, r3, #32
 8007892:	2b00      	cmp	r3, #0
 8007894:	d039      	beq.n	800790a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d01c      	beq.n	80078d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800789e:	4b0d      	ldr	r3, [pc, #52]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a0c      	ldr	r2, [pc, #48]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 80078a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80078a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80078aa:	f7fa fedf 	bl	800266c <HAL_GetTick>
 80078ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80078b0:	e008      	b.n	80078c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80078b2:	f7fa fedb 	bl	800266c <HAL_GetTick>
 80078b6:	4602      	mov	r2, r0
 80078b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d901      	bls.n	80078c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e1b2      	b.n	8007c2a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80078c4:	4b03      	ldr	r3, [pc, #12]	; (80078d4 <HAL_RCC_OscConfig+0x4f8>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d0f0      	beq.n	80078b2 <HAL_RCC_OscConfig+0x4d6>
 80078d0:	e01b      	b.n	800790a <HAL_RCC_OscConfig+0x52e>
 80078d2:	bf00      	nop
 80078d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80078d8:	4b9b      	ldr	r3, [pc, #620]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a9a      	ldr	r2, [pc, #616]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 80078de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80078e4:	f7fa fec2 	bl	800266c <HAL_GetTick>
 80078e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80078ea:	e008      	b.n	80078fe <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80078ec:	f7fa febe 	bl	800266c <HAL_GetTick>
 80078f0:	4602      	mov	r2, r0
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d901      	bls.n	80078fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e195      	b.n	8007c2a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80078fe:	4b92      	ldr	r3, [pc, #584]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1f0      	bne.n	80078ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0304 	and.w	r3, r3, #4
 8007912:	2b00      	cmp	r3, #0
 8007914:	f000 8081 	beq.w	8007a1a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007918:	4b8c      	ldr	r3, [pc, #560]	; (8007b4c <HAL_RCC_OscConfig+0x770>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a8b      	ldr	r2, [pc, #556]	; (8007b4c <HAL_RCC_OscConfig+0x770>)
 800791e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007922:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007924:	f7fa fea2 	bl	800266c <HAL_GetTick>
 8007928:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800792a:	e008      	b.n	800793e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800792c:	f7fa fe9e 	bl	800266c <HAL_GetTick>
 8007930:	4602      	mov	r2, r0
 8007932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	2b64      	cmp	r3, #100	; 0x64
 8007938:	d901      	bls.n	800793e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800793a:	2303      	movs	r3, #3
 800793c:	e175      	b.n	8007c2a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800793e:	4b83      	ldr	r3, [pc, #524]	; (8007b4c <HAL_RCC_OscConfig+0x770>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007946:	2b00      	cmp	r3, #0
 8007948:	d0f0      	beq.n	800792c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d106      	bne.n	8007960 <HAL_RCC_OscConfig+0x584>
 8007952:	4b7d      	ldr	r3, [pc, #500]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007956:	4a7c      	ldr	r2, [pc, #496]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007958:	f043 0301 	orr.w	r3, r3, #1
 800795c:	6713      	str	r3, [r2, #112]	; 0x70
 800795e:	e02d      	b.n	80079bc <HAL_RCC_OscConfig+0x5e0>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10c      	bne.n	8007982 <HAL_RCC_OscConfig+0x5a6>
 8007968:	4b77      	ldr	r3, [pc, #476]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 800796a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796c:	4a76      	ldr	r2, [pc, #472]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 800796e:	f023 0301 	bic.w	r3, r3, #1
 8007972:	6713      	str	r3, [r2, #112]	; 0x70
 8007974:	4b74      	ldr	r3, [pc, #464]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007978:	4a73      	ldr	r2, [pc, #460]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 800797a:	f023 0304 	bic.w	r3, r3, #4
 800797e:	6713      	str	r3, [r2, #112]	; 0x70
 8007980:	e01c      	b.n	80079bc <HAL_RCC_OscConfig+0x5e0>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	2b05      	cmp	r3, #5
 8007988:	d10c      	bne.n	80079a4 <HAL_RCC_OscConfig+0x5c8>
 800798a:	4b6f      	ldr	r3, [pc, #444]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 800798c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798e:	4a6e      	ldr	r2, [pc, #440]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007990:	f043 0304 	orr.w	r3, r3, #4
 8007994:	6713      	str	r3, [r2, #112]	; 0x70
 8007996:	4b6c      	ldr	r3, [pc, #432]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800799a:	4a6b      	ldr	r2, [pc, #428]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 800799c:	f043 0301 	orr.w	r3, r3, #1
 80079a0:	6713      	str	r3, [r2, #112]	; 0x70
 80079a2:	e00b      	b.n	80079bc <HAL_RCC_OscConfig+0x5e0>
 80079a4:	4b68      	ldr	r3, [pc, #416]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 80079a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a8:	4a67      	ldr	r2, [pc, #412]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 80079aa:	f023 0301 	bic.w	r3, r3, #1
 80079ae:	6713      	str	r3, [r2, #112]	; 0x70
 80079b0:	4b65      	ldr	r3, [pc, #404]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 80079b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b4:	4a64      	ldr	r2, [pc, #400]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 80079b6:	f023 0304 	bic.w	r3, r3, #4
 80079ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d015      	beq.n	80079f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079c4:	f7fa fe52 	bl	800266c <HAL_GetTick>
 80079c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079ca:	e00a      	b.n	80079e2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079cc:	f7fa fe4e 	bl	800266c <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80079da:	4293      	cmp	r3, r2
 80079dc:	d901      	bls.n	80079e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e123      	b.n	8007c2a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079e2:	4b59      	ldr	r3, [pc, #356]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 80079e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e6:	f003 0302 	and.w	r3, r3, #2
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d0ee      	beq.n	80079cc <HAL_RCC_OscConfig+0x5f0>
 80079ee:	e014      	b.n	8007a1a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079f0:	f7fa fe3c 	bl	800266c <HAL_GetTick>
 80079f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80079f6:	e00a      	b.n	8007a0e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079f8:	f7fa fe38 	bl	800266c <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d901      	bls.n	8007a0e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e10d      	b.n	8007c2a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007a0e:	4b4e      	ldr	r3, [pc, #312]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a12:	f003 0302 	and.w	r3, r3, #2
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1ee      	bne.n	80079f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f000 8102 	beq.w	8007c28 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007a24:	4b48      	ldr	r3, [pc, #288]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a2c:	2b18      	cmp	r3, #24
 8007a2e:	f000 80bd 	beq.w	8007bac <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	f040 809e 	bne.w	8007b78 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a3c:	4b42      	ldr	r3, [pc, #264]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a41      	ldr	r2, [pc, #260]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007a42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a48:	f7fa fe10 	bl	800266c <HAL_GetTick>
 8007a4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a4e:	e008      	b.n	8007a62 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a50:	f7fa fe0c 	bl	800266c <HAL_GetTick>
 8007a54:	4602      	mov	r2, r0
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d901      	bls.n	8007a62 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e0e3      	b.n	8007c2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a62:	4b39      	ldr	r3, [pc, #228]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1f0      	bne.n	8007a50 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a6e:	4b36      	ldr	r3, [pc, #216]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a72:	4b37      	ldr	r3, [pc, #220]	; (8007b50 <HAL_RCC_OscConfig+0x774>)
 8007a74:	4013      	ands	r3, r2
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007a7e:	0112      	lsls	r2, r2, #4
 8007a80:	430a      	orrs	r2, r1
 8007a82:	4931      	ldr	r1, [pc, #196]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007a84:	4313      	orrs	r3, r2
 8007a86:	628b      	str	r3, [r1, #40]	; 0x28
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a96:	3b01      	subs	r3, #1
 8007a98:	025b      	lsls	r3, r3, #9
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	431a      	orrs	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	041b      	lsls	r3, r3, #16
 8007aa6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007aaa:	431a      	orrs	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	061b      	lsls	r3, r3, #24
 8007ab4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ab8:	4923      	ldr	r1, [pc, #140]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007abe:	4b22      	ldr	r3, [pc, #136]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac2:	4a21      	ldr	r2, [pc, #132]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007ac4:	f023 0301 	bic.w	r3, r3, #1
 8007ac8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007aca:	4b1f      	ldr	r3, [pc, #124]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ace:	4b21      	ldr	r3, [pc, #132]	; (8007b54 <HAL_RCC_OscConfig+0x778>)
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007ad6:	00d2      	lsls	r2, r2, #3
 8007ad8:	491b      	ldr	r1, [pc, #108]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007ade:	4b1a      	ldr	r3, [pc, #104]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae2:	f023 020c 	bic.w	r2, r3, #12
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aea:	4917      	ldr	r1, [pc, #92]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007aec:	4313      	orrs	r3, r2
 8007aee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007af0:	4b15      	ldr	r3, [pc, #84]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af4:	f023 0202 	bic.w	r2, r3, #2
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afc:	4912      	ldr	r1, [pc, #72]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007afe:	4313      	orrs	r3, r2
 8007b00:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007b02:	4b11      	ldr	r3, [pc, #68]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b06:	4a10      	ldr	r2, [pc, #64]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b0e:	4b0e      	ldr	r3, [pc, #56]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b12:	4a0d      	ldr	r2, [pc, #52]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007b1a:	4b0b      	ldr	r3, [pc, #44]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1e:	4a0a      	ldr	r2, [pc, #40]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007b26:	4b08      	ldr	r3, [pc, #32]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2a:	4a07      	ldr	r2, [pc, #28]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007b2c:	f043 0301 	orr.w	r3, r3, #1
 8007b30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b32:	4b05      	ldr	r3, [pc, #20]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a04      	ldr	r2, [pc, #16]	; (8007b48 <HAL_RCC_OscConfig+0x76c>)
 8007b38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b3e:	f7fa fd95 	bl	800266c <HAL_GetTick>
 8007b42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b44:	e011      	b.n	8007b6a <HAL_RCC_OscConfig+0x78e>
 8007b46:	bf00      	nop
 8007b48:	58024400 	.word	0x58024400
 8007b4c:	58024800 	.word	0x58024800
 8007b50:	fffffc0c 	.word	0xfffffc0c
 8007b54:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b58:	f7fa fd88 	bl	800266c <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d901      	bls.n	8007b6a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e05f      	b.n	8007c2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b6a:	4b32      	ldr	r3, [pc, #200]	; (8007c34 <HAL_RCC_OscConfig+0x858>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d0f0      	beq.n	8007b58 <HAL_RCC_OscConfig+0x77c>
 8007b76:	e057      	b.n	8007c28 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b78:	4b2e      	ldr	r3, [pc, #184]	; (8007c34 <HAL_RCC_OscConfig+0x858>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a2d      	ldr	r2, [pc, #180]	; (8007c34 <HAL_RCC_OscConfig+0x858>)
 8007b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b84:	f7fa fd72 	bl	800266c <HAL_GetTick>
 8007b88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b8a:	e008      	b.n	8007b9e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b8c:	f7fa fd6e 	bl	800266c <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d901      	bls.n	8007b9e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e045      	b.n	8007c2a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b9e:	4b25      	ldr	r3, [pc, #148]	; (8007c34 <HAL_RCC_OscConfig+0x858>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1f0      	bne.n	8007b8c <HAL_RCC_OscConfig+0x7b0>
 8007baa:	e03d      	b.n	8007c28 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007bac:	4b21      	ldr	r3, [pc, #132]	; (8007c34 <HAL_RCC_OscConfig+0x858>)
 8007bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007bb2:	4b20      	ldr	r3, [pc, #128]	; (8007c34 <HAL_RCC_OscConfig+0x858>)
 8007bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d031      	beq.n	8007c24 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	f003 0203 	and.w	r2, r3, #3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d12a      	bne.n	8007c24 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	091b      	lsrs	r3, r3, #4
 8007bd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d122      	bne.n	8007c24 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d11a      	bne.n	8007c24 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	0a5b      	lsrs	r3, r3, #9
 8007bf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bfa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d111      	bne.n	8007c24 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	0c1b      	lsrs	r3, r3, #16
 8007c04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d108      	bne.n	8007c24 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	0e1b      	lsrs	r3, r3, #24
 8007c16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c1e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d001      	beq.n	8007c28 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e000      	b.n	8007c2a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3730      	adds	r7, #48	; 0x30
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	58024400 	.word	0x58024400

08007c38 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d101      	bne.n	8007c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e19c      	b.n	8007f86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c4c:	4b8a      	ldr	r3, [pc, #552]	; (8007e78 <HAL_RCC_ClockConfig+0x240>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 030f 	and.w	r3, r3, #15
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d910      	bls.n	8007c7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c5a:	4b87      	ldr	r3, [pc, #540]	; (8007e78 <HAL_RCC_ClockConfig+0x240>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f023 020f 	bic.w	r2, r3, #15
 8007c62:	4985      	ldr	r1, [pc, #532]	; (8007e78 <HAL_RCC_ClockConfig+0x240>)
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c6a:	4b83      	ldr	r3, [pc, #524]	; (8007e78 <HAL_RCC_ClockConfig+0x240>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 030f 	and.w	r3, r3, #15
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d001      	beq.n	8007c7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e184      	b.n	8007f86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 0304 	and.w	r3, r3, #4
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d010      	beq.n	8007caa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	691a      	ldr	r2, [r3, #16]
 8007c8c:	4b7b      	ldr	r3, [pc, #492]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d908      	bls.n	8007caa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007c98:	4b78      	ldr	r3, [pc, #480]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	4975      	ldr	r1, [pc, #468]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0308 	and.w	r3, r3, #8
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d010      	beq.n	8007cd8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	695a      	ldr	r2, [r3, #20]
 8007cba:	4b70      	ldr	r3, [pc, #448]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007cbc:	69db      	ldr	r3, [r3, #28]
 8007cbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d908      	bls.n	8007cd8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007cc6:	4b6d      	ldr	r3, [pc, #436]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	496a      	ldr	r1, [pc, #424]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0310 	and.w	r3, r3, #16
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d010      	beq.n	8007d06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	699a      	ldr	r2, [r3, #24]
 8007ce8:	4b64      	ldr	r3, [pc, #400]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007cea:	69db      	ldr	r3, [r3, #28]
 8007cec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d908      	bls.n	8007d06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007cf4:	4b61      	ldr	r3, [pc, #388]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	495e      	ldr	r1, [pc, #376]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 0320 	and.w	r3, r3, #32
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d010      	beq.n	8007d34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	69da      	ldr	r2, [r3, #28]
 8007d16:	4b59      	ldr	r3, [pc, #356]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d908      	bls.n	8007d34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007d22:	4b56      	ldr	r3, [pc, #344]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	69db      	ldr	r3, [r3, #28]
 8007d2e:	4953      	ldr	r1, [pc, #332]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007d30:	4313      	orrs	r3, r2
 8007d32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0302 	and.w	r3, r3, #2
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d010      	beq.n	8007d62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	68da      	ldr	r2, [r3, #12]
 8007d44:	4b4d      	ldr	r3, [pc, #308]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	f003 030f 	and.w	r3, r3, #15
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d908      	bls.n	8007d62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d50:	4b4a      	ldr	r3, [pc, #296]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	f023 020f 	bic.w	r2, r3, #15
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	4947      	ldr	r1, [pc, #284]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d055      	beq.n	8007e1a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007d6e:	4b43      	ldr	r3, [pc, #268]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	4940      	ldr	r1, [pc, #256]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d107      	bne.n	8007d98 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d88:	4b3c      	ldr	r3, [pc, #240]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d121      	bne.n	8007dd8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e0f6      	b.n	8007f86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	2b03      	cmp	r3, #3
 8007d9e:	d107      	bne.n	8007db0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007da0:	4b36      	ldr	r3, [pc, #216]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d115      	bne.n	8007dd8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e0ea      	b.n	8007f86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d107      	bne.n	8007dc8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007db8:	4b30      	ldr	r3, [pc, #192]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d109      	bne.n	8007dd8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e0de      	b.n	8007f86 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007dc8:	4b2c      	ldr	r3, [pc, #176]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0304 	and.w	r3, r3, #4
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e0d6      	b.n	8007f86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007dd8:	4b28      	ldr	r3, [pc, #160]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	f023 0207 	bic.w	r2, r3, #7
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	4925      	ldr	r1, [pc, #148]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007de6:	4313      	orrs	r3, r2
 8007de8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dea:	f7fa fc3f 	bl	800266c <HAL_GetTick>
 8007dee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007df0:	e00a      	b.n	8007e08 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007df2:	f7fa fc3b 	bl	800266c <HAL_GetTick>
 8007df6:	4602      	mov	r2, r0
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d901      	bls.n	8007e08 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e0be      	b.n	8007f86 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e08:	4b1c      	ldr	r3, [pc, #112]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	00db      	lsls	r3, r3, #3
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d1eb      	bne.n	8007df2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0302 	and.w	r3, r3, #2
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d010      	beq.n	8007e48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	68da      	ldr	r2, [r3, #12]
 8007e2a:	4b14      	ldr	r3, [pc, #80]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	f003 030f 	and.w	r3, r3, #15
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d208      	bcs.n	8007e48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e36:	4b11      	ldr	r3, [pc, #68]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	f023 020f 	bic.w	r2, r3, #15
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	490e      	ldr	r1, [pc, #56]	; (8007e7c <HAL_RCC_ClockConfig+0x244>)
 8007e44:	4313      	orrs	r3, r2
 8007e46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e48:	4b0b      	ldr	r3, [pc, #44]	; (8007e78 <HAL_RCC_ClockConfig+0x240>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 030f 	and.w	r3, r3, #15
 8007e50:	683a      	ldr	r2, [r7, #0]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d214      	bcs.n	8007e80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e56:	4b08      	ldr	r3, [pc, #32]	; (8007e78 <HAL_RCC_ClockConfig+0x240>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f023 020f 	bic.w	r2, r3, #15
 8007e5e:	4906      	ldr	r1, [pc, #24]	; (8007e78 <HAL_RCC_ClockConfig+0x240>)
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e66:	4b04      	ldr	r3, [pc, #16]	; (8007e78 <HAL_RCC_ClockConfig+0x240>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 030f 	and.w	r3, r3, #15
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d005      	beq.n	8007e80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e086      	b.n	8007f86 <HAL_RCC_ClockConfig+0x34e>
 8007e78:	52002000 	.word	0x52002000
 8007e7c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 0304 	and.w	r3, r3, #4
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d010      	beq.n	8007eae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	691a      	ldr	r2, [r3, #16]
 8007e90:	4b3f      	ldr	r3, [pc, #252]	; (8007f90 <HAL_RCC_ClockConfig+0x358>)
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d208      	bcs.n	8007eae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007e9c:	4b3c      	ldr	r3, [pc, #240]	; (8007f90 <HAL_RCC_ClockConfig+0x358>)
 8007e9e:	699b      	ldr	r3, [r3, #24]
 8007ea0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	4939      	ldr	r1, [pc, #228]	; (8007f90 <HAL_RCC_ClockConfig+0x358>)
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 0308 	and.w	r3, r3, #8
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d010      	beq.n	8007edc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	695a      	ldr	r2, [r3, #20]
 8007ebe:	4b34      	ldr	r3, [pc, #208]	; (8007f90 <HAL_RCC_ClockConfig+0x358>)
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d208      	bcs.n	8007edc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007eca:	4b31      	ldr	r3, [pc, #196]	; (8007f90 <HAL_RCC_ClockConfig+0x358>)
 8007ecc:	69db      	ldr	r3, [r3, #28]
 8007ece:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	492e      	ldr	r1, [pc, #184]	; (8007f90 <HAL_RCC_ClockConfig+0x358>)
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0310 	and.w	r3, r3, #16
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d010      	beq.n	8007f0a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	699a      	ldr	r2, [r3, #24]
 8007eec:	4b28      	ldr	r3, [pc, #160]	; (8007f90 <HAL_RCC_ClockConfig+0x358>)
 8007eee:	69db      	ldr	r3, [r3, #28]
 8007ef0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d208      	bcs.n	8007f0a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ef8:	4b25      	ldr	r3, [pc, #148]	; (8007f90 <HAL_RCC_ClockConfig+0x358>)
 8007efa:	69db      	ldr	r3, [r3, #28]
 8007efc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	4922      	ldr	r1, [pc, #136]	; (8007f90 <HAL_RCC_ClockConfig+0x358>)
 8007f06:	4313      	orrs	r3, r2
 8007f08:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0320 	and.w	r3, r3, #32
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d010      	beq.n	8007f38 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	69da      	ldr	r2, [r3, #28]
 8007f1a:	4b1d      	ldr	r3, [pc, #116]	; (8007f90 <HAL_RCC_ClockConfig+0x358>)
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d208      	bcs.n	8007f38 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007f26:	4b1a      	ldr	r3, [pc, #104]	; (8007f90 <HAL_RCC_ClockConfig+0x358>)
 8007f28:	6a1b      	ldr	r3, [r3, #32]
 8007f2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	69db      	ldr	r3, [r3, #28]
 8007f32:	4917      	ldr	r1, [pc, #92]	; (8007f90 <HAL_RCC_ClockConfig+0x358>)
 8007f34:	4313      	orrs	r3, r2
 8007f36:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007f38:	f000 f834 	bl	8007fa4 <HAL_RCC_GetSysClockFreq>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	4b14      	ldr	r3, [pc, #80]	; (8007f90 <HAL_RCC_ClockConfig+0x358>)
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	0a1b      	lsrs	r3, r3, #8
 8007f44:	f003 030f 	and.w	r3, r3, #15
 8007f48:	4912      	ldr	r1, [pc, #72]	; (8007f94 <HAL_RCC_ClockConfig+0x35c>)
 8007f4a:	5ccb      	ldrb	r3, [r1, r3]
 8007f4c:	f003 031f 	and.w	r3, r3, #31
 8007f50:	fa22 f303 	lsr.w	r3, r2, r3
 8007f54:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f56:	4b0e      	ldr	r3, [pc, #56]	; (8007f90 <HAL_RCC_ClockConfig+0x358>)
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	f003 030f 	and.w	r3, r3, #15
 8007f5e:	4a0d      	ldr	r2, [pc, #52]	; (8007f94 <HAL_RCC_ClockConfig+0x35c>)
 8007f60:	5cd3      	ldrb	r3, [r2, r3]
 8007f62:	f003 031f 	and.w	r3, r3, #31
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	fa22 f303 	lsr.w	r3, r2, r3
 8007f6c:	4a0a      	ldr	r2, [pc, #40]	; (8007f98 <HAL_RCC_ClockConfig+0x360>)
 8007f6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007f70:	4a0a      	ldr	r2, [pc, #40]	; (8007f9c <HAL_RCC_ClockConfig+0x364>)
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007f76:	4b0a      	ldr	r3, [pc, #40]	; (8007fa0 <HAL_RCC_ClockConfig+0x368>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fa fb2c 	bl	80025d8 <HAL_InitTick>
 8007f80:	4603      	mov	r3, r0
 8007f82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3718      	adds	r7, #24
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	58024400 	.word	0x58024400
 8007f94:	0800dfa4 	.word	0x0800dfa4
 8007f98:	24000028 	.word	0x24000028
 8007f9c:	24000024 	.word	0x24000024
 8007fa0:	2400002c 	.word	0x2400002c

08007fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b089      	sub	sp, #36	; 0x24
 8007fa8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007faa:	4bb3      	ldr	r3, [pc, #716]	; (8008278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fb2:	2b18      	cmp	r3, #24
 8007fb4:	f200 8155 	bhi.w	8008262 <HAL_RCC_GetSysClockFreq+0x2be>
 8007fb8:	a201      	add	r2, pc, #4	; (adr r2, 8007fc0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fbe:	bf00      	nop
 8007fc0:	08008025 	.word	0x08008025
 8007fc4:	08008263 	.word	0x08008263
 8007fc8:	08008263 	.word	0x08008263
 8007fcc:	08008263 	.word	0x08008263
 8007fd0:	08008263 	.word	0x08008263
 8007fd4:	08008263 	.word	0x08008263
 8007fd8:	08008263 	.word	0x08008263
 8007fdc:	08008263 	.word	0x08008263
 8007fe0:	0800804b 	.word	0x0800804b
 8007fe4:	08008263 	.word	0x08008263
 8007fe8:	08008263 	.word	0x08008263
 8007fec:	08008263 	.word	0x08008263
 8007ff0:	08008263 	.word	0x08008263
 8007ff4:	08008263 	.word	0x08008263
 8007ff8:	08008263 	.word	0x08008263
 8007ffc:	08008263 	.word	0x08008263
 8008000:	08008051 	.word	0x08008051
 8008004:	08008263 	.word	0x08008263
 8008008:	08008263 	.word	0x08008263
 800800c:	08008263 	.word	0x08008263
 8008010:	08008263 	.word	0x08008263
 8008014:	08008263 	.word	0x08008263
 8008018:	08008263 	.word	0x08008263
 800801c:	08008263 	.word	0x08008263
 8008020:	08008057 	.word	0x08008057
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008024:	4b94      	ldr	r3, [pc, #592]	; (8008278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0320 	and.w	r3, r3, #32
 800802c:	2b00      	cmp	r3, #0
 800802e:	d009      	beq.n	8008044 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008030:	4b91      	ldr	r3, [pc, #580]	; (8008278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	08db      	lsrs	r3, r3, #3
 8008036:	f003 0303 	and.w	r3, r3, #3
 800803a:	4a90      	ldr	r2, [pc, #576]	; (800827c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800803c:	fa22 f303 	lsr.w	r3, r2, r3
 8008040:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008042:	e111      	b.n	8008268 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008044:	4b8d      	ldr	r3, [pc, #564]	; (800827c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008046:	61bb      	str	r3, [r7, #24]
    break;
 8008048:	e10e      	b.n	8008268 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800804a:	4b8d      	ldr	r3, [pc, #564]	; (8008280 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800804c:	61bb      	str	r3, [r7, #24]
    break;
 800804e:	e10b      	b.n	8008268 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008050:	4b8c      	ldr	r3, [pc, #560]	; (8008284 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008052:	61bb      	str	r3, [r7, #24]
    break;
 8008054:	e108      	b.n	8008268 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008056:	4b88      	ldr	r3, [pc, #544]	; (8008278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800805a:	f003 0303 	and.w	r3, r3, #3
 800805e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008060:	4b85      	ldr	r3, [pc, #532]	; (8008278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008064:	091b      	lsrs	r3, r3, #4
 8008066:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800806a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800806c:	4b82      	ldr	r3, [pc, #520]	; (8008278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800806e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008076:	4b80      	ldr	r3, [pc, #512]	; (8008278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800807a:	08db      	lsrs	r3, r3, #3
 800807c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	fb02 f303 	mul.w	r3, r2, r3
 8008086:	ee07 3a90 	vmov	s15, r3
 800808a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800808e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	f000 80e1 	beq.w	800825c <HAL_RCC_GetSysClockFreq+0x2b8>
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	2b02      	cmp	r3, #2
 800809e:	f000 8083 	beq.w	80081a8 <HAL_RCC_GetSysClockFreq+0x204>
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	f200 80a1 	bhi.w	80081ec <HAL_RCC_GetSysClockFreq+0x248>
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d003      	beq.n	80080b8 <HAL_RCC_GetSysClockFreq+0x114>
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d056      	beq.n	8008164 <HAL_RCC_GetSysClockFreq+0x1c0>
 80080b6:	e099      	b.n	80081ec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080b8:	4b6f      	ldr	r3, [pc, #444]	; (8008278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 0320 	and.w	r3, r3, #32
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d02d      	beq.n	8008120 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080c4:	4b6c      	ldr	r3, [pc, #432]	; (8008278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	08db      	lsrs	r3, r3, #3
 80080ca:	f003 0303 	and.w	r3, r3, #3
 80080ce:	4a6b      	ldr	r2, [pc, #428]	; (800827c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80080d0:	fa22 f303 	lsr.w	r3, r2, r3
 80080d4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	ee07 3a90 	vmov	s15, r3
 80080dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	ee07 3a90 	vmov	s15, r3
 80080e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ee:	4b62      	ldr	r3, [pc, #392]	; (8008278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f6:	ee07 3a90 	vmov	s15, r3
 80080fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008102:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008288 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800810a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800810e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800811a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800811e:	e087      	b.n	8008230 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	ee07 3a90 	vmov	s15, r3
 8008126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800812a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800828c <HAL_RCC_GetSysClockFreq+0x2e8>
 800812e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008132:	4b51      	ldr	r3, [pc, #324]	; (8008278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800813a:	ee07 3a90 	vmov	s15, r3
 800813e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008142:	ed97 6a02 	vldr	s12, [r7, #8]
 8008146:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008288 <HAL_RCC_GetSysClockFreq+0x2e4>
 800814a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800814e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800815a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800815e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008162:	e065      	b.n	8008230 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	ee07 3a90 	vmov	s15, r3
 800816a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800816e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008290 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008176:	4b40      	ldr	r3, [pc, #256]	; (8008278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800817a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800817e:	ee07 3a90 	vmov	s15, r3
 8008182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008186:	ed97 6a02 	vldr	s12, [r7, #8]
 800818a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008288 <HAL_RCC_GetSysClockFreq+0x2e4>
 800818e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800819a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800819e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081a6:	e043      	b.n	8008230 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	ee07 3a90 	vmov	s15, r3
 80081ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008294 <HAL_RCC_GetSysClockFreq+0x2f0>
 80081b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ba:	4b2f      	ldr	r3, [pc, #188]	; (8008278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081c2:	ee07 3a90 	vmov	s15, r3
 80081c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80081ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008288 <HAL_RCC_GetSysClockFreq+0x2e4>
 80081d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081ea:	e021      	b.n	8008230 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	ee07 3a90 	vmov	s15, r3
 80081f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008290 <HAL_RCC_GetSysClockFreq+0x2ec>
 80081fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081fe:	4b1e      	ldr	r3, [pc, #120]	; (8008278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008206:	ee07 3a90 	vmov	s15, r3
 800820a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800820e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008212:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008288 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800821a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800821e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800822a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800822e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008230:	4b11      	ldr	r3, [pc, #68]	; (8008278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008234:	0a5b      	lsrs	r3, r3, #9
 8008236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800823a:	3301      	adds	r3, #1
 800823c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	ee07 3a90 	vmov	s15, r3
 8008244:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008248:	edd7 6a07 	vldr	s13, [r7, #28]
 800824c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008254:	ee17 3a90 	vmov	r3, s15
 8008258:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800825a:	e005      	b.n	8008268 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800825c:	2300      	movs	r3, #0
 800825e:	61bb      	str	r3, [r7, #24]
    break;
 8008260:	e002      	b.n	8008268 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008262:	4b07      	ldr	r3, [pc, #28]	; (8008280 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008264:	61bb      	str	r3, [r7, #24]
    break;
 8008266:	bf00      	nop
  }

  return sysclockfreq;
 8008268:	69bb      	ldr	r3, [r7, #24]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3724      	adds	r7, #36	; 0x24
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	58024400 	.word	0x58024400
 800827c:	03d09000 	.word	0x03d09000
 8008280:	003d0900 	.word	0x003d0900
 8008284:	017d7840 	.word	0x017d7840
 8008288:	46000000 	.word	0x46000000
 800828c:	4c742400 	.word	0x4c742400
 8008290:	4a742400 	.word	0x4a742400
 8008294:	4bbebc20 	.word	0x4bbebc20

08008298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800829e:	f7ff fe81 	bl	8007fa4 <HAL_RCC_GetSysClockFreq>
 80082a2:	4602      	mov	r2, r0
 80082a4:	4b10      	ldr	r3, [pc, #64]	; (80082e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	0a1b      	lsrs	r3, r3, #8
 80082aa:	f003 030f 	and.w	r3, r3, #15
 80082ae:	490f      	ldr	r1, [pc, #60]	; (80082ec <HAL_RCC_GetHCLKFreq+0x54>)
 80082b0:	5ccb      	ldrb	r3, [r1, r3]
 80082b2:	f003 031f 	and.w	r3, r3, #31
 80082b6:	fa22 f303 	lsr.w	r3, r2, r3
 80082ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80082bc:	4b0a      	ldr	r3, [pc, #40]	; (80082e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	f003 030f 	and.w	r3, r3, #15
 80082c4:	4a09      	ldr	r2, [pc, #36]	; (80082ec <HAL_RCC_GetHCLKFreq+0x54>)
 80082c6:	5cd3      	ldrb	r3, [r2, r3]
 80082c8:	f003 031f 	and.w	r3, r3, #31
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	fa22 f303 	lsr.w	r3, r2, r3
 80082d2:	4a07      	ldr	r2, [pc, #28]	; (80082f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80082d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80082d6:	4a07      	ldr	r2, [pc, #28]	; (80082f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80082dc:	4b04      	ldr	r3, [pc, #16]	; (80082f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80082de:	681b      	ldr	r3, [r3, #0]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	58024400 	.word	0x58024400
 80082ec:	0800dfa4 	.word	0x0800dfa4
 80082f0:	24000028 	.word	0x24000028
 80082f4:	24000024 	.word	0x24000024

080082f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80082fc:	f7ff ffcc 	bl	8008298 <HAL_RCC_GetHCLKFreq>
 8008300:	4602      	mov	r2, r0
 8008302:	4b06      	ldr	r3, [pc, #24]	; (800831c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	091b      	lsrs	r3, r3, #4
 8008308:	f003 0307 	and.w	r3, r3, #7
 800830c:	4904      	ldr	r1, [pc, #16]	; (8008320 <HAL_RCC_GetPCLK1Freq+0x28>)
 800830e:	5ccb      	ldrb	r3, [r1, r3]
 8008310:	f003 031f 	and.w	r3, r3, #31
 8008314:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008318:	4618      	mov	r0, r3
 800831a:	bd80      	pop	{r7, pc}
 800831c:	58024400 	.word	0x58024400
 8008320:	0800dfa4 	.word	0x0800dfa4

08008324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008328:	f7ff ffb6 	bl	8008298 <HAL_RCC_GetHCLKFreq>
 800832c:	4602      	mov	r2, r0
 800832e:	4b06      	ldr	r3, [pc, #24]	; (8008348 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008330:	69db      	ldr	r3, [r3, #28]
 8008332:	0a1b      	lsrs	r3, r3, #8
 8008334:	f003 0307 	and.w	r3, r3, #7
 8008338:	4904      	ldr	r1, [pc, #16]	; (800834c <HAL_RCC_GetPCLK2Freq+0x28>)
 800833a:	5ccb      	ldrb	r3, [r1, r3]
 800833c:	f003 031f 	and.w	r3, r3, #31
 8008340:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008344:	4618      	mov	r0, r3
 8008346:	bd80      	pop	{r7, pc}
 8008348:	58024400 	.word	0x58024400
 800834c:	0800dfa4 	.word	0x0800dfa4

08008350 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008358:	2300      	movs	r3, #0
 800835a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800835c:	2300      	movs	r3, #0
 800835e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008368:	2b00      	cmp	r3, #0
 800836a:	d03f      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008370:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008374:	d02a      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008376:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800837a:	d824      	bhi.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800837c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008380:	d018      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008382:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008386:	d81e      	bhi.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008388:	2b00      	cmp	r3, #0
 800838a:	d003      	beq.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800838c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008390:	d007      	beq.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008392:	e018      	b.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008394:	4ba3      	ldr	r3, [pc, #652]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008398:	4aa2      	ldr	r2, [pc, #648]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800839a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800839e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80083a0:	e015      	b.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	3304      	adds	r3, #4
 80083a6:	2102      	movs	r1, #2
 80083a8:	4618      	mov	r0, r3
 80083aa:	f001 fff9 	bl	800a3a0 <RCCEx_PLL2_Config>
 80083ae:	4603      	mov	r3, r0
 80083b0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80083b2:	e00c      	b.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	3324      	adds	r3, #36	; 0x24
 80083b8:	2102      	movs	r1, #2
 80083ba:	4618      	mov	r0, r3
 80083bc:	f002 f8a2 	bl	800a504 <RCCEx_PLL3_Config>
 80083c0:	4603      	mov	r3, r0
 80083c2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80083c4:	e003      	b.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	75fb      	strb	r3, [r7, #23]
      break;
 80083ca:	e000      	b.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80083cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083ce:	7dfb      	ldrb	r3, [r7, #23]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d109      	bne.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80083d4:	4b93      	ldr	r3, [pc, #588]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80083d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083e0:	4990      	ldr	r1, [pc, #576]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	650b      	str	r3, [r1, #80]	; 0x50
 80083e6:	e001      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083e8:	7dfb      	ldrb	r3, [r7, #23]
 80083ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d03d      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083fc:	2b04      	cmp	r3, #4
 80083fe:	d826      	bhi.n	800844e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008400:	a201      	add	r2, pc, #4	; (adr r2, 8008408 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008406:	bf00      	nop
 8008408:	0800841d 	.word	0x0800841d
 800840c:	0800842b 	.word	0x0800842b
 8008410:	0800843d 	.word	0x0800843d
 8008414:	08008455 	.word	0x08008455
 8008418:	08008455 	.word	0x08008455
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800841c:	4b81      	ldr	r3, [pc, #516]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800841e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008420:	4a80      	ldr	r2, [pc, #512]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008426:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008428:	e015      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	3304      	adds	r3, #4
 800842e:	2100      	movs	r1, #0
 8008430:	4618      	mov	r0, r3
 8008432:	f001 ffb5 	bl	800a3a0 <RCCEx_PLL2_Config>
 8008436:	4603      	mov	r3, r0
 8008438:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800843a:	e00c      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	3324      	adds	r3, #36	; 0x24
 8008440:	2100      	movs	r1, #0
 8008442:	4618      	mov	r0, r3
 8008444:	f002 f85e 	bl	800a504 <RCCEx_PLL3_Config>
 8008448:	4603      	mov	r3, r0
 800844a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800844c:	e003      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	75fb      	strb	r3, [r7, #23]
      break;
 8008452:	e000      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008456:	7dfb      	ldrb	r3, [r7, #23]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d109      	bne.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800845c:	4b71      	ldr	r3, [pc, #452]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800845e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008460:	f023 0207 	bic.w	r2, r3, #7
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008468:	496e      	ldr	r1, [pc, #440]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800846a:	4313      	orrs	r3, r2
 800846c:	650b      	str	r3, [r1, #80]	; 0x50
 800846e:	e001      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008470:	7dfb      	ldrb	r3, [r7, #23]
 8008472:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800847c:	2b00      	cmp	r3, #0
 800847e:	d042      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008488:	d02b      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800848a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800848e:	d825      	bhi.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008490:	2bc0      	cmp	r3, #192	; 0xc0
 8008492:	d028      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008494:	2bc0      	cmp	r3, #192	; 0xc0
 8008496:	d821      	bhi.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008498:	2b80      	cmp	r3, #128	; 0x80
 800849a:	d016      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800849c:	2b80      	cmp	r3, #128	; 0x80
 800849e:	d81d      	bhi.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d002      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80084a4:	2b40      	cmp	r3, #64	; 0x40
 80084a6:	d007      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80084a8:	e018      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084aa:	4b5e      	ldr	r3, [pc, #376]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80084ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ae:	4a5d      	ldr	r2, [pc, #372]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80084b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80084b6:	e017      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	3304      	adds	r3, #4
 80084bc:	2100      	movs	r1, #0
 80084be:	4618      	mov	r0, r3
 80084c0:	f001 ff6e 	bl	800a3a0 <RCCEx_PLL2_Config>
 80084c4:	4603      	mov	r3, r0
 80084c6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80084c8:	e00e      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	3324      	adds	r3, #36	; 0x24
 80084ce:	2100      	movs	r1, #0
 80084d0:	4618      	mov	r0, r3
 80084d2:	f002 f817 	bl	800a504 <RCCEx_PLL3_Config>
 80084d6:	4603      	mov	r3, r0
 80084d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80084da:	e005      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	75fb      	strb	r3, [r7, #23]
      break;
 80084e0:	e002      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80084e2:	bf00      	nop
 80084e4:	e000      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80084e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084e8:	7dfb      	ldrb	r3, [r7, #23]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d109      	bne.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80084ee:	4b4d      	ldr	r3, [pc, #308]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80084f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084fa:	494a      	ldr	r1, [pc, #296]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80084fc:	4313      	orrs	r3, r2
 80084fe:	650b      	str	r3, [r1, #80]	; 0x50
 8008500:	e001      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008502:	7dfb      	ldrb	r3, [r7, #23]
 8008504:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800850e:	2b00      	cmp	r3, #0
 8008510:	d049      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008518:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800851c:	d030      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800851e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008522:	d82a      	bhi.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008524:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008528:	d02c      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800852a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800852e:	d824      	bhi.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008530:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008534:	d018      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008536:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800853a:	d81e      	bhi.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800853c:	2b00      	cmp	r3, #0
 800853e:	d003      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008540:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008544:	d007      	beq.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008546:	e018      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008548:	4b36      	ldr	r3, [pc, #216]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800854a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854c:	4a35      	ldr	r2, [pc, #212]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800854e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008552:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008554:	e017      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	3304      	adds	r3, #4
 800855a:	2100      	movs	r1, #0
 800855c:	4618      	mov	r0, r3
 800855e:	f001 ff1f 	bl	800a3a0 <RCCEx_PLL2_Config>
 8008562:	4603      	mov	r3, r0
 8008564:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008566:	e00e      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	3324      	adds	r3, #36	; 0x24
 800856c:	2100      	movs	r1, #0
 800856e:	4618      	mov	r0, r3
 8008570:	f001 ffc8 	bl	800a504 <RCCEx_PLL3_Config>
 8008574:	4603      	mov	r3, r0
 8008576:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008578:	e005      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	75fb      	strb	r3, [r7, #23]
      break;
 800857e:	e002      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008580:	bf00      	nop
 8008582:	e000      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008584:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008586:	7dfb      	ldrb	r3, [r7, #23]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10a      	bne.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800858c:	4b25      	ldr	r3, [pc, #148]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800858e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008590:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800859a:	4922      	ldr	r1, [pc, #136]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800859c:	4313      	orrs	r3, r2
 800859e:	658b      	str	r3, [r1, #88]	; 0x58
 80085a0:	e001      	b.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085a2:	7dfb      	ldrb	r3, [r7, #23]
 80085a4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d04b      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80085b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085bc:	d030      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80085be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085c2:	d82a      	bhi.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80085c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80085c8:	d02e      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80085ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80085ce:	d824      	bhi.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80085d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085d4:	d018      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80085d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085da:	d81e      	bhi.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d003      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80085e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80085e4:	d007      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80085e6:	e018      	b.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085e8:	4b0e      	ldr	r3, [pc, #56]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80085ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ec:	4a0d      	ldr	r2, [pc, #52]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80085ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80085f4:	e019      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	3304      	adds	r3, #4
 80085fa:	2100      	movs	r1, #0
 80085fc:	4618      	mov	r0, r3
 80085fe:	f001 fecf 	bl	800a3a0 <RCCEx_PLL2_Config>
 8008602:	4603      	mov	r3, r0
 8008604:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008606:	e010      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	3324      	adds	r3, #36	; 0x24
 800860c:	2100      	movs	r1, #0
 800860e:	4618      	mov	r0, r3
 8008610:	f001 ff78 	bl	800a504 <RCCEx_PLL3_Config>
 8008614:	4603      	mov	r3, r0
 8008616:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008618:	e007      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	75fb      	strb	r3, [r7, #23]
      break;
 800861e:	e004      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8008620:	bf00      	nop
 8008622:	e002      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008624:	58024400 	.word	0x58024400
      break;
 8008628:	bf00      	nop
    }

    if(ret == HAL_OK)
 800862a:	7dfb      	ldrb	r3, [r7, #23]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d10a      	bne.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008630:	4b99      	ldr	r3, [pc, #612]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008634:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800863e:	4996      	ldr	r1, [pc, #600]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008640:	4313      	orrs	r3, r2
 8008642:	658b      	str	r3, [r1, #88]	; 0x58
 8008644:	e001      	b.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008646:	7dfb      	ldrb	r3, [r7, #23]
 8008648:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008652:	2b00      	cmp	r3, #0
 8008654:	d032      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800865a:	2b30      	cmp	r3, #48	; 0x30
 800865c:	d01c      	beq.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800865e:	2b30      	cmp	r3, #48	; 0x30
 8008660:	d817      	bhi.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008662:	2b20      	cmp	r3, #32
 8008664:	d00c      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8008666:	2b20      	cmp	r3, #32
 8008668:	d813      	bhi.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800866a:	2b00      	cmp	r3, #0
 800866c:	d016      	beq.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800866e:	2b10      	cmp	r3, #16
 8008670:	d10f      	bne.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008672:	4b89      	ldr	r3, [pc, #548]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008676:	4a88      	ldr	r2, [pc, #544]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800867c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800867e:	e00e      	b.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	3304      	adds	r3, #4
 8008684:	2102      	movs	r1, #2
 8008686:	4618      	mov	r0, r3
 8008688:	f001 fe8a 	bl	800a3a0 <RCCEx_PLL2_Config>
 800868c:	4603      	mov	r3, r0
 800868e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008690:	e005      	b.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	75fb      	strb	r3, [r7, #23]
      break;
 8008696:	e002      	b.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008698:	bf00      	nop
 800869a:	e000      	b.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800869c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800869e:	7dfb      	ldrb	r3, [r7, #23]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d109      	bne.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80086a4:	4b7c      	ldr	r3, [pc, #496]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80086a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086b0:	4979      	ldr	r1, [pc, #484]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80086b2:	4313      	orrs	r3, r2
 80086b4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80086b6:	e001      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086b8:	7dfb      	ldrb	r3, [r7, #23]
 80086ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d047      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086d0:	d030      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80086d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086d6:	d82a      	bhi.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80086d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80086dc:	d02c      	beq.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80086de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80086e2:	d824      	bhi.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80086e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086e8:	d018      	beq.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80086ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086ee:	d81e      	bhi.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d003      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80086f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086f8:	d007      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80086fa:	e018      	b.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086fc:	4b66      	ldr	r3, [pc, #408]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80086fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008700:	4a65      	ldr	r2, [pc, #404]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008706:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008708:	e017      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	3304      	adds	r3, #4
 800870e:	2100      	movs	r1, #0
 8008710:	4618      	mov	r0, r3
 8008712:	f001 fe45 	bl	800a3a0 <RCCEx_PLL2_Config>
 8008716:	4603      	mov	r3, r0
 8008718:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800871a:	e00e      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	3324      	adds	r3, #36	; 0x24
 8008720:	2100      	movs	r1, #0
 8008722:	4618      	mov	r0, r3
 8008724:	f001 feee 	bl	800a504 <RCCEx_PLL3_Config>
 8008728:	4603      	mov	r3, r0
 800872a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800872c:	e005      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	75fb      	strb	r3, [r7, #23]
      break;
 8008732:	e002      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008734:	bf00      	nop
 8008736:	e000      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008738:	bf00      	nop
    }

    if(ret == HAL_OK)
 800873a:	7dfb      	ldrb	r3, [r7, #23]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d109      	bne.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008740:	4b55      	ldr	r3, [pc, #340]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008744:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800874c:	4952      	ldr	r1, [pc, #328]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800874e:	4313      	orrs	r3, r2
 8008750:	650b      	str	r3, [r1, #80]	; 0x50
 8008752:	e001      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008754:	7dfb      	ldrb	r3, [r7, #23]
 8008756:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008760:	2b00      	cmp	r3, #0
 8008762:	d049      	beq.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800876c:	d02e      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800876e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008772:	d828      	bhi.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008774:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008778:	d02a      	beq.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800877a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800877e:	d822      	bhi.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008780:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008784:	d026      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8008786:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800878a:	d81c      	bhi.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800878c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008790:	d010      	beq.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008792:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008796:	d816      	bhi.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008798:	2b00      	cmp	r3, #0
 800879a:	d01d      	beq.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800879c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087a0:	d111      	bne.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	3304      	adds	r3, #4
 80087a6:	2101      	movs	r1, #1
 80087a8:	4618      	mov	r0, r3
 80087aa:	f001 fdf9 	bl	800a3a0 <RCCEx_PLL2_Config>
 80087ae:	4603      	mov	r3, r0
 80087b0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80087b2:	e012      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	3324      	adds	r3, #36	; 0x24
 80087b8:	2101      	movs	r1, #1
 80087ba:	4618      	mov	r0, r3
 80087bc:	f001 fea2 	bl	800a504 <RCCEx_PLL3_Config>
 80087c0:	4603      	mov	r3, r0
 80087c2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80087c4:	e009      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	75fb      	strb	r3, [r7, #23]
      break;
 80087ca:	e006      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80087cc:	bf00      	nop
 80087ce:	e004      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80087d0:	bf00      	nop
 80087d2:	e002      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80087d4:	bf00      	nop
 80087d6:	e000      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80087d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087da:	7dfb      	ldrb	r3, [r7, #23]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d109      	bne.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80087e0:	4b2d      	ldr	r3, [pc, #180]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80087e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087e4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087ec:	492a      	ldr	r1, [pc, #168]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80087ee:	4313      	orrs	r3, r2
 80087f0:	650b      	str	r3, [r1, #80]	; 0x50
 80087f2:	e001      	b.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087f4:	7dfb      	ldrb	r3, [r7, #23]
 80087f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008800:	2b00      	cmp	r3, #0
 8008802:	d04d      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800880a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800880e:	d02e      	beq.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008810:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008814:	d828      	bhi.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800881a:	d02a      	beq.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800881c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008820:	d822      	bhi.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008822:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008826:	d026      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008828:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800882c:	d81c      	bhi.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800882e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008832:	d010      	beq.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008838:	d816      	bhi.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800883a:	2b00      	cmp	r3, #0
 800883c:	d01d      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800883e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008842:	d111      	bne.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	3304      	adds	r3, #4
 8008848:	2101      	movs	r1, #1
 800884a:	4618      	mov	r0, r3
 800884c:	f001 fda8 	bl	800a3a0 <RCCEx_PLL2_Config>
 8008850:	4603      	mov	r3, r0
 8008852:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008854:	e012      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	3324      	adds	r3, #36	; 0x24
 800885a:	2101      	movs	r1, #1
 800885c:	4618      	mov	r0, r3
 800885e:	f001 fe51 	bl	800a504 <RCCEx_PLL3_Config>
 8008862:	4603      	mov	r3, r0
 8008864:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008866:	e009      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	75fb      	strb	r3, [r7, #23]
      break;
 800886c:	e006      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800886e:	bf00      	nop
 8008870:	e004      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008872:	bf00      	nop
 8008874:	e002      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008876:	bf00      	nop
 8008878:	e000      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800887a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800887c:	7dfb      	ldrb	r3, [r7, #23]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10c      	bne.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008882:	4b05      	ldr	r3, [pc, #20]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008886:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008890:	4901      	ldr	r1, [pc, #4]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008892:	4313      	orrs	r3, r2
 8008894:	658b      	str	r3, [r1, #88]	; 0x58
 8008896:	e003      	b.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008898:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800889c:	7dfb      	ldrb	r3, [r7, #23]
 800889e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d02f      	beq.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088b4:	d00e      	beq.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80088b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088ba:	d814      	bhi.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d015      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80088c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088c4:	d10f      	bne.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088c6:	4baf      	ldr	r3, [pc, #700]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80088c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ca:	4aae      	ldr	r2, [pc, #696]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80088cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80088d2:	e00c      	b.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	3304      	adds	r3, #4
 80088d8:	2101      	movs	r1, #1
 80088da:	4618      	mov	r0, r3
 80088dc:	f001 fd60 	bl	800a3a0 <RCCEx_PLL2_Config>
 80088e0:	4603      	mov	r3, r0
 80088e2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80088e4:	e003      	b.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	75fb      	strb	r3, [r7, #23]
      break;
 80088ea:	e000      	b.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80088ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088ee:	7dfb      	ldrb	r3, [r7, #23]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d109      	bne.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80088f4:	4ba3      	ldr	r3, [pc, #652]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80088f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008900:	49a0      	ldr	r1, [pc, #640]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008902:	4313      	orrs	r3, r2
 8008904:	650b      	str	r3, [r1, #80]	; 0x50
 8008906:	e001      	b.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008908:	7dfb      	ldrb	r3, [r7, #23]
 800890a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008914:	2b00      	cmp	r3, #0
 8008916:	d032      	beq.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800891c:	2b03      	cmp	r3, #3
 800891e:	d81b      	bhi.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008920:	a201      	add	r2, pc, #4	; (adr r2, 8008928 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008926:	bf00      	nop
 8008928:	0800895f 	.word	0x0800895f
 800892c:	08008939 	.word	0x08008939
 8008930:	08008947 	.word	0x08008947
 8008934:	0800895f 	.word	0x0800895f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008938:	4b92      	ldr	r3, [pc, #584]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800893a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893c:	4a91      	ldr	r2, [pc, #580]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800893e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008942:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008944:	e00c      	b.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	3304      	adds	r3, #4
 800894a:	2102      	movs	r1, #2
 800894c:	4618      	mov	r0, r3
 800894e:	f001 fd27 	bl	800a3a0 <RCCEx_PLL2_Config>
 8008952:	4603      	mov	r3, r0
 8008954:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008956:	e003      	b.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	75fb      	strb	r3, [r7, #23]
      break;
 800895c:	e000      	b.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800895e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008960:	7dfb      	ldrb	r3, [r7, #23]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d109      	bne.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008966:	4b87      	ldr	r3, [pc, #540]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800896a:	f023 0203 	bic.w	r2, r3, #3
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008972:	4984      	ldr	r1, [pc, #528]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008974:	4313      	orrs	r3, r2
 8008976:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008978:	e001      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800897a:	7dfb      	ldrb	r3, [r7, #23]
 800897c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008986:	2b00      	cmp	r3, #0
 8008988:	f000 8086 	beq.w	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800898c:	4b7e      	ldr	r3, [pc, #504]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a7d      	ldr	r2, [pc, #500]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008996:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008998:	f7f9 fe68 	bl	800266c <HAL_GetTick>
 800899c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800899e:	e009      	b.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089a0:	f7f9 fe64 	bl	800266c <HAL_GetTick>
 80089a4:	4602      	mov	r2, r0
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	2b64      	cmp	r3, #100	; 0x64
 80089ac:	d902      	bls.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80089ae:	2303      	movs	r3, #3
 80089b0:	75fb      	strb	r3, [r7, #23]
        break;
 80089b2:	e005      	b.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80089b4:	4b74      	ldr	r3, [pc, #464]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d0ef      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80089c0:	7dfb      	ldrb	r3, [r7, #23]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d166      	bne.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80089c6:	4b6f      	ldr	r3, [pc, #444]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80089c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80089d0:	4053      	eors	r3, r2
 80089d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d013      	beq.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80089da:	4b6a      	ldr	r3, [pc, #424]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80089dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089e2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80089e4:	4b67      	ldr	r3, [pc, #412]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80089e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e8:	4a66      	ldr	r2, [pc, #408]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80089ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089ee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80089f0:	4b64      	ldr	r3, [pc, #400]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80089f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f4:	4a63      	ldr	r2, [pc, #396]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80089f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089fa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80089fc:	4a61      	ldr	r2, [pc, #388]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a0c:	d115      	bne.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a0e:	f7f9 fe2d 	bl	800266c <HAL_GetTick>
 8008a12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a14:	e00b      	b.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a16:	f7f9 fe29 	bl	800266c <HAL_GetTick>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d902      	bls.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	75fb      	strb	r3, [r7, #23]
            break;
 8008a2c:	e005      	b.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a2e:	4b55      	ldr	r3, [pc, #340]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a32:	f003 0302 	and.w	r3, r3, #2
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d0ed      	beq.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008a3a:	7dfb      	ldrb	r3, [r7, #23]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d126      	bne.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a4e:	d10d      	bne.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008a50:	4b4c      	ldr	r3, [pc, #304]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a5e:	0919      	lsrs	r1, r3, #4
 8008a60:	4b4a      	ldr	r3, [pc, #296]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8008a62:	400b      	ands	r3, r1
 8008a64:	4947      	ldr	r1, [pc, #284]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	610b      	str	r3, [r1, #16]
 8008a6a:	e005      	b.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008a6c:	4b45      	ldr	r3, [pc, #276]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	4a44      	ldr	r2, [pc, #272]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008a72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008a76:	6113      	str	r3, [r2, #16]
 8008a78:	4b42      	ldr	r3, [pc, #264]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008a7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a86:	493f      	ldr	r1, [pc, #252]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	670b      	str	r3, [r1, #112]	; 0x70
 8008a8c:	e004      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a8e:	7dfb      	ldrb	r3, [r7, #23]
 8008a90:	75bb      	strb	r3, [r7, #22]
 8008a92:	e001      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a94:	7dfb      	ldrb	r3, [r7, #23]
 8008a96:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 0301 	and.w	r3, r3, #1
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 8085 	beq.w	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008aaa:	2b28      	cmp	r3, #40	; 0x28
 8008aac:	d866      	bhi.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008aae:	a201      	add	r2, pc, #4	; (adr r2, 8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab4:	08008b91 	.word	0x08008b91
 8008ab8:	08008b7d 	.word	0x08008b7d
 8008abc:	08008b7d 	.word	0x08008b7d
 8008ac0:	08008b7d 	.word	0x08008b7d
 8008ac4:	08008b7d 	.word	0x08008b7d
 8008ac8:	08008b7d 	.word	0x08008b7d
 8008acc:	08008b7d 	.word	0x08008b7d
 8008ad0:	08008b7d 	.word	0x08008b7d
 8008ad4:	08008b59 	.word	0x08008b59
 8008ad8:	08008b7d 	.word	0x08008b7d
 8008adc:	08008b7d 	.word	0x08008b7d
 8008ae0:	08008b7d 	.word	0x08008b7d
 8008ae4:	08008b7d 	.word	0x08008b7d
 8008ae8:	08008b7d 	.word	0x08008b7d
 8008aec:	08008b7d 	.word	0x08008b7d
 8008af0:	08008b7d 	.word	0x08008b7d
 8008af4:	08008b6b 	.word	0x08008b6b
 8008af8:	08008b7d 	.word	0x08008b7d
 8008afc:	08008b7d 	.word	0x08008b7d
 8008b00:	08008b7d 	.word	0x08008b7d
 8008b04:	08008b7d 	.word	0x08008b7d
 8008b08:	08008b7d 	.word	0x08008b7d
 8008b0c:	08008b7d 	.word	0x08008b7d
 8008b10:	08008b7d 	.word	0x08008b7d
 8008b14:	08008b91 	.word	0x08008b91
 8008b18:	08008b7d 	.word	0x08008b7d
 8008b1c:	08008b7d 	.word	0x08008b7d
 8008b20:	08008b7d 	.word	0x08008b7d
 8008b24:	08008b7d 	.word	0x08008b7d
 8008b28:	08008b7d 	.word	0x08008b7d
 8008b2c:	08008b7d 	.word	0x08008b7d
 8008b30:	08008b7d 	.word	0x08008b7d
 8008b34:	08008b91 	.word	0x08008b91
 8008b38:	08008b7d 	.word	0x08008b7d
 8008b3c:	08008b7d 	.word	0x08008b7d
 8008b40:	08008b7d 	.word	0x08008b7d
 8008b44:	08008b7d 	.word	0x08008b7d
 8008b48:	08008b7d 	.word	0x08008b7d
 8008b4c:	08008b7d 	.word	0x08008b7d
 8008b50:	08008b7d 	.word	0x08008b7d
 8008b54:	08008b91 	.word	0x08008b91
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	2101      	movs	r1, #1
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f001 fc1e 	bl	800a3a0 <RCCEx_PLL2_Config>
 8008b64:	4603      	mov	r3, r0
 8008b66:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008b68:	e013      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	3324      	adds	r3, #36	; 0x24
 8008b6e:	2101      	movs	r1, #1
 8008b70:	4618      	mov	r0, r3
 8008b72:	f001 fcc7 	bl	800a504 <RCCEx_PLL3_Config>
 8008b76:	4603      	mov	r3, r0
 8008b78:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008b7a:	e00a      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8008b80:	e007      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8008b82:	bf00      	nop
 8008b84:	58024400 	.word	0x58024400
 8008b88:	58024800 	.word	0x58024800
 8008b8c:	00ffffcf 	.word	0x00ffffcf
      break;
 8008b90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b92:	7dfb      	ldrb	r3, [r7, #23]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d109      	bne.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008b98:	4b96      	ldr	r3, [pc, #600]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b9c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ba4:	4993      	ldr	r1, [pc, #588]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	654b      	str	r3, [r1, #84]	; 0x54
 8008baa:	e001      	b.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
 8008bae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 0302 	and.w	r3, r3, #2
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d038      	beq.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bc0:	2b05      	cmp	r3, #5
 8008bc2:	d821      	bhi.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008bc4:	a201      	add	r2, pc, #4	; (adr r2, 8008bcc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8008bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bca:	bf00      	nop
 8008bcc:	08008c0f 	.word	0x08008c0f
 8008bd0:	08008be5 	.word	0x08008be5
 8008bd4:	08008bf7 	.word	0x08008bf7
 8008bd8:	08008c0f 	.word	0x08008c0f
 8008bdc:	08008c0f 	.word	0x08008c0f
 8008be0:	08008c0f 	.word	0x08008c0f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	3304      	adds	r3, #4
 8008be8:	2101      	movs	r1, #1
 8008bea:	4618      	mov	r0, r3
 8008bec:	f001 fbd8 	bl	800a3a0 <RCCEx_PLL2_Config>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008bf4:	e00c      	b.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	3324      	adds	r3, #36	; 0x24
 8008bfa:	2101      	movs	r1, #1
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f001 fc81 	bl	800a504 <RCCEx_PLL3_Config>
 8008c02:	4603      	mov	r3, r0
 8008c04:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008c06:	e003      	b.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8008c0c:	e000      	b.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8008c0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c10:	7dfb      	ldrb	r3, [r7, #23]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d109      	bne.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008c16:	4b77      	ldr	r3, [pc, #476]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c1a:	f023 0207 	bic.w	r2, r3, #7
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c22:	4974      	ldr	r1, [pc, #464]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008c24:	4313      	orrs	r3, r2
 8008c26:	654b      	str	r3, [r1, #84]	; 0x54
 8008c28:	e001      	b.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
 8008c2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 0304 	and.w	r3, r3, #4
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d03a      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c40:	2b05      	cmp	r3, #5
 8008c42:	d821      	bhi.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8008c44:	a201      	add	r2, pc, #4	; (adr r2, 8008c4c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8008c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4a:	bf00      	nop
 8008c4c:	08008c8f 	.word	0x08008c8f
 8008c50:	08008c65 	.word	0x08008c65
 8008c54:	08008c77 	.word	0x08008c77
 8008c58:	08008c8f 	.word	0x08008c8f
 8008c5c:	08008c8f 	.word	0x08008c8f
 8008c60:	08008c8f 	.word	0x08008c8f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	3304      	adds	r3, #4
 8008c68:	2101      	movs	r1, #1
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f001 fb98 	bl	800a3a0 <RCCEx_PLL2_Config>
 8008c70:	4603      	mov	r3, r0
 8008c72:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008c74:	e00c      	b.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	3324      	adds	r3, #36	; 0x24
 8008c7a:	2101      	movs	r1, #1
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f001 fc41 	bl	800a504 <RCCEx_PLL3_Config>
 8008c82:	4603      	mov	r3, r0
 8008c84:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008c86:	e003      	b.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8008c8c:	e000      	b.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8008c8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c90:	7dfb      	ldrb	r3, [r7, #23]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d10a      	bne.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008c96:	4b57      	ldr	r3, [pc, #348]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c9a:	f023 0207 	bic.w	r2, r3, #7
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ca4:	4953      	ldr	r1, [pc, #332]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	658b      	str	r3, [r1, #88]	; 0x58
 8008caa:	e001      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cac:	7dfb      	ldrb	r3, [r7, #23]
 8008cae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 0320 	and.w	r3, r3, #32
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d04b      	beq.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cc6:	d02e      	beq.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008cc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ccc:	d828      	bhi.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cd2:	d02a      	beq.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cd8:	d822      	bhi.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008cda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008cde:	d026      	beq.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008ce0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ce4:	d81c      	bhi.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008ce6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cea:	d010      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8008cec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cf0:	d816      	bhi.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d01d      	beq.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8008cf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cfa:	d111      	bne.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	3304      	adds	r3, #4
 8008d00:	2100      	movs	r1, #0
 8008d02:	4618      	mov	r0, r3
 8008d04:	f001 fb4c 	bl	800a3a0 <RCCEx_PLL2_Config>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008d0c:	e012      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	3324      	adds	r3, #36	; 0x24
 8008d12:	2102      	movs	r1, #2
 8008d14:	4618      	mov	r0, r3
 8008d16:	f001 fbf5 	bl	800a504 <RCCEx_PLL3_Config>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008d1e:	e009      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	75fb      	strb	r3, [r7, #23]
      break;
 8008d24:	e006      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008d26:	bf00      	nop
 8008d28:	e004      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008d2a:	bf00      	nop
 8008d2c:	e002      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008d2e:	bf00      	nop
 8008d30:	e000      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008d32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d34:	7dfb      	ldrb	r3, [r7, #23]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d10a      	bne.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008d3a:	4b2e      	ldr	r3, [pc, #184]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d3e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d48:	492a      	ldr	r1, [pc, #168]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	654b      	str	r3, [r1, #84]	; 0x54
 8008d4e:	e001      	b.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d50:	7dfb      	ldrb	r3, [r7, #23]
 8008d52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d04d      	beq.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008d66:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008d6a:	d02e      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008d6c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008d70:	d828      	bhi.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d76:	d02a      	beq.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d7c:	d822      	bhi.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008d7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d82:	d026      	beq.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008d84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d88:	d81c      	bhi.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008d8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d8e:	d010      	beq.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8008d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d94:	d816      	bhi.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d01d      	beq.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8008d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d9e:	d111      	bne.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	3304      	adds	r3, #4
 8008da4:	2100      	movs	r1, #0
 8008da6:	4618      	mov	r0, r3
 8008da8:	f001 fafa 	bl	800a3a0 <RCCEx_PLL2_Config>
 8008dac:	4603      	mov	r3, r0
 8008dae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008db0:	e012      	b.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	3324      	adds	r3, #36	; 0x24
 8008db6:	2102      	movs	r1, #2
 8008db8:	4618      	mov	r0, r3
 8008dba:	f001 fba3 	bl	800a504 <RCCEx_PLL3_Config>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008dc2:	e009      	b.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8008dc8:	e006      	b.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008dca:	bf00      	nop
 8008dcc:	e004      	b.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008dce:	bf00      	nop
 8008dd0:	e002      	b.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008dd2:	bf00      	nop
 8008dd4:	e000      	b.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008dd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dd8:	7dfb      	ldrb	r3, [r7, #23]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d10c      	bne.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008dde:	4b05      	ldr	r3, [pc, #20]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008de2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008dec:	4901      	ldr	r1, [pc, #4]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008dee:	4313      	orrs	r3, r2
 8008df0:	658b      	str	r3, [r1, #88]	; 0x58
 8008df2:	e003      	b.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008df4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008df8:	7dfb      	ldrb	r3, [r7, #23]
 8008dfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d04b      	beq.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008e0e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008e12:	d02e      	beq.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008e14:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008e18:	d828      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e1e:	d02a      	beq.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e24:	d822      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008e26:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008e2a:	d026      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8008e2c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008e30:	d81c      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008e32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e36:	d010      	beq.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8008e38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e3c:	d816      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d01d      	beq.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8008e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e46:	d111      	bne.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	3304      	adds	r3, #4
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f001 faa6 	bl	800a3a0 <RCCEx_PLL2_Config>
 8008e54:	4603      	mov	r3, r0
 8008e56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008e58:	e012      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	3324      	adds	r3, #36	; 0x24
 8008e5e:	2102      	movs	r1, #2
 8008e60:	4618      	mov	r0, r3
 8008e62:	f001 fb4f 	bl	800a504 <RCCEx_PLL3_Config>
 8008e66:	4603      	mov	r3, r0
 8008e68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008e6a:	e009      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8008e70:	e006      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008e72:	bf00      	nop
 8008e74:	e004      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008e76:	bf00      	nop
 8008e78:	e002      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008e7a:	bf00      	nop
 8008e7c:	e000      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008e7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e80:	7dfb      	ldrb	r3, [r7, #23]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d10a      	bne.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008e86:	4b9d      	ldr	r3, [pc, #628]	; (80090fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008e94:	4999      	ldr	r1, [pc, #612]	; (80090fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008e96:	4313      	orrs	r3, r2
 8008e98:	658b      	str	r3, [r1, #88]	; 0x58
 8008e9a:	e001      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e9c:	7dfb      	ldrb	r3, [r7, #23]
 8008e9e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 0308 	and.w	r3, r3, #8
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d01a      	beq.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eb6:	d10a      	bne.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	3324      	adds	r3, #36	; 0x24
 8008ebc:	2102      	movs	r1, #2
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f001 fb20 	bl	800a504 <RCCEx_PLL3_Config>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d001      	beq.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008ece:	4b8b      	ldr	r3, [pc, #556]	; (80090fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ed2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008edc:	4987      	ldr	r1, [pc, #540]	; (80090fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 0310 	and.w	r3, r3, #16
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d01a      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ef8:	d10a      	bne.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	3324      	adds	r3, #36	; 0x24
 8008efe:	2102      	movs	r1, #2
 8008f00:	4618      	mov	r0, r3
 8008f02:	f001 faff 	bl	800a504 <RCCEx_PLL3_Config>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d001      	beq.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008f10:	4b7a      	ldr	r3, [pc, #488]	; (80090fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f1e:	4977      	ldr	r1, [pc, #476]	; (80090fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008f20:	4313      	orrs	r3, r2
 8008f22:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d034      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008f36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f3a:	d01d      	beq.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8008f3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f40:	d817      	bhi.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f4a:	d009      	beq.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8008f4c:	e011      	b.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	3304      	adds	r3, #4
 8008f52:	2100      	movs	r1, #0
 8008f54:	4618      	mov	r0, r3
 8008f56:	f001 fa23 	bl	800a3a0 <RCCEx_PLL2_Config>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008f5e:	e00c      	b.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	3324      	adds	r3, #36	; 0x24
 8008f64:	2102      	movs	r1, #2
 8008f66:	4618      	mov	r0, r3
 8008f68:	f001 facc 	bl	800a504 <RCCEx_PLL3_Config>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008f70:	e003      	b.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	75fb      	strb	r3, [r7, #23]
      break;
 8008f76:	e000      	b.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8008f78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f7a:	7dfb      	ldrb	r3, [r7, #23]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10a      	bne.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008f80:	4b5e      	ldr	r3, [pc, #376]	; (80090fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008f8e:	495b      	ldr	r1, [pc, #364]	; (80090fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008f90:	4313      	orrs	r3, r2
 8008f92:	658b      	str	r3, [r1, #88]	; 0x58
 8008f94:	e001      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f96:	7dfb      	ldrb	r3, [r7, #23]
 8008f98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d033      	beq.n	800900e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008fb0:	d01c      	beq.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8008fb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008fb6:	d816      	bhi.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8008fb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fbc:	d003      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8008fbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fc2:	d007      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8008fc4:	e00f      	b.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fc6:	4b4d      	ldr	r3, [pc, #308]	; (80090fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fca:	4a4c      	ldr	r2, [pc, #304]	; (80090fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008fd2:	e00c      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	3324      	adds	r3, #36	; 0x24
 8008fd8:	2101      	movs	r1, #1
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f001 fa92 	bl	800a504 <RCCEx_PLL3_Config>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008fe4:	e003      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8008fea:	e000      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8008fec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fee:	7dfb      	ldrb	r3, [r7, #23]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d10a      	bne.n	800900a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ff4:	4b41      	ldr	r3, [pc, #260]	; (80090fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ff8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009002:	493e      	ldr	r1, [pc, #248]	; (80090fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009004:	4313      	orrs	r3, r2
 8009006:	654b      	str	r3, [r1, #84]	; 0x54
 8009008:	e001      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800900a:	7dfb      	ldrb	r3, [r7, #23]
 800900c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009016:	2b00      	cmp	r3, #0
 8009018:	d029      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800901e:	2b00      	cmp	r3, #0
 8009020:	d003      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009026:	d007      	beq.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009028:	e00f      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800902a:	4b34      	ldr	r3, [pc, #208]	; (80090fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800902c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902e:	4a33      	ldr	r2, [pc, #204]	; (80090fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009034:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009036:	e00b      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	3304      	adds	r3, #4
 800903c:	2102      	movs	r1, #2
 800903e:	4618      	mov	r0, r3
 8009040:	f001 f9ae 	bl	800a3a0 <RCCEx_PLL2_Config>
 8009044:	4603      	mov	r3, r0
 8009046:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009048:	e002      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	75fb      	strb	r3, [r7, #23]
      break;
 800904e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009050:	7dfb      	ldrb	r3, [r7, #23]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d109      	bne.n	800906a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009056:	4b29      	ldr	r3, [pc, #164]	; (80090fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800905a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009062:	4926      	ldr	r1, [pc, #152]	; (80090fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009064:	4313      	orrs	r3, r2
 8009066:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009068:	e001      	b.n	800906e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800906a:	7dfb      	ldrb	r3, [r7, #23]
 800906c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00a      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	3324      	adds	r3, #36	; 0x24
 800907e:	2102      	movs	r1, #2
 8009080:	4618      	mov	r0, r3
 8009082:	f001 fa3f 	bl	800a504 <RCCEx_PLL3_Config>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d001      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009098:	2b00      	cmp	r3, #0
 800909a:	d033      	beq.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090a4:	d017      	beq.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80090a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090aa:	d811      	bhi.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80090ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090b0:	d013      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80090b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090b6:	d80b      	bhi.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d010      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80090bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090c0:	d106      	bne.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090c2:	4b0e      	ldr	r3, [pc, #56]	; (80090fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80090c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c6:	4a0d      	ldr	r2, [pc, #52]	; (80090fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80090c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80090ce:	e007      	b.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	75fb      	strb	r3, [r7, #23]
      break;
 80090d4:	e004      	b.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80090d6:	bf00      	nop
 80090d8:	e002      	b.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80090da:	bf00      	nop
 80090dc:	e000      	b.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80090de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090e0:	7dfb      	ldrb	r3, [r7, #23]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10c      	bne.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80090e6:	4b05      	ldr	r3, [pc, #20]	; (80090fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80090e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090f2:	4902      	ldr	r1, [pc, #8]	; (80090fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80090f4:	4313      	orrs	r3, r2
 80090f6:	654b      	str	r3, [r1, #84]	; 0x54
 80090f8:	e004      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80090fa:	bf00      	nop
 80090fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009100:	7dfb      	ldrb	r3, [r7, #23]
 8009102:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800910c:	2b00      	cmp	r3, #0
 800910e:	d008      	beq.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009110:	4b31      	ldr	r3, [pc, #196]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009114:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800911c:	492e      	ldr	r1, [pc, #184]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800911e:	4313      	orrs	r3, r2
 8009120:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800912a:	2b00      	cmp	r3, #0
 800912c:	d009      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800912e:	4b2a      	ldr	r3, [pc, #168]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800913c:	4926      	ldr	r1, [pc, #152]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800913e:	4313      	orrs	r3, r2
 8009140:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800914a:	2b00      	cmp	r3, #0
 800914c:	d008      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800914e:	4b22      	ldr	r3, [pc, #136]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009152:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800915a:	491f      	ldr	r1, [pc, #124]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800915c:	4313      	orrs	r3, r2
 800915e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00d      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800916c:	4b1a      	ldr	r3, [pc, #104]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	4a19      	ldr	r2, [pc, #100]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009172:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009176:	6113      	str	r3, [r2, #16]
 8009178:	4b17      	ldr	r3, [pc, #92]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800917a:	691a      	ldr	r2, [r3, #16]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009182:	4915      	ldr	r1, [pc, #84]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009184:	4313      	orrs	r3, r2
 8009186:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	da08      	bge.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009190:	4b11      	ldr	r3, [pc, #68]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009194:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800919c:	490e      	ldr	r1, [pc, #56]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800919e:	4313      	orrs	r3, r2
 80091a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d009      	beq.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80091ae:	4b0a      	ldr	r3, [pc, #40]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80091b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091bc:	4906      	ldr	r1, [pc, #24]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80091be:	4313      	orrs	r3, r2
 80091c0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80091c2:	7dbb      	ldrb	r3, [r7, #22]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d101      	bne.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	e000      	b.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3718      	adds	r7, #24
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	58024400 	.word	0x58024400

080091dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b090      	sub	sp, #64	; 0x40
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091ea:	f040 8095 	bne.w	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80091ee:	4b97      	ldr	r3, [pc, #604]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80091f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091f2:	f003 0307 	and.w	r3, r3, #7
 80091f6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80091f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fa:	2b04      	cmp	r3, #4
 80091fc:	f200 8088 	bhi.w	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8009200:	a201      	add	r2, pc, #4	; (adr r2, 8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8009202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009206:	bf00      	nop
 8009208:	0800921d 	.word	0x0800921d
 800920c:	08009245 	.word	0x08009245
 8009210:	0800926d 	.word	0x0800926d
 8009214:	08009309 	.word	0x08009309
 8009218:	08009295 	.word	0x08009295
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800921c:	4b8b      	ldr	r3, [pc, #556]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009224:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009228:	d108      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800922a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800922e:	4618      	mov	r0, r3
 8009230:	f000 ff64 	bl	800a0fc <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009236:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009238:	f000 bc94 	b.w	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800923c:	2300      	movs	r3, #0
 800923e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009240:	f000 bc90 	b.w	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009244:	4b81      	ldr	r3, [pc, #516]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800924c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009250:	d108      	bne.n	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009252:	f107 0318 	add.w	r3, r7, #24
 8009256:	4618      	mov	r0, r3
 8009258:	f000 fca8 	bl	8009bac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009260:	f000 bc80 	b.w	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009264:	2300      	movs	r3, #0
 8009266:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009268:	f000 bc7c 	b.w	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800926c:	4b77      	ldr	r3, [pc, #476]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009278:	d108      	bne.n	800928c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800927a:	f107 030c 	add.w	r3, r7, #12
 800927e:	4618      	mov	r0, r3
 8009280:	f000 fde8 	bl	8009e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009288:	f000 bc6c 	b.w	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800928c:	2300      	movs	r3, #0
 800928e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009290:	f000 bc68 	b.w	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009294:	4b6d      	ldr	r3, [pc, #436]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009298:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800929c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800929e:	4b6b      	ldr	r3, [pc, #428]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 0304 	and.w	r3, r3, #4
 80092a6:	2b04      	cmp	r3, #4
 80092a8:	d10c      	bne.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80092aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d109      	bne.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092b0:	4b66      	ldr	r3, [pc, #408]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	08db      	lsrs	r3, r3, #3
 80092b6:	f003 0303 	and.w	r3, r3, #3
 80092ba:	4a65      	ldr	r2, [pc, #404]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80092bc:	fa22 f303 	lsr.w	r3, r2, r3
 80092c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092c2:	e01f      	b.n	8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092c4:	4b61      	ldr	r3, [pc, #388]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092d0:	d106      	bne.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80092d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092d8:	d102      	bne.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80092da:	4b5e      	ldr	r3, [pc, #376]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092de:	e011      	b.n	8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092e0:	4b5a      	ldr	r3, [pc, #360]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092ec:	d106      	bne.n	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80092ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092f4:	d102      	bne.n	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80092f6:	4b58      	ldr	r3, [pc, #352]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80092f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092fa:	e003      	b.n	8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80092fc:	2300      	movs	r3, #0
 80092fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009300:	f000 bc30 	b.w	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009304:	f000 bc2e 	b.w	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009308:	4b54      	ldr	r3, [pc, #336]	; (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800930a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800930c:	f000 bc2a 	b.w	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8009310:	2300      	movs	r3, #0
 8009312:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009314:	f000 bc26 	b.w	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800931e:	f040 809f 	bne.w	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009322:	4b4a      	ldr	r3, [pc, #296]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009326:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800932a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800932c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009332:	d04d      	beq.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8009334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800933a:	f200 8084 	bhi.w	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800933e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009340:	2bc0      	cmp	r3, #192	; 0xc0
 8009342:	d07d      	beq.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8009344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009346:	2bc0      	cmp	r3, #192	; 0xc0
 8009348:	d87d      	bhi.n	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800934a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934c:	2b80      	cmp	r3, #128	; 0x80
 800934e:	d02d      	beq.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8009350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009352:	2b80      	cmp	r3, #128	; 0x80
 8009354:	d877      	bhi.n	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009358:	2b00      	cmp	r3, #0
 800935a:	d003      	beq.n	8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800935c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935e:	2b40      	cmp	r3, #64	; 0x40
 8009360:	d012      	beq.n	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009362:	e070      	b.n	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009364:	4b39      	ldr	r3, [pc, #228]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800936c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009370:	d107      	bne.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009376:	4618      	mov	r0, r3
 8009378:	f000 fec0 	bl	800a0fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800937c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009380:	e3f0      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009382:	2300      	movs	r3, #0
 8009384:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009386:	e3ed      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009388:	4b30      	ldr	r3, [pc, #192]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009390:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009394:	d107      	bne.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009396:	f107 0318 	add.w	r3, r7, #24
 800939a:	4618      	mov	r0, r3
 800939c:	f000 fc06 	bl	8009bac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80093a4:	e3de      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80093a6:	2300      	movs	r3, #0
 80093a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093aa:	e3db      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093ac:	4b27      	ldr	r3, [pc, #156]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093b8:	d107      	bne.n	80093ca <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093ba:	f107 030c 	add.w	r3, r7, #12
 80093be:	4618      	mov	r0, r3
 80093c0:	f000 fd48 	bl	8009e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80093c8:	e3cc      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80093ca:	2300      	movs	r3, #0
 80093cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093ce:	e3c9      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80093d0:	4b1e      	ldr	r3, [pc, #120]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80093d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80093d8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80093da:	4b1c      	ldr	r3, [pc, #112]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 0304 	and.w	r3, r3, #4
 80093e2:	2b04      	cmp	r3, #4
 80093e4:	d10c      	bne.n	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80093e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d109      	bne.n	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093ec:	4b17      	ldr	r3, [pc, #92]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	08db      	lsrs	r3, r3, #3
 80093f2:	f003 0303 	and.w	r3, r3, #3
 80093f6:	4a16      	ldr	r2, [pc, #88]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80093f8:	fa22 f303 	lsr.w	r3, r2, r3
 80093fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093fe:	e01e      	b.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009400:	4b12      	ldr	r3, [pc, #72]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800940c:	d106      	bne.n	800941c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800940e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009410:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009414:	d102      	bne.n	800941c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009416:	4b0f      	ldr	r3, [pc, #60]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009418:	63fb      	str	r3, [r7, #60]	; 0x3c
 800941a:	e010      	b.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800941c:	4b0b      	ldr	r3, [pc, #44]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009424:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009428:	d106      	bne.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800942a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800942c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009430:	d102      	bne.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009432:	4b09      	ldr	r3, [pc, #36]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009434:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009436:	e002      	b.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009438:	2300      	movs	r3, #0
 800943a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800943c:	e392      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800943e:	e391      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009440:	4b06      	ldr	r3, [pc, #24]	; (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009442:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009444:	e38e      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8009446:	2300      	movs	r3, #0
 8009448:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800944a:	e38b      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800944c:	58024400 	.word	0x58024400
 8009450:	03d09000 	.word	0x03d09000
 8009454:	003d0900 	.word	0x003d0900
 8009458:	017d7840 	.word	0x017d7840
 800945c:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009466:	f040 809c 	bne.w	80095a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800946a:	4b9d      	ldr	r3, [pc, #628]	; (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800946c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800946e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009472:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009476:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800947a:	d054      	beq.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800947c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009482:	f200 808b 	bhi.w	800959c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8009486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009488:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800948c:	f000 8083 	beq.w	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8009490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009492:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009496:	f200 8081 	bhi.w	800959c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800949a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094a0:	d02f      	beq.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 80094a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094a8:	d878      	bhi.n	800959c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80094aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d004      	beq.n	80094ba <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80094b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094b6:	d012      	beq.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80094b8:	e070      	b.n	800959c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80094ba:	4b89      	ldr	r3, [pc, #548]	; (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094c6:	d107      	bne.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094cc:	4618      	mov	r0, r3
 80094ce:	f000 fe15 	bl	800a0fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094d6:	e345      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80094d8:	2300      	movs	r3, #0
 80094da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094dc:	e342      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094de:	4b80      	ldr	r3, [pc, #512]	; (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094ea:	d107      	bne.n	80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094ec:	f107 0318 	add.w	r3, r7, #24
 80094f0:	4618      	mov	r0, r3
 80094f2:	f000 fb5b 	bl	8009bac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094fa:	e333      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80094fc:	2300      	movs	r3, #0
 80094fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009500:	e330      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009502:	4b77      	ldr	r3, [pc, #476]	; (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800950a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800950e:	d107      	bne.n	8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009510:	f107 030c 	add.w	r3, r7, #12
 8009514:	4618      	mov	r0, r3
 8009516:	f000 fc9d 	bl	8009e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800951e:	e321      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009520:	2300      	movs	r3, #0
 8009522:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009524:	e31e      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009526:	4b6e      	ldr	r3, [pc, #440]	; (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800952a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800952e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009530:	4b6b      	ldr	r3, [pc, #428]	; (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f003 0304 	and.w	r3, r3, #4
 8009538:	2b04      	cmp	r3, #4
 800953a:	d10c      	bne.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800953c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800953e:	2b00      	cmp	r3, #0
 8009540:	d109      	bne.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009542:	4b67      	ldr	r3, [pc, #412]	; (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	08db      	lsrs	r3, r3, #3
 8009548:	f003 0303 	and.w	r3, r3, #3
 800954c:	4a65      	ldr	r2, [pc, #404]	; (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800954e:	fa22 f303 	lsr.w	r3, r2, r3
 8009552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009554:	e01e      	b.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009556:	4b62      	ldr	r3, [pc, #392]	; (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800955e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009562:	d106      	bne.n	8009572 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8009564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009566:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800956a:	d102      	bne.n	8009572 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800956c:	4b5e      	ldr	r3, [pc, #376]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800956e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009570:	e010      	b.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009572:	4b5b      	ldr	r3, [pc, #364]	; (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800957a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800957e:	d106      	bne.n	800958e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009586:	d102      	bne.n	800958e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009588:	4b58      	ldr	r3, [pc, #352]	; (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800958a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800958c:	e002      	b.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800958e:	2300      	movs	r3, #0
 8009590:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009592:	e2e7      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009594:	e2e6      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009596:	4b56      	ldr	r3, [pc, #344]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009598:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800959a:	e2e3      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800959c:	2300      	movs	r3, #0
 800959e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095a0:	e2e0      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095a8:	f040 80a7 	bne.w	80096fa <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80095ac:	4b4c      	ldr	r3, [pc, #304]	; (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80095ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095b0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80095b4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80095b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095bc:	d055      	beq.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80095be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095c4:	f200 8096 	bhi.w	80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80095c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80095ce:	f000 8084 	beq.w	80096da <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80095d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80095d8:	f200 808c 	bhi.w	80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80095dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095e2:	d030      	beq.n	8009646 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80095e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095ea:	f200 8083 	bhi.w	80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80095ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d004      	beq.n	80095fe <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80095f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80095fa:	d012      	beq.n	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80095fc:	e07a      	b.n	80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80095fe:	4b38      	ldr	r3, [pc, #224]	; (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009606:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800960a:	d107      	bne.n	800961c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800960c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009610:	4618      	mov	r0, r3
 8009612:	f000 fd73 	bl	800a0fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009618:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800961a:	e2a3      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800961c:	2300      	movs	r3, #0
 800961e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009620:	e2a0      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009622:	4b2f      	ldr	r3, [pc, #188]	; (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800962a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800962e:	d107      	bne.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009630:	f107 0318 	add.w	r3, r7, #24
 8009634:	4618      	mov	r0, r3
 8009636:	f000 fab9 	bl	8009bac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800963e:	e291      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009640:	2300      	movs	r3, #0
 8009642:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009644:	e28e      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009646:	4b26      	ldr	r3, [pc, #152]	; (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800964e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009652:	d107      	bne.n	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009654:	f107 030c 	add.w	r3, r7, #12
 8009658:	4618      	mov	r0, r3
 800965a:	f000 fbfb 	bl	8009e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009662:	e27f      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009664:	2300      	movs	r3, #0
 8009666:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009668:	e27c      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800966a:	4b1d      	ldr	r3, [pc, #116]	; (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800966c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800966e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009672:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009674:	4b1a      	ldr	r3, [pc, #104]	; (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 0304 	and.w	r3, r3, #4
 800967c:	2b04      	cmp	r3, #4
 800967e:	d10c      	bne.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8009680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009682:	2b00      	cmp	r3, #0
 8009684:	d109      	bne.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009686:	4b16      	ldr	r3, [pc, #88]	; (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	08db      	lsrs	r3, r3, #3
 800968c:	f003 0303 	and.w	r3, r3, #3
 8009690:	4a14      	ldr	r2, [pc, #80]	; (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8009692:	fa22 f303 	lsr.w	r3, r2, r3
 8009696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009698:	e01e      	b.n	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800969a:	4b11      	ldr	r3, [pc, #68]	; (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096a6:	d106      	bne.n	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80096a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096ae:	d102      	bne.n	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80096b0:	4b0d      	ldr	r3, [pc, #52]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80096b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096b4:	e010      	b.n	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80096b6:	4b0a      	ldr	r3, [pc, #40]	; (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096c2:	d106      	bne.n	80096d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80096c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096ca:	d102      	bne.n	80096d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80096cc:	4b07      	ldr	r3, [pc, #28]	; (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80096ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096d0:	e002      	b.n	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80096d2:	2300      	movs	r3, #0
 80096d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80096d6:	e245      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80096d8:	e244      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80096da:	4b05      	ldr	r3, [pc, #20]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80096dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096de:	e241      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80096e0:	58024400 	.word	0x58024400
 80096e4:	03d09000 	.word	0x03d09000
 80096e8:	003d0900 	.word	0x003d0900
 80096ec:	017d7840 	.word	0x017d7840
 80096f0:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 80096f4:	2300      	movs	r3, #0
 80096f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096f8:	e234      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009700:	f040 809c 	bne.w	800983c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009704:	4b9b      	ldr	r3, [pc, #620]	; (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009708:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800970c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800970e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009710:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009714:	d054      	beq.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8009716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009718:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800971c:	f200 808b 	bhi.w	8009836 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8009720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009722:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009726:	f000 8083 	beq.w	8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800972a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009730:	f200 8081 	bhi.w	8009836 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8009734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800973a:	d02f      	beq.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800973c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009742:	d878      	bhi.n	8009836 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8009744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009746:	2b00      	cmp	r3, #0
 8009748:	d004      	beq.n	8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800974a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009750:	d012      	beq.n	8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8009752:	e070      	b.n	8009836 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009754:	4b87      	ldr	r3, [pc, #540]	; (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800975c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009760:	d107      	bne.n	8009772 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009766:	4618      	mov	r0, r3
 8009768:	f000 fcc8 	bl	800a0fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800976c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009770:	e1f8      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009772:	2300      	movs	r3, #0
 8009774:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009776:	e1f5      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009778:	4b7e      	ldr	r3, [pc, #504]	; (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009780:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009784:	d107      	bne.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009786:	f107 0318 	add.w	r3, r7, #24
 800978a:	4618      	mov	r0, r3
 800978c:	f000 fa0e 	bl	8009bac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009794:	e1e6      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009796:	2300      	movs	r3, #0
 8009798:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800979a:	e1e3      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800979c:	4b75      	ldr	r3, [pc, #468]	; (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097a8:	d107      	bne.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097aa:	f107 030c 	add.w	r3, r7, #12
 80097ae:	4618      	mov	r0, r3
 80097b0:	f000 fb50 	bl	8009e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80097b8:	e1d4      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80097ba:	2300      	movs	r3, #0
 80097bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097be:	e1d1      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80097c0:	4b6c      	ldr	r3, [pc, #432]	; (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80097c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80097c8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097ca:	4b6a      	ldr	r3, [pc, #424]	; (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f003 0304 	and.w	r3, r3, #4
 80097d2:	2b04      	cmp	r3, #4
 80097d4:	d10c      	bne.n	80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80097d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d109      	bne.n	80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097dc:	4b65      	ldr	r3, [pc, #404]	; (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	08db      	lsrs	r3, r3, #3
 80097e2:	f003 0303 	and.w	r3, r3, #3
 80097e6:	4a64      	ldr	r2, [pc, #400]	; (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80097e8:	fa22 f303 	lsr.w	r3, r2, r3
 80097ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097ee:	e01e      	b.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097f0:	4b60      	ldr	r3, [pc, #384]	; (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097fc:	d106      	bne.n	800980c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80097fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009800:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009804:	d102      	bne.n	800980c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009806:	4b5d      	ldr	r3, [pc, #372]	; (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8009808:	63fb      	str	r3, [r7, #60]	; 0x3c
 800980a:	e010      	b.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800980c:	4b59      	ldr	r3, [pc, #356]	; (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009814:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009818:	d106      	bne.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800981a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800981c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009820:	d102      	bne.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009822:	4b57      	ldr	r3, [pc, #348]	; (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8009824:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009826:	e002      	b.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009828:	2300      	movs	r3, #0
 800982a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800982c:	e19a      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800982e:	e199      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009830:	4b54      	ldr	r3, [pc, #336]	; (8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009832:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009834:	e196      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8009836:	2300      	movs	r3, #0
 8009838:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800983a:	e193      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009842:	d173      	bne.n	800992c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009844:	4b4b      	ldr	r3, [pc, #300]	; (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009848:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800984c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800984e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009850:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009854:	d02f      	beq.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8009856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009858:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800985c:	d863      	bhi.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800985e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009860:	2b00      	cmp	r3, #0
 8009862:	d004      	beq.n	800986e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8009864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800986a:	d012      	beq.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800986c:	e05b      	b.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800986e:	4b41      	ldr	r3, [pc, #260]	; (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009876:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800987a:	d107      	bne.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800987c:	f107 0318 	add.w	r3, r7, #24
 8009880:	4618      	mov	r0, r3
 8009882:	f000 f993 	bl	8009bac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800988a:	e16b      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800988c:	2300      	movs	r3, #0
 800988e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009890:	e168      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009892:	4b38      	ldr	r3, [pc, #224]	; (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800989a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800989e:	d107      	bne.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098a0:	f107 030c 	add.w	r3, r7, #12
 80098a4:	4618      	mov	r0, r3
 80098a6:	f000 fad5 	bl	8009e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80098ae:	e159      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80098b0:	2300      	movs	r3, #0
 80098b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098b4:	e156      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80098b6:	4b2f      	ldr	r3, [pc, #188]	; (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80098b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80098be:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80098c0:	4b2c      	ldr	r3, [pc, #176]	; (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f003 0304 	and.w	r3, r3, #4
 80098c8:	2b04      	cmp	r3, #4
 80098ca:	d10c      	bne.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 80098cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d109      	bne.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80098d2:	4b28      	ldr	r3, [pc, #160]	; (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	08db      	lsrs	r3, r3, #3
 80098d8:	f003 0303 	and.w	r3, r3, #3
 80098dc:	4a26      	ldr	r2, [pc, #152]	; (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80098de:	fa22 f303 	lsr.w	r3, r2, r3
 80098e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098e4:	e01e      	b.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098e6:	4b23      	ldr	r3, [pc, #140]	; (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098f2:	d106      	bne.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 80098f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098fa:	d102      	bne.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80098fc:	4b1f      	ldr	r3, [pc, #124]	; (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80098fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009900:	e010      	b.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009902:	4b1c      	ldr	r3, [pc, #112]	; (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800990a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800990e:	d106      	bne.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8009910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009916:	d102      	bne.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009918:	4b19      	ldr	r3, [pc, #100]	; (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800991a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800991c:	e002      	b.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009922:	e11f      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009924:	e11e      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8009926:	2300      	movs	r3, #0
 8009928:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800992a:	e11b      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009932:	d13e      	bne.n	80099b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009934:	4b0f      	ldr	r3, [pc, #60]	; (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800993c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800993e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009940:	2b00      	cmp	r3, #0
 8009942:	d004      	beq.n	800994e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8009944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800994a:	d01d      	beq.n	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800994c:	e02e      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800994e:	4b09      	ldr	r3, [pc, #36]	; (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009956:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800995a:	d107      	bne.n	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800995c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009960:	4618      	mov	r0, r3
 8009962:	f000 fbcb 	bl	800a0fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009968:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800996a:	e0fb      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800996c:	2300      	movs	r3, #0
 800996e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009970:	e0f8      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009972:	bf00      	nop
 8009974:	58024400 	.word	0x58024400
 8009978:	03d09000 	.word	0x03d09000
 800997c:	003d0900 	.word	0x003d0900
 8009980:	017d7840 	.word	0x017d7840
 8009984:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009988:	4b79      	ldr	r3, [pc, #484]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009990:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009994:	d107      	bne.n	80099a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009996:	f107 0318 	add.w	r3, r7, #24
 800999a:	4618      	mov	r0, r3
 800999c:	f000 f906 	bl	8009bac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80099a0:	6a3b      	ldr	r3, [r7, #32]
 80099a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80099a4:	e0de      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80099a6:	2300      	movs	r3, #0
 80099a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099aa:	e0db      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80099ac:	2300      	movs	r3, #0
 80099ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099b0:	e0d8      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099b8:	f040 8085 	bne.w	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80099bc:	4b6c      	ldr	r3, [pc, #432]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80099be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099c0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80099c4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80099c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099cc:	d06b      	beq.n	8009aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80099ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099d4:	d874      	bhi.n	8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80099d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099dc:	d056      	beq.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80099de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099e4:	d86c      	bhi.n	8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80099e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80099ec:	d03b      	beq.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80099ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80099f4:	d864      	bhi.n	8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80099f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099fc:	d021      	beq.n	8009a42 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80099fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a04:	d85c      	bhi.n	8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8009a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d004      	beq.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a12:	d004      	beq.n	8009a1e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8009a14:	e054      	b.n	8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009a16:	f000 f8b3 	bl	8009b80 <HAL_RCCEx_GetD3PCLK1Freq>
 8009a1a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009a1c:	e0a2      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a1e:	4b54      	ldr	r3, [pc, #336]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a2a:	d107      	bne.n	8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a2c:	f107 0318 	add.w	r3, r7, #24
 8009a30:	4618      	mov	r0, r3
 8009a32:	f000 f8bb 	bl	8009bac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a36:	69fb      	ldr	r3, [r7, #28]
 8009a38:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009a3a:	e093      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a40:	e090      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a42:	4b4b      	ldr	r3, [pc, #300]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a4e:	d107      	bne.n	8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a50:	f107 030c 	add.w	r3, r7, #12
 8009a54:	4618      	mov	r0, r3
 8009a56:	f000 f9fd 	bl	8009e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009a5e:	e081      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009a60:	2300      	movs	r3, #0
 8009a62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a64:	e07e      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009a66:	4b42      	ldr	r3, [pc, #264]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f003 0304 	and.w	r3, r3, #4
 8009a6e:	2b04      	cmp	r3, #4
 8009a70:	d109      	bne.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a72:	4b3f      	ldr	r3, [pc, #252]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	08db      	lsrs	r3, r3, #3
 8009a78:	f003 0303 	and.w	r3, r3, #3
 8009a7c:	4a3d      	ldr	r2, [pc, #244]	; (8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009a84:	e06e      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009a86:	2300      	movs	r3, #0
 8009a88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a8a:	e06b      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009a8c:	4b38      	ldr	r3, [pc, #224]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a98:	d102      	bne.n	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8009a9a:	4b37      	ldr	r3, [pc, #220]	; (8009b78 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a9e:	e061      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009aa4:	e05e      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009aa6:	4b32      	ldr	r3, [pc, #200]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009aae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ab2:	d102      	bne.n	8009aba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8009ab4:	4b31      	ldr	r3, [pc, #196]	; (8009b7c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009ab8:	e054      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009aba:	2300      	movs	r3, #0
 8009abc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009abe:	e051      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ac4:	e04e      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009acc:	d148      	bne.n	8009b60 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009ace:	4b28      	ldr	r3, [pc, #160]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ad2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009ad6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ada:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ade:	d02a      	beq.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8009ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ae6:	d838      	bhi.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8009ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d004      	beq.n	8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8009aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009af4:	d00d      	beq.n	8009b12 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8009af6:	e030      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009af8:	4b1d      	ldr	r3, [pc, #116]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b04:	d102      	bne.n	8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8009b06:	4b1d      	ldr	r3, [pc, #116]	; (8009b7c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009b08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009b0a:	e02b      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b10:	e028      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b12:	4b17      	ldr	r3, [pc, #92]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b1e:	d107      	bne.n	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b24:	4618      	mov	r0, r3
 8009b26:	f000 fae9 	bl	800a0fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009b2e:	e019      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009b30:	2300      	movs	r3, #0
 8009b32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b34:	e016      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b36:	4b0e      	ldr	r3, [pc, #56]	; (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b42:	d107      	bne.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b44:	f107 0318 	add.w	r3, r7, #24
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f000 f82f 	bl	8009bac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009b52:	e007      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009b54:	2300      	movs	r3, #0
 8009b56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b58:	e004      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b5e:	e001      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8009b60:	2300      	movs	r3, #0
 8009b62:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3740      	adds	r7, #64	; 0x40
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	58024400 	.word	0x58024400
 8009b74:	03d09000 	.word	0x03d09000
 8009b78:	003d0900 	.word	0x003d0900
 8009b7c:	017d7840 	.word	0x017d7840

08009b80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009b84:	f7fe fb88 	bl	8008298 <HAL_RCC_GetHCLKFreq>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	4b06      	ldr	r3, [pc, #24]	; (8009ba4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009b8c:	6a1b      	ldr	r3, [r3, #32]
 8009b8e:	091b      	lsrs	r3, r3, #4
 8009b90:	f003 0307 	and.w	r3, r3, #7
 8009b94:	4904      	ldr	r1, [pc, #16]	; (8009ba8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009b96:	5ccb      	ldrb	r3, [r1, r3]
 8009b98:	f003 031f 	and.w	r3, r3, #31
 8009b9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	58024400 	.word	0x58024400
 8009ba8:	0800dfa4 	.word	0x0800dfa4

08009bac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b089      	sub	sp, #36	; 0x24
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009bb4:	4ba1      	ldr	r3, [pc, #644]	; (8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bb8:	f003 0303 	and.w	r3, r3, #3
 8009bbc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009bbe:	4b9f      	ldr	r3, [pc, #636]	; (8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc2:	0b1b      	lsrs	r3, r3, #12
 8009bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bc8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009bca:	4b9c      	ldr	r3, [pc, #624]	; (8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bce:	091b      	lsrs	r3, r3, #4
 8009bd0:	f003 0301 	and.w	r3, r3, #1
 8009bd4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009bd6:	4b99      	ldr	r3, [pc, #612]	; (8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bda:	08db      	lsrs	r3, r3, #3
 8009bdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009be0:	693a      	ldr	r2, [r7, #16]
 8009be2:	fb02 f303 	mul.w	r3, r2, r3
 8009be6:	ee07 3a90 	vmov	s15, r3
 8009bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f000 8111 	beq.w	8009e1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	f000 8083 	beq.w	8009d08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	f200 80a1 	bhi.w	8009d4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d003      	beq.n	8009c18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d056      	beq.n	8009cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009c16:	e099      	b.n	8009d4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c18:	4b88      	ldr	r3, [pc, #544]	; (8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f003 0320 	and.w	r3, r3, #32
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d02d      	beq.n	8009c80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c24:	4b85      	ldr	r3, [pc, #532]	; (8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	08db      	lsrs	r3, r3, #3
 8009c2a:	f003 0303 	and.w	r3, r3, #3
 8009c2e:	4a84      	ldr	r2, [pc, #528]	; (8009e40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009c30:	fa22 f303 	lsr.w	r3, r2, r3
 8009c34:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	ee07 3a90 	vmov	s15, r3
 8009c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	ee07 3a90 	vmov	s15, r3
 8009c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c4e:	4b7b      	ldr	r3, [pc, #492]	; (8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c56:	ee07 3a90 	vmov	s15, r3
 8009c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c62:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009e44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c7a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009c7e:	e087      	b.n	8009d90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	ee07 3a90 	vmov	s15, r3
 8009c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009e48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c92:	4b6a      	ldr	r3, [pc, #424]	; (8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c9a:	ee07 3a90 	vmov	s15, r3
 8009c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ca6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009e44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cc2:	e065      	b.n	8009d90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	ee07 3a90 	vmov	s15, r3
 8009cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009e4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cd6:	4b59      	ldr	r3, [pc, #356]	; (8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cde:	ee07 3a90 	vmov	s15, r3
 8009ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009e44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d06:	e043      	b.n	8009d90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	ee07 3a90 	vmov	s15, r3
 8009d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009e50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d1a:	4b48      	ldr	r3, [pc, #288]	; (8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d22:	ee07 3a90 	vmov	s15, r3
 8009d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009e44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d4a:	e021      	b.n	8009d90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	ee07 3a90 	vmov	s15, r3
 8009d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009e4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d5e:	4b37      	ldr	r3, [pc, #220]	; (8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d66:	ee07 3a90 	vmov	s15, r3
 8009d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d72:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009e44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009d90:	4b2a      	ldr	r3, [pc, #168]	; (8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d94:	0a5b      	lsrs	r3, r3, #9
 8009d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d9a:	ee07 3a90 	vmov	s15, r3
 8009d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009da2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009da6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009daa:	edd7 6a07 	vldr	s13, [r7, #28]
 8009dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009db2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009db6:	ee17 2a90 	vmov	r2, s15
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009dbe:	4b1f      	ldr	r3, [pc, #124]	; (8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc2:	0c1b      	lsrs	r3, r3, #16
 8009dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dc8:	ee07 3a90 	vmov	s15, r3
 8009dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009dd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009dd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009de4:	ee17 2a90 	vmov	r2, s15
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009dec:	4b13      	ldr	r3, [pc, #76]	; (8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df0:	0e1b      	lsrs	r3, r3, #24
 8009df2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009df6:	ee07 3a90 	vmov	s15, r3
 8009dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e06:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e12:	ee17 2a90 	vmov	r2, s15
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009e1a:	e008      	b.n	8009e2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	609a      	str	r2, [r3, #8]
}
 8009e2e:	bf00      	nop
 8009e30:	3724      	adds	r7, #36	; 0x24
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	58024400 	.word	0x58024400
 8009e40:	03d09000 	.word	0x03d09000
 8009e44:	46000000 	.word	0x46000000
 8009e48:	4c742400 	.word	0x4c742400
 8009e4c:	4a742400 	.word	0x4a742400
 8009e50:	4bbebc20 	.word	0x4bbebc20

08009e54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b089      	sub	sp, #36	; 0x24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e5c:	4ba1      	ldr	r3, [pc, #644]	; (800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e60:	f003 0303 	and.w	r3, r3, #3
 8009e64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009e66:	4b9f      	ldr	r3, [pc, #636]	; (800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e6a:	0d1b      	lsrs	r3, r3, #20
 8009e6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009e72:	4b9c      	ldr	r3, [pc, #624]	; (800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e76:	0a1b      	lsrs	r3, r3, #8
 8009e78:	f003 0301 	and.w	r3, r3, #1
 8009e7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009e7e:	4b99      	ldr	r3, [pc, #612]	; (800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e82:	08db      	lsrs	r3, r3, #3
 8009e84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e88:	693a      	ldr	r2, [r7, #16]
 8009e8a:	fb02 f303 	mul.w	r3, r2, r3
 8009e8e:	ee07 3a90 	vmov	s15, r3
 8009e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f000 8111 	beq.w	800a0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	f000 8083 	beq.w	8009fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	2b02      	cmp	r3, #2
 8009eae:	f200 80a1 	bhi.w	8009ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d003      	beq.n	8009ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d056      	beq.n	8009f6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009ebe:	e099      	b.n	8009ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ec0:	4b88      	ldr	r3, [pc, #544]	; (800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 0320 	and.w	r3, r3, #32
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d02d      	beq.n	8009f28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ecc:	4b85      	ldr	r3, [pc, #532]	; (800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	08db      	lsrs	r3, r3, #3
 8009ed2:	f003 0303 	and.w	r3, r3, #3
 8009ed6:	4a84      	ldr	r2, [pc, #528]	; (800a0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8009edc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	ee07 3a90 	vmov	s15, r3
 8009ee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	ee07 3a90 	vmov	s15, r3
 8009eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ef6:	4b7b      	ldr	r3, [pc, #492]	; (800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009efe:	ee07 3a90 	vmov	s15, r3
 8009f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a0ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f22:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009f26:	e087      	b.n	800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	ee07 3a90 	vmov	s15, r3
 8009f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f3a:	4b6a      	ldr	r3, [pc, #424]	; (800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f42:	ee07 3a90 	vmov	s15, r3
 8009f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a0ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f6a:	e065      	b.n	800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	ee07 3a90 	vmov	s15, r3
 8009f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f7e:	4b59      	ldr	r3, [pc, #356]	; (800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f86:	ee07 3a90 	vmov	s15, r3
 8009f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f92:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a0ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009faa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009fae:	e043      	b.n	800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	ee07 3a90 	vmov	s15, r3
 8009fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fc2:	4b48      	ldr	r3, [pc, #288]	; (800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fca:	ee07 3a90 	vmov	s15, r3
 8009fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fd6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a0ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ff2:	e021      	b.n	800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	ee07 3a90 	vmov	s15, r3
 8009ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ffe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a006:	4b37      	ldr	r3, [pc, #220]	; (800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a00a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a00e:	ee07 3a90 	vmov	s15, r3
 800a012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a016:	ed97 6a03 	vldr	s12, [r7, #12]
 800a01a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a0ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a01e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a02a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a02e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a032:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a036:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a038:	4b2a      	ldr	r3, [pc, #168]	; (800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a03a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03c:	0a5b      	lsrs	r3, r3, #9
 800a03e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a042:	ee07 3a90 	vmov	s15, r3
 800a046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a04a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a04e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a052:	edd7 6a07 	vldr	s13, [r7, #28]
 800a056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a05a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a05e:	ee17 2a90 	vmov	r2, s15
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a066:	4b1f      	ldr	r3, [pc, #124]	; (800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06a:	0c1b      	lsrs	r3, r3, #16
 800a06c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a070:	ee07 3a90 	vmov	s15, r3
 800a074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a078:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a07c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a080:	edd7 6a07 	vldr	s13, [r7, #28]
 800a084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a08c:	ee17 2a90 	vmov	r2, s15
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a094:	4b13      	ldr	r3, [pc, #76]	; (800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a098:	0e1b      	lsrs	r3, r3, #24
 800a09a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a09e:	ee07 3a90 	vmov	s15, r3
 800a0a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0ba:	ee17 2a90 	vmov	r2, s15
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a0c2:	e008      	b.n	800a0d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	609a      	str	r2, [r3, #8]
}
 800a0d6:	bf00      	nop
 800a0d8:	3724      	adds	r7, #36	; 0x24
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop
 800a0e4:	58024400 	.word	0x58024400
 800a0e8:	03d09000 	.word	0x03d09000
 800a0ec:	46000000 	.word	0x46000000
 800a0f0:	4c742400 	.word	0x4c742400
 800a0f4:	4a742400 	.word	0x4a742400
 800a0f8:	4bbebc20 	.word	0x4bbebc20

0800a0fc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b089      	sub	sp, #36	; 0x24
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a104:	4ba0      	ldr	r3, [pc, #640]	; (800a388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a108:	f003 0303 	and.w	r3, r3, #3
 800a10c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a10e:	4b9e      	ldr	r3, [pc, #632]	; (800a388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a112:	091b      	lsrs	r3, r3, #4
 800a114:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a118:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a11a:	4b9b      	ldr	r3, [pc, #620]	; (800a388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11e:	f003 0301 	and.w	r3, r3, #1
 800a122:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a124:	4b98      	ldr	r3, [pc, #608]	; (800a388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a128:	08db      	lsrs	r3, r3, #3
 800a12a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a12e:	693a      	ldr	r2, [r7, #16]
 800a130:	fb02 f303 	mul.w	r3, r2, r3
 800a134:	ee07 3a90 	vmov	s15, r3
 800a138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a13c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	2b00      	cmp	r3, #0
 800a144:	f000 8111 	beq.w	800a36a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a148:	69bb      	ldr	r3, [r7, #24]
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	f000 8083 	beq.w	800a256 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	2b02      	cmp	r3, #2
 800a154:	f200 80a1 	bhi.w	800a29a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d003      	beq.n	800a166 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a15e:	69bb      	ldr	r3, [r7, #24]
 800a160:	2b01      	cmp	r3, #1
 800a162:	d056      	beq.n	800a212 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a164:	e099      	b.n	800a29a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a166:	4b88      	ldr	r3, [pc, #544]	; (800a388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f003 0320 	and.w	r3, r3, #32
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d02d      	beq.n	800a1ce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a172:	4b85      	ldr	r3, [pc, #532]	; (800a388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	08db      	lsrs	r3, r3, #3
 800a178:	f003 0303 	and.w	r3, r3, #3
 800a17c:	4a83      	ldr	r2, [pc, #524]	; (800a38c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a17e:	fa22 f303 	lsr.w	r3, r2, r3
 800a182:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	ee07 3a90 	vmov	s15, r3
 800a18a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	ee07 3a90 	vmov	s15, r3
 800a194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a198:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a19c:	4b7a      	ldr	r3, [pc, #488]	; (800a388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a19e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1a4:	ee07 3a90 	vmov	s15, r3
 800a1a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1b0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a390 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a1b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1c8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a1cc:	e087      	b.n	800a2de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	ee07 3a90 	vmov	s15, r3
 800a1d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1d8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a394 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a1dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1e0:	4b69      	ldr	r3, [pc, #420]	; (800a388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1e8:	ee07 3a90 	vmov	s15, r3
 800a1ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1f4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a390 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a1f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a200:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a204:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a20c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a210:	e065      	b.n	800a2de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	ee07 3a90 	vmov	s15, r3
 800a218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a21c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a398 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a220:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a224:	4b58      	ldr	r3, [pc, #352]	; (800a388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a22c:	ee07 3a90 	vmov	s15, r3
 800a230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a234:	ed97 6a03 	vldr	s12, [r7, #12]
 800a238:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a390 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a23c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a240:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a244:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a248:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a24c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a250:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a254:	e043      	b.n	800a2de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	ee07 3a90 	vmov	s15, r3
 800a25c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a260:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a39c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a268:	4b47      	ldr	r3, [pc, #284]	; (800a388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a26a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a26c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a270:	ee07 3a90 	vmov	s15, r3
 800a274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a278:	ed97 6a03 	vldr	s12, [r7, #12]
 800a27c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a390 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a280:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a284:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a288:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a28c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a290:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a294:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a298:	e021      	b.n	800a2de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	ee07 3a90 	vmov	s15, r3
 800a2a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2a4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a394 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a2a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2ac:	4b36      	ldr	r3, [pc, #216]	; (800a388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2b4:	ee07 3a90 	vmov	s15, r3
 800a2b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2c0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a390 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2dc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a2de:	4b2a      	ldr	r3, [pc, #168]	; (800a388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e2:	0a5b      	lsrs	r3, r3, #9
 800a2e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2e8:	ee07 3a90 	vmov	s15, r3
 800a2ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a304:	ee17 2a90 	vmov	r2, s15
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a30c:	4b1e      	ldr	r3, [pc, #120]	; (800a388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a30e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a310:	0c1b      	lsrs	r3, r3, #16
 800a312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a316:	ee07 3a90 	vmov	s15, r3
 800a31a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a31e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a322:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a326:	edd7 6a07 	vldr	s13, [r7, #28]
 800a32a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a32e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a332:	ee17 2a90 	vmov	r2, s15
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a33a:	4b13      	ldr	r3, [pc, #76]	; (800a388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a33c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a33e:	0e1b      	lsrs	r3, r3, #24
 800a340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a344:	ee07 3a90 	vmov	s15, r3
 800a348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a34c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a350:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a354:	edd7 6a07 	vldr	s13, [r7, #28]
 800a358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a35c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a360:	ee17 2a90 	vmov	r2, s15
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a368:	e008      	b.n	800a37c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2200      	movs	r2, #0
 800a37a:	609a      	str	r2, [r3, #8]
}
 800a37c:	bf00      	nop
 800a37e:	3724      	adds	r7, #36	; 0x24
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr
 800a388:	58024400 	.word	0x58024400
 800a38c:	03d09000 	.word	0x03d09000
 800a390:	46000000 	.word	0x46000000
 800a394:	4c742400 	.word	0x4c742400
 800a398:	4a742400 	.word	0x4a742400
 800a39c:	4bbebc20 	.word	0x4bbebc20

0800a3a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a3ae:	4b53      	ldr	r3, [pc, #332]	; (800a4fc <RCCEx_PLL2_Config+0x15c>)
 800a3b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b2:	f003 0303 	and.w	r3, r3, #3
 800a3b6:	2b03      	cmp	r3, #3
 800a3b8:	d101      	bne.n	800a3be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e099      	b.n	800a4f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a3be:	4b4f      	ldr	r3, [pc, #316]	; (800a4fc <RCCEx_PLL2_Config+0x15c>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a4e      	ldr	r2, [pc, #312]	; (800a4fc <RCCEx_PLL2_Config+0x15c>)
 800a3c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a3c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3ca:	f7f8 f94f 	bl	800266c <HAL_GetTick>
 800a3ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a3d0:	e008      	b.n	800a3e4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a3d2:	f7f8 f94b 	bl	800266c <HAL_GetTick>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	1ad3      	subs	r3, r2, r3
 800a3dc:	2b02      	cmp	r3, #2
 800a3de:	d901      	bls.n	800a3e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a3e0:	2303      	movs	r3, #3
 800a3e2:	e086      	b.n	800a4f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a3e4:	4b45      	ldr	r3, [pc, #276]	; (800a4fc <RCCEx_PLL2_Config+0x15c>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d1f0      	bne.n	800a3d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a3f0:	4b42      	ldr	r3, [pc, #264]	; (800a4fc <RCCEx_PLL2_Config+0x15c>)
 800a3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	031b      	lsls	r3, r3, #12
 800a3fe:	493f      	ldr	r1, [pc, #252]	; (800a4fc <RCCEx_PLL2_Config+0x15c>)
 800a400:	4313      	orrs	r3, r2
 800a402:	628b      	str	r3, [r1, #40]	; 0x28
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	3b01      	subs	r3, #1
 800a40a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	3b01      	subs	r3, #1
 800a414:	025b      	lsls	r3, r3, #9
 800a416:	b29b      	uxth	r3, r3
 800a418:	431a      	orrs	r2, r3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	3b01      	subs	r3, #1
 800a420:	041b      	lsls	r3, r3, #16
 800a422:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a426:	431a      	orrs	r2, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	691b      	ldr	r3, [r3, #16]
 800a42c:	3b01      	subs	r3, #1
 800a42e:	061b      	lsls	r3, r3, #24
 800a430:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a434:	4931      	ldr	r1, [pc, #196]	; (800a4fc <RCCEx_PLL2_Config+0x15c>)
 800a436:	4313      	orrs	r3, r2
 800a438:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a43a:	4b30      	ldr	r3, [pc, #192]	; (800a4fc <RCCEx_PLL2_Config+0x15c>)
 800a43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a43e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	695b      	ldr	r3, [r3, #20]
 800a446:	492d      	ldr	r1, [pc, #180]	; (800a4fc <RCCEx_PLL2_Config+0x15c>)
 800a448:	4313      	orrs	r3, r2
 800a44a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a44c:	4b2b      	ldr	r3, [pc, #172]	; (800a4fc <RCCEx_PLL2_Config+0x15c>)
 800a44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a450:	f023 0220 	bic.w	r2, r3, #32
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	699b      	ldr	r3, [r3, #24]
 800a458:	4928      	ldr	r1, [pc, #160]	; (800a4fc <RCCEx_PLL2_Config+0x15c>)
 800a45a:	4313      	orrs	r3, r2
 800a45c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a45e:	4b27      	ldr	r3, [pc, #156]	; (800a4fc <RCCEx_PLL2_Config+0x15c>)
 800a460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a462:	4a26      	ldr	r2, [pc, #152]	; (800a4fc <RCCEx_PLL2_Config+0x15c>)
 800a464:	f023 0310 	bic.w	r3, r3, #16
 800a468:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a46a:	4b24      	ldr	r3, [pc, #144]	; (800a4fc <RCCEx_PLL2_Config+0x15c>)
 800a46c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a46e:	4b24      	ldr	r3, [pc, #144]	; (800a500 <RCCEx_PLL2_Config+0x160>)
 800a470:	4013      	ands	r3, r2
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	69d2      	ldr	r2, [r2, #28]
 800a476:	00d2      	lsls	r2, r2, #3
 800a478:	4920      	ldr	r1, [pc, #128]	; (800a4fc <RCCEx_PLL2_Config+0x15c>)
 800a47a:	4313      	orrs	r3, r2
 800a47c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a47e:	4b1f      	ldr	r3, [pc, #124]	; (800a4fc <RCCEx_PLL2_Config+0x15c>)
 800a480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a482:	4a1e      	ldr	r2, [pc, #120]	; (800a4fc <RCCEx_PLL2_Config+0x15c>)
 800a484:	f043 0310 	orr.w	r3, r3, #16
 800a488:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d106      	bne.n	800a49e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a490:	4b1a      	ldr	r3, [pc, #104]	; (800a4fc <RCCEx_PLL2_Config+0x15c>)
 800a492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a494:	4a19      	ldr	r2, [pc, #100]	; (800a4fc <RCCEx_PLL2_Config+0x15c>)
 800a496:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a49a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a49c:	e00f      	b.n	800a4be <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d106      	bne.n	800a4b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a4a4:	4b15      	ldr	r3, [pc, #84]	; (800a4fc <RCCEx_PLL2_Config+0x15c>)
 800a4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a8:	4a14      	ldr	r2, [pc, #80]	; (800a4fc <RCCEx_PLL2_Config+0x15c>)
 800a4aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a4b0:	e005      	b.n	800a4be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a4b2:	4b12      	ldr	r3, [pc, #72]	; (800a4fc <RCCEx_PLL2_Config+0x15c>)
 800a4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b6:	4a11      	ldr	r2, [pc, #68]	; (800a4fc <RCCEx_PLL2_Config+0x15c>)
 800a4b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a4bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a4be:	4b0f      	ldr	r3, [pc, #60]	; (800a4fc <RCCEx_PLL2_Config+0x15c>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a0e      	ldr	r2, [pc, #56]	; (800a4fc <RCCEx_PLL2_Config+0x15c>)
 800a4c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a4c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4ca:	f7f8 f8cf 	bl	800266c <HAL_GetTick>
 800a4ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a4d0:	e008      	b.n	800a4e4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a4d2:	f7f8 f8cb 	bl	800266c <HAL_GetTick>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	1ad3      	subs	r3, r2, r3
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	d901      	bls.n	800a4e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a4e0:	2303      	movs	r3, #3
 800a4e2:	e006      	b.n	800a4f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a4e4:	4b05      	ldr	r3, [pc, #20]	; (800a4fc <RCCEx_PLL2_Config+0x15c>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d0f0      	beq.n	800a4d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	58024400 	.word	0x58024400
 800a500:	ffff0007 	.word	0xffff0007

0800a504 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a50e:	2300      	movs	r3, #0
 800a510:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a512:	4b53      	ldr	r3, [pc, #332]	; (800a660 <RCCEx_PLL3_Config+0x15c>)
 800a514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a516:	f003 0303 	and.w	r3, r3, #3
 800a51a:	2b03      	cmp	r3, #3
 800a51c:	d101      	bne.n	800a522 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	e099      	b.n	800a656 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a522:	4b4f      	ldr	r3, [pc, #316]	; (800a660 <RCCEx_PLL3_Config+0x15c>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a4e      	ldr	r2, [pc, #312]	; (800a660 <RCCEx_PLL3_Config+0x15c>)
 800a528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a52c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a52e:	f7f8 f89d 	bl	800266c <HAL_GetTick>
 800a532:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a534:	e008      	b.n	800a548 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a536:	f7f8 f899 	bl	800266c <HAL_GetTick>
 800a53a:	4602      	mov	r2, r0
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	2b02      	cmp	r3, #2
 800a542:	d901      	bls.n	800a548 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a544:	2303      	movs	r3, #3
 800a546:	e086      	b.n	800a656 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a548:	4b45      	ldr	r3, [pc, #276]	; (800a660 <RCCEx_PLL3_Config+0x15c>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a550:	2b00      	cmp	r3, #0
 800a552:	d1f0      	bne.n	800a536 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a554:	4b42      	ldr	r3, [pc, #264]	; (800a660 <RCCEx_PLL3_Config+0x15c>)
 800a556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a558:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	051b      	lsls	r3, r3, #20
 800a562:	493f      	ldr	r1, [pc, #252]	; (800a660 <RCCEx_PLL3_Config+0x15c>)
 800a564:	4313      	orrs	r3, r2
 800a566:	628b      	str	r3, [r1, #40]	; 0x28
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	3b01      	subs	r3, #1
 800a56e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	3b01      	subs	r3, #1
 800a578:	025b      	lsls	r3, r3, #9
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	431a      	orrs	r2, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	68db      	ldr	r3, [r3, #12]
 800a582:	3b01      	subs	r3, #1
 800a584:	041b      	lsls	r3, r3, #16
 800a586:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a58a:	431a      	orrs	r2, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	3b01      	subs	r3, #1
 800a592:	061b      	lsls	r3, r3, #24
 800a594:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a598:	4931      	ldr	r1, [pc, #196]	; (800a660 <RCCEx_PLL3_Config+0x15c>)
 800a59a:	4313      	orrs	r3, r2
 800a59c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a59e:	4b30      	ldr	r3, [pc, #192]	; (800a660 <RCCEx_PLL3_Config+0x15c>)
 800a5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	695b      	ldr	r3, [r3, #20]
 800a5aa:	492d      	ldr	r1, [pc, #180]	; (800a660 <RCCEx_PLL3_Config+0x15c>)
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a5b0:	4b2b      	ldr	r3, [pc, #172]	; (800a660 <RCCEx_PLL3_Config+0x15c>)
 800a5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	4928      	ldr	r1, [pc, #160]	; (800a660 <RCCEx_PLL3_Config+0x15c>)
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a5c2:	4b27      	ldr	r3, [pc, #156]	; (800a660 <RCCEx_PLL3_Config+0x15c>)
 800a5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c6:	4a26      	ldr	r2, [pc, #152]	; (800a660 <RCCEx_PLL3_Config+0x15c>)
 800a5c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a5ce:	4b24      	ldr	r3, [pc, #144]	; (800a660 <RCCEx_PLL3_Config+0x15c>)
 800a5d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5d2:	4b24      	ldr	r3, [pc, #144]	; (800a664 <RCCEx_PLL3_Config+0x160>)
 800a5d4:	4013      	ands	r3, r2
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	69d2      	ldr	r2, [r2, #28]
 800a5da:	00d2      	lsls	r2, r2, #3
 800a5dc:	4920      	ldr	r1, [pc, #128]	; (800a660 <RCCEx_PLL3_Config+0x15c>)
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a5e2:	4b1f      	ldr	r3, [pc, #124]	; (800a660 <RCCEx_PLL3_Config+0x15c>)
 800a5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e6:	4a1e      	ldr	r2, [pc, #120]	; (800a660 <RCCEx_PLL3_Config+0x15c>)
 800a5e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d106      	bne.n	800a602 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a5f4:	4b1a      	ldr	r3, [pc, #104]	; (800a660 <RCCEx_PLL3_Config+0x15c>)
 800a5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f8:	4a19      	ldr	r2, [pc, #100]	; (800a660 <RCCEx_PLL3_Config+0x15c>)
 800a5fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a5fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a600:	e00f      	b.n	800a622 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	2b01      	cmp	r3, #1
 800a606:	d106      	bne.n	800a616 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a608:	4b15      	ldr	r3, [pc, #84]	; (800a660 <RCCEx_PLL3_Config+0x15c>)
 800a60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a60c:	4a14      	ldr	r2, [pc, #80]	; (800a660 <RCCEx_PLL3_Config+0x15c>)
 800a60e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a612:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a614:	e005      	b.n	800a622 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a616:	4b12      	ldr	r3, [pc, #72]	; (800a660 <RCCEx_PLL3_Config+0x15c>)
 800a618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a61a:	4a11      	ldr	r2, [pc, #68]	; (800a660 <RCCEx_PLL3_Config+0x15c>)
 800a61c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a620:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a622:	4b0f      	ldr	r3, [pc, #60]	; (800a660 <RCCEx_PLL3_Config+0x15c>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a0e      	ldr	r2, [pc, #56]	; (800a660 <RCCEx_PLL3_Config+0x15c>)
 800a628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a62c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a62e:	f7f8 f81d 	bl	800266c <HAL_GetTick>
 800a632:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a634:	e008      	b.n	800a648 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a636:	f7f8 f819 	bl	800266c <HAL_GetTick>
 800a63a:	4602      	mov	r2, r0
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	1ad3      	subs	r3, r2, r3
 800a640:	2b02      	cmp	r3, #2
 800a642:	d901      	bls.n	800a648 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a644:	2303      	movs	r3, #3
 800a646:	e006      	b.n	800a656 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a648:	4b05      	ldr	r3, [pc, #20]	; (800a660 <RCCEx_PLL3_Config+0x15c>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a650:	2b00      	cmp	r3, #0
 800a652:	d0f0      	beq.n	800a636 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a654:	7bfb      	ldrb	r3, [r7, #15]
}
 800a656:	4618      	mov	r0, r3
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	58024400 	.word	0x58024400
 800a664:	ffff0007 	.word	0xffff0007

0800a668 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d101      	bne.n	800a67a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	e0f1      	b.n	800a85e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a78      	ldr	r2, [pc, #480]	; (800a868 <HAL_SPI_Init+0x200>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d00f      	beq.n	800a6aa <HAL_SPI_Init+0x42>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a77      	ldr	r2, [pc, #476]	; (800a86c <HAL_SPI_Init+0x204>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d00a      	beq.n	800a6aa <HAL_SPI_Init+0x42>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a75      	ldr	r2, [pc, #468]	; (800a870 <HAL_SPI_Init+0x208>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d005      	beq.n	800a6aa <HAL_SPI_Init+0x42>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	2b0f      	cmp	r3, #15
 800a6a4:	d901      	bls.n	800a6aa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e0d9      	b.n	800a85e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 fba2 	bl	800adf4 <SPI_GetPacketSize>
 800a6b0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a6c      	ldr	r2, [pc, #432]	; (800a868 <HAL_SPI_Init+0x200>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d00c      	beq.n	800a6d6 <HAL_SPI_Init+0x6e>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a6a      	ldr	r2, [pc, #424]	; (800a86c <HAL_SPI_Init+0x204>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d007      	beq.n	800a6d6 <HAL_SPI_Init+0x6e>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a69      	ldr	r2, [pc, #420]	; (800a870 <HAL_SPI_Init+0x208>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d002      	beq.n	800a6d6 <HAL_SPI_Init+0x6e>
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2b08      	cmp	r3, #8
 800a6d4:	d811      	bhi.n	800a6fa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a6da:	4a63      	ldr	r2, [pc, #396]	; (800a868 <HAL_SPI_Init+0x200>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d009      	beq.n	800a6f4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a61      	ldr	r2, [pc, #388]	; (800a86c <HAL_SPI_Init+0x204>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d004      	beq.n	800a6f4 <HAL_SPI_Init+0x8c>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a60      	ldr	r2, [pc, #384]	; (800a870 <HAL_SPI_Init+0x208>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d104      	bne.n	800a6fe <HAL_SPI_Init+0x96>
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2b10      	cmp	r3, #16
 800a6f8:	d901      	bls.n	800a6fe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e0af      	b.n	800a85e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b00      	cmp	r3, #0
 800a708:	d106      	bne.n	800a718 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f7f7 fc2a 	bl	8001f6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2202      	movs	r2, #2
 800a71c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f022 0201 	bic.w	r2, r2, #1
 800a72e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a73a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	699b      	ldr	r3, [r3, #24]
 800a740:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a744:	d119      	bne.n	800a77a <HAL_SPI_Init+0x112>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a74e:	d103      	bne.n	800a758 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a754:	2b00      	cmp	r3, #0
 800a756:	d008      	beq.n	800a76a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d10c      	bne.n	800a77a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a764:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a768:	d107      	bne.n	800a77a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a778:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	69da      	ldr	r2, [r3, #28]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a782:	431a      	orrs	r2, r3
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	431a      	orrs	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a78c:	ea42 0103 	orr.w	r1, r2, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	68da      	ldr	r2, [r3, #12]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	430a      	orrs	r2, r1
 800a79a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a4:	431a      	orrs	r2, r3
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7aa:	431a      	orrs	r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	699b      	ldr	r3, [r3, #24]
 800a7b0:	431a      	orrs	r2, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	691b      	ldr	r3, [r3, #16]
 800a7b6:	431a      	orrs	r2, r3
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	695b      	ldr	r3, [r3, #20]
 800a7bc:	431a      	orrs	r2, r3
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6a1b      	ldr	r3, [r3, #32]
 800a7c2:	431a      	orrs	r2, r3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	431a      	orrs	r2, r3
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7ce:	431a      	orrs	r2, r3
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	431a      	orrs	r2, r3
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7da:	ea42 0103 	orr.w	r1, r2, r3
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	430a      	orrs	r2, r1
 800a7e8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d113      	bne.n	800a81a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a804:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a818:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f022 0201 	bic.w	r2, r2, #1
 800a828:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a832:	2b00      	cmp	r3, #0
 800a834:	d00a      	beq.n	800a84c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	430a      	orrs	r2, r1
 800a84a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2201      	movs	r2, #1
 800a858:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	40013000 	.word	0x40013000
 800a86c:	40003800 	.word	0x40003800
 800a870:	40003c00 	.word	0x40003c00

0800a874 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b08a      	sub	sp, #40	; 0x28
 800a878:	af02      	add	r7, sp, #8
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	603b      	str	r3, [r7, #0]
 800a880:	4613      	mov	r3, r2
 800a882:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	3320      	adds	r3, #32
 800a88a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a88c:	2300      	movs	r3, #0
 800a88e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a896:	2b01      	cmp	r3, #1
 800a898:	d101      	bne.n	800a89e <HAL_SPI_Transmit+0x2a>
 800a89a:	2302      	movs	r3, #2
 800a89c:	e1d7      	b.n	800ac4e <HAL_SPI_Transmit+0x3da>
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a8a6:	f7f7 fee1 	bl	800266c <HAL_GetTick>
 800a8aa:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d007      	beq.n	800a8c8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800a8b8:	2302      	movs	r3, #2
 800a8ba:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a8c4:	7efb      	ldrb	r3, [r7, #27]
 800a8c6:	e1c2      	b.n	800ac4e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d002      	beq.n	800a8d4 <HAL_SPI_Transmit+0x60>
 800a8ce:	88fb      	ldrh	r3, [r7, #6]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d107      	bne.n	800a8e4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a8e0:	7efb      	ldrb	r3, [r7, #27]
 800a8e2:	e1b4      	b.n	800ac4e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2203      	movs	r2, #3
 800a8e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	88fa      	ldrh	r2, [r7, #6]
 800a8fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	88fa      	ldrh	r2, [r7, #6]
 800a906:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2200      	movs	r2, #0
 800a90e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2200      	movs	r2, #0
 800a914:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2200      	movs	r2, #0
 800a924:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2200      	movs	r2, #0
 800a92a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a934:	d107      	bne.n	800a946 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	681a      	ldr	r2, [r3, #0]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a944:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	685a      	ldr	r2, [r3, #4]
 800a94c:	4b96      	ldr	r3, [pc, #600]	; (800aba8 <HAL_SPI_Transmit+0x334>)
 800a94e:	4013      	ands	r3, r2
 800a950:	88f9      	ldrh	r1, [r7, #6]
 800a952:	68fa      	ldr	r2, [r7, #12]
 800a954:	6812      	ldr	r2, [r2, #0]
 800a956:	430b      	orrs	r3, r1
 800a958:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f042 0201 	orr.w	r2, r2, #1
 800a968:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a972:	d107      	bne.n	800a984 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a982:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	2b0f      	cmp	r3, #15
 800a98a:	d947      	bls.n	800aa1c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a98c:	e03f      	b.n	800aa0e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	695b      	ldr	r3, [r3, #20]
 800a994:	f003 0302 	and.w	r3, r3, #2
 800a998:	2b02      	cmp	r3, #2
 800a99a:	d114      	bne.n	800a9c6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	6812      	ldr	r2, [r2, #0]
 800a9a6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9ac:	1d1a      	adds	r2, r3, #4
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	3b01      	subs	r3, #1
 800a9bc:	b29a      	uxth	r2, r3
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a9c4:	e023      	b.n	800aa0e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a9c6:	f7f7 fe51 	bl	800266c <HAL_GetTick>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	1ad3      	subs	r3, r2, r3
 800a9d0:	683a      	ldr	r2, [r7, #0]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d803      	bhi.n	800a9de <HAL_SPI_Transmit+0x16a>
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9dc:	d102      	bne.n	800a9e4 <HAL_SPI_Transmit+0x170>
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d114      	bne.n	800aa0e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a9e4:	68f8      	ldr	r0, [r7, #12]
 800a9e6:	f000 f937 	bl	800ac58 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2201      	movs	r2, #1
 800aa06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800aa0a:	2303      	movs	r3, #3
 800aa0c:	e11f      	b.n	800ac4e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d1b9      	bne.n	800a98e <HAL_SPI_Transmit+0x11a>
 800aa1a:	e0f2      	b.n	800ac02 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	2b07      	cmp	r3, #7
 800aa22:	f240 80e7 	bls.w	800abf4 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800aa26:	e05d      	b.n	800aae4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	695b      	ldr	r3, [r3, #20]
 800aa2e:	f003 0302 	and.w	r3, r3, #2
 800aa32:	2b02      	cmp	r3, #2
 800aa34:	d132      	bne.n	800aa9c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d918      	bls.n	800aa74 <HAL_SPI_Transmit+0x200>
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d014      	beq.n	800aa74 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	6812      	ldr	r2, [r2, #0]
 800aa54:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa5a:	1d1a      	adds	r2, r3, #4
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	3b02      	subs	r3, #2
 800aa6a:	b29a      	uxth	r2, r3
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800aa72:	e037      	b.n	800aae4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa78:	881a      	ldrh	r2, [r3, #0]
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa82:	1c9a      	adds	r2, r3, #2
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	3b01      	subs	r3, #1
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800aa9a:	e023      	b.n	800aae4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa9c:	f7f7 fde6 	bl	800266c <HAL_GetTick>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	1ad3      	subs	r3, r2, r3
 800aaa6:	683a      	ldr	r2, [r7, #0]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d803      	bhi.n	800aab4 <HAL_SPI_Transmit+0x240>
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aab2:	d102      	bne.n	800aaba <HAL_SPI_Transmit+0x246>
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d114      	bne.n	800aae4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aaba:	68f8      	ldr	r0, [r7, #12]
 800aabc:	f000 f8cc 	bl	800ac58 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aace:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800aae0:	2303      	movs	r3, #3
 800aae2:	e0b4      	b.n	800ac4e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d19b      	bne.n	800aa28 <HAL_SPI_Transmit+0x1b4>
 800aaf0:	e087      	b.n	800ac02 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	695b      	ldr	r3, [r3, #20]
 800aaf8:	f003 0302 	and.w	r3, r3, #2
 800aafc:	2b02      	cmp	r3, #2
 800aafe:	d155      	bne.n	800abac <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	2b03      	cmp	r3, #3
 800ab0a:	d918      	bls.n	800ab3e <HAL_SPI_Transmit+0x2ca>
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab10:	2b40      	cmp	r3, #64	; 0x40
 800ab12:	d914      	bls.n	800ab3e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	6812      	ldr	r2, [r2, #0]
 800ab1e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab24:	1d1a      	adds	r2, r3, #4
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	3b04      	subs	r3, #4
 800ab34:	b29a      	uxth	r2, r3
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ab3c:	e05a      	b.n	800abf4 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	d917      	bls.n	800ab7a <HAL_SPI_Transmit+0x306>
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d013      	beq.n	800ab7a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab56:	881a      	ldrh	r2, [r3, #0]
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab60:	1c9a      	adds	r2, r3, #2
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	3b02      	subs	r3, #2
 800ab70:	b29a      	uxth	r2, r3
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ab78:	e03c      	b.n	800abf4 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	3320      	adds	r3, #32
 800ab84:	7812      	ldrb	r2, [r2, #0]
 800ab86:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab8c:	1c5a      	adds	r2, r3, #1
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800aba4:	e026      	b.n	800abf4 <HAL_SPI_Transmit+0x380>
 800aba6:	bf00      	nop
 800aba8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800abac:	f7f7 fd5e 	bl	800266c <HAL_GetTick>
 800abb0:	4602      	mov	r2, r0
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	683a      	ldr	r2, [r7, #0]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d803      	bhi.n	800abc4 <HAL_SPI_Transmit+0x350>
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abc2:	d102      	bne.n	800abca <HAL_SPI_Transmit+0x356>
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d114      	bne.n	800abf4 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800abca:	68f8      	ldr	r0, [r7, #12]
 800abcc:	f000 f844 	bl	800ac58 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2200      	movs	r2, #0
 800abd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abde:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2201      	movs	r2, #1
 800abec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800abf0:	2303      	movs	r3, #3
 800abf2:	e02c      	b.n	800ac4e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f47f af78 	bne.w	800aaf2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	9300      	str	r3, [sp, #0]
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	2108      	movs	r1, #8
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	f000 f8c3 	bl	800ad98 <SPI_WaitOnFlagUntilTimeout>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d007      	beq.n	800ac28 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac1e:	f043 0220 	orr.w	r2, r3, #32
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ac28:	68f8      	ldr	r0, [r7, #12]
 800ac2a:	f000 f815 	bl	800ac58 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d001      	beq.n	800ac4c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e000      	b.n	800ac4e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800ac4c:	7efb      	ldrb	r3, [r7, #27]
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3720      	adds	r7, #32
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop

0800ac58 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	695b      	ldr	r3, [r3, #20]
 800ac66:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	699a      	ldr	r2, [r3, #24]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f042 0208 	orr.w	r2, r2, #8
 800ac76:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	699a      	ldr	r2, [r3, #24]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f042 0210 	orr.w	r2, r2, #16
 800ac86:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f022 0201 	bic.w	r2, r2, #1
 800ac96:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	6919      	ldr	r1, [r3, #16]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	4b3c      	ldr	r3, [pc, #240]	; (800ad94 <SPI_CloseTransfer+0x13c>)
 800aca4:	400b      	ands	r3, r1
 800aca6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	689a      	ldr	r2, [r3, #8]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800acb6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	2b04      	cmp	r3, #4
 800acc2:	d014      	beq.n	800acee <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f003 0320 	and.w	r3, r3, #32
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00f      	beq.n	800acee <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800acd4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	699a      	ldr	r2, [r3, #24]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f042 0220 	orr.w	r2, r2, #32
 800acec:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	2b03      	cmp	r3, #3
 800acf8:	d014      	beq.n	800ad24 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d00f      	beq.n	800ad24 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad0a:	f043 0204 	orr.w	r2, r3, #4
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	699a      	ldr	r2, [r3, #24]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad22:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00f      	beq.n	800ad4e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad34:	f043 0201 	orr.w	r2, r3, #1
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	699a      	ldr	r2, [r3, #24]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad4c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00f      	beq.n	800ad78 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad5e:	f043 0208 	orr.w	r2, r3, #8
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	699a      	ldr	r2, [r3, #24]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad76:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ad88:	bf00      	nop
 800ad8a:	3714      	adds	r7, #20
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr
 800ad94:	fffffc90 	.word	0xfffffc90

0800ad98 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	603b      	str	r3, [r7, #0]
 800ada4:	4613      	mov	r3, r2
 800ada6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ada8:	e010      	b.n	800adcc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800adaa:	f7f7 fc5f 	bl	800266c <HAL_GetTick>
 800adae:	4602      	mov	r2, r0
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	1ad3      	subs	r3, r2, r3
 800adb4:	69ba      	ldr	r2, [r7, #24]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d803      	bhi.n	800adc2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adc0:	d102      	bne.n	800adc8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d101      	bne.n	800adcc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800adc8:	2303      	movs	r3, #3
 800adca:	e00f      	b.n	800adec <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	695a      	ldr	r2, [r3, #20]
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	4013      	ands	r3, r2
 800add6:	68ba      	ldr	r2, [r7, #8]
 800add8:	429a      	cmp	r2, r3
 800adda:	bf0c      	ite	eq
 800addc:	2301      	moveq	r3, #1
 800adde:	2300      	movne	r3, #0
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	461a      	mov	r2, r3
 800ade4:	79fb      	ldrb	r3, [r7, #7]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d0df      	beq.n	800adaa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	3710      	adds	r7, #16
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b085      	sub	sp, #20
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae00:	095b      	lsrs	r3, r3, #5
 800ae02:	3301      	adds	r3, #1
 800ae04:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	3307      	adds	r3, #7
 800ae12:	08db      	lsrs	r3, r3, #3
 800ae14:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	fb02 f303 	mul.w	r3, r2, r3
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3714      	adds	r7, #20
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr
	...

0800ae2c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae36:	2300      	movs	r3, #0
 800ae38:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d109      	bne.n	800ae54 <HAL_TIM_OC_Start_IT+0x28>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	bf14      	ite	ne
 800ae4c:	2301      	movne	r3, #1
 800ae4e:	2300      	moveq	r3, #0
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	e03c      	b.n	800aece <HAL_TIM_OC_Start_IT+0xa2>
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	2b04      	cmp	r3, #4
 800ae58:	d109      	bne.n	800ae6e <HAL_TIM_OC_Start_IT+0x42>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	bf14      	ite	ne
 800ae66:	2301      	movne	r3, #1
 800ae68:	2300      	moveq	r3, #0
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	e02f      	b.n	800aece <HAL_TIM_OC_Start_IT+0xa2>
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	2b08      	cmp	r3, #8
 800ae72:	d109      	bne.n	800ae88 <HAL_TIM_OC_Start_IT+0x5c>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	bf14      	ite	ne
 800ae80:	2301      	movne	r3, #1
 800ae82:	2300      	moveq	r3, #0
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	e022      	b.n	800aece <HAL_TIM_OC_Start_IT+0xa2>
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	2b0c      	cmp	r3, #12
 800ae8c:	d109      	bne.n	800aea2 <HAL_TIM_OC_Start_IT+0x76>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	bf14      	ite	ne
 800ae9a:	2301      	movne	r3, #1
 800ae9c:	2300      	moveq	r3, #0
 800ae9e:	b2db      	uxtb	r3, r3
 800aea0:	e015      	b.n	800aece <HAL_TIM_OC_Start_IT+0xa2>
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	2b10      	cmp	r3, #16
 800aea6:	d109      	bne.n	800aebc <HAL_TIM_OC_Start_IT+0x90>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	bf14      	ite	ne
 800aeb4:	2301      	movne	r3, #1
 800aeb6:	2300      	moveq	r3, #0
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	e008      	b.n	800aece <HAL_TIM_OC_Start_IT+0xa2>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	bf14      	ite	ne
 800aec8:	2301      	movne	r3, #1
 800aeca:	2300      	moveq	r3, #0
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d001      	beq.n	800aed6 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800aed2:	2301      	movs	r3, #1
 800aed4:	e0ec      	b.n	800b0b0 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d104      	bne.n	800aee6 <HAL_TIM_OC_Start_IT+0xba>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2202      	movs	r2, #2
 800aee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aee4:	e023      	b.n	800af2e <HAL_TIM_OC_Start_IT+0x102>
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	2b04      	cmp	r3, #4
 800aeea:	d104      	bne.n	800aef6 <HAL_TIM_OC_Start_IT+0xca>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2202      	movs	r2, #2
 800aef0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aef4:	e01b      	b.n	800af2e <HAL_TIM_OC_Start_IT+0x102>
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	2b08      	cmp	r3, #8
 800aefa:	d104      	bne.n	800af06 <HAL_TIM_OC_Start_IT+0xda>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2202      	movs	r2, #2
 800af00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af04:	e013      	b.n	800af2e <HAL_TIM_OC_Start_IT+0x102>
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	2b0c      	cmp	r3, #12
 800af0a:	d104      	bne.n	800af16 <HAL_TIM_OC_Start_IT+0xea>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2202      	movs	r2, #2
 800af10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800af14:	e00b      	b.n	800af2e <HAL_TIM_OC_Start_IT+0x102>
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	2b10      	cmp	r3, #16
 800af1a:	d104      	bne.n	800af26 <HAL_TIM_OC_Start_IT+0xfa>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2202      	movs	r2, #2
 800af20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af24:	e003      	b.n	800af2e <HAL_TIM_OC_Start_IT+0x102>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2202      	movs	r2, #2
 800af2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	2b0c      	cmp	r3, #12
 800af32:	d841      	bhi.n	800afb8 <HAL_TIM_OC_Start_IT+0x18c>
 800af34:	a201      	add	r2, pc, #4	; (adr r2, 800af3c <HAL_TIM_OC_Start_IT+0x110>)
 800af36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af3a:	bf00      	nop
 800af3c:	0800af71 	.word	0x0800af71
 800af40:	0800afb9 	.word	0x0800afb9
 800af44:	0800afb9 	.word	0x0800afb9
 800af48:	0800afb9 	.word	0x0800afb9
 800af4c:	0800af83 	.word	0x0800af83
 800af50:	0800afb9 	.word	0x0800afb9
 800af54:	0800afb9 	.word	0x0800afb9
 800af58:	0800afb9 	.word	0x0800afb9
 800af5c:	0800af95 	.word	0x0800af95
 800af60:	0800afb9 	.word	0x0800afb9
 800af64:	0800afb9 	.word	0x0800afb9
 800af68:	0800afb9 	.word	0x0800afb9
 800af6c:	0800afa7 	.word	0x0800afa7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	68da      	ldr	r2, [r3, #12]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f042 0202 	orr.w	r2, r2, #2
 800af7e:	60da      	str	r2, [r3, #12]
      break;
 800af80:	e01d      	b.n	800afbe <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	68da      	ldr	r2, [r3, #12]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f042 0204 	orr.w	r2, r2, #4
 800af90:	60da      	str	r2, [r3, #12]
      break;
 800af92:	e014      	b.n	800afbe <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	68da      	ldr	r2, [r3, #12]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f042 0208 	orr.w	r2, r2, #8
 800afa2:	60da      	str	r2, [r3, #12]
      break;
 800afa4:	e00b      	b.n	800afbe <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	68da      	ldr	r2, [r3, #12]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f042 0210 	orr.w	r2, r2, #16
 800afb4:	60da      	str	r2, [r3, #12]
      break;
 800afb6:	e002      	b.n	800afbe <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800afb8:	2301      	movs	r3, #1
 800afba:	73fb      	strb	r3, [r7, #15]
      break;
 800afbc:	bf00      	nop
  }

  if (status == HAL_OK)
 800afbe:	7bfb      	ldrb	r3, [r7, #15]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d174      	bne.n	800b0ae <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	2201      	movs	r2, #1
 800afca:	6839      	ldr	r1, [r7, #0]
 800afcc:	4618      	mov	r0, r3
 800afce:	f000 fea9 	bl	800bd24 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a38      	ldr	r2, [pc, #224]	; (800b0b8 <HAL_TIM_OC_Start_IT+0x28c>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d013      	beq.n	800b004 <HAL_TIM_OC_Start_IT+0x1d8>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a36      	ldr	r2, [pc, #216]	; (800b0bc <HAL_TIM_OC_Start_IT+0x290>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d00e      	beq.n	800b004 <HAL_TIM_OC_Start_IT+0x1d8>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a35      	ldr	r2, [pc, #212]	; (800b0c0 <HAL_TIM_OC_Start_IT+0x294>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d009      	beq.n	800b004 <HAL_TIM_OC_Start_IT+0x1d8>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4a33      	ldr	r2, [pc, #204]	; (800b0c4 <HAL_TIM_OC_Start_IT+0x298>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d004      	beq.n	800b004 <HAL_TIM_OC_Start_IT+0x1d8>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4a32      	ldr	r2, [pc, #200]	; (800b0c8 <HAL_TIM_OC_Start_IT+0x29c>)
 800b000:	4293      	cmp	r3, r2
 800b002:	d101      	bne.n	800b008 <HAL_TIM_OC_Start_IT+0x1dc>
 800b004:	2301      	movs	r3, #1
 800b006:	e000      	b.n	800b00a <HAL_TIM_OC_Start_IT+0x1de>
 800b008:	2300      	movs	r3, #0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d007      	beq.n	800b01e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b01c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4a25      	ldr	r2, [pc, #148]	; (800b0b8 <HAL_TIM_OC_Start_IT+0x28c>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d022      	beq.n	800b06e <HAL_TIM_OC_Start_IT+0x242>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b030:	d01d      	beq.n	800b06e <HAL_TIM_OC_Start_IT+0x242>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a25      	ldr	r2, [pc, #148]	; (800b0cc <HAL_TIM_OC_Start_IT+0x2a0>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d018      	beq.n	800b06e <HAL_TIM_OC_Start_IT+0x242>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4a23      	ldr	r2, [pc, #140]	; (800b0d0 <HAL_TIM_OC_Start_IT+0x2a4>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d013      	beq.n	800b06e <HAL_TIM_OC_Start_IT+0x242>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a22      	ldr	r2, [pc, #136]	; (800b0d4 <HAL_TIM_OC_Start_IT+0x2a8>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d00e      	beq.n	800b06e <HAL_TIM_OC_Start_IT+0x242>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a19      	ldr	r2, [pc, #100]	; (800b0bc <HAL_TIM_OC_Start_IT+0x290>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d009      	beq.n	800b06e <HAL_TIM_OC_Start_IT+0x242>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4a1e      	ldr	r2, [pc, #120]	; (800b0d8 <HAL_TIM_OC_Start_IT+0x2ac>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d004      	beq.n	800b06e <HAL_TIM_OC_Start_IT+0x242>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4a15      	ldr	r2, [pc, #84]	; (800b0c0 <HAL_TIM_OC_Start_IT+0x294>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d115      	bne.n	800b09a <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	689a      	ldr	r2, [r3, #8]
 800b074:	4b19      	ldr	r3, [pc, #100]	; (800b0dc <HAL_TIM_OC_Start_IT+0x2b0>)
 800b076:	4013      	ands	r3, r2
 800b078:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	2b06      	cmp	r3, #6
 800b07e:	d015      	beq.n	800b0ac <HAL_TIM_OC_Start_IT+0x280>
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b086:	d011      	beq.n	800b0ac <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f042 0201 	orr.w	r2, r2, #1
 800b096:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b098:	e008      	b.n	800b0ac <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f042 0201 	orr.w	r2, r2, #1
 800b0a8:	601a      	str	r2, [r3, #0]
 800b0aa:	e000      	b.n	800b0ae <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0ac:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b0ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3710      	adds	r7, #16
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	40010000 	.word	0x40010000
 800b0bc:	40010400 	.word	0x40010400
 800b0c0:	40014000 	.word	0x40014000
 800b0c4:	40014400 	.word	0x40014400
 800b0c8:	40014800 	.word	0x40014800
 800b0cc:	40000400 	.word	0x40000400
 800b0d0:	40000800 	.word	0x40000800
 800b0d4:	40000c00 	.word	0x40000c00
 800b0d8:	40001800 	.word	0x40001800
 800b0dc:	00010007 	.word	0x00010007

0800b0e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d101      	bne.n	800b0f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e049      	b.n	800b186 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d106      	bne.n	800b10c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f7f6 ffe0 	bl	80020cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2202      	movs	r2, #2
 800b110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	3304      	adds	r3, #4
 800b11c:	4619      	mov	r1, r3
 800b11e:	4610      	mov	r0, r2
 800b120:	f000 fa90 	bl	800b644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2201      	movs	r2, #1
 800b128:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2201      	movs	r2, #1
 800b130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2201      	movs	r2, #1
 800b138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2201      	movs	r2, #1
 800b140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2201      	movs	r2, #1
 800b148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2201      	movs	r2, #1
 800b150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2201      	movs	r2, #1
 800b158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2201      	movs	r2, #1
 800b160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2201      	movs	r2, #1
 800b170:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2201      	movs	r2, #1
 800b180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b184:	2300      	movs	r3, #0
}
 800b186:	4618      	mov	r0, r3
 800b188:	3708      	adds	r7, #8
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}

0800b18e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b18e:	b580      	push	{r7, lr}
 800b190:	b082      	sub	sp, #8
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	691b      	ldr	r3, [r3, #16]
 800b19c:	f003 0302 	and.w	r3, r3, #2
 800b1a0:	2b02      	cmp	r3, #2
 800b1a2:	d122      	bne.n	800b1ea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	f003 0302 	and.w	r3, r3, #2
 800b1ae:	2b02      	cmp	r3, #2
 800b1b0:	d11b      	bne.n	800b1ea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f06f 0202 	mvn.w	r2, #2
 800b1ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	699b      	ldr	r3, [r3, #24]
 800b1c8:	f003 0303 	and.w	r3, r3, #3
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d003      	beq.n	800b1d8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 fa19 	bl	800b608 <HAL_TIM_IC_CaptureCallback>
 800b1d6:	e005      	b.n	800b1e4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f7f5 fa15 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 fa1c 	bl	800b61c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	691b      	ldr	r3, [r3, #16]
 800b1f0:	f003 0304 	and.w	r3, r3, #4
 800b1f4:	2b04      	cmp	r3, #4
 800b1f6:	d122      	bne.n	800b23e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	f003 0304 	and.w	r3, r3, #4
 800b202:	2b04      	cmp	r3, #4
 800b204:	d11b      	bne.n	800b23e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f06f 0204 	mvn.w	r2, #4
 800b20e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2202      	movs	r2, #2
 800b214:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	699b      	ldr	r3, [r3, #24]
 800b21c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b220:	2b00      	cmp	r3, #0
 800b222:	d003      	beq.n	800b22c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 f9ef 	bl	800b608 <HAL_TIM_IC_CaptureCallback>
 800b22a:	e005      	b.n	800b238 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f7f5 f9eb 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f9f2 	bl	800b61c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	691b      	ldr	r3, [r3, #16]
 800b244:	f003 0308 	and.w	r3, r3, #8
 800b248:	2b08      	cmp	r3, #8
 800b24a:	d122      	bne.n	800b292 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	f003 0308 	and.w	r3, r3, #8
 800b256:	2b08      	cmp	r3, #8
 800b258:	d11b      	bne.n	800b292 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f06f 0208 	mvn.w	r2, #8
 800b262:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2204      	movs	r2, #4
 800b268:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	69db      	ldr	r3, [r3, #28]
 800b270:	f003 0303 	and.w	r3, r3, #3
 800b274:	2b00      	cmp	r3, #0
 800b276:	d003      	beq.n	800b280 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 f9c5 	bl	800b608 <HAL_TIM_IC_CaptureCallback>
 800b27e:	e005      	b.n	800b28c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f7f5 f9c1 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 f9c8 	bl	800b61c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2200      	movs	r2, #0
 800b290:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	691b      	ldr	r3, [r3, #16]
 800b298:	f003 0310 	and.w	r3, r3, #16
 800b29c:	2b10      	cmp	r3, #16
 800b29e:	d122      	bne.n	800b2e6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	f003 0310 	and.w	r3, r3, #16
 800b2aa:	2b10      	cmp	r3, #16
 800b2ac:	d11b      	bne.n	800b2e6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f06f 0210 	mvn.w	r2, #16
 800b2b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2208      	movs	r2, #8
 800b2bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	69db      	ldr	r3, [r3, #28]
 800b2c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d003      	beq.n	800b2d4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 f99b 	bl	800b608 <HAL_TIM_IC_CaptureCallback>
 800b2d2:	e005      	b.n	800b2e0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f7f5 f997 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 f99e 	bl	800b61c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	691b      	ldr	r3, [r3, #16]
 800b2ec:	f003 0301 	and.w	r3, r3, #1
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d10e      	bne.n	800b312 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	68db      	ldr	r3, [r3, #12]
 800b2fa:	f003 0301 	and.w	r3, r3, #1
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d107      	bne.n	800b312 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f06f 0201 	mvn.w	r2, #1
 800b30a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 f971 	bl	800b5f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b31c:	2b80      	cmp	r3, #128	; 0x80
 800b31e:	d10e      	bne.n	800b33e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	68db      	ldr	r3, [r3, #12]
 800b326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b32a:	2b80      	cmp	r3, #128	; 0x80
 800b32c:	d107      	bne.n	800b33e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 fe2f 	bl	800bf9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	691b      	ldr	r3, [r3, #16]
 800b344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b34c:	d10e      	bne.n	800b36c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b358:	2b80      	cmp	r3, #128	; 0x80
 800b35a:	d107      	bne.n	800b36c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 fe22 	bl	800bfb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	691b      	ldr	r3, [r3, #16]
 800b372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b376:	2b40      	cmp	r3, #64	; 0x40
 800b378:	d10e      	bne.n	800b398 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	68db      	ldr	r3, [r3, #12]
 800b380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b384:	2b40      	cmp	r3, #64	; 0x40
 800b386:	d107      	bne.n	800b398 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 f94c 	bl	800b630 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	691b      	ldr	r3, [r3, #16]
 800b39e:	f003 0320 	and.w	r3, r3, #32
 800b3a2:	2b20      	cmp	r3, #32
 800b3a4:	d10e      	bne.n	800b3c4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	68db      	ldr	r3, [r3, #12]
 800b3ac:	f003 0320 	and.w	r3, r3, #32
 800b3b0:	2b20      	cmp	r3, #32
 800b3b2:	d107      	bne.n	800b3c4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f06f 0220 	mvn.w	r2, #32
 800b3bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 fde2 	bl	800bf88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b3c4:	bf00      	nop
 800b3c6:	3708      	adds	r7, #8
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b086      	sub	sp, #24
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d101      	bne.n	800b3ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b3e6:	2302      	movs	r3, #2
 800b3e8:	e0ff      	b.n	800b5ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2b14      	cmp	r3, #20
 800b3f6:	f200 80f0 	bhi.w	800b5da <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b3fa:	a201      	add	r2, pc, #4	; (adr r2, 800b400 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b400:	0800b455 	.word	0x0800b455
 800b404:	0800b5db 	.word	0x0800b5db
 800b408:	0800b5db 	.word	0x0800b5db
 800b40c:	0800b5db 	.word	0x0800b5db
 800b410:	0800b495 	.word	0x0800b495
 800b414:	0800b5db 	.word	0x0800b5db
 800b418:	0800b5db 	.word	0x0800b5db
 800b41c:	0800b5db 	.word	0x0800b5db
 800b420:	0800b4d7 	.word	0x0800b4d7
 800b424:	0800b5db 	.word	0x0800b5db
 800b428:	0800b5db 	.word	0x0800b5db
 800b42c:	0800b5db 	.word	0x0800b5db
 800b430:	0800b517 	.word	0x0800b517
 800b434:	0800b5db 	.word	0x0800b5db
 800b438:	0800b5db 	.word	0x0800b5db
 800b43c:	0800b5db 	.word	0x0800b5db
 800b440:	0800b559 	.word	0x0800b559
 800b444:	0800b5db 	.word	0x0800b5db
 800b448:	0800b5db 	.word	0x0800b5db
 800b44c:	0800b5db 	.word	0x0800b5db
 800b450:	0800b599 	.word	0x0800b599
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	68b9      	ldr	r1, [r7, #8]
 800b45a:	4618      	mov	r0, r3
 800b45c:	f000 f98c 	bl	800b778 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	699a      	ldr	r2, [r3, #24]
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f042 0208 	orr.w	r2, r2, #8
 800b46e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	699a      	ldr	r2, [r3, #24]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f022 0204 	bic.w	r2, r2, #4
 800b47e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	6999      	ldr	r1, [r3, #24]
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	691a      	ldr	r2, [r3, #16]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	430a      	orrs	r2, r1
 800b490:	619a      	str	r2, [r3, #24]
      break;
 800b492:	e0a5      	b.n	800b5e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	68b9      	ldr	r1, [r7, #8]
 800b49a:	4618      	mov	r0, r3
 800b49c:	f000 f9fc 	bl	800b898 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	699a      	ldr	r2, [r3, #24]
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	699a      	ldr	r2, [r3, #24]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	6999      	ldr	r1, [r3, #24]
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	691b      	ldr	r3, [r3, #16]
 800b4ca:	021a      	lsls	r2, r3, #8
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	430a      	orrs	r2, r1
 800b4d2:	619a      	str	r2, [r3, #24]
      break;
 800b4d4:	e084      	b.n	800b5e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	68b9      	ldr	r1, [r7, #8]
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f000 fa65 	bl	800b9ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	69da      	ldr	r2, [r3, #28]
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f042 0208 	orr.w	r2, r2, #8
 800b4f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	69da      	ldr	r2, [r3, #28]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f022 0204 	bic.w	r2, r2, #4
 800b500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	69d9      	ldr	r1, [r3, #28]
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	691a      	ldr	r2, [r3, #16]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	430a      	orrs	r2, r1
 800b512:	61da      	str	r2, [r3, #28]
      break;
 800b514:	e064      	b.n	800b5e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	68b9      	ldr	r1, [r7, #8]
 800b51c:	4618      	mov	r0, r3
 800b51e:	f000 facd 	bl	800babc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	69da      	ldr	r2, [r3, #28]
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	69da      	ldr	r2, [r3, #28]
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	69d9      	ldr	r1, [r3, #28]
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	691b      	ldr	r3, [r3, #16]
 800b54c:	021a      	lsls	r2, r3, #8
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	430a      	orrs	r2, r1
 800b554:	61da      	str	r2, [r3, #28]
      break;
 800b556:	e043      	b.n	800b5e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	68b9      	ldr	r1, [r7, #8]
 800b55e:	4618      	mov	r0, r3
 800b560:	f000 fb16 	bl	800bb90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f042 0208 	orr.w	r2, r2, #8
 800b572:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f022 0204 	bic.w	r2, r2, #4
 800b582:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	691a      	ldr	r2, [r3, #16]
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	430a      	orrs	r2, r1
 800b594:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b596:	e023      	b.n	800b5e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	68b9      	ldr	r1, [r7, #8]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f000 fb5a 	bl	800bc58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b5b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b5c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	691b      	ldr	r3, [r3, #16]
 800b5ce:	021a      	lsls	r2, r3, #8
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	430a      	orrs	r2, r1
 800b5d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b5d8:	e002      	b.n	800b5e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	75fb      	strb	r3, [r7, #23]
      break;
 800b5de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b5e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3718      	adds	r7, #24
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop

0800b5f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b5fc:	bf00      	nop
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b610:	bf00      	nop
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b624:	bf00      	nop
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b638:	bf00      	nop
 800b63a:	370c      	adds	r7, #12
 800b63c:	46bd      	mov	sp, r7
 800b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b642:	4770      	bx	lr

0800b644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b644:	b480      	push	{r7}
 800b646:	b085      	sub	sp, #20
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	4a40      	ldr	r2, [pc, #256]	; (800b758 <TIM_Base_SetConfig+0x114>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d013      	beq.n	800b684 <TIM_Base_SetConfig+0x40>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b662:	d00f      	beq.n	800b684 <TIM_Base_SetConfig+0x40>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	4a3d      	ldr	r2, [pc, #244]	; (800b75c <TIM_Base_SetConfig+0x118>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d00b      	beq.n	800b684 <TIM_Base_SetConfig+0x40>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	4a3c      	ldr	r2, [pc, #240]	; (800b760 <TIM_Base_SetConfig+0x11c>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d007      	beq.n	800b684 <TIM_Base_SetConfig+0x40>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4a3b      	ldr	r2, [pc, #236]	; (800b764 <TIM_Base_SetConfig+0x120>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d003      	beq.n	800b684 <TIM_Base_SetConfig+0x40>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	4a3a      	ldr	r2, [pc, #232]	; (800b768 <TIM_Base_SetConfig+0x124>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d108      	bne.n	800b696 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b68a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	68fa      	ldr	r2, [r7, #12]
 800b692:	4313      	orrs	r3, r2
 800b694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	4a2f      	ldr	r2, [pc, #188]	; (800b758 <TIM_Base_SetConfig+0x114>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d01f      	beq.n	800b6de <TIM_Base_SetConfig+0x9a>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6a4:	d01b      	beq.n	800b6de <TIM_Base_SetConfig+0x9a>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	4a2c      	ldr	r2, [pc, #176]	; (800b75c <TIM_Base_SetConfig+0x118>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d017      	beq.n	800b6de <TIM_Base_SetConfig+0x9a>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	4a2b      	ldr	r2, [pc, #172]	; (800b760 <TIM_Base_SetConfig+0x11c>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d013      	beq.n	800b6de <TIM_Base_SetConfig+0x9a>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	4a2a      	ldr	r2, [pc, #168]	; (800b764 <TIM_Base_SetConfig+0x120>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d00f      	beq.n	800b6de <TIM_Base_SetConfig+0x9a>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	4a29      	ldr	r2, [pc, #164]	; (800b768 <TIM_Base_SetConfig+0x124>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d00b      	beq.n	800b6de <TIM_Base_SetConfig+0x9a>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	4a28      	ldr	r2, [pc, #160]	; (800b76c <TIM_Base_SetConfig+0x128>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d007      	beq.n	800b6de <TIM_Base_SetConfig+0x9a>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	4a27      	ldr	r2, [pc, #156]	; (800b770 <TIM_Base_SetConfig+0x12c>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d003      	beq.n	800b6de <TIM_Base_SetConfig+0x9a>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	4a26      	ldr	r2, [pc, #152]	; (800b774 <TIM_Base_SetConfig+0x130>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d108      	bne.n	800b6f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	68db      	ldr	r3, [r3, #12]
 800b6ea:	68fa      	ldr	r2, [r7, #12]
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	695b      	ldr	r3, [r3, #20]
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	68fa      	ldr	r2, [r7, #12]
 800b702:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	689a      	ldr	r2, [r3, #8]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	681a      	ldr	r2, [r3, #0]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	4a10      	ldr	r2, [pc, #64]	; (800b758 <TIM_Base_SetConfig+0x114>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d00f      	beq.n	800b73c <TIM_Base_SetConfig+0xf8>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4a12      	ldr	r2, [pc, #72]	; (800b768 <TIM_Base_SetConfig+0x124>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d00b      	beq.n	800b73c <TIM_Base_SetConfig+0xf8>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	4a11      	ldr	r2, [pc, #68]	; (800b76c <TIM_Base_SetConfig+0x128>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d007      	beq.n	800b73c <TIM_Base_SetConfig+0xf8>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	4a10      	ldr	r2, [pc, #64]	; (800b770 <TIM_Base_SetConfig+0x12c>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d003      	beq.n	800b73c <TIM_Base_SetConfig+0xf8>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	4a0f      	ldr	r2, [pc, #60]	; (800b774 <TIM_Base_SetConfig+0x130>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d103      	bne.n	800b744 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	691a      	ldr	r2, [r3, #16]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2201      	movs	r2, #1
 800b748:	615a      	str	r2, [r3, #20]
}
 800b74a:	bf00      	nop
 800b74c:	3714      	adds	r7, #20
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop
 800b758:	40010000 	.word	0x40010000
 800b75c:	40000400 	.word	0x40000400
 800b760:	40000800 	.word	0x40000800
 800b764:	40000c00 	.word	0x40000c00
 800b768:	40010400 	.word	0x40010400
 800b76c:	40014000 	.word	0x40014000
 800b770:	40014400 	.word	0x40014400
 800b774:	40014800 	.word	0x40014800

0800b778 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b778:	b480      	push	{r7}
 800b77a:	b087      	sub	sp, #28
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6a1b      	ldr	r3, [r3, #32]
 800b786:	f023 0201 	bic.w	r2, r3, #1
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6a1b      	ldr	r3, [r3, #32]
 800b792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	699b      	ldr	r3, [r3, #24]
 800b79e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b7a0:	68fa      	ldr	r2, [r7, #12]
 800b7a2:	4b37      	ldr	r3, [pc, #220]	; (800b880 <TIM_OC1_SetConfig+0x108>)
 800b7a4:	4013      	ands	r3, r2
 800b7a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f023 0303 	bic.w	r3, r3, #3
 800b7ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	68fa      	ldr	r2, [r7, #12]
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	f023 0302 	bic.w	r3, r3, #2
 800b7c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	697a      	ldr	r2, [r7, #20]
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	4a2d      	ldr	r2, [pc, #180]	; (800b884 <TIM_OC1_SetConfig+0x10c>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d00f      	beq.n	800b7f4 <TIM_OC1_SetConfig+0x7c>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	4a2c      	ldr	r2, [pc, #176]	; (800b888 <TIM_OC1_SetConfig+0x110>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d00b      	beq.n	800b7f4 <TIM_OC1_SetConfig+0x7c>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	4a2b      	ldr	r2, [pc, #172]	; (800b88c <TIM_OC1_SetConfig+0x114>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d007      	beq.n	800b7f4 <TIM_OC1_SetConfig+0x7c>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	4a2a      	ldr	r2, [pc, #168]	; (800b890 <TIM_OC1_SetConfig+0x118>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d003      	beq.n	800b7f4 <TIM_OC1_SetConfig+0x7c>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	4a29      	ldr	r2, [pc, #164]	; (800b894 <TIM_OC1_SetConfig+0x11c>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d10c      	bne.n	800b80e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	f023 0308 	bic.w	r3, r3, #8
 800b7fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	697a      	ldr	r2, [r7, #20]
 800b802:	4313      	orrs	r3, r2
 800b804:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	f023 0304 	bic.w	r3, r3, #4
 800b80c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	4a1c      	ldr	r2, [pc, #112]	; (800b884 <TIM_OC1_SetConfig+0x10c>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d00f      	beq.n	800b836 <TIM_OC1_SetConfig+0xbe>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	4a1b      	ldr	r2, [pc, #108]	; (800b888 <TIM_OC1_SetConfig+0x110>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d00b      	beq.n	800b836 <TIM_OC1_SetConfig+0xbe>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	4a1a      	ldr	r2, [pc, #104]	; (800b88c <TIM_OC1_SetConfig+0x114>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d007      	beq.n	800b836 <TIM_OC1_SetConfig+0xbe>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	4a19      	ldr	r2, [pc, #100]	; (800b890 <TIM_OC1_SetConfig+0x118>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d003      	beq.n	800b836 <TIM_OC1_SetConfig+0xbe>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	4a18      	ldr	r2, [pc, #96]	; (800b894 <TIM_OC1_SetConfig+0x11c>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d111      	bne.n	800b85a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b83c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	695b      	ldr	r3, [r3, #20]
 800b84a:	693a      	ldr	r2, [r7, #16]
 800b84c:	4313      	orrs	r3, r2
 800b84e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	699b      	ldr	r3, [r3, #24]
 800b854:	693a      	ldr	r2, [r7, #16]
 800b856:	4313      	orrs	r3, r2
 800b858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	693a      	ldr	r2, [r7, #16]
 800b85e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	68fa      	ldr	r2, [r7, #12]
 800b864:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	685a      	ldr	r2, [r3, #4]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	697a      	ldr	r2, [r7, #20]
 800b872:	621a      	str	r2, [r3, #32]
}
 800b874:	bf00      	nop
 800b876:	371c      	adds	r7, #28
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr
 800b880:	fffeff8f 	.word	0xfffeff8f
 800b884:	40010000 	.word	0x40010000
 800b888:	40010400 	.word	0x40010400
 800b88c:	40014000 	.word	0x40014000
 800b890:	40014400 	.word	0x40014400
 800b894:	40014800 	.word	0x40014800

0800b898 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b898:	b480      	push	{r7}
 800b89a:	b087      	sub	sp, #28
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6a1b      	ldr	r3, [r3, #32]
 800b8a6:	f023 0210 	bic.w	r2, r3, #16
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a1b      	ldr	r3, [r3, #32]
 800b8b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	699b      	ldr	r3, [r3, #24]
 800b8be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	4b34      	ldr	r3, [pc, #208]	; (800b994 <TIM_OC2_SetConfig+0xfc>)
 800b8c4:	4013      	ands	r3, r2
 800b8c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	021b      	lsls	r3, r3, #8
 800b8d6:	68fa      	ldr	r2, [r7, #12]
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	f023 0320 	bic.w	r3, r3, #32
 800b8e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	011b      	lsls	r3, r3, #4
 800b8ea:	697a      	ldr	r2, [r7, #20]
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4a29      	ldr	r2, [pc, #164]	; (800b998 <TIM_OC2_SetConfig+0x100>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d003      	beq.n	800b900 <TIM_OC2_SetConfig+0x68>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4a28      	ldr	r2, [pc, #160]	; (800b99c <TIM_OC2_SetConfig+0x104>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d10d      	bne.n	800b91c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	011b      	lsls	r3, r3, #4
 800b90e:	697a      	ldr	r2, [r7, #20]
 800b910:	4313      	orrs	r3, r2
 800b912:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b91a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	4a1e      	ldr	r2, [pc, #120]	; (800b998 <TIM_OC2_SetConfig+0x100>)
 800b920:	4293      	cmp	r3, r2
 800b922:	d00f      	beq.n	800b944 <TIM_OC2_SetConfig+0xac>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	4a1d      	ldr	r2, [pc, #116]	; (800b99c <TIM_OC2_SetConfig+0x104>)
 800b928:	4293      	cmp	r3, r2
 800b92a:	d00b      	beq.n	800b944 <TIM_OC2_SetConfig+0xac>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	4a1c      	ldr	r2, [pc, #112]	; (800b9a0 <TIM_OC2_SetConfig+0x108>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d007      	beq.n	800b944 <TIM_OC2_SetConfig+0xac>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	4a1b      	ldr	r2, [pc, #108]	; (800b9a4 <TIM_OC2_SetConfig+0x10c>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d003      	beq.n	800b944 <TIM_OC2_SetConfig+0xac>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	4a1a      	ldr	r2, [pc, #104]	; (800b9a8 <TIM_OC2_SetConfig+0x110>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d113      	bne.n	800b96c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b94a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b952:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	695b      	ldr	r3, [r3, #20]
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	693a      	ldr	r2, [r7, #16]
 800b95c:	4313      	orrs	r3, r2
 800b95e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	699b      	ldr	r3, [r3, #24]
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	693a      	ldr	r2, [r7, #16]
 800b968:	4313      	orrs	r3, r2
 800b96a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	693a      	ldr	r2, [r7, #16]
 800b970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	68fa      	ldr	r2, [r7, #12]
 800b976:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	685a      	ldr	r2, [r3, #4]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	697a      	ldr	r2, [r7, #20]
 800b984:	621a      	str	r2, [r3, #32]
}
 800b986:	bf00      	nop
 800b988:	371c      	adds	r7, #28
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop
 800b994:	feff8fff 	.word	0xfeff8fff
 800b998:	40010000 	.word	0x40010000
 800b99c:	40010400 	.word	0x40010400
 800b9a0:	40014000 	.word	0x40014000
 800b9a4:	40014400 	.word	0x40014400
 800b9a8:	40014800 	.word	0x40014800

0800b9ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b087      	sub	sp, #28
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6a1b      	ldr	r3, [r3, #32]
 800b9ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6a1b      	ldr	r3, [r3, #32]
 800b9c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	69db      	ldr	r3, [r3, #28]
 800b9d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b9d4:	68fa      	ldr	r2, [r7, #12]
 800b9d6:	4b33      	ldr	r3, [pc, #204]	; (800baa4 <TIM_OC3_SetConfig+0xf8>)
 800b9d8:	4013      	ands	r3, r2
 800b9da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f023 0303 	bic.w	r3, r3, #3
 800b9e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b9f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	689b      	ldr	r3, [r3, #8]
 800b9fa:	021b      	lsls	r3, r3, #8
 800b9fc:	697a      	ldr	r2, [r7, #20]
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	4a28      	ldr	r2, [pc, #160]	; (800baa8 <TIM_OC3_SetConfig+0xfc>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d003      	beq.n	800ba12 <TIM_OC3_SetConfig+0x66>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	4a27      	ldr	r2, [pc, #156]	; (800baac <TIM_OC3_SetConfig+0x100>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d10d      	bne.n	800ba2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	021b      	lsls	r3, r3, #8
 800ba20:	697a      	ldr	r2, [r7, #20]
 800ba22:	4313      	orrs	r3, r2
 800ba24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	4a1d      	ldr	r2, [pc, #116]	; (800baa8 <TIM_OC3_SetConfig+0xfc>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d00f      	beq.n	800ba56 <TIM_OC3_SetConfig+0xaa>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	4a1c      	ldr	r2, [pc, #112]	; (800baac <TIM_OC3_SetConfig+0x100>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d00b      	beq.n	800ba56 <TIM_OC3_SetConfig+0xaa>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	4a1b      	ldr	r2, [pc, #108]	; (800bab0 <TIM_OC3_SetConfig+0x104>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d007      	beq.n	800ba56 <TIM_OC3_SetConfig+0xaa>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	4a1a      	ldr	r2, [pc, #104]	; (800bab4 <TIM_OC3_SetConfig+0x108>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d003      	beq.n	800ba56 <TIM_OC3_SetConfig+0xaa>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	4a19      	ldr	r2, [pc, #100]	; (800bab8 <TIM_OC3_SetConfig+0x10c>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d113      	bne.n	800ba7e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ba64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	695b      	ldr	r3, [r3, #20]
 800ba6a:	011b      	lsls	r3, r3, #4
 800ba6c:	693a      	ldr	r2, [r7, #16]
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	699b      	ldr	r3, [r3, #24]
 800ba76:	011b      	lsls	r3, r3, #4
 800ba78:	693a      	ldr	r2, [r7, #16]
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	693a      	ldr	r2, [r7, #16]
 800ba82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	68fa      	ldr	r2, [r7, #12]
 800ba88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	685a      	ldr	r2, [r3, #4]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	697a      	ldr	r2, [r7, #20]
 800ba96:	621a      	str	r2, [r3, #32]
}
 800ba98:	bf00      	nop
 800ba9a:	371c      	adds	r7, #28
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr
 800baa4:	fffeff8f 	.word	0xfffeff8f
 800baa8:	40010000 	.word	0x40010000
 800baac:	40010400 	.word	0x40010400
 800bab0:	40014000 	.word	0x40014000
 800bab4:	40014400 	.word	0x40014400
 800bab8:	40014800 	.word	0x40014800

0800babc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800babc:	b480      	push	{r7}
 800babe:	b087      	sub	sp, #28
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6a1b      	ldr	r3, [r3, #32]
 800baca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6a1b      	ldr	r3, [r3, #32]
 800bad6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	69db      	ldr	r3, [r3, #28]
 800bae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	4b24      	ldr	r3, [pc, #144]	; (800bb78 <TIM_OC4_SetConfig+0xbc>)
 800bae8:	4013      	ands	r3, r2
 800baea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800baf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	021b      	lsls	r3, r3, #8
 800bafa:	68fa      	ldr	r2, [r7, #12]
 800bafc:	4313      	orrs	r3, r2
 800bafe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	689b      	ldr	r3, [r3, #8]
 800bb0c:	031b      	lsls	r3, r3, #12
 800bb0e:	693a      	ldr	r2, [r7, #16]
 800bb10:	4313      	orrs	r3, r2
 800bb12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	4a19      	ldr	r2, [pc, #100]	; (800bb7c <TIM_OC4_SetConfig+0xc0>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d00f      	beq.n	800bb3c <TIM_OC4_SetConfig+0x80>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	4a18      	ldr	r2, [pc, #96]	; (800bb80 <TIM_OC4_SetConfig+0xc4>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d00b      	beq.n	800bb3c <TIM_OC4_SetConfig+0x80>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	4a17      	ldr	r2, [pc, #92]	; (800bb84 <TIM_OC4_SetConfig+0xc8>)
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d007      	beq.n	800bb3c <TIM_OC4_SetConfig+0x80>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	4a16      	ldr	r2, [pc, #88]	; (800bb88 <TIM_OC4_SetConfig+0xcc>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d003      	beq.n	800bb3c <TIM_OC4_SetConfig+0x80>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	4a15      	ldr	r2, [pc, #84]	; (800bb8c <TIM_OC4_SetConfig+0xd0>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d109      	bne.n	800bb50 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	695b      	ldr	r3, [r3, #20]
 800bb48:	019b      	lsls	r3, r3, #6
 800bb4a:	697a      	ldr	r2, [r7, #20]
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	697a      	ldr	r2, [r7, #20]
 800bb54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	68fa      	ldr	r2, [r7, #12]
 800bb5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	685a      	ldr	r2, [r3, #4]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	693a      	ldr	r2, [r7, #16]
 800bb68:	621a      	str	r2, [r3, #32]
}
 800bb6a:	bf00      	nop
 800bb6c:	371c      	adds	r7, #28
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr
 800bb76:	bf00      	nop
 800bb78:	feff8fff 	.word	0xfeff8fff
 800bb7c:	40010000 	.word	0x40010000
 800bb80:	40010400 	.word	0x40010400
 800bb84:	40014000 	.word	0x40014000
 800bb88:	40014400 	.word	0x40014400
 800bb8c:	40014800 	.word	0x40014800

0800bb90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b087      	sub	sp, #28
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6a1b      	ldr	r3, [r3, #32]
 800bb9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6a1b      	ldr	r3, [r3, #32]
 800bbaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bbb8:	68fa      	ldr	r2, [r7, #12]
 800bbba:	4b21      	ldr	r3, [pc, #132]	; (800bc40 <TIM_OC5_SetConfig+0xb0>)
 800bbbc:	4013      	ands	r3, r2
 800bbbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	68fa      	ldr	r2, [r7, #12]
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bbd0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	689b      	ldr	r3, [r3, #8]
 800bbd6:	041b      	lsls	r3, r3, #16
 800bbd8:	693a      	ldr	r2, [r7, #16]
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	4a18      	ldr	r2, [pc, #96]	; (800bc44 <TIM_OC5_SetConfig+0xb4>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d00f      	beq.n	800bc06 <TIM_OC5_SetConfig+0x76>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	4a17      	ldr	r2, [pc, #92]	; (800bc48 <TIM_OC5_SetConfig+0xb8>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d00b      	beq.n	800bc06 <TIM_OC5_SetConfig+0x76>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	4a16      	ldr	r2, [pc, #88]	; (800bc4c <TIM_OC5_SetConfig+0xbc>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d007      	beq.n	800bc06 <TIM_OC5_SetConfig+0x76>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	4a15      	ldr	r2, [pc, #84]	; (800bc50 <TIM_OC5_SetConfig+0xc0>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d003      	beq.n	800bc06 <TIM_OC5_SetConfig+0x76>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	4a14      	ldr	r2, [pc, #80]	; (800bc54 <TIM_OC5_SetConfig+0xc4>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d109      	bne.n	800bc1a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	695b      	ldr	r3, [r3, #20]
 800bc12:	021b      	lsls	r3, r3, #8
 800bc14:	697a      	ldr	r2, [r7, #20]
 800bc16:	4313      	orrs	r3, r2
 800bc18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	697a      	ldr	r2, [r7, #20]
 800bc1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	68fa      	ldr	r2, [r7, #12]
 800bc24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	685a      	ldr	r2, [r3, #4]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	693a      	ldr	r2, [r7, #16]
 800bc32:	621a      	str	r2, [r3, #32]
}
 800bc34:	bf00      	nop
 800bc36:	371c      	adds	r7, #28
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr
 800bc40:	fffeff8f 	.word	0xfffeff8f
 800bc44:	40010000 	.word	0x40010000
 800bc48:	40010400 	.word	0x40010400
 800bc4c:	40014000 	.word	0x40014000
 800bc50:	40014400 	.word	0x40014400
 800bc54:	40014800 	.word	0x40014800

0800bc58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b087      	sub	sp, #28
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6a1b      	ldr	r3, [r3, #32]
 800bc66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6a1b      	ldr	r3, [r3, #32]
 800bc72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bc80:	68fa      	ldr	r2, [r7, #12]
 800bc82:	4b22      	ldr	r3, [pc, #136]	; (800bd0c <TIM_OC6_SetConfig+0xb4>)
 800bc84:	4013      	ands	r3, r2
 800bc86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	021b      	lsls	r3, r3, #8
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	4313      	orrs	r3, r2
 800bc92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bc9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	689b      	ldr	r3, [r3, #8]
 800bca0:	051b      	lsls	r3, r3, #20
 800bca2:	693a      	ldr	r2, [r7, #16]
 800bca4:	4313      	orrs	r3, r2
 800bca6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	4a19      	ldr	r2, [pc, #100]	; (800bd10 <TIM_OC6_SetConfig+0xb8>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d00f      	beq.n	800bcd0 <TIM_OC6_SetConfig+0x78>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	4a18      	ldr	r2, [pc, #96]	; (800bd14 <TIM_OC6_SetConfig+0xbc>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d00b      	beq.n	800bcd0 <TIM_OC6_SetConfig+0x78>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	4a17      	ldr	r2, [pc, #92]	; (800bd18 <TIM_OC6_SetConfig+0xc0>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d007      	beq.n	800bcd0 <TIM_OC6_SetConfig+0x78>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	4a16      	ldr	r2, [pc, #88]	; (800bd1c <TIM_OC6_SetConfig+0xc4>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d003      	beq.n	800bcd0 <TIM_OC6_SetConfig+0x78>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a15      	ldr	r2, [pc, #84]	; (800bd20 <TIM_OC6_SetConfig+0xc8>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d109      	bne.n	800bce4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bcd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	695b      	ldr	r3, [r3, #20]
 800bcdc:	029b      	lsls	r3, r3, #10
 800bcde:	697a      	ldr	r2, [r7, #20]
 800bce0:	4313      	orrs	r3, r2
 800bce2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	697a      	ldr	r2, [r7, #20]
 800bce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	68fa      	ldr	r2, [r7, #12]
 800bcee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	685a      	ldr	r2, [r3, #4]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	693a      	ldr	r2, [r7, #16]
 800bcfc:	621a      	str	r2, [r3, #32]
}
 800bcfe:	bf00      	nop
 800bd00:	371c      	adds	r7, #28
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop
 800bd0c:	feff8fff 	.word	0xfeff8fff
 800bd10:	40010000 	.word	0x40010000
 800bd14:	40010400 	.word	0x40010400
 800bd18:	40014000 	.word	0x40014000
 800bd1c:	40014400 	.word	0x40014400
 800bd20:	40014800 	.word	0x40014800

0800bd24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b087      	sub	sp, #28
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	f003 031f 	and.w	r3, r3, #31
 800bd36:	2201      	movs	r2, #1
 800bd38:	fa02 f303 	lsl.w	r3, r2, r3
 800bd3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	6a1a      	ldr	r2, [r3, #32]
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	43db      	mvns	r3, r3
 800bd46:	401a      	ands	r2, r3
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	6a1a      	ldr	r2, [r3, #32]
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	f003 031f 	and.w	r3, r3, #31
 800bd56:	6879      	ldr	r1, [r7, #4]
 800bd58:	fa01 f303 	lsl.w	r3, r1, r3
 800bd5c:	431a      	orrs	r2, r3
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	621a      	str	r2, [r3, #32]
}
 800bd62:	bf00      	nop
 800bd64:	371c      	adds	r7, #28
 800bd66:	46bd      	mov	sp, r7
 800bd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6c:	4770      	bx	lr
	...

0800bd70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b085      	sub	sp, #20
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d101      	bne.n	800bd88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bd84:	2302      	movs	r3, #2
 800bd86:	e06d      	b.n	800be64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2202      	movs	r2, #2
 800bd94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	689b      	ldr	r3, [r3, #8]
 800bda6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a30      	ldr	r2, [pc, #192]	; (800be70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d004      	beq.n	800bdbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a2f      	ldr	r2, [pc, #188]	; (800be74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d108      	bne.n	800bdce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bdc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	68fa      	ldr	r2, [r7, #12]
 800bddc:	4313      	orrs	r3, r2
 800bdde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	68fa      	ldr	r2, [r7, #12]
 800bde6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	4a20      	ldr	r2, [pc, #128]	; (800be70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d022      	beq.n	800be38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdfa:	d01d      	beq.n	800be38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4a1d      	ldr	r2, [pc, #116]	; (800be78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d018      	beq.n	800be38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	4a1c      	ldr	r2, [pc, #112]	; (800be7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d013      	beq.n	800be38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4a1a      	ldr	r2, [pc, #104]	; (800be80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d00e      	beq.n	800be38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4a15      	ldr	r2, [pc, #84]	; (800be74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d009      	beq.n	800be38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4a16      	ldr	r2, [pc, #88]	; (800be84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d004      	beq.n	800be38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4a15      	ldr	r2, [pc, #84]	; (800be88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d10c      	bne.n	800be52 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	689b      	ldr	r3, [r3, #8]
 800be44:	68ba      	ldr	r2, [r7, #8]
 800be46:	4313      	orrs	r3, r2
 800be48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	68ba      	ldr	r2, [r7, #8]
 800be50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2201      	movs	r2, #1
 800be56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2200      	movs	r2, #0
 800be5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be62:	2300      	movs	r3, #0
}
 800be64:	4618      	mov	r0, r3
 800be66:	3714      	adds	r7, #20
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr
 800be70:	40010000 	.word	0x40010000
 800be74:	40010400 	.word	0x40010400
 800be78:	40000400 	.word	0x40000400
 800be7c:	40000800 	.word	0x40000800
 800be80:	40000c00 	.word	0x40000c00
 800be84:	40001800 	.word	0x40001800
 800be88:	40014000 	.word	0x40014000

0800be8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b085      	sub	sp, #20
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800be96:	2300      	movs	r3, #0
 800be98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	d101      	bne.n	800bea8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bea4:	2302      	movs	r3, #2
 800bea6:	e065      	b.n	800bf74 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2201      	movs	r2, #1
 800beac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	68db      	ldr	r3, [r3, #12]
 800beba:	4313      	orrs	r3, r2
 800bebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	4313      	orrs	r3, r2
 800beca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	4313      	orrs	r3, r2
 800bed8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4313      	orrs	r3, r2
 800bee6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	691b      	ldr	r3, [r3, #16]
 800bef2:	4313      	orrs	r3, r2
 800bef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	695b      	ldr	r3, [r3, #20]
 800bf00:	4313      	orrs	r3, r2
 800bf02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	699b      	ldr	r3, [r3, #24]
 800bf1c:	041b      	lsls	r3, r3, #16
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4a16      	ldr	r2, [pc, #88]	; (800bf80 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d004      	beq.n	800bf36 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4a14      	ldr	r2, [pc, #80]	; (800bf84 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d115      	bne.n	800bf62 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf40:	051b      	lsls	r3, r3, #20
 800bf42:	4313      	orrs	r3, r2
 800bf44:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	69db      	ldr	r3, [r3, #28]
 800bf50:	4313      	orrs	r3, r2
 800bf52:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	6a1b      	ldr	r3, [r3, #32]
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	68fa      	ldr	r2, [r7, #12]
 800bf68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf72:	2300      	movs	r3, #0
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3714      	adds	r7, #20
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr
 800bf80:	40010000 	.word	0x40010000
 800bf84:	40010400 	.word	0x40010400

0800bf88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b083      	sub	sp, #12
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf90:	bf00      	nop
 800bf92:	370c      	adds	r7, #12
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bfa4:	bf00      	nop
 800bfa6:	370c      	adds	r7, #12
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr

0800bfb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bfb8:	bf00      	nop
 800bfba:	370c      	adds	r7, #12
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d101      	bne.n	800bfd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e042      	b.n	800c05c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d106      	bne.n	800bfee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f7f6 f931 	bl	8002250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2224      	movs	r2, #36	; 0x24
 800bff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f022 0201 	bic.w	r2, r2, #1
 800c004:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 f92e 	bl	800c268 <UART_SetConfig>
 800c00c:	4603      	mov	r3, r0
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d101      	bne.n	800c016 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c012:	2301      	movs	r3, #1
 800c014:	e022      	b.n	800c05c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d002      	beq.n	800c024 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 fe8a 	bl	800cd38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	685a      	ldr	r2, [r3, #4]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	689a      	ldr	r2, [r3, #8]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f042 0201 	orr.w	r2, r2, #1
 800c052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 ff11 	bl	800ce7c <UART_CheckIdleState>
 800c05a:	4603      	mov	r3, r0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3708      	adds	r7, #8
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b08a      	sub	sp, #40	; 0x28
 800c068:	af02      	add	r7, sp, #8
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	603b      	str	r3, [r7, #0]
 800c070:	4613      	mov	r3, r2
 800c072:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c07a:	2b20      	cmp	r3, #32
 800c07c:	f040 8083 	bne.w	800c186 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d002      	beq.n	800c08c <HAL_UART_Transmit+0x28>
 800c086:	88fb      	ldrh	r3, [r7, #6]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d101      	bne.n	800c090 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c08c:	2301      	movs	r3, #1
 800c08e:	e07b      	b.n	800c188 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c096:	2b01      	cmp	r3, #1
 800c098:	d101      	bne.n	800c09e <HAL_UART_Transmit+0x3a>
 800c09a:	2302      	movs	r3, #2
 800c09c:	e074      	b.n	800c188 <HAL_UART_Transmit+0x124>
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2221      	movs	r2, #33	; 0x21
 800c0b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c0b6:	f7f6 fad9 	bl	800266c <HAL_GetTick>
 800c0ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	88fa      	ldrh	r2, [r7, #6]
 800c0c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	88fa      	ldrh	r2, [r7, #6]
 800c0c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	689b      	ldr	r3, [r3, #8]
 800c0d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0d4:	d108      	bne.n	800c0e8 <HAL_UART_Transmit+0x84>
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	691b      	ldr	r3, [r3, #16]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d104      	bne.n	800c0e8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	61bb      	str	r3, [r7, #24]
 800c0e6:	e003      	b.n	800c0f0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c0f8:	e02c      	b.n	800c154 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	9300      	str	r3, [sp, #0]
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	2200      	movs	r2, #0
 800c102:	2180      	movs	r1, #128	; 0x80
 800c104:	68f8      	ldr	r0, [r7, #12]
 800c106:	f000 ff04 	bl	800cf12 <UART_WaitOnFlagUntilTimeout>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d001      	beq.n	800c114 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c110:	2303      	movs	r3, #3
 800c112:	e039      	b.n	800c188 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d10b      	bne.n	800c132 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c11a:	69bb      	ldr	r3, [r7, #24]
 800c11c:	881b      	ldrh	r3, [r3, #0]
 800c11e:	461a      	mov	r2, r3
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c128:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c12a:	69bb      	ldr	r3, [r7, #24]
 800c12c:	3302      	adds	r3, #2
 800c12e:	61bb      	str	r3, [r7, #24]
 800c130:	e007      	b.n	800c142 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c132:	69fb      	ldr	r3, [r7, #28]
 800c134:	781a      	ldrb	r2, [r3, #0]
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c13c:	69fb      	ldr	r3, [r7, #28]
 800c13e:	3301      	adds	r3, #1
 800c140:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c148:	b29b      	uxth	r3, r3
 800c14a:	3b01      	subs	r3, #1
 800c14c:	b29a      	uxth	r2, r3
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c15a:	b29b      	uxth	r3, r3
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d1cc      	bne.n	800c0fa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	9300      	str	r3, [sp, #0]
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	2200      	movs	r2, #0
 800c168:	2140      	movs	r1, #64	; 0x40
 800c16a:	68f8      	ldr	r0, [r7, #12]
 800c16c:	f000 fed1 	bl	800cf12 <UART_WaitOnFlagUntilTimeout>
 800c170:	4603      	mov	r3, r0
 800c172:	2b00      	cmp	r3, #0
 800c174:	d001      	beq.n	800c17a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c176:	2303      	movs	r3, #3
 800c178:	e006      	b.n	800c188 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2220      	movs	r2, #32
 800c17e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c182:	2300      	movs	r3, #0
 800c184:	e000      	b.n	800c188 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c186:	2302      	movs	r3, #2
  }
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3720      	adds	r7, #32
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b08a      	sub	sp, #40	; 0x28
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	4613      	mov	r3, r2
 800c19c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1a4:	2b20      	cmp	r3, #32
 800c1a6:	d142      	bne.n	800c22e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d002      	beq.n	800c1b4 <HAL_UART_Receive_IT+0x24>
 800c1ae:	88fb      	ldrh	r3, [r7, #6]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d101      	bne.n	800c1b8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	e03b      	b.n	800c230 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d101      	bne.n	800c1c6 <HAL_UART_Receive_IT+0x36>
 800c1c2:	2302      	movs	r3, #2
 800c1c4:	e034      	b.n	800c230 <HAL_UART_Receive_IT+0xa0>
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4a17      	ldr	r2, [pc, #92]	; (800c238 <HAL_UART_Receive_IT+0xa8>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d01f      	beq.n	800c21e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d018      	beq.n	800c21e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	e853 3f00 	ldrex	r3, [r3]
 800c1f8:	613b      	str	r3, [r7, #16]
   return(result);
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c200:	627b      	str	r3, [r7, #36]	; 0x24
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	461a      	mov	r2, r3
 800c208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20a:	623b      	str	r3, [r7, #32]
 800c20c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c20e:	69f9      	ldr	r1, [r7, #28]
 800c210:	6a3a      	ldr	r2, [r7, #32]
 800c212:	e841 2300 	strex	r3, r2, [r1]
 800c216:	61bb      	str	r3, [r7, #24]
   return(result);
 800c218:	69bb      	ldr	r3, [r7, #24]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d1e6      	bne.n	800c1ec <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c21e:	88fb      	ldrh	r3, [r7, #6]
 800c220:	461a      	mov	r2, r3
 800c222:	68b9      	ldr	r1, [r7, #8]
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	f000 ff3d 	bl	800d0a4 <UART_Start_Receive_IT>
 800c22a:	4603      	mov	r3, r0
 800c22c:	e000      	b.n	800c230 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c22e:	2302      	movs	r3, #2
  }
}
 800c230:	4618      	mov	r0, r3
 800c232:	3728      	adds	r7, #40	; 0x28
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}
 800c238:	58000c00 	.word	0x58000c00

0800c23c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c23c:	b480      	push	{r7}
 800c23e:	b083      	sub	sp, #12
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c244:	bf00      	nop
 800c246:	370c      	adds	r7, #12
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr

0800c250 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c250:	b480      	push	{r7}
 800c252:	b083      	sub	sp, #12
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	460b      	mov	r3, r1
 800c25a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c25c:	bf00      	nop
 800c25e:	370c      	adds	r7, #12
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr

0800c268 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c26c:	b092      	sub	sp, #72	; 0x48
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c272:	2300      	movs	r3, #0
 800c274:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	689a      	ldr	r2, [r3, #8]
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	691b      	ldr	r3, [r3, #16]
 800c280:	431a      	orrs	r2, r3
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	695b      	ldr	r3, [r3, #20]
 800c286:	431a      	orrs	r2, r3
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	69db      	ldr	r3, [r3, #28]
 800c28c:	4313      	orrs	r3, r2
 800c28e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	681a      	ldr	r2, [r3, #0]
 800c296:	4bbe      	ldr	r3, [pc, #760]	; (800c590 <UART_SetConfig+0x328>)
 800c298:	4013      	ands	r3, r2
 800c29a:	697a      	ldr	r2, [r7, #20]
 800c29c:	6812      	ldr	r2, [r2, #0]
 800c29e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c2a0:	430b      	orrs	r3, r1
 800c2a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	685b      	ldr	r3, [r3, #4]
 800c2aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	68da      	ldr	r2, [r3, #12]
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	430a      	orrs	r2, r1
 800c2b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	699b      	ldr	r3, [r3, #24]
 800c2be:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4ab3      	ldr	r2, [pc, #716]	; (800c594 <UART_SetConfig+0x32c>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d004      	beq.n	800c2d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	6a1b      	ldr	r3, [r3, #32]
 800c2ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	689a      	ldr	r2, [r3, #8]
 800c2da:	4baf      	ldr	r3, [pc, #700]	; (800c598 <UART_SetConfig+0x330>)
 800c2dc:	4013      	ands	r3, r2
 800c2de:	697a      	ldr	r2, [r7, #20]
 800c2e0:	6812      	ldr	r2, [r2, #0]
 800c2e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c2e4:	430b      	orrs	r3, r1
 800c2e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ee:	f023 010f 	bic.w	r1, r3, #15
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	430a      	orrs	r2, r1
 800c2fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4aa6      	ldr	r2, [pc, #664]	; (800c59c <UART_SetConfig+0x334>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d177      	bne.n	800c3f8 <UART_SetConfig+0x190>
 800c308:	4ba5      	ldr	r3, [pc, #660]	; (800c5a0 <UART_SetConfig+0x338>)
 800c30a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c30c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c310:	2b28      	cmp	r3, #40	; 0x28
 800c312:	d86d      	bhi.n	800c3f0 <UART_SetConfig+0x188>
 800c314:	a201      	add	r2, pc, #4	; (adr r2, 800c31c <UART_SetConfig+0xb4>)
 800c316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c31a:	bf00      	nop
 800c31c:	0800c3c1 	.word	0x0800c3c1
 800c320:	0800c3f1 	.word	0x0800c3f1
 800c324:	0800c3f1 	.word	0x0800c3f1
 800c328:	0800c3f1 	.word	0x0800c3f1
 800c32c:	0800c3f1 	.word	0x0800c3f1
 800c330:	0800c3f1 	.word	0x0800c3f1
 800c334:	0800c3f1 	.word	0x0800c3f1
 800c338:	0800c3f1 	.word	0x0800c3f1
 800c33c:	0800c3c9 	.word	0x0800c3c9
 800c340:	0800c3f1 	.word	0x0800c3f1
 800c344:	0800c3f1 	.word	0x0800c3f1
 800c348:	0800c3f1 	.word	0x0800c3f1
 800c34c:	0800c3f1 	.word	0x0800c3f1
 800c350:	0800c3f1 	.word	0x0800c3f1
 800c354:	0800c3f1 	.word	0x0800c3f1
 800c358:	0800c3f1 	.word	0x0800c3f1
 800c35c:	0800c3d1 	.word	0x0800c3d1
 800c360:	0800c3f1 	.word	0x0800c3f1
 800c364:	0800c3f1 	.word	0x0800c3f1
 800c368:	0800c3f1 	.word	0x0800c3f1
 800c36c:	0800c3f1 	.word	0x0800c3f1
 800c370:	0800c3f1 	.word	0x0800c3f1
 800c374:	0800c3f1 	.word	0x0800c3f1
 800c378:	0800c3f1 	.word	0x0800c3f1
 800c37c:	0800c3d9 	.word	0x0800c3d9
 800c380:	0800c3f1 	.word	0x0800c3f1
 800c384:	0800c3f1 	.word	0x0800c3f1
 800c388:	0800c3f1 	.word	0x0800c3f1
 800c38c:	0800c3f1 	.word	0x0800c3f1
 800c390:	0800c3f1 	.word	0x0800c3f1
 800c394:	0800c3f1 	.word	0x0800c3f1
 800c398:	0800c3f1 	.word	0x0800c3f1
 800c39c:	0800c3e1 	.word	0x0800c3e1
 800c3a0:	0800c3f1 	.word	0x0800c3f1
 800c3a4:	0800c3f1 	.word	0x0800c3f1
 800c3a8:	0800c3f1 	.word	0x0800c3f1
 800c3ac:	0800c3f1 	.word	0x0800c3f1
 800c3b0:	0800c3f1 	.word	0x0800c3f1
 800c3b4:	0800c3f1 	.word	0x0800c3f1
 800c3b8:	0800c3f1 	.word	0x0800c3f1
 800c3bc:	0800c3e9 	.word	0x0800c3e9
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3c6:	e222      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c3c8:	2304      	movs	r3, #4
 800c3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ce:	e21e      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c3d0:	2308      	movs	r3, #8
 800c3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3d6:	e21a      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c3d8:	2310      	movs	r3, #16
 800c3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3de:	e216      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c3e0:	2320      	movs	r3, #32
 800c3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3e6:	e212      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c3e8:	2340      	movs	r3, #64	; 0x40
 800c3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ee:	e20e      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c3f0:	2380      	movs	r3, #128	; 0x80
 800c3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3f6:	e20a      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4a69      	ldr	r2, [pc, #420]	; (800c5a4 <UART_SetConfig+0x33c>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d130      	bne.n	800c464 <UART_SetConfig+0x1fc>
 800c402:	4b67      	ldr	r3, [pc, #412]	; (800c5a0 <UART_SetConfig+0x338>)
 800c404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c406:	f003 0307 	and.w	r3, r3, #7
 800c40a:	2b05      	cmp	r3, #5
 800c40c:	d826      	bhi.n	800c45c <UART_SetConfig+0x1f4>
 800c40e:	a201      	add	r2, pc, #4	; (adr r2, 800c414 <UART_SetConfig+0x1ac>)
 800c410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c414:	0800c42d 	.word	0x0800c42d
 800c418:	0800c435 	.word	0x0800c435
 800c41c:	0800c43d 	.word	0x0800c43d
 800c420:	0800c445 	.word	0x0800c445
 800c424:	0800c44d 	.word	0x0800c44d
 800c428:	0800c455 	.word	0x0800c455
 800c42c:	2300      	movs	r3, #0
 800c42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c432:	e1ec      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c434:	2304      	movs	r3, #4
 800c436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c43a:	e1e8      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c43c:	2308      	movs	r3, #8
 800c43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c442:	e1e4      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c444:	2310      	movs	r3, #16
 800c446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c44a:	e1e0      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c44c:	2320      	movs	r3, #32
 800c44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c452:	e1dc      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c454:	2340      	movs	r3, #64	; 0x40
 800c456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c45a:	e1d8      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c45c:	2380      	movs	r3, #128	; 0x80
 800c45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c462:	e1d4      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4a4f      	ldr	r2, [pc, #316]	; (800c5a8 <UART_SetConfig+0x340>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d130      	bne.n	800c4d0 <UART_SetConfig+0x268>
 800c46e:	4b4c      	ldr	r3, [pc, #304]	; (800c5a0 <UART_SetConfig+0x338>)
 800c470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c472:	f003 0307 	and.w	r3, r3, #7
 800c476:	2b05      	cmp	r3, #5
 800c478:	d826      	bhi.n	800c4c8 <UART_SetConfig+0x260>
 800c47a:	a201      	add	r2, pc, #4	; (adr r2, 800c480 <UART_SetConfig+0x218>)
 800c47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c480:	0800c499 	.word	0x0800c499
 800c484:	0800c4a1 	.word	0x0800c4a1
 800c488:	0800c4a9 	.word	0x0800c4a9
 800c48c:	0800c4b1 	.word	0x0800c4b1
 800c490:	0800c4b9 	.word	0x0800c4b9
 800c494:	0800c4c1 	.word	0x0800c4c1
 800c498:	2300      	movs	r3, #0
 800c49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c49e:	e1b6      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c4a0:	2304      	movs	r3, #4
 800c4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4a6:	e1b2      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c4a8:	2308      	movs	r3, #8
 800c4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ae:	e1ae      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c4b0:	2310      	movs	r3, #16
 800c4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4b6:	e1aa      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c4b8:	2320      	movs	r3, #32
 800c4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4be:	e1a6      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c4c0:	2340      	movs	r3, #64	; 0x40
 800c4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4c6:	e1a2      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c4c8:	2380      	movs	r3, #128	; 0x80
 800c4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ce:	e19e      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	4a35      	ldr	r2, [pc, #212]	; (800c5ac <UART_SetConfig+0x344>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d130      	bne.n	800c53c <UART_SetConfig+0x2d4>
 800c4da:	4b31      	ldr	r3, [pc, #196]	; (800c5a0 <UART_SetConfig+0x338>)
 800c4dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4de:	f003 0307 	and.w	r3, r3, #7
 800c4e2:	2b05      	cmp	r3, #5
 800c4e4:	d826      	bhi.n	800c534 <UART_SetConfig+0x2cc>
 800c4e6:	a201      	add	r2, pc, #4	; (adr r2, 800c4ec <UART_SetConfig+0x284>)
 800c4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ec:	0800c505 	.word	0x0800c505
 800c4f0:	0800c50d 	.word	0x0800c50d
 800c4f4:	0800c515 	.word	0x0800c515
 800c4f8:	0800c51d 	.word	0x0800c51d
 800c4fc:	0800c525 	.word	0x0800c525
 800c500:	0800c52d 	.word	0x0800c52d
 800c504:	2300      	movs	r3, #0
 800c506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c50a:	e180      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c50c:	2304      	movs	r3, #4
 800c50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c512:	e17c      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c514:	2308      	movs	r3, #8
 800c516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c51a:	e178      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c51c:	2310      	movs	r3, #16
 800c51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c522:	e174      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c524:	2320      	movs	r3, #32
 800c526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c52a:	e170      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c52c:	2340      	movs	r3, #64	; 0x40
 800c52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c532:	e16c      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c534:	2380      	movs	r3, #128	; 0x80
 800c536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c53a:	e168      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a1b      	ldr	r2, [pc, #108]	; (800c5b0 <UART_SetConfig+0x348>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d142      	bne.n	800c5cc <UART_SetConfig+0x364>
 800c546:	4b16      	ldr	r3, [pc, #88]	; (800c5a0 <UART_SetConfig+0x338>)
 800c548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c54a:	f003 0307 	and.w	r3, r3, #7
 800c54e:	2b05      	cmp	r3, #5
 800c550:	d838      	bhi.n	800c5c4 <UART_SetConfig+0x35c>
 800c552:	a201      	add	r2, pc, #4	; (adr r2, 800c558 <UART_SetConfig+0x2f0>)
 800c554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c558:	0800c571 	.word	0x0800c571
 800c55c:	0800c579 	.word	0x0800c579
 800c560:	0800c581 	.word	0x0800c581
 800c564:	0800c589 	.word	0x0800c589
 800c568:	0800c5b5 	.word	0x0800c5b5
 800c56c:	0800c5bd 	.word	0x0800c5bd
 800c570:	2300      	movs	r3, #0
 800c572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c576:	e14a      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c578:	2304      	movs	r3, #4
 800c57a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c57e:	e146      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c580:	2308      	movs	r3, #8
 800c582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c586:	e142      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c588:	2310      	movs	r3, #16
 800c58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c58e:	e13e      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c590:	cfff69f3 	.word	0xcfff69f3
 800c594:	58000c00 	.word	0x58000c00
 800c598:	11fff4ff 	.word	0x11fff4ff
 800c59c:	40011000 	.word	0x40011000
 800c5a0:	58024400 	.word	0x58024400
 800c5a4:	40004400 	.word	0x40004400
 800c5a8:	40004800 	.word	0x40004800
 800c5ac:	40004c00 	.word	0x40004c00
 800c5b0:	40005000 	.word	0x40005000
 800c5b4:	2320      	movs	r3, #32
 800c5b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ba:	e128      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c5bc:	2340      	movs	r3, #64	; 0x40
 800c5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5c2:	e124      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c5c4:	2380      	movs	r3, #128	; 0x80
 800c5c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ca:	e120      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4acb      	ldr	r2, [pc, #812]	; (800c900 <UART_SetConfig+0x698>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d176      	bne.n	800c6c4 <UART_SetConfig+0x45c>
 800c5d6:	4bcb      	ldr	r3, [pc, #812]	; (800c904 <UART_SetConfig+0x69c>)
 800c5d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c5de:	2b28      	cmp	r3, #40	; 0x28
 800c5e0:	d86c      	bhi.n	800c6bc <UART_SetConfig+0x454>
 800c5e2:	a201      	add	r2, pc, #4	; (adr r2, 800c5e8 <UART_SetConfig+0x380>)
 800c5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e8:	0800c68d 	.word	0x0800c68d
 800c5ec:	0800c6bd 	.word	0x0800c6bd
 800c5f0:	0800c6bd 	.word	0x0800c6bd
 800c5f4:	0800c6bd 	.word	0x0800c6bd
 800c5f8:	0800c6bd 	.word	0x0800c6bd
 800c5fc:	0800c6bd 	.word	0x0800c6bd
 800c600:	0800c6bd 	.word	0x0800c6bd
 800c604:	0800c6bd 	.word	0x0800c6bd
 800c608:	0800c695 	.word	0x0800c695
 800c60c:	0800c6bd 	.word	0x0800c6bd
 800c610:	0800c6bd 	.word	0x0800c6bd
 800c614:	0800c6bd 	.word	0x0800c6bd
 800c618:	0800c6bd 	.word	0x0800c6bd
 800c61c:	0800c6bd 	.word	0x0800c6bd
 800c620:	0800c6bd 	.word	0x0800c6bd
 800c624:	0800c6bd 	.word	0x0800c6bd
 800c628:	0800c69d 	.word	0x0800c69d
 800c62c:	0800c6bd 	.word	0x0800c6bd
 800c630:	0800c6bd 	.word	0x0800c6bd
 800c634:	0800c6bd 	.word	0x0800c6bd
 800c638:	0800c6bd 	.word	0x0800c6bd
 800c63c:	0800c6bd 	.word	0x0800c6bd
 800c640:	0800c6bd 	.word	0x0800c6bd
 800c644:	0800c6bd 	.word	0x0800c6bd
 800c648:	0800c6a5 	.word	0x0800c6a5
 800c64c:	0800c6bd 	.word	0x0800c6bd
 800c650:	0800c6bd 	.word	0x0800c6bd
 800c654:	0800c6bd 	.word	0x0800c6bd
 800c658:	0800c6bd 	.word	0x0800c6bd
 800c65c:	0800c6bd 	.word	0x0800c6bd
 800c660:	0800c6bd 	.word	0x0800c6bd
 800c664:	0800c6bd 	.word	0x0800c6bd
 800c668:	0800c6ad 	.word	0x0800c6ad
 800c66c:	0800c6bd 	.word	0x0800c6bd
 800c670:	0800c6bd 	.word	0x0800c6bd
 800c674:	0800c6bd 	.word	0x0800c6bd
 800c678:	0800c6bd 	.word	0x0800c6bd
 800c67c:	0800c6bd 	.word	0x0800c6bd
 800c680:	0800c6bd 	.word	0x0800c6bd
 800c684:	0800c6bd 	.word	0x0800c6bd
 800c688:	0800c6b5 	.word	0x0800c6b5
 800c68c:	2301      	movs	r3, #1
 800c68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c692:	e0bc      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c694:	2304      	movs	r3, #4
 800c696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c69a:	e0b8      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c69c:	2308      	movs	r3, #8
 800c69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6a2:	e0b4      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c6a4:	2310      	movs	r3, #16
 800c6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6aa:	e0b0      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c6ac:	2320      	movs	r3, #32
 800c6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6b2:	e0ac      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c6b4:	2340      	movs	r3, #64	; 0x40
 800c6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6ba:	e0a8      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c6bc:	2380      	movs	r3, #128	; 0x80
 800c6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6c2:	e0a4      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4a8f      	ldr	r2, [pc, #572]	; (800c908 <UART_SetConfig+0x6a0>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d130      	bne.n	800c730 <UART_SetConfig+0x4c8>
 800c6ce:	4b8d      	ldr	r3, [pc, #564]	; (800c904 <UART_SetConfig+0x69c>)
 800c6d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6d2:	f003 0307 	and.w	r3, r3, #7
 800c6d6:	2b05      	cmp	r3, #5
 800c6d8:	d826      	bhi.n	800c728 <UART_SetConfig+0x4c0>
 800c6da:	a201      	add	r2, pc, #4	; (adr r2, 800c6e0 <UART_SetConfig+0x478>)
 800c6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e0:	0800c6f9 	.word	0x0800c6f9
 800c6e4:	0800c701 	.word	0x0800c701
 800c6e8:	0800c709 	.word	0x0800c709
 800c6ec:	0800c711 	.word	0x0800c711
 800c6f0:	0800c719 	.word	0x0800c719
 800c6f4:	0800c721 	.word	0x0800c721
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6fe:	e086      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c700:	2304      	movs	r3, #4
 800c702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c706:	e082      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c708:	2308      	movs	r3, #8
 800c70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c70e:	e07e      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c710:	2310      	movs	r3, #16
 800c712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c716:	e07a      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c718:	2320      	movs	r3, #32
 800c71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c71e:	e076      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c720:	2340      	movs	r3, #64	; 0x40
 800c722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c726:	e072      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c728:	2380      	movs	r3, #128	; 0x80
 800c72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c72e:	e06e      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a75      	ldr	r2, [pc, #468]	; (800c90c <UART_SetConfig+0x6a4>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d130      	bne.n	800c79c <UART_SetConfig+0x534>
 800c73a:	4b72      	ldr	r3, [pc, #456]	; (800c904 <UART_SetConfig+0x69c>)
 800c73c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c73e:	f003 0307 	and.w	r3, r3, #7
 800c742:	2b05      	cmp	r3, #5
 800c744:	d826      	bhi.n	800c794 <UART_SetConfig+0x52c>
 800c746:	a201      	add	r2, pc, #4	; (adr r2, 800c74c <UART_SetConfig+0x4e4>)
 800c748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c74c:	0800c765 	.word	0x0800c765
 800c750:	0800c76d 	.word	0x0800c76d
 800c754:	0800c775 	.word	0x0800c775
 800c758:	0800c77d 	.word	0x0800c77d
 800c75c:	0800c785 	.word	0x0800c785
 800c760:	0800c78d 	.word	0x0800c78d
 800c764:	2300      	movs	r3, #0
 800c766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c76a:	e050      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c76c:	2304      	movs	r3, #4
 800c76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c772:	e04c      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c774:	2308      	movs	r3, #8
 800c776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c77a:	e048      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c77c:	2310      	movs	r3, #16
 800c77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c782:	e044      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c784:	2320      	movs	r3, #32
 800c786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c78a:	e040      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c78c:	2340      	movs	r3, #64	; 0x40
 800c78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c792:	e03c      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c794:	2380      	movs	r3, #128	; 0x80
 800c796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c79a:	e038      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4a5b      	ldr	r2, [pc, #364]	; (800c910 <UART_SetConfig+0x6a8>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d130      	bne.n	800c808 <UART_SetConfig+0x5a0>
 800c7a6:	4b57      	ldr	r3, [pc, #348]	; (800c904 <UART_SetConfig+0x69c>)
 800c7a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7aa:	f003 0307 	and.w	r3, r3, #7
 800c7ae:	2b05      	cmp	r3, #5
 800c7b0:	d826      	bhi.n	800c800 <UART_SetConfig+0x598>
 800c7b2:	a201      	add	r2, pc, #4	; (adr r2, 800c7b8 <UART_SetConfig+0x550>)
 800c7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b8:	0800c7d1 	.word	0x0800c7d1
 800c7bc:	0800c7d9 	.word	0x0800c7d9
 800c7c0:	0800c7e1 	.word	0x0800c7e1
 800c7c4:	0800c7e9 	.word	0x0800c7e9
 800c7c8:	0800c7f1 	.word	0x0800c7f1
 800c7cc:	0800c7f9 	.word	0x0800c7f9
 800c7d0:	2302      	movs	r3, #2
 800c7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7d6:	e01a      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c7d8:	2304      	movs	r3, #4
 800c7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7de:	e016      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c7e0:	2308      	movs	r3, #8
 800c7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7e6:	e012      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c7e8:	2310      	movs	r3, #16
 800c7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ee:	e00e      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c7f0:	2320      	movs	r3, #32
 800c7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7f6:	e00a      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c7f8:	2340      	movs	r3, #64	; 0x40
 800c7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7fe:	e006      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c800:	2380      	movs	r3, #128	; 0x80
 800c802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c806:	e002      	b.n	800c80e <UART_SetConfig+0x5a6>
 800c808:	2380      	movs	r3, #128	; 0x80
 800c80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	4a3f      	ldr	r2, [pc, #252]	; (800c910 <UART_SetConfig+0x6a8>)
 800c814:	4293      	cmp	r3, r2
 800c816:	f040 80f8 	bne.w	800ca0a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c81a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c81e:	2b20      	cmp	r3, #32
 800c820:	dc46      	bgt.n	800c8b0 <UART_SetConfig+0x648>
 800c822:	2b02      	cmp	r3, #2
 800c824:	f2c0 8082 	blt.w	800c92c <UART_SetConfig+0x6c4>
 800c828:	3b02      	subs	r3, #2
 800c82a:	2b1e      	cmp	r3, #30
 800c82c:	d87e      	bhi.n	800c92c <UART_SetConfig+0x6c4>
 800c82e:	a201      	add	r2, pc, #4	; (adr r2, 800c834 <UART_SetConfig+0x5cc>)
 800c830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c834:	0800c8b7 	.word	0x0800c8b7
 800c838:	0800c92d 	.word	0x0800c92d
 800c83c:	0800c8bf 	.word	0x0800c8bf
 800c840:	0800c92d 	.word	0x0800c92d
 800c844:	0800c92d 	.word	0x0800c92d
 800c848:	0800c92d 	.word	0x0800c92d
 800c84c:	0800c8cf 	.word	0x0800c8cf
 800c850:	0800c92d 	.word	0x0800c92d
 800c854:	0800c92d 	.word	0x0800c92d
 800c858:	0800c92d 	.word	0x0800c92d
 800c85c:	0800c92d 	.word	0x0800c92d
 800c860:	0800c92d 	.word	0x0800c92d
 800c864:	0800c92d 	.word	0x0800c92d
 800c868:	0800c92d 	.word	0x0800c92d
 800c86c:	0800c8df 	.word	0x0800c8df
 800c870:	0800c92d 	.word	0x0800c92d
 800c874:	0800c92d 	.word	0x0800c92d
 800c878:	0800c92d 	.word	0x0800c92d
 800c87c:	0800c92d 	.word	0x0800c92d
 800c880:	0800c92d 	.word	0x0800c92d
 800c884:	0800c92d 	.word	0x0800c92d
 800c888:	0800c92d 	.word	0x0800c92d
 800c88c:	0800c92d 	.word	0x0800c92d
 800c890:	0800c92d 	.word	0x0800c92d
 800c894:	0800c92d 	.word	0x0800c92d
 800c898:	0800c92d 	.word	0x0800c92d
 800c89c:	0800c92d 	.word	0x0800c92d
 800c8a0:	0800c92d 	.word	0x0800c92d
 800c8a4:	0800c92d 	.word	0x0800c92d
 800c8a8:	0800c92d 	.word	0x0800c92d
 800c8ac:	0800c91f 	.word	0x0800c91f
 800c8b0:	2b40      	cmp	r3, #64	; 0x40
 800c8b2:	d037      	beq.n	800c924 <UART_SetConfig+0x6bc>
 800c8b4:	e03a      	b.n	800c92c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c8b6:	f7fd f963 	bl	8009b80 <HAL_RCCEx_GetD3PCLK1Freq>
 800c8ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c8bc:	e03c      	b.n	800c938 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7fd f972 	bl	8009bac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8cc:	e034      	b.n	800c938 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8ce:	f107 0318 	add.w	r3, r7, #24
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f7fd fabe 	bl	8009e54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c8d8:	69fb      	ldr	r3, [r7, #28]
 800c8da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8dc:	e02c      	b.n	800c938 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8de:	4b09      	ldr	r3, [pc, #36]	; (800c904 <UART_SetConfig+0x69c>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f003 0320 	and.w	r3, r3, #32
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d016      	beq.n	800c918 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c8ea:	4b06      	ldr	r3, [pc, #24]	; (800c904 <UART_SetConfig+0x69c>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	08db      	lsrs	r3, r3, #3
 800c8f0:	f003 0303 	and.w	r3, r3, #3
 800c8f4:	4a07      	ldr	r2, [pc, #28]	; (800c914 <UART_SetConfig+0x6ac>)
 800c8f6:	fa22 f303 	lsr.w	r3, r2, r3
 800c8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c8fc:	e01c      	b.n	800c938 <UART_SetConfig+0x6d0>
 800c8fe:	bf00      	nop
 800c900:	40011400 	.word	0x40011400
 800c904:	58024400 	.word	0x58024400
 800c908:	40007800 	.word	0x40007800
 800c90c:	40007c00 	.word	0x40007c00
 800c910:	58000c00 	.word	0x58000c00
 800c914:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c918:	4b9d      	ldr	r3, [pc, #628]	; (800cb90 <UART_SetConfig+0x928>)
 800c91a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c91c:	e00c      	b.n	800c938 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c91e:	4b9d      	ldr	r3, [pc, #628]	; (800cb94 <UART_SetConfig+0x92c>)
 800c920:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c922:	e009      	b.n	800c938 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c924:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c928:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c92a:	e005      	b.n	800c938 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c92c:	2300      	movs	r3, #0
 800c92e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c930:	2301      	movs	r3, #1
 800c932:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c936:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	f000 81de 	beq.w	800ccfc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c944:	4a94      	ldr	r2, [pc, #592]	; (800cb98 <UART_SetConfig+0x930>)
 800c946:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c94a:	461a      	mov	r2, r3
 800c94c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c94e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c952:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	685a      	ldr	r2, [r3, #4]
 800c958:	4613      	mov	r3, r2
 800c95a:	005b      	lsls	r3, r3, #1
 800c95c:	4413      	add	r3, r2
 800c95e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c960:	429a      	cmp	r2, r3
 800c962:	d305      	bcc.n	800c970 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c96a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d903      	bls.n	800c978 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c970:	2301      	movs	r3, #1
 800c972:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c976:	e1c1      	b.n	800ccfc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c97a:	2200      	movs	r2, #0
 800c97c:	60bb      	str	r3, [r7, #8]
 800c97e:	60fa      	str	r2, [r7, #12]
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c984:	4a84      	ldr	r2, [pc, #528]	; (800cb98 <UART_SetConfig+0x930>)
 800c986:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	2200      	movs	r2, #0
 800c98e:	603b      	str	r3, [r7, #0]
 800c990:	607a      	str	r2, [r7, #4]
 800c992:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c996:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c99a:	f7f3 fc9d 	bl	80002d8 <__aeabi_uldivmod>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	4610      	mov	r0, r2
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	f04f 0200 	mov.w	r2, #0
 800c9aa:	f04f 0300 	mov.w	r3, #0
 800c9ae:	020b      	lsls	r3, r1, #8
 800c9b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c9b4:	0202      	lsls	r2, r0, #8
 800c9b6:	6979      	ldr	r1, [r7, #20]
 800c9b8:	6849      	ldr	r1, [r1, #4]
 800c9ba:	0849      	lsrs	r1, r1, #1
 800c9bc:	2000      	movs	r0, #0
 800c9be:	460c      	mov	r4, r1
 800c9c0:	4605      	mov	r5, r0
 800c9c2:	eb12 0804 	adds.w	r8, r2, r4
 800c9c6:	eb43 0905 	adc.w	r9, r3, r5
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	469a      	mov	sl, r3
 800c9d2:	4693      	mov	fp, r2
 800c9d4:	4652      	mov	r2, sl
 800c9d6:	465b      	mov	r3, fp
 800c9d8:	4640      	mov	r0, r8
 800c9da:	4649      	mov	r1, r9
 800c9dc:	f7f3 fc7c 	bl	80002d8 <__aeabi_uldivmod>
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	460b      	mov	r3, r1
 800c9e4:	4613      	mov	r3, r2
 800c9e6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c9ee:	d308      	bcc.n	800ca02 <UART_SetConfig+0x79a>
 800c9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c9f6:	d204      	bcs.n	800ca02 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9fe:	60da      	str	r2, [r3, #12]
 800ca00:	e17c      	b.n	800ccfc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ca02:	2301      	movs	r3, #1
 800ca04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ca08:	e178      	b.n	800ccfc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	69db      	ldr	r3, [r3, #28]
 800ca0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca12:	f040 80c5 	bne.w	800cba0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ca16:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ca1a:	2b20      	cmp	r3, #32
 800ca1c:	dc48      	bgt.n	800cab0 <UART_SetConfig+0x848>
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	db7b      	blt.n	800cb1a <UART_SetConfig+0x8b2>
 800ca22:	2b20      	cmp	r3, #32
 800ca24:	d879      	bhi.n	800cb1a <UART_SetConfig+0x8b2>
 800ca26:	a201      	add	r2, pc, #4	; (adr r2, 800ca2c <UART_SetConfig+0x7c4>)
 800ca28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca2c:	0800cab7 	.word	0x0800cab7
 800ca30:	0800cabf 	.word	0x0800cabf
 800ca34:	0800cb1b 	.word	0x0800cb1b
 800ca38:	0800cb1b 	.word	0x0800cb1b
 800ca3c:	0800cac7 	.word	0x0800cac7
 800ca40:	0800cb1b 	.word	0x0800cb1b
 800ca44:	0800cb1b 	.word	0x0800cb1b
 800ca48:	0800cb1b 	.word	0x0800cb1b
 800ca4c:	0800cad7 	.word	0x0800cad7
 800ca50:	0800cb1b 	.word	0x0800cb1b
 800ca54:	0800cb1b 	.word	0x0800cb1b
 800ca58:	0800cb1b 	.word	0x0800cb1b
 800ca5c:	0800cb1b 	.word	0x0800cb1b
 800ca60:	0800cb1b 	.word	0x0800cb1b
 800ca64:	0800cb1b 	.word	0x0800cb1b
 800ca68:	0800cb1b 	.word	0x0800cb1b
 800ca6c:	0800cae7 	.word	0x0800cae7
 800ca70:	0800cb1b 	.word	0x0800cb1b
 800ca74:	0800cb1b 	.word	0x0800cb1b
 800ca78:	0800cb1b 	.word	0x0800cb1b
 800ca7c:	0800cb1b 	.word	0x0800cb1b
 800ca80:	0800cb1b 	.word	0x0800cb1b
 800ca84:	0800cb1b 	.word	0x0800cb1b
 800ca88:	0800cb1b 	.word	0x0800cb1b
 800ca8c:	0800cb1b 	.word	0x0800cb1b
 800ca90:	0800cb1b 	.word	0x0800cb1b
 800ca94:	0800cb1b 	.word	0x0800cb1b
 800ca98:	0800cb1b 	.word	0x0800cb1b
 800ca9c:	0800cb1b 	.word	0x0800cb1b
 800caa0:	0800cb1b 	.word	0x0800cb1b
 800caa4:	0800cb1b 	.word	0x0800cb1b
 800caa8:	0800cb1b 	.word	0x0800cb1b
 800caac:	0800cb0d 	.word	0x0800cb0d
 800cab0:	2b40      	cmp	r3, #64	; 0x40
 800cab2:	d02e      	beq.n	800cb12 <UART_SetConfig+0x8aa>
 800cab4:	e031      	b.n	800cb1a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cab6:	f7fb fc1f 	bl	80082f8 <HAL_RCC_GetPCLK1Freq>
 800caba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cabc:	e033      	b.n	800cb26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cabe:	f7fb fc31 	bl	8008324 <HAL_RCC_GetPCLK2Freq>
 800cac2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cac4:	e02f      	b.n	800cb26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800caca:	4618      	mov	r0, r3
 800cacc:	f7fd f86e 	bl	8009bac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cad4:	e027      	b.n	800cb26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cad6:	f107 0318 	add.w	r3, r7, #24
 800cada:	4618      	mov	r0, r3
 800cadc:	f7fd f9ba 	bl	8009e54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cae0:	69fb      	ldr	r3, [r7, #28]
 800cae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cae4:	e01f      	b.n	800cb26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cae6:	4b2d      	ldr	r3, [pc, #180]	; (800cb9c <UART_SetConfig+0x934>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f003 0320 	and.w	r3, r3, #32
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d009      	beq.n	800cb06 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800caf2:	4b2a      	ldr	r3, [pc, #168]	; (800cb9c <UART_SetConfig+0x934>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	08db      	lsrs	r3, r3, #3
 800caf8:	f003 0303 	and.w	r3, r3, #3
 800cafc:	4a24      	ldr	r2, [pc, #144]	; (800cb90 <UART_SetConfig+0x928>)
 800cafe:	fa22 f303 	lsr.w	r3, r2, r3
 800cb02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cb04:	e00f      	b.n	800cb26 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cb06:	4b22      	ldr	r3, [pc, #136]	; (800cb90 <UART_SetConfig+0x928>)
 800cb08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb0a:	e00c      	b.n	800cb26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cb0c:	4b21      	ldr	r3, [pc, #132]	; (800cb94 <UART_SetConfig+0x92c>)
 800cb0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb10:	e009      	b.n	800cb26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb18:	e005      	b.n	800cb26 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cb1e:	2301      	movs	r3, #1
 800cb20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cb24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cb26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	f000 80e7 	beq.w	800ccfc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb32:	4a19      	ldr	r2, [pc, #100]	; (800cb98 <UART_SetConfig+0x930>)
 800cb34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb38:	461a      	mov	r2, r3
 800cb3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb3c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb40:	005a      	lsls	r2, r3, #1
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	085b      	lsrs	r3, r3, #1
 800cb48:	441a      	add	r2, r3
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb52:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb56:	2b0f      	cmp	r3, #15
 800cb58:	d916      	bls.n	800cb88 <UART_SetConfig+0x920>
 800cb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb60:	d212      	bcs.n	800cb88 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb64:	b29b      	uxth	r3, r3
 800cb66:	f023 030f 	bic.w	r3, r3, #15
 800cb6a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6e:	085b      	lsrs	r3, r3, #1
 800cb70:	b29b      	uxth	r3, r3
 800cb72:	f003 0307 	and.w	r3, r3, #7
 800cb76:	b29a      	uxth	r2, r3
 800cb78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cb7a:	4313      	orrs	r3, r2
 800cb7c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cb84:	60da      	str	r2, [r3, #12]
 800cb86:	e0b9      	b.n	800ccfc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cb88:	2301      	movs	r3, #1
 800cb8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cb8e:	e0b5      	b.n	800ccfc <UART_SetConfig+0xa94>
 800cb90:	03d09000 	.word	0x03d09000
 800cb94:	003d0900 	.word	0x003d0900
 800cb98:	0800dfbc 	.word	0x0800dfbc
 800cb9c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800cba0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cba4:	2b20      	cmp	r3, #32
 800cba6:	dc49      	bgt.n	800cc3c <UART_SetConfig+0x9d4>
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	db7c      	blt.n	800cca6 <UART_SetConfig+0xa3e>
 800cbac:	2b20      	cmp	r3, #32
 800cbae:	d87a      	bhi.n	800cca6 <UART_SetConfig+0xa3e>
 800cbb0:	a201      	add	r2, pc, #4	; (adr r2, 800cbb8 <UART_SetConfig+0x950>)
 800cbb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbb6:	bf00      	nop
 800cbb8:	0800cc43 	.word	0x0800cc43
 800cbbc:	0800cc4b 	.word	0x0800cc4b
 800cbc0:	0800cca7 	.word	0x0800cca7
 800cbc4:	0800cca7 	.word	0x0800cca7
 800cbc8:	0800cc53 	.word	0x0800cc53
 800cbcc:	0800cca7 	.word	0x0800cca7
 800cbd0:	0800cca7 	.word	0x0800cca7
 800cbd4:	0800cca7 	.word	0x0800cca7
 800cbd8:	0800cc63 	.word	0x0800cc63
 800cbdc:	0800cca7 	.word	0x0800cca7
 800cbe0:	0800cca7 	.word	0x0800cca7
 800cbe4:	0800cca7 	.word	0x0800cca7
 800cbe8:	0800cca7 	.word	0x0800cca7
 800cbec:	0800cca7 	.word	0x0800cca7
 800cbf0:	0800cca7 	.word	0x0800cca7
 800cbf4:	0800cca7 	.word	0x0800cca7
 800cbf8:	0800cc73 	.word	0x0800cc73
 800cbfc:	0800cca7 	.word	0x0800cca7
 800cc00:	0800cca7 	.word	0x0800cca7
 800cc04:	0800cca7 	.word	0x0800cca7
 800cc08:	0800cca7 	.word	0x0800cca7
 800cc0c:	0800cca7 	.word	0x0800cca7
 800cc10:	0800cca7 	.word	0x0800cca7
 800cc14:	0800cca7 	.word	0x0800cca7
 800cc18:	0800cca7 	.word	0x0800cca7
 800cc1c:	0800cca7 	.word	0x0800cca7
 800cc20:	0800cca7 	.word	0x0800cca7
 800cc24:	0800cca7 	.word	0x0800cca7
 800cc28:	0800cca7 	.word	0x0800cca7
 800cc2c:	0800cca7 	.word	0x0800cca7
 800cc30:	0800cca7 	.word	0x0800cca7
 800cc34:	0800cca7 	.word	0x0800cca7
 800cc38:	0800cc99 	.word	0x0800cc99
 800cc3c:	2b40      	cmp	r3, #64	; 0x40
 800cc3e:	d02e      	beq.n	800cc9e <UART_SetConfig+0xa36>
 800cc40:	e031      	b.n	800cca6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc42:	f7fb fb59 	bl	80082f8 <HAL_RCC_GetPCLK1Freq>
 800cc46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cc48:	e033      	b.n	800ccb2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc4a:	f7fb fb6b 	bl	8008324 <HAL_RCC_GetPCLK2Freq>
 800cc4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cc50:	e02f      	b.n	800ccb2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7fc ffa8 	bl	8009bac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc60:	e027      	b.n	800ccb2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc62:	f107 0318 	add.w	r3, r7, #24
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7fd f8f4 	bl	8009e54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cc6c:	69fb      	ldr	r3, [r7, #28]
 800cc6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc70:	e01f      	b.n	800ccb2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc72:	4b2d      	ldr	r3, [pc, #180]	; (800cd28 <UART_SetConfig+0xac0>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f003 0320 	and.w	r3, r3, #32
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d009      	beq.n	800cc92 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cc7e:	4b2a      	ldr	r3, [pc, #168]	; (800cd28 <UART_SetConfig+0xac0>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	08db      	lsrs	r3, r3, #3
 800cc84:	f003 0303 	and.w	r3, r3, #3
 800cc88:	4a28      	ldr	r2, [pc, #160]	; (800cd2c <UART_SetConfig+0xac4>)
 800cc8a:	fa22 f303 	lsr.w	r3, r2, r3
 800cc8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cc90:	e00f      	b.n	800ccb2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800cc92:	4b26      	ldr	r3, [pc, #152]	; (800cd2c <UART_SetConfig+0xac4>)
 800cc94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc96:	e00c      	b.n	800ccb2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cc98:	4b25      	ldr	r3, [pc, #148]	; (800cd30 <UART_SetConfig+0xac8>)
 800cc9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc9c:	e009      	b.n	800ccb2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cca4:	e005      	b.n	800ccb2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800cca6:	2300      	movs	r3, #0
 800cca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ccaa:	2301      	movs	r3, #1
 800ccac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ccb0:	bf00      	nop
    }

    if (pclk != 0U)
 800ccb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d021      	beq.n	800ccfc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccbc:	4a1d      	ldr	r2, [pc, #116]	; (800cd34 <UART_SetConfig+0xacc>)
 800ccbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccc2:	461a      	mov	r2, r3
 800ccc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccc6:	fbb3 f2f2 	udiv	r2, r3, r2
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	685b      	ldr	r3, [r3, #4]
 800ccce:	085b      	lsrs	r3, r3, #1
 800ccd0:	441a      	add	r2, r3
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccda:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ccdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccde:	2b0f      	cmp	r3, #15
 800cce0:	d909      	bls.n	800ccf6 <UART_SetConfig+0xa8e>
 800cce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cce8:	d205      	bcs.n	800ccf6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ccea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccec:	b29a      	uxth	r2, r3
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	60da      	str	r2, [r3, #12]
 800ccf4:	e002      	b.n	800ccfc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	2201      	movs	r2, #1
 800cd00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	2201      	movs	r2, #1
 800cd08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	2200      	movs	r2, #0
 800cd16:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cd18:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3748      	adds	r7, #72	; 0x48
 800cd20:	46bd      	mov	sp, r7
 800cd22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cd26:	bf00      	nop
 800cd28:	58024400 	.word	0x58024400
 800cd2c:	03d09000 	.word	0x03d09000
 800cd30:	003d0900 	.word	0x003d0900
 800cd34:	0800dfbc 	.word	0x0800dfbc

0800cd38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b083      	sub	sp, #12
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd44:	f003 0301 	and.w	r3, r3, #1
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d00a      	beq.n	800cd62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	430a      	orrs	r2, r1
 800cd60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd66:	f003 0302 	and.w	r3, r3, #2
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d00a      	beq.n	800cd84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	685b      	ldr	r3, [r3, #4]
 800cd74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	430a      	orrs	r2, r1
 800cd82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd88:	f003 0304 	and.w	r3, r3, #4
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d00a      	beq.n	800cda6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	430a      	orrs	r2, r1
 800cda4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdaa:	f003 0308 	and.w	r3, r3, #8
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d00a      	beq.n	800cdc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	430a      	orrs	r2, r1
 800cdc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdcc:	f003 0310 	and.w	r3, r3, #16
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d00a      	beq.n	800cdea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	689b      	ldr	r3, [r3, #8]
 800cdda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	430a      	orrs	r2, r1
 800cde8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdee:	f003 0320 	and.w	r3, r3, #32
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d00a      	beq.n	800ce0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	689b      	ldr	r3, [r3, #8]
 800cdfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	430a      	orrs	r2, r1
 800ce0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d01a      	beq.n	800ce4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	685b      	ldr	r3, [r3, #4]
 800ce1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	430a      	orrs	r2, r1
 800ce2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce36:	d10a      	bne.n	800ce4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	685b      	ldr	r3, [r3, #4]
 800ce3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	430a      	orrs	r2, r1
 800ce4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d00a      	beq.n	800ce70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	685b      	ldr	r3, [r3, #4]
 800ce60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	430a      	orrs	r2, r1
 800ce6e:	605a      	str	r2, [r3, #4]
  }
}
 800ce70:	bf00      	nop
 800ce72:	370c      	adds	r7, #12
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr

0800ce7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b086      	sub	sp, #24
 800ce80:	af02      	add	r7, sp, #8
 800ce82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2200      	movs	r2, #0
 800ce88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ce8c:	f7f5 fbee 	bl	800266c <HAL_GetTick>
 800ce90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f003 0308 	and.w	r3, r3, #8
 800ce9c:	2b08      	cmp	r3, #8
 800ce9e:	d10e      	bne.n	800cebe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cea0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cea4:	9300      	str	r3, [sp, #0]
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f000 f82f 	bl	800cf12 <UART_WaitOnFlagUntilTimeout>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d001      	beq.n	800cebe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ceba:	2303      	movs	r3, #3
 800cebc:	e025      	b.n	800cf0a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f003 0304 	and.w	r3, r3, #4
 800cec8:	2b04      	cmp	r3, #4
 800ceca:	d10e      	bne.n	800ceea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ced0:	9300      	str	r3, [sp, #0]
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2200      	movs	r2, #0
 800ced6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f000 f819 	bl	800cf12 <UART_WaitOnFlagUntilTimeout>
 800cee0:	4603      	mov	r3, r0
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d001      	beq.n	800ceea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cee6:	2303      	movs	r3, #3
 800cee8:	e00f      	b.n	800cf0a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2220      	movs	r2, #32
 800ceee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2220      	movs	r2, #32
 800cef6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2200      	movs	r2, #0
 800cefe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2200      	movs	r2, #0
 800cf04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cf08:	2300      	movs	r3, #0
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3710      	adds	r7, #16
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}

0800cf12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cf12:	b580      	push	{r7, lr}
 800cf14:	b09c      	sub	sp, #112	; 0x70
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	60f8      	str	r0, [r7, #12]
 800cf1a:	60b9      	str	r1, [r7, #8]
 800cf1c:	603b      	str	r3, [r7, #0]
 800cf1e:	4613      	mov	r3, r2
 800cf20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf22:	e0a9      	b.n	800d078 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf2a:	f000 80a5 	beq.w	800d078 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf2e:	f7f5 fb9d 	bl	800266c <HAL_GetTick>
 800cf32:	4602      	mov	r2, r0
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	1ad3      	subs	r3, r2, r3
 800cf38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d302      	bcc.n	800cf44 <UART_WaitOnFlagUntilTimeout+0x32>
 800cf3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d140      	bne.n	800cfc6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf4c:	e853 3f00 	ldrex	r3, [r3]
 800cf50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cf52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cf58:	667b      	str	r3, [r7, #100]	; 0x64
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	461a      	mov	r2, r3
 800cf60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf62:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf64:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cf68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cf6a:	e841 2300 	strex	r3, r2, [r1]
 800cf6e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cf70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d1e6      	bne.n	800cf44 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	3308      	adds	r3, #8
 800cf7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf80:	e853 3f00 	ldrex	r3, [r3]
 800cf84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cf86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf88:	f023 0301 	bic.w	r3, r3, #1
 800cf8c:	663b      	str	r3, [r7, #96]	; 0x60
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	3308      	adds	r3, #8
 800cf94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cf96:	64ba      	str	r2, [r7, #72]	; 0x48
 800cf98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cf9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf9e:	e841 2300 	strex	r3, r2, [r1]
 800cfa2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cfa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d1e5      	bne.n	800cf76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	2220      	movs	r2, #32
 800cfae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2220      	movs	r2, #32
 800cfb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800cfc2:	2303      	movs	r3, #3
 800cfc4:	e069      	b.n	800d09a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f003 0304 	and.w	r3, r3, #4
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d051      	beq.n	800d078 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	69db      	ldr	r3, [r3, #28]
 800cfda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cfde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cfe2:	d149      	bne.n	800d078 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cfec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff6:	e853 3f00 	ldrex	r3, [r3]
 800cffa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d002:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	461a      	mov	r2, r3
 800d00a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d00c:	637b      	str	r3, [r7, #52]	; 0x34
 800d00e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d010:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d014:	e841 2300 	strex	r3, r2, [r1]
 800d018:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d1e6      	bne.n	800cfee <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	3308      	adds	r3, #8
 800d026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	e853 3f00 	ldrex	r3, [r3]
 800d02e:	613b      	str	r3, [r7, #16]
   return(result);
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	f023 0301 	bic.w	r3, r3, #1
 800d036:	66bb      	str	r3, [r7, #104]	; 0x68
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	3308      	adds	r3, #8
 800d03e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d040:	623a      	str	r2, [r7, #32]
 800d042:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d044:	69f9      	ldr	r1, [r7, #28]
 800d046:	6a3a      	ldr	r2, [r7, #32]
 800d048:	e841 2300 	strex	r3, r2, [r1]
 800d04c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d1e5      	bne.n	800d020 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	2220      	movs	r2, #32
 800d058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	2220      	movs	r2, #32
 800d060:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2220      	movs	r2, #32
 800d068:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2200      	movs	r2, #0
 800d070:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d074:	2303      	movs	r3, #3
 800d076:	e010      	b.n	800d09a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	69da      	ldr	r2, [r3, #28]
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	4013      	ands	r3, r2
 800d082:	68ba      	ldr	r2, [r7, #8]
 800d084:	429a      	cmp	r2, r3
 800d086:	bf0c      	ite	eq
 800d088:	2301      	moveq	r3, #1
 800d08a:	2300      	movne	r3, #0
 800d08c:	b2db      	uxtb	r3, r3
 800d08e:	461a      	mov	r2, r3
 800d090:	79fb      	ldrb	r3, [r7, #7]
 800d092:	429a      	cmp	r2, r3
 800d094:	f43f af46 	beq.w	800cf24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d098:	2300      	movs	r3, #0
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3770      	adds	r7, #112	; 0x70
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
	...

0800d0a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b0a3      	sub	sp, #140	; 0x8c
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	60f8      	str	r0, [r7, #12]
 800d0ac:	60b9      	str	r1, [r7, #8]
 800d0ae:	4613      	mov	r3, r2
 800d0b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	68ba      	ldr	r2, [r7, #8]
 800d0b6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	88fa      	ldrh	r2, [r7, #6]
 800d0bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	88fa      	ldrh	r2, [r7, #6]
 800d0c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0d6:	d10e      	bne.n	800d0f6 <UART_Start_Receive_IT+0x52>
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	691b      	ldr	r3, [r3, #16]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d105      	bne.n	800d0ec <UART_Start_Receive_IT+0x48>
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d0e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d0ea:	e02d      	b.n	800d148 <UART_Start_Receive_IT+0xa4>
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	22ff      	movs	r2, #255	; 0xff
 800d0f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d0f4:	e028      	b.n	800d148 <UART_Start_Receive_IT+0xa4>
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	689b      	ldr	r3, [r3, #8]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d10d      	bne.n	800d11a <UART_Start_Receive_IT+0x76>
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	691b      	ldr	r3, [r3, #16]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d104      	bne.n	800d110 <UART_Start_Receive_IT+0x6c>
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	22ff      	movs	r2, #255	; 0xff
 800d10a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d10e:	e01b      	b.n	800d148 <UART_Start_Receive_IT+0xa4>
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	227f      	movs	r2, #127	; 0x7f
 800d114:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d118:	e016      	b.n	800d148 <UART_Start_Receive_IT+0xa4>
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	689b      	ldr	r3, [r3, #8]
 800d11e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d122:	d10d      	bne.n	800d140 <UART_Start_Receive_IT+0x9c>
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	691b      	ldr	r3, [r3, #16]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d104      	bne.n	800d136 <UART_Start_Receive_IT+0x92>
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	227f      	movs	r2, #127	; 0x7f
 800d130:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d134:	e008      	b.n	800d148 <UART_Start_Receive_IT+0xa4>
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	223f      	movs	r2, #63	; 0x3f
 800d13a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d13e:	e003      	b.n	800d148 <UART_Start_Receive_IT+0xa4>
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2200      	movs	r2, #0
 800d144:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2200      	movs	r2, #0
 800d14c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	2222      	movs	r2, #34	; 0x22
 800d154:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	3308      	adds	r3, #8
 800d15e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d162:	e853 3f00 	ldrex	r3, [r3]
 800d166:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d168:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d16a:	f043 0301 	orr.w	r3, r3, #1
 800d16e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	3308      	adds	r3, #8
 800d178:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d17c:	673a      	str	r2, [r7, #112]	; 0x70
 800d17e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d180:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d182:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d184:	e841 2300 	strex	r3, r2, [r1]
 800d188:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800d18a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d1e3      	bne.n	800d158 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d198:	d153      	bne.n	800d242 <UART_Start_Receive_IT+0x19e>
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d1a0:	88fa      	ldrh	r2, [r7, #6]
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d34d      	bcc.n	800d242 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	689b      	ldr	r3, [r3, #8]
 800d1aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1ae:	d107      	bne.n	800d1c0 <UART_Start_Receive_IT+0x11c>
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	691b      	ldr	r3, [r3, #16]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d103      	bne.n	800d1c0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	4a4b      	ldr	r2, [pc, #300]	; (800d2e8 <UART_Start_Receive_IT+0x244>)
 800d1bc:	671a      	str	r2, [r3, #112]	; 0x70
 800d1be:	e002      	b.n	800d1c6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	4a4a      	ldr	r2, [pc, #296]	; (800d2ec <UART_Start_Receive_IT+0x248>)
 800d1c4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	691b      	ldr	r3, [r3, #16]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d01a      	beq.n	800d20c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1de:	e853 3f00 	ldrex	r3, [r3]
 800d1e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d1e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d1f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d1fa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d1fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d200:	e841 2300 	strex	r3, r2, [r1]
 800d204:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d1e4      	bne.n	800d1d6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	3308      	adds	r3, #8
 800d212:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d216:	e853 3f00 	ldrex	r3, [r3]
 800d21a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d21e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d222:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	3308      	adds	r3, #8
 800d22a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d22c:	64ba      	str	r2, [r7, #72]	; 0x48
 800d22e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d230:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d232:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d234:	e841 2300 	strex	r3, r2, [r1]
 800d238:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d23a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d1e5      	bne.n	800d20c <UART_Start_Receive_IT+0x168>
 800d240:	e04a      	b.n	800d2d8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	689b      	ldr	r3, [r3, #8]
 800d246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d24a:	d107      	bne.n	800d25c <UART_Start_Receive_IT+0x1b8>
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	691b      	ldr	r3, [r3, #16]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d103      	bne.n	800d25c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	4a26      	ldr	r2, [pc, #152]	; (800d2f0 <UART_Start_Receive_IT+0x24c>)
 800d258:	671a      	str	r2, [r3, #112]	; 0x70
 800d25a:	e002      	b.n	800d262 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	4a25      	ldr	r2, [pc, #148]	; (800d2f4 <UART_Start_Receive_IT+0x250>)
 800d260:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2200      	movs	r2, #0
 800d266:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	691b      	ldr	r3, [r3, #16]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d019      	beq.n	800d2a6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d27a:	e853 3f00 	ldrex	r3, [r3]
 800d27e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d282:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d286:	677b      	str	r3, [r7, #116]	; 0x74
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	461a      	mov	r2, r3
 800d28e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d290:	637b      	str	r3, [r7, #52]	; 0x34
 800d292:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d294:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d296:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d298:	e841 2300 	strex	r3, r2, [r1]
 800d29c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d1e6      	bne.n	800d272 <UART_Start_Receive_IT+0x1ce>
 800d2a4:	e018      	b.n	800d2d8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	e853 3f00 	ldrex	r3, [r3]
 800d2b2:	613b      	str	r3, [r7, #16]
   return(result);
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	f043 0320 	orr.w	r3, r3, #32
 800d2ba:	67bb      	str	r3, [r7, #120]	; 0x78
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2c4:	623b      	str	r3, [r7, #32]
 800d2c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2c8:	69f9      	ldr	r1, [r7, #28]
 800d2ca:	6a3a      	ldr	r2, [r7, #32]
 800d2cc:	e841 2300 	strex	r3, r2, [r1]
 800d2d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800d2d2:	69bb      	ldr	r3, [r7, #24]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d1e6      	bne.n	800d2a6 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800d2d8:	2300      	movs	r3, #0
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	378c      	adds	r7, #140	; 0x8c
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e4:	4770      	bx	lr
 800d2e6:	bf00      	nop
 800d2e8:	0800d8b1 	.word	0x0800d8b1
 800d2ec:	0800d5b9 	.word	0x0800d5b9
 800d2f0:	0800d459 	.word	0x0800d459
 800d2f4:	0800d2f9 	.word	0x0800d2f9

0800d2f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b096      	sub	sp, #88	; 0x58
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d306:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d310:	2b22      	cmp	r3, #34	; 0x22
 800d312:	f040 8095 	bne.w	800d440 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d31c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d320:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800d324:	b2d9      	uxtb	r1, r3
 800d326:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d32a:	b2da      	uxtb	r2, r3
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d330:	400a      	ands	r2, r1
 800d332:	b2d2      	uxtb	r2, r2
 800d334:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d33a:	1c5a      	adds	r2, r3, #1
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d346:	b29b      	uxth	r3, r3
 800d348:	3b01      	subs	r3, #1
 800d34a:	b29a      	uxth	r2, r3
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d358:	b29b      	uxth	r3, r3
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d178      	bne.n	800d450 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d366:	e853 3f00 	ldrex	r3, [r3]
 800d36a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d36c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d36e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d372:	653b      	str	r3, [r7, #80]	; 0x50
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	461a      	mov	r2, r3
 800d37a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d37c:	647b      	str	r3, [r7, #68]	; 0x44
 800d37e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d380:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d382:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d384:	e841 2300 	strex	r3, r2, [r1]
 800d388:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d38a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d1e6      	bne.n	800d35e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	3308      	adds	r3, #8
 800d396:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d39a:	e853 3f00 	ldrex	r3, [r3]
 800d39e:	623b      	str	r3, [r7, #32]
   return(result);
 800d3a0:	6a3b      	ldr	r3, [r7, #32]
 800d3a2:	f023 0301 	bic.w	r3, r3, #1
 800d3a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	3308      	adds	r3, #8
 800d3ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d3b0:	633a      	str	r2, [r7, #48]	; 0x30
 800d3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d3b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3b8:	e841 2300 	strex	r3, r2, [r1]
 800d3bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d1e5      	bne.n	800d390 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2220      	movs	r2, #32
 800d3c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3d6:	2b01      	cmp	r3, #1
 800d3d8:	d12e      	bne.n	800d438 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	e853 3f00 	ldrex	r3, [r3]
 800d3ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	f023 0310 	bic.w	r3, r3, #16
 800d3f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3fe:	61fb      	str	r3, [r7, #28]
 800d400:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d402:	69b9      	ldr	r1, [r7, #24]
 800d404:	69fa      	ldr	r2, [r7, #28]
 800d406:	e841 2300 	strex	r3, r2, [r1]
 800d40a:	617b      	str	r3, [r7, #20]
   return(result);
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d1e6      	bne.n	800d3e0 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	69db      	ldr	r3, [r3, #28]
 800d418:	f003 0310 	and.w	r3, r3, #16
 800d41c:	2b10      	cmp	r3, #16
 800d41e:	d103      	bne.n	800d428 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	2210      	movs	r2, #16
 800d426:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d42e:	4619      	mov	r1, r3
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f7fe ff0d 	bl	800c250 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d436:	e00b      	b.n	800d450 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f7f3 fc31 	bl	8000ca0 <HAL_UART_RxCpltCallback>
}
 800d43e:	e007      	b.n	800d450 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	699a      	ldr	r2, [r3, #24]
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f042 0208 	orr.w	r2, r2, #8
 800d44e:	619a      	str	r2, [r3, #24]
}
 800d450:	bf00      	nop
 800d452:	3758      	adds	r7, #88	; 0x58
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b096      	sub	sp, #88	; 0x58
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d466:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d470:	2b22      	cmp	r3, #34	; 0x22
 800d472:	f040 8095 	bne.w	800d5a0 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d47c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d484:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800d486:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800d48a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d48e:	4013      	ands	r3, r2
 800d490:	b29a      	uxth	r2, r3
 800d492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d494:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d49a:	1c9a      	adds	r2, r3, #2
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d4a6:	b29b      	uxth	r3, r3
 800d4a8:	3b01      	subs	r3, #1
 800d4aa:	b29a      	uxth	r2, r3
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d4b8:	b29b      	uxth	r3, r3
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d178      	bne.n	800d5b0 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4c6:	e853 3f00 	ldrex	r3, [r3]
 800d4ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d4d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	461a      	mov	r2, r3
 800d4da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4dc:	643b      	str	r3, [r7, #64]	; 0x40
 800d4de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d4e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4e4:	e841 2300 	strex	r3, r2, [r1]
 800d4e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d1e6      	bne.n	800d4be <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	3308      	adds	r3, #8
 800d4f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4f8:	6a3b      	ldr	r3, [r7, #32]
 800d4fa:	e853 3f00 	ldrex	r3, [r3]
 800d4fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800d500:	69fb      	ldr	r3, [r7, #28]
 800d502:	f023 0301 	bic.w	r3, r3, #1
 800d506:	64bb      	str	r3, [r7, #72]	; 0x48
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	3308      	adds	r3, #8
 800d50e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d510:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d518:	e841 2300 	strex	r3, r2, [r1]
 800d51c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d520:	2b00      	cmp	r3, #0
 800d522:	d1e5      	bne.n	800d4f0 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2220      	movs	r2, #32
 800d528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2200      	movs	r2, #0
 800d530:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d536:	2b01      	cmp	r3, #1
 800d538:	d12e      	bne.n	800d598 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2200      	movs	r2, #0
 800d53e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	e853 3f00 	ldrex	r3, [r3]
 800d54c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	f023 0310 	bic.w	r3, r3, #16
 800d554:	647b      	str	r3, [r7, #68]	; 0x44
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	461a      	mov	r2, r3
 800d55c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d55e:	61bb      	str	r3, [r7, #24]
 800d560:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d562:	6979      	ldr	r1, [r7, #20]
 800d564:	69ba      	ldr	r2, [r7, #24]
 800d566:	e841 2300 	strex	r3, r2, [r1]
 800d56a:	613b      	str	r3, [r7, #16]
   return(result);
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d1e6      	bne.n	800d540 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	69db      	ldr	r3, [r3, #28]
 800d578:	f003 0310 	and.w	r3, r3, #16
 800d57c:	2b10      	cmp	r3, #16
 800d57e:	d103      	bne.n	800d588 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	2210      	movs	r2, #16
 800d586:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d58e:	4619      	mov	r1, r3
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f7fe fe5d 	bl	800c250 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d596:	e00b      	b.n	800d5b0 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f7f3 fb81 	bl	8000ca0 <HAL_UART_RxCpltCallback>
}
 800d59e:	e007      	b.n	800d5b0 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	699a      	ldr	r2, [r3, #24]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f042 0208 	orr.w	r2, r2, #8
 800d5ae:	619a      	str	r2, [r3, #24]
}
 800d5b0:	bf00      	nop
 800d5b2:	3758      	adds	r7, #88	; 0x58
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b0a6      	sub	sp, #152	; 0x98
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d5c6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	69db      	ldr	r3, [r3, #28]
 800d5d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	689b      	ldr	r3, [r3, #8]
 800d5e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5ee:	2b22      	cmp	r3, #34	; 0x22
 800d5f0:	f040 814d 	bne.w	800d88e <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d5fa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d5fe:	e0f4      	b.n	800d7ea <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d606:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d60a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800d60e:	b2d9      	uxtb	r1, r3
 800d610:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800d614:	b2da      	uxtb	r2, r3
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d61a:	400a      	ands	r2, r1
 800d61c:	b2d2      	uxtb	r2, r2
 800d61e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d624:	1c5a      	adds	r2, r3, #1
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d630:	b29b      	uxth	r3, r3
 800d632:	3b01      	subs	r3, #1
 800d634:	b29a      	uxth	r2, r3
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	69db      	ldr	r3, [r3, #28]
 800d642:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d646:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d64a:	f003 0307 	and.w	r3, r3, #7
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d053      	beq.n	800d6fa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d652:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d656:	f003 0301 	and.w	r3, r3, #1
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d011      	beq.n	800d682 <UART_RxISR_8BIT_FIFOEN+0xca>
 800d65e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d666:	2b00      	cmp	r3, #0
 800d668:	d00b      	beq.n	800d682 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	2201      	movs	r2, #1
 800d670:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d678:	f043 0201 	orr.w	r2, r3, #1
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d682:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d686:	f003 0302 	and.w	r3, r3, #2
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d011      	beq.n	800d6b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d68e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d692:	f003 0301 	and.w	r3, r3, #1
 800d696:	2b00      	cmp	r3, #0
 800d698:	d00b      	beq.n	800d6b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	2202      	movs	r2, #2
 800d6a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6a8:	f043 0204 	orr.w	r2, r3, #4
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d6b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d6b6:	f003 0304 	and.w	r3, r3, #4
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d011      	beq.n	800d6e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d6be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d6c2:	f003 0301 	and.w	r3, r3, #1
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d00b      	beq.n	800d6e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	2204      	movs	r2, #4
 800d6d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6d8:	f043 0202 	orr.w	r2, r3, #2
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d006      	beq.n	800d6fa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f7fe fda5 	bl	800c23c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d700:	b29b      	uxth	r3, r3
 800d702:	2b00      	cmp	r3, #0
 800d704:	d171      	bne.n	800d7ea <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d70c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d70e:	e853 3f00 	ldrex	r3, [r3]
 800d712:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800d714:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d716:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d71a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	461a      	mov	r2, r3
 800d724:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d728:	66bb      	str	r3, [r7, #104]	; 0x68
 800d72a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d72c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d72e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d730:	e841 2300 	strex	r3, r2, [r1]
 800d734:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d1e4      	bne.n	800d706 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	3308      	adds	r3, #8
 800d742:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d746:	e853 3f00 	ldrex	r3, [r3]
 800d74a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d74c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d74e:	4b56      	ldr	r3, [pc, #344]	; (800d8a8 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800d750:	4013      	ands	r3, r2
 800d752:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	3308      	adds	r3, #8
 800d75a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d75c:	657a      	str	r2, [r7, #84]	; 0x54
 800d75e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d760:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d762:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d764:	e841 2300 	strex	r3, r2, [r1]
 800d768:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d76a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d1e5      	bne.n	800d73c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2220      	movs	r2, #32
 800d774:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2200      	movs	r2, #0
 800d77c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d782:	2b01      	cmp	r3, #1
 800d784:	d12e      	bne.n	800d7e4 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2200      	movs	r2, #0
 800d78a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d794:	e853 3f00 	ldrex	r3, [r3]
 800d798:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79c:	f023 0310 	bic.w	r3, r3, #16
 800d7a0:	67bb      	str	r3, [r7, #120]	; 0x78
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d7aa:	643b      	str	r3, [r7, #64]	; 0x40
 800d7ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d7b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7b2:	e841 2300 	strex	r3, r2, [r1]
 800d7b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d1e6      	bne.n	800d78c <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	69db      	ldr	r3, [r3, #28]
 800d7c4:	f003 0310 	and.w	r3, r3, #16
 800d7c8:	2b10      	cmp	r3, #16
 800d7ca:	d103      	bne.n	800d7d4 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	2210      	movs	r2, #16
 800d7d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d7da:	4619      	mov	r1, r3
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f7fe fd37 	bl	800c250 <HAL_UARTEx_RxEventCallback>
 800d7e2:	e002      	b.n	800d7ea <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	f7f3 fa5b 	bl	8000ca0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d7ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d006      	beq.n	800d800 <UART_RxISR_8BIT_FIFOEN+0x248>
 800d7f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d7f6:	f003 0320 	and.w	r3, r3, #32
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	f47f af00 	bne.w	800d600 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d806:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d80a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d045      	beq.n	800d89e <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d818:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d23e      	bcs.n	800d89e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	3308      	adds	r3, #8
 800d826:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d828:	6a3b      	ldr	r3, [r7, #32]
 800d82a:	e853 3f00 	ldrex	r3, [r3]
 800d82e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d830:	69fb      	ldr	r3, [r7, #28]
 800d832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d836:	673b      	str	r3, [r7, #112]	; 0x70
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	3308      	adds	r3, #8
 800d83e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d840:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d842:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d844:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d848:	e841 2300 	strex	r3, r2, [r1]
 800d84c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d850:	2b00      	cmp	r3, #0
 800d852:	d1e5      	bne.n	800d820 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	4a15      	ldr	r2, [pc, #84]	; (800d8ac <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800d858:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	e853 3f00 	ldrex	r3, [r3]
 800d866:	60bb      	str	r3, [r7, #8]
   return(result);
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	f043 0320 	orr.w	r3, r3, #32
 800d86e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	461a      	mov	r2, r3
 800d876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d878:	61bb      	str	r3, [r7, #24]
 800d87a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d87c:	6979      	ldr	r1, [r7, #20]
 800d87e:	69ba      	ldr	r2, [r7, #24]
 800d880:	e841 2300 	strex	r3, r2, [r1]
 800d884:	613b      	str	r3, [r7, #16]
   return(result);
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d1e6      	bne.n	800d85a <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d88c:	e007      	b.n	800d89e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	699a      	ldr	r2, [r3, #24]
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f042 0208 	orr.w	r2, r2, #8
 800d89c:	619a      	str	r2, [r3, #24]
}
 800d89e:	bf00      	nop
 800d8a0:	3798      	adds	r7, #152	; 0x98
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
 800d8a6:	bf00      	nop
 800d8a8:	effffffe 	.word	0xeffffffe
 800d8ac:	0800d2f9 	.word	0x0800d2f9

0800d8b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b0a8      	sub	sp, #160	; 0xa0
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d8be:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	69db      	ldr	r3, [r3, #28]
 800d8c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	689b      	ldr	r3, [r3, #8]
 800d8dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8e6:	2b22      	cmp	r3, #34	; 0x22
 800d8e8:	f040 8151 	bne.w	800db8e <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d8f2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d8f6:	e0f8      	b.n	800daea <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8fe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d906:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800d90a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800d90e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800d912:	4013      	ands	r3, r2
 800d914:	b29a      	uxth	r2, r3
 800d916:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d91a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d920:	1c9a      	adds	r2, r3, #2
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d92c:	b29b      	uxth	r3, r3
 800d92e:	3b01      	subs	r3, #1
 800d930:	b29a      	uxth	r2, r3
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	69db      	ldr	r3, [r3, #28]
 800d93e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d942:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d946:	f003 0307 	and.w	r3, r3, #7
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d053      	beq.n	800d9f6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d94e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d952:	f003 0301 	and.w	r3, r3, #1
 800d956:	2b00      	cmp	r3, #0
 800d958:	d011      	beq.n	800d97e <UART_RxISR_16BIT_FIFOEN+0xce>
 800d95a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d95e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d962:	2b00      	cmp	r3, #0
 800d964:	d00b      	beq.n	800d97e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	2201      	movs	r2, #1
 800d96c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d974:	f043 0201 	orr.w	r2, r3, #1
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d97e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d982:	f003 0302 	and.w	r3, r3, #2
 800d986:	2b00      	cmp	r3, #0
 800d988:	d011      	beq.n	800d9ae <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d98a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d98e:	f003 0301 	and.w	r3, r3, #1
 800d992:	2b00      	cmp	r3, #0
 800d994:	d00b      	beq.n	800d9ae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	2202      	movs	r2, #2
 800d99c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d9a4:	f043 0204 	orr.w	r2, r3, #4
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d9ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d9b2:	f003 0304 	and.w	r3, r3, #4
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d011      	beq.n	800d9de <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d9ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d9be:	f003 0301 	and.w	r3, r3, #1
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d00b      	beq.n	800d9de <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2204      	movs	r2, #4
 800d9cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d9d4:	f043 0202 	orr.w	r2, r3, #2
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d006      	beq.n	800d9f6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f7fe fc27 	bl	800c23c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d9fc:	b29b      	uxth	r3, r3
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d173      	bne.n	800daea <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da0a:	e853 3f00 	ldrex	r3, [r3]
 800da0e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800da10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	461a      	mov	r2, r3
 800da20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800da24:	66fb      	str	r3, [r7, #108]	; 0x6c
 800da26:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da28:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800da2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800da2c:	e841 2300 	strex	r3, r2, [r1]
 800da30:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800da32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da34:	2b00      	cmp	r3, #0
 800da36:	d1e4      	bne.n	800da02 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	3308      	adds	r3, #8
 800da3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da42:	e853 3f00 	ldrex	r3, [r3]
 800da46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800da48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da4a:	4b57      	ldr	r3, [pc, #348]	; (800dba8 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800da4c:	4013      	ands	r3, r2
 800da4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	3308      	adds	r3, #8
 800da58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800da5c:	65ba      	str	r2, [r7, #88]	; 0x58
 800da5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800da62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800da64:	e841 2300 	strex	r3, r2, [r1]
 800da68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800da6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d1e3      	bne.n	800da38 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2220      	movs	r2, #32
 800da74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2200      	movs	r2, #0
 800da7c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da82:	2b01      	cmp	r3, #1
 800da84:	d12e      	bne.n	800dae4 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2200      	movs	r2, #0
 800da8a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da94:	e853 3f00 	ldrex	r3, [r3]
 800da98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800da9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da9c:	f023 0310 	bic.w	r3, r3, #16
 800daa0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	461a      	mov	r2, r3
 800daa8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800daaa:	647b      	str	r3, [r7, #68]	; 0x44
 800daac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dab0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dab2:	e841 2300 	strex	r3, r2, [r1]
 800dab6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d1e6      	bne.n	800da8c <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	69db      	ldr	r3, [r3, #28]
 800dac4:	f003 0310 	and.w	r3, r3, #16
 800dac8:	2b10      	cmp	r3, #16
 800daca:	d103      	bne.n	800dad4 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	2210      	movs	r2, #16
 800dad2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dada:	4619      	mov	r1, r3
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f7fe fbb7 	bl	800c250 <HAL_UARTEx_RxEventCallback>
 800dae2:	e002      	b.n	800daea <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f7f3 f8db 	bl	8000ca0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800daea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d006      	beq.n	800db00 <UART_RxISR_16BIT_FIFOEN+0x250>
 800daf2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800daf6:	f003 0320 	and.w	r3, r3, #32
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	f47f aefc 	bne.w	800d8f8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800db06:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800db0a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d045      	beq.n	800db9e <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800db18:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d23e      	bcs.n	800db9e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	3308      	adds	r3, #8
 800db26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2a:	e853 3f00 	ldrex	r3, [r3]
 800db2e:	623b      	str	r3, [r7, #32]
   return(result);
 800db30:	6a3b      	ldr	r3, [r7, #32]
 800db32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800db36:	677b      	str	r3, [r7, #116]	; 0x74
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	3308      	adds	r3, #8
 800db3e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800db40:	633a      	str	r2, [r7, #48]	; 0x30
 800db42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db48:	e841 2300 	strex	r3, r2, [r1]
 800db4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800db4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db50:	2b00      	cmp	r3, #0
 800db52:	d1e5      	bne.n	800db20 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	4a15      	ldr	r2, [pc, #84]	; (800dbac <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800db58:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	e853 3f00 	ldrex	r3, [r3]
 800db66:	60fb      	str	r3, [r7, #12]
   return(result);
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	f043 0320 	orr.w	r3, r3, #32
 800db6e:	673b      	str	r3, [r7, #112]	; 0x70
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	461a      	mov	r2, r3
 800db76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800db78:	61fb      	str	r3, [r7, #28]
 800db7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db7c:	69b9      	ldr	r1, [r7, #24]
 800db7e:	69fa      	ldr	r2, [r7, #28]
 800db80:	e841 2300 	strex	r3, r2, [r1]
 800db84:	617b      	str	r3, [r7, #20]
   return(result);
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d1e6      	bne.n	800db5a <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800db8c:	e007      	b.n	800db9e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	699a      	ldr	r2, [r3, #24]
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	f042 0208 	orr.w	r2, r2, #8
 800db9c:	619a      	str	r2, [r3, #24]
}
 800db9e:	bf00      	nop
 800dba0:	37a0      	adds	r7, #160	; 0xa0
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	effffffe 	.word	0xeffffffe
 800dbac:	0800d459 	.word	0x0800d459

0800dbb0 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b088      	sub	sp, #32
 800dbb4:	af02      	add	r7, sp, #8
 800dbb6:	60f8      	str	r0, [r7, #12]
 800dbb8:	1d3b      	adds	r3, r7, #4
 800dbba:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	d101      	bne.n	800dbd0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800dbcc:	2302      	movs	r3, #2
 800dbce:	e046      	b.n	800dc5e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	2224      	movs	r2, #36	; 0x24
 800dbdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	681a      	ldr	r2, [r3, #0]
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f022 0201 	bic.w	r2, r2, #1
 800dbee:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	689b      	ldr	r3, [r3, #8]
 800dbf6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800dbfa:	687a      	ldr	r2, [r7, #4]
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	430a      	orrs	r2, r1
 800dc02:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d105      	bne.n	800dc16 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800dc0a:	1d3b      	adds	r3, r7, #4
 800dc0c:	e893 0006 	ldmia.w	r3, {r1, r2}
 800dc10:	68f8      	ldr	r0, [r7, #12]
 800dc12:	f000 f910 	bl	800de36 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	681a      	ldr	r2, [r3, #0]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	f042 0201 	orr.w	r2, r2, #1
 800dc24:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dc26:	f7f4 fd21 	bl	800266c <HAL_GetTick>
 800dc2a:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dc2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dc30:	9300      	str	r3, [sp, #0]
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	2200      	movs	r2, #0
 800dc36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dc3a:	68f8      	ldr	r0, [r7, #12]
 800dc3c:	f7ff f969 	bl	800cf12 <UART_WaitOnFlagUntilTimeout>
 800dc40:	4603      	mov	r3, r0
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d002      	beq.n	800dc4c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800dc46:	2303      	movs	r3, #3
 800dc48:	75fb      	strb	r3, [r7, #23]
 800dc4a:	e003      	b.n	800dc54 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2220      	movs	r2, #32
 800dc50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2200      	movs	r2, #0
 800dc58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800dc5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3718      	adds	r7, #24
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}

0800dc66 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800dc66:	b480      	push	{r7}
 800dc68:	b089      	sub	sp, #36	; 0x24
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d101      	bne.n	800dc7c <HAL_UARTEx_EnableStopMode+0x16>
 800dc78:	2302      	movs	r3, #2
 800dc7a:	e021      	b.n	800dcc0 <HAL_UARTEx_EnableStopMode+0x5a>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2201      	movs	r2, #1
 800dc80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	e853 3f00 	ldrex	r3, [r3]
 800dc90:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	f043 0302 	orr.w	r3, r3, #2
 800dc98:	61fb      	str	r3, [r7, #28]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	461a      	mov	r2, r3
 800dca0:	69fb      	ldr	r3, [r7, #28]
 800dca2:	61bb      	str	r3, [r7, #24]
 800dca4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dca6:	6979      	ldr	r1, [r7, #20]
 800dca8:	69ba      	ldr	r2, [r7, #24]
 800dcaa:	e841 2300 	strex	r3, r2, [r1]
 800dcae:	613b      	str	r3, [r7, #16]
   return(result);
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d1e6      	bne.n	800dc84 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dcbe:	2300      	movs	r3, #0
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3724      	adds	r7, #36	; 0x24
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcca:	4770      	bx	lr

0800dccc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b085      	sub	sp, #20
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dcda:	2b01      	cmp	r3, #1
 800dcdc:	d101      	bne.n	800dce2 <HAL_UARTEx_DisableFifoMode+0x16>
 800dcde:	2302      	movs	r3, #2
 800dce0:	e027      	b.n	800dd32 <HAL_UARTEx_DisableFifoMode+0x66>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2201      	movs	r2, #1
 800dce6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2224      	movs	r2, #36	; 0x24
 800dcee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	681a      	ldr	r2, [r3, #0]
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	f022 0201 	bic.w	r2, r2, #1
 800dd08:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dd10:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2200      	movs	r2, #0
 800dd16:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	68fa      	ldr	r2, [r7, #12]
 800dd1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2220      	movs	r2, #32
 800dd24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dd30:	2300      	movs	r3, #0
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3714      	adds	r7, #20
 800dd36:	46bd      	mov	sp, r7
 800dd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3c:	4770      	bx	lr

0800dd3e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd3e:	b580      	push	{r7, lr}
 800dd40:	b084      	sub	sp, #16
 800dd42:	af00      	add	r7, sp, #0
 800dd44:	6078      	str	r0, [r7, #4]
 800dd46:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d101      	bne.n	800dd56 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dd52:	2302      	movs	r3, #2
 800dd54:	e02d      	b.n	800ddb2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2201      	movs	r2, #1
 800dd5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2224      	movs	r2, #36	; 0x24
 800dd62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	681a      	ldr	r2, [r3, #0]
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f022 0201 	bic.w	r2, r2, #1
 800dd7c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	689b      	ldr	r3, [r3, #8]
 800dd84:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	683a      	ldr	r2, [r7, #0]
 800dd8e:	430a      	orrs	r2, r1
 800dd90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f000 f872 	bl	800de7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	68fa      	ldr	r2, [r7, #12]
 800dd9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2220      	movs	r2, #32
 800dda4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ddb0:	2300      	movs	r3, #0
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3710      	adds	r7, #16
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}

0800ddba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ddba:	b580      	push	{r7, lr}
 800ddbc:	b084      	sub	sp, #16
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
 800ddc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d101      	bne.n	800ddd2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ddce:	2302      	movs	r3, #2
 800ddd0:	e02d      	b.n	800de2e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2201      	movs	r2, #1
 800ddd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2224      	movs	r2, #36	; 0x24
 800ddde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	681a      	ldr	r2, [r3, #0]
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	f022 0201 	bic.w	r2, r2, #1
 800ddf8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	689b      	ldr	r3, [r3, #8]
 800de00:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	683a      	ldr	r2, [r7, #0]
 800de0a:	430a      	orrs	r2, r1
 800de0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f000 f834 	bl	800de7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	68fa      	ldr	r2, [r7, #12]
 800de1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2220      	movs	r2, #32
 800de20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2200      	movs	r2, #0
 800de28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800de2c:	2300      	movs	r3, #0
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3710      	adds	r7, #16
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}

0800de36 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800de36:	b480      	push	{r7}
 800de38:	b085      	sub	sp, #20
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	60f8      	str	r0, [r7, #12]
 800de3e:	1d3b      	adds	r3, r7, #4
 800de40:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	685b      	ldr	r3, [r3, #4]
 800de4a:	f023 0210 	bic.w	r2, r3, #16
 800de4e:	893b      	ldrh	r3, [r7, #8]
 800de50:	4619      	mov	r1, r3
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	430a      	orrs	r2, r1
 800de58:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800de64:	7abb      	ldrb	r3, [r7, #10]
 800de66:	061a      	lsls	r2, r3, #24
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	430a      	orrs	r2, r1
 800de6e:	605a      	str	r2, [r3, #4]
}
 800de70:	bf00      	nop
 800de72:	3714      	adds	r7, #20
 800de74:	46bd      	mov	sp, r7
 800de76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7a:	4770      	bx	lr

0800de7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800de7c:	b480      	push	{r7}
 800de7e:	b085      	sub	sp, #20
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d108      	bne.n	800de9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2201      	movs	r2, #1
 800de90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2201      	movs	r2, #1
 800de98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800de9c:	e031      	b.n	800df02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800de9e:	2310      	movs	r3, #16
 800dea0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dea2:	2310      	movs	r3, #16
 800dea4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	689b      	ldr	r3, [r3, #8]
 800deac:	0e5b      	lsrs	r3, r3, #25
 800deae:	b2db      	uxtb	r3, r3
 800deb0:	f003 0307 	and.w	r3, r3, #7
 800deb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	689b      	ldr	r3, [r3, #8]
 800debc:	0f5b      	lsrs	r3, r3, #29
 800debe:	b2db      	uxtb	r3, r3
 800dec0:	f003 0307 	and.w	r3, r3, #7
 800dec4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dec6:	7bbb      	ldrb	r3, [r7, #14]
 800dec8:	7b3a      	ldrb	r2, [r7, #12]
 800deca:	4911      	ldr	r1, [pc, #68]	; (800df10 <UARTEx_SetNbDataToProcess+0x94>)
 800decc:	5c8a      	ldrb	r2, [r1, r2]
 800dece:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ded2:	7b3a      	ldrb	r2, [r7, #12]
 800ded4:	490f      	ldr	r1, [pc, #60]	; (800df14 <UARTEx_SetNbDataToProcess+0x98>)
 800ded6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ded8:	fb93 f3f2 	sdiv	r3, r3, r2
 800dedc:	b29a      	uxth	r2, r3
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dee4:	7bfb      	ldrb	r3, [r7, #15]
 800dee6:	7b7a      	ldrb	r2, [r7, #13]
 800dee8:	4909      	ldr	r1, [pc, #36]	; (800df10 <UARTEx_SetNbDataToProcess+0x94>)
 800deea:	5c8a      	ldrb	r2, [r1, r2]
 800deec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800def0:	7b7a      	ldrb	r2, [r7, #13]
 800def2:	4908      	ldr	r1, [pc, #32]	; (800df14 <UARTEx_SetNbDataToProcess+0x98>)
 800def4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800def6:	fb93 f3f2 	sdiv	r3, r3, r2
 800defa:	b29a      	uxth	r2, r3
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800df02:	bf00      	nop
 800df04:	3714      	adds	r7, #20
 800df06:	46bd      	mov	sp, r7
 800df08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0c:	4770      	bx	lr
 800df0e:	bf00      	nop
 800df10:	0800dfd4 	.word	0x0800dfd4
 800df14:	0800dfdc 	.word	0x0800dfdc

0800df18 <__libc_init_array>:
 800df18:	b570      	push	{r4, r5, r6, lr}
 800df1a:	4d0d      	ldr	r5, [pc, #52]	; (800df50 <__libc_init_array+0x38>)
 800df1c:	4c0d      	ldr	r4, [pc, #52]	; (800df54 <__libc_init_array+0x3c>)
 800df1e:	1b64      	subs	r4, r4, r5
 800df20:	10a4      	asrs	r4, r4, #2
 800df22:	2600      	movs	r6, #0
 800df24:	42a6      	cmp	r6, r4
 800df26:	d109      	bne.n	800df3c <__libc_init_array+0x24>
 800df28:	4d0b      	ldr	r5, [pc, #44]	; (800df58 <__libc_init_array+0x40>)
 800df2a:	4c0c      	ldr	r4, [pc, #48]	; (800df5c <__libc_init_array+0x44>)
 800df2c:	f000 f820 	bl	800df70 <_init>
 800df30:	1b64      	subs	r4, r4, r5
 800df32:	10a4      	asrs	r4, r4, #2
 800df34:	2600      	movs	r6, #0
 800df36:	42a6      	cmp	r6, r4
 800df38:	d105      	bne.n	800df46 <__libc_init_array+0x2e>
 800df3a:	bd70      	pop	{r4, r5, r6, pc}
 800df3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800df40:	4798      	blx	r3
 800df42:	3601      	adds	r6, #1
 800df44:	e7ee      	b.n	800df24 <__libc_init_array+0xc>
 800df46:	f855 3b04 	ldr.w	r3, [r5], #4
 800df4a:	4798      	blx	r3
 800df4c:	3601      	adds	r6, #1
 800df4e:	e7f2      	b.n	800df36 <__libc_init_array+0x1e>
 800df50:	0800dfec 	.word	0x0800dfec
 800df54:	0800dfec 	.word	0x0800dfec
 800df58:	0800dfec 	.word	0x0800dfec
 800df5c:	0800dff0 	.word	0x0800dff0

0800df60 <memset>:
 800df60:	4402      	add	r2, r0
 800df62:	4603      	mov	r3, r0
 800df64:	4293      	cmp	r3, r2
 800df66:	d100      	bne.n	800df6a <memset+0xa>
 800df68:	4770      	bx	lr
 800df6a:	f803 1b01 	strb.w	r1, [r3], #1
 800df6e:	e7f9      	b.n	800df64 <memset+0x4>

0800df70 <_init>:
 800df70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df72:	bf00      	nop
 800df74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df76:	bc08      	pop	{r3}
 800df78:	469e      	mov	lr, r3
 800df7a:	4770      	bx	lr

0800df7c <_fini>:
 800df7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df7e:	bf00      	nop
 800df80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df82:	bc08      	pop	{r3}
 800df84:	469e      	mov	lr, r3
 800df86:	4770      	bx	lr
