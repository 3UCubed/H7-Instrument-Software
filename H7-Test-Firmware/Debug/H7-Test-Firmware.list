
H7-Test-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fda4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0801003c  0801003c  0002003c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010094  08010094  00020094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801009c  0801009c  0002009c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080100a0  080100a0  000200a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  24000000  080100a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000058c  240000a0  0801013c  000300a0  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400062c  0801013c  0003062c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023b52  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003711  00000000  00000000  00053c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b58  00000000  00000000  00057330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001a10  00000000  00000000  00058e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b1ff  00000000  00000000  0005a898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000240f3  00000000  00000000  00095a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00180631  00000000  00000000  000b9b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023a1bb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000795c  00000000  00000000  0023a20c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000a0 	.word	0x240000a0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08010024 	.word	0x08010024

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000a4 	.word	0x240000a4
 80002d4:	08010024 	.word	0x08010024

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ee:	4904      	ldr	r1, [pc, #16]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x28>)
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f6:	f3bf 8f4f 	dsb	sy
}
 80005fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <__NVIC_SystemReset+0x20>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	05fa0004 	.word	0x05fa0004

08000608 <poll_i2c_sensor>:
 *
 * @param TEMP_ADDR address of individual i2c sensor
 * @return int16_t integer result from sensor
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af02      	add	r7, sp, #8
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
  int16_t output;
  uint8_t buf[2];
  HAL_StatusTypeDef ret;
  buf[0] = REG_TEMP;
 8000612:	2300      	movs	r3, #0
 8000614:	723b      	strb	r3, [r7, #8]
  ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1,
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	b299      	uxth	r1, r3
 800061a:	f107 0208 	add.w	r2, r7, #8
 800061e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2301      	movs	r3, #1
 8000626:	481d      	ldr	r0, [pc, #116]	; (800069c <poll_i2c_sensor+0x94>)
 8000628:	f007 fb10 	bl	8007c4c <HAL_I2C_Master_Transmit>
 800062c:	4603      	mov	r3, r0
 800062e:	737b      	strb	r3, [r7, #13]
                                1000);
  if (ret != HAL_OK)
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d009      	beq.n	800064a <poll_i2c_sensor+0x42>
  {
    strcpy((char *)buf, "Error Tx\r\n");
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	4a19      	ldr	r2, [pc, #100]	; (80006a0 <poll_i2c_sensor+0x98>)
 800063c:	ca07      	ldmia	r2, {r0, r1, r2}
 800063e:	c303      	stmia	r3!, {r0, r1}
 8000640:	801a      	strh	r2, [r3, #0]
 8000642:	3302      	adds	r3, #2
 8000644:	0c12      	lsrs	r2, r2, #16
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	e022      	b.n	8000690 <poll_i2c_sensor+0x88>
  }
  else
  {
    /* Read 2 bytes from the temperature register */
    ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2,
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	b299      	uxth	r1, r3
 800064e:	f107 0208 	add.w	r2, r7, #8
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2302      	movs	r3, #2
 800065a:	4810      	ldr	r0, [pc, #64]	; (800069c <poll_i2c_sensor+0x94>)
 800065c:	f007 fbea 	bl	8007e34 <HAL_I2C_Master_Receive>
 8000660:	4603      	mov	r3, r0
 8000662:	737b      	strb	r3, [r7, #13]
                                 1000);
    if (ret != HAL_OK)
 8000664:	7b7b      	ldrb	r3, [r7, #13]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d009      	beq.n	800067e <poll_i2c_sensor+0x76>
    {
      strcpy((char *)buf, "Error Rx\r\n");
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <poll_i2c_sensor+0x9c>)
 8000670:	ca07      	ldmia	r2, {r0, r1, r2}
 8000672:	c303      	stmia	r3!, {r0, r1}
 8000674:	801a      	strh	r2, [r3, #0]
 8000676:	3302      	adds	r3, #2
 8000678:	0c12      	lsrs	r2, r2, #16
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	e008      	b.n	8000690 <poll_i2c_sensor+0x88>
    }
    else
    {
      output = (int16_t)(buf[0] << 8);
 800067e:	7a3b      	ldrb	r3, [r7, #8]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	81fb      	strh	r3, [r7, #14]
      output = (output | buf[1]) >> 3;
 8000684:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000688:	7a7a      	ldrb	r2, [r7, #9]
 800068a:	4313      	orrs	r3, r2
 800068c:	10db      	asrs	r3, r3, #3
 800068e:	81fb      	strh	r3, [r7, #14]
    }
  }
  return output;
 8000690:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	24000288 	.word	0x24000288
 80006a0:	0801003c 	.word	0x0801003c
 80006a4:	08010048 	.word	0x08010048

080006a8 <i2c>:
 * @brief called in hk routine to poll each i2c sensor
 *
 * @return int16_t* size 4 buffer to return i2c values
 */
int16_t *i2c()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
  int16_t output1 = poll_i2c_sensor(ADT7410_1);
 80006ae:	2390      	movs	r3, #144	; 0x90
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffa9 	bl	8000608 <poll_i2c_sensor>
 80006b6:	4603      	mov	r3, r0
 80006b8:	81fb      	strh	r3, [r7, #14]
  int16_t output2 = poll_i2c_sensor(ADT7410_2);
 80006ba:	2394      	movs	r3, #148	; 0x94
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffa3 	bl	8000608 <poll_i2c_sensor>
 80006c2:	4603      	mov	r3, r0
 80006c4:	81bb      	strh	r3, [r7, #12]
  int16_t output3 = poll_i2c_sensor(ADT7410_3);
 80006c6:	2392      	movs	r3, #146	; 0x92
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff9d 	bl	8000608 <poll_i2c_sensor>
 80006ce:	4603      	mov	r3, r0
 80006d0:	817b      	strh	r3, [r7, #10]
  int16_t output4 = poll_i2c_sensor(ADT7410_4);
 80006d2:	2396      	movs	r3, #150	; 0x96
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff97 	bl	8000608 <poll_i2c_sensor>
 80006da:	4603      	mov	r3, r0
 80006dc:	813b      	strh	r3, [r7, #8]

  int16_t *results = malloc(4 * sizeof(int16_t));
 80006de:	2008      	movs	r0, #8
 80006e0:	f00f fb7c 	bl	800fddc <malloc>
 80006e4:	4603      	mov	r3, r0
 80006e6:	607b      	str	r3, [r7, #4]
  results[0] = output1;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	89fa      	ldrh	r2, [r7, #14]
 80006ec:	801a      	strh	r2, [r3, #0]
  results[1] = output2;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3302      	adds	r3, #2
 80006f2:	89ba      	ldrh	r2, [r7, #12]
 80006f4:	801a      	strh	r2, [r3, #0]
  results[2] = output3;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3304      	adds	r3, #4
 80006fa:	897a      	ldrh	r2, [r7, #10]
 80006fc:	801a      	strh	r2, [r3, #0]
  results[3] = output4;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3306      	adds	r3, #6
 8000702:	893a      	ldrh	r2, [r7, #8]
 8000704:	801a      	strh	r2, [r3, #0]
  return results;
 8000706:	687b      	ldr	r3, [r7, #4]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <do_auto_sweep>:
/**
 * @brief if auto sweep is enabled, will increase step
 *
 */
void do_auto_sweep()
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  if (step == 7)
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <do_auto_sweep+0x50>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b07      	cmp	r3, #7
 800071a:	d103      	bne.n	8000724 <do_auto_sweep+0x14>
  {
    is_increasing = 0;
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <do_auto_sweep+0x54>)
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	e006      	b.n	8000732 <do_auto_sweep+0x22>
  }
  else if (step == 0)
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <do_auto_sweep+0x50>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d102      	bne.n	8000732 <do_auto_sweep+0x22>
  {
    is_increasing = 1;
 800072c:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <do_auto_sweep+0x54>)
 800072e:	2201      	movs	r2, #1
 8000730:	601a      	str	r2, [r3, #0]
  }

  if (is_increasing)
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <do_auto_sweep+0x54>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d006      	beq.n	8000748 <do_auto_sweep+0x38>
  {
    step++;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <do_auto_sweep+0x50>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b07      	ldr	r3, [pc, #28]	; (8000760 <do_auto_sweep+0x50>)
 8000744:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    step--;
  }
}
 8000746:	e005      	b.n	8000754 <do_auto_sweep+0x44>
    step--;
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <do_auto_sweep+0x50>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	3b01      	subs	r3, #1
 800074e:	b2da      	uxtb	r2, r3
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <do_auto_sweep+0x50>)
 8000752:	701a      	strb	r2, [r3, #0]
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	24000600 	.word	0x24000600
 8000764:	24000020 	.word	0x24000020

08000768 <spi>:
 *
 * @param spi given spi peripheral
 * @return uint16_t raw value from reading spi peripheral
 */
uint8_t* spi(SPI_HandleTypeDef spi)
{
 8000768:	b084      	sub	sp, #16
 800076a:	b580      	push	{r7, lr}
 800076c:	b084      	sub	sp, #16
 800076e:	af00      	add	r7, sp, #0
 8000770:	f107 0c18 	add.w	ip, r7, #24
 8000774:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiRxBuffer[2];
	HAL_SPI_Receive(&spi,(uint8_t *)spiRxBuffer, 1, 1);
 8000778:	1d39      	adds	r1, r7, #4
 800077a:	2301      	movs	r3, #1
 800077c:	2201      	movs	r2, #1
 800077e:	f107 0018 	add.w	r0, r7, #24
 8000782:	f00b fa1f 	bl	800bbc4 <HAL_SPI_Receive>
	uint8_t SPI_LSB = ((spiRxBuffer[0] & 0xFF00) >> 8);
 8000786:	2300      	movs	r3, #0
 8000788:	73fb      	strb	r3, [r7, #15]
	uint8_t SPI_MSB = (spiRxBuffer[1] & 0xFF);
 800078a:	797b      	ldrb	r3, [r7, #5]
 800078c:	73bb      	strb	r3, [r7, #14]
	spi.Instance->CR1 |= 1<<10; // THIS IS NEEDED TO STOP SPI2_SCK FROM GENERATING CLOCK PULSES
 800078e:	69bb      	ldr	r3, [r7, #24]
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000798:	601a      	str	r2, [r3, #0]
	uint8_t* results = malloc(2 * sizeof(uint8_t));
 800079a:	2002      	movs	r0, #2
 800079c:	f00f fb1e 	bl	800fddc <malloc>
 80007a0:	4603      	mov	r3, r0
 80007a2:	60bb      	str	r3, [r7, #8]
	results[0] = SPI_MSB;
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	7bba      	ldrb	r2, [r7, #14]
 80007a8:	701a      	strb	r2, [r3, #0]
	results[1] = SPI_LSB;
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	3301      	adds	r3, #1
 80007ae:	7bfa      	ldrb	r2, [r7, #15]
 80007b0:	701a      	strb	r2, [r3, #0]
	return results;
 80007b2:	68bb      	ldr	r3, [r7, #8]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007be:	b004      	add	sp, #16
 80007c0:	4770      	bx	lr
	...

080007c4 <set_erpa_sweep>:
/**
 * @brief Set the erpa sweep value
 *
 */
void set_erpa_sweep()
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <set_erpa_sweep+0x28>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	461a      	mov	r2, r3
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <set_erpa_sweep+0x2c>)
 80007d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007d4:	2200      	movs	r2, #0
 80007d6:	2100      	movs	r1, #0
 80007d8:	4806      	ldr	r0, [pc, #24]	; (80007f4 <set_erpa_sweep+0x30>)
 80007da:	f004 f834 	bl	8004846 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80007de:	2100      	movs	r1, #0
 80007e0:	4804      	ldr	r0, [pc, #16]	; (80007f4 <set_erpa_sweep+0x30>)
 80007e2:	f003 ffde 	bl	80047a2 <HAL_DAC_Start>

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	24000600 	.word	0x24000600
 80007f0:	24000000 	.word	0x24000000
 80007f4:	24000274 	.word	0x24000274

080007f8 <erpa_adc>:
/**
 * @brief polls erpa adcs
 *
 * @return uint16_t* results of erpa adcs
 */
uint16_t* erpa_adc() {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0

	HAL_ADC_Stop_DMA(&hadc1);
 80007fe:	4819      	ldr	r0, [pc, #100]	; (8000864 <erpa_adc+0x6c>)
 8000800:	f002 fe02 	bl	8003408 <HAL_ADC_Stop_DMA>
	if (HAL_ADC_Start_DMA(&hadc1,
 8000804:	2220      	movs	r2, #32
 8000806:	4918      	ldr	r1, [pc, #96]	; (8000868 <erpa_adc+0x70>)
 8000808:	4816      	ldr	r0, [pc, #88]	; (8000864 <erpa_adc+0x6c>)
 800080a:	f002 fd39 	bl	8003280 <HAL_ADC_Start_DMA>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <erpa_adc+0x20>
		(uint32_t *)ADC1Data,
		 ADC_CONVERTED_DATA_BUFFER_SIZE
	) != HAL_OK) {
		 Error_Handler();
 8000814:	f001 fb40 	bl	8001e98 <Error_Handler>
	}

	uint16_t PF11 = ADC1Data[0]; 		// ENDmon -- verified
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <erpa_adc+0x70>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	81fb      	strh	r3, [r7, #14]
	uint16_t PA6 = ADC1Data[0]; 			// SWPmon -- verified
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <erpa_adc+0x70>)
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	81bb      	strh	r3, [r7, #12]
	uint16_t PC4 = ADC1Data[0]; 			// TEMP1 -- verified
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <erpa_adc+0x70>)
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	817b      	strh	r3, [r7, #10]
	uint16_t PB1 = ADC1Data[0];			// TEMP2 -- verified
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <erpa_adc+0x70>)
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	813b      	strh	r3, [r7, #8]

	uint16_t* results = malloc(4 * sizeof(uint16_t));
 8000830:	2008      	movs	r0, #8
 8000832:	f00f fad3 	bl	800fddc <malloc>
 8000836:	4603      	mov	r3, r0
 8000838:	607b      	str	r3, [r7, #4]
	results[0] = PF11;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	89fa      	ldrh	r2, [r7, #14]
 800083e:	801a      	strh	r2, [r3, #0]
	results[1] = PA6;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3302      	adds	r3, #2
 8000844:	89ba      	ldrh	r2, [r7, #12]
 8000846:	801a      	strh	r2, [r3, #0]
	results[2] = PC4;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3304      	adds	r3, #4
 800084c:	897a      	ldrh	r2, [r7, #10]
 800084e:	801a      	strh	r2, [r3, #0]
	results[3] = PB1;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3306      	adds	r3, #6
 8000854:	893a      	ldrh	r2, [r7, #8]
 8000856:	801a      	strh	r2, [r3, #0]

	return results;
 8000858:	687b      	ldr	r3, [r7, #4]


}
 800085a:	4618      	mov	r0, r3
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	240000bc 	.word	0x240000bc
 8000868:	24000580 	.word	0x24000580

0800086c <hk_adc1>:

uint16_t* hk_adc1() {
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0

	HAL_ADC_Stop_DMA(&hadc1);
 8000872:	482e      	ldr	r0, [pc, #184]	; (800092c <hk_adc1+0xc0>)
 8000874:	f002 fdc8 	bl	8003408 <HAL_ADC_Stop_DMA>
	if (HAL_ADC_Start_DMA(&hadc1,
 8000878:	2220      	movs	r2, #32
 800087a:	492d      	ldr	r1, [pc, #180]	; (8000930 <hk_adc1+0xc4>)
 800087c:	482b      	ldr	r0, [pc, #172]	; (800092c <hk_adc1+0xc0>)
 800087e:	f002 fcff 	bl	8003280 <HAL_ADC_Start_DMA>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <hk_adc1+0x20>
			(uint32_t *)ADC1Data,
			ADC_CONVERTED_DATA_BUFFER_SIZE)
			!= HAL_OK) {
		Error_Handler();
 8000888:	f001 fb06 	bl	8001e98 <Error_Handler>
	}

	uint16_t PF12 = ADC1Data[14];			// BUSVmon -- sending as ENDMON
 800088c:	4b28      	ldr	r3, [pc, #160]	; (8000930 <hk_adc1+0xc4>)
 800088e:	8b9b      	ldrh	r3, [r3, #28]
 8000890:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1Data[1];			// BUSImon -- sending as n800vmon
 8000892:	4b27      	ldr	r3, [pc, #156]	; (8000930 <hk_adc1+0xc4>)
 8000894:	885b      	ldrh	r3, [r3, #2]
 8000896:	82bb      	strh	r3, [r7, #20]
	uint16_t PC5 = ADC1Data[4];			// 2v5mon -- verified sending as TMP1 too
 8000898:	4b25      	ldr	r3, [pc, #148]	; (8000930 <hk_adc1+0xc4>)
 800089a:	891b      	ldrh	r3, [r3, #8]
 800089c:	827b      	strh	r3, [r7, #18]
	uint16_t PB0 = ADC1Data[5];			// 3v3mon -- verified sending as TMP2 too
 800089e:	4b24      	ldr	r3, [pc, #144]	; (8000930 <hk_adc1+0xc4>)
 80008a0:	895b      	ldrh	r3, [r3, #10]
 80008a2:	823b      	strh	r3, [r7, #16]
	uint16_t PC0 = ADC1Data[6];			// 5vmon -- verified
 80008a4:	4b22      	ldr	r3, [pc, #136]	; (8000930 <hk_adc1+0xc4>)
 80008a6:	899b      	ldrh	r3, [r3, #12]
 80008a8:	81fb      	strh	r3, [r7, #14]
	uint16_t PC1 = ADC1Data[7];			// n3v3mon -- verified sending as SWPMon too
 80008aa:	4b21      	ldr	r3, [pc, #132]	; (8000930 <hk_adc1+0xc4>)
 80008ac:	89db      	ldrh	r3, [r3, #14]
 80008ae:	81bb      	strh	r3, [r7, #12]
	uint16_t PA2 = ADC1Data[8];			// n5vmon -- verified
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <hk_adc1+0xc4>)
 80008b2:	8a1b      	ldrh	r3, [r3, #16]
 80008b4:	817b      	strh	r3, [r7, #10]
	uint16_t PA3 = ADC1Data[9];			// 15vmon -- verified
 80008b6:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <hk_adc1+0xc4>)
 80008b8:	8a5b      	ldrh	r3, [r3, #18]
 80008ba:	813b      	strh	r3, [r7, #8]
	uint16_t PA0 = ADC1Data[10];			// 5vrefmon -- verified
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <hk_adc1+0xc4>)
 80008be:	8a9b      	ldrh	r3, [r3, #20]
 80008c0:	80fb      	strh	r3, [r7, #6]
	uint16_t PA1 = ADC1Data[11];			// n200vmon -- verified
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <hk_adc1+0xc4>)
 80008c4:	8adb      	ldrh	r3, [r3, #22]
 80008c6:	80bb      	strh	r3, [r7, #4]

	uint16_t* results = malloc(10 * sizeof(uint16_t));
 80008c8:	2014      	movs	r0, #20
 80008ca:	f00f fa87 	bl	800fddc <malloc>
 80008ce:	4603      	mov	r3, r0
 80008d0:	603b      	str	r3, [r7, #0]
	results[0] = PF12;
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	8afa      	ldrh	r2, [r7, #22]
 80008d6:	801a      	strh	r2, [r3, #0]
	results[1] = PA7;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	3302      	adds	r3, #2
 80008dc:	8aba      	ldrh	r2, [r7, #20]
 80008de:	801a      	strh	r2, [r3, #0]
	results[2] = PC5;
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	3304      	adds	r3, #4
 80008e4:	8a7a      	ldrh	r2, [r7, #18]
 80008e6:	801a      	strh	r2, [r3, #0]
	results[3] = PB0;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	3306      	adds	r3, #6
 80008ec:	8a3a      	ldrh	r2, [r7, #16]
 80008ee:	801a      	strh	r2, [r3, #0]
	results[4] = PC0;
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	3308      	adds	r3, #8
 80008f4:	89fa      	ldrh	r2, [r7, #14]
 80008f6:	801a      	strh	r2, [r3, #0]
	results[5] = PC1;
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	330a      	adds	r3, #10
 80008fc:	89ba      	ldrh	r2, [r7, #12]
 80008fe:	801a      	strh	r2, [r3, #0]
	results[6] = PA2;
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	330c      	adds	r3, #12
 8000904:	897a      	ldrh	r2, [r7, #10]
 8000906:	801a      	strh	r2, [r3, #0]
	results[7] = PA3;
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	330e      	adds	r3, #14
 800090c:	893a      	ldrh	r2, [r7, #8]
 800090e:	801a      	strh	r2, [r3, #0]
	results[8] = PA0;
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	3310      	adds	r3, #16
 8000914:	88fa      	ldrh	r2, [r7, #6]
 8000916:	801a      	strh	r2, [r3, #0]
	results[9] = PA1;
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	3312      	adds	r3, #18
 800091c:	88ba      	ldrh	r2, [r7, #4]
 800091e:	801a      	strh	r2, [r3, #0]

	return results;
 8000920:	683b      	ldr	r3, [r7, #0]

}
 8000922:	4618      	mov	r0, r3
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	240000bc 	.word	0x240000bc
 8000930:	24000580 	.word	0x24000580

08000934 <hk_adc3>:

uint16_t* hk_adc3() {
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0

	HAL_ADC_Stop_DMA(&hadc3);
 800093a:	4815      	ldr	r0, [pc, #84]	; (8000990 <hk_adc3+0x5c>)
 800093c:	f002 fd64 	bl	8003408 <HAL_ADC_Stop_DMA>
	if (HAL_ADC_Start_DMA(&hadc3,
 8000940:	2220      	movs	r2, #32
 8000942:	4914      	ldr	r1, [pc, #80]	; (8000994 <hk_adc3+0x60>)
 8000944:	4812      	ldr	r0, [pc, #72]	; (8000990 <hk_adc3+0x5c>)
 8000946:	f002 fc9b 	bl	8003280 <HAL_ADC_Start_DMA>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <hk_adc3+0x20>
			(uint32_t *)ADC3Data,
			ADC_CONVERTED_DATA_BUFFER_SIZE)
			!= HAL_OK) {
		Error_Handler();
 8000950:	f001 faa2 	bl	8001e98 <Error_Handler>
	}

	uint16_t vrefint = ADC3Data[1];
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <hk_adc3+0x60>)
 8000956:	885b      	ldrh	r3, [r3, #2]
 8000958:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3Data[2];
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <hk_adc3+0x60>)
 800095c:	889b      	ldrh	r3, [r3, #4]
 800095e:	81bb      	strh	r3, [r7, #12]
	uint16_t PF9 = ADC3Data[0];
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <hk_adc3+0x60>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	817b      	strh	r3, [r7, #10]

	uint16_t* results = malloc(3 * sizeof(uint16_t));
 8000966:	2006      	movs	r0, #6
 8000968:	f00f fa38 	bl	800fddc <malloc>
 800096c:	4603      	mov	r3, r0
 800096e:	607b      	str	r3, [r7, #4]
	results[0] = vrefint;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	89fa      	ldrh	r2, [r7, #14]
 8000974:	801a      	strh	r2, [r3, #0]
	results[1] = vsense;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3302      	adds	r3, #2
 800097a:	89ba      	ldrh	r2, [r7, #12]
 800097c:	801a      	strh	r2, [r3, #0]
	results[2] = PF9;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3304      	adds	r3, #4
 8000982:	897a      	ldrh	r2, [r7, #10]
 8000984:	801a      	strh	r2, [r3, #0]

	return results;
 8000986:	687b      	ldr	r3, [r7, #4]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	24000120 	.word	0x24000120
 8000994:	240005c0 	.word	0x240005c0

08000998 <send_erpa_packet>:
 *
 * @param erpa_spi erpa spi raw value
 * @param erpa_adc_results erpa adc results
 */
void send_erpa_packet(uint8_t* erpa_spi, uint16_t *erpa_adc_results)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
	uint8_t erpa_buf[14];
	erpa_buf[0] = erpa_sync;                  						// ERPA SYNC 0xAA MSB
 80009a2:	23aa      	movs	r3, #170	; 0xaa
 80009a4:	723b      	strb	r3, [r7, #8]
	erpa_buf[1] = erpa_sync;                  						// ERPA SYNC 0xAA LSB
 80009a6:	23aa      	movs	r3, #170	; 0xaa
 80009a8:	727b      	strb	r3, [r7, #9]
	erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 						// ERPA SEQ # MSB
 80009aa:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <send_erpa_packet+0xb0>)
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	0a1b      	lsrs	r3, r3, #8
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	72bb      	strb	r3, [r7, #10]
	erpa_buf[3] = (erpa_seq & 0xFF);          						// ERPA SEQ # MSB
 80009b6:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <send_erpa_packet+0xb0>)
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	72fb      	strb	r3, [r7, #11]
	erpa_buf[4] = ((erpa_adc_results[0] & 0xFF00) >> 8); 	  		// ENDmon MSB
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	0a1b      	lsrs	r3, r3, #8
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	733b      	strb	r3, [r7, #12]
	erpa_buf[5] = (erpa_adc_results[0] & 0xFF);               		// ENDmon LSB
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	737b      	strb	r3, [r7, #13]
	erpa_buf[6] = ((erpa_adc_results[1] & 0xFF00) >> 8);      		// SWP Monitored MSB
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	3302      	adds	r3, #2
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	0a1b      	lsrs	r3, r3, #8
 80009da:	b29b      	uxth	r3, r3
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	73bb      	strb	r3, [r7, #14]
	erpa_buf[7] = (erpa_adc_results[1] & 0xFF);               		// SWP Monitored LSB
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	3302      	adds	r3, #2
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	73fb      	strb	r3, [r7, #15]
	erpa_buf[8] = ((erpa_adc_results[2] & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	3304      	adds	r3, #4
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	0a1b      	lsrs	r3, r3, #8
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	743b      	strb	r3, [r7, #16]
	erpa_buf[9] = (erpa_adc_results[2] & 0xFF);               		// TEMPURATURE 1 LSB
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	3304      	adds	r3, #4
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	747b      	strb	r3, [r7, #17]
	erpa_buf[10] = ((erpa_adc_results[3] & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	3306      	adds	r3, #6
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	74bb      	strb	r3, [r7, #18]
	erpa_buf[11] = (erpa_adc_results[3] & 0xFF);                    // TEMPURATURE 2 LSB
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	3306      	adds	r3, #6
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	74fb      	strb	r3, [r7, #19]
	erpa_buf[12] = erpa_spi[0];									// ERPA eADC MSB
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	753b      	strb	r3, [r7, #20]
	erpa_buf[13] = erpa_spi[1];									// ERPA eADC LSB
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	785b      	ldrb	r3, [r3, #1]
 8000a24:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 8000a26:	f107 0108 	add.w	r1, r7, #8
 8000a2a:	2364      	movs	r3, #100	; 0x64
 8000a2c:	220e      	movs	r2, #14
 8000a2e:	4807      	ldr	r0, [pc, #28]	; (8000a4c <send_erpa_packet+0xb4>)
 8000a30:	f00c fe92 	bl	800d758 <HAL_UART_Transmit>
	erpa_seq++;
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <send_erpa_packet+0xb0>)
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	4b02      	ldr	r3, [pc, #8]	; (8000a48 <send_erpa_packet+0xb0>)
 8000a3e:	801a      	strh	r2, [r3, #0]

}
 8000a40:	bf00      	nop
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	24000608 	.word	0x24000608
 8000a4c:	2400047c 	.word	0x2400047c

08000a50 <send_hk_packet>:
 *
 * @param i2c_values values of all i2c sensors
 * @param hk_adc_results hk adc results
 */
void send_hk_packet(int16_t *i2c_values, uint16_t *hk_adc1_results, uint16_t *hk_adc3_results)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08e      	sub	sp, #56	; 0x38
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]

	uint8_t hk_buf[38];

	hk_buf[0] = hk_sync;                     		// HK SYNC 0xCC MSB					0 SYNC
 8000a5c:	23cc      	movs	r3, #204	; 0xcc
 8000a5e:	743b      	strb	r3, [r7, #16]
	hk_buf[1] = hk_sync;                     		// HK SYNC 0xCC LSB
 8000a60:	23cc      	movs	r3, #204	; 0xcc
 8000a62:	747b      	strb	r3, [r7, #17]
	hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    		// HK SEQ # MSB		1 SEQUENCE
 8000a64:	4b7d      	ldr	r3, [pc, #500]	; (8000c5c <send_hk_packet+0x20c>)
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	74bb      	strb	r3, [r7, #18]
	hk_buf[3] = (hk_seq & 0xFF);             		// HK SEQ # LSB
 8000a70:	4b7a      	ldr	r3, [pc, #488]	; (8000c5c <send_hk_packet+0x20c>)
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	74fb      	strb	r3, [r7, #19]
	hk_buf[4] = ((hk_adc3_results[1] & 0xFF00) >> 8);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3302      	adds	r3, #2
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	0a1b      	lsrs	r3, r3, #8
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	753b      	strb	r3, [r7, #20]
	hk_buf[5] = (hk_adc3_results[1] & 0xFF);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	3302      	adds	r3, #2
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	757b      	strb	r3, [r7, #21]
	hk_buf[6] = ((hk_adc3_results[0] & 0xFF00) >> 8);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	75bb      	strb	r3, [r7, #22]
	hk_buf[7] = (hk_adc3_results[0] & 0xFF);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	75fb      	strb	r3, [r7, #23]
	hk_buf[8] = ((i2c_values[0] & 0xFF00) >> 8);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aaa:	121b      	asrs	r3, r3, #8
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	763b      	strb	r3, [r7, #24]
	hk_buf[9] = (i2c_values[0] & 0xFF);
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	767b      	strb	r3, [r7, #25]
	hk_buf[10] = ((i2c_values[1] & 0xFF00) >> 8);
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	3302      	adds	r3, #2
 8000abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ac2:	121b      	asrs	r3, r3, #8
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	76bb      	strb	r3, [r7, #26]
	hk_buf[11] = (i2c_values[1] & 0xFF);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	3302      	adds	r3, #2
 8000acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	76fb      	strb	r3, [r7, #27]
	hk_buf[12] = ((i2c_values[2] & 0xFF00) >> 8);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	3304      	adds	r3, #4
 8000ad8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000adc:	121b      	asrs	r3, r3, #8
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	773b      	strb	r3, [r7, #28]
	hk_buf[13] = (i2c_values[2] & 0xFF);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	777b      	strb	r3, [r7, #29]
	hk_buf[14] = ((i2c_values[3] & 0xFF00) >> 8);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	3306      	adds	r3, #6
 8000af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000af6:	121b      	asrs	r3, r3, #8
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	77bb      	strb	r3, [r7, #30]
	hk_buf[15] = (i2c_values[3] & 0xFF);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	3306      	adds	r3, #6
 8000b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	77fb      	strb	r3, [r7, #31]
	hk_buf[16] = ((hk_adc1_results[0] & 0xFF00) >> 8);
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	0a1b      	lsrs	r3, r3, #8
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	f887 3020 	strb.w	r3, [r7, #32]
	hk_buf[17] = (hk_adc1_results[0] & 0xFF);
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	hk_buf[18] = ((hk_adc1_results[1] & 0xFF00) >> 8);
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	3302      	adds	r3, #2
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	0a1b      	lsrs	r3, r3, #8
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	hk_buf[19] = (hk_adc1_results[1] & 0xFF);
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	3302      	adds	r3, #2
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	hk_buf[20] = ((hk_adc1_results[2] & 0xFF00) >> 8);
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	3304      	adds	r3, #4
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	0a1b      	lsrs	r3, r3, #8
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hk_buf[21] = (hk_adc1_results[2] & 0xFF);
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	3304      	adds	r3, #4
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hk_buf[22] = ((hk_adc1_results[3] & 0xFF00) >> 8);
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	3306      	adds	r3, #6
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	0a1b      	lsrs	r3, r3, #8
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hk_buf[23] = (hk_adc1_results[3] & 0xFF);
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	3306      	adds	r3, #6
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hk_buf[24] = ((hk_adc1_results[4] & 0xFF00) >> 8);
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	3308      	adds	r3, #8
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	0a1b      	lsrs	r3, r3, #8
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	hk_buf[25] = (hk_adc1_results[4] & 0xFF);
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	3308      	adds	r3, #8
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	hk_buf[26] = ((hk_adc1_results[5] & 0xFF00) >> 8);
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	330a      	adds	r3, #10
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	0a1b      	lsrs	r3, r3, #8
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	hk_buf[27] = (hk_adc1_results[5] & 0xFF);
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	330a      	adds	r3, #10
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	hk_buf[28] = ((hk_adc1_results[6] & 0xFF00) >> 8);
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	330c      	adds	r3, #12
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	0a1b      	lsrs	r3, r3, #8
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	hk_buf[29] = (hk_adc1_results[6] & 0xFF);
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	330c      	adds	r3, #12
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	hk_buf[30] = ((hk_adc1_results[7] & 0xFF00) >> 8);
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	330e      	adds	r3, #14
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	0a1b      	lsrs	r3, r3, #8
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	hk_buf[31] = (hk_adc1_results[7] & 0xFF);
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	330e      	adds	r3, #14
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	hk_buf[32] = ((hk_adc1_results[8] & 0xFF00) >> 8);
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	3310      	adds	r3, #16
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	0a1b      	lsrs	r3, r3, #8
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	hk_buf[33] = (hk_adc1_results[8] & 0xFF);
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	3310      	adds	r3, #16
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	hk_buf[34] = ((hk_adc1_results[9] & 0xFF00) >> 8);
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	3312      	adds	r3, #18
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	0a1b      	lsrs	r3, r3, #8
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	hk_buf[35] = (hk_adc1_results[9] & 0xFF);
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	3312      	adds	r3, #18
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	hk_buf[36] = ((hk_adc3_results[2] & 0xFF00) >> 8);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3304      	adds	r3, #4
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	0a1b      	lsrs	r3, r3, #8
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	hk_buf[37] = (hk_adc3_results[2] & 0xFF);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3304      	adds	r3, #4
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000c38:	f107 0110 	add.w	r1, r7, #16
 8000c3c:	2364      	movs	r3, #100	; 0x64
 8000c3e:	2226      	movs	r2, #38	; 0x26
 8000c40:	4807      	ldr	r0, [pc, #28]	; (8000c60 <send_hk_packet+0x210>)
 8000c42:	f00c fd89 	bl	800d758 <HAL_UART_Transmit>
	hk_seq++;
 8000c46:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <send_hk_packet+0x20c>)
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <send_hk_packet+0x20c>)
 8000c50:	801a      	strh	r2, [r3, #0]


}
 8000c52:	bf00      	nop
 8000c54:	3738      	adds	r7, #56	; 0x38
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2400060c 	.word	0x2400060c
 8000c60:	2400047c 	.word	0x2400047c

08000c64 <send_pmt_packet>:
 * @brief sends pmt packet via UART
 *
 * @param pmt_spi raw pmt spi value
 */
void send_pmt_packet(uint8_t* pmt_spi)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

	uint8_t pmt_buf[6];

	pmt_buf[0] = pmt_sync;
 8000c6c:	23bb      	movs	r3, #187	; 0xbb
 8000c6e:	723b      	strb	r3, [r7, #8]
	pmt_buf[1] = pmt_sync;
 8000c70:	23bb      	movs	r3, #187	; 0xbb
 8000c72:	727b      	strb	r3, [r7, #9]
	pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 8000c74:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <send_pmt_packet+0x54>)
 8000c76:	881b      	ldrh	r3, [r3, #0]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	72bb      	strb	r3, [r7, #10]
	pmt_buf[3] = (pmt_seq & 0xFF);
 8000c80:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <send_pmt_packet+0x54>)
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	72fb      	strb	r3, [r7, #11]
	pmt_buf[4] = pmt_spi[0];
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	733b      	strb	r3, [r7, #12]
	pmt_buf[5] = pmt_spi[1];
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	785b      	ldrb	r3, [r3, #1]
 8000c92:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000c94:	f107 0108 	add.w	r1, r7, #8
 8000c98:	2364      	movs	r3, #100	; 0x64
 8000c9a:	2206      	movs	r2, #6
 8000c9c:	4807      	ldr	r0, [pc, #28]	; (8000cbc <send_pmt_packet+0x58>)
 8000c9e:	f00c fd5b 	bl	800d758 <HAL_UART_Transmit>
	pmt_seq++;
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <send_pmt_packet+0x54>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <send_pmt_packet+0x54>)
 8000cac:	801a      	strh	r2, [r3, #0]
}
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	2400060a 	.word	0x2400060a
 8000cbc:	2400047c 	.word	0x2400047c

08000cc0 <HAL_TIM_OC_DelayElapsedCallback>:


void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b0a7      	sub	sp, #156	; 0x9c
 8000cc4:	af1e      	add	r7, sp, #120	; 0x78
 8000cc6:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a3b      	ldr	r2, [pc, #236]	; (8000db8 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d14a      	bne.n	8000d66 <HAL_TIM_OC_DelayElapsedCallback+0xa6>
  {
      if (ERPA_ON)
 8000cd0:	4b3a      	ldr	r3, [pc, #232]	; (8000dbc <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d02a      	beq.n	8000d2e <HAL_TIM_OC_DelayElapsedCallback+0x6e>
      {


		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {}
 8000cd8:	bf00      	nop
 8000cda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cde:	4838      	ldr	r0, [pc, #224]	; (8000dc0 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8000ce0:	f006 fef2 	bl	8007ac8 <HAL_GPIO_ReadPin>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1f7      	bne.n	8000cda <HAL_TIM_OC_DelayElapsedCallback+0x1a>

		uint8_t* spi2_results = spi(hspi2);
 8000cea:	4c36      	ldr	r4, [pc, #216]	; (8000dc4 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8000cec:	4668      	mov	r0, sp
 8000cee:	f104 0310 	add.w	r3, r4, #16
 8000cf2:	2278      	movs	r2, #120	; 0x78
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f00f f881 	bl	800fdfc <memcpy>
 8000cfa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cfe:	f7ff fd33 	bl	8000768 <spi>
 8000d02:	61b8      	str	r0, [r7, #24]
        uint16_t *erpa_adc_results = erpa_adc();
 8000d04:	f7ff fd78 	bl	80007f8 <erpa_adc>
 8000d08:	6178      	str	r0, [r7, #20]
		set_erpa_sweep();
 8000d0a:	f7ff fd5b 	bl	80007c4 <set_erpa_sweep>

		if (auto_sweep)
 8000d0e:	4b2e      	ldr	r3, [pc, #184]	; (8000dc8 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <HAL_TIM_OC_DelayElapsedCallback+0x5a>
		{
		  do_auto_sweep();
 8000d16:	f7ff fcfb 	bl	8000710 <do_auto_sweep>
		}

		send_erpa_packet(spi2_results, erpa_adc_results);
 8000d1a:	6979      	ldr	r1, [r7, #20]
 8000d1c:	69b8      	ldr	r0, [r7, #24]
 8000d1e:	f7ff fe3b 	bl	8000998 <send_erpa_packet>

		free(spi2_results);
 8000d22:	69b8      	ldr	r0, [r7, #24]
 8000d24:	f00f f862 	bl	800fdec <free>
		free(erpa_adc_results);
 8000d28:	6978      	ldr	r0, [r7, #20]
 8000d2a:	f00f f85f 	bl	800fdec <free>
      }
      if (HK_ON)
 8000d2e:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d03b      	beq.n	8000dae <HAL_TIM_OC_DelayElapsedCallback+0xee>
      {
    	  int16_t *i2c_values = i2c();
 8000d36:	f7ff fcb7 	bl	80006a8 <i2c>
 8000d3a:	6138      	str	r0, [r7, #16]
    	  uint16_t* hk_adc1_results = hk_adc1();
 8000d3c:	f7ff fd96 	bl	800086c <hk_adc1>
 8000d40:	60f8      	str	r0, [r7, #12]
    	  uint16_t* hk_adc3_results = hk_adc3();
 8000d42:	f7ff fdf7 	bl	8000934 <hk_adc3>
 8000d46:	60b8      	str	r0, [r7, #8]


    	  send_hk_packet(i2c_values, hk_adc1_results, hk_adc3_results);
 8000d48:	68ba      	ldr	r2, [r7, #8]
 8000d4a:	68f9      	ldr	r1, [r7, #12]
 8000d4c:	6938      	ldr	r0, [r7, #16]
 8000d4e:	f7ff fe7f 	bl	8000a50 <send_hk_packet>


          free(i2c_values);
 8000d52:	6938      	ldr	r0, [r7, #16]
 8000d54:	f00f f84a 	bl	800fdec <free>
          free(hk_adc1_results);
 8000d58:	68f8      	ldr	r0, [r7, #12]
 8000d5a:	f00f f847 	bl	800fdec <free>
          free(hk_adc3_results);
 8000d5e:	68b8      	ldr	r0, [r7, #8]
 8000d60:	f00f f844 	bl	800fdec <free>
  		send_pmt_packet(spi1_results);

		free(spi1_results);
      }
  }
}
 8000d64:	e023      	b.n	8000dae <HAL_TIM_OC_DelayElapsedCallback+0xee>
  else if (htim == &htim1)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a19      	ldr	r2, [pc, #100]	; (8000dd0 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d11f      	bne.n	8000dae <HAL_TIM_OC_DelayElapsedCallback+0xee>
      if (PMT_ON)
 8000d6e:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d01b      	beq.n	8000dae <HAL_TIM_OC_DelayElapsedCallback+0xee>
    	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {}
 8000d76:	bf00      	nop
 8000d78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d7c:	4816      	ldr	r0, [pc, #88]	; (8000dd8 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8000d7e:	f006 fea3 	bl	8007ac8 <HAL_GPIO_ReadPin>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1f7      	bne.n	8000d78 <HAL_TIM_OC_DelayElapsedCallback+0xb8>
  		uint8_t* spi1_results = spi(hspi1);
 8000d88:	4c14      	ldr	r4, [pc, #80]	; (8000ddc <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8000d8a:	4668      	mov	r0, sp
 8000d8c:	f104 0310 	add.w	r3, r4, #16
 8000d90:	2278      	movs	r2, #120	; 0x78
 8000d92:	4619      	mov	r1, r3
 8000d94:	f00f f832 	bl	800fdfc <memcpy>
 8000d98:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d9c:	f7ff fce4 	bl	8000768 <spi>
 8000da0:	61f8      	str	r0, [r7, #28]
  		send_pmt_packet(spi1_results);
 8000da2:	69f8      	ldr	r0, [r7, #28]
 8000da4:	f7ff ff5e 	bl	8000c64 <send_pmt_packet>
		free(spi1_results);
 8000da8:	69f8      	ldr	r0, [r7, #28]
 8000daa:	f00f f81f 	bl	800fdec <free>
}
 8000dae:	bf00      	nop
 8000db0:	3724      	adds	r7, #36	; 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd90      	pop	{r4, r7, pc}
 8000db6:	bf00      	nop
 8000db8:	24000430 	.word	0x24000430
 8000dbc:	2400060f 	.word	0x2400060f
 8000dc0:	58020400 	.word	0x58020400
 8000dc4:	2400035c 	.word	0x2400035c
 8000dc8:	24000604 	.word	0x24000604
 8000dcc:	24000610 	.word	0x24000610
 8000dd0:	240003e4 	.word	0x240003e4
 8000dd4:	2400060e 	.word	0x2400060e
 8000dd8:	58020000 	.word	0x58020000
 8000ddc:	240002d4 	.word	0x240002d4

08000de0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000de8:	2201      	movs	r2, #1
 8000dea:	4998      	ldr	r1, [pc, #608]	; (800104c <HAL_UART_RxCpltCallback+0x26c>)
 8000dec:	4898      	ldr	r0, [pc, #608]	; (8001050 <HAL_UART_RxCpltCallback+0x270>)
 8000dee:	f00c fd49 	bl	800d884 <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000df2:	4b96      	ldr	r3, [pc, #600]	; (800104c <HAL_UART_RxCpltCallback+0x26c>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	73fb      	strb	r3, [r7, #15]

  switch (key)
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	2b1d      	cmp	r3, #29
 8000dfc:	f200 8121 	bhi.w	8001042 <HAL_UART_RxCpltCallback+0x262>
 8000e00:	a201      	add	r2, pc, #4	; (adr r2, 8000e08 <HAL_UART_RxCpltCallback+0x28>)
 8000e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e06:	bf00      	nop
 8000e08:	08000f0d 	.word	0x08000f0d
 8000e0c:	08000f29 	.word	0x08000f29
 8000e10:	08000f45 	.word	0x08000f45
 8000e14:	08000f65 	.word	0x08000f65
 8000e18:	08000f85 	.word	0x08000f85
 8000e1c:	08000fa1 	.word	0x08000fa1
 8000e20:	08000fc1 	.word	0x08000fc1
 8000e24:	08000fe1 	.word	0x08000fe1
 8000e28:	08000e9d 	.word	0x08000e9d
 8000e2c:	08000eab 	.word	0x08000eab
 8000e30:	08000e8f 	.word	0x08000e8f
 8000e34:	08000e81 	.word	0x08000e81
 8000e38:	08000ffd 	.word	0x08000ffd
 8000e3c:	0800100d 	.word	0x0800100d
 8000e40:	0800101d 	.word	0x0800101d
 8000e44:	0800102d 	.word	0x0800102d
 8000e48:	08001015 	.word	0x08001015
 8000e4c:	08001025 	.word	0x08001025
 8000e50:	08001035 	.word	0x08001035
 8000e54:	08000f1b 	.word	0x08000f1b
 8000e58:	08000f37 	.word	0x08000f37
 8000e5c:	08000f55 	.word	0x08000f55
 8000e60:	08000f75 	.word	0x08000f75
 8000e64:	08000f93 	.word	0x08000f93
 8000e68:	08000fb1 	.word	0x08000fb1
 8000e6c:	08000fd1 	.word	0x08000fd1
 8000e70:	08000fef 	.word	0x08000fef
 8000e74:	08000eb9 	.word	0x08000eb9
 8000e78:	08000ed1 	.word	0x08000ed1
 8000e7c:	08000ee9 	.word	0x08000ee9
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000e80:	4b74      	ldr	r3, [pc, #464]	; (8001054 <HAL_UART_RxCpltCallback+0x274>)
 8000e82:	2140      	movs	r1, #64	; 0x40
 8000e84:	2201      	movs	r2, #1
 8000e86:	4618      	mov	r0, r3
 8000e88:	f006 fe36 	bl	8007af8 <HAL_GPIO_WritePin>
    break;
 8000e8c:	e0d9      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000e8e:	4b71      	ldr	r3, [pc, #452]	; (8001054 <HAL_UART_RxCpltCallback+0x274>)
 8000e90:	2140      	movs	r1, #64	; 0x40
 8000e92:	2200      	movs	r2, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f006 fe2f 	bl	8007af8 <HAL_GPIO_WritePin>
    break;
 8000e9a:	e0d2      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
  }

  case 0x08:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 8000e9c:	4b6d      	ldr	r3, [pc, #436]	; (8001054 <HAL_UART_RxCpltCallback+0x274>)
 8000e9e:	2180      	movs	r1, #128	; 0x80
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f006 fe28 	bl	8007af8 <HAL_GPIO_WritePin>
    break;
 8000ea8:	e0cb      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x09:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 8000eaa:	4b6a      	ldr	r3, [pc, #424]	; (8001054 <HAL_UART_RxCpltCallback+0x274>)
 8000eac:	2180      	movs	r1, #128	; 0x80
 8000eae:	2200      	movs	r2, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f006 fe21 	bl	8007af8 <HAL_GPIO_WritePin>
    break;
 8000eb6:	e0c4      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x1B:
  {
    if (step < 7)
 8000eb8:	4b67      	ldr	r3, [pc, #412]	; (8001058 <HAL_UART_RxCpltCallback+0x278>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b06      	cmp	r3, #6
 8000ebe:	f200 80bd 	bhi.w	800103c <HAL_UART_RxCpltCallback+0x25c>
    {
      step++;
 8000ec2:	4b65      	ldr	r3, [pc, #404]	; (8001058 <HAL_UART_RxCpltCallback+0x278>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4b63      	ldr	r3, [pc, #396]	; (8001058 <HAL_UART_RxCpltCallback+0x278>)
 8000ecc:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000ece:	e0b5      	b.n	800103c <HAL_UART_RxCpltCallback+0x25c>
  }
  case 0x1C:
  {
    if (step > 0)
 8000ed0:	4b61      	ldr	r3, [pc, #388]	; (8001058 <HAL_UART_RxCpltCallback+0x278>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 80b3 	beq.w	8001040 <HAL_UART_RxCpltCallback+0x260>
    {
      step--;
 8000eda:	4b5f      	ldr	r3, [pc, #380]	; (8001058 <HAL_UART_RxCpltCallback+0x278>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4b5d      	ldr	r3, [pc, #372]	; (8001058 <HAL_UART_RxCpltCallback+0x278>)
 8000ee4:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000ee6:	e0ab      	b.n	8001040 <HAL_UART_RxCpltCallback+0x260>
  }
  case 0x1D: {
	if (!auto_sweep) {
 8000ee8:	4b5c      	ldr	r3, [pc, #368]	; (800105c <HAL_UART_RxCpltCallback+0x27c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d106      	bne.n	8000efe <HAL_UART_RxCpltCallback+0x11e>
		auto_sweep = 1;
 8000ef0:	4b5a      	ldr	r3, [pc, #360]	; (800105c <HAL_UART_RxCpltCallback+0x27c>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	601a      	str	r2, [r3, #0]
		step = 0;
 8000ef6:	4b58      	ldr	r3, [pc, #352]	; (8001058 <HAL_UART_RxCpltCallback+0x278>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
	} else {
		auto_sweep = 0;
		step = 0;
	}
  	break;
 8000efc:	e0a1      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
		auto_sweep = 0;
 8000efe:	4b57      	ldr	r3, [pc, #348]	; (800105c <HAL_UART_RxCpltCallback+0x27c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
		step = 0;
 8000f04:	4b54      	ldr	r3, [pc, #336]	; (8001058 <HAL_UART_RxCpltCallback+0x278>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
  	break;
 8000f0a:	e09a      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
   }
  case 0x00:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000f0c:	4b54      	ldr	r3, [pc, #336]	; (8001060 <HAL_UART_RxCpltCallback+0x280>)
 8000f0e:	2120      	movs	r1, #32
 8000f10:	2201      	movs	r2, #1
 8000f12:	4618      	mov	r0, r3
 8000f14:	f006 fdf0 	bl	8007af8 <HAL_GPIO_WritePin>
    break;
 8000f18:	e093      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x13:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000f1a:	4b51      	ldr	r3, [pc, #324]	; (8001060 <HAL_UART_RxCpltCallback+0x280>)
 8000f1c:	2120      	movs	r1, #32
 8000f1e:	2200      	movs	r2, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f006 fde9 	bl	8007af8 <HAL_GPIO_WritePin>
    break;
 8000f26:	e08c      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x01:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000f28:	4b4d      	ldr	r3, [pc, #308]	; (8001060 <HAL_UART_RxCpltCallback+0x280>)
 8000f2a:	2140      	movs	r1, #64	; 0x40
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f006 fde2 	bl	8007af8 <HAL_GPIO_WritePin>
    break;
 8000f34:	e085      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000f36:	4b4a      	ldr	r3, [pc, #296]	; (8001060 <HAL_UART_RxCpltCallback+0x280>)
 8000f38:	2140      	movs	r1, #64	; 0x40
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f006 fddb 	bl	8007af8 <HAL_GPIO_WritePin>
    break;
 8000f42:	e07e      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000f44:	4b47      	ldr	r3, [pc, #284]	; (8001064 <HAL_UART_RxCpltCallback+0x284>)
 8000f46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f006 fdd3 	bl	8007af8 <HAL_GPIO_WritePin>
    break;
 8000f52:	e076      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000f54:	4b43      	ldr	r3, [pc, #268]	; (8001064 <HAL_UART_RxCpltCallback+0x284>)
 8000f56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f006 fdcb 	bl	8007af8 <HAL_GPIO_WritePin>
    break;
 8000f62:	e06e      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000f64:	4b3f      	ldr	r3, [pc, #252]	; (8001064 <HAL_UART_RxCpltCallback+0x284>)
 8000f66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f006 fdc3 	bl	8007af8 <HAL_GPIO_WritePin>
    break;
 8000f72:	e066      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000f74:	4b3b      	ldr	r3, [pc, #236]	; (8001064 <HAL_UART_RxCpltCallback+0x284>)
 8000f76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f006 fdbb 	bl	8007af8 <HAL_GPIO_WritePin>
    break;
 8000f82:	e05e      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000f84:	4b37      	ldr	r3, [pc, #220]	; (8001064 <HAL_UART_RxCpltCallback+0x284>)
 8000f86:	2180      	movs	r1, #128	; 0x80
 8000f88:	2201      	movs	r2, #1
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f006 fdb4 	bl	8007af8 <HAL_GPIO_WritePin>
    break;
 8000f90:	e057      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000f92:	4b34      	ldr	r3, [pc, #208]	; (8001064 <HAL_UART_RxCpltCallback+0x284>)
 8000f94:	2180      	movs	r1, #128	; 0x80
 8000f96:	2200      	movs	r2, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f006 fdad 	bl	8007af8 <HAL_GPIO_WritePin>
    break;
 8000f9e:	e050      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000fa0:	4b30      	ldr	r3, [pc, #192]	; (8001064 <HAL_UART_RxCpltCallback+0x284>)
 8000fa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f006 fda5 	bl	8007af8 <HAL_GPIO_WritePin>
    break;
 8000fae:	e048      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000fb0:	4b2c      	ldr	r3, [pc, #176]	; (8001064 <HAL_UART_RxCpltCallback+0x284>)
 8000fb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f006 fd9d 	bl	8007af8 <HAL_GPIO_WritePin>
    break;
 8000fbe:	e040      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000fc0:	4b28      	ldr	r3, [pc, #160]	; (8001064 <HAL_UART_RxCpltCallback+0x284>)
 8000fc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f006 fd95 	bl	8007af8 <HAL_GPIO_WritePin>
    break;
 8000fce:	e038      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000fd0:	4b24      	ldr	r3, [pc, #144]	; (8001064 <HAL_UART_RxCpltCallback+0x284>)
 8000fd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f006 fd8d 	bl	8007af8 <HAL_GPIO_WritePin>
    break;
 8000fde:	e030      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000fe0:	4b20      	ldr	r3, [pc, #128]	; (8001064 <HAL_UART_RxCpltCallback+0x284>)
 8000fe2:	2140      	movs	r1, #64	; 0x40
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f006 fd86 	bl	8007af8 <HAL_GPIO_WritePin>
    break;
 8000fec:	e029      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <HAL_UART_RxCpltCallback+0x284>)
 8000ff0:	2140      	movs	r1, #64	; 0x40
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f006 fd7f 	bl	8007af8 <HAL_GPIO_WritePin>
    break;
 8000ffa:	e022      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0C:
  {
      HAL_SuspendTick();
 8000ffc:	f001 fd4a 	bl	8002a94 <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001000:	2101      	movs	r1, #1
 8001002:	2001      	movs	r0, #1
 8001004:	f007 fb1c 	bl	8008640 <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8001008:	f7ff fae8 	bl	80005dc <__NVIC_SystemReset>
      break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 800100c:	4b16      	ldr	r3, [pc, #88]	; (8001068 <HAL_UART_RxCpltCallback+0x288>)
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
    break;
 8001012:	e016      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x10:
  {
    PMT_ON = 0;
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <HAL_UART_RxCpltCallback+0x288>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
    break;
 800101a:	e012      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <HAL_UART_RxCpltCallback+0x28c>)
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
    break;
 8001022:	e00e      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <HAL_UART_RxCpltCallback+0x28c>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
    break;
 800102a:	e00a      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0F:
  {
    HK_ON = 1;
 800102c:	4b10      	ldr	r3, [pc, #64]	; (8001070 <HAL_UART_RxCpltCallback+0x290>)
 800102e:	2201      	movs	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]
    break;
 8001032:	e006      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x12:
  {
    HK_ON = 0;
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HAL_UART_RxCpltCallback+0x290>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
    break;
 800103a:	e002      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
    break;
 800103c:	bf00      	nop
 800103e:	e000      	b.n	8001042 <HAL_UART_RxCpltCallback+0x262>
    break;
 8001040:	bf00      	nop
  }
  }
}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2400050c 	.word	0x2400050c
 8001050:	2400047c 	.word	0x2400047c
 8001054:	58021400 	.word	0x58021400
 8001058:	24000600 	.word	0x24000600
 800105c:	24000604 	.word	0x24000604
 8001060:	58020400 	.word	0x58020400
 8001064:	58020800 	.word	0x58020800
 8001068:	2400060e 	.word	0x2400060e
 800106c:	2400060f 	.word	0x2400060f
 8001070:	24000610 	.word	0x24000610

08001074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001078:	f001 fc56 	bl	8002928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107c:	f000 f85c 	bl	8001138 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001080:	f000 f8e0 	bl	8001244 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001084:	f000 fd6e 	bl	8001b64 <MX_GPIO_Init>
  MX_DAC1_Init();
 8001088:	f000 fae2 	bl	8001650 <MX_DAC1_Init>
  MX_TIM1_Init();
 800108c:	f000 fc0c 	bl	80018a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001090:	f000 fc9a 	bl	80019c8 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001094:	f000 fb18 	bl	80016c8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001098:	f000 fb56 	bl	8001748 <MX_SPI1_Init>
  MX_DMA_Init();
 800109c:	f000 fd3a 	bl	8001b14 <MX_DMA_Init>
  MX_ADC1_Init();
 80010a0:	f000 f8fe 	bl	80012a0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80010a4:	f000 fcea 	bl	8001a7c <MX_USART1_UART_Init>
  MX_ADC3_Init();
 80010a8:	f000 fa4e 	bl	8001548 <MX_ADC3_Init>
  MX_SPI2_Init();
 80010ac:	f000 fba4 	bl	80017f8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 80010b0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80010b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80010b8:	4819      	ldr	r0, [pc, #100]	; (8001120 <main+0xac>)
 80010ba:	f003 f8ff 	bl	80042bc <HAL_ADCEx_Calibration_Start>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <main+0x54>
  {
    /* Calibration Error */
    Error_Handler();
 80010c4:	f000 fee8 	bl	8001e98 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 80010c8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80010cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80010d0:	4814      	ldr	r0, [pc, #80]	; (8001124 <main+0xb0>)
 80010d2:	f003 f8f3 	bl	80042bc <HAL_ADCEx_Calibration_Start>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <main+0x6c>
  {
	/* Calibration Error */
	Error_Handler();
 80010dc:	f000 fedc 	bl	8001e98 <Error_Handler>
  }


  /* Start Timers with OC & Interrupt */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80010e0:	2100      	movs	r1, #0
 80010e2:	4811      	ldr	r0, [pc, #68]	; (8001128 <main+0xb4>)
 80010e4:	f00b fa1c 	bl	800c520 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 80010e8:	210c      	movs	r1, #12
 80010ea:	4810      	ldr	r0, [pc, #64]	; (800112c <main+0xb8>)
 80010ec:	f00b fa18 	bl	800c520 <HAL_TIM_OC_Start_IT>

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80010f0:	bf00      	nop
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <main+0xbc>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	69db      	ldr	r3, [r3, #28]
 80010f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001100:	d0f7      	beq.n	80010f2 <main+0x7e>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8001102:	bf00      	nop
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <main+0xbc>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800110e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001112:	d1f7      	bne.n	8001104 <main+0x90>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8001114:	2201      	movs	r2, #1
 8001116:	4907      	ldr	r1, [pc, #28]	; (8001134 <main+0xc0>)
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <main+0xbc>)
 800111a:	f00c fbb3 	bl	800d884 <HAL_UART_Receive_IT>
 800111e:	e7f9      	b.n	8001114 <main+0xa0>
 8001120:	240000bc 	.word	0x240000bc
 8001124:	24000120 	.word	0x24000120
 8001128:	240003e4 	.word	0x240003e4
 800112c:	24000430 	.word	0x24000430
 8001130:	2400047c 	.word	0x2400047c
 8001134:	2400050c 	.word	0x2400050c

08001138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b09c      	sub	sp, #112	; 0x70
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001142:	224c      	movs	r2, #76	; 0x4c
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f00e fe66 	bl	800fe18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	2220      	movs	r2, #32
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f00e fe60 	bl	800fe18 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001158:	2002      	movs	r0, #2
 800115a:	f007 faad 	bl	80086b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800115e:	2300      	movs	r3, #0
 8001160:	603b      	str	r3, [r7, #0]
 8001162:	4b35      	ldr	r3, [pc, #212]	; (8001238 <SystemClock_Config+0x100>)
 8001164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001166:	4a34      	ldr	r2, [pc, #208]	; (8001238 <SystemClock_Config+0x100>)
 8001168:	f023 0301 	bic.w	r3, r3, #1
 800116c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800116e:	4b32      	ldr	r3, [pc, #200]	; (8001238 <SystemClock_Config+0x100>)
 8001170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	4b30      	ldr	r3, [pc, #192]	; (800123c <SystemClock_Config+0x104>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001180:	4a2e      	ldr	r2, [pc, #184]	; (800123c <SystemClock_Config+0x104>)
 8001182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b2c      	ldr	r3, [pc, #176]	; (800123c <SystemClock_Config+0x104>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001194:	bf00      	nop
 8001196:	4b29      	ldr	r3, [pc, #164]	; (800123c <SystemClock_Config+0x104>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800119e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011a2:	d1f8      	bne.n	8001196 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80011a4:	4b26      	ldr	r3, [pc, #152]	; (8001240 <SystemClock_Config+0x108>)
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	4a25      	ldr	r2, [pc, #148]	; (8001240 <SystemClock_Config+0x108>)
 80011aa:	f023 0303 	bic.w	r3, r3, #3
 80011ae:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b0:	2302      	movs	r3, #2
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b8:	2340      	movs	r3, #64	; 0x40
 80011ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011bc:	2302      	movs	r3, #2
 80011be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011c0:	2300      	movs	r3, #0
 80011c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011c4:	2304      	movs	r3, #4
 80011c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80011c8:	230c      	movs	r3, #12
 80011ca:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011cc:	2302      	movs	r3, #2
 80011ce:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011d0:	2302      	movs	r3, #2
 80011d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011d4:	2302      	movs	r3, #2
 80011d6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011d8:	230c      	movs	r3, #12
 80011da:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011dc:	2300      	movs	r3, #0
 80011de:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e8:	4618      	mov	r0, r3
 80011ea:	f007 fa9f 	bl	800872c <HAL_RCC_OscConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011f4:	f000 fe50 	bl	8001e98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f8:	233f      	movs	r3, #63	; 0x3f
 80011fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fc:	2303      	movs	r3, #3
 80011fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8001200:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001204:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	2101      	movs	r1, #1
 800121e:	4618      	mov	r0, r3
 8001220:	f007 feb2 	bl	8008f88 <HAL_RCC_ClockConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800122a:	f000 fe35 	bl	8001e98 <Error_Handler>
  }
}
 800122e:	bf00      	nop
 8001230:	3770      	adds	r7, #112	; 0x70
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	58000400 	.word	0x58000400
 800123c:	58024800 	.word	0x58024800
 8001240:	58024400 	.word	0x58024400

08001244 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0b0      	sub	sp, #192	; 0xc0
 8001248:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	22bc      	movs	r2, #188	; 0xbc
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f00e fde1 	bl	800fe18 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001256:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800125a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800125c:	2304      	movs	r3, #4
 800125e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001260:	2309      	movs	r3, #9
 8001262:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001264:	2304      	movs	r3, #4
 8001266:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001268:	2302      	movs	r3, #2
 800126a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800126c:	2302      	movs	r3, #2
 800126e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001270:	23c0      	movs	r3, #192	; 0xc0
 8001272:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001274:	2320      	movs	r3, #32
 8001276:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001278:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	4618      	mov	r0, r3
 8001288:	f008 fa0a 	bl	80096a0 <HAL_RCCEx_PeriphCLKConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8001292:	f000 fe01 	bl	8001e98 <Error_Handler>
  }
}
 8001296:	bf00      	nop
 8001298:	37c0      	adds	r7, #192	; 0xc0
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012b2:	463b      	mov	r3, r7
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
 80012c0:	615a      	str	r2, [r3, #20]
 80012c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012c4:	4b90      	ldr	r3, [pc, #576]	; (8001508 <MX_ADC1_Init+0x268>)
 80012c6:	4a91      	ldr	r2, [pc, #580]	; (800150c <MX_ADC1_Init+0x26c>)
 80012c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80012ca:	4b8f      	ldr	r3, [pc, #572]	; (8001508 <MX_ADC1_Init+0x268>)
 80012cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012d2:	4b8d      	ldr	r3, [pc, #564]	; (8001508 <MX_ADC1_Init+0x268>)
 80012d4:	2208      	movs	r2, #8
 80012d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012d8:	4b8b      	ldr	r3, [pc, #556]	; (8001508 <MX_ADC1_Init+0x268>)
 80012da:	2201      	movs	r2, #1
 80012dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012de:	4b8a      	ldr	r3, [pc, #552]	; (8001508 <MX_ADC1_Init+0x268>)
 80012e0:	2204      	movs	r2, #4
 80012e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012e4:	4b88      	ldr	r3, [pc, #544]	; (8001508 <MX_ADC1_Init+0x268>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012ea:	4b87      	ldr	r3, [pc, #540]	; (8001508 <MX_ADC1_Init+0x268>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 14;
 80012f0:	4b85      	ldr	r3, [pc, #532]	; (8001508 <MX_ADC1_Init+0x268>)
 80012f2:	220e      	movs	r2, #14
 80012f4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012f6:	4b84      	ldr	r3, [pc, #528]	; (8001508 <MX_ADC1_Init+0x268>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012fc:	4b82      	ldr	r3, [pc, #520]	; (8001508 <MX_ADC1_Init+0x268>)
 80012fe:	2200      	movs	r2, #0
 8001300:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001302:	4b81      	ldr	r3, [pc, #516]	; (8001508 <MX_ADC1_Init+0x268>)
 8001304:	2200      	movs	r2, #0
 8001306:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001308:	4b7f      	ldr	r3, [pc, #508]	; (8001508 <MX_ADC1_Init+0x268>)
 800130a:	2203      	movs	r2, #3
 800130c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800130e:	4b7e      	ldr	r3, [pc, #504]	; (8001508 <MX_ADC1_Init+0x268>)
 8001310:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001314:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001316:	4b7c      	ldr	r3, [pc, #496]	; (8001508 <MX_ADC1_Init+0x268>)
 8001318:	2200      	movs	r2, #0
 800131a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800131c:	4b7a      	ldr	r3, [pc, #488]	; (8001508 <MX_ADC1_Init+0x268>)
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001324:	4878      	ldr	r0, [pc, #480]	; (8001508 <MX_ADC1_Init+0x268>)
 8001326:	f001 fe09 	bl	8002f3c <HAL_ADC_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001330:	f000 fdb2 	bl	8001e98 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	4872      	ldr	r0, [pc, #456]	; (8001508 <MX_ADC1_Init+0x268>)
 8001340:	f003 f820 	bl	8004384 <HAL_ADCEx_MultiModeConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800134a:	f000 fda5 	bl	8001e98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800134e:	4b70      	ldr	r3, [pc, #448]	; (8001510 <MX_ADC1_Init+0x270>)
 8001350:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001352:	2306      	movs	r3, #6
 8001354:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001356:	2307      	movs	r3, #7
 8001358:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800135a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800135e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001360:	2304      	movs	r3, #4
 8001362:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136c:	463b      	mov	r3, r7
 800136e:	4619      	mov	r1, r3
 8001370:	4865      	ldr	r0, [pc, #404]	; (8001508 <MX_ADC1_Init+0x268>)
 8001372:	f002 f8b5 	bl	80034e0 <HAL_ADC_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800137c:	f000 fd8c 	bl	8001e98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001380:	4b64      	ldr	r3, [pc, #400]	; (8001514 <MX_ADC1_Init+0x274>)
 8001382:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001384:	230c      	movs	r3, #12
 8001386:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001388:	463b      	mov	r3, r7
 800138a:	4619      	mov	r1, r3
 800138c:	485e      	ldr	r0, [pc, #376]	; (8001508 <MX_ADC1_Init+0x268>)
 800138e:	f002 f8a7 	bl	80034e0 <HAL_ADC_ConfigChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001398:	f000 fd7e 	bl	8001e98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800139c:	4b5e      	ldr	r3, [pc, #376]	; (8001518 <MX_ADC1_Init+0x278>)
 800139e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013a0:	2312      	movs	r3, #18
 80013a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a4:	463b      	mov	r3, r7
 80013a6:	4619      	mov	r1, r3
 80013a8:	4857      	ldr	r0, [pc, #348]	; (8001508 <MX_ADC1_Init+0x268>)
 80013aa:	f002 f899 	bl	80034e0 <HAL_ADC_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80013b4:	f000 fd70 	bl	8001e98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80013b8:	4b58      	ldr	r3, [pc, #352]	; (800151c <MX_ADC1_Init+0x27c>)
 80013ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80013bc:	2318      	movs	r3, #24
 80013be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	4619      	mov	r1, r3
 80013c4:	4850      	ldr	r0, [pc, #320]	; (8001508 <MX_ADC1_Init+0x268>)
 80013c6:	f002 f88b 	bl	80034e0 <HAL_ADC_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80013d0:	f000 fd62 	bl	8001e98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80013d4:	4b52      	ldr	r3, [pc, #328]	; (8001520 <MX_ADC1_Init+0x280>)
 80013d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80013d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013de:	463b      	mov	r3, r7
 80013e0:	4619      	mov	r1, r3
 80013e2:	4849      	ldr	r0, [pc, #292]	; (8001508 <MX_ADC1_Init+0x268>)
 80013e4:	f002 f87c 	bl	80034e0 <HAL_ADC_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80013ee:	f000 fd53 	bl	8001e98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80013f2:	4b4c      	ldr	r3, [pc, #304]	; (8001524 <MX_ADC1_Init+0x284>)
 80013f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80013f6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80013fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013fc:	463b      	mov	r3, r7
 80013fe:	4619      	mov	r1, r3
 8001400:	4841      	ldr	r0, [pc, #260]	; (8001508 <MX_ADC1_Init+0x268>)
 8001402:	f002 f86d 	bl	80034e0 <HAL_ADC_ConfigChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800140c:	f000 fd44 	bl	8001e98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001410:	4b45      	ldr	r3, [pc, #276]	; (8001528 <MX_ADC1_Init+0x288>)
 8001412:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001414:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001418:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141a:	463b      	mov	r3, r7
 800141c:	4619      	mov	r1, r3
 800141e:	483a      	ldr	r0, [pc, #232]	; (8001508 <MX_ADC1_Init+0x268>)
 8001420:	f002 f85e 	bl	80034e0 <HAL_ADC_ConfigChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800142a:	f000 fd35 	bl	8001e98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800142e:	4b3f      	ldr	r3, [pc, #252]	; (800152c <MX_ADC1_Init+0x28c>)
 8001430:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001432:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001436:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001438:	463b      	mov	r3, r7
 800143a:	4619      	mov	r1, r3
 800143c:	4832      	ldr	r0, [pc, #200]	; (8001508 <MX_ADC1_Init+0x268>)
 800143e:	f002 f84f 	bl	80034e0 <HAL_ADC_ConfigChannel>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001448:	f000 fd26 	bl	8001e98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800144c:	4b38      	ldr	r3, [pc, #224]	; (8001530 <MX_ADC1_Init+0x290>)
 800144e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001450:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001454:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001456:	463b      	mov	r3, r7
 8001458:	4619      	mov	r1, r3
 800145a:	482b      	ldr	r0, [pc, #172]	; (8001508 <MX_ADC1_Init+0x268>)
 800145c:	f002 f840 	bl	80034e0 <HAL_ADC_ConfigChannel>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001466:	f000 fd17 	bl	8001e98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800146a:	4b32      	ldr	r3, [pc, #200]	; (8001534 <MX_ADC1_Init+0x294>)
 800146c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800146e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001472:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001474:	463b      	mov	r3, r7
 8001476:	4619      	mov	r1, r3
 8001478:	4823      	ldr	r0, [pc, #140]	; (8001508 <MX_ADC1_Init+0x268>)
 800147a:	f002 f831 	bl	80034e0 <HAL_ADC_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001484:	f000 fd08 	bl	8001e98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001488:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <MX_ADC1_Init+0x298>)
 800148a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800148c:	f240 2306 	movw	r3, #518	; 0x206
 8001490:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001492:	463b      	mov	r3, r7
 8001494:	4619      	mov	r1, r3
 8001496:	481c      	ldr	r0, [pc, #112]	; (8001508 <MX_ADC1_Init+0x268>)
 8001498:	f002 f822 	bl	80034e0 <HAL_ADC_ConfigChannel>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80014a2:	f000 fcf9 	bl	8001e98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80014a6:	4b25      	ldr	r3, [pc, #148]	; (800153c <MX_ADC1_Init+0x29c>)
 80014a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80014aa:	f44f 7303 	mov.w	r3, #524	; 0x20c
 80014ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	4619      	mov	r1, r3
 80014b4:	4814      	ldr	r0, [pc, #80]	; (8001508 <MX_ADC1_Init+0x268>)
 80014b6:	f002 f813 	bl	80034e0 <HAL_ADC_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_ADC1_Init+0x224>
  {
    Error_Handler();
 80014c0:	f000 fcea 	bl	8001e98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80014c4:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <MX_ADC1_Init+0x2a0>)
 80014c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 80014c8:	f240 2312 	movw	r3, #530	; 0x212
 80014cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ce:	463b      	mov	r3, r7
 80014d0:	4619      	mov	r1, r3
 80014d2:	480d      	ldr	r0, [pc, #52]	; (8001508 <MX_ADC1_Init+0x268>)
 80014d4:	f002 f804 	bl	80034e0 <HAL_ADC_ConfigChannel>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_ADC1_Init+0x242>
  {
    Error_Handler();
 80014de:	f000 fcdb 	bl	8001e98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <MX_ADC1_Init+0x2a4>)
 80014e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 80014e6:	f44f 7306 	mov.w	r3, #536	; 0x218
 80014ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ec:	463b      	mov	r3, r7
 80014ee:	4619      	mov	r1, r3
 80014f0:	4805      	ldr	r0, [pc, #20]	; (8001508 <MX_ADC1_Init+0x268>)
 80014f2:	f001 fff5 	bl	80034e0 <HAL_ADC_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_ADC1_Init+0x260>
  {
    Error_Handler();
 80014fc:	f000 fccc 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001500:	bf00      	nop
 8001502:	3728      	adds	r7, #40	; 0x28
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	240000bc 	.word	0x240000bc
 800150c:	40022000 	.word	0x40022000
 8001510:	08600004 	.word	0x08600004
 8001514:	0c900008 	.word	0x0c900008
 8001518:	10c00010 	.word	0x10c00010
 800151c:	14f00020 	.word	0x14f00020
 8001520:	19200040 	.word	0x19200040
 8001524:	1d500080 	.word	0x1d500080
 8001528:	21800100 	.word	0x21800100
 800152c:	25b00200 	.word	0x25b00200
 8001530:	2a000400 	.word	0x2a000400
 8001534:	2e300800 	.word	0x2e300800
 8001538:	3ac04000 	.word	0x3ac04000
 800153c:	3ef08000 	.word	0x3ef08000
 8001540:	43210000 	.word	0x43210000
 8001544:	47520000 	.word	0x47520000

08001548 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
 800155c:	615a      	str	r2, [r3, #20]
 800155e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001560:	4b36      	ldr	r3, [pc, #216]	; (800163c <MX_ADC3_Init+0xf4>)
 8001562:	4a37      	ldr	r2, [pc, #220]	; (8001640 <MX_ADC3_Init+0xf8>)
 8001564:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001566:	4b35      	ldr	r3, [pc, #212]	; (800163c <MX_ADC3_Init+0xf4>)
 8001568:	2208      	movs	r2, #8
 800156a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800156c:	4b33      	ldr	r3, [pc, #204]	; (800163c <MX_ADC3_Init+0xf4>)
 800156e:	2201      	movs	r2, #1
 8001570:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001572:	4b32      	ldr	r3, [pc, #200]	; (800163c <MX_ADC3_Init+0xf4>)
 8001574:	2204      	movs	r2, #4
 8001576:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001578:	4b30      	ldr	r3, [pc, #192]	; (800163c <MX_ADC3_Init+0xf4>)
 800157a:	2200      	movs	r2, #0
 800157c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800157e:	4b2f      	ldr	r3, [pc, #188]	; (800163c <MX_ADC3_Init+0xf4>)
 8001580:	2201      	movs	r2, #1
 8001582:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 3;
 8001584:	4b2d      	ldr	r3, [pc, #180]	; (800163c <MX_ADC3_Init+0xf4>)
 8001586:	2203      	movs	r2, #3
 8001588:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800158a:	4b2c      	ldr	r3, [pc, #176]	; (800163c <MX_ADC3_Init+0xf4>)
 800158c:	2200      	movs	r2, #0
 800158e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001590:	4b2a      	ldr	r3, [pc, #168]	; (800163c <MX_ADC3_Init+0xf4>)
 8001592:	2200      	movs	r2, #0
 8001594:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001596:	4b29      	ldr	r3, [pc, #164]	; (800163c <MX_ADC3_Init+0xf4>)
 8001598:	2200      	movs	r2, #0
 800159a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800159c:	4b27      	ldr	r3, [pc, #156]	; (800163c <MX_ADC3_Init+0xf4>)
 800159e:	2203      	movs	r2, #3
 80015a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015a2:	4b26      	ldr	r3, [pc, #152]	; (800163c <MX_ADC3_Init+0xf4>)
 80015a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015a8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80015aa:	4b24      	ldr	r3, [pc, #144]	; (800163c <MX_ADC3_Init+0xf4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80015b0:	4b22      	ldr	r3, [pc, #136]	; (800163c <MX_ADC3_Init+0xf4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80015b8:	4820      	ldr	r0, [pc, #128]	; (800163c <MX_ADC3_Init+0xf4>)
 80015ba:	f001 fcbf 	bl	8002f3c <HAL_ADC_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80015c4:	f000 fc68 	bl	8001e98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <MX_ADC3_Init+0xfc>)
 80015ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015cc:	2306      	movs	r3, #6
 80015ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80015d0:	2307      	movs	r3, #7
 80015d2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015d4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80015d8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015da:	2304      	movs	r3, #4
 80015dc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	4619      	mov	r1, r3
 80015ea:	4814      	ldr	r0, [pc, #80]	; (800163c <MX_ADC3_Init+0xf4>)
 80015ec:	f001 ff78 	bl	80034e0 <HAL_ADC_ConfigChannel>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80015f6:	f000 fc4f 	bl	8001e98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <MX_ADC3_Init+0x100>)
 80015fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015fe:	230c      	movs	r3, #12
 8001600:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	4619      	mov	r1, r3
 8001606:	480d      	ldr	r0, [pc, #52]	; (800163c <MX_ADC3_Init+0xf4>)
 8001608:	f001 ff6a 	bl	80034e0 <HAL_ADC_ConfigChannel>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8001612:	f000 fc41 	bl	8001e98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001616:	4b0d      	ldr	r3, [pc, #52]	; (800164c <MX_ADC3_Init+0x104>)
 8001618:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800161a:	2312      	movs	r3, #18
 800161c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	4619      	mov	r1, r3
 8001622:	4806      	ldr	r0, [pc, #24]	; (800163c <MX_ADC3_Init+0xf4>)
 8001624:	f001 ff5c 	bl	80034e0 <HAL_ADC_ConfigChannel>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800162e:	f000 fc33 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	3720      	adds	r7, #32
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	24000120 	.word	0x24000120
 8001640:	58026000 	.word	0x58026000
 8001644:	cfb80000 	.word	0xcfb80000
 8001648:	cb840000 	.word	0xcb840000
 800164c:	08600004 	.word	0x08600004

08001650 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	2224      	movs	r2, #36	; 0x24
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f00e fbdb 	bl	800fe18 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <MX_DAC1_Init+0x70>)
 8001664:	4a17      	ldr	r2, [pc, #92]	; (80016c4 <MX_DAC1_Init+0x74>)
 8001666:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001668:	4815      	ldr	r0, [pc, #84]	; (80016c0 <MX_DAC1_Init+0x70>)
 800166a:	f003 f878 	bl	800475e <HAL_DAC_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001674:	f000 fc10 	bl	8001e98 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001678:	2300      	movs	r3, #0
 800167a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 800167c:	2302      	movs	r3, #2
 800167e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001684:	2301      	movs	r3, #1
 8001686:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	2200      	movs	r2, #0
 8001690:	4619      	mov	r1, r3
 8001692:	480b      	ldr	r0, [pc, #44]	; (80016c0 <MX_DAC1_Init+0x70>)
 8001694:	f003 f8fc 	bl	8004890 <HAL_DAC_ConfigChannel>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800169e:	f000 fbfb 	bl	8001e98 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2210      	movs	r2, #16
 80016a6:	4619      	mov	r1, r3
 80016a8:	4805      	ldr	r0, [pc, #20]	; (80016c0 <MX_DAC1_Init+0x70>)
 80016aa:	f003 f8f1 	bl	8004890 <HAL_DAC_ConfigChannel>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80016b4:	f000 fbf0 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	3728      	adds	r7, #40	; 0x28
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	24000274 	.word	0x24000274
 80016c4:	40007400 	.word	0x40007400

080016c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <MX_I2C1_Init+0x74>)
 80016ce:	4a1c      	ldr	r2, [pc, #112]	; (8001740 <MX_I2C1_Init+0x78>)
 80016d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80016d2:	4b1a      	ldr	r3, [pc, #104]	; (800173c <MX_I2C1_Init+0x74>)
 80016d4:	4a1b      	ldr	r2, [pc, #108]	; (8001744 <MX_I2C1_Init+0x7c>)
 80016d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016d8:	4b18      	ldr	r3, [pc, #96]	; (800173c <MX_I2C1_Init+0x74>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <MX_I2C1_Init+0x74>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <MX_I2C1_Init+0x74>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016ea:	4b14      	ldr	r3, [pc, #80]	; (800173c <MX_I2C1_Init+0x74>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <MX_I2C1_Init+0x74>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <MX_I2C1_Init+0x74>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <MX_I2C1_Init+0x74>)
 80016fe:	2200      	movs	r2, #0
 8001700:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001702:	480e      	ldr	r0, [pc, #56]	; (800173c <MX_I2C1_Init+0x74>)
 8001704:	f006 fa12 	bl	8007b2c <HAL_I2C_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800170e:	f000 fbc3 	bl	8001e98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001712:	2100      	movs	r1, #0
 8001714:	4809      	ldr	r0, [pc, #36]	; (800173c <MX_I2C1_Init+0x74>)
 8001716:	f006 fefb 	bl	8008510 <HAL_I2CEx_ConfigAnalogFilter>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001720:	f000 fbba 	bl	8001e98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001724:	2100      	movs	r1, #0
 8001726:	4805      	ldr	r0, [pc, #20]	; (800173c <MX_I2C1_Init+0x74>)
 8001728:	f006 ff3d 	bl	80085a6 <HAL_I2CEx_ConfigDigitalFilter>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001732:	f000 fbb1 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	24000288 	.word	0x24000288
 8001740:	40005400 	.word	0x40005400
 8001744:	20303e5d 	.word	0x20303e5d

08001748 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800174c:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <MX_SPI1_Init+0xa8>)
 800174e:	4a29      	ldr	r2, [pc, #164]	; (80017f4 <MX_SPI1_Init+0xac>)
 8001750:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001752:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <MX_SPI1_Init+0xa8>)
 8001754:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001758:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800175a:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <MX_SPI1_Init+0xa8>)
 800175c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001760:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001762:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <MX_SPI1_Init+0xa8>)
 8001764:	220f      	movs	r2, #15
 8001766:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001768:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <MX_SPI1_Init+0xa8>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <MX_SPI1_Init+0xa8>)
 8001770:	2200      	movs	r2, #0
 8001772:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001774:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <MX_SPI1_Init+0xa8>)
 8001776:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800177a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <MX_SPI1_Init+0xa8>)
 800177e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001782:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <MX_SPI1_Init+0xa8>)
 8001786:	2200      	movs	r2, #0
 8001788:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800178a:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <MX_SPI1_Init+0xa8>)
 800178c:	2200      	movs	r2, #0
 800178e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <MX_SPI1_Init+0xa8>)
 8001792:	2200      	movs	r2, #0
 8001794:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <MX_SPI1_Init+0xa8>)
 8001798:	2200      	movs	r2, #0
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MX_SPI1_Init+0xa8>)
 800179e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <MX_SPI1_Init+0xa8>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_SPI1_Init+0xa8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MX_SPI1_Init+0xa8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <MX_SPI1_Init+0xa8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <MX_SPI1_Init+0xa8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <MX_SPI1_Init+0xa8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_SPI1_Init+0xa8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <MX_SPI1_Init+0xa8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_SPI1_Init+0xa8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_SPI1_Init+0xa8>)
 80017dc:	f00a f8ec 	bl	800b9b8 <HAL_SPI_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80017e6:	f000 fb57 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	240002d4 	.word	0x240002d4
 80017f4:	40013000 	.word	0x40013000

080017f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017fc:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <MX_SPI2_Init+0xa8>)
 80017fe:	4a29      	ldr	r2, [pc, #164]	; (80018a4 <MX_SPI2_Init+0xac>)
 8001800:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001802:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <MX_SPI2_Init+0xa8>)
 8001804:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001808:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800180a:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <MX_SPI2_Init+0xa8>)
 800180c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001810:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001812:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <MX_SPI2_Init+0xa8>)
 8001814:	220f      	movs	r2, #15
 8001816:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001818:	4b21      	ldr	r3, [pc, #132]	; (80018a0 <MX_SPI2_Init+0xa8>)
 800181a:	2200      	movs	r2, #0
 800181c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800181e:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <MX_SPI2_Init+0xa8>)
 8001820:	2200      	movs	r2, #0
 8001822:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001824:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <MX_SPI2_Init+0xa8>)
 8001826:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800182a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800182c:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <MX_SPI2_Init+0xa8>)
 800182e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001832:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001834:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <MX_SPI2_Init+0xa8>)
 8001836:	2200      	movs	r2, #0
 8001838:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800183a:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <MX_SPI2_Init+0xa8>)
 800183c:	2200      	movs	r2, #0
 800183e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001840:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <MX_SPI2_Init+0xa8>)
 8001842:	2200      	movs	r2, #0
 8001844:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001846:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <MX_SPI2_Init+0xa8>)
 8001848:	2200      	movs	r2, #0
 800184a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800184c:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <MX_SPI2_Init+0xa8>)
 800184e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001852:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <MX_SPI2_Init+0xa8>)
 8001856:	2200      	movs	r2, #0
 8001858:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <MX_SPI2_Init+0xa8>)
 800185c:	2200      	movs	r2, #0
 800185e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <MX_SPI2_Init+0xa8>)
 8001862:	2200      	movs	r2, #0
 8001864:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <MX_SPI2_Init+0xa8>)
 8001868:	2200      	movs	r2, #0
 800186a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <MX_SPI2_Init+0xa8>)
 800186e:	2200      	movs	r2, #0
 8001870:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <MX_SPI2_Init+0xa8>)
 8001874:	2200      	movs	r2, #0
 8001876:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001878:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <MX_SPI2_Init+0xa8>)
 800187a:	2200      	movs	r2, #0
 800187c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800187e:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <MX_SPI2_Init+0xa8>)
 8001880:	2200      	movs	r2, #0
 8001882:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <MX_SPI2_Init+0xa8>)
 8001886:	2200      	movs	r2, #0
 8001888:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <MX_SPI2_Init+0xa8>)
 800188c:	f00a f894 	bl	800b9b8 <HAL_SPI_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001896:	f000 faff 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	2400035c 	.word	0x2400035c
 80018a4:	40003800 	.word	0x40003800

080018a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b096      	sub	sp, #88	; 0x58
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
 80018c8:	611a      	str	r2, [r3, #16]
 80018ca:	615a      	str	r2, [r3, #20]
 80018cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	222c      	movs	r2, #44	; 0x2c
 80018d2:	2100      	movs	r1, #0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f00e fa9f 	bl	800fe18 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018da:	4b39      	ldr	r3, [pc, #228]	; (80019c0 <MX_TIM1_Init+0x118>)
 80018dc:	4a39      	ldr	r2, [pc, #228]	; (80019c4 <MX_TIM1_Init+0x11c>)
 80018de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 80018e0:	4b37      	ldr	r3, [pc, #220]	; (80019c0 <MX_TIM1_Init+0x118>)
 80018e2:	2263      	movs	r2, #99	; 0x63
 80018e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e6:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <MX_TIM1_Init+0x118>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000 - 1;
 80018ec:	4b34      	ldr	r3, [pc, #208]	; (80019c0 <MX_TIM1_Init+0x118>)
 80018ee:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80018f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f4:	4b32      	ldr	r3, [pc, #200]	; (80019c0 <MX_TIM1_Init+0x118>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018fa:	4b31      	ldr	r3, [pc, #196]	; (80019c0 <MX_TIM1_Init+0x118>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001900:	4b2f      	ldr	r3, [pc, #188]	; (80019c0 <MX_TIM1_Init+0x118>)
 8001902:	2200      	movs	r2, #0
 8001904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001906:	482e      	ldr	r0, [pc, #184]	; (80019c0 <MX_TIM1_Init+0x118>)
 8001908:	f00a ff64 	bl	800c7d4 <HAL_TIM_PWM_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001912:	f000 fac1 	bl	8001e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800191a:	2300      	movs	r3, #0
 800191c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001922:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001926:	4619      	mov	r1, r3
 8001928:	4825      	ldr	r0, [pc, #148]	; (80019c0 <MX_TIM1_Init+0x118>)
 800192a:	f00b fd9b 	bl	800d464 <HAL_TIMEx_MasterConfigSynchronization>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001934:	f000 fab0 	bl	8001e98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001938:	2360      	movs	r3, #96	; 0x60
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480 -1;
 800193c:	f240 13df 	movw	r3, #479	; 0x1df
 8001940:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001942:	2300      	movs	r3, #0
 8001944:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001946:	2300      	movs	r3, #0
 8001948:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800194a:	2300      	movs	r3, #0
 800194c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001952:	2300      	movs	r3, #0
 8001954:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001956:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800195a:	2200      	movs	r2, #0
 800195c:	4619      	mov	r1, r3
 800195e:	4818      	ldr	r0, [pc, #96]	; (80019c0 <MX_TIM1_Init+0x118>)
 8001960:	f00b f8ae 	bl	800cac0 <HAL_TIM_PWM_ConfigChannel>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800196a:	f000 fa95 	bl	8001e98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001982:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001986:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001990:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	4619      	mov	r1, r3
 80019a2:	4807      	ldr	r0, [pc, #28]	; (80019c0 <MX_TIM1_Init+0x118>)
 80019a4:	f00b fdec 	bl	800d580 <HAL_TIMEx_ConfigBreakDeadTime>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80019ae:	f000 fa73 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019b2:	4803      	ldr	r0, [pc, #12]	; (80019c0 <MX_TIM1_Init+0x118>)
 80019b4:	f000 fd84 	bl	80024c0 <HAL_TIM_MspPostInit>

}
 80019b8:	bf00      	nop
 80019ba:	3758      	adds	r7, #88	; 0x58
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	240003e4 	.word	0x240003e4
 80019c4:	40010000 	.word	0x40010000

080019c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019da:	463b      	mov	r3, r7
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
 80019e8:	615a      	str	r2, [r3, #20]
 80019ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019ec:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <MX_TIM2_Init+0xb0>)
 80019ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 -1;
 80019f4:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <MX_TIM2_Init+0xb0>)
 80019f6:	2263      	movs	r2, #99	; 0x63
 80019f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fa:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <MX_TIM2_Init+0xb0>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48000 - 1;
 8001a00:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <MX_TIM2_Init+0xb0>)
 8001a02:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001a06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a08:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <MX_TIM2_Init+0xb0>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <MX_TIM2_Init+0xb0>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a14:	4818      	ldr	r0, [pc, #96]	; (8001a78 <MX_TIM2_Init+0xb0>)
 8001a16:	f00a fedd 	bl	800c7d4 <HAL_TIM_PWM_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001a20:	f000 fa3a 	bl	8001e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	4619      	mov	r1, r3
 8001a32:	4811      	ldr	r0, [pc, #68]	; (8001a78 <MX_TIM2_Init+0xb0>)
 8001a34:	f00b fd16 	bl	800d464 <HAL_TIMEx_MasterConfigSynchronization>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001a3e:	f000 fa2b 	bl	8001e98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a42:	2360      	movs	r3, #96	; 0x60
 8001a44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 480 - 1;
 8001a46:	f240 13df 	movw	r3, #479	; 0x1df
 8001a4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a54:	463b      	mov	r3, r7
 8001a56:	220c      	movs	r2, #12
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4807      	ldr	r0, [pc, #28]	; (8001a78 <MX_TIM2_Init+0xb0>)
 8001a5c:	f00b f830 	bl	800cac0 <HAL_TIM_PWM_ConfigChannel>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001a66:	f000 fa17 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a6a:	4803      	ldr	r0, [pc, #12]	; (8001a78 <MX_TIM2_Init+0xb0>)
 8001a6c:	f000 fd28 	bl	80024c0 <HAL_TIM_MspPostInit>

}
 8001a70:	bf00      	nop
 8001a72:	3728      	adds	r7, #40	; 0x28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	24000430 	.word	0x24000430

08001a7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a80:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <MX_USART1_UART_Init+0x90>)
 8001a82:	4a23      	ldr	r2, [pc, #140]	; (8001b10 <MX_USART1_UART_Init+0x94>)
 8001a84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001a86:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <MX_USART1_UART_Init+0x90>)
 8001a88:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001a8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8e:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <MX_USART1_UART_Init+0x90>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a94:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <MX_USART1_UART_Init+0x90>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a9a:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <MX_USART1_UART_Init+0x90>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001aa0:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <MX_USART1_UART_Init+0x90>)
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aa6:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <MX_USART1_UART_Init+0x90>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aac:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <MX_USART1_UART_Init+0x90>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <MX_USART1_UART_Init+0x90>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ab8:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <MX_USART1_UART_Init+0x90>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001abe:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <MX_USART1_UART_Init+0x90>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ac4:	4811      	ldr	r0, [pc, #68]	; (8001b0c <MX_USART1_UART_Init+0x90>)
 8001ac6:	f00b fdf7 	bl	800d6b8 <HAL_UART_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ad0:	f000 f9e2 	bl	8001e98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	480d      	ldr	r0, [pc, #52]	; (8001b0c <MX_USART1_UART_Init+0x90>)
 8001ad8:	f00e f88b 	bl	800fbf2 <HAL_UARTEx_SetTxFifoThreshold>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001ae2:	f000 f9d9 	bl	8001e98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4808      	ldr	r0, [pc, #32]	; (8001b0c <MX_USART1_UART_Init+0x90>)
 8001aea:	f00e f8c0 	bl	800fc6e <HAL_UARTEx_SetRxFifoThreshold>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001af4:	f000 f9d0 	bl	8001e98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001af8:	4804      	ldr	r0, [pc, #16]	; (8001b0c <MX_USART1_UART_Init+0x90>)
 8001afa:	f00e f841 	bl	800fb80 <HAL_UARTEx_DisableFifoMode>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b04:	f000 f9c8 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	2400047c 	.word	0x2400047c
 8001b10:	40011000 	.word	0x40011000

08001b14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <MX_DMA_Init+0x4c>)
 8001b1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b20:	4a0f      	ldr	r2, [pc, #60]	; (8001b60 <MX_DMA_Init+0x4c>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <MX_DMA_Init+0x4c>)
 8001b2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	200b      	movs	r0, #11
 8001b3e:	f002 fdda 	bl	80046f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b42:	200b      	movs	r0, #11
 8001b44:	f002 fdf1 	bl	800472a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	200c      	movs	r0, #12
 8001b4e:	f002 fdd2 	bl	80046f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b52:	200c      	movs	r0, #12
 8001b54:	f002 fde9 	bl	800472a <HAL_NVIC_EnableIRQ>

}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	58024400 	.word	0x58024400

08001b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08c      	sub	sp, #48	; 0x30
 8001b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6a:	f107 031c 	add.w	r3, r7, #28
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
 8001b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7a:	4b54      	ldr	r3, [pc, #336]	; (8001ccc <MX_GPIO_Init+0x168>)
 8001b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b80:	4a52      	ldr	r2, [pc, #328]	; (8001ccc <MX_GPIO_Init+0x168>)
 8001b82:	f043 0304 	orr.w	r3, r3, #4
 8001b86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b8a:	4b50      	ldr	r3, [pc, #320]	; (8001ccc <MX_GPIO_Init+0x168>)
 8001b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	61bb      	str	r3, [r7, #24]
 8001b96:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b98:	4b4c      	ldr	r3, [pc, #304]	; (8001ccc <MX_GPIO_Init+0x168>)
 8001b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9e:	4a4b      	ldr	r2, [pc, #300]	; (8001ccc <MX_GPIO_Init+0x168>)
 8001ba0:	f043 0320 	orr.w	r3, r3, #32
 8001ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ba8:	4b48      	ldr	r3, [pc, #288]	; (8001ccc <MX_GPIO_Init+0x168>)
 8001baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bae:	f003 0320 	and.w	r3, r3, #32
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bb6:	4b45      	ldr	r3, [pc, #276]	; (8001ccc <MX_GPIO_Init+0x168>)
 8001bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bbc:	4a43      	ldr	r2, [pc, #268]	; (8001ccc <MX_GPIO_Init+0x168>)
 8001bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bc6:	4b41      	ldr	r3, [pc, #260]	; (8001ccc <MX_GPIO_Init+0x168>)
 8001bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd4:	4b3d      	ldr	r3, [pc, #244]	; (8001ccc <MX_GPIO_Init+0x168>)
 8001bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bda:	4a3c      	ldr	r2, [pc, #240]	; (8001ccc <MX_GPIO_Init+0x168>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001be4:	4b39      	ldr	r3, [pc, #228]	; (8001ccc <MX_GPIO_Init+0x168>)
 8001be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	4b36      	ldr	r3, [pc, #216]	; (8001ccc <MX_GPIO_Init+0x168>)
 8001bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf8:	4a34      	ldr	r2, [pc, #208]	; (8001ccc <MX_GPIO_Init+0x168>)
 8001bfa:	f043 0302 	orr.w	r3, r3, #2
 8001bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c02:	4b32      	ldr	r3, [pc, #200]	; (8001ccc <MX_GPIO_Init+0x168>)
 8001c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c10:	4b2e      	ldr	r3, [pc, #184]	; (8001ccc <MX_GPIO_Init+0x168>)
 8001c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c16:	4a2d      	ldr	r2, [pc, #180]	; (8001ccc <MX_GPIO_Init+0x168>)
 8001c18:	f043 0308 	orr.w	r3, r3, #8
 8001c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c20:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <MX_GPIO_Init+0x168>)
 8001c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	21c0      	movs	r1, #192	; 0xc0
 8001c32:	4827      	ldr	r0, [pc, #156]	; (8001cd0 <MX_GPIO_Init+0x16c>)
 8001c34:	f005 ff60 	bl	8007af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8001c3e:	4825      	ldr	r0, [pc, #148]	; (8001cd4 <MX_GPIO_Init+0x170>)
 8001c40:	f005 ff5a 	bl	8007af8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2160      	movs	r1, #96	; 0x60
 8001c48:	4823      	ldr	r0, [pc, #140]	; (8001cd8 <MX_GPIO_Init+0x174>)
 8001c4a:	f005 ff55 	bl	8007af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c4e:	23c0      	movs	r3, #192	; 0xc0
 8001c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c52:	2301      	movs	r3, #1
 8001c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c5e:	f107 031c 	add.w	r3, r7, #28
 8001c62:	4619      	mov	r1, r3
 8001c64:	481a      	ldr	r0, [pc, #104]	; (8001cd0 <MX_GPIO_Init+0x16c>)
 8001c66:	f005 fd7f 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001c6a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001c6e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c70:	2301      	movs	r3, #1
 8001c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	4619      	mov	r1, r3
 8001c82:	4814      	ldr	r0, [pc, #80]	; (8001cd4 <MX_GPIO_Init+0x170>)
 8001c84:	f005 fd70 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c88:	2360      	movs	r3, #96	; 0x60
 8001c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2300      	movs	r3, #0
 8001c96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c98:	2307      	movs	r3, #7
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	480e      	ldr	r0, [pc, #56]	; (8001cdc <MX_GPIO_Init+0x178>)
 8001ca4:	f005 fd60 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001ca8:	2360      	movs	r3, #96	; 0x60
 8001caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cac:	2301      	movs	r3, #1
 8001cae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb8:	f107 031c 	add.w	r3, r7, #28
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4806      	ldr	r0, [pc, #24]	; (8001cd8 <MX_GPIO_Init+0x174>)
 8001cc0:	f005 fd52 	bl	8007768 <HAL_GPIO_Init>

}
 8001cc4:	bf00      	nop
 8001cc6:	3730      	adds	r7, #48	; 0x30
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	58024400 	.word	0x58024400
 8001cd0:	58021400 	.word	0x58021400
 8001cd4:	58020800 	.word	0x58020800
 8001cd8:	58020400 	.word	0x58020400
 8001cdc:	58020c00 	.word	0x58020c00

08001ce0 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

	/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
	if (hadc == &hadc1) {
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a2f      	ldr	r2, [pc, #188]	; (8001da8 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d129      	bne.n	8001d44 <HAL_ADC_ConvHalfCpltCallback+0x64>
 8001cf0:	4b2e      	ldr	r3, [pc, #184]	; (8001dac <HAL_ADC_ConvHalfCpltCallback+0xcc>)
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf4:	2320      	movs	r3, #32
 8001cf6:	623b      	str	r3, [r7, #32]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	dd1d      	ble.n	8001d3a <HAL_ADC_ConvHalfCpltCallback+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	f003 021f 	and.w	r2, r3, #31
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	4413      	add	r3, r2
 8001d08:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d0e:	f3bf 8f4f 	dsb	sy
}
 8001d12:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001d14:	4a26      	ldr	r2, [pc, #152]	; (8001db0 <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	3320      	adds	r3, #32
 8001d20:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3b20      	subs	r3, #32
 8001d26:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	dcf2      	bgt.n	8001d14 <HAL_ADC_ConvHalfCpltCallback+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d2e:	f3bf 8f4f 	dsb	sy
}
 8001d32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d34:	f3bf 8f6f 	isb	sy
}
 8001d38:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8001d3a:	bf00      	nop
		SCB_InvalidateDCache_by_Addr((uint32_t *) &ADC1Data[0], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc1);
 8001d3c:	481a      	ldr	r0, [pc, #104]	; (8001da8 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 8001d3e:	f001 fb63 	bl	8003408 <HAL_ADC_Stop_DMA>
	} else if (hadc == &hadc3) {
		SCB_InvalidateDCache_by_Addr((uint32_t *) &ADC3Data[0], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc3);
	}

}
 8001d42:	e02c      	b.n	8001d9e <HAL_ADC_ConvHalfCpltCallback+0xbe>
	} else if (hadc == &hadc3) {
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a1b      	ldr	r2, [pc, #108]	; (8001db4 <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d128      	bne.n	8001d9e <HAL_ADC_ConvHalfCpltCallback+0xbe>
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <HAL_ADC_ConvHalfCpltCallback+0xd8>)
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	2320      	movs	r3, #32
 8001d52:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	dd1d      	ble.n	8001d96 <HAL_ADC_ConvHalfCpltCallback+0xb6>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f003 021f 	and.w	r2, r3, #31
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4413      	add	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d6a:	f3bf 8f4f 	dsb	sy
}
 8001d6e:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001d70:	4a0f      	ldr	r2, [pc, #60]	; (8001db0 <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	3320      	adds	r3, #32
 8001d7c:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	3b20      	subs	r3, #32
 8001d82:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	dcf2      	bgt.n	8001d70 <HAL_ADC_ConvHalfCpltCallback+0x90>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d8a:	f3bf 8f4f 	dsb	sy
}
 8001d8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d90:	f3bf 8f6f 	isb	sy
}
 8001d94:	bf00      	nop
}
 8001d96:	bf00      	nop
		HAL_ADC_Stop_DMA(&hadc3);
 8001d98:	4806      	ldr	r0, [pc, #24]	; (8001db4 <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 8001d9a:	f001 fb35 	bl	8003408 <HAL_ADC_Stop_DMA>
}
 8001d9e:	bf00      	nop
 8001da0:	3728      	adds	r7, #40	; 0x28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	240000bc 	.word	0x240000bc
 8001dac:	24000580 	.word	0x24000580
 8001db0:	e000ed00 	.word	0xe000ed00
 8001db4:	24000120 	.word	0x24000120
 8001db8:	240005c0 	.word	0x240005c0

08001dbc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	; 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
	if (hadc == &hadc1) {
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a2f      	ldr	r2, [pc, #188]	; (8001e84 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d129      	bne.n	8001e20 <HAL_ADC_ConvCpltCallback+0x64>
 8001dcc:	4b2e      	ldr	r3, [pc, #184]	; (8001e88 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd0:	2320      	movs	r3, #32
 8001dd2:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	dd1d      	ble.n	8001e16 <HAL_ADC_ConvCpltCallback+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	4413      	add	r3, r2
 8001de4:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001dea:	f3bf 8f4f 	dsb	sy
}
 8001dee:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001df0:	4a26      	ldr	r2, [pc, #152]	; (8001e8c <HAL_ADC_ConvCpltCallback+0xd0>)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	3320      	adds	r3, #32
 8001dfc:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3b20      	subs	r3, #32
 8001e02:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	dcf2      	bgt.n	8001df0 <HAL_ADC_ConvCpltCallback+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e0a:	f3bf 8f4f 	dsb	sy
}
 8001e0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e10:	f3bf 8f6f 	isb	sy
}
 8001e14:	bf00      	nop
}
 8001e16:	bf00      	nop
		SCB_InvalidateDCache_by_Addr((uint32_t *) &ADC1Data[ADC_CONVERTED_DATA_BUFFER_SIZE/2], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc1);
 8001e18:	481a      	ldr	r0, [pc, #104]	; (8001e84 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001e1a:	f001 faf5 	bl	8003408 <HAL_ADC_Stop_DMA>
		SCB_InvalidateDCache_by_Addr((uint32_t *) &ADC3Data[ADC_CONVERTED_DATA_BUFFER_SIZE/2], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc3);

	}

}
 8001e1e:	e02c      	b.n	8001e7a <HAL_ADC_ConvCpltCallback+0xbe>
	} else if (hadc == &hadc3) {
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a1b      	ldr	r2, [pc, #108]	; (8001e90 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d128      	bne.n	8001e7a <HAL_ADC_ConvCpltCallback+0xbe>
 8001e28:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	2320      	movs	r3, #32
 8001e2e:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	dd1d      	ble.n	8001e72 <HAL_ADC_ConvCpltCallback+0xb6>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f003 021f 	and.w	r2, r3, #31
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4413      	add	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e46:	f3bf 8f4f 	dsb	sy
}
 8001e4a:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001e4c:	4a0f      	ldr	r2, [pc, #60]	; (8001e8c <HAL_ADC_ConvCpltCallback+0xd0>)
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	3320      	adds	r3, #32
 8001e58:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3b20      	subs	r3, #32
 8001e5e:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	dcf2      	bgt.n	8001e4c <HAL_ADC_ConvCpltCallback+0x90>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e66:	f3bf 8f4f 	dsb	sy
}
 8001e6a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e6c:	f3bf 8f6f 	isb	sy
}
 8001e70:	bf00      	nop
}
 8001e72:	bf00      	nop
		HAL_ADC_Stop_DMA(&hadc3);
 8001e74:	4806      	ldr	r0, [pc, #24]	; (8001e90 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001e76:	f001 fac7 	bl	8003408 <HAL_ADC_Stop_DMA>
}
 8001e7a:	bf00      	nop
 8001e7c:	3728      	adds	r7, #40	; 0x28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	240000bc 	.word	0x240000bc
 8001e88:	240005a0 	.word	0x240005a0
 8001e8c:	e000ed00 	.word	0xe000ed00
 8001e90:	24000120 	.word	0x24000120
 8001e94:	240005e0 	.word	0x240005e0

08001e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e9c:	b672      	cpsid	i
}
 8001e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <Error_Handler+0x8>
	...

08001ea4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <HAL_MspInit+0x30>)
 8001eac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001eb0:	4a08      	ldr	r2, [pc, #32]	; (8001ed4 <HAL_MspInit+0x30>)
 8001eb2:	f043 0302 	orr.w	r3, r3, #2
 8001eb6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_MspInit+0x30>)
 8001ebc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	58024400 	.word	0x58024400

08001ed8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08e      	sub	sp, #56	; 0x38
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a8a      	ldr	r2, [pc, #552]	; (8002120 <HAL_ADC_MspInit+0x248>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	f040 80ad 	bne.w	8002056 <HAL_ADC_MspInit+0x17e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001efc:	4b89      	ldr	r3, [pc, #548]	; (8002124 <HAL_ADC_MspInit+0x24c>)
 8001efe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f02:	4a88      	ldr	r2, [pc, #544]	; (8002124 <HAL_ADC_MspInit+0x24c>)
 8001f04:	f043 0320 	orr.w	r3, r3, #32
 8001f08:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f0c:	4b85      	ldr	r3, [pc, #532]	; (8002124 <HAL_ADC_MspInit+0x24c>)
 8001f0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f12:	f003 0320 	and.w	r3, r3, #32
 8001f16:	623b      	str	r3, [r7, #32]
 8001f18:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f1a:	4b82      	ldr	r3, [pc, #520]	; (8002124 <HAL_ADC_MspInit+0x24c>)
 8001f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f20:	4a80      	ldr	r2, [pc, #512]	; (8002124 <HAL_ADC_MspInit+0x24c>)
 8001f22:	f043 0304 	orr.w	r3, r3, #4
 8001f26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f2a:	4b7e      	ldr	r3, [pc, #504]	; (8002124 <HAL_ADC_MspInit+0x24c>)
 8001f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f38:	4b7a      	ldr	r3, [pc, #488]	; (8002124 <HAL_ADC_MspInit+0x24c>)
 8001f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f3e:	4a79      	ldr	r2, [pc, #484]	; (8002124 <HAL_ADC_MspInit+0x24c>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f48:	4b76      	ldr	r3, [pc, #472]	; (8002124 <HAL_ADC_MspInit+0x24c>)
 8001f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	61bb      	str	r3, [r7, #24]
 8001f54:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f56:	4b73      	ldr	r3, [pc, #460]	; (8002124 <HAL_ADC_MspInit+0x24c>)
 8001f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f5c:	4a71      	ldr	r2, [pc, #452]	; (8002124 <HAL_ADC_MspInit+0x24c>)
 8001f5e:	f043 0302 	orr.w	r3, r3, #2
 8001f62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f66:	4b6f      	ldr	r3, [pc, #444]	; (8002124 <HAL_ADC_MspInit+0x24c>)
 8001f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f74:	4b6b      	ldr	r3, [pc, #428]	; (8002124 <HAL_ADC_MspInit+0x24c>)
 8001f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f7a:	4a6a      	ldr	r2, [pc, #424]	; (8002124 <HAL_ADC_MspInit+0x24c>)
 8001f7c:	f043 0320 	orr.w	r3, r3, #32
 8001f80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f84:	4b67      	ldr	r3, [pc, #412]	; (8002124 <HAL_ADC_MspInit+0x24c>)
 8001f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f8a:	f003 0320 	and.w	r3, r3, #32
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001f92:	2333      	movs	r3, #51	; 0x33
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f96:	2303      	movs	r3, #3
 8001f98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4860      	ldr	r0, [pc, #384]	; (8002128 <HAL_ADC_MspInit+0x250>)
 8001fa6:	f005 fbdf 	bl	8007768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001faa:	23cf      	movs	r3, #207	; 0xcf
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fba:	4619      	mov	r1, r3
 8001fbc:	485b      	ldr	r0, [pc, #364]	; (800212c <HAL_ADC_MspInit+0x254>)
 8001fbe:	f005 fbd3 	bl	8007768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4856      	ldr	r0, [pc, #344]	; (8002130 <HAL_ADC_MspInit+0x258>)
 8001fd6:	f005 fbc7 	bl	8007768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001fda:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fec:	4619      	mov	r1, r3
 8001fee:	4851      	ldr	r0, [pc, #324]	; (8002134 <HAL_ADC_MspInit+0x25c>)
 8001ff0:	f005 fbba 	bl	8007768 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001ff4:	4b50      	ldr	r3, [pc, #320]	; (8002138 <HAL_ADC_MspInit+0x260>)
 8001ff6:	4a51      	ldr	r2, [pc, #324]	; (800213c <HAL_ADC_MspInit+0x264>)
 8001ff8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001ffa:	4b4f      	ldr	r3, [pc, #316]	; (8002138 <HAL_ADC_MspInit+0x260>)
 8001ffc:	2209      	movs	r2, #9
 8001ffe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002000:	4b4d      	ldr	r3, [pc, #308]	; (8002138 <HAL_ADC_MspInit+0x260>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002006:	4b4c      	ldr	r3, [pc, #304]	; (8002138 <HAL_ADC_MspInit+0x260>)
 8002008:	2200      	movs	r2, #0
 800200a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800200c:	4b4a      	ldr	r3, [pc, #296]	; (8002138 <HAL_ADC_MspInit+0x260>)
 800200e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002012:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002014:	4b48      	ldr	r3, [pc, #288]	; (8002138 <HAL_ADC_MspInit+0x260>)
 8002016:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800201a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800201c:	4b46      	ldr	r3, [pc, #280]	; (8002138 <HAL_ADC_MspInit+0x260>)
 800201e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002022:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002024:	4b44      	ldr	r3, [pc, #272]	; (8002138 <HAL_ADC_MspInit+0x260>)
 8002026:	f44f 7280 	mov.w	r2, #256	; 0x100
 800202a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800202c:	4b42      	ldr	r3, [pc, #264]	; (8002138 <HAL_ADC_MspInit+0x260>)
 800202e:	2200      	movs	r2, #0
 8002030:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002032:	4b41      	ldr	r3, [pc, #260]	; (8002138 <HAL_ADC_MspInit+0x260>)
 8002034:	2200      	movs	r2, #0
 8002036:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002038:	483f      	ldr	r0, [pc, #252]	; (8002138 <HAL_ADC_MspInit+0x260>)
 800203a:	f002 fd59 	bl	8004af0 <HAL_DMA_Init>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <HAL_ADC_MspInit+0x170>
    {
      Error_Handler();
 8002044:	f7ff ff28 	bl	8001e98 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a3b      	ldr	r2, [pc, #236]	; (8002138 <HAL_ADC_MspInit+0x260>)
 800204c:	64da      	str	r2, [r3, #76]	; 0x4c
 800204e:	4a3a      	ldr	r2, [pc, #232]	; (8002138 <HAL_ADC_MspInit+0x260>)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002054:	e05f      	b.n	8002116 <HAL_ADC_MspInit+0x23e>
  else if(hadc->Instance==ADC3)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a39      	ldr	r2, [pc, #228]	; (8002140 <HAL_ADC_MspInit+0x268>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d15a      	bne.n	8002116 <HAL_ADC_MspInit+0x23e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002060:	4b30      	ldr	r3, [pc, #192]	; (8002124 <HAL_ADC_MspInit+0x24c>)
 8002062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002066:	4a2f      	ldr	r2, [pc, #188]	; (8002124 <HAL_ADC_MspInit+0x24c>)
 8002068:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800206c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002070:	4b2c      	ldr	r3, [pc, #176]	; (8002124 <HAL_ADC_MspInit+0x24c>)
 8002072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002076:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800207e:	4b29      	ldr	r3, [pc, #164]	; (8002124 <HAL_ADC_MspInit+0x24c>)
 8002080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002084:	4a27      	ldr	r2, [pc, #156]	; (8002124 <HAL_ADC_MspInit+0x24c>)
 8002086:	f043 0320 	orr.w	r3, r3, #32
 800208a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800208e:	4b25      	ldr	r3, [pc, #148]	; (8002124 <HAL_ADC_MspInit+0x24c>)
 8002090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002094:	f003 0320 	and.w	r3, r3, #32
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800209c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020a2:	2303      	movs	r3, #3
 80020a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ae:	4619      	mov	r1, r3
 80020b0:	4820      	ldr	r0, [pc, #128]	; (8002134 <HAL_ADC_MspInit+0x25c>)
 80020b2:	f005 fb59 	bl	8007768 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Stream1;
 80020b6:	4b23      	ldr	r3, [pc, #140]	; (8002144 <HAL_ADC_MspInit+0x26c>)
 80020b8:	4a23      	ldr	r2, [pc, #140]	; (8002148 <HAL_ADC_MspInit+0x270>)
 80020ba:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80020bc:	4b21      	ldr	r3, [pc, #132]	; (8002144 <HAL_ADC_MspInit+0x26c>)
 80020be:	2273      	movs	r2, #115	; 0x73
 80020c0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020c2:	4b20      	ldr	r3, [pc, #128]	; (8002144 <HAL_ADC_MspInit+0x26c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80020c8:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <HAL_ADC_MspInit+0x26c>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80020ce:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <HAL_ADC_MspInit+0x26c>)
 80020d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020d4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020d6:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <HAL_ADC_MspInit+0x26c>)
 80020d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020dc:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020de:	4b19      	ldr	r3, [pc, #100]	; (8002144 <HAL_ADC_MspInit+0x26c>)
 80020e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020e4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80020e6:	4b17      	ldr	r3, [pc, #92]	; (8002144 <HAL_ADC_MspInit+0x26c>)
 80020e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ec:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <HAL_ADC_MspInit+0x26c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <HAL_ADC_MspInit+0x26c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80020fa:	4812      	ldr	r0, [pc, #72]	; (8002144 <HAL_ADC_MspInit+0x26c>)
 80020fc:	f002 fcf8 	bl	8004af0 <HAL_DMA_Init>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_ADC_MspInit+0x232>
      Error_Handler();
 8002106:	f7ff fec7 	bl	8001e98 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a0d      	ldr	r2, [pc, #52]	; (8002144 <HAL_ADC_MspInit+0x26c>)
 800210e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002110:	4a0c      	ldr	r2, [pc, #48]	; (8002144 <HAL_ADC_MspInit+0x26c>)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002116:	bf00      	nop
 8002118:	3738      	adds	r7, #56	; 0x38
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40022000 	.word	0x40022000
 8002124:	58024400 	.word	0x58024400
 8002128:	58020800 	.word	0x58020800
 800212c:	58020000 	.word	0x58020000
 8002130:	58020400 	.word	0x58020400
 8002134:	58021400 	.word	0x58021400
 8002138:	24000184 	.word	0x24000184
 800213c:	40020010 	.word	0x40020010
 8002140:	58026000 	.word	0x58026000
 8002144:	240001fc 	.word	0x240001fc
 8002148:	40020028 	.word	0x40020028

0800214c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a18      	ldr	r2, [pc, #96]	; (80021cc <HAL_DAC_MspInit+0x80>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d129      	bne.n	80021c2 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800216e:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <HAL_DAC_MspInit+0x84>)
 8002170:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002174:	4a16      	ldr	r2, [pc, #88]	; (80021d0 <HAL_DAC_MspInit+0x84>)
 8002176:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800217a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800217e:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <HAL_DAC_MspInit+0x84>)
 8002180:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002184:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218c:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <HAL_DAC_MspInit+0x84>)
 800218e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002192:	4a0f      	ldr	r2, [pc, #60]	; (80021d0 <HAL_DAC_MspInit+0x84>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <HAL_DAC_MspInit+0x84>)
 800219e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80021aa:	2330      	movs	r3, #48	; 0x30
 80021ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ae:	2303      	movs	r3, #3
 80021b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	4619      	mov	r1, r3
 80021bc:	4805      	ldr	r0, [pc, #20]	; (80021d4 <HAL_DAC_MspInit+0x88>)
 80021be:	f005 fad3 	bl	8007768 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80021c2:	bf00      	nop
 80021c4:	3728      	adds	r7, #40	; 0x28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40007400 	.word	0x40007400
 80021d0:	58024400 	.word	0x58024400
 80021d4:	58020000 	.word	0x58020000

080021d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b0b8      	sub	sp, #224	; 0xe0
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021f0:	f107 0310 	add.w	r3, r7, #16
 80021f4:	22bc      	movs	r2, #188	; 0xbc
 80021f6:	2100      	movs	r1, #0
 80021f8:	4618      	mov	r0, r3
 80021fa:	f00d fe0d 	bl	800fe18 <memset>
  if(hi2c->Instance==I2C1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a25      	ldr	r2, [pc, #148]	; (8002298 <HAL_I2C_MspInit+0xc0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d142      	bne.n	800228e <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002208:	2308      	movs	r3, #8
 800220a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800220c:	2300      	movs	r3, #0
 800220e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002212:	f107 0310 	add.w	r3, r7, #16
 8002216:	4618      	mov	r0, r3
 8002218:	f007 fa42 	bl	80096a0 <HAL_RCCEx_PeriphCLKConfig>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002222:	f7ff fe39 	bl	8001e98 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002226:	4b1d      	ldr	r3, [pc, #116]	; (800229c <HAL_I2C_MspInit+0xc4>)
 8002228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800222c:	4a1b      	ldr	r2, [pc, #108]	; (800229c <HAL_I2C_MspInit+0xc4>)
 800222e:	f043 0302 	orr.w	r3, r3, #2
 8002232:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002236:	4b19      	ldr	r3, [pc, #100]	; (800229c <HAL_I2C_MspInit+0xc4>)
 8002238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002244:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002248:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800224c:	2312      	movs	r3, #18
 800224e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002258:	2300      	movs	r3, #0
 800225a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800225e:	2304      	movs	r3, #4
 8002260:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002264:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002268:	4619      	mov	r1, r3
 800226a:	480d      	ldr	r0, [pc, #52]	; (80022a0 <HAL_I2C_MspInit+0xc8>)
 800226c:	f005 fa7c 	bl	8007768 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002270:	4b0a      	ldr	r3, [pc, #40]	; (800229c <HAL_I2C_MspInit+0xc4>)
 8002272:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002276:	4a09      	ldr	r2, [pc, #36]	; (800229c <HAL_I2C_MspInit+0xc4>)
 8002278:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800227c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_I2C_MspInit+0xc4>)
 8002282:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800228e:	bf00      	nop
 8002290:	37e0      	adds	r7, #224	; 0xe0
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40005400 	.word	0x40005400
 800229c:	58024400 	.word	0x58024400
 80022a0:	58020400 	.word	0x58020400

080022a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b0ba      	sub	sp, #232	; 0xe8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022bc:	f107 0318 	add.w	r3, r7, #24
 80022c0:	22bc      	movs	r2, #188	; 0xbc
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f00d fda7 	bl	800fe18 <memset>
  if(hspi->Instance==SPI1)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a49      	ldr	r2, [pc, #292]	; (80023f4 <HAL_SPI_MspInit+0x150>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d142      	bne.n	800235a <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80022d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80022da:	2300      	movs	r3, #0
 80022dc:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022de:	f107 0318 	add.w	r3, r7, #24
 80022e2:	4618      	mov	r0, r3
 80022e4:	f007 f9dc 	bl	80096a0 <HAL_RCCEx_PeriphCLKConfig>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80022ee:	f7ff fdd3 	bl	8001e98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022f2:	4b41      	ldr	r3, [pc, #260]	; (80023f8 <HAL_SPI_MspInit+0x154>)
 80022f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022f8:	4a3f      	ldr	r2, [pc, #252]	; (80023f8 <HAL_SPI_MspInit+0x154>)
 80022fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002302:	4b3d      	ldr	r3, [pc, #244]	; (80023f8 <HAL_SPI_MspInit+0x154>)
 8002304:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002310:	4b39      	ldr	r3, [pc, #228]	; (80023f8 <HAL_SPI_MspInit+0x154>)
 8002312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002316:	4a38      	ldr	r2, [pc, #224]	; (80023f8 <HAL_SPI_MspInit+0x154>)
 8002318:	f043 0302 	orr.w	r3, r3, #2
 800231c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002320:	4b35      	ldr	r3, [pc, #212]	; (80023f8 <HAL_SPI_MspInit+0x154>)
 8002322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800232e:	2318      	movs	r3, #24
 8002330:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002334:	2302      	movs	r3, #2
 8002336:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002340:	2300      	movs	r3, #0
 8002342:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002346:	2305      	movs	r3, #5
 8002348:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002350:	4619      	mov	r1, r3
 8002352:	482a      	ldr	r0, [pc, #168]	; (80023fc <HAL_SPI_MspInit+0x158>)
 8002354:	f005 fa08 	bl	8007768 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002358:	e047      	b.n	80023ea <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a28      	ldr	r2, [pc, #160]	; (8002400 <HAL_SPI_MspInit+0x15c>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d142      	bne.n	80023ea <HAL_SPI_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002368:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800236a:	2300      	movs	r3, #0
 800236c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800236e:	f107 0318 	add.w	r3, r7, #24
 8002372:	4618      	mov	r0, r3
 8002374:	f007 f994 	bl	80096a0 <HAL_RCCEx_PeriphCLKConfig>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_SPI_MspInit+0xde>
      Error_Handler();
 800237e:	f7ff fd8b 	bl	8001e98 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002382:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <HAL_SPI_MspInit+0x154>)
 8002384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002388:	4a1b      	ldr	r2, [pc, #108]	; (80023f8 <HAL_SPI_MspInit+0x154>)
 800238a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800238e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002392:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <HAL_SPI_MspInit+0x154>)
 8002394:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a0:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <HAL_SPI_MspInit+0x154>)
 80023a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a6:	4a14      	ldr	r2, [pc, #80]	; (80023f8 <HAL_SPI_MspInit+0x154>)
 80023a8:	f043 0302 	orr.w	r3, r3, #2
 80023ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <HAL_SPI_MspInit+0x154>)
 80023b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80023be:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80023c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c6:	2302      	movs	r3, #2
 80023c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d2:	2300      	movs	r3, #0
 80023d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023d8:	2305      	movs	r3, #5
 80023da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023de:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023e2:	4619      	mov	r1, r3
 80023e4:	4805      	ldr	r0, [pc, #20]	; (80023fc <HAL_SPI_MspInit+0x158>)
 80023e6:	f005 f9bf 	bl	8007768 <HAL_GPIO_Init>
}
 80023ea:	bf00      	nop
 80023ec:	37e8      	adds	r7, #232	; 0xe8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40013000 	.word	0x40013000
 80023f8:	58024400 	.word	0x58024400
 80023fc:	58020400 	.word	0x58020400
 8002400:	40003800 	.word	0x40003800

08002404 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a29      	ldr	r2, [pc, #164]	; (80024b8 <HAL_TIM_PWM_MspInit+0xb4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d12f      	bne.n	8002476 <HAL_TIM_PWM_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002416:	4b29      	ldr	r3, [pc, #164]	; (80024bc <HAL_TIM_PWM_MspInit+0xb8>)
 8002418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800241c:	4a27      	ldr	r2, [pc, #156]	; (80024bc <HAL_TIM_PWM_MspInit+0xb8>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002426:	4b25      	ldr	r3, [pc, #148]	; (80024bc <HAL_TIM_PWM_MspInit+0xb8>)
 8002428:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002434:	2200      	movs	r2, #0
 8002436:	2100      	movs	r1, #0
 8002438:	2018      	movs	r0, #24
 800243a:	f002 f95c 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800243e:	2018      	movs	r0, #24
 8002440:	f002 f973 	bl	800472a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002444:	2200      	movs	r2, #0
 8002446:	2100      	movs	r1, #0
 8002448:	2019      	movs	r0, #25
 800244a:	f002 f954 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800244e:	2019      	movs	r0, #25
 8002450:	f002 f96b 	bl	800472a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002454:	2200      	movs	r2, #0
 8002456:	2100      	movs	r1, #0
 8002458:	201a      	movs	r0, #26
 800245a:	f002 f94c 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800245e:	201a      	movs	r0, #26
 8002460:	f002 f963 	bl	800472a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002464:	2200      	movs	r2, #0
 8002466:	2100      	movs	r1, #0
 8002468:	201b      	movs	r0, #27
 800246a:	f002 f944 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800246e:	201b      	movs	r0, #27
 8002470:	f002 f95b 	bl	800472a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002474:	e01b      	b.n	80024ae <HAL_TIM_PWM_MspInit+0xaa>
  else if(htim_pwm->Instance==TIM2)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247e:	d116      	bne.n	80024ae <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <HAL_TIM_PWM_MspInit+0xb8>)
 8002482:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002486:	4a0d      	ldr	r2, [pc, #52]	; (80024bc <HAL_TIM_PWM_MspInit+0xb8>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002490:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <HAL_TIM_PWM_MspInit+0xb8>)
 8002492:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	2100      	movs	r1, #0
 80024a2:	201c      	movs	r0, #28
 80024a4:	f002 f927 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024a8:	201c      	movs	r0, #28
 80024aa:	f002 f93e 	bl	800472a <HAL_NVIC_EnableIRQ>
}
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40010000 	.word	0x40010000
 80024bc:	58024400 	.word	0x58024400

080024c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	; 0x28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a26      	ldr	r2, [pc, #152]	; (8002578 <HAL_TIM_MspPostInit+0xb8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d120      	bne.n	8002524 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e2:	4b26      	ldr	r3, [pc, #152]	; (800257c <HAL_TIM_MspPostInit+0xbc>)
 80024e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e8:	4a24      	ldr	r2, [pc, #144]	; (800257c <HAL_TIM_MspPostInit+0xbc>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024f2:	4b22      	ldr	r3, [pc, #136]	; (800257c <HAL_TIM_MspPostInit+0xbc>)
 80024f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002500:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002506:	2302      	movs	r3, #2
 8002508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250e:	2300      	movs	r3, #0
 8002510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002512:	2301      	movs	r3, #1
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002516:	f107 0314 	add.w	r3, r7, #20
 800251a:	4619      	mov	r1, r3
 800251c:	4818      	ldr	r0, [pc, #96]	; (8002580 <HAL_TIM_MspPostInit+0xc0>)
 800251e:	f005 f923 	bl	8007768 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002522:	e024      	b.n	800256e <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800252c:	d11f      	bne.n	800256e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800252e:	4b13      	ldr	r3, [pc, #76]	; (800257c <HAL_TIM_MspPostInit+0xbc>)
 8002530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002534:	4a11      	ldr	r2, [pc, #68]	; (800257c <HAL_TIM_MspPostInit+0xbc>)
 8002536:	f043 0302 	orr.w	r3, r3, #2
 800253a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800253e:	4b0f      	ldr	r3, [pc, #60]	; (800257c <HAL_TIM_MspPostInit+0xbc>)
 8002540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800254c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255a:	2300      	movs	r3, #0
 800255c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800255e:	2301      	movs	r3, #1
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002562:	f107 0314 	add.w	r3, r7, #20
 8002566:	4619      	mov	r1, r3
 8002568:	4806      	ldr	r0, [pc, #24]	; (8002584 <HAL_TIM_MspPostInit+0xc4>)
 800256a:	f005 f8fd 	bl	8007768 <HAL_GPIO_Init>
}
 800256e:	bf00      	nop
 8002570:	3728      	adds	r7, #40	; 0x28
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40010000 	.word	0x40010000
 800257c:	58024400 	.word	0x58024400
 8002580:	58020000 	.word	0x58020000
 8002584:	58020400 	.word	0x58020400

08002588 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b0b8      	sub	sp, #224	; 0xe0
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
 800259e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025a0:	f107 0310 	add.w	r3, r7, #16
 80025a4:	22bc      	movs	r2, #188	; 0xbc
 80025a6:	2100      	movs	r1, #0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f00d fc35 	bl	800fe18 <memset>
  if(huart->Instance==USART1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a29      	ldr	r2, [pc, #164]	; (8002658 <HAL_UART_MspInit+0xd0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d14a      	bne.n	800264e <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025b8:	2301      	movs	r3, #1
 80025ba:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80025bc:	2300      	movs	r3, #0
 80025be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025c2:	f107 0310 	add.w	r3, r7, #16
 80025c6:	4618      	mov	r0, r3
 80025c8:	f007 f86a 	bl	80096a0 <HAL_RCCEx_PeriphCLKConfig>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80025d2:	f7ff fc61 	bl	8001e98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025d6:	4b21      	ldr	r3, [pc, #132]	; (800265c <HAL_UART_MspInit+0xd4>)
 80025d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025dc:	4a1f      	ldr	r2, [pc, #124]	; (800265c <HAL_UART_MspInit+0xd4>)
 80025de:	f043 0310 	orr.w	r3, r3, #16
 80025e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80025e6:	4b1d      	ldr	r3, [pc, #116]	; (800265c <HAL_UART_MspInit+0xd4>)
 80025e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025ec:	f003 0310 	and.w	r3, r3, #16
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f4:	4b19      	ldr	r3, [pc, #100]	; (800265c <HAL_UART_MspInit+0xd4>)
 80025f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025fa:	4a18      	ldr	r2, [pc, #96]	; (800265c <HAL_UART_MspInit+0xd4>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002604:	4b15      	ldr	r3, [pc, #84]	; (800265c <HAL_UART_MspInit+0xd4>)
 8002606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002612:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002616:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261a:	2302      	movs	r3, #2
 800261c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002626:	2300      	movs	r3, #0
 8002628:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800262c:	2307      	movs	r3, #7
 800262e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002632:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002636:	4619      	mov	r1, r3
 8002638:	4809      	ldr	r0, [pc, #36]	; (8002660 <HAL_UART_MspInit+0xd8>)
 800263a:	f005 f895 	bl	8007768 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800263e:	2200      	movs	r2, #0
 8002640:	2100      	movs	r1, #0
 8002642:	2025      	movs	r0, #37	; 0x25
 8002644:	f002 f857 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002648:	2025      	movs	r0, #37	; 0x25
 800264a:	f002 f86e 	bl	800472a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800264e:	bf00      	nop
 8002650:	37e0      	adds	r7, #224	; 0xe0
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40011000 	.word	0x40011000
 800265c:	58024400 	.word	0x58024400
 8002660:	58020000 	.word	0x58020000

08002664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002668:	e7fe      	b.n	8002668 <NMI_Handler+0x4>

0800266a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800266e:	e7fe      	b.n	800266e <HardFault_Handler+0x4>

08002670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002674:	e7fe      	b.n	8002674 <MemManage_Handler+0x4>

08002676 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800267a:	e7fe      	b.n	800267a <BusFault_Handler+0x4>

0800267c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002680:	e7fe      	b.n	8002680 <UsageFault_Handler+0x4>

08002682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800269e:	b480      	push	{r7}
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026b0:	f000 f9ac 	bl	8002a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026b4:	bf00      	nop
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026bc:	4802      	ldr	r0, [pc, #8]	; (80026c8 <DMA1_Stream0_IRQHandler+0x10>)
 80026be:	f003 fd41 	bl	8006144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	24000184 	.word	0x24000184

080026cc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80026d0:	4802      	ldr	r0, [pc, #8]	; (80026dc <DMA1_Stream1_IRQHandler+0x10>)
 80026d2:	f003 fd37 	bl	8006144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	240001fc 	.word	0x240001fc

080026e0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026e4:	4802      	ldr	r0, [pc, #8]	; (80026f0 <TIM1_BRK_IRQHandler+0x10>)
 80026e6:	f00a f8cc 	bl	800c882 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	240003e4 	.word	0x240003e4

080026f4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026f8:	4802      	ldr	r0, [pc, #8]	; (8002704 <TIM1_UP_IRQHandler+0x10>)
 80026fa:	f00a f8c2 	bl	800c882 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	240003e4 	.word	0x240003e4

08002708 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800270c:	4802      	ldr	r0, [pc, #8]	; (8002718 <TIM1_TRG_COM_IRQHandler+0x10>)
 800270e:	f00a f8b8 	bl	800c882 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	240003e4 	.word	0x240003e4

0800271c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002720:	4802      	ldr	r0, [pc, #8]	; (800272c <TIM1_CC_IRQHandler+0x10>)
 8002722:	f00a f8ae 	bl	800c882 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	240003e4 	.word	0x240003e4

08002730 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002734:	4802      	ldr	r0, [pc, #8]	; (8002740 <TIM2_IRQHandler+0x10>)
 8002736:	f00a f8a4 	bl	800c882 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	24000430 	.word	0x24000430

08002744 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002748:	4802      	ldr	r0, [pc, #8]	; (8002754 <USART1_IRQHandler+0x10>)
 800274a:	f00b f8f1 	bl	800d930 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	2400047c 	.word	0x2400047c

08002758 <_sbrk>:
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	4a14      	ldr	r2, [pc, #80]	; (80027b4 <_sbrk+0x5c>)
 8002762:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <_sbrk+0x60>)
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	4b13      	ldr	r3, [pc, #76]	; (80027bc <_sbrk+0x64>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d102      	bne.n	800277a <_sbrk+0x22>
 8002774:	4b11      	ldr	r3, [pc, #68]	; (80027bc <_sbrk+0x64>)
 8002776:	4a12      	ldr	r2, [pc, #72]	; (80027c0 <_sbrk+0x68>)
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	4b10      	ldr	r3, [pc, #64]	; (80027bc <_sbrk+0x64>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	429a      	cmp	r2, r3
 8002786:	d207      	bcs.n	8002798 <_sbrk+0x40>
 8002788:	f00d fafe 	bl	800fd88 <__errno>
 800278c:	4603      	mov	r3, r0
 800278e:	220c      	movs	r2, #12
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002796:	e009      	b.n	80027ac <_sbrk+0x54>
 8002798:	4b08      	ldr	r3, [pc, #32]	; (80027bc <_sbrk+0x64>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	4b07      	ldr	r3, [pc, #28]	; (80027bc <_sbrk+0x64>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	4a05      	ldr	r2, [pc, #20]	; (80027bc <_sbrk+0x64>)
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	24080000 	.word	0x24080000
 80027b8:	00000400 	.word	0x00000400
 80027bc:	24000614 	.word	0x24000614
 80027c0:	24000630 	.word	0x24000630

080027c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80027c8:	4b37      	ldr	r3, [pc, #220]	; (80028a8 <SystemInit+0xe4>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ce:	4a36      	ldr	r2, [pc, #216]	; (80028a8 <SystemInit+0xe4>)
 80027d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027d8:	4b34      	ldr	r3, [pc, #208]	; (80028ac <SystemInit+0xe8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 030f 	and.w	r3, r3, #15
 80027e0:	2b06      	cmp	r3, #6
 80027e2:	d807      	bhi.n	80027f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027e4:	4b31      	ldr	r3, [pc, #196]	; (80028ac <SystemInit+0xe8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f023 030f 	bic.w	r3, r3, #15
 80027ec:	4a2f      	ldr	r2, [pc, #188]	; (80028ac <SystemInit+0xe8>)
 80027ee:	f043 0307 	orr.w	r3, r3, #7
 80027f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80027f4:	4b2e      	ldr	r3, [pc, #184]	; (80028b0 <SystemInit+0xec>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a2d      	ldr	r2, [pc, #180]	; (80028b0 <SystemInit+0xec>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002800:	4b2b      	ldr	r3, [pc, #172]	; (80028b0 <SystemInit+0xec>)
 8002802:	2200      	movs	r2, #0
 8002804:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002806:	4b2a      	ldr	r3, [pc, #168]	; (80028b0 <SystemInit+0xec>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4929      	ldr	r1, [pc, #164]	; (80028b0 <SystemInit+0xec>)
 800280c:	4b29      	ldr	r3, [pc, #164]	; (80028b4 <SystemInit+0xf0>)
 800280e:	4013      	ands	r3, r2
 8002810:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002812:	4b26      	ldr	r3, [pc, #152]	; (80028ac <SystemInit+0xe8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800281e:	4b23      	ldr	r3, [pc, #140]	; (80028ac <SystemInit+0xe8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 030f 	bic.w	r3, r3, #15
 8002826:	4a21      	ldr	r2, [pc, #132]	; (80028ac <SystemInit+0xe8>)
 8002828:	f043 0307 	orr.w	r3, r3, #7
 800282c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800282e:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <SystemInit+0xec>)
 8002830:	2200      	movs	r2, #0
 8002832:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002834:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <SystemInit+0xec>)
 8002836:	2200      	movs	r2, #0
 8002838:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800283a:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <SystemInit+0xec>)
 800283c:	2200      	movs	r2, #0
 800283e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002840:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <SystemInit+0xec>)
 8002842:	4a1d      	ldr	r2, [pc, #116]	; (80028b8 <SystemInit+0xf4>)
 8002844:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002846:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <SystemInit+0xec>)
 8002848:	4a1c      	ldr	r2, [pc, #112]	; (80028bc <SystemInit+0xf8>)
 800284a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800284c:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <SystemInit+0xec>)
 800284e:	4a1c      	ldr	r2, [pc, #112]	; (80028c0 <SystemInit+0xfc>)
 8002850:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002852:	4b17      	ldr	r3, [pc, #92]	; (80028b0 <SystemInit+0xec>)
 8002854:	2200      	movs	r2, #0
 8002856:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002858:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <SystemInit+0xec>)
 800285a:	4a19      	ldr	r2, [pc, #100]	; (80028c0 <SystemInit+0xfc>)
 800285c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800285e:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <SystemInit+0xec>)
 8002860:	2200      	movs	r2, #0
 8002862:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002864:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <SystemInit+0xec>)
 8002866:	4a16      	ldr	r2, [pc, #88]	; (80028c0 <SystemInit+0xfc>)
 8002868:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800286a:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <SystemInit+0xec>)
 800286c:	2200      	movs	r2, #0
 800286e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002870:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <SystemInit+0xec>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a0e      	ldr	r2, [pc, #56]	; (80028b0 <SystemInit+0xec>)
 8002876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800287a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800287c:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <SystemInit+0xec>)
 800287e:	2200      	movs	r2, #0
 8002880:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <SystemInit+0x100>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <SystemInit+0x104>)
 8002888:	4013      	ands	r3, r2
 800288a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800288e:	d202      	bcs.n	8002896 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002890:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <SystemInit+0x108>)
 8002892:	2201      	movs	r2, #1
 8002894:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002896:	4b0e      	ldr	r3, [pc, #56]	; (80028d0 <SystemInit+0x10c>)
 8002898:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800289c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800289e:	bf00      	nop
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	e000ed00 	.word	0xe000ed00
 80028ac:	52002000 	.word	0x52002000
 80028b0:	58024400 	.word	0x58024400
 80028b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80028b8:	02020200 	.word	0x02020200
 80028bc:	01ff0000 	.word	0x01ff0000
 80028c0:	01010280 	.word	0x01010280
 80028c4:	5c001000 	.word	0x5c001000
 80028c8:	ffff0000 	.word	0xffff0000
 80028cc:	51008108 	.word	0x51008108
 80028d0:	52004000 	.word	0x52004000

080028d4 <Reset_Handler>:
 80028d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800290c <LoopFillZerobss+0xe>
 80028d8:	f7ff ff74 	bl	80027c4 <SystemInit>
 80028dc:	480c      	ldr	r0, [pc, #48]	; (8002910 <LoopFillZerobss+0x12>)
 80028de:	490d      	ldr	r1, [pc, #52]	; (8002914 <LoopFillZerobss+0x16>)
 80028e0:	4a0d      	ldr	r2, [pc, #52]	; (8002918 <LoopFillZerobss+0x1a>)
 80028e2:	2300      	movs	r3, #0
 80028e4:	e002      	b.n	80028ec <LoopCopyDataInit>

080028e6 <CopyDataInit>:
 80028e6:	58d4      	ldr	r4, [r2, r3]
 80028e8:	50c4      	str	r4, [r0, r3]
 80028ea:	3304      	adds	r3, #4

080028ec <LoopCopyDataInit>:
 80028ec:	18c4      	adds	r4, r0, r3
 80028ee:	428c      	cmp	r4, r1
 80028f0:	d3f9      	bcc.n	80028e6 <CopyDataInit>
 80028f2:	4a0a      	ldr	r2, [pc, #40]	; (800291c <LoopFillZerobss+0x1e>)
 80028f4:	4c0a      	ldr	r4, [pc, #40]	; (8002920 <LoopFillZerobss+0x22>)
 80028f6:	2300      	movs	r3, #0
 80028f8:	e001      	b.n	80028fe <LoopFillZerobss>

080028fa <FillZerobss>:
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	3204      	adds	r2, #4

080028fe <LoopFillZerobss>:
 80028fe:	42a2      	cmp	r2, r4
 8002900:	d3fb      	bcc.n	80028fa <FillZerobss>
 8002902:	f00d fa47 	bl	800fd94 <__libc_init_array>
 8002906:	f7fe fbb5 	bl	8001074 <main>
 800290a:	4770      	bx	lr
 800290c:	24080000 	.word	0x24080000
 8002910:	24000000 	.word	0x24000000
 8002914:	24000098 	.word	0x24000098
 8002918:	080100a4 	.word	0x080100a4
 800291c:	240000a0 	.word	0x240000a0
 8002920:	2400062c 	.word	0x2400062c

08002924 <ADC3_IRQHandler>:
 8002924:	e7fe      	b.n	8002924 <ADC3_IRQHandler>
	...

08002928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800292e:	2003      	movs	r0, #3
 8002930:	f001 fed6 	bl	80046e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002934:	f006 fcde 	bl	80092f4 <HAL_RCC_GetSysClockFreq>
 8002938:	4602      	mov	r2, r0
 800293a:	4b15      	ldr	r3, [pc, #84]	; (8002990 <HAL_Init+0x68>)
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	0a1b      	lsrs	r3, r3, #8
 8002940:	f003 030f 	and.w	r3, r3, #15
 8002944:	4913      	ldr	r1, [pc, #76]	; (8002994 <HAL_Init+0x6c>)
 8002946:	5ccb      	ldrb	r3, [r1, r3]
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	fa22 f303 	lsr.w	r3, r2, r3
 8002950:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002952:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <HAL_Init+0x68>)
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	4a0e      	ldr	r2, [pc, #56]	; (8002994 <HAL_Init+0x6c>)
 800295c:	5cd3      	ldrb	r3, [r2, r3]
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	fa22 f303 	lsr.w	r3, r2, r3
 8002968:	4a0b      	ldr	r2, [pc, #44]	; (8002998 <HAL_Init+0x70>)
 800296a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800296c:	4a0b      	ldr	r2, [pc, #44]	; (800299c <HAL_Init+0x74>)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002972:	200f      	movs	r0, #15
 8002974:	f000 f814 	bl	80029a0 <HAL_InitTick>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e002      	b.n	8002988 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002982:	f7ff fa8f 	bl	8001ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	58024400 	.word	0x58024400
 8002994:	08010054 	.word	0x08010054
 8002998:	24000028 	.word	0x24000028
 800299c:	24000024 	.word	0x24000024

080029a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80029a8:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <HAL_InitTick+0x60>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e021      	b.n	80029f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80029b4:	4b13      	ldr	r3, [pc, #76]	; (8002a04 <HAL_InitTick+0x64>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <HAL_InitTick+0x60>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	4619      	mov	r1, r3
 80029be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ca:	4618      	mov	r0, r3
 80029cc:	f001 febb 	bl	8004746 <HAL_SYSTICK_Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e00e      	b.n	80029f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b0f      	cmp	r3, #15
 80029de:	d80a      	bhi.n	80029f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029e0:	2200      	movs	r2, #0
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029e8:	f001 fe85 	bl	80046f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029ec:	4a06      	ldr	r2, [pc, #24]	; (8002a08 <HAL_InitTick+0x68>)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
 80029f4:	e000      	b.n	80029f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	24000030 	.word	0x24000030
 8002a04:	24000024 	.word	0x24000024
 8002a08:	2400002c 	.word	0x2400002c

08002a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <HAL_IncTick+0x20>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_IncTick+0x24>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	4a04      	ldr	r2, [pc, #16]	; (8002a30 <HAL_IncTick+0x24>)
 8002a1e:	6013      	str	r3, [r2, #0]
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	24000030 	.word	0x24000030
 8002a30:	24000618 	.word	0x24000618

08002a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  return uwTick;
 8002a38:	4b03      	ldr	r3, [pc, #12]	; (8002a48 <HAL_GetTick+0x14>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	24000618 	.word	0x24000618

08002a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a54:	f7ff ffee 	bl	8002a34 <HAL_GetTick>
 8002a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a64:	d005      	beq.n	8002a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a66:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <HAL_Delay+0x44>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4413      	add	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a72:	bf00      	nop
 8002a74:	f7ff ffde 	bl	8002a34 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d8f7      	bhi.n	8002a74 <HAL_Delay+0x28>
  {
  }
}
 8002a84:	bf00      	nop
 8002a86:	bf00      	nop
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	24000030 	.word	0x24000030

08002a94 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_SuspendTick+0x1c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a04      	ldr	r2, [pc, #16]	; (8002ab0 <HAL_SuspendTick+0x1c>)
 8002a9e:	f023 0302 	bic.w	r3, r3, #2
 8002aa2:	6013      	str	r3, [r2, #0]
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	e000e010 	.word	0xe000e010

08002ab4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002ab8:	4b03      	ldr	r3, [pc, #12]	; (8002ac8 <HAL_GetREVID+0x14>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	0c1b      	lsrs	r3, r3, #16
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	5c001000 	.word	0x5c001000

08002acc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	609a      	str	r2, [r3, #8]
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	3360      	adds	r3, #96	; 0x60
 8002b46:	461a      	mov	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	430b      	orrs	r3, r1
 8002b62:	431a      	orrs	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002b68:	bf00      	nop
 8002b6a:	371c      	adds	r7, #28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f003 031f 	and.w	r3, r3, #31
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	fa01 f303 	lsl.w	r3, r1, r3
 8002b94:	431a      	orrs	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	611a      	str	r2, [r3, #16]
}
 8002b9a:	bf00      	nop
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b087      	sub	sp, #28
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	60f8      	str	r0, [r7, #12]
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	3360      	adds	r3, #96	; 0x60
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	601a      	str	r2, [r3, #0]
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	371c      	adds	r7, #28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b087      	sub	sp, #28
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	3330      	adds	r3, #48	; 0x30
 8002c12:	461a      	mov	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	0a1b      	lsrs	r3, r3, #8
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	4413      	add	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f003 031f 	and.w	r3, r3, #31
 8002c2c:	211f      	movs	r1, #31
 8002c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c32:	43db      	mvns	r3, r3
 8002c34:	401a      	ands	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	0e9b      	lsrs	r3, r3, #26
 8002c3a:	f003 011f 	and.w	r1, r3, #31
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f003 031f 	and.w	r3, r3, #31
 8002c44:	fa01 f303 	lsl.w	r3, r1, r3
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c4e:	bf00      	nop
 8002c50:	371c      	adds	r7, #28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f023 0203 	bic.w	r2, r3, #3
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	60da      	str	r2, [r3, #12]
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	3314      	adds	r3, #20
 8002c90:	461a      	mov	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	0e5b      	lsrs	r3, r3, #25
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	4413      	add	r3, r2
 8002c9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	0d1b      	lsrs	r3, r3, #20
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	2107      	movs	r1, #7
 8002cae:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	401a      	ands	r2, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	0d1b      	lsrs	r3, r3, #20
 8002cba:	f003 031f 	and.w	r3, r3, #31
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002cca:	bf00      	nop
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	401a      	ands	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f003 0318 	and.w	r3, r3, #24
 8002cfa:	4908      	ldr	r1, [pc, #32]	; (8002d1c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002cfc:	40d9      	lsrs	r1, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	400b      	ands	r3, r1
 8002d02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d06:	431a      	orrs	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	000fffff 	.word	0x000fffff

08002d20 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 031f 	and.w	r3, r3, #31
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6093      	str	r3, [r2, #8]
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	5fffffc0 	.word	0x5fffffc0

08002d60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d74:	d101      	bne.n	8002d7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <LL_ADC_EnableInternalRegulator+0x24>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	6fffffc0 	.word	0x6fffffc0

08002db0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dc4:	d101      	bne.n	8002dca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <LL_ADC_Enable+0x24>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	f043 0201 	orr.w	r2, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	7fffffc0 	.word	0x7fffffc0

08002e00 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <LL_ADC_Disable+0x24>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	f043 0202 	orr.w	r2, r3, #2
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	7fffffc0 	.word	0x7fffffc0

08002e28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <LL_ADC_IsEnabled+0x18>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <LL_ADC_IsEnabled+0x1a>
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d101      	bne.n	8002e66 <LL_ADC_IsDisableOngoing+0x18>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <LL_ADC_IsDisableOngoing+0x1a>
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <LL_ADC_REG_StartConversion+0x24>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	f043 0204 	orr.w	r2, r3, #4
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	7fffffc0 	.word	0x7fffffc0

08002e9c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <LL_ADC_REG_StopConversion+0x24>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	f043 0210 	orr.w	r2, r3, #16
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	7fffffc0 	.word	0x7fffffc0

08002ec4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d101      	bne.n	8002edc <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <LL_ADC_INJ_StopConversion+0x24>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	f043 0220 	orr.w	r2, r3, #32
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	7fffffc0 	.word	0x7fffffc0

08002f14 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d101      	bne.n	8002f2c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f3c:	b590      	push	{r4, r7, lr}
 8002f3e:	b089      	sub	sp, #36	; 0x24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e18f      	b.n	8003276 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d109      	bne.n	8002f78 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7fe ffb7 	bl	8001ed8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff feef 	bl	8002d60 <LL_ADC_IsDeepPowerDownEnabled>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d004      	beq.n	8002f92 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fed5 	bl	8002d3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff ff0a 	bl	8002db0 <LL_ADC_IsInternalRegulatorEnabled>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d114      	bne.n	8002fcc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff feee 	bl	8002d88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fac:	4b87      	ldr	r3, [pc, #540]	; (80031cc <HAL_ADC_Init+0x290>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	099b      	lsrs	r3, r3, #6
 8002fb2:	4a87      	ldr	r2, [pc, #540]	; (80031d0 <HAL_ADC_Init+0x294>)
 8002fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb8:	099b      	lsrs	r3, r3, #6
 8002fba:	3301      	adds	r3, #1
 8002fbc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fbe:	e002      	b.n	8002fc6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f9      	bne.n	8002fc0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff feed 	bl	8002db0 <LL_ADC_IsInternalRegulatorEnabled>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10d      	bne.n	8002ff8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe0:	f043 0210 	orr.w	r2, r3, #16
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fec:	f043 0201 	orr.w	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff ff61 	bl	8002ec4 <LL_ADC_REG_IsConversionOngoing>
 8003002:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003008:	f003 0310 	and.w	r3, r3, #16
 800300c:	2b00      	cmp	r3, #0
 800300e:	f040 8129 	bne.w	8003264 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b00      	cmp	r3, #0
 8003016:	f040 8125 	bne.w	8003264 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003022:	f043 0202 	orr.w	r2, r3, #2
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fefa 	bl	8002e28 <LL_ADC_IsEnabled>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d136      	bne.n	80030a8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a65      	ldr	r2, [pc, #404]	; (80031d4 <HAL_ADC_Init+0x298>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d004      	beq.n	800304e <HAL_ADC_Init+0x112>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a63      	ldr	r2, [pc, #396]	; (80031d8 <HAL_ADC_Init+0x29c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d10e      	bne.n	800306c <HAL_ADC_Init+0x130>
 800304e:	4861      	ldr	r0, [pc, #388]	; (80031d4 <HAL_ADC_Init+0x298>)
 8003050:	f7ff feea 	bl	8002e28 <LL_ADC_IsEnabled>
 8003054:	4604      	mov	r4, r0
 8003056:	4860      	ldr	r0, [pc, #384]	; (80031d8 <HAL_ADC_Init+0x29c>)
 8003058:	f7ff fee6 	bl	8002e28 <LL_ADC_IsEnabled>
 800305c:	4603      	mov	r3, r0
 800305e:	4323      	orrs	r3, r4
 8003060:	2b00      	cmp	r3, #0
 8003062:	bf0c      	ite	eq
 8003064:	2301      	moveq	r3, #1
 8003066:	2300      	movne	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	e008      	b.n	800307e <HAL_ADC_Init+0x142>
 800306c:	485b      	ldr	r0, [pc, #364]	; (80031dc <HAL_ADC_Init+0x2a0>)
 800306e:	f7ff fedb 	bl	8002e28 <LL_ADC_IsEnabled>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	bf0c      	ite	eq
 8003078:	2301      	moveq	r3, #1
 800307a:	2300      	movne	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d012      	beq.n	80030a8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a53      	ldr	r2, [pc, #332]	; (80031d4 <HAL_ADC_Init+0x298>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d004      	beq.n	8003096 <HAL_ADC_Init+0x15a>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a51      	ldr	r2, [pc, #324]	; (80031d8 <HAL_ADC_Init+0x29c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d101      	bne.n	800309a <HAL_ADC_Init+0x15e>
 8003096:	4a52      	ldr	r2, [pc, #328]	; (80031e0 <HAL_ADC_Init+0x2a4>)
 8003098:	e000      	b.n	800309c <HAL_ADC_Init+0x160>
 800309a:	4a52      	ldr	r2, [pc, #328]	; (80031e4 <HAL_ADC_Init+0x2a8>)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4619      	mov	r1, r3
 80030a2:	4610      	mov	r0, r2
 80030a4:	f7ff fd12 	bl	8002acc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80030a8:	f7ff fd04 	bl	8002ab4 <HAL_GetREVID>
 80030ac:	4603      	mov	r3, r0
 80030ae:	f241 0203 	movw	r2, #4099	; 0x1003
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d914      	bls.n	80030e0 <HAL_ADC_Init+0x1a4>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	2b10      	cmp	r3, #16
 80030bc:	d110      	bne.n	80030e0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	7d5b      	ldrb	r3, [r3, #21]
 80030c2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030c8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80030ce:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	7f1b      	ldrb	r3, [r3, #28]
 80030d4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80030d6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030d8:	f043 030c 	orr.w	r3, r3, #12
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	e00d      	b.n	80030fc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	7d5b      	ldrb	r3, [r3, #21]
 80030e4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030ea:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80030f0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	7f1b      	ldrb	r3, [r3, #28]
 80030f6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	7f1b      	ldrb	r3, [r3, #28]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d106      	bne.n	8003112 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	3b01      	subs	r3, #1
 800310a:	045b      	lsls	r3, r3, #17
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4313      	orrs	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003126:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	4b2c      	ldr	r3, [pc, #176]	; (80031e8 <HAL_ADC_Init+0x2ac>)
 8003136:	4013      	ands	r3, r2
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6812      	ldr	r2, [r2, #0]
 800313c:	69b9      	ldr	r1, [r7, #24]
 800313e:	430b      	orrs	r3, r1
 8003140:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff febc 	bl	8002ec4 <LL_ADC_REG_IsConversionOngoing>
 800314c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fede 	bl	8002f14 <LL_ADC_INJ_IsConversionOngoing>
 8003158:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d15f      	bne.n	8003220 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d15c      	bne.n	8003220 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	7d1b      	ldrb	r3, [r3, #20]
 800316a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003170:	4313      	orrs	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	4b1c      	ldr	r3, [pc, #112]	; (80031ec <HAL_ADC_Init+0x2b0>)
 800317c:	4013      	ands	r3, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6812      	ldr	r2, [r2, #0]
 8003182:	69b9      	ldr	r1, [r7, #24]
 8003184:	430b      	orrs	r3, r1
 8003186:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800318e:	2b01      	cmp	r3, #1
 8003190:	d130      	bne.n	80031f4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	691a      	ldr	r2, [r3, #16]
 800319e:	4b14      	ldr	r3, [pc, #80]	; (80031f0 <HAL_ADC_Init+0x2b4>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031a6:	3a01      	subs	r2, #1
 80031a8:	0411      	lsls	r1, r2, #16
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031ae:	4311      	orrs	r1, r2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80031b4:	4311      	orrs	r1, r2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80031ba:	430a      	orrs	r2, r1
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0201 	orr.w	r2, r2, #1
 80031c6:	611a      	str	r2, [r3, #16]
 80031c8:	e01c      	b.n	8003204 <HAL_ADC_Init+0x2c8>
 80031ca:	bf00      	nop
 80031cc:	24000024 	.word	0x24000024
 80031d0:	053e2d63 	.word	0x053e2d63
 80031d4:	40022000 	.word	0x40022000
 80031d8:	40022100 	.word	0x40022100
 80031dc:	58026000 	.word	0x58026000
 80031e0:	40022300 	.word	0x40022300
 80031e4:	58026300 	.word	0x58026300
 80031e8:	fff0c003 	.word	0xfff0c003
 80031ec:	ffffbffc 	.word	0xffffbffc
 80031f0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0201 	bic.w	r2, r2, #1
 8003202:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 feea 	bl	8003ff4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d10c      	bne.n	8003242 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f023 010f 	bic.w	r1, r3, #15
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	1e5a      	subs	r2, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	631a      	str	r2, [r3, #48]	; 0x30
 8003240:	e007      	b.n	8003252 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 020f 	bic.w	r2, r2, #15
 8003250:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003256:	f023 0303 	bic.w	r3, r3, #3
 800325a:	f043 0201 	orr.w	r2, r3, #1
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	655a      	str	r2, [r3, #84]	; 0x54
 8003262:	e007      	b.n	8003274 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003268:	f043 0210 	orr.w	r2, r3, #16
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003274:	7ffb      	ldrb	r3, [r7, #31]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3724      	adds	r7, #36	; 0x24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd90      	pop	{r4, r7, pc}
 800327e:	bf00      	nop

08003280 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a55      	ldr	r2, [pc, #340]	; (80033e8 <HAL_ADC_Start_DMA+0x168>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d004      	beq.n	80032a0 <HAL_ADC_Start_DMA+0x20>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a54      	ldr	r2, [pc, #336]	; (80033ec <HAL_ADC_Start_DMA+0x16c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d101      	bne.n	80032a4 <HAL_ADC_Start_DMA+0x24>
 80032a0:	4b53      	ldr	r3, [pc, #332]	; (80033f0 <HAL_ADC_Start_DMA+0x170>)
 80032a2:	e000      	b.n	80032a6 <HAL_ADC_Start_DMA+0x26>
 80032a4:	4b53      	ldr	r3, [pc, #332]	; (80033f4 <HAL_ADC_Start_DMA+0x174>)
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fd3a 	bl	8002d20 <LL_ADC_GetMultimode>
 80032ac:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff fe06 	bl	8002ec4 <LL_ADC_REG_IsConversionOngoing>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f040 808c 	bne.w	80033d8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_ADC_Start_DMA+0x4e>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e087      	b.n	80033de <HAL_ADC_Start_DMA+0x15e>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b05      	cmp	r3, #5
 80032e0:	d002      	beq.n	80032e8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	2b09      	cmp	r3, #9
 80032e6:	d170      	bne.n	80033ca <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 fd05 	bl	8003cf8 <ADC_Enable>
 80032ee:	4603      	mov	r3, r0
 80032f0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80032f2:	7dfb      	ldrb	r3, [r7, #23]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d163      	bne.n	80033c0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032fc:	4b3e      	ldr	r3, [pc, #248]	; (80033f8 <HAL_ADC_Start_DMA+0x178>)
 80032fe:	4013      	ands	r3, r2
 8003300:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a37      	ldr	r2, [pc, #220]	; (80033ec <HAL_ADC_Start_DMA+0x16c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d002      	beq.n	8003318 <HAL_ADC_Start_DMA+0x98>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	e000      	b.n	800331a <HAL_ADC_Start_DMA+0x9a>
 8003318:	4b33      	ldr	r3, [pc, #204]	; (80033e8 <HAL_ADC_Start_DMA+0x168>)
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	4293      	cmp	r3, r2
 8003320:	d002      	beq.n	8003328 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d105      	bne.n	8003334 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d006      	beq.n	800334e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003344:	f023 0206 	bic.w	r2, r3, #6
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	659a      	str	r2, [r3, #88]	; 0x58
 800334c:	e002      	b.n	8003354 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003358:	4a28      	ldr	r2, [pc, #160]	; (80033fc <HAL_ADC_Start_DMA+0x17c>)
 800335a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003360:	4a27      	ldr	r2, [pc, #156]	; (8003400 <HAL_ADC_Start_DMA+0x180>)
 8003362:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003368:	4a26      	ldr	r2, [pc, #152]	; (8003404 <HAL_ADC_Start_DMA+0x184>)
 800336a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	221c      	movs	r2, #28
 8003372:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0210 	orr.w	r2, r2, #16
 800338a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	4619      	mov	r1, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f7ff fc5f 	bl	8002c5a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	3340      	adds	r3, #64	; 0x40
 80033a6:	4619      	mov	r1, r3
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f001 fefc 	bl	80051a8 <HAL_DMA_Start_IT>
 80033b0:	4603      	mov	r3, r0
 80033b2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff fd5b 	bl	8002e74 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80033be:	e00d      	b.n	80033dc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80033c8:	e008      	b.n	80033dc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80033d6:	e001      	b.n	80033dc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033d8:	2302      	movs	r3, #2
 80033da:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80033dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40022000 	.word	0x40022000
 80033ec:	40022100 	.word	0x40022100
 80033f0:	40022300 	.word	0x40022300
 80033f4:	58026300 	.word	0x58026300
 80033f8:	fffff0fe 	.word	0xfffff0fe
 80033fc:	08003ecb 	.word	0x08003ecb
 8003400:	08003fa3 	.word	0x08003fa3
 8003404:	08003fbf 	.word	0x08003fbf

08003408 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_ADC_Stop_DMA+0x16>
 800341a:	2302      	movs	r3, #2
 800341c:	e04f      	b.n	80034be <HAL_ADC_Stop_DMA+0xb6>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003426:	2103      	movs	r1, #3
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 fba9 	bl	8003b80 <ADC_ConversionStop>
 800342e:	4603      	mov	r3, r0
 8003430:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003432:	7bfb      	ldrb	r3, [r7, #15]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d13d      	bne.n	80034b4 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0203 	bic.w	r2, r2, #3
 8003446:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d10f      	bne.n	8003476 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345a:	4618      	mov	r0, r3
 800345c:	f002 f90e 	bl	800567c <HAL_DMA_Abort>
 8003460:	4603      	mov	r3, r0
 8003462:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d005      	beq.n	8003476 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0210 	bic.w	r2, r2, #16
 8003484:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003486:	7bfb      	ldrb	r3, [r7, #15]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d105      	bne.n	8003498 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fcbd 	bl	8003e0c <ADC_Disable>
 8003492:	4603      	mov	r3, r0
 8003494:	73fb      	strb	r3, [r7, #15]
 8003496:	e002      	b.n	800349e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fcb7 	bl	8003e0c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d107      	bne.n	80034b4 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034a8:	4b07      	ldr	r3, [pc, #28]	; (80034c8 <HAL_ADC_Stop_DMA+0xc0>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	f043 0201 	orr.w	r2, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	ffffeefe 	.word	0xffffeefe

080034cc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80034e0:	b590      	push	{r4, r7, lr}
 80034e2:	b0a1      	sub	sp, #132	; 0x84
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4a9d      	ldr	r2, [pc, #628]	; (8003770 <HAL_ADC_ConfigChannel+0x290>)
 80034fa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <HAL_ADC_ConfigChannel+0x2a>
 8003506:	2302      	movs	r3, #2
 8003508:	e321      	b.n	8003b4e <HAL_ADC_ConfigChannel+0x66e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff fcd4 	bl	8002ec4 <LL_ADC_REG_IsConversionOngoing>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	f040 8306 	bne.w	8003b30 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800352c:	2b00      	cmp	r3, #0
 800352e:	d108      	bne.n	8003542 <HAL_ADC_ConfigChannel+0x62>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	0e9b      	lsrs	r3, r3, #26
 8003536:	f003 031f 	and.w	r3, r3, #31
 800353a:	2201      	movs	r2, #1
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	e016      	b.n	8003570 <HAL_ADC_ConfigChannel+0x90>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800354a:	fa93 f3a3 	rbit	r3, r3
 800354e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003550:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003552:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003554:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800355a:	2320      	movs	r3, #32
 800355c:	e003      	b.n	8003566 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800355e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003560:	fab3 f383 	clz	r3, r3
 8003564:	b2db      	uxtb	r3, r3
 8003566:	f003 031f 	and.w	r3, r3, #31
 800356a:	2201      	movs	r2, #1
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6812      	ldr	r2, [r2, #0]
 8003574:	69d1      	ldr	r1, [r2, #28]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	430b      	orrs	r3, r1
 800357c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	6859      	ldr	r1, [r3, #4]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	f7ff fb39 	bl	8002c02 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff fc95 	bl	8002ec4 <LL_ADC_REG_IsConversionOngoing>
 800359a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fcb7 	bl	8002f14 <LL_ADC_INJ_IsConversionOngoing>
 80035a6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f040 80b3 	bne.w	8003716 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f040 80af 	bne.w	8003716 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6818      	ldr	r0, [r3, #0]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	6819      	ldr	r1, [r3, #0]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	461a      	mov	r2, r3
 80035c6:	f7ff fb5b 	bl	8002c80 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80035ca:	4b6a      	ldr	r3, [pc, #424]	; (8003774 <HAL_ADC_ConfigChannel+0x294>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80035d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035d6:	d10b      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x110>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	089b      	lsrs	r3, r3, #2
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	e01d      	b.n	800362c <HAL_ADC_ConfigChannel+0x14c>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10b      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x136>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	695a      	ldr	r2, [r3, #20]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	089b      	lsrs	r3, r3, #2
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	e00a      	b.n	800362c <HAL_ADC_ConfigChannel+0x14c>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	695a      	ldr	r2, [r3, #20]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	089b      	lsrs	r3, r3, #2
 8003622:	f003 0304 	and.w	r3, r3, #4
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	2b04      	cmp	r3, #4
 8003634:	d027      	beq.n	8003686 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	6919      	ldr	r1, [r3, #16]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003644:	f7ff fa76 	bl	8002b34 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	6919      	ldr	r1, [r3, #16]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	7e5b      	ldrb	r3, [r3, #25]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d102      	bne.n	800365e <HAL_ADC_ConfigChannel+0x17e>
 8003658:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800365c:	e000      	b.n	8003660 <HAL_ADC_ConfigChannel+0x180>
 800365e:	2300      	movs	r3, #0
 8003660:	461a      	mov	r2, r3
 8003662:	f7ff faa0 	bl	8002ba6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6818      	ldr	r0, [r3, #0]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	6919      	ldr	r1, [r3, #16]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	7e1b      	ldrb	r3, [r3, #24]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d102      	bne.n	800367c <HAL_ADC_ConfigChannel+0x19c>
 8003676:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800367a:	e000      	b.n	800367e <HAL_ADC_ConfigChannel+0x19e>
 800367c:	2300      	movs	r3, #0
 800367e:	461a      	mov	r2, r3
 8003680:	f7ff fa78 	bl	8002b74 <LL_ADC_SetDataRightShift>
 8003684:	e047      	b.n	8003716 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800368c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	069b      	lsls	r3, r3, #26
 8003696:	429a      	cmp	r2, r3
 8003698:	d107      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036a8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	069b      	lsls	r3, r3, #26
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d107      	bne.n	80036ce <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036cc:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	069b      	lsls	r3, r3, #26
 80036de:	429a      	cmp	r2, r3
 80036e0:	d107      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036f0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	069b      	lsls	r3, r3, #26
 8003702:	429a      	cmp	r2, r3
 8003704:	d107      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003714:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff fb84 	bl	8002e28 <LL_ADC_IsEnabled>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	f040 820d 	bne.w	8003b42 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	6819      	ldr	r1, [r3, #0]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	461a      	mov	r2, r3
 8003736:	f7ff facf 	bl	8002cd8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	4a0c      	ldr	r2, [pc, #48]	; (8003770 <HAL_ADC_ConfigChannel+0x290>)
 8003740:	4293      	cmp	r3, r2
 8003742:	f040 8133 	bne.w	80039ac <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003752:	2b00      	cmp	r3, #0
 8003754:	d110      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x298>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	0e9b      	lsrs	r3, r3, #26
 800375c:	3301      	adds	r3, #1
 800375e:	f003 031f 	and.w	r3, r3, #31
 8003762:	2b09      	cmp	r3, #9
 8003764:	bf94      	ite	ls
 8003766:	2301      	movls	r3, #1
 8003768:	2300      	movhi	r3, #0
 800376a:	b2db      	uxtb	r3, r3
 800376c:	e01e      	b.n	80037ac <HAL_ADC_ConfigChannel+0x2cc>
 800376e:	bf00      	nop
 8003770:	47ff0000 	.word	0x47ff0000
 8003774:	5c001000 	.word	0x5c001000
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003780:	fa93 f3a3 	rbit	r3, r3
 8003784:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003788:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800378a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003790:	2320      	movs	r3, #32
 8003792:	e003      	b.n	800379c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003796:	fab3 f383 	clz	r3, r3
 800379a:	b2db      	uxtb	r3, r3
 800379c:	3301      	adds	r3, #1
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	2b09      	cmp	r3, #9
 80037a4:	bf94      	ite	ls
 80037a6:	2301      	movls	r3, #1
 80037a8:	2300      	movhi	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d079      	beq.n	80038a4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d107      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x2ec>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	0e9b      	lsrs	r3, r3, #26
 80037c2:	3301      	adds	r3, #1
 80037c4:	069b      	lsls	r3, r3, #26
 80037c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037ca:	e015      	b.n	80037f8 <HAL_ADC_ConfigChannel+0x318>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037d4:	fa93 f3a3 	rbit	r3, r3
 80037d8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80037da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037dc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80037de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80037e4:	2320      	movs	r3, #32
 80037e6:	e003      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80037e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ea:	fab3 f383 	clz	r3, r3
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	3301      	adds	r3, #1
 80037f2:	069b      	lsls	r3, r3, #26
 80037f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003800:	2b00      	cmp	r3, #0
 8003802:	d109      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x338>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	0e9b      	lsrs	r3, r3, #26
 800380a:	3301      	adds	r3, #1
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	2101      	movs	r1, #1
 8003812:	fa01 f303 	lsl.w	r3, r1, r3
 8003816:	e017      	b.n	8003848 <HAL_ADC_ConfigChannel+0x368>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003820:	fa93 f3a3 	rbit	r3, r3
 8003824:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003828:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800382a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003830:	2320      	movs	r3, #32
 8003832:	e003      	b.n	800383c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003836:	fab3 f383 	clz	r3, r3
 800383a:	b2db      	uxtb	r3, r3
 800383c:	3301      	adds	r3, #1
 800383e:	f003 031f 	and.w	r3, r3, #31
 8003842:	2101      	movs	r1, #1
 8003844:	fa01 f303 	lsl.w	r3, r1, r3
 8003848:	ea42 0103 	orr.w	r1, r2, r3
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10a      	bne.n	800386e <HAL_ADC_ConfigChannel+0x38e>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	0e9b      	lsrs	r3, r3, #26
 800385e:	3301      	adds	r3, #1
 8003860:	f003 021f 	and.w	r2, r3, #31
 8003864:	4613      	mov	r3, r2
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	4413      	add	r3, r2
 800386a:	051b      	lsls	r3, r3, #20
 800386c:	e018      	b.n	80038a0 <HAL_ADC_ConfigChannel+0x3c0>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003876:	fa93 f3a3 	rbit	r3, r3
 800387a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003886:	2320      	movs	r3, #32
 8003888:	e003      	b.n	8003892 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800388a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388c:	fab3 f383 	clz	r3, r3
 8003890:	b2db      	uxtb	r3, r3
 8003892:	3301      	adds	r3, #1
 8003894:	f003 021f 	and.w	r2, r3, #31
 8003898:	4613      	mov	r3, r2
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	4413      	add	r3, r2
 800389e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038a0:	430b      	orrs	r3, r1
 80038a2:	e07e      	b.n	80039a2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d107      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x3e0>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	0e9b      	lsrs	r3, r3, #26
 80038b6:	3301      	adds	r3, #1
 80038b8:	069b      	lsls	r3, r3, #26
 80038ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038be:	e015      	b.n	80038ec <HAL_ADC_ConfigChannel+0x40c>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	fa93 f3a3 	rbit	r3, r3
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80038d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80038d8:	2320      	movs	r3, #32
 80038da:	e003      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80038dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038de:	fab3 f383 	clz	r3, r3
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	3301      	adds	r3, #1
 80038e6:	069b      	lsls	r3, r3, #26
 80038e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d109      	bne.n	800390c <HAL_ADC_ConfigChannel+0x42c>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	0e9b      	lsrs	r3, r3, #26
 80038fe:	3301      	adds	r3, #1
 8003900:	f003 031f 	and.w	r3, r3, #31
 8003904:	2101      	movs	r1, #1
 8003906:	fa01 f303 	lsl.w	r3, r1, r3
 800390a:	e017      	b.n	800393c <HAL_ADC_ConfigChannel+0x45c>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	fa93 f3a3 	rbit	r3, r3
 8003918:	61bb      	str	r3, [r7, #24]
  return result;
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003924:	2320      	movs	r3, #32
 8003926:	e003      	b.n	8003930 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	fab3 f383 	clz	r3, r3
 800392e:	b2db      	uxtb	r3, r3
 8003930:	3301      	adds	r3, #1
 8003932:	f003 031f 	and.w	r3, r3, #31
 8003936:	2101      	movs	r1, #1
 8003938:	fa01 f303 	lsl.w	r3, r1, r3
 800393c:	ea42 0103 	orr.w	r1, r2, r3
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10d      	bne.n	8003968 <HAL_ADC_ConfigChannel+0x488>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	0e9b      	lsrs	r3, r3, #26
 8003952:	3301      	adds	r3, #1
 8003954:	f003 021f 	and.w	r2, r3, #31
 8003958:	4613      	mov	r3, r2
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	4413      	add	r3, r2
 800395e:	3b1e      	subs	r3, #30
 8003960:	051b      	lsls	r3, r3, #20
 8003962:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003966:	e01b      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x4c0>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	fa93 f3a3 	rbit	r3, r3
 8003974:	60fb      	str	r3, [r7, #12]
  return result;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003980:	2320      	movs	r3, #32
 8003982:	e003      	b.n	800398c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	fab3 f383 	clz	r3, r3
 800398a:	b2db      	uxtb	r3, r3
 800398c:	3301      	adds	r3, #1
 800398e:	f003 021f 	and.w	r2, r3, #31
 8003992:	4613      	mov	r3, r2
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	4413      	add	r3, r2
 8003998:	3b1e      	subs	r3, #30
 800399a:	051b      	lsls	r3, r3, #20
 800399c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039a0:	430b      	orrs	r3, r1
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	6892      	ldr	r2, [r2, #8]
 80039a6:	4619      	mov	r1, r3
 80039a8:	f7ff f96a 	bl	8002c80 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f280 80c6 	bge.w	8003b42 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a67      	ldr	r2, [pc, #412]	; (8003b58 <HAL_ADC_ConfigChannel+0x678>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d004      	beq.n	80039ca <HAL_ADC_ConfigChannel+0x4ea>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a65      	ldr	r2, [pc, #404]	; (8003b5c <HAL_ADC_ConfigChannel+0x67c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d101      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x4ee>
 80039ca:	4b65      	ldr	r3, [pc, #404]	; (8003b60 <HAL_ADC_ConfigChannel+0x680>)
 80039cc:	e000      	b.n	80039d0 <HAL_ADC_ConfigChannel+0x4f0>
 80039ce:	4b65      	ldr	r3, [pc, #404]	; (8003b64 <HAL_ADC_ConfigChannel+0x684>)
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff f8a1 	bl	8002b18 <LL_ADC_GetCommonPathInternalCh>
 80039d6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a5e      	ldr	r2, [pc, #376]	; (8003b58 <HAL_ADC_ConfigChannel+0x678>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d004      	beq.n	80039ec <HAL_ADC_ConfigChannel+0x50c>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a5d      	ldr	r2, [pc, #372]	; (8003b5c <HAL_ADC_ConfigChannel+0x67c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d10e      	bne.n	8003a0a <HAL_ADC_ConfigChannel+0x52a>
 80039ec:	485a      	ldr	r0, [pc, #360]	; (8003b58 <HAL_ADC_ConfigChannel+0x678>)
 80039ee:	f7ff fa1b 	bl	8002e28 <LL_ADC_IsEnabled>
 80039f2:	4604      	mov	r4, r0
 80039f4:	4859      	ldr	r0, [pc, #356]	; (8003b5c <HAL_ADC_ConfigChannel+0x67c>)
 80039f6:	f7ff fa17 	bl	8002e28 <LL_ADC_IsEnabled>
 80039fa:	4603      	mov	r3, r0
 80039fc:	4323      	orrs	r3, r4
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	bf0c      	ite	eq
 8003a02:	2301      	moveq	r3, #1
 8003a04:	2300      	movne	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	e008      	b.n	8003a1c <HAL_ADC_ConfigChannel+0x53c>
 8003a0a:	4857      	ldr	r0, [pc, #348]	; (8003b68 <HAL_ADC_ConfigChannel+0x688>)
 8003a0c:	f7ff fa0c 	bl	8002e28 <LL_ADC_IsEnabled>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	bf0c      	ite	eq
 8003a16:	2301      	moveq	r3, #1
 8003a18:	2300      	movne	r3, #0
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d07d      	beq.n	8003b1c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a51      	ldr	r2, [pc, #324]	; (8003b6c <HAL_ADC_ConfigChannel+0x68c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d130      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0x5ac>
 8003a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d12b      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a4b      	ldr	r2, [pc, #300]	; (8003b68 <HAL_ADC_ConfigChannel+0x688>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	f040 8081 	bne.w	8003b42 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a44      	ldr	r2, [pc, #272]	; (8003b58 <HAL_ADC_ConfigChannel+0x678>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d004      	beq.n	8003a54 <HAL_ADC_ConfigChannel+0x574>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a43      	ldr	r2, [pc, #268]	; (8003b5c <HAL_ADC_ConfigChannel+0x67c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d101      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x578>
 8003a54:	4a42      	ldr	r2, [pc, #264]	; (8003b60 <HAL_ADC_ConfigChannel+0x680>)
 8003a56:	e000      	b.n	8003a5a <HAL_ADC_ConfigChannel+0x57a>
 8003a58:	4a42      	ldr	r2, [pc, #264]	; (8003b64 <HAL_ADC_ConfigChannel+0x684>)
 8003a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a60:	4619      	mov	r1, r3
 8003a62:	4610      	mov	r0, r2
 8003a64:	f7ff f845 	bl	8002af2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a68:	4b41      	ldr	r3, [pc, #260]	; (8003b70 <HAL_ADC_ConfigChannel+0x690>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	099b      	lsrs	r3, r3, #6
 8003a6e:	4a41      	ldr	r2, [pc, #260]	; (8003b74 <HAL_ADC_ConfigChannel+0x694>)
 8003a70:	fba2 2303 	umull	r2, r3, r2, r3
 8003a74:	099b      	lsrs	r3, r3, #6
 8003a76:	3301      	adds	r3, #1
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003a7c:	e002      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	3b01      	subs	r3, #1
 8003a82:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f9      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a8a:	e05a      	b.n	8003b42 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a39      	ldr	r2, [pc, #228]	; (8003b78 <HAL_ADC_ConfigChannel+0x698>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d11e      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x5f4>
 8003a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d119      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a30      	ldr	r2, [pc, #192]	; (8003b68 <HAL_ADC_ConfigChannel+0x688>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d14b      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a2a      	ldr	r2, [pc, #168]	; (8003b58 <HAL_ADC_ConfigChannel+0x678>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d004      	beq.n	8003abe <HAL_ADC_ConfigChannel+0x5de>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a28      	ldr	r2, [pc, #160]	; (8003b5c <HAL_ADC_ConfigChannel+0x67c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d101      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x5e2>
 8003abe:	4a28      	ldr	r2, [pc, #160]	; (8003b60 <HAL_ADC_ConfigChannel+0x680>)
 8003ac0:	e000      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x5e4>
 8003ac2:	4a28      	ldr	r2, [pc, #160]	; (8003b64 <HAL_ADC_ConfigChannel+0x684>)
 8003ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aca:	4619      	mov	r1, r3
 8003acc:	4610      	mov	r0, r2
 8003ace:	f7ff f810 	bl	8002af2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ad2:	e036      	b.n	8003b42 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a28      	ldr	r2, [pc, #160]	; (8003b7c <HAL_ADC_ConfigChannel+0x69c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d131      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x662>
 8003ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d12c      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a1e      	ldr	r2, [pc, #120]	; (8003b68 <HAL_ADC_ConfigChannel+0x688>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d127      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a18      	ldr	r2, [pc, #96]	; (8003b58 <HAL_ADC_ConfigChannel+0x678>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d004      	beq.n	8003b06 <HAL_ADC_ConfigChannel+0x626>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a16      	ldr	r2, [pc, #88]	; (8003b5c <HAL_ADC_ConfigChannel+0x67c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d101      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x62a>
 8003b06:	4a16      	ldr	r2, [pc, #88]	; (8003b60 <HAL_ADC_ConfigChannel+0x680>)
 8003b08:	e000      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x62c>
 8003b0a:	4a16      	ldr	r2, [pc, #88]	; (8003b64 <HAL_ADC_ConfigChannel+0x684>)
 8003b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b12:	4619      	mov	r1, r3
 8003b14:	4610      	mov	r0, r2
 8003b16:	f7fe ffec 	bl	8002af2 <LL_ADC_SetCommonPathInternalCh>
 8003b1a:	e012      	b.n	8003b42 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b20:	f043 0220 	orr.w	r2, r3, #32
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003b2e:	e008      	b.n	8003b42 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b34:	f043 0220 	orr.w	r2, r3, #32
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b4a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3784      	adds	r7, #132	; 0x84
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd90      	pop	{r4, r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40022000 	.word	0x40022000
 8003b5c:	40022100 	.word	0x40022100
 8003b60:	40022300 	.word	0x40022300
 8003b64:	58026300 	.word	0x58026300
 8003b68:	58026000 	.word	0x58026000
 8003b6c:	cb840000 	.word	0xcb840000
 8003b70:	24000024 	.word	0x24000024
 8003b74:	053e2d63 	.word	0x053e2d63
 8003b78:	c7520000 	.word	0xc7520000
 8003b7c:	cfb80000 	.word	0xcfb80000

08003b80 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff f994 	bl	8002ec4 <LL_ADC_REG_IsConversionOngoing>
 8003b9c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff f9b6 	bl	8002f14 <LL_ADC_INJ_IsConversionOngoing>
 8003ba8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d103      	bne.n	8003bb8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 8098 	beq.w	8003ce8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d02a      	beq.n	8003c1c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	7d5b      	ldrb	r3, [r3, #21]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d126      	bne.n	8003c1c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	7d1b      	ldrb	r3, [r3, #20]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d122      	bne.n	8003c1c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003bda:	e014      	b.n	8003c06 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	4a45      	ldr	r2, [pc, #276]	; (8003cf4 <ADC_ConversionStop+0x174>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d90d      	bls.n	8003c00 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be8:	f043 0210 	orr.w	r2, r3, #16
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf4:	f043 0201 	orr.w	r2, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e074      	b.n	8003cea <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	3301      	adds	r3, #1
 8003c04:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c10:	2b40      	cmp	r3, #64	; 0x40
 8003c12:	d1e3      	bne.n	8003bdc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2240      	movs	r2, #64	; 0x40
 8003c1a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d014      	beq.n	8003c4c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff f94c 	bl	8002ec4 <LL_ADC_REG_IsConversionOngoing>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00c      	beq.n	8003c4c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff f909 	bl	8002e4e <LL_ADC_IsDisableOngoing>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d104      	bne.n	8003c4c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff f928 	bl	8002e9c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d014      	beq.n	8003c7c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff f95c 	bl	8002f14 <LL_ADC_INJ_IsConversionOngoing>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00c      	beq.n	8003c7c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff f8f1 	bl	8002e4e <LL_ADC_IsDisableOngoing>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d104      	bne.n	8003c7c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff f938 	bl	8002eec <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d005      	beq.n	8003c8e <ADC_ConversionStop+0x10e>
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d105      	bne.n	8003c94 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003c88:	230c      	movs	r3, #12
 8003c8a:	617b      	str	r3, [r7, #20]
        break;
 8003c8c:	e005      	b.n	8003c9a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003c8e:	2308      	movs	r3, #8
 8003c90:	617b      	str	r3, [r7, #20]
        break;
 8003c92:	e002      	b.n	8003c9a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003c94:	2304      	movs	r3, #4
 8003c96:	617b      	str	r3, [r7, #20]
        break;
 8003c98:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003c9a:	f7fe fecb 	bl	8002a34 <HAL_GetTick>
 8003c9e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ca0:	e01b      	b.n	8003cda <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003ca2:	f7fe fec7 	bl	8002a34 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b05      	cmp	r3, #5
 8003cae:	d914      	bls.n	8003cda <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00d      	beq.n	8003cda <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc2:	f043 0210 	orr.w	r2, r3, #16
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cce:	f043 0201 	orr.w	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e007      	b.n	8003cea <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1dc      	bne.n	8003ca2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3720      	adds	r7, #32
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	000cdbff 	.word	0x000cdbff

08003cf8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff f88f 	bl	8002e28 <LL_ADC_IsEnabled>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d16e      	bne.n	8003dee <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	4b38      	ldr	r3, [pc, #224]	; (8003df8 <ADC_Enable+0x100>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00d      	beq.n	8003d3a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d22:	f043 0210 	orr.w	r2, r3, #16
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2e:	f043 0201 	orr.w	r2, r3, #1
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e05a      	b.n	8003df0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff f84a 	bl	8002dd8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d44:	f7fe fe76 	bl	8002a34 <HAL_GetTick>
 8003d48:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a2b      	ldr	r2, [pc, #172]	; (8003dfc <ADC_Enable+0x104>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d004      	beq.n	8003d5e <ADC_Enable+0x66>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a29      	ldr	r2, [pc, #164]	; (8003e00 <ADC_Enable+0x108>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d101      	bne.n	8003d62 <ADC_Enable+0x6a>
 8003d5e:	4b29      	ldr	r3, [pc, #164]	; (8003e04 <ADC_Enable+0x10c>)
 8003d60:	e000      	b.n	8003d64 <ADC_Enable+0x6c>
 8003d62:	4b29      	ldr	r3, [pc, #164]	; (8003e08 <ADC_Enable+0x110>)
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fe ffdb 	bl	8002d20 <LL_ADC_GetMultimode>
 8003d6a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a23      	ldr	r2, [pc, #140]	; (8003e00 <ADC_Enable+0x108>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d002      	beq.n	8003d7c <ADC_Enable+0x84>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	e000      	b.n	8003d7e <ADC_Enable+0x86>
 8003d7c:	4b1f      	ldr	r3, [pc, #124]	; (8003dfc <ADC_Enable+0x104>)
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6812      	ldr	r2, [r2, #0]
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d02c      	beq.n	8003de0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d130      	bne.n	8003dee <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d8c:	e028      	b.n	8003de0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7ff f848 	bl	8002e28 <LL_ADC_IsEnabled>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d104      	bne.n	8003da8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff f818 	bl	8002dd8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003da8:	f7fe fe44 	bl	8002a34 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d914      	bls.n	8003de0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d00d      	beq.n	8003de0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc8:	f043 0210 	orr.w	r2, r3, #16
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd4:	f043 0201 	orr.w	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e007      	b.n	8003df0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d1cf      	bne.n	8003d8e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	8000003f 	.word	0x8000003f
 8003dfc:	40022000 	.word	0x40022000
 8003e00:	40022100 	.word	0x40022100
 8003e04:	40022300 	.word	0x40022300
 8003e08:	58026300 	.word	0x58026300

08003e0c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff f818 	bl	8002e4e <LL_ADC_IsDisableOngoing>
 8003e1e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fe ffff 	bl	8002e28 <LL_ADC_IsEnabled>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d047      	beq.n	8003ec0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d144      	bne.n	8003ec0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 030d 	and.w	r3, r3, #13
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d10c      	bne.n	8003e5e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fe ffd9 	bl	8002e00 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2203      	movs	r2, #3
 8003e54:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e56:	f7fe fded 	bl	8002a34 <HAL_GetTick>
 8003e5a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e5c:	e029      	b.n	8003eb2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e62:	f043 0210 	orr.w	r2, r3, #16
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6e:	f043 0201 	orr.w	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e023      	b.n	8003ec2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e7a:	f7fe fddb 	bl	8002a34 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d914      	bls.n	8003eb2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00d      	beq.n	8003eb2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9a:	f043 0210 	orr.w	r2, r3, #16
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea6:	f043 0201 	orr.w	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e007      	b.n	8003ec2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1dc      	bne.n	8003e7a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003edc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d14b      	bne.n	8003f7c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d021      	beq.n	8003f42 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fe fe6a 	bl	8002bdc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d032      	beq.n	8003f74 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d12b      	bne.n	8003f74 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d11f      	bne.n	8003f74 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f38:	f043 0201 	orr.w	r2, r3, #1
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	655a      	str	r2, [r3, #84]	; 0x54
 8003f40:	e018      	b.n	8003f74 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d111      	bne.n	8003f74 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d105      	bne.n	8003f74 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6c:	f043 0201 	orr.w	r2, r3, #1
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f7fd ff21 	bl	8001dbc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f7a:	e00e      	b.n	8003f9a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f7ff fa9f 	bl	80034cc <HAL_ADC_ErrorCallback>
}
 8003f8e:	e004      	b.n	8003f9a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	4798      	blx	r3
}
 8003f9a:	bf00      	nop
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f7fd fe95 	bl	8001ce0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b084      	sub	sp, #16
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fdc:	f043 0204 	orr.w	r2, r3, #4
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f7ff fa71 	bl	80034cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fea:	bf00      	nop
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a79      	ldr	r2, [pc, #484]	; (80041e8 <ADC_ConfigureBoostMode+0x1f4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d004      	beq.n	8004010 <ADC_ConfigureBoostMode+0x1c>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a78      	ldr	r2, [pc, #480]	; (80041ec <ADC_ConfigureBoostMode+0x1f8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d109      	bne.n	8004024 <ADC_ConfigureBoostMode+0x30>
 8004010:	4b77      	ldr	r3, [pc, #476]	; (80041f0 <ADC_ConfigureBoostMode+0x1fc>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004018:	2b00      	cmp	r3, #0
 800401a:	bf14      	ite	ne
 800401c:	2301      	movne	r3, #1
 800401e:	2300      	moveq	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	e008      	b.n	8004036 <ADC_ConfigureBoostMode+0x42>
 8004024:	4b73      	ldr	r3, [pc, #460]	; (80041f4 <ADC_ConfigureBoostMode+0x200>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800402c:	2b00      	cmp	r3, #0
 800402e:	bf14      	ite	ne
 8004030:	2301      	movne	r3, #1
 8004032:	2300      	moveq	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d01c      	beq.n	8004074 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800403a:	f005 fad5 	bl	80095e8 <HAL_RCC_GetHCLKFreq>
 800403e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004048:	d010      	beq.n	800406c <ADC_ConfigureBoostMode+0x78>
 800404a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800404e:	d871      	bhi.n	8004134 <ADC_ConfigureBoostMode+0x140>
 8004050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004054:	d002      	beq.n	800405c <ADC_ConfigureBoostMode+0x68>
 8004056:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800405a:	d16b      	bne.n	8004134 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	0c1b      	lsrs	r3, r3, #16
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	fbb2 f3f3 	udiv	r3, r2, r3
 8004068:	60fb      	str	r3, [r7, #12]
        break;
 800406a:	e066      	b.n	800413a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	089b      	lsrs	r3, r3, #2
 8004070:	60fb      	str	r3, [r7, #12]
        break;
 8004072:	e062      	b.n	800413a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004074:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004078:	f006 fa58 	bl	800a52c <HAL_RCCEx_GetPeriphCLKFreq>
 800407c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004086:	d051      	beq.n	800412c <ADC_ConfigureBoostMode+0x138>
 8004088:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800408c:	d854      	bhi.n	8004138 <ADC_ConfigureBoostMode+0x144>
 800408e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004092:	d047      	beq.n	8004124 <ADC_ConfigureBoostMode+0x130>
 8004094:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004098:	d84e      	bhi.n	8004138 <ADC_ConfigureBoostMode+0x144>
 800409a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800409e:	d03d      	beq.n	800411c <ADC_ConfigureBoostMode+0x128>
 80040a0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80040a4:	d848      	bhi.n	8004138 <ADC_ConfigureBoostMode+0x144>
 80040a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040aa:	d033      	beq.n	8004114 <ADC_ConfigureBoostMode+0x120>
 80040ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040b0:	d842      	bhi.n	8004138 <ADC_ConfigureBoostMode+0x144>
 80040b2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80040b6:	d029      	beq.n	800410c <ADC_ConfigureBoostMode+0x118>
 80040b8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80040bc:	d83c      	bhi.n	8004138 <ADC_ConfigureBoostMode+0x144>
 80040be:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80040c2:	d01a      	beq.n	80040fa <ADC_ConfigureBoostMode+0x106>
 80040c4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80040c8:	d836      	bhi.n	8004138 <ADC_ConfigureBoostMode+0x144>
 80040ca:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80040ce:	d014      	beq.n	80040fa <ADC_ConfigureBoostMode+0x106>
 80040d0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80040d4:	d830      	bhi.n	8004138 <ADC_ConfigureBoostMode+0x144>
 80040d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040da:	d00e      	beq.n	80040fa <ADC_ConfigureBoostMode+0x106>
 80040dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040e0:	d82a      	bhi.n	8004138 <ADC_ConfigureBoostMode+0x144>
 80040e2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80040e6:	d008      	beq.n	80040fa <ADC_ConfigureBoostMode+0x106>
 80040e8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80040ec:	d824      	bhi.n	8004138 <ADC_ConfigureBoostMode+0x144>
 80040ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040f2:	d002      	beq.n	80040fa <ADC_ConfigureBoostMode+0x106>
 80040f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040f8:	d11e      	bne.n	8004138 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	0c9b      	lsrs	r3, r3, #18
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	fbb2 f3f3 	udiv	r3, r2, r3
 8004108:	60fb      	str	r3, [r7, #12]
        break;
 800410a:	e016      	b.n	800413a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	091b      	lsrs	r3, r3, #4
 8004110:	60fb      	str	r3, [r7, #12]
        break;
 8004112:	e012      	b.n	800413a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	60fb      	str	r3, [r7, #12]
        break;
 800411a:	e00e      	b.n	800413a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	099b      	lsrs	r3, r3, #6
 8004120:	60fb      	str	r3, [r7, #12]
        break;
 8004122:	e00a      	b.n	800413a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	09db      	lsrs	r3, r3, #7
 8004128:	60fb      	str	r3, [r7, #12]
        break;
 800412a:	e006      	b.n	800413a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	0a1b      	lsrs	r3, r3, #8
 8004130:	60fb      	str	r3, [r7, #12]
        break;
 8004132:	e002      	b.n	800413a <ADC_ConfigureBoostMode+0x146>
        break;
 8004134:	bf00      	nop
 8004136:	e000      	b.n	800413a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004138:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800413a:	f7fe fcbb 	bl	8002ab4 <HAL_GetREVID>
 800413e:	4603      	mov	r3, r0
 8004140:	f241 0203 	movw	r2, #4099	; 0x1003
 8004144:	4293      	cmp	r3, r2
 8004146:	d815      	bhi.n	8004174 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4a2b      	ldr	r2, [pc, #172]	; (80041f8 <ADC_ConfigureBoostMode+0x204>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d908      	bls.n	8004162 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800415e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004160:	e03e      	b.n	80041e0 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004170:	609a      	str	r2, [r3, #8]
}
 8004172:	e035      	b.n	80041e0 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	085b      	lsrs	r3, r3, #1
 8004178:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4a1f      	ldr	r2, [pc, #124]	; (80041fc <ADC_ConfigureBoostMode+0x208>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d808      	bhi.n	8004194 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004190:	609a      	str	r2, [r3, #8]
}
 8004192:	e025      	b.n	80041e0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4a1a      	ldr	r2, [pc, #104]	; (8004200 <ADC_ConfigureBoostMode+0x20c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d80a      	bhi.n	80041b2 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ae:	609a      	str	r2, [r3, #8]
}
 80041b0:	e016      	b.n	80041e0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4a13      	ldr	r2, [pc, #76]	; (8004204 <ADC_ConfigureBoostMode+0x210>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d80a      	bhi.n	80041d0 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041cc:	609a      	str	r2, [r3, #8]
}
 80041ce:	e007      	b.n	80041e0 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80041de:	609a      	str	r2, [r3, #8]
}
 80041e0:	bf00      	nop
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40022000 	.word	0x40022000
 80041ec:	40022100 	.word	0x40022100
 80041f0:	40022300 	.word	0x40022300
 80041f4:	58026300 	.word	0x58026300
 80041f8:	01312d00 	.word	0x01312d00
 80041fc:	005f5e10 	.word	0x005f5e10
 8004200:	00bebc20 	.word	0x00bebc20
 8004204:	017d7840 	.word	0x017d7840

08004208 <LL_ADC_IsEnabled>:
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <LL_ADC_IsEnabled+0x18>
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <LL_ADC_IsEnabled+0x1a>
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
	...

08004230 <LL_ADC_StartCalibration>:
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	4b09      	ldr	r3, [pc, #36]	; (8004268 <LL_ADC_StartCalibration+0x38>)
 8004242:	4013      	ands	r3, r2
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004250:	430a      	orrs	r2, r1
 8004252:	4313      	orrs	r3, r2
 8004254:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	609a      	str	r2, [r3, #8]
}
 800425c:	bf00      	nop
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	3ffeffc0 	.word	0x3ffeffc0

0800426c <LL_ADC_IsCalibrationOnGoing>:
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800427c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004280:	d101      	bne.n	8004286 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004282:	2301      	movs	r3, #1
 8004284:	e000      	b.n	8004288 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <LL_ADC_REG_IsConversionOngoing>:
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d101      	bne.n	80042ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
	...

080042bc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80042c8:	2300      	movs	r3, #0
 80042ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_ADCEx_Calibration_Start+0x1e>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e04c      	b.n	8004374 <HAL_ADCEx_Calibration_Start+0xb8>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f7ff fd92 	bl	8003e0c <ADC_Disable>
 80042e8:	4603      	mov	r3, r0
 80042ea:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80042ec:	7dfb      	ldrb	r3, [r7, #23]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d135      	bne.n	800435e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042f6:	4b21      	ldr	r3, [pc, #132]	; (800437c <HAL_ADCEx_Calibration_Start+0xc0>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	f043 0202 	orr.w	r2, r3, #2
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	68b9      	ldr	r1, [r7, #8]
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff ff90 	bl	8004230 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004310:	e014      	b.n	800433c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	3301      	adds	r3, #1
 8004316:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	4a19      	ldr	r2, [pc, #100]	; (8004380 <HAL_ADCEx_Calibration_Start+0xc4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d30d      	bcc.n	800433c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004324:	f023 0312 	bic.w	r3, r3, #18
 8004328:	f043 0210 	orr.w	r2, r3, #16
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e01b      	b.n	8004374 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff ff93 	bl	800426c <LL_ADC_IsCalibrationOnGoing>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1e2      	bne.n	8004312 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004350:	f023 0303 	bic.w	r3, r3, #3
 8004354:	f043 0201 	orr.w	r2, r3, #1
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	655a      	str	r2, [r3, #84]	; 0x54
 800435c:	e005      	b.n	800436a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004362:	f043 0210 	orr.w	r2, r3, #16
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004372:	7dfb      	ldrb	r3, [r7, #23]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	ffffeefd 	.word	0xffffeefd
 8004380:	25c3f800 	.word	0x25c3f800

08004384 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004384:	b590      	push	{r4, r7, lr}
 8004386:	b09f      	sub	sp, #124	; 0x7c
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800439a:	2b01      	cmp	r3, #1
 800439c:	d101      	bne.n	80043a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800439e:	2302      	movs	r3, #2
 80043a0:	e0be      	b.n	8004520 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80043aa:	2300      	movs	r3, #0
 80043ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80043ae:	2300      	movs	r3, #0
 80043b0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a5c      	ldr	r2, [pc, #368]	; (8004528 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d102      	bne.n	80043c2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80043bc:	4b5b      	ldr	r3, [pc, #364]	; (800452c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80043be:	60bb      	str	r3, [r7, #8]
 80043c0:	e001      	b.n	80043c6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80043c2:	2300      	movs	r3, #0
 80043c4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10b      	bne.n	80043e4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d0:	f043 0220 	orr.w	r2, r3, #32
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e09d      	b.n	8004520 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff ff54 	bl	8004294 <LL_ADC_REG_IsConversionOngoing>
 80043ec:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff ff4e 	bl	8004294 <LL_ADC_REG_IsConversionOngoing>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d17f      	bne.n	80044fe <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80043fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004400:	2b00      	cmp	r3, #0
 8004402:	d17c      	bne.n	80044fe <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a47      	ldr	r2, [pc, #284]	; (8004528 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d004      	beq.n	8004418 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a46      	ldr	r2, [pc, #280]	; (800452c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d101      	bne.n	800441c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004418:	4b45      	ldr	r3, [pc, #276]	; (8004530 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800441a:	e000      	b.n	800441e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800441c:	4b45      	ldr	r3, [pc, #276]	; (8004534 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800441e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d039      	beq.n	800449c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	431a      	orrs	r2, r3
 8004436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004438:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a3a      	ldr	r2, [pc, #232]	; (8004528 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d004      	beq.n	800444e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a38      	ldr	r2, [pc, #224]	; (800452c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d10e      	bne.n	800446c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800444e:	4836      	ldr	r0, [pc, #216]	; (8004528 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004450:	f7ff feda 	bl	8004208 <LL_ADC_IsEnabled>
 8004454:	4604      	mov	r4, r0
 8004456:	4835      	ldr	r0, [pc, #212]	; (800452c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004458:	f7ff fed6 	bl	8004208 <LL_ADC_IsEnabled>
 800445c:	4603      	mov	r3, r0
 800445e:	4323      	orrs	r3, r4
 8004460:	2b00      	cmp	r3, #0
 8004462:	bf0c      	ite	eq
 8004464:	2301      	moveq	r3, #1
 8004466:	2300      	movne	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	e008      	b.n	800447e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800446c:	4832      	ldr	r0, [pc, #200]	; (8004538 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800446e:	f7ff fecb 	bl	8004208 <LL_ADC_IsEnabled>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	bf0c      	ite	eq
 8004478:	2301      	moveq	r3, #1
 800447a:	2300      	movne	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d047      	beq.n	8004512 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	4b2d      	ldr	r3, [pc, #180]	; (800453c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004488:	4013      	ands	r3, r2
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	6811      	ldr	r1, [r2, #0]
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	6892      	ldr	r2, [r2, #8]
 8004492:	430a      	orrs	r2, r1
 8004494:	431a      	orrs	r2, r3
 8004496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004498:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800449a:	e03a      	b.n	8004512 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800449c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a1e      	ldr	r2, [pc, #120]	; (8004528 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d004      	beq.n	80044bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a1d      	ldr	r2, [pc, #116]	; (800452c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d10e      	bne.n	80044da <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80044bc:	481a      	ldr	r0, [pc, #104]	; (8004528 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80044be:	f7ff fea3 	bl	8004208 <LL_ADC_IsEnabled>
 80044c2:	4604      	mov	r4, r0
 80044c4:	4819      	ldr	r0, [pc, #100]	; (800452c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80044c6:	f7ff fe9f 	bl	8004208 <LL_ADC_IsEnabled>
 80044ca:	4603      	mov	r3, r0
 80044cc:	4323      	orrs	r3, r4
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	bf0c      	ite	eq
 80044d2:	2301      	moveq	r3, #1
 80044d4:	2300      	movne	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	e008      	b.n	80044ec <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80044da:	4817      	ldr	r0, [pc, #92]	; (8004538 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80044dc:	f7ff fe94 	bl	8004208 <LL_ADC_IsEnabled>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	bf0c      	ite	eq
 80044e6:	2301      	moveq	r3, #1
 80044e8:	2300      	movne	r3, #0
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d010      	beq.n	8004512 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80044f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	4b11      	ldr	r3, [pc, #68]	; (800453c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044fa:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044fc:	e009      	b.n	8004512 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004502:	f043 0220 	orr.w	r2, r3, #32
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004510:	e000      	b.n	8004514 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004512:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800451c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004520:	4618      	mov	r0, r3
 8004522:	377c      	adds	r7, #124	; 0x7c
 8004524:	46bd      	mov	sp, r7
 8004526:	bd90      	pop	{r4, r7, pc}
 8004528:	40022000 	.word	0x40022000
 800452c:	40022100 	.word	0x40022100
 8004530:	40022300 	.word	0x40022300
 8004534:	58026300 	.word	0x58026300
 8004538:	58026000 	.word	0x58026000
 800453c:	fffff0e0 	.word	0xfffff0e0

08004540 <__NVIC_SetPriorityGrouping>:
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004550:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <__NVIC_SetPriorityGrouping+0x40>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800455c:	4013      	ands	r3, r2
 800455e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004568:	4b06      	ldr	r3, [pc, #24]	; (8004584 <__NVIC_SetPriorityGrouping+0x44>)
 800456a:	4313      	orrs	r3, r2
 800456c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800456e:	4a04      	ldr	r2, [pc, #16]	; (8004580 <__NVIC_SetPriorityGrouping+0x40>)
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	60d3      	str	r3, [r2, #12]
}
 8004574:	bf00      	nop
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	e000ed00 	.word	0xe000ed00
 8004584:	05fa0000 	.word	0x05fa0000

08004588 <__NVIC_GetPriorityGrouping>:
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800458c:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <__NVIC_GetPriorityGrouping+0x18>)
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	0a1b      	lsrs	r3, r3, #8
 8004592:	f003 0307 	and.w	r3, r3, #7
}
 8004596:	4618      	mov	r0, r3
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	e000ed00 	.word	0xe000ed00

080045a4 <__NVIC_EnableIRQ>:
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	4603      	mov	r3, r0
 80045ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80045ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	db0b      	blt.n	80045ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045b6:	88fb      	ldrh	r3, [r7, #6]
 80045b8:	f003 021f 	and.w	r2, r3, #31
 80045bc:	4907      	ldr	r1, [pc, #28]	; (80045dc <__NVIC_EnableIRQ+0x38>)
 80045be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	2001      	movs	r0, #1
 80045c6:	fa00 f202 	lsl.w	r2, r0, r2
 80045ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	e000e100 	.word	0xe000e100

080045e0 <__NVIC_SetPriority>:
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	6039      	str	r1, [r7, #0]
 80045ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80045ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	db0a      	blt.n	800460a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	490c      	ldr	r1, [pc, #48]	; (800462c <__NVIC_SetPriority+0x4c>)
 80045fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045fe:	0112      	lsls	r2, r2, #4
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	440b      	add	r3, r1
 8004604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004608:	e00a      	b.n	8004620 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	b2da      	uxtb	r2, r3
 800460e:	4908      	ldr	r1, [pc, #32]	; (8004630 <__NVIC_SetPriority+0x50>)
 8004610:	88fb      	ldrh	r3, [r7, #6]
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	3b04      	subs	r3, #4
 8004618:	0112      	lsls	r2, r2, #4
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	440b      	add	r3, r1
 800461e:	761a      	strb	r2, [r3, #24]
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	e000e100 	.word	0xe000e100
 8004630:	e000ed00 	.word	0xe000ed00

08004634 <NVIC_EncodePriority>:
{
 8004634:	b480      	push	{r7}
 8004636:	b089      	sub	sp, #36	; 0x24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f1c3 0307 	rsb	r3, r3, #7
 800464e:	2b04      	cmp	r3, #4
 8004650:	bf28      	it	cs
 8004652:	2304      	movcs	r3, #4
 8004654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	3304      	adds	r3, #4
 800465a:	2b06      	cmp	r3, #6
 800465c:	d902      	bls.n	8004664 <NVIC_EncodePriority+0x30>
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	3b03      	subs	r3, #3
 8004662:	e000      	b.n	8004666 <NVIC_EncodePriority+0x32>
 8004664:	2300      	movs	r3, #0
 8004666:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	43da      	mvns	r2, r3
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	401a      	ands	r2, r3
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800467c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	fa01 f303 	lsl.w	r3, r1, r3
 8004686:	43d9      	mvns	r1, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800468c:	4313      	orrs	r3, r2
}
 800468e:	4618      	mov	r0, r3
 8004690:	3724      	adds	r7, #36	; 0x24
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
	...

0800469c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046ac:	d301      	bcc.n	80046b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046ae:	2301      	movs	r3, #1
 80046b0:	e00f      	b.n	80046d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046b2:	4a0a      	ldr	r2, [pc, #40]	; (80046dc <SysTick_Config+0x40>)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3b01      	subs	r3, #1
 80046b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046ba:	210f      	movs	r1, #15
 80046bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046c0:	f7ff ff8e 	bl	80045e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046c4:	4b05      	ldr	r3, [pc, #20]	; (80046dc <SysTick_Config+0x40>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046ca:	4b04      	ldr	r3, [pc, #16]	; (80046dc <SysTick_Config+0x40>)
 80046cc:	2207      	movs	r2, #7
 80046ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	e000e010 	.word	0xe000e010

080046e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff ff29 	bl	8004540 <__NVIC_SetPriorityGrouping>
}
 80046ee:	bf00      	nop
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b086      	sub	sp, #24
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	4603      	mov	r3, r0
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	607a      	str	r2, [r7, #4]
 8004702:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004704:	f7ff ff40 	bl	8004588 <__NVIC_GetPriorityGrouping>
 8004708:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	68b9      	ldr	r1, [r7, #8]
 800470e:	6978      	ldr	r0, [r7, #20]
 8004710:	f7ff ff90 	bl	8004634 <NVIC_EncodePriority>
 8004714:	4602      	mov	r2, r0
 8004716:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800471a:	4611      	mov	r1, r2
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff ff5f 	bl	80045e0 <__NVIC_SetPriority>
}
 8004722:	bf00      	nop
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b082      	sub	sp, #8
 800472e:	af00      	add	r7, sp, #0
 8004730:	4603      	mov	r3, r0
 8004732:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004734:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff ff33 	bl	80045a4 <__NVIC_EnableIRQ>
}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7ff ffa4 	bl	800469c <SysTick_Config>
 8004754:	4603      	mov	r3, r0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b082      	sub	sp, #8
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e014      	b.n	800479a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	791b      	ldrb	r3, [r3, #4]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d105      	bne.n	8004786 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7fd fce3 	bl	800214c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2202      	movs	r2, #2
 800478a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	795b      	ldrb	r3, [r3, #5]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_DAC_Start+0x16>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e040      	b.n	800483a <HAL_DAC_Start+0x98>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2202      	movs	r2, #2
 80047c2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6819      	ldr	r1, [r3, #0]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	2201      	movs	r2, #1
 80047d2:	409a      	lsls	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10f      	bne.n	8004802 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d11d      	bne.n	800482c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0201 	orr.w	r2, r2, #1
 80047fe:	605a      	str	r2, [r3, #4]
 8004800:	e014      	b.n	800482c <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	f003 0310 	and.w	r3, r3, #16
 8004812:	2102      	movs	r1, #2
 8004814:	fa01 f303 	lsl.w	r3, r1, r3
 8004818:	429a      	cmp	r2, r3
 800481a:	d107      	bne.n	800482c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0202 	orr.w	r2, r2, #2
 800482a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004846:	b480      	push	{r7}
 8004848:	b087      	sub	sp, #28
 800484a:	af00      	add	r7, sp, #0
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	607a      	str	r2, [r7, #4]
 8004852:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004854:	2300      	movs	r3, #0
 8004856:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d105      	bne.n	8004870 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4413      	add	r3, r2
 800486a:	3308      	adds	r3, #8
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	e004      	b.n	800487a <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4413      	add	r3, r2
 8004876:	3314      	adds	r3, #20
 8004878:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	461a      	mov	r2, r3
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	371c      	adds	r7, #28
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	795b      	ldrb	r3, [r3, #5]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d101      	bne.n	80048a8 <HAL_DAC_ConfigChannel+0x18>
 80048a4:	2302      	movs	r3, #2
 80048a6:	e11d      	b.n	8004ae4 <HAL_DAC_ConfigChannel+0x254>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2201      	movs	r2, #1
 80048ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2202      	movs	r2, #2
 80048b2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d174      	bne.n	80049a6 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80048bc:	f7fe f8ba 	bl	8002a34 <HAL_GetTick>
 80048c0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d134      	bne.n	8004932 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80048c8:	e011      	b.n	80048ee <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80048ca:	f7fe f8b3 	bl	8002a34 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d90a      	bls.n	80048ee <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	f043 0208 	orr.w	r2, r3, #8
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2203      	movs	r2, #3
 80048e8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e0fa      	b.n	8004ae4 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048f4:	4b7d      	ldr	r3, [pc, #500]	; (8004aec <HAL_DAC_ConfigChannel+0x25c>)
 80048f6:	4013      	ands	r3, r2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1e6      	bne.n	80048ca <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80048fc:	2001      	movs	r0, #1
 80048fe:	f7fe f8a5 	bl	8002a4c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	6992      	ldr	r2, [r2, #24]
 800490a:	641a      	str	r2, [r3, #64]	; 0x40
 800490c:	e01e      	b.n	800494c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800490e:	f7fe f891 	bl	8002a34 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b01      	cmp	r3, #1
 800491a:	d90a      	bls.n	8004932 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	f043 0208 	orr.w	r2, r3, #8
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2203      	movs	r2, #3
 800492c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e0d8      	b.n	8004ae4 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004938:	2b00      	cmp	r3, #0
 800493a:	dbe8      	blt.n	800490e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800493c:	2001      	movs	r0, #1
 800493e:	f7fe f885 	bl	8002a4c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	6992      	ldr	r2, [r2, #24]
 800494a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800495c:	fa01 f303 	lsl.w	r3, r1, r3
 8004960:	43db      	mvns	r3, r3
 8004962:	ea02 0103 	and.w	r1, r2, r3
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	69da      	ldr	r2, [r3, #28]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f003 0310 	and.w	r3, r3, #16
 8004970:	409a      	lsls	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f003 0310 	and.w	r3, r3, #16
 8004986:	21ff      	movs	r1, #255	; 0xff
 8004988:	fa01 f303 	lsl.w	r3, r1, r3
 800498c:	43db      	mvns	r3, r3
 800498e:	ea02 0103 	and.w	r1, r2, r3
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	6a1a      	ldr	r2, [r3, #32]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f003 0310 	and.w	r3, r3, #16
 800499c:	409a      	lsls	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d11d      	bne.n	80049ea <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b4:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f003 0310 	and.w	r3, r3, #16
 80049bc:	221f      	movs	r2, #31
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	43db      	mvns	r3, r3
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	4013      	ands	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f003 0310 	and.w	r3, r3, #16
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	4313      	orrs	r3, r2
 80049e0:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2207      	movs	r2, #7
 80049fa:	fa02 f303 	lsl.w	r3, r2, r3
 80049fe:	43db      	mvns	r3, r3
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	4013      	ands	r3, r2
 8004a04:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d102      	bne.n	8004a14 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61fb      	str	r3, [r7, #28]
 8004a12:	e00f      	b.n	8004a34 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d102      	bne.n	8004a22 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	61fb      	str	r3, [r7, #28]
 8004a20:	e008      	b.n	8004a34 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d102      	bne.n	8004a30 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	61fb      	str	r3, [r7, #28]
 8004a2e:	e001      	b.n	8004a34 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004a30:	2300      	movs	r3, #0
 8004a32:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	69fa      	ldr	r2, [r7, #28]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f003 0310 	and.w	r3, r3, #16
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6819      	ldr	r1, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f003 0310 	and.w	r3, r3, #16
 8004a6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a72:	43da      	mvns	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	400a      	ands	r2, r1
 8004a7a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f003 0310 	and.w	r3, r3, #16
 8004a8a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a92:	43db      	mvns	r3, r3
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	4013      	ands	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f003 0310 	and.w	r3, r3, #16
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6819      	ldr	r1, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f003 0310 	and.w	r3, r3, #16
 8004ac6:	22c0      	movs	r2, #192	; 0xc0
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	43da      	mvns	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	400a      	ands	r2, r1
 8004ad4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3720      	adds	r7, #32
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	20008000 	.word	0x20008000

08004af0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004af8:	f7fd ff9c 	bl	8002a34 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e316      	b.n	8005136 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a66      	ldr	r2, [pc, #408]	; (8004ca8 <HAL_DMA_Init+0x1b8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d04a      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a65      	ldr	r2, [pc, #404]	; (8004cac <HAL_DMA_Init+0x1bc>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d045      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a63      	ldr	r2, [pc, #396]	; (8004cb0 <HAL_DMA_Init+0x1c0>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d040      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a62      	ldr	r2, [pc, #392]	; (8004cb4 <HAL_DMA_Init+0x1c4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d03b      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a60      	ldr	r2, [pc, #384]	; (8004cb8 <HAL_DMA_Init+0x1c8>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d036      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a5f      	ldr	r2, [pc, #380]	; (8004cbc <HAL_DMA_Init+0x1cc>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d031      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a5d      	ldr	r2, [pc, #372]	; (8004cc0 <HAL_DMA_Init+0x1d0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d02c      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a5c      	ldr	r2, [pc, #368]	; (8004cc4 <HAL_DMA_Init+0x1d4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d027      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a5a      	ldr	r2, [pc, #360]	; (8004cc8 <HAL_DMA_Init+0x1d8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d022      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a59      	ldr	r2, [pc, #356]	; (8004ccc <HAL_DMA_Init+0x1dc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d01d      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a57      	ldr	r2, [pc, #348]	; (8004cd0 <HAL_DMA_Init+0x1e0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d018      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a56      	ldr	r2, [pc, #344]	; (8004cd4 <HAL_DMA_Init+0x1e4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d013      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a54      	ldr	r2, [pc, #336]	; (8004cd8 <HAL_DMA_Init+0x1e8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d00e      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a53      	ldr	r2, [pc, #332]	; (8004cdc <HAL_DMA_Init+0x1ec>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d009      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a51      	ldr	r2, [pc, #324]	; (8004ce0 <HAL_DMA_Init+0x1f0>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d004      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a50      	ldr	r2, [pc, #320]	; (8004ce4 <HAL_DMA_Init+0x1f4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d101      	bne.n	8004bac <HAL_DMA_Init+0xbc>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e000      	b.n	8004bae <HAL_DMA_Init+0xbe>
 8004bac:	2300      	movs	r3, #0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 813b 	beq.w	8004e2a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a37      	ldr	r2, [pc, #220]	; (8004ca8 <HAL_DMA_Init+0x1b8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d04a      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a36      	ldr	r2, [pc, #216]	; (8004cac <HAL_DMA_Init+0x1bc>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d045      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a34      	ldr	r2, [pc, #208]	; (8004cb0 <HAL_DMA_Init+0x1c0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d040      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a33      	ldr	r2, [pc, #204]	; (8004cb4 <HAL_DMA_Init+0x1c4>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d03b      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a31      	ldr	r2, [pc, #196]	; (8004cb8 <HAL_DMA_Init+0x1c8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d036      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a30      	ldr	r2, [pc, #192]	; (8004cbc <HAL_DMA_Init+0x1cc>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d031      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a2e      	ldr	r2, [pc, #184]	; (8004cc0 <HAL_DMA_Init+0x1d0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d02c      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a2d      	ldr	r2, [pc, #180]	; (8004cc4 <HAL_DMA_Init+0x1d4>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d027      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a2b      	ldr	r2, [pc, #172]	; (8004cc8 <HAL_DMA_Init+0x1d8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d022      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a2a      	ldr	r2, [pc, #168]	; (8004ccc <HAL_DMA_Init+0x1dc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d01d      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a28      	ldr	r2, [pc, #160]	; (8004cd0 <HAL_DMA_Init+0x1e0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d018      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a27      	ldr	r2, [pc, #156]	; (8004cd4 <HAL_DMA_Init+0x1e4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d013      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a25      	ldr	r2, [pc, #148]	; (8004cd8 <HAL_DMA_Init+0x1e8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00e      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a24      	ldr	r2, [pc, #144]	; (8004cdc <HAL_DMA_Init+0x1ec>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d009      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a22      	ldr	r2, [pc, #136]	; (8004ce0 <HAL_DMA_Init+0x1f0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d004      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a21      	ldr	r2, [pc, #132]	; (8004ce4 <HAL_DMA_Init+0x1f4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d108      	bne.n	8004c76 <HAL_DMA_Init+0x186>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0201 	bic.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	e007      	b.n	8004c86 <HAL_DMA_Init+0x196>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0201 	bic.w	r2, r2, #1
 8004c84:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c86:	e02f      	b.n	8004ce8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c88:	f7fd fed4 	bl	8002a34 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b05      	cmp	r3, #5
 8004c94:	d928      	bls.n	8004ce8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2203      	movs	r2, #3
 8004ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e246      	b.n	8005136 <HAL_DMA_Init+0x646>
 8004ca8:	40020010 	.word	0x40020010
 8004cac:	40020028 	.word	0x40020028
 8004cb0:	40020040 	.word	0x40020040
 8004cb4:	40020058 	.word	0x40020058
 8004cb8:	40020070 	.word	0x40020070
 8004cbc:	40020088 	.word	0x40020088
 8004cc0:	400200a0 	.word	0x400200a0
 8004cc4:	400200b8 	.word	0x400200b8
 8004cc8:	40020410 	.word	0x40020410
 8004ccc:	40020428 	.word	0x40020428
 8004cd0:	40020440 	.word	0x40020440
 8004cd4:	40020458 	.word	0x40020458
 8004cd8:	40020470 	.word	0x40020470
 8004cdc:	40020488 	.word	0x40020488
 8004ce0:	400204a0 	.word	0x400204a0
 8004ce4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1c8      	bne.n	8004c88 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4b83      	ldr	r3, [pc, #524]	; (8004f10 <HAL_DMA_Init+0x420>)
 8004d02:	4013      	ands	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004d0e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d1a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d26:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	2b04      	cmp	r3, #4
 8004d3a:	d107      	bne.n	8004d4c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d44:	4313      	orrs	r3, r2
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004d4c:	4b71      	ldr	r3, [pc, #452]	; (8004f14 <HAL_DMA_Init+0x424>)
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	4b71      	ldr	r3, [pc, #452]	; (8004f18 <HAL_DMA_Init+0x428>)
 8004d52:	4013      	ands	r3, r2
 8004d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d58:	d328      	bcc.n	8004dac <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2b28      	cmp	r3, #40	; 0x28
 8004d60:	d903      	bls.n	8004d6a <HAL_DMA_Init+0x27a>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b2e      	cmp	r3, #46	; 0x2e
 8004d68:	d917      	bls.n	8004d9a <HAL_DMA_Init+0x2aa>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b3e      	cmp	r3, #62	; 0x3e
 8004d70:	d903      	bls.n	8004d7a <HAL_DMA_Init+0x28a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b42      	cmp	r3, #66	; 0x42
 8004d78:	d90f      	bls.n	8004d9a <HAL_DMA_Init+0x2aa>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b46      	cmp	r3, #70	; 0x46
 8004d80:	d903      	bls.n	8004d8a <HAL_DMA_Init+0x29a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b48      	cmp	r3, #72	; 0x48
 8004d88:	d907      	bls.n	8004d9a <HAL_DMA_Init+0x2aa>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b4e      	cmp	r3, #78	; 0x4e
 8004d90:	d905      	bls.n	8004d9e <HAL_DMA_Init+0x2ae>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b52      	cmp	r3, #82	; 0x52
 8004d98:	d801      	bhi.n	8004d9e <HAL_DMA_Init+0x2ae>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <HAL_DMA_Init+0x2b0>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d003      	beq.n	8004dac <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004daa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f023 0307 	bic.w	r3, r3, #7
 8004dc2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d117      	bne.n	8004e06 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00e      	beq.n	8004e06 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f002 fb33 	bl	8007454 <DMA_CheckFifoParam>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d008      	beq.n	8004e06 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2240      	movs	r2, #64	; 0x40
 8004df8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e197      	b.n	8005136 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f002 fa6e 	bl	80072f0 <DMA_CalcBaseAndBitshift>
 8004e14:	4603      	mov	r3, r0
 8004e16:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e1c:	f003 031f 	and.w	r3, r3, #31
 8004e20:	223f      	movs	r2, #63	; 0x3f
 8004e22:	409a      	lsls	r2, r3
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	609a      	str	r2, [r3, #8]
 8004e28:	e0cd      	b.n	8004fc6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a3b      	ldr	r2, [pc, #236]	; (8004f1c <HAL_DMA_Init+0x42c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d022      	beq.n	8004e7a <HAL_DMA_Init+0x38a>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a39      	ldr	r2, [pc, #228]	; (8004f20 <HAL_DMA_Init+0x430>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d01d      	beq.n	8004e7a <HAL_DMA_Init+0x38a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a38      	ldr	r2, [pc, #224]	; (8004f24 <HAL_DMA_Init+0x434>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d018      	beq.n	8004e7a <HAL_DMA_Init+0x38a>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a36      	ldr	r2, [pc, #216]	; (8004f28 <HAL_DMA_Init+0x438>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d013      	beq.n	8004e7a <HAL_DMA_Init+0x38a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a35      	ldr	r2, [pc, #212]	; (8004f2c <HAL_DMA_Init+0x43c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00e      	beq.n	8004e7a <HAL_DMA_Init+0x38a>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a33      	ldr	r2, [pc, #204]	; (8004f30 <HAL_DMA_Init+0x440>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d009      	beq.n	8004e7a <HAL_DMA_Init+0x38a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a32      	ldr	r2, [pc, #200]	; (8004f34 <HAL_DMA_Init+0x444>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d004      	beq.n	8004e7a <HAL_DMA_Init+0x38a>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a30      	ldr	r2, [pc, #192]	; (8004f38 <HAL_DMA_Init+0x448>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d101      	bne.n	8004e7e <HAL_DMA_Init+0x38e>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <HAL_DMA_Init+0x390>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 8097 	beq.w	8004fb4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a24      	ldr	r2, [pc, #144]	; (8004f1c <HAL_DMA_Init+0x42c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d021      	beq.n	8004ed4 <HAL_DMA_Init+0x3e4>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a22      	ldr	r2, [pc, #136]	; (8004f20 <HAL_DMA_Init+0x430>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d01c      	beq.n	8004ed4 <HAL_DMA_Init+0x3e4>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a21      	ldr	r2, [pc, #132]	; (8004f24 <HAL_DMA_Init+0x434>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d017      	beq.n	8004ed4 <HAL_DMA_Init+0x3e4>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a1f      	ldr	r2, [pc, #124]	; (8004f28 <HAL_DMA_Init+0x438>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d012      	beq.n	8004ed4 <HAL_DMA_Init+0x3e4>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a1e      	ldr	r2, [pc, #120]	; (8004f2c <HAL_DMA_Init+0x43c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d00d      	beq.n	8004ed4 <HAL_DMA_Init+0x3e4>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a1c      	ldr	r2, [pc, #112]	; (8004f30 <HAL_DMA_Init+0x440>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d008      	beq.n	8004ed4 <HAL_DMA_Init+0x3e4>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a1b      	ldr	r2, [pc, #108]	; (8004f34 <HAL_DMA_Init+0x444>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d003      	beq.n	8004ed4 <HAL_DMA_Init+0x3e4>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a19      	ldr	r2, [pc, #100]	; (8004f38 <HAL_DMA_Init+0x448>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2202      	movs	r2, #2
 8004eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	4b12      	ldr	r3, [pc, #72]	; (8004f3c <HAL_DMA_Init+0x44c>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	2b40      	cmp	r3, #64	; 0x40
 8004efc:	d020      	beq.n	8004f40 <HAL_DMA_Init+0x450>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	2b80      	cmp	r3, #128	; 0x80
 8004f04:	d102      	bne.n	8004f0c <HAL_DMA_Init+0x41c>
 8004f06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f0a:	e01a      	b.n	8004f42 <HAL_DMA_Init+0x452>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	e018      	b.n	8004f42 <HAL_DMA_Init+0x452>
 8004f10:	fe10803f 	.word	0xfe10803f
 8004f14:	5c001000 	.word	0x5c001000
 8004f18:	ffff0000 	.word	0xffff0000
 8004f1c:	58025408 	.word	0x58025408
 8004f20:	5802541c 	.word	0x5802541c
 8004f24:	58025430 	.word	0x58025430
 8004f28:	58025444 	.word	0x58025444
 8004f2c:	58025458 	.word	0x58025458
 8004f30:	5802546c 	.word	0x5802546c
 8004f34:	58025480 	.word	0x58025480
 8004f38:	58025494 	.word	0x58025494
 8004f3c:	fffe000f 	.word	0xfffe000f
 8004f40:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	68d2      	ldr	r2, [r2, #12]
 8004f46:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004f50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004f58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004f60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004f68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004f70:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	461a      	mov	r2, r3
 8004f86:	4b6e      	ldr	r3, [pc, #440]	; (8005140 <HAL_DMA_Init+0x650>)
 8004f88:	4413      	add	r3, r2
 8004f8a:	4a6e      	ldr	r2, [pc, #440]	; (8005144 <HAL_DMA_Init+0x654>)
 8004f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f90:	091b      	lsrs	r3, r3, #4
 8004f92:	009a      	lsls	r2, r3, #2
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f002 f9a9 	bl	80072f0 <DMA_CalcBaseAndBitshift>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa6:	f003 031f 	and.w	r3, r3, #31
 8004faa:	2201      	movs	r2, #1
 8004fac:	409a      	lsls	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	605a      	str	r2, [r3, #4]
 8004fb2:	e008      	b.n	8004fc6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2240      	movs	r2, #64	; 0x40
 8004fb8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2203      	movs	r2, #3
 8004fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e0b7      	b.n	8005136 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a5f      	ldr	r2, [pc, #380]	; (8005148 <HAL_DMA_Init+0x658>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d072      	beq.n	80050b6 <HAL_DMA_Init+0x5c6>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a5d      	ldr	r2, [pc, #372]	; (800514c <HAL_DMA_Init+0x65c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d06d      	beq.n	80050b6 <HAL_DMA_Init+0x5c6>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a5c      	ldr	r2, [pc, #368]	; (8005150 <HAL_DMA_Init+0x660>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d068      	beq.n	80050b6 <HAL_DMA_Init+0x5c6>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a5a      	ldr	r2, [pc, #360]	; (8005154 <HAL_DMA_Init+0x664>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d063      	beq.n	80050b6 <HAL_DMA_Init+0x5c6>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a59      	ldr	r2, [pc, #356]	; (8005158 <HAL_DMA_Init+0x668>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d05e      	beq.n	80050b6 <HAL_DMA_Init+0x5c6>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a57      	ldr	r2, [pc, #348]	; (800515c <HAL_DMA_Init+0x66c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d059      	beq.n	80050b6 <HAL_DMA_Init+0x5c6>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a56      	ldr	r2, [pc, #344]	; (8005160 <HAL_DMA_Init+0x670>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d054      	beq.n	80050b6 <HAL_DMA_Init+0x5c6>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a54      	ldr	r2, [pc, #336]	; (8005164 <HAL_DMA_Init+0x674>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d04f      	beq.n	80050b6 <HAL_DMA_Init+0x5c6>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a53      	ldr	r2, [pc, #332]	; (8005168 <HAL_DMA_Init+0x678>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d04a      	beq.n	80050b6 <HAL_DMA_Init+0x5c6>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a51      	ldr	r2, [pc, #324]	; (800516c <HAL_DMA_Init+0x67c>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d045      	beq.n	80050b6 <HAL_DMA_Init+0x5c6>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a50      	ldr	r2, [pc, #320]	; (8005170 <HAL_DMA_Init+0x680>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d040      	beq.n	80050b6 <HAL_DMA_Init+0x5c6>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a4e      	ldr	r2, [pc, #312]	; (8005174 <HAL_DMA_Init+0x684>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d03b      	beq.n	80050b6 <HAL_DMA_Init+0x5c6>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a4d      	ldr	r2, [pc, #308]	; (8005178 <HAL_DMA_Init+0x688>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d036      	beq.n	80050b6 <HAL_DMA_Init+0x5c6>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a4b      	ldr	r2, [pc, #300]	; (800517c <HAL_DMA_Init+0x68c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d031      	beq.n	80050b6 <HAL_DMA_Init+0x5c6>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a4a      	ldr	r2, [pc, #296]	; (8005180 <HAL_DMA_Init+0x690>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d02c      	beq.n	80050b6 <HAL_DMA_Init+0x5c6>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a48      	ldr	r2, [pc, #288]	; (8005184 <HAL_DMA_Init+0x694>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d027      	beq.n	80050b6 <HAL_DMA_Init+0x5c6>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a47      	ldr	r2, [pc, #284]	; (8005188 <HAL_DMA_Init+0x698>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d022      	beq.n	80050b6 <HAL_DMA_Init+0x5c6>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a45      	ldr	r2, [pc, #276]	; (800518c <HAL_DMA_Init+0x69c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d01d      	beq.n	80050b6 <HAL_DMA_Init+0x5c6>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a44      	ldr	r2, [pc, #272]	; (8005190 <HAL_DMA_Init+0x6a0>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d018      	beq.n	80050b6 <HAL_DMA_Init+0x5c6>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a42      	ldr	r2, [pc, #264]	; (8005194 <HAL_DMA_Init+0x6a4>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d013      	beq.n	80050b6 <HAL_DMA_Init+0x5c6>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a41      	ldr	r2, [pc, #260]	; (8005198 <HAL_DMA_Init+0x6a8>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d00e      	beq.n	80050b6 <HAL_DMA_Init+0x5c6>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a3f      	ldr	r2, [pc, #252]	; (800519c <HAL_DMA_Init+0x6ac>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d009      	beq.n	80050b6 <HAL_DMA_Init+0x5c6>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a3e      	ldr	r2, [pc, #248]	; (80051a0 <HAL_DMA_Init+0x6b0>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d004      	beq.n	80050b6 <HAL_DMA_Init+0x5c6>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a3c      	ldr	r2, [pc, #240]	; (80051a4 <HAL_DMA_Init+0x6b4>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d101      	bne.n	80050ba <HAL_DMA_Init+0x5ca>
 80050b6:	2301      	movs	r3, #1
 80050b8:	e000      	b.n	80050bc <HAL_DMA_Init+0x5cc>
 80050ba:	2300      	movs	r3, #0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d032      	beq.n	8005126 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f002 fa43 	bl	800754c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	2b80      	cmp	r3, #128	; 0x80
 80050cc:	d102      	bne.n	80050d4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80050e8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d010      	beq.n	8005114 <HAL_DMA_Init+0x624>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2b08      	cmp	r3, #8
 80050f8:	d80c      	bhi.n	8005114 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f002 fac0 	bl	8007680 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005110:	605a      	str	r2, [r3, #4]
 8005112:	e008      	b.n	8005126 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	a7fdabf8 	.word	0xa7fdabf8
 8005144:	cccccccd 	.word	0xcccccccd
 8005148:	40020010 	.word	0x40020010
 800514c:	40020028 	.word	0x40020028
 8005150:	40020040 	.word	0x40020040
 8005154:	40020058 	.word	0x40020058
 8005158:	40020070 	.word	0x40020070
 800515c:	40020088 	.word	0x40020088
 8005160:	400200a0 	.word	0x400200a0
 8005164:	400200b8 	.word	0x400200b8
 8005168:	40020410 	.word	0x40020410
 800516c:	40020428 	.word	0x40020428
 8005170:	40020440 	.word	0x40020440
 8005174:	40020458 	.word	0x40020458
 8005178:	40020470 	.word	0x40020470
 800517c:	40020488 	.word	0x40020488
 8005180:	400204a0 	.word	0x400204a0
 8005184:	400204b8 	.word	0x400204b8
 8005188:	58025408 	.word	0x58025408
 800518c:	5802541c 	.word	0x5802541c
 8005190:	58025430 	.word	0x58025430
 8005194:	58025444 	.word	0x58025444
 8005198:	58025458 	.word	0x58025458
 800519c:	5802546c 	.word	0x5802546c
 80051a0:	58025480 	.word	0x58025480
 80051a4:	58025494 	.word	0x58025494

080051a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
 80051b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e226      	b.n	8005612 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d101      	bne.n	80051d2 <HAL_DMA_Start_IT+0x2a>
 80051ce:	2302      	movs	r3, #2
 80051d0:	e21f      	b.n	8005612 <HAL_DMA_Start_IT+0x46a>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	f040 820a 	bne.w	80055fc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a68      	ldr	r2, [pc, #416]	; (800539c <HAL_DMA_Start_IT+0x1f4>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d04a      	beq.n	8005296 <HAL_DMA_Start_IT+0xee>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a66      	ldr	r2, [pc, #408]	; (80053a0 <HAL_DMA_Start_IT+0x1f8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d045      	beq.n	8005296 <HAL_DMA_Start_IT+0xee>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a65      	ldr	r2, [pc, #404]	; (80053a4 <HAL_DMA_Start_IT+0x1fc>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d040      	beq.n	8005296 <HAL_DMA_Start_IT+0xee>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a63      	ldr	r2, [pc, #396]	; (80053a8 <HAL_DMA_Start_IT+0x200>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d03b      	beq.n	8005296 <HAL_DMA_Start_IT+0xee>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a62      	ldr	r2, [pc, #392]	; (80053ac <HAL_DMA_Start_IT+0x204>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d036      	beq.n	8005296 <HAL_DMA_Start_IT+0xee>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a60      	ldr	r2, [pc, #384]	; (80053b0 <HAL_DMA_Start_IT+0x208>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d031      	beq.n	8005296 <HAL_DMA_Start_IT+0xee>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a5f      	ldr	r2, [pc, #380]	; (80053b4 <HAL_DMA_Start_IT+0x20c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d02c      	beq.n	8005296 <HAL_DMA_Start_IT+0xee>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a5d      	ldr	r2, [pc, #372]	; (80053b8 <HAL_DMA_Start_IT+0x210>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d027      	beq.n	8005296 <HAL_DMA_Start_IT+0xee>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a5c      	ldr	r2, [pc, #368]	; (80053bc <HAL_DMA_Start_IT+0x214>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d022      	beq.n	8005296 <HAL_DMA_Start_IT+0xee>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a5a      	ldr	r2, [pc, #360]	; (80053c0 <HAL_DMA_Start_IT+0x218>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d01d      	beq.n	8005296 <HAL_DMA_Start_IT+0xee>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a59      	ldr	r2, [pc, #356]	; (80053c4 <HAL_DMA_Start_IT+0x21c>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d018      	beq.n	8005296 <HAL_DMA_Start_IT+0xee>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a57      	ldr	r2, [pc, #348]	; (80053c8 <HAL_DMA_Start_IT+0x220>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d013      	beq.n	8005296 <HAL_DMA_Start_IT+0xee>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a56      	ldr	r2, [pc, #344]	; (80053cc <HAL_DMA_Start_IT+0x224>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d00e      	beq.n	8005296 <HAL_DMA_Start_IT+0xee>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a54      	ldr	r2, [pc, #336]	; (80053d0 <HAL_DMA_Start_IT+0x228>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d009      	beq.n	8005296 <HAL_DMA_Start_IT+0xee>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a53      	ldr	r2, [pc, #332]	; (80053d4 <HAL_DMA_Start_IT+0x22c>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d004      	beq.n	8005296 <HAL_DMA_Start_IT+0xee>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a51      	ldr	r2, [pc, #324]	; (80053d8 <HAL_DMA_Start_IT+0x230>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d108      	bne.n	80052a8 <HAL_DMA_Start_IT+0x100>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0201 	bic.w	r2, r2, #1
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	e007      	b.n	80052b8 <HAL_DMA_Start_IT+0x110>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0201 	bic.w	r2, r2, #1
 80052b6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	68b9      	ldr	r1, [r7, #8]
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f001 fe6a 	bl	8006f98 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a34      	ldr	r2, [pc, #208]	; (800539c <HAL_DMA_Start_IT+0x1f4>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d04a      	beq.n	8005364 <HAL_DMA_Start_IT+0x1bc>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a33      	ldr	r2, [pc, #204]	; (80053a0 <HAL_DMA_Start_IT+0x1f8>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d045      	beq.n	8005364 <HAL_DMA_Start_IT+0x1bc>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a31      	ldr	r2, [pc, #196]	; (80053a4 <HAL_DMA_Start_IT+0x1fc>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d040      	beq.n	8005364 <HAL_DMA_Start_IT+0x1bc>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a30      	ldr	r2, [pc, #192]	; (80053a8 <HAL_DMA_Start_IT+0x200>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d03b      	beq.n	8005364 <HAL_DMA_Start_IT+0x1bc>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a2e      	ldr	r2, [pc, #184]	; (80053ac <HAL_DMA_Start_IT+0x204>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d036      	beq.n	8005364 <HAL_DMA_Start_IT+0x1bc>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a2d      	ldr	r2, [pc, #180]	; (80053b0 <HAL_DMA_Start_IT+0x208>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d031      	beq.n	8005364 <HAL_DMA_Start_IT+0x1bc>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a2b      	ldr	r2, [pc, #172]	; (80053b4 <HAL_DMA_Start_IT+0x20c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d02c      	beq.n	8005364 <HAL_DMA_Start_IT+0x1bc>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a2a      	ldr	r2, [pc, #168]	; (80053b8 <HAL_DMA_Start_IT+0x210>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d027      	beq.n	8005364 <HAL_DMA_Start_IT+0x1bc>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a28      	ldr	r2, [pc, #160]	; (80053bc <HAL_DMA_Start_IT+0x214>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d022      	beq.n	8005364 <HAL_DMA_Start_IT+0x1bc>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a27      	ldr	r2, [pc, #156]	; (80053c0 <HAL_DMA_Start_IT+0x218>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d01d      	beq.n	8005364 <HAL_DMA_Start_IT+0x1bc>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a25      	ldr	r2, [pc, #148]	; (80053c4 <HAL_DMA_Start_IT+0x21c>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d018      	beq.n	8005364 <HAL_DMA_Start_IT+0x1bc>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a24      	ldr	r2, [pc, #144]	; (80053c8 <HAL_DMA_Start_IT+0x220>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d013      	beq.n	8005364 <HAL_DMA_Start_IT+0x1bc>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a22      	ldr	r2, [pc, #136]	; (80053cc <HAL_DMA_Start_IT+0x224>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d00e      	beq.n	8005364 <HAL_DMA_Start_IT+0x1bc>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a21      	ldr	r2, [pc, #132]	; (80053d0 <HAL_DMA_Start_IT+0x228>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d009      	beq.n	8005364 <HAL_DMA_Start_IT+0x1bc>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a1f      	ldr	r2, [pc, #124]	; (80053d4 <HAL_DMA_Start_IT+0x22c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d004      	beq.n	8005364 <HAL_DMA_Start_IT+0x1bc>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a1e      	ldr	r2, [pc, #120]	; (80053d8 <HAL_DMA_Start_IT+0x230>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d101      	bne.n	8005368 <HAL_DMA_Start_IT+0x1c0>
 8005364:	2301      	movs	r3, #1
 8005366:	e000      	b.n	800536a <HAL_DMA_Start_IT+0x1c2>
 8005368:	2300      	movs	r3, #0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d036      	beq.n	80053dc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f023 021e 	bic.w	r2, r3, #30
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f042 0216 	orr.w	r2, r2, #22
 8005380:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	2b00      	cmp	r3, #0
 8005388:	d03e      	beq.n	8005408 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f042 0208 	orr.w	r2, r2, #8
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	e035      	b.n	8005408 <HAL_DMA_Start_IT+0x260>
 800539c:	40020010 	.word	0x40020010
 80053a0:	40020028 	.word	0x40020028
 80053a4:	40020040 	.word	0x40020040
 80053a8:	40020058 	.word	0x40020058
 80053ac:	40020070 	.word	0x40020070
 80053b0:	40020088 	.word	0x40020088
 80053b4:	400200a0 	.word	0x400200a0
 80053b8:	400200b8 	.word	0x400200b8
 80053bc:	40020410 	.word	0x40020410
 80053c0:	40020428 	.word	0x40020428
 80053c4:	40020440 	.word	0x40020440
 80053c8:	40020458 	.word	0x40020458
 80053cc:	40020470 	.word	0x40020470
 80053d0:	40020488 	.word	0x40020488
 80053d4:	400204a0 	.word	0x400204a0
 80053d8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f023 020e 	bic.w	r2, r3, #14
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 020a 	orr.w	r2, r2, #10
 80053ee:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d007      	beq.n	8005408 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0204 	orr.w	r2, r2, #4
 8005406:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a83      	ldr	r2, [pc, #524]	; (800561c <HAL_DMA_Start_IT+0x474>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d072      	beq.n	80054f8 <HAL_DMA_Start_IT+0x350>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a82      	ldr	r2, [pc, #520]	; (8005620 <HAL_DMA_Start_IT+0x478>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d06d      	beq.n	80054f8 <HAL_DMA_Start_IT+0x350>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a80      	ldr	r2, [pc, #512]	; (8005624 <HAL_DMA_Start_IT+0x47c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d068      	beq.n	80054f8 <HAL_DMA_Start_IT+0x350>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a7f      	ldr	r2, [pc, #508]	; (8005628 <HAL_DMA_Start_IT+0x480>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d063      	beq.n	80054f8 <HAL_DMA_Start_IT+0x350>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a7d      	ldr	r2, [pc, #500]	; (800562c <HAL_DMA_Start_IT+0x484>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d05e      	beq.n	80054f8 <HAL_DMA_Start_IT+0x350>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a7c      	ldr	r2, [pc, #496]	; (8005630 <HAL_DMA_Start_IT+0x488>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d059      	beq.n	80054f8 <HAL_DMA_Start_IT+0x350>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a7a      	ldr	r2, [pc, #488]	; (8005634 <HAL_DMA_Start_IT+0x48c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d054      	beq.n	80054f8 <HAL_DMA_Start_IT+0x350>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a79      	ldr	r2, [pc, #484]	; (8005638 <HAL_DMA_Start_IT+0x490>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d04f      	beq.n	80054f8 <HAL_DMA_Start_IT+0x350>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a77      	ldr	r2, [pc, #476]	; (800563c <HAL_DMA_Start_IT+0x494>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d04a      	beq.n	80054f8 <HAL_DMA_Start_IT+0x350>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a76      	ldr	r2, [pc, #472]	; (8005640 <HAL_DMA_Start_IT+0x498>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d045      	beq.n	80054f8 <HAL_DMA_Start_IT+0x350>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a74      	ldr	r2, [pc, #464]	; (8005644 <HAL_DMA_Start_IT+0x49c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d040      	beq.n	80054f8 <HAL_DMA_Start_IT+0x350>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a73      	ldr	r2, [pc, #460]	; (8005648 <HAL_DMA_Start_IT+0x4a0>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d03b      	beq.n	80054f8 <HAL_DMA_Start_IT+0x350>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a71      	ldr	r2, [pc, #452]	; (800564c <HAL_DMA_Start_IT+0x4a4>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d036      	beq.n	80054f8 <HAL_DMA_Start_IT+0x350>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a70      	ldr	r2, [pc, #448]	; (8005650 <HAL_DMA_Start_IT+0x4a8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d031      	beq.n	80054f8 <HAL_DMA_Start_IT+0x350>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a6e      	ldr	r2, [pc, #440]	; (8005654 <HAL_DMA_Start_IT+0x4ac>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d02c      	beq.n	80054f8 <HAL_DMA_Start_IT+0x350>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a6d      	ldr	r2, [pc, #436]	; (8005658 <HAL_DMA_Start_IT+0x4b0>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d027      	beq.n	80054f8 <HAL_DMA_Start_IT+0x350>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a6b      	ldr	r2, [pc, #428]	; (800565c <HAL_DMA_Start_IT+0x4b4>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d022      	beq.n	80054f8 <HAL_DMA_Start_IT+0x350>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a6a      	ldr	r2, [pc, #424]	; (8005660 <HAL_DMA_Start_IT+0x4b8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d01d      	beq.n	80054f8 <HAL_DMA_Start_IT+0x350>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a68      	ldr	r2, [pc, #416]	; (8005664 <HAL_DMA_Start_IT+0x4bc>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d018      	beq.n	80054f8 <HAL_DMA_Start_IT+0x350>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a67      	ldr	r2, [pc, #412]	; (8005668 <HAL_DMA_Start_IT+0x4c0>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d013      	beq.n	80054f8 <HAL_DMA_Start_IT+0x350>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a65      	ldr	r2, [pc, #404]	; (800566c <HAL_DMA_Start_IT+0x4c4>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d00e      	beq.n	80054f8 <HAL_DMA_Start_IT+0x350>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a64      	ldr	r2, [pc, #400]	; (8005670 <HAL_DMA_Start_IT+0x4c8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d009      	beq.n	80054f8 <HAL_DMA_Start_IT+0x350>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a62      	ldr	r2, [pc, #392]	; (8005674 <HAL_DMA_Start_IT+0x4cc>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d004      	beq.n	80054f8 <HAL_DMA_Start_IT+0x350>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a61      	ldr	r2, [pc, #388]	; (8005678 <HAL_DMA_Start_IT+0x4d0>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d101      	bne.n	80054fc <HAL_DMA_Start_IT+0x354>
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <HAL_DMA_Start_IT+0x356>
 80054fc:	2300      	movs	r3, #0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d01a      	beq.n	8005538 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d007      	beq.n	8005520 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800551a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800551e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005524:	2b00      	cmp	r3, #0
 8005526:	d007      	beq.n	8005538 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005532:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005536:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a37      	ldr	r2, [pc, #220]	; (800561c <HAL_DMA_Start_IT+0x474>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d04a      	beq.n	80055d8 <HAL_DMA_Start_IT+0x430>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a36      	ldr	r2, [pc, #216]	; (8005620 <HAL_DMA_Start_IT+0x478>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d045      	beq.n	80055d8 <HAL_DMA_Start_IT+0x430>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a34      	ldr	r2, [pc, #208]	; (8005624 <HAL_DMA_Start_IT+0x47c>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d040      	beq.n	80055d8 <HAL_DMA_Start_IT+0x430>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a33      	ldr	r2, [pc, #204]	; (8005628 <HAL_DMA_Start_IT+0x480>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d03b      	beq.n	80055d8 <HAL_DMA_Start_IT+0x430>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a31      	ldr	r2, [pc, #196]	; (800562c <HAL_DMA_Start_IT+0x484>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d036      	beq.n	80055d8 <HAL_DMA_Start_IT+0x430>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a30      	ldr	r2, [pc, #192]	; (8005630 <HAL_DMA_Start_IT+0x488>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d031      	beq.n	80055d8 <HAL_DMA_Start_IT+0x430>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a2e      	ldr	r2, [pc, #184]	; (8005634 <HAL_DMA_Start_IT+0x48c>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d02c      	beq.n	80055d8 <HAL_DMA_Start_IT+0x430>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a2d      	ldr	r2, [pc, #180]	; (8005638 <HAL_DMA_Start_IT+0x490>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d027      	beq.n	80055d8 <HAL_DMA_Start_IT+0x430>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a2b      	ldr	r2, [pc, #172]	; (800563c <HAL_DMA_Start_IT+0x494>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d022      	beq.n	80055d8 <HAL_DMA_Start_IT+0x430>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a2a      	ldr	r2, [pc, #168]	; (8005640 <HAL_DMA_Start_IT+0x498>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d01d      	beq.n	80055d8 <HAL_DMA_Start_IT+0x430>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a28      	ldr	r2, [pc, #160]	; (8005644 <HAL_DMA_Start_IT+0x49c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d018      	beq.n	80055d8 <HAL_DMA_Start_IT+0x430>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a27      	ldr	r2, [pc, #156]	; (8005648 <HAL_DMA_Start_IT+0x4a0>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d013      	beq.n	80055d8 <HAL_DMA_Start_IT+0x430>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a25      	ldr	r2, [pc, #148]	; (800564c <HAL_DMA_Start_IT+0x4a4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00e      	beq.n	80055d8 <HAL_DMA_Start_IT+0x430>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a24      	ldr	r2, [pc, #144]	; (8005650 <HAL_DMA_Start_IT+0x4a8>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d009      	beq.n	80055d8 <HAL_DMA_Start_IT+0x430>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a22      	ldr	r2, [pc, #136]	; (8005654 <HAL_DMA_Start_IT+0x4ac>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d004      	beq.n	80055d8 <HAL_DMA_Start_IT+0x430>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a21      	ldr	r2, [pc, #132]	; (8005658 <HAL_DMA_Start_IT+0x4b0>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d108      	bne.n	80055ea <HAL_DMA_Start_IT+0x442>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0201 	orr.w	r2, r2, #1
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	e012      	b.n	8005610 <HAL_DMA_Start_IT+0x468>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f042 0201 	orr.w	r2, r2, #1
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	e009      	b.n	8005610 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005602:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005610:	7dfb      	ldrb	r3, [r7, #23]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	40020010 	.word	0x40020010
 8005620:	40020028 	.word	0x40020028
 8005624:	40020040 	.word	0x40020040
 8005628:	40020058 	.word	0x40020058
 800562c:	40020070 	.word	0x40020070
 8005630:	40020088 	.word	0x40020088
 8005634:	400200a0 	.word	0x400200a0
 8005638:	400200b8 	.word	0x400200b8
 800563c:	40020410 	.word	0x40020410
 8005640:	40020428 	.word	0x40020428
 8005644:	40020440 	.word	0x40020440
 8005648:	40020458 	.word	0x40020458
 800564c:	40020470 	.word	0x40020470
 8005650:	40020488 	.word	0x40020488
 8005654:	400204a0 	.word	0x400204a0
 8005658:	400204b8 	.word	0x400204b8
 800565c:	58025408 	.word	0x58025408
 8005660:	5802541c 	.word	0x5802541c
 8005664:	58025430 	.word	0x58025430
 8005668:	58025444 	.word	0x58025444
 800566c:	58025458 	.word	0x58025458
 8005670:	5802546c 	.word	0x5802546c
 8005674:	58025480 	.word	0x58025480
 8005678:	58025494 	.word	0x58025494

0800567c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005684:	f7fd f9d6 	bl	8002a34 <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e2dc      	b.n	8005c4e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d008      	beq.n	80056b2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2280      	movs	r2, #128	; 0x80
 80056a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e2cd      	b.n	8005c4e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a76      	ldr	r2, [pc, #472]	; (8005890 <HAL_DMA_Abort+0x214>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d04a      	beq.n	8005752 <HAL_DMA_Abort+0xd6>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a74      	ldr	r2, [pc, #464]	; (8005894 <HAL_DMA_Abort+0x218>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d045      	beq.n	8005752 <HAL_DMA_Abort+0xd6>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a73      	ldr	r2, [pc, #460]	; (8005898 <HAL_DMA_Abort+0x21c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d040      	beq.n	8005752 <HAL_DMA_Abort+0xd6>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a71      	ldr	r2, [pc, #452]	; (800589c <HAL_DMA_Abort+0x220>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d03b      	beq.n	8005752 <HAL_DMA_Abort+0xd6>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a70      	ldr	r2, [pc, #448]	; (80058a0 <HAL_DMA_Abort+0x224>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d036      	beq.n	8005752 <HAL_DMA_Abort+0xd6>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a6e      	ldr	r2, [pc, #440]	; (80058a4 <HAL_DMA_Abort+0x228>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d031      	beq.n	8005752 <HAL_DMA_Abort+0xd6>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a6d      	ldr	r2, [pc, #436]	; (80058a8 <HAL_DMA_Abort+0x22c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d02c      	beq.n	8005752 <HAL_DMA_Abort+0xd6>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a6b      	ldr	r2, [pc, #428]	; (80058ac <HAL_DMA_Abort+0x230>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d027      	beq.n	8005752 <HAL_DMA_Abort+0xd6>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a6a      	ldr	r2, [pc, #424]	; (80058b0 <HAL_DMA_Abort+0x234>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d022      	beq.n	8005752 <HAL_DMA_Abort+0xd6>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a68      	ldr	r2, [pc, #416]	; (80058b4 <HAL_DMA_Abort+0x238>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d01d      	beq.n	8005752 <HAL_DMA_Abort+0xd6>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a67      	ldr	r2, [pc, #412]	; (80058b8 <HAL_DMA_Abort+0x23c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d018      	beq.n	8005752 <HAL_DMA_Abort+0xd6>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a65      	ldr	r2, [pc, #404]	; (80058bc <HAL_DMA_Abort+0x240>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d013      	beq.n	8005752 <HAL_DMA_Abort+0xd6>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a64      	ldr	r2, [pc, #400]	; (80058c0 <HAL_DMA_Abort+0x244>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d00e      	beq.n	8005752 <HAL_DMA_Abort+0xd6>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a62      	ldr	r2, [pc, #392]	; (80058c4 <HAL_DMA_Abort+0x248>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d009      	beq.n	8005752 <HAL_DMA_Abort+0xd6>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a61      	ldr	r2, [pc, #388]	; (80058c8 <HAL_DMA_Abort+0x24c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d004      	beq.n	8005752 <HAL_DMA_Abort+0xd6>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a5f      	ldr	r2, [pc, #380]	; (80058cc <HAL_DMA_Abort+0x250>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d101      	bne.n	8005756 <HAL_DMA_Abort+0xda>
 8005752:	2301      	movs	r3, #1
 8005754:	e000      	b.n	8005758 <HAL_DMA_Abort+0xdc>
 8005756:	2300      	movs	r3, #0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d013      	beq.n	8005784 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 021e 	bic.w	r2, r2, #30
 800576a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	695a      	ldr	r2, [r3, #20]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800577a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	617b      	str	r3, [r7, #20]
 8005782:	e00a      	b.n	800579a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 020e 	bic.w	r2, r2, #14
 8005792:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a3c      	ldr	r2, [pc, #240]	; (8005890 <HAL_DMA_Abort+0x214>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d072      	beq.n	800588a <HAL_DMA_Abort+0x20e>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a3a      	ldr	r2, [pc, #232]	; (8005894 <HAL_DMA_Abort+0x218>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d06d      	beq.n	800588a <HAL_DMA_Abort+0x20e>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a39      	ldr	r2, [pc, #228]	; (8005898 <HAL_DMA_Abort+0x21c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d068      	beq.n	800588a <HAL_DMA_Abort+0x20e>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a37      	ldr	r2, [pc, #220]	; (800589c <HAL_DMA_Abort+0x220>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d063      	beq.n	800588a <HAL_DMA_Abort+0x20e>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a36      	ldr	r2, [pc, #216]	; (80058a0 <HAL_DMA_Abort+0x224>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d05e      	beq.n	800588a <HAL_DMA_Abort+0x20e>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a34      	ldr	r2, [pc, #208]	; (80058a4 <HAL_DMA_Abort+0x228>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d059      	beq.n	800588a <HAL_DMA_Abort+0x20e>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a33      	ldr	r2, [pc, #204]	; (80058a8 <HAL_DMA_Abort+0x22c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d054      	beq.n	800588a <HAL_DMA_Abort+0x20e>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a31      	ldr	r2, [pc, #196]	; (80058ac <HAL_DMA_Abort+0x230>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d04f      	beq.n	800588a <HAL_DMA_Abort+0x20e>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a30      	ldr	r2, [pc, #192]	; (80058b0 <HAL_DMA_Abort+0x234>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d04a      	beq.n	800588a <HAL_DMA_Abort+0x20e>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a2e      	ldr	r2, [pc, #184]	; (80058b4 <HAL_DMA_Abort+0x238>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d045      	beq.n	800588a <HAL_DMA_Abort+0x20e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a2d      	ldr	r2, [pc, #180]	; (80058b8 <HAL_DMA_Abort+0x23c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d040      	beq.n	800588a <HAL_DMA_Abort+0x20e>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a2b      	ldr	r2, [pc, #172]	; (80058bc <HAL_DMA_Abort+0x240>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d03b      	beq.n	800588a <HAL_DMA_Abort+0x20e>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a2a      	ldr	r2, [pc, #168]	; (80058c0 <HAL_DMA_Abort+0x244>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d036      	beq.n	800588a <HAL_DMA_Abort+0x20e>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a28      	ldr	r2, [pc, #160]	; (80058c4 <HAL_DMA_Abort+0x248>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d031      	beq.n	800588a <HAL_DMA_Abort+0x20e>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a27      	ldr	r2, [pc, #156]	; (80058c8 <HAL_DMA_Abort+0x24c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d02c      	beq.n	800588a <HAL_DMA_Abort+0x20e>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a25      	ldr	r2, [pc, #148]	; (80058cc <HAL_DMA_Abort+0x250>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d027      	beq.n	800588a <HAL_DMA_Abort+0x20e>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a24      	ldr	r2, [pc, #144]	; (80058d0 <HAL_DMA_Abort+0x254>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d022      	beq.n	800588a <HAL_DMA_Abort+0x20e>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a22      	ldr	r2, [pc, #136]	; (80058d4 <HAL_DMA_Abort+0x258>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d01d      	beq.n	800588a <HAL_DMA_Abort+0x20e>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a21      	ldr	r2, [pc, #132]	; (80058d8 <HAL_DMA_Abort+0x25c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d018      	beq.n	800588a <HAL_DMA_Abort+0x20e>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a1f      	ldr	r2, [pc, #124]	; (80058dc <HAL_DMA_Abort+0x260>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d013      	beq.n	800588a <HAL_DMA_Abort+0x20e>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a1e      	ldr	r2, [pc, #120]	; (80058e0 <HAL_DMA_Abort+0x264>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00e      	beq.n	800588a <HAL_DMA_Abort+0x20e>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a1c      	ldr	r2, [pc, #112]	; (80058e4 <HAL_DMA_Abort+0x268>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d009      	beq.n	800588a <HAL_DMA_Abort+0x20e>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a1b      	ldr	r2, [pc, #108]	; (80058e8 <HAL_DMA_Abort+0x26c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d004      	beq.n	800588a <HAL_DMA_Abort+0x20e>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a19      	ldr	r2, [pc, #100]	; (80058ec <HAL_DMA_Abort+0x270>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d132      	bne.n	80058f0 <HAL_DMA_Abort+0x274>
 800588a:	2301      	movs	r3, #1
 800588c:	e031      	b.n	80058f2 <HAL_DMA_Abort+0x276>
 800588e:	bf00      	nop
 8005890:	40020010 	.word	0x40020010
 8005894:	40020028 	.word	0x40020028
 8005898:	40020040 	.word	0x40020040
 800589c:	40020058 	.word	0x40020058
 80058a0:	40020070 	.word	0x40020070
 80058a4:	40020088 	.word	0x40020088
 80058a8:	400200a0 	.word	0x400200a0
 80058ac:	400200b8 	.word	0x400200b8
 80058b0:	40020410 	.word	0x40020410
 80058b4:	40020428 	.word	0x40020428
 80058b8:	40020440 	.word	0x40020440
 80058bc:	40020458 	.word	0x40020458
 80058c0:	40020470 	.word	0x40020470
 80058c4:	40020488 	.word	0x40020488
 80058c8:	400204a0 	.word	0x400204a0
 80058cc:	400204b8 	.word	0x400204b8
 80058d0:	58025408 	.word	0x58025408
 80058d4:	5802541c 	.word	0x5802541c
 80058d8:	58025430 	.word	0x58025430
 80058dc:	58025444 	.word	0x58025444
 80058e0:	58025458 	.word	0x58025458
 80058e4:	5802546c 	.word	0x5802546c
 80058e8:	58025480 	.word	0x58025480
 80058ec:	58025494 	.word	0x58025494
 80058f0:	2300      	movs	r3, #0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d007      	beq.n	8005906 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005904:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a6d      	ldr	r2, [pc, #436]	; (8005ac0 <HAL_DMA_Abort+0x444>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d04a      	beq.n	80059a6 <HAL_DMA_Abort+0x32a>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a6b      	ldr	r2, [pc, #428]	; (8005ac4 <HAL_DMA_Abort+0x448>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d045      	beq.n	80059a6 <HAL_DMA_Abort+0x32a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a6a      	ldr	r2, [pc, #424]	; (8005ac8 <HAL_DMA_Abort+0x44c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d040      	beq.n	80059a6 <HAL_DMA_Abort+0x32a>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a68      	ldr	r2, [pc, #416]	; (8005acc <HAL_DMA_Abort+0x450>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d03b      	beq.n	80059a6 <HAL_DMA_Abort+0x32a>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a67      	ldr	r2, [pc, #412]	; (8005ad0 <HAL_DMA_Abort+0x454>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d036      	beq.n	80059a6 <HAL_DMA_Abort+0x32a>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a65      	ldr	r2, [pc, #404]	; (8005ad4 <HAL_DMA_Abort+0x458>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d031      	beq.n	80059a6 <HAL_DMA_Abort+0x32a>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a64      	ldr	r2, [pc, #400]	; (8005ad8 <HAL_DMA_Abort+0x45c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d02c      	beq.n	80059a6 <HAL_DMA_Abort+0x32a>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a62      	ldr	r2, [pc, #392]	; (8005adc <HAL_DMA_Abort+0x460>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d027      	beq.n	80059a6 <HAL_DMA_Abort+0x32a>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a61      	ldr	r2, [pc, #388]	; (8005ae0 <HAL_DMA_Abort+0x464>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d022      	beq.n	80059a6 <HAL_DMA_Abort+0x32a>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a5f      	ldr	r2, [pc, #380]	; (8005ae4 <HAL_DMA_Abort+0x468>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d01d      	beq.n	80059a6 <HAL_DMA_Abort+0x32a>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a5e      	ldr	r2, [pc, #376]	; (8005ae8 <HAL_DMA_Abort+0x46c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d018      	beq.n	80059a6 <HAL_DMA_Abort+0x32a>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a5c      	ldr	r2, [pc, #368]	; (8005aec <HAL_DMA_Abort+0x470>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d013      	beq.n	80059a6 <HAL_DMA_Abort+0x32a>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a5b      	ldr	r2, [pc, #364]	; (8005af0 <HAL_DMA_Abort+0x474>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d00e      	beq.n	80059a6 <HAL_DMA_Abort+0x32a>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a59      	ldr	r2, [pc, #356]	; (8005af4 <HAL_DMA_Abort+0x478>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d009      	beq.n	80059a6 <HAL_DMA_Abort+0x32a>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a58      	ldr	r2, [pc, #352]	; (8005af8 <HAL_DMA_Abort+0x47c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d004      	beq.n	80059a6 <HAL_DMA_Abort+0x32a>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a56      	ldr	r2, [pc, #344]	; (8005afc <HAL_DMA_Abort+0x480>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d108      	bne.n	80059b8 <HAL_DMA_Abort+0x33c>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0201 	bic.w	r2, r2, #1
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	e007      	b.n	80059c8 <HAL_DMA_Abort+0x34c>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 0201 	bic.w	r2, r2, #1
 80059c6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80059c8:	e013      	b.n	80059f2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059ca:	f7fd f833 	bl	8002a34 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b05      	cmp	r3, #5
 80059d6:	d90c      	bls.n	80059f2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2220      	movs	r2, #32
 80059dc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2203      	movs	r2, #3
 80059e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e12d      	b.n	8005c4e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1e5      	bne.n	80059ca <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a2f      	ldr	r2, [pc, #188]	; (8005ac0 <HAL_DMA_Abort+0x444>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d04a      	beq.n	8005a9e <HAL_DMA_Abort+0x422>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a2d      	ldr	r2, [pc, #180]	; (8005ac4 <HAL_DMA_Abort+0x448>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d045      	beq.n	8005a9e <HAL_DMA_Abort+0x422>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a2c      	ldr	r2, [pc, #176]	; (8005ac8 <HAL_DMA_Abort+0x44c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d040      	beq.n	8005a9e <HAL_DMA_Abort+0x422>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a2a      	ldr	r2, [pc, #168]	; (8005acc <HAL_DMA_Abort+0x450>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d03b      	beq.n	8005a9e <HAL_DMA_Abort+0x422>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a29      	ldr	r2, [pc, #164]	; (8005ad0 <HAL_DMA_Abort+0x454>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d036      	beq.n	8005a9e <HAL_DMA_Abort+0x422>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a27      	ldr	r2, [pc, #156]	; (8005ad4 <HAL_DMA_Abort+0x458>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d031      	beq.n	8005a9e <HAL_DMA_Abort+0x422>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a26      	ldr	r2, [pc, #152]	; (8005ad8 <HAL_DMA_Abort+0x45c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d02c      	beq.n	8005a9e <HAL_DMA_Abort+0x422>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a24      	ldr	r2, [pc, #144]	; (8005adc <HAL_DMA_Abort+0x460>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d027      	beq.n	8005a9e <HAL_DMA_Abort+0x422>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a23      	ldr	r2, [pc, #140]	; (8005ae0 <HAL_DMA_Abort+0x464>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d022      	beq.n	8005a9e <HAL_DMA_Abort+0x422>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a21      	ldr	r2, [pc, #132]	; (8005ae4 <HAL_DMA_Abort+0x468>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d01d      	beq.n	8005a9e <HAL_DMA_Abort+0x422>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a20      	ldr	r2, [pc, #128]	; (8005ae8 <HAL_DMA_Abort+0x46c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d018      	beq.n	8005a9e <HAL_DMA_Abort+0x422>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a1e      	ldr	r2, [pc, #120]	; (8005aec <HAL_DMA_Abort+0x470>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d013      	beq.n	8005a9e <HAL_DMA_Abort+0x422>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a1d      	ldr	r2, [pc, #116]	; (8005af0 <HAL_DMA_Abort+0x474>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d00e      	beq.n	8005a9e <HAL_DMA_Abort+0x422>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a1b      	ldr	r2, [pc, #108]	; (8005af4 <HAL_DMA_Abort+0x478>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d009      	beq.n	8005a9e <HAL_DMA_Abort+0x422>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a1a      	ldr	r2, [pc, #104]	; (8005af8 <HAL_DMA_Abort+0x47c>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d004      	beq.n	8005a9e <HAL_DMA_Abort+0x422>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a18      	ldr	r2, [pc, #96]	; (8005afc <HAL_DMA_Abort+0x480>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d101      	bne.n	8005aa2 <HAL_DMA_Abort+0x426>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e000      	b.n	8005aa4 <HAL_DMA_Abort+0x428>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d02b      	beq.n	8005b00 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aac:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab2:	f003 031f 	and.w	r3, r3, #31
 8005ab6:	223f      	movs	r2, #63	; 0x3f
 8005ab8:	409a      	lsls	r2, r3
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	609a      	str	r2, [r3, #8]
 8005abe:	e02a      	b.n	8005b16 <HAL_DMA_Abort+0x49a>
 8005ac0:	40020010 	.word	0x40020010
 8005ac4:	40020028 	.word	0x40020028
 8005ac8:	40020040 	.word	0x40020040
 8005acc:	40020058 	.word	0x40020058
 8005ad0:	40020070 	.word	0x40020070
 8005ad4:	40020088 	.word	0x40020088
 8005ad8:	400200a0 	.word	0x400200a0
 8005adc:	400200b8 	.word	0x400200b8
 8005ae0:	40020410 	.word	0x40020410
 8005ae4:	40020428 	.word	0x40020428
 8005ae8:	40020440 	.word	0x40020440
 8005aec:	40020458 	.word	0x40020458
 8005af0:	40020470 	.word	0x40020470
 8005af4:	40020488 	.word	0x40020488
 8005af8:	400204a0 	.word	0x400204a0
 8005afc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b04:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b0a:	f003 031f 	and.w	r3, r3, #31
 8005b0e:	2201      	movs	r2, #1
 8005b10:	409a      	lsls	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a4f      	ldr	r2, [pc, #316]	; (8005c58 <HAL_DMA_Abort+0x5dc>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d072      	beq.n	8005c06 <HAL_DMA_Abort+0x58a>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a4d      	ldr	r2, [pc, #308]	; (8005c5c <HAL_DMA_Abort+0x5e0>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d06d      	beq.n	8005c06 <HAL_DMA_Abort+0x58a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a4c      	ldr	r2, [pc, #304]	; (8005c60 <HAL_DMA_Abort+0x5e4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d068      	beq.n	8005c06 <HAL_DMA_Abort+0x58a>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a4a      	ldr	r2, [pc, #296]	; (8005c64 <HAL_DMA_Abort+0x5e8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d063      	beq.n	8005c06 <HAL_DMA_Abort+0x58a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a49      	ldr	r2, [pc, #292]	; (8005c68 <HAL_DMA_Abort+0x5ec>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d05e      	beq.n	8005c06 <HAL_DMA_Abort+0x58a>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a47      	ldr	r2, [pc, #284]	; (8005c6c <HAL_DMA_Abort+0x5f0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d059      	beq.n	8005c06 <HAL_DMA_Abort+0x58a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a46      	ldr	r2, [pc, #280]	; (8005c70 <HAL_DMA_Abort+0x5f4>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d054      	beq.n	8005c06 <HAL_DMA_Abort+0x58a>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a44      	ldr	r2, [pc, #272]	; (8005c74 <HAL_DMA_Abort+0x5f8>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d04f      	beq.n	8005c06 <HAL_DMA_Abort+0x58a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a43      	ldr	r2, [pc, #268]	; (8005c78 <HAL_DMA_Abort+0x5fc>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d04a      	beq.n	8005c06 <HAL_DMA_Abort+0x58a>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a41      	ldr	r2, [pc, #260]	; (8005c7c <HAL_DMA_Abort+0x600>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d045      	beq.n	8005c06 <HAL_DMA_Abort+0x58a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a40      	ldr	r2, [pc, #256]	; (8005c80 <HAL_DMA_Abort+0x604>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d040      	beq.n	8005c06 <HAL_DMA_Abort+0x58a>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a3e      	ldr	r2, [pc, #248]	; (8005c84 <HAL_DMA_Abort+0x608>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d03b      	beq.n	8005c06 <HAL_DMA_Abort+0x58a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a3d      	ldr	r2, [pc, #244]	; (8005c88 <HAL_DMA_Abort+0x60c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d036      	beq.n	8005c06 <HAL_DMA_Abort+0x58a>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a3b      	ldr	r2, [pc, #236]	; (8005c8c <HAL_DMA_Abort+0x610>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d031      	beq.n	8005c06 <HAL_DMA_Abort+0x58a>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a3a      	ldr	r2, [pc, #232]	; (8005c90 <HAL_DMA_Abort+0x614>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d02c      	beq.n	8005c06 <HAL_DMA_Abort+0x58a>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a38      	ldr	r2, [pc, #224]	; (8005c94 <HAL_DMA_Abort+0x618>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d027      	beq.n	8005c06 <HAL_DMA_Abort+0x58a>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a37      	ldr	r2, [pc, #220]	; (8005c98 <HAL_DMA_Abort+0x61c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d022      	beq.n	8005c06 <HAL_DMA_Abort+0x58a>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a35      	ldr	r2, [pc, #212]	; (8005c9c <HAL_DMA_Abort+0x620>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d01d      	beq.n	8005c06 <HAL_DMA_Abort+0x58a>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a34      	ldr	r2, [pc, #208]	; (8005ca0 <HAL_DMA_Abort+0x624>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d018      	beq.n	8005c06 <HAL_DMA_Abort+0x58a>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a32      	ldr	r2, [pc, #200]	; (8005ca4 <HAL_DMA_Abort+0x628>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d013      	beq.n	8005c06 <HAL_DMA_Abort+0x58a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a31      	ldr	r2, [pc, #196]	; (8005ca8 <HAL_DMA_Abort+0x62c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00e      	beq.n	8005c06 <HAL_DMA_Abort+0x58a>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a2f      	ldr	r2, [pc, #188]	; (8005cac <HAL_DMA_Abort+0x630>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d009      	beq.n	8005c06 <HAL_DMA_Abort+0x58a>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a2e      	ldr	r2, [pc, #184]	; (8005cb0 <HAL_DMA_Abort+0x634>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d004      	beq.n	8005c06 <HAL_DMA_Abort+0x58a>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a2c      	ldr	r2, [pc, #176]	; (8005cb4 <HAL_DMA_Abort+0x638>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d101      	bne.n	8005c0a <HAL_DMA_Abort+0x58e>
 8005c06:	2301      	movs	r3, #1
 8005c08:	e000      	b.n	8005c0c <HAL_DMA_Abort+0x590>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d015      	beq.n	8005c3c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c18:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00c      	beq.n	8005c3c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c30:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c3a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	40020010 	.word	0x40020010
 8005c5c:	40020028 	.word	0x40020028
 8005c60:	40020040 	.word	0x40020040
 8005c64:	40020058 	.word	0x40020058
 8005c68:	40020070 	.word	0x40020070
 8005c6c:	40020088 	.word	0x40020088
 8005c70:	400200a0 	.word	0x400200a0
 8005c74:	400200b8 	.word	0x400200b8
 8005c78:	40020410 	.word	0x40020410
 8005c7c:	40020428 	.word	0x40020428
 8005c80:	40020440 	.word	0x40020440
 8005c84:	40020458 	.word	0x40020458
 8005c88:	40020470 	.word	0x40020470
 8005c8c:	40020488 	.word	0x40020488
 8005c90:	400204a0 	.word	0x400204a0
 8005c94:	400204b8 	.word	0x400204b8
 8005c98:	58025408 	.word	0x58025408
 8005c9c:	5802541c 	.word	0x5802541c
 8005ca0:	58025430 	.word	0x58025430
 8005ca4:	58025444 	.word	0x58025444
 8005ca8:	58025458 	.word	0x58025458
 8005cac:	5802546c 	.word	0x5802546c
 8005cb0:	58025480 	.word	0x58025480
 8005cb4:	58025494 	.word	0x58025494

08005cb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e237      	b.n	800613a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d004      	beq.n	8005ce0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2280      	movs	r2, #128	; 0x80
 8005cda:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e22c      	b.n	800613a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a5c      	ldr	r2, [pc, #368]	; (8005e58 <HAL_DMA_Abort_IT+0x1a0>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d04a      	beq.n	8005d80 <HAL_DMA_Abort_IT+0xc8>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a5b      	ldr	r2, [pc, #364]	; (8005e5c <HAL_DMA_Abort_IT+0x1a4>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d045      	beq.n	8005d80 <HAL_DMA_Abort_IT+0xc8>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a59      	ldr	r2, [pc, #356]	; (8005e60 <HAL_DMA_Abort_IT+0x1a8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d040      	beq.n	8005d80 <HAL_DMA_Abort_IT+0xc8>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a58      	ldr	r2, [pc, #352]	; (8005e64 <HAL_DMA_Abort_IT+0x1ac>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d03b      	beq.n	8005d80 <HAL_DMA_Abort_IT+0xc8>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a56      	ldr	r2, [pc, #344]	; (8005e68 <HAL_DMA_Abort_IT+0x1b0>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d036      	beq.n	8005d80 <HAL_DMA_Abort_IT+0xc8>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a55      	ldr	r2, [pc, #340]	; (8005e6c <HAL_DMA_Abort_IT+0x1b4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d031      	beq.n	8005d80 <HAL_DMA_Abort_IT+0xc8>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a53      	ldr	r2, [pc, #332]	; (8005e70 <HAL_DMA_Abort_IT+0x1b8>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d02c      	beq.n	8005d80 <HAL_DMA_Abort_IT+0xc8>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a52      	ldr	r2, [pc, #328]	; (8005e74 <HAL_DMA_Abort_IT+0x1bc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d027      	beq.n	8005d80 <HAL_DMA_Abort_IT+0xc8>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a50      	ldr	r2, [pc, #320]	; (8005e78 <HAL_DMA_Abort_IT+0x1c0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d022      	beq.n	8005d80 <HAL_DMA_Abort_IT+0xc8>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a4f      	ldr	r2, [pc, #316]	; (8005e7c <HAL_DMA_Abort_IT+0x1c4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d01d      	beq.n	8005d80 <HAL_DMA_Abort_IT+0xc8>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a4d      	ldr	r2, [pc, #308]	; (8005e80 <HAL_DMA_Abort_IT+0x1c8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d018      	beq.n	8005d80 <HAL_DMA_Abort_IT+0xc8>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a4c      	ldr	r2, [pc, #304]	; (8005e84 <HAL_DMA_Abort_IT+0x1cc>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d013      	beq.n	8005d80 <HAL_DMA_Abort_IT+0xc8>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a4a      	ldr	r2, [pc, #296]	; (8005e88 <HAL_DMA_Abort_IT+0x1d0>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d00e      	beq.n	8005d80 <HAL_DMA_Abort_IT+0xc8>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a49      	ldr	r2, [pc, #292]	; (8005e8c <HAL_DMA_Abort_IT+0x1d4>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d009      	beq.n	8005d80 <HAL_DMA_Abort_IT+0xc8>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a47      	ldr	r2, [pc, #284]	; (8005e90 <HAL_DMA_Abort_IT+0x1d8>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d004      	beq.n	8005d80 <HAL_DMA_Abort_IT+0xc8>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a46      	ldr	r2, [pc, #280]	; (8005e94 <HAL_DMA_Abort_IT+0x1dc>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d101      	bne.n	8005d84 <HAL_DMA_Abort_IT+0xcc>
 8005d80:	2301      	movs	r3, #1
 8005d82:	e000      	b.n	8005d86 <HAL_DMA_Abort_IT+0xce>
 8005d84:	2300      	movs	r3, #0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 8086 	beq.w	8005e98 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2204      	movs	r2, #4
 8005d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a2f      	ldr	r2, [pc, #188]	; (8005e58 <HAL_DMA_Abort_IT+0x1a0>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d04a      	beq.n	8005e34 <HAL_DMA_Abort_IT+0x17c>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a2e      	ldr	r2, [pc, #184]	; (8005e5c <HAL_DMA_Abort_IT+0x1a4>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d045      	beq.n	8005e34 <HAL_DMA_Abort_IT+0x17c>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a2c      	ldr	r2, [pc, #176]	; (8005e60 <HAL_DMA_Abort_IT+0x1a8>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d040      	beq.n	8005e34 <HAL_DMA_Abort_IT+0x17c>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a2b      	ldr	r2, [pc, #172]	; (8005e64 <HAL_DMA_Abort_IT+0x1ac>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d03b      	beq.n	8005e34 <HAL_DMA_Abort_IT+0x17c>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a29      	ldr	r2, [pc, #164]	; (8005e68 <HAL_DMA_Abort_IT+0x1b0>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d036      	beq.n	8005e34 <HAL_DMA_Abort_IT+0x17c>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a28      	ldr	r2, [pc, #160]	; (8005e6c <HAL_DMA_Abort_IT+0x1b4>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d031      	beq.n	8005e34 <HAL_DMA_Abort_IT+0x17c>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a26      	ldr	r2, [pc, #152]	; (8005e70 <HAL_DMA_Abort_IT+0x1b8>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d02c      	beq.n	8005e34 <HAL_DMA_Abort_IT+0x17c>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a25      	ldr	r2, [pc, #148]	; (8005e74 <HAL_DMA_Abort_IT+0x1bc>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d027      	beq.n	8005e34 <HAL_DMA_Abort_IT+0x17c>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a23      	ldr	r2, [pc, #140]	; (8005e78 <HAL_DMA_Abort_IT+0x1c0>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d022      	beq.n	8005e34 <HAL_DMA_Abort_IT+0x17c>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a22      	ldr	r2, [pc, #136]	; (8005e7c <HAL_DMA_Abort_IT+0x1c4>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d01d      	beq.n	8005e34 <HAL_DMA_Abort_IT+0x17c>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a20      	ldr	r2, [pc, #128]	; (8005e80 <HAL_DMA_Abort_IT+0x1c8>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d018      	beq.n	8005e34 <HAL_DMA_Abort_IT+0x17c>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a1f      	ldr	r2, [pc, #124]	; (8005e84 <HAL_DMA_Abort_IT+0x1cc>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d013      	beq.n	8005e34 <HAL_DMA_Abort_IT+0x17c>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a1d      	ldr	r2, [pc, #116]	; (8005e88 <HAL_DMA_Abort_IT+0x1d0>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d00e      	beq.n	8005e34 <HAL_DMA_Abort_IT+0x17c>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a1c      	ldr	r2, [pc, #112]	; (8005e8c <HAL_DMA_Abort_IT+0x1d4>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d009      	beq.n	8005e34 <HAL_DMA_Abort_IT+0x17c>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a1a      	ldr	r2, [pc, #104]	; (8005e90 <HAL_DMA_Abort_IT+0x1d8>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d004      	beq.n	8005e34 <HAL_DMA_Abort_IT+0x17c>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a19      	ldr	r2, [pc, #100]	; (8005e94 <HAL_DMA_Abort_IT+0x1dc>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d108      	bne.n	8005e46 <HAL_DMA_Abort_IT+0x18e>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 0201 	bic.w	r2, r2, #1
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	e178      	b.n	8006138 <HAL_DMA_Abort_IT+0x480>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0201 	bic.w	r2, r2, #1
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	e16f      	b.n	8006138 <HAL_DMA_Abort_IT+0x480>
 8005e58:	40020010 	.word	0x40020010
 8005e5c:	40020028 	.word	0x40020028
 8005e60:	40020040 	.word	0x40020040
 8005e64:	40020058 	.word	0x40020058
 8005e68:	40020070 	.word	0x40020070
 8005e6c:	40020088 	.word	0x40020088
 8005e70:	400200a0 	.word	0x400200a0
 8005e74:	400200b8 	.word	0x400200b8
 8005e78:	40020410 	.word	0x40020410
 8005e7c:	40020428 	.word	0x40020428
 8005e80:	40020440 	.word	0x40020440
 8005e84:	40020458 	.word	0x40020458
 8005e88:	40020470 	.word	0x40020470
 8005e8c:	40020488 	.word	0x40020488
 8005e90:	400204a0 	.word	0x400204a0
 8005e94:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 020e 	bic.w	r2, r2, #14
 8005ea6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a6c      	ldr	r2, [pc, #432]	; (8006060 <HAL_DMA_Abort_IT+0x3a8>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d04a      	beq.n	8005f48 <HAL_DMA_Abort_IT+0x290>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a6b      	ldr	r2, [pc, #428]	; (8006064 <HAL_DMA_Abort_IT+0x3ac>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d045      	beq.n	8005f48 <HAL_DMA_Abort_IT+0x290>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a69      	ldr	r2, [pc, #420]	; (8006068 <HAL_DMA_Abort_IT+0x3b0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d040      	beq.n	8005f48 <HAL_DMA_Abort_IT+0x290>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a68      	ldr	r2, [pc, #416]	; (800606c <HAL_DMA_Abort_IT+0x3b4>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d03b      	beq.n	8005f48 <HAL_DMA_Abort_IT+0x290>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a66      	ldr	r2, [pc, #408]	; (8006070 <HAL_DMA_Abort_IT+0x3b8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d036      	beq.n	8005f48 <HAL_DMA_Abort_IT+0x290>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a65      	ldr	r2, [pc, #404]	; (8006074 <HAL_DMA_Abort_IT+0x3bc>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d031      	beq.n	8005f48 <HAL_DMA_Abort_IT+0x290>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a63      	ldr	r2, [pc, #396]	; (8006078 <HAL_DMA_Abort_IT+0x3c0>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d02c      	beq.n	8005f48 <HAL_DMA_Abort_IT+0x290>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a62      	ldr	r2, [pc, #392]	; (800607c <HAL_DMA_Abort_IT+0x3c4>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d027      	beq.n	8005f48 <HAL_DMA_Abort_IT+0x290>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a60      	ldr	r2, [pc, #384]	; (8006080 <HAL_DMA_Abort_IT+0x3c8>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d022      	beq.n	8005f48 <HAL_DMA_Abort_IT+0x290>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a5f      	ldr	r2, [pc, #380]	; (8006084 <HAL_DMA_Abort_IT+0x3cc>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d01d      	beq.n	8005f48 <HAL_DMA_Abort_IT+0x290>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a5d      	ldr	r2, [pc, #372]	; (8006088 <HAL_DMA_Abort_IT+0x3d0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d018      	beq.n	8005f48 <HAL_DMA_Abort_IT+0x290>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a5c      	ldr	r2, [pc, #368]	; (800608c <HAL_DMA_Abort_IT+0x3d4>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d013      	beq.n	8005f48 <HAL_DMA_Abort_IT+0x290>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a5a      	ldr	r2, [pc, #360]	; (8006090 <HAL_DMA_Abort_IT+0x3d8>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d00e      	beq.n	8005f48 <HAL_DMA_Abort_IT+0x290>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a59      	ldr	r2, [pc, #356]	; (8006094 <HAL_DMA_Abort_IT+0x3dc>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d009      	beq.n	8005f48 <HAL_DMA_Abort_IT+0x290>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a57      	ldr	r2, [pc, #348]	; (8006098 <HAL_DMA_Abort_IT+0x3e0>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d004      	beq.n	8005f48 <HAL_DMA_Abort_IT+0x290>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a56      	ldr	r2, [pc, #344]	; (800609c <HAL_DMA_Abort_IT+0x3e4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d108      	bne.n	8005f5a <HAL_DMA_Abort_IT+0x2a2>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0201 	bic.w	r2, r2, #1
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	e007      	b.n	8005f6a <HAL_DMA_Abort_IT+0x2b2>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 0201 	bic.w	r2, r2, #1
 8005f68:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a3c      	ldr	r2, [pc, #240]	; (8006060 <HAL_DMA_Abort_IT+0x3a8>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d072      	beq.n	800605a <HAL_DMA_Abort_IT+0x3a2>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a3a      	ldr	r2, [pc, #232]	; (8006064 <HAL_DMA_Abort_IT+0x3ac>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d06d      	beq.n	800605a <HAL_DMA_Abort_IT+0x3a2>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a39      	ldr	r2, [pc, #228]	; (8006068 <HAL_DMA_Abort_IT+0x3b0>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d068      	beq.n	800605a <HAL_DMA_Abort_IT+0x3a2>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a37      	ldr	r2, [pc, #220]	; (800606c <HAL_DMA_Abort_IT+0x3b4>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d063      	beq.n	800605a <HAL_DMA_Abort_IT+0x3a2>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a36      	ldr	r2, [pc, #216]	; (8006070 <HAL_DMA_Abort_IT+0x3b8>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d05e      	beq.n	800605a <HAL_DMA_Abort_IT+0x3a2>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a34      	ldr	r2, [pc, #208]	; (8006074 <HAL_DMA_Abort_IT+0x3bc>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d059      	beq.n	800605a <HAL_DMA_Abort_IT+0x3a2>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a33      	ldr	r2, [pc, #204]	; (8006078 <HAL_DMA_Abort_IT+0x3c0>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d054      	beq.n	800605a <HAL_DMA_Abort_IT+0x3a2>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a31      	ldr	r2, [pc, #196]	; (800607c <HAL_DMA_Abort_IT+0x3c4>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d04f      	beq.n	800605a <HAL_DMA_Abort_IT+0x3a2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a30      	ldr	r2, [pc, #192]	; (8006080 <HAL_DMA_Abort_IT+0x3c8>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d04a      	beq.n	800605a <HAL_DMA_Abort_IT+0x3a2>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a2e      	ldr	r2, [pc, #184]	; (8006084 <HAL_DMA_Abort_IT+0x3cc>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d045      	beq.n	800605a <HAL_DMA_Abort_IT+0x3a2>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a2d      	ldr	r2, [pc, #180]	; (8006088 <HAL_DMA_Abort_IT+0x3d0>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d040      	beq.n	800605a <HAL_DMA_Abort_IT+0x3a2>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a2b      	ldr	r2, [pc, #172]	; (800608c <HAL_DMA_Abort_IT+0x3d4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d03b      	beq.n	800605a <HAL_DMA_Abort_IT+0x3a2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a2a      	ldr	r2, [pc, #168]	; (8006090 <HAL_DMA_Abort_IT+0x3d8>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d036      	beq.n	800605a <HAL_DMA_Abort_IT+0x3a2>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a28      	ldr	r2, [pc, #160]	; (8006094 <HAL_DMA_Abort_IT+0x3dc>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d031      	beq.n	800605a <HAL_DMA_Abort_IT+0x3a2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a27      	ldr	r2, [pc, #156]	; (8006098 <HAL_DMA_Abort_IT+0x3e0>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d02c      	beq.n	800605a <HAL_DMA_Abort_IT+0x3a2>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a25      	ldr	r2, [pc, #148]	; (800609c <HAL_DMA_Abort_IT+0x3e4>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d027      	beq.n	800605a <HAL_DMA_Abort_IT+0x3a2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a24      	ldr	r2, [pc, #144]	; (80060a0 <HAL_DMA_Abort_IT+0x3e8>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d022      	beq.n	800605a <HAL_DMA_Abort_IT+0x3a2>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a22      	ldr	r2, [pc, #136]	; (80060a4 <HAL_DMA_Abort_IT+0x3ec>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d01d      	beq.n	800605a <HAL_DMA_Abort_IT+0x3a2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a21      	ldr	r2, [pc, #132]	; (80060a8 <HAL_DMA_Abort_IT+0x3f0>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d018      	beq.n	800605a <HAL_DMA_Abort_IT+0x3a2>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a1f      	ldr	r2, [pc, #124]	; (80060ac <HAL_DMA_Abort_IT+0x3f4>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d013      	beq.n	800605a <HAL_DMA_Abort_IT+0x3a2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a1e      	ldr	r2, [pc, #120]	; (80060b0 <HAL_DMA_Abort_IT+0x3f8>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d00e      	beq.n	800605a <HAL_DMA_Abort_IT+0x3a2>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a1c      	ldr	r2, [pc, #112]	; (80060b4 <HAL_DMA_Abort_IT+0x3fc>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d009      	beq.n	800605a <HAL_DMA_Abort_IT+0x3a2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a1b      	ldr	r2, [pc, #108]	; (80060b8 <HAL_DMA_Abort_IT+0x400>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d004      	beq.n	800605a <HAL_DMA_Abort_IT+0x3a2>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a19      	ldr	r2, [pc, #100]	; (80060bc <HAL_DMA_Abort_IT+0x404>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d132      	bne.n	80060c0 <HAL_DMA_Abort_IT+0x408>
 800605a:	2301      	movs	r3, #1
 800605c:	e031      	b.n	80060c2 <HAL_DMA_Abort_IT+0x40a>
 800605e:	bf00      	nop
 8006060:	40020010 	.word	0x40020010
 8006064:	40020028 	.word	0x40020028
 8006068:	40020040 	.word	0x40020040
 800606c:	40020058 	.word	0x40020058
 8006070:	40020070 	.word	0x40020070
 8006074:	40020088 	.word	0x40020088
 8006078:	400200a0 	.word	0x400200a0
 800607c:	400200b8 	.word	0x400200b8
 8006080:	40020410 	.word	0x40020410
 8006084:	40020428 	.word	0x40020428
 8006088:	40020440 	.word	0x40020440
 800608c:	40020458 	.word	0x40020458
 8006090:	40020470 	.word	0x40020470
 8006094:	40020488 	.word	0x40020488
 8006098:	400204a0 	.word	0x400204a0
 800609c:	400204b8 	.word	0x400204b8
 80060a0:	58025408 	.word	0x58025408
 80060a4:	5802541c 	.word	0x5802541c
 80060a8:	58025430 	.word	0x58025430
 80060ac:	58025444 	.word	0x58025444
 80060b0:	58025458 	.word	0x58025458
 80060b4:	5802546c 	.word	0x5802546c
 80060b8:	58025480 	.word	0x58025480
 80060bc:	58025494 	.word	0x58025494
 80060c0:	2300      	movs	r3, #0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d028      	beq.n	8006118 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060d4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060da:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060e0:	f003 031f 	and.w	r3, r3, #31
 80060e4:	2201      	movs	r2, #1
 80060e6:	409a      	lsls	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80060f4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00c      	beq.n	8006118 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006108:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800610c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006116:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800612c:	2b00      	cmp	r3, #0
 800612e:	d003      	beq.n	8006138 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop

08006144 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08a      	sub	sp, #40	; 0x28
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006150:	4b67      	ldr	r3, [pc, #412]	; (80062f0 <HAL_DMA_IRQHandler+0x1ac>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a67      	ldr	r2, [pc, #412]	; (80062f4 <HAL_DMA_IRQHandler+0x1b0>)
 8006156:	fba2 2303 	umull	r2, r3, r2, r3
 800615a:	0a9b      	lsrs	r3, r3, #10
 800615c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006162:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006168:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a5f      	ldr	r2, [pc, #380]	; (80062f8 <HAL_DMA_IRQHandler+0x1b4>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d04a      	beq.n	8006216 <HAL_DMA_IRQHandler+0xd2>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a5d      	ldr	r2, [pc, #372]	; (80062fc <HAL_DMA_IRQHandler+0x1b8>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d045      	beq.n	8006216 <HAL_DMA_IRQHandler+0xd2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a5c      	ldr	r2, [pc, #368]	; (8006300 <HAL_DMA_IRQHandler+0x1bc>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d040      	beq.n	8006216 <HAL_DMA_IRQHandler+0xd2>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a5a      	ldr	r2, [pc, #360]	; (8006304 <HAL_DMA_IRQHandler+0x1c0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d03b      	beq.n	8006216 <HAL_DMA_IRQHandler+0xd2>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a59      	ldr	r2, [pc, #356]	; (8006308 <HAL_DMA_IRQHandler+0x1c4>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d036      	beq.n	8006216 <HAL_DMA_IRQHandler+0xd2>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a57      	ldr	r2, [pc, #348]	; (800630c <HAL_DMA_IRQHandler+0x1c8>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d031      	beq.n	8006216 <HAL_DMA_IRQHandler+0xd2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a56      	ldr	r2, [pc, #344]	; (8006310 <HAL_DMA_IRQHandler+0x1cc>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d02c      	beq.n	8006216 <HAL_DMA_IRQHandler+0xd2>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a54      	ldr	r2, [pc, #336]	; (8006314 <HAL_DMA_IRQHandler+0x1d0>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d027      	beq.n	8006216 <HAL_DMA_IRQHandler+0xd2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a53      	ldr	r2, [pc, #332]	; (8006318 <HAL_DMA_IRQHandler+0x1d4>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d022      	beq.n	8006216 <HAL_DMA_IRQHandler+0xd2>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a51      	ldr	r2, [pc, #324]	; (800631c <HAL_DMA_IRQHandler+0x1d8>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d01d      	beq.n	8006216 <HAL_DMA_IRQHandler+0xd2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a50      	ldr	r2, [pc, #320]	; (8006320 <HAL_DMA_IRQHandler+0x1dc>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d018      	beq.n	8006216 <HAL_DMA_IRQHandler+0xd2>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a4e      	ldr	r2, [pc, #312]	; (8006324 <HAL_DMA_IRQHandler+0x1e0>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d013      	beq.n	8006216 <HAL_DMA_IRQHandler+0xd2>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a4d      	ldr	r2, [pc, #308]	; (8006328 <HAL_DMA_IRQHandler+0x1e4>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d00e      	beq.n	8006216 <HAL_DMA_IRQHandler+0xd2>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a4b      	ldr	r2, [pc, #300]	; (800632c <HAL_DMA_IRQHandler+0x1e8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d009      	beq.n	8006216 <HAL_DMA_IRQHandler+0xd2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a4a      	ldr	r2, [pc, #296]	; (8006330 <HAL_DMA_IRQHandler+0x1ec>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d004      	beq.n	8006216 <HAL_DMA_IRQHandler+0xd2>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a48      	ldr	r2, [pc, #288]	; (8006334 <HAL_DMA_IRQHandler+0x1f0>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d101      	bne.n	800621a <HAL_DMA_IRQHandler+0xd6>
 8006216:	2301      	movs	r3, #1
 8006218:	e000      	b.n	800621c <HAL_DMA_IRQHandler+0xd8>
 800621a:	2300      	movs	r3, #0
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 842b 	beq.w	8006a78 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006226:	f003 031f 	and.w	r3, r3, #31
 800622a:	2208      	movs	r2, #8
 800622c:	409a      	lsls	r2, r3
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	4013      	ands	r3, r2
 8006232:	2b00      	cmp	r3, #0
 8006234:	f000 80a2 	beq.w	800637c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a2e      	ldr	r2, [pc, #184]	; (80062f8 <HAL_DMA_IRQHandler+0x1b4>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d04a      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x194>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a2d      	ldr	r2, [pc, #180]	; (80062fc <HAL_DMA_IRQHandler+0x1b8>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d045      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x194>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a2b      	ldr	r2, [pc, #172]	; (8006300 <HAL_DMA_IRQHandler+0x1bc>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d040      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x194>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a2a      	ldr	r2, [pc, #168]	; (8006304 <HAL_DMA_IRQHandler+0x1c0>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d03b      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x194>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a28      	ldr	r2, [pc, #160]	; (8006308 <HAL_DMA_IRQHandler+0x1c4>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d036      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x194>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a27      	ldr	r2, [pc, #156]	; (800630c <HAL_DMA_IRQHandler+0x1c8>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d031      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x194>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a25      	ldr	r2, [pc, #148]	; (8006310 <HAL_DMA_IRQHandler+0x1cc>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d02c      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x194>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a24      	ldr	r2, [pc, #144]	; (8006314 <HAL_DMA_IRQHandler+0x1d0>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d027      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x194>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a22      	ldr	r2, [pc, #136]	; (8006318 <HAL_DMA_IRQHandler+0x1d4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d022      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x194>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a21      	ldr	r2, [pc, #132]	; (800631c <HAL_DMA_IRQHandler+0x1d8>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d01d      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x194>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a1f      	ldr	r2, [pc, #124]	; (8006320 <HAL_DMA_IRQHandler+0x1dc>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d018      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x194>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a1e      	ldr	r2, [pc, #120]	; (8006324 <HAL_DMA_IRQHandler+0x1e0>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d013      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x194>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a1c      	ldr	r2, [pc, #112]	; (8006328 <HAL_DMA_IRQHandler+0x1e4>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d00e      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x194>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a1b      	ldr	r2, [pc, #108]	; (800632c <HAL_DMA_IRQHandler+0x1e8>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d009      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x194>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a19      	ldr	r2, [pc, #100]	; (8006330 <HAL_DMA_IRQHandler+0x1ec>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d004      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x194>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a18      	ldr	r2, [pc, #96]	; (8006334 <HAL_DMA_IRQHandler+0x1f0>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d12f      	bne.n	8006338 <HAL_DMA_IRQHandler+0x1f4>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0304 	and.w	r3, r3, #4
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	bf14      	ite	ne
 80062e6:	2301      	movne	r3, #1
 80062e8:	2300      	moveq	r3, #0
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	e02e      	b.n	800634c <HAL_DMA_IRQHandler+0x208>
 80062ee:	bf00      	nop
 80062f0:	24000024 	.word	0x24000024
 80062f4:	1b4e81b5 	.word	0x1b4e81b5
 80062f8:	40020010 	.word	0x40020010
 80062fc:	40020028 	.word	0x40020028
 8006300:	40020040 	.word	0x40020040
 8006304:	40020058 	.word	0x40020058
 8006308:	40020070 	.word	0x40020070
 800630c:	40020088 	.word	0x40020088
 8006310:	400200a0 	.word	0x400200a0
 8006314:	400200b8 	.word	0x400200b8
 8006318:	40020410 	.word	0x40020410
 800631c:	40020428 	.word	0x40020428
 8006320:	40020440 	.word	0x40020440
 8006324:	40020458 	.word	0x40020458
 8006328:	40020470 	.word	0x40020470
 800632c:	40020488 	.word	0x40020488
 8006330:	400204a0 	.word	0x400204a0
 8006334:	400204b8 	.word	0x400204b8
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0308 	and.w	r3, r3, #8
 8006342:	2b00      	cmp	r3, #0
 8006344:	bf14      	ite	ne
 8006346:	2301      	movne	r3, #1
 8006348:	2300      	moveq	r3, #0
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d015      	beq.n	800637c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 0204 	bic.w	r2, r2, #4
 800635e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006364:	f003 031f 	and.w	r3, r3, #31
 8006368:	2208      	movs	r2, #8
 800636a:	409a      	lsls	r2, r3
 800636c:	6a3b      	ldr	r3, [r7, #32]
 800636e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006374:	f043 0201 	orr.w	r2, r3, #1
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006380:	f003 031f 	and.w	r3, r3, #31
 8006384:	69ba      	ldr	r2, [r7, #24]
 8006386:	fa22 f303 	lsr.w	r3, r2, r3
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b00      	cmp	r3, #0
 8006390:	d06e      	beq.n	8006470 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a69      	ldr	r2, [pc, #420]	; (800653c <HAL_DMA_IRQHandler+0x3f8>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d04a      	beq.n	8006432 <HAL_DMA_IRQHandler+0x2ee>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a67      	ldr	r2, [pc, #412]	; (8006540 <HAL_DMA_IRQHandler+0x3fc>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d045      	beq.n	8006432 <HAL_DMA_IRQHandler+0x2ee>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a66      	ldr	r2, [pc, #408]	; (8006544 <HAL_DMA_IRQHandler+0x400>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d040      	beq.n	8006432 <HAL_DMA_IRQHandler+0x2ee>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a64      	ldr	r2, [pc, #400]	; (8006548 <HAL_DMA_IRQHandler+0x404>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d03b      	beq.n	8006432 <HAL_DMA_IRQHandler+0x2ee>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a63      	ldr	r2, [pc, #396]	; (800654c <HAL_DMA_IRQHandler+0x408>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d036      	beq.n	8006432 <HAL_DMA_IRQHandler+0x2ee>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a61      	ldr	r2, [pc, #388]	; (8006550 <HAL_DMA_IRQHandler+0x40c>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d031      	beq.n	8006432 <HAL_DMA_IRQHandler+0x2ee>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a60      	ldr	r2, [pc, #384]	; (8006554 <HAL_DMA_IRQHandler+0x410>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d02c      	beq.n	8006432 <HAL_DMA_IRQHandler+0x2ee>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a5e      	ldr	r2, [pc, #376]	; (8006558 <HAL_DMA_IRQHandler+0x414>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d027      	beq.n	8006432 <HAL_DMA_IRQHandler+0x2ee>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a5d      	ldr	r2, [pc, #372]	; (800655c <HAL_DMA_IRQHandler+0x418>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d022      	beq.n	8006432 <HAL_DMA_IRQHandler+0x2ee>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a5b      	ldr	r2, [pc, #364]	; (8006560 <HAL_DMA_IRQHandler+0x41c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d01d      	beq.n	8006432 <HAL_DMA_IRQHandler+0x2ee>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a5a      	ldr	r2, [pc, #360]	; (8006564 <HAL_DMA_IRQHandler+0x420>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d018      	beq.n	8006432 <HAL_DMA_IRQHandler+0x2ee>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a58      	ldr	r2, [pc, #352]	; (8006568 <HAL_DMA_IRQHandler+0x424>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d013      	beq.n	8006432 <HAL_DMA_IRQHandler+0x2ee>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a57      	ldr	r2, [pc, #348]	; (800656c <HAL_DMA_IRQHandler+0x428>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d00e      	beq.n	8006432 <HAL_DMA_IRQHandler+0x2ee>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a55      	ldr	r2, [pc, #340]	; (8006570 <HAL_DMA_IRQHandler+0x42c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d009      	beq.n	8006432 <HAL_DMA_IRQHandler+0x2ee>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a54      	ldr	r2, [pc, #336]	; (8006574 <HAL_DMA_IRQHandler+0x430>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d004      	beq.n	8006432 <HAL_DMA_IRQHandler+0x2ee>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a52      	ldr	r2, [pc, #328]	; (8006578 <HAL_DMA_IRQHandler+0x434>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d10a      	bne.n	8006448 <HAL_DMA_IRQHandler+0x304>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800643c:	2b00      	cmp	r3, #0
 800643e:	bf14      	ite	ne
 8006440:	2301      	movne	r3, #1
 8006442:	2300      	moveq	r3, #0
 8006444:	b2db      	uxtb	r3, r3
 8006446:	e003      	b.n	8006450 <HAL_DMA_IRQHandler+0x30c>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2300      	movs	r3, #0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00d      	beq.n	8006470 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006458:	f003 031f 	and.w	r3, r3, #31
 800645c:	2201      	movs	r2, #1
 800645e:	409a      	lsls	r2, r3
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006468:	f043 0202 	orr.w	r2, r3, #2
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006474:	f003 031f 	and.w	r3, r3, #31
 8006478:	2204      	movs	r2, #4
 800647a:	409a      	lsls	r2, r3
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	4013      	ands	r3, r2
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 808f 	beq.w	80065a4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a2c      	ldr	r2, [pc, #176]	; (800653c <HAL_DMA_IRQHandler+0x3f8>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d04a      	beq.n	8006526 <HAL_DMA_IRQHandler+0x3e2>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a2a      	ldr	r2, [pc, #168]	; (8006540 <HAL_DMA_IRQHandler+0x3fc>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d045      	beq.n	8006526 <HAL_DMA_IRQHandler+0x3e2>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a29      	ldr	r2, [pc, #164]	; (8006544 <HAL_DMA_IRQHandler+0x400>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d040      	beq.n	8006526 <HAL_DMA_IRQHandler+0x3e2>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a27      	ldr	r2, [pc, #156]	; (8006548 <HAL_DMA_IRQHandler+0x404>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d03b      	beq.n	8006526 <HAL_DMA_IRQHandler+0x3e2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a26      	ldr	r2, [pc, #152]	; (800654c <HAL_DMA_IRQHandler+0x408>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d036      	beq.n	8006526 <HAL_DMA_IRQHandler+0x3e2>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a24      	ldr	r2, [pc, #144]	; (8006550 <HAL_DMA_IRQHandler+0x40c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d031      	beq.n	8006526 <HAL_DMA_IRQHandler+0x3e2>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a23      	ldr	r2, [pc, #140]	; (8006554 <HAL_DMA_IRQHandler+0x410>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d02c      	beq.n	8006526 <HAL_DMA_IRQHandler+0x3e2>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a21      	ldr	r2, [pc, #132]	; (8006558 <HAL_DMA_IRQHandler+0x414>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d027      	beq.n	8006526 <HAL_DMA_IRQHandler+0x3e2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a20      	ldr	r2, [pc, #128]	; (800655c <HAL_DMA_IRQHandler+0x418>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d022      	beq.n	8006526 <HAL_DMA_IRQHandler+0x3e2>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a1e      	ldr	r2, [pc, #120]	; (8006560 <HAL_DMA_IRQHandler+0x41c>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d01d      	beq.n	8006526 <HAL_DMA_IRQHandler+0x3e2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a1d      	ldr	r2, [pc, #116]	; (8006564 <HAL_DMA_IRQHandler+0x420>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d018      	beq.n	8006526 <HAL_DMA_IRQHandler+0x3e2>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a1b      	ldr	r2, [pc, #108]	; (8006568 <HAL_DMA_IRQHandler+0x424>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d013      	beq.n	8006526 <HAL_DMA_IRQHandler+0x3e2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a1a      	ldr	r2, [pc, #104]	; (800656c <HAL_DMA_IRQHandler+0x428>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d00e      	beq.n	8006526 <HAL_DMA_IRQHandler+0x3e2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a18      	ldr	r2, [pc, #96]	; (8006570 <HAL_DMA_IRQHandler+0x42c>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d009      	beq.n	8006526 <HAL_DMA_IRQHandler+0x3e2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a17      	ldr	r2, [pc, #92]	; (8006574 <HAL_DMA_IRQHandler+0x430>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d004      	beq.n	8006526 <HAL_DMA_IRQHandler+0x3e2>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a15      	ldr	r2, [pc, #84]	; (8006578 <HAL_DMA_IRQHandler+0x434>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d12a      	bne.n	800657c <HAL_DMA_IRQHandler+0x438>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b00      	cmp	r3, #0
 8006532:	bf14      	ite	ne
 8006534:	2301      	movne	r3, #1
 8006536:	2300      	moveq	r3, #0
 8006538:	b2db      	uxtb	r3, r3
 800653a:	e023      	b.n	8006584 <HAL_DMA_IRQHandler+0x440>
 800653c:	40020010 	.word	0x40020010
 8006540:	40020028 	.word	0x40020028
 8006544:	40020040 	.word	0x40020040
 8006548:	40020058 	.word	0x40020058
 800654c:	40020070 	.word	0x40020070
 8006550:	40020088 	.word	0x40020088
 8006554:	400200a0 	.word	0x400200a0
 8006558:	400200b8 	.word	0x400200b8
 800655c:	40020410 	.word	0x40020410
 8006560:	40020428 	.word	0x40020428
 8006564:	40020440 	.word	0x40020440
 8006568:	40020458 	.word	0x40020458
 800656c:	40020470 	.word	0x40020470
 8006570:	40020488 	.word	0x40020488
 8006574:	400204a0 	.word	0x400204a0
 8006578:	400204b8 	.word	0x400204b8
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2300      	movs	r3, #0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00d      	beq.n	80065a4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800658c:	f003 031f 	and.w	r3, r3, #31
 8006590:	2204      	movs	r2, #4
 8006592:	409a      	lsls	r2, r3
 8006594:	6a3b      	ldr	r3, [r7, #32]
 8006596:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800659c:	f043 0204 	orr.w	r2, r3, #4
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a8:	f003 031f 	and.w	r3, r3, #31
 80065ac:	2210      	movs	r2, #16
 80065ae:	409a      	lsls	r2, r3
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	4013      	ands	r3, r2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 80a6 	beq.w	8006706 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a85      	ldr	r2, [pc, #532]	; (80067d4 <HAL_DMA_IRQHandler+0x690>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d04a      	beq.n	800665a <HAL_DMA_IRQHandler+0x516>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a83      	ldr	r2, [pc, #524]	; (80067d8 <HAL_DMA_IRQHandler+0x694>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d045      	beq.n	800665a <HAL_DMA_IRQHandler+0x516>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a82      	ldr	r2, [pc, #520]	; (80067dc <HAL_DMA_IRQHandler+0x698>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d040      	beq.n	800665a <HAL_DMA_IRQHandler+0x516>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a80      	ldr	r2, [pc, #512]	; (80067e0 <HAL_DMA_IRQHandler+0x69c>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d03b      	beq.n	800665a <HAL_DMA_IRQHandler+0x516>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a7f      	ldr	r2, [pc, #508]	; (80067e4 <HAL_DMA_IRQHandler+0x6a0>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d036      	beq.n	800665a <HAL_DMA_IRQHandler+0x516>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a7d      	ldr	r2, [pc, #500]	; (80067e8 <HAL_DMA_IRQHandler+0x6a4>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d031      	beq.n	800665a <HAL_DMA_IRQHandler+0x516>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a7c      	ldr	r2, [pc, #496]	; (80067ec <HAL_DMA_IRQHandler+0x6a8>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d02c      	beq.n	800665a <HAL_DMA_IRQHandler+0x516>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a7a      	ldr	r2, [pc, #488]	; (80067f0 <HAL_DMA_IRQHandler+0x6ac>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d027      	beq.n	800665a <HAL_DMA_IRQHandler+0x516>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a79      	ldr	r2, [pc, #484]	; (80067f4 <HAL_DMA_IRQHandler+0x6b0>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d022      	beq.n	800665a <HAL_DMA_IRQHandler+0x516>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a77      	ldr	r2, [pc, #476]	; (80067f8 <HAL_DMA_IRQHandler+0x6b4>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d01d      	beq.n	800665a <HAL_DMA_IRQHandler+0x516>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a76      	ldr	r2, [pc, #472]	; (80067fc <HAL_DMA_IRQHandler+0x6b8>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d018      	beq.n	800665a <HAL_DMA_IRQHandler+0x516>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a74      	ldr	r2, [pc, #464]	; (8006800 <HAL_DMA_IRQHandler+0x6bc>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d013      	beq.n	800665a <HAL_DMA_IRQHandler+0x516>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a73      	ldr	r2, [pc, #460]	; (8006804 <HAL_DMA_IRQHandler+0x6c0>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d00e      	beq.n	800665a <HAL_DMA_IRQHandler+0x516>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a71      	ldr	r2, [pc, #452]	; (8006808 <HAL_DMA_IRQHandler+0x6c4>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d009      	beq.n	800665a <HAL_DMA_IRQHandler+0x516>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a70      	ldr	r2, [pc, #448]	; (800680c <HAL_DMA_IRQHandler+0x6c8>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d004      	beq.n	800665a <HAL_DMA_IRQHandler+0x516>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a6e      	ldr	r2, [pc, #440]	; (8006810 <HAL_DMA_IRQHandler+0x6cc>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d10a      	bne.n	8006670 <HAL_DMA_IRQHandler+0x52c>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0308 	and.w	r3, r3, #8
 8006664:	2b00      	cmp	r3, #0
 8006666:	bf14      	ite	ne
 8006668:	2301      	movne	r3, #1
 800666a:	2300      	moveq	r3, #0
 800666c:	b2db      	uxtb	r3, r3
 800666e:	e009      	b.n	8006684 <HAL_DMA_IRQHandler+0x540>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0304 	and.w	r3, r3, #4
 800667a:	2b00      	cmp	r3, #0
 800667c:	bf14      	ite	ne
 800667e:	2301      	movne	r3, #1
 8006680:	2300      	moveq	r3, #0
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	d03e      	beq.n	8006706 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800668c:	f003 031f 	and.w	r3, r3, #31
 8006690:	2210      	movs	r2, #16
 8006692:	409a      	lsls	r2, r3
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d018      	beq.n	80066d8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d108      	bne.n	80066c6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d024      	beq.n	8006706 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	4798      	blx	r3
 80066c4:	e01f      	b.n	8006706 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d01b      	beq.n	8006706 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	4798      	blx	r3
 80066d6:	e016      	b.n	8006706 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d107      	bne.n	80066f6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0208 	bic.w	r2, r2, #8
 80066f4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800670a:	f003 031f 	and.w	r3, r3, #31
 800670e:	2220      	movs	r2, #32
 8006710:	409a      	lsls	r2, r3
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	4013      	ands	r3, r2
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 8110 	beq.w	800693c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a2c      	ldr	r2, [pc, #176]	; (80067d4 <HAL_DMA_IRQHandler+0x690>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d04a      	beq.n	80067bc <HAL_DMA_IRQHandler+0x678>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a2b      	ldr	r2, [pc, #172]	; (80067d8 <HAL_DMA_IRQHandler+0x694>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d045      	beq.n	80067bc <HAL_DMA_IRQHandler+0x678>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a29      	ldr	r2, [pc, #164]	; (80067dc <HAL_DMA_IRQHandler+0x698>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d040      	beq.n	80067bc <HAL_DMA_IRQHandler+0x678>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a28      	ldr	r2, [pc, #160]	; (80067e0 <HAL_DMA_IRQHandler+0x69c>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d03b      	beq.n	80067bc <HAL_DMA_IRQHandler+0x678>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a26      	ldr	r2, [pc, #152]	; (80067e4 <HAL_DMA_IRQHandler+0x6a0>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d036      	beq.n	80067bc <HAL_DMA_IRQHandler+0x678>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a25      	ldr	r2, [pc, #148]	; (80067e8 <HAL_DMA_IRQHandler+0x6a4>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d031      	beq.n	80067bc <HAL_DMA_IRQHandler+0x678>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a23      	ldr	r2, [pc, #140]	; (80067ec <HAL_DMA_IRQHandler+0x6a8>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d02c      	beq.n	80067bc <HAL_DMA_IRQHandler+0x678>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a22      	ldr	r2, [pc, #136]	; (80067f0 <HAL_DMA_IRQHandler+0x6ac>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d027      	beq.n	80067bc <HAL_DMA_IRQHandler+0x678>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a20      	ldr	r2, [pc, #128]	; (80067f4 <HAL_DMA_IRQHandler+0x6b0>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d022      	beq.n	80067bc <HAL_DMA_IRQHandler+0x678>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a1f      	ldr	r2, [pc, #124]	; (80067f8 <HAL_DMA_IRQHandler+0x6b4>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d01d      	beq.n	80067bc <HAL_DMA_IRQHandler+0x678>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a1d      	ldr	r2, [pc, #116]	; (80067fc <HAL_DMA_IRQHandler+0x6b8>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d018      	beq.n	80067bc <HAL_DMA_IRQHandler+0x678>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a1c      	ldr	r2, [pc, #112]	; (8006800 <HAL_DMA_IRQHandler+0x6bc>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d013      	beq.n	80067bc <HAL_DMA_IRQHandler+0x678>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a1a      	ldr	r2, [pc, #104]	; (8006804 <HAL_DMA_IRQHandler+0x6c0>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d00e      	beq.n	80067bc <HAL_DMA_IRQHandler+0x678>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a19      	ldr	r2, [pc, #100]	; (8006808 <HAL_DMA_IRQHandler+0x6c4>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d009      	beq.n	80067bc <HAL_DMA_IRQHandler+0x678>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a17      	ldr	r2, [pc, #92]	; (800680c <HAL_DMA_IRQHandler+0x6c8>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d004      	beq.n	80067bc <HAL_DMA_IRQHandler+0x678>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a16      	ldr	r2, [pc, #88]	; (8006810 <HAL_DMA_IRQHandler+0x6cc>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d12b      	bne.n	8006814 <HAL_DMA_IRQHandler+0x6d0>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0310 	and.w	r3, r3, #16
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	bf14      	ite	ne
 80067ca:	2301      	movne	r3, #1
 80067cc:	2300      	moveq	r3, #0
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	e02a      	b.n	8006828 <HAL_DMA_IRQHandler+0x6e4>
 80067d2:	bf00      	nop
 80067d4:	40020010 	.word	0x40020010
 80067d8:	40020028 	.word	0x40020028
 80067dc:	40020040 	.word	0x40020040
 80067e0:	40020058 	.word	0x40020058
 80067e4:	40020070 	.word	0x40020070
 80067e8:	40020088 	.word	0x40020088
 80067ec:	400200a0 	.word	0x400200a0
 80067f0:	400200b8 	.word	0x400200b8
 80067f4:	40020410 	.word	0x40020410
 80067f8:	40020428 	.word	0x40020428
 80067fc:	40020440 	.word	0x40020440
 8006800:	40020458 	.word	0x40020458
 8006804:	40020470 	.word	0x40020470
 8006808:	40020488 	.word	0x40020488
 800680c:	400204a0 	.word	0x400204a0
 8006810:	400204b8 	.word	0x400204b8
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	2b00      	cmp	r3, #0
 8006820:	bf14      	ite	ne
 8006822:	2301      	movne	r3, #1
 8006824:	2300      	moveq	r3, #0
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 8087 	beq.w	800693c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006832:	f003 031f 	and.w	r3, r3, #31
 8006836:	2220      	movs	r2, #32
 8006838:	409a      	lsls	r2, r3
 800683a:	6a3b      	ldr	r3, [r7, #32]
 800683c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b04      	cmp	r3, #4
 8006848:	d139      	bne.n	80068be <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f022 0216 	bic.w	r2, r2, #22
 8006858:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	695a      	ldr	r2, [r3, #20]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006868:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	2b00      	cmp	r3, #0
 8006870:	d103      	bne.n	800687a <HAL_DMA_IRQHandler+0x736>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006876:	2b00      	cmp	r3, #0
 8006878:	d007      	beq.n	800688a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 0208 	bic.w	r2, r2, #8
 8006888:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800688e:	f003 031f 	and.w	r3, r3, #31
 8006892:	223f      	movs	r2, #63	; 0x3f
 8006894:	409a      	lsls	r2, r3
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f000 834a 	beq.w	8006f48 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	4798      	blx	r3
          }
          return;
 80068bc:	e344      	b.n	8006f48 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d018      	beq.n	80068fe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d108      	bne.n	80068ec <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d02c      	beq.n	800693c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	4798      	blx	r3
 80068ea:	e027      	b.n	800693c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d023      	beq.n	800693c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	4798      	blx	r3
 80068fc:	e01e      	b.n	800693c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10f      	bne.n	800692c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 0210 	bic.w	r2, r2, #16
 800691a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006940:	2b00      	cmp	r3, #0
 8006942:	f000 8306 	beq.w	8006f52 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	f000 8088 	beq.w	8006a64 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2204      	movs	r2, #4
 8006958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a7a      	ldr	r2, [pc, #488]	; (8006b4c <HAL_DMA_IRQHandler+0xa08>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d04a      	beq.n	80069fc <HAL_DMA_IRQHandler+0x8b8>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a79      	ldr	r2, [pc, #484]	; (8006b50 <HAL_DMA_IRQHandler+0xa0c>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d045      	beq.n	80069fc <HAL_DMA_IRQHandler+0x8b8>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a77      	ldr	r2, [pc, #476]	; (8006b54 <HAL_DMA_IRQHandler+0xa10>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d040      	beq.n	80069fc <HAL_DMA_IRQHandler+0x8b8>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a76      	ldr	r2, [pc, #472]	; (8006b58 <HAL_DMA_IRQHandler+0xa14>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d03b      	beq.n	80069fc <HAL_DMA_IRQHandler+0x8b8>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a74      	ldr	r2, [pc, #464]	; (8006b5c <HAL_DMA_IRQHandler+0xa18>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d036      	beq.n	80069fc <HAL_DMA_IRQHandler+0x8b8>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a73      	ldr	r2, [pc, #460]	; (8006b60 <HAL_DMA_IRQHandler+0xa1c>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d031      	beq.n	80069fc <HAL_DMA_IRQHandler+0x8b8>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a71      	ldr	r2, [pc, #452]	; (8006b64 <HAL_DMA_IRQHandler+0xa20>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d02c      	beq.n	80069fc <HAL_DMA_IRQHandler+0x8b8>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a70      	ldr	r2, [pc, #448]	; (8006b68 <HAL_DMA_IRQHandler+0xa24>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d027      	beq.n	80069fc <HAL_DMA_IRQHandler+0x8b8>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a6e      	ldr	r2, [pc, #440]	; (8006b6c <HAL_DMA_IRQHandler+0xa28>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d022      	beq.n	80069fc <HAL_DMA_IRQHandler+0x8b8>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a6d      	ldr	r2, [pc, #436]	; (8006b70 <HAL_DMA_IRQHandler+0xa2c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d01d      	beq.n	80069fc <HAL_DMA_IRQHandler+0x8b8>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a6b      	ldr	r2, [pc, #428]	; (8006b74 <HAL_DMA_IRQHandler+0xa30>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d018      	beq.n	80069fc <HAL_DMA_IRQHandler+0x8b8>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a6a      	ldr	r2, [pc, #424]	; (8006b78 <HAL_DMA_IRQHandler+0xa34>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d013      	beq.n	80069fc <HAL_DMA_IRQHandler+0x8b8>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a68      	ldr	r2, [pc, #416]	; (8006b7c <HAL_DMA_IRQHandler+0xa38>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d00e      	beq.n	80069fc <HAL_DMA_IRQHandler+0x8b8>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a67      	ldr	r2, [pc, #412]	; (8006b80 <HAL_DMA_IRQHandler+0xa3c>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d009      	beq.n	80069fc <HAL_DMA_IRQHandler+0x8b8>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a65      	ldr	r2, [pc, #404]	; (8006b84 <HAL_DMA_IRQHandler+0xa40>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d004      	beq.n	80069fc <HAL_DMA_IRQHandler+0x8b8>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a64      	ldr	r2, [pc, #400]	; (8006b88 <HAL_DMA_IRQHandler+0xa44>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d108      	bne.n	8006a0e <HAL_DMA_IRQHandler+0x8ca>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f022 0201 	bic.w	r2, r2, #1
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	e007      	b.n	8006a1e <HAL_DMA_IRQHandler+0x8da>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f022 0201 	bic.w	r2, r2, #1
 8006a1c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3301      	adds	r3, #1
 8006a22:	60fb      	str	r3, [r7, #12]
 8006a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d307      	bcc.n	8006a3a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1f2      	bne.n	8006a1e <HAL_DMA_IRQHandler+0x8da>
 8006a38:	e000      	b.n	8006a3c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006a3a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d004      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2203      	movs	r2, #3
 8006a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006a52:	e003      	b.n	8006a5c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f000 8272 	beq.w	8006f52 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	4798      	blx	r3
 8006a76:	e26c      	b.n	8006f52 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a43      	ldr	r2, [pc, #268]	; (8006b8c <HAL_DMA_IRQHandler+0xa48>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d022      	beq.n	8006ac8 <HAL_DMA_IRQHandler+0x984>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a42      	ldr	r2, [pc, #264]	; (8006b90 <HAL_DMA_IRQHandler+0xa4c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d01d      	beq.n	8006ac8 <HAL_DMA_IRQHandler+0x984>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a40      	ldr	r2, [pc, #256]	; (8006b94 <HAL_DMA_IRQHandler+0xa50>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d018      	beq.n	8006ac8 <HAL_DMA_IRQHandler+0x984>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a3f      	ldr	r2, [pc, #252]	; (8006b98 <HAL_DMA_IRQHandler+0xa54>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d013      	beq.n	8006ac8 <HAL_DMA_IRQHandler+0x984>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a3d      	ldr	r2, [pc, #244]	; (8006b9c <HAL_DMA_IRQHandler+0xa58>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d00e      	beq.n	8006ac8 <HAL_DMA_IRQHandler+0x984>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a3c      	ldr	r2, [pc, #240]	; (8006ba0 <HAL_DMA_IRQHandler+0xa5c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d009      	beq.n	8006ac8 <HAL_DMA_IRQHandler+0x984>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a3a      	ldr	r2, [pc, #232]	; (8006ba4 <HAL_DMA_IRQHandler+0xa60>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d004      	beq.n	8006ac8 <HAL_DMA_IRQHandler+0x984>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a39      	ldr	r2, [pc, #228]	; (8006ba8 <HAL_DMA_IRQHandler+0xa64>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d101      	bne.n	8006acc <HAL_DMA_IRQHandler+0x988>
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e000      	b.n	8006ace <HAL_DMA_IRQHandler+0x98a>
 8006acc:	2300      	movs	r3, #0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 823f 	beq.w	8006f52 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ae0:	f003 031f 	and.w	r3, r3, #31
 8006ae4:	2204      	movs	r2, #4
 8006ae6:	409a      	lsls	r2, r3
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	4013      	ands	r3, r2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 80cd 	beq.w	8006c8c <HAL_DMA_IRQHandler+0xb48>
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f003 0304 	and.w	r3, r3, #4
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 80c7 	beq.w	8006c8c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b02:	f003 031f 	and.w	r3, r3, #31
 8006b06:	2204      	movs	r2, #4
 8006b08:	409a      	lsls	r2, r3
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d049      	beq.n	8006bac <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d109      	bne.n	8006b36 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 8210 	beq.w	8006f4c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b34:	e20a      	b.n	8006f4c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 8206 	beq.w	8006f4c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b48:	e200      	b.n	8006f4c <HAL_DMA_IRQHandler+0xe08>
 8006b4a:	bf00      	nop
 8006b4c:	40020010 	.word	0x40020010
 8006b50:	40020028 	.word	0x40020028
 8006b54:	40020040 	.word	0x40020040
 8006b58:	40020058 	.word	0x40020058
 8006b5c:	40020070 	.word	0x40020070
 8006b60:	40020088 	.word	0x40020088
 8006b64:	400200a0 	.word	0x400200a0
 8006b68:	400200b8 	.word	0x400200b8
 8006b6c:	40020410 	.word	0x40020410
 8006b70:	40020428 	.word	0x40020428
 8006b74:	40020440 	.word	0x40020440
 8006b78:	40020458 	.word	0x40020458
 8006b7c:	40020470 	.word	0x40020470
 8006b80:	40020488 	.word	0x40020488
 8006b84:	400204a0 	.word	0x400204a0
 8006b88:	400204b8 	.word	0x400204b8
 8006b8c:	58025408 	.word	0x58025408
 8006b90:	5802541c 	.word	0x5802541c
 8006b94:	58025430 	.word	0x58025430
 8006b98:	58025444 	.word	0x58025444
 8006b9c:	58025458 	.word	0x58025458
 8006ba0:	5802546c 	.word	0x5802546c
 8006ba4:	58025480 	.word	0x58025480
 8006ba8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	f003 0320 	and.w	r3, r3, #32
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d160      	bne.n	8006c78 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a7f      	ldr	r2, [pc, #508]	; (8006db8 <HAL_DMA_IRQHandler+0xc74>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d04a      	beq.n	8006c56 <HAL_DMA_IRQHandler+0xb12>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a7d      	ldr	r2, [pc, #500]	; (8006dbc <HAL_DMA_IRQHandler+0xc78>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d045      	beq.n	8006c56 <HAL_DMA_IRQHandler+0xb12>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a7c      	ldr	r2, [pc, #496]	; (8006dc0 <HAL_DMA_IRQHandler+0xc7c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d040      	beq.n	8006c56 <HAL_DMA_IRQHandler+0xb12>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a7a      	ldr	r2, [pc, #488]	; (8006dc4 <HAL_DMA_IRQHandler+0xc80>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d03b      	beq.n	8006c56 <HAL_DMA_IRQHandler+0xb12>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a79      	ldr	r2, [pc, #484]	; (8006dc8 <HAL_DMA_IRQHandler+0xc84>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d036      	beq.n	8006c56 <HAL_DMA_IRQHandler+0xb12>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a77      	ldr	r2, [pc, #476]	; (8006dcc <HAL_DMA_IRQHandler+0xc88>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d031      	beq.n	8006c56 <HAL_DMA_IRQHandler+0xb12>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a76      	ldr	r2, [pc, #472]	; (8006dd0 <HAL_DMA_IRQHandler+0xc8c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d02c      	beq.n	8006c56 <HAL_DMA_IRQHandler+0xb12>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a74      	ldr	r2, [pc, #464]	; (8006dd4 <HAL_DMA_IRQHandler+0xc90>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d027      	beq.n	8006c56 <HAL_DMA_IRQHandler+0xb12>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a73      	ldr	r2, [pc, #460]	; (8006dd8 <HAL_DMA_IRQHandler+0xc94>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d022      	beq.n	8006c56 <HAL_DMA_IRQHandler+0xb12>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a71      	ldr	r2, [pc, #452]	; (8006ddc <HAL_DMA_IRQHandler+0xc98>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d01d      	beq.n	8006c56 <HAL_DMA_IRQHandler+0xb12>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a70      	ldr	r2, [pc, #448]	; (8006de0 <HAL_DMA_IRQHandler+0xc9c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d018      	beq.n	8006c56 <HAL_DMA_IRQHandler+0xb12>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a6e      	ldr	r2, [pc, #440]	; (8006de4 <HAL_DMA_IRQHandler+0xca0>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d013      	beq.n	8006c56 <HAL_DMA_IRQHandler+0xb12>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a6d      	ldr	r2, [pc, #436]	; (8006de8 <HAL_DMA_IRQHandler+0xca4>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d00e      	beq.n	8006c56 <HAL_DMA_IRQHandler+0xb12>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a6b      	ldr	r2, [pc, #428]	; (8006dec <HAL_DMA_IRQHandler+0xca8>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d009      	beq.n	8006c56 <HAL_DMA_IRQHandler+0xb12>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a6a      	ldr	r2, [pc, #424]	; (8006df0 <HAL_DMA_IRQHandler+0xcac>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d004      	beq.n	8006c56 <HAL_DMA_IRQHandler+0xb12>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a68      	ldr	r2, [pc, #416]	; (8006df4 <HAL_DMA_IRQHandler+0xcb0>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d108      	bne.n	8006c68 <HAL_DMA_IRQHandler+0xb24>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 0208 	bic.w	r2, r2, #8
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	e007      	b.n	8006c78 <HAL_DMA_IRQHandler+0xb34>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f022 0204 	bic.w	r2, r2, #4
 8006c76:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 8165 	beq.w	8006f4c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c8a:	e15f      	b.n	8006f4c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c90:	f003 031f 	and.w	r3, r3, #31
 8006c94:	2202      	movs	r2, #2
 8006c96:	409a      	lsls	r2, r3
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 80c5 	beq.w	8006e2c <HAL_DMA_IRQHandler+0xce8>
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f003 0302 	and.w	r3, r3, #2
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 80bf 	beq.w	8006e2c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb2:	f003 031f 	and.w	r3, r3, #31
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	409a      	lsls	r2, r3
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d018      	beq.n	8006cfa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d109      	bne.n	8006ce6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 813a 	beq.w	8006f50 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ce4:	e134      	b.n	8006f50 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 8130 	beq.w	8006f50 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cf8:	e12a      	b.n	8006f50 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	f003 0320 	and.w	r3, r3, #32
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f040 8089 	bne.w	8006e18 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a2b      	ldr	r2, [pc, #172]	; (8006db8 <HAL_DMA_IRQHandler+0xc74>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d04a      	beq.n	8006da6 <HAL_DMA_IRQHandler+0xc62>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a29      	ldr	r2, [pc, #164]	; (8006dbc <HAL_DMA_IRQHandler+0xc78>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d045      	beq.n	8006da6 <HAL_DMA_IRQHandler+0xc62>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a28      	ldr	r2, [pc, #160]	; (8006dc0 <HAL_DMA_IRQHandler+0xc7c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d040      	beq.n	8006da6 <HAL_DMA_IRQHandler+0xc62>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a26      	ldr	r2, [pc, #152]	; (8006dc4 <HAL_DMA_IRQHandler+0xc80>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d03b      	beq.n	8006da6 <HAL_DMA_IRQHandler+0xc62>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a25      	ldr	r2, [pc, #148]	; (8006dc8 <HAL_DMA_IRQHandler+0xc84>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d036      	beq.n	8006da6 <HAL_DMA_IRQHandler+0xc62>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a23      	ldr	r2, [pc, #140]	; (8006dcc <HAL_DMA_IRQHandler+0xc88>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d031      	beq.n	8006da6 <HAL_DMA_IRQHandler+0xc62>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a22      	ldr	r2, [pc, #136]	; (8006dd0 <HAL_DMA_IRQHandler+0xc8c>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d02c      	beq.n	8006da6 <HAL_DMA_IRQHandler+0xc62>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a20      	ldr	r2, [pc, #128]	; (8006dd4 <HAL_DMA_IRQHandler+0xc90>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d027      	beq.n	8006da6 <HAL_DMA_IRQHandler+0xc62>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a1f      	ldr	r2, [pc, #124]	; (8006dd8 <HAL_DMA_IRQHandler+0xc94>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d022      	beq.n	8006da6 <HAL_DMA_IRQHandler+0xc62>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a1d      	ldr	r2, [pc, #116]	; (8006ddc <HAL_DMA_IRQHandler+0xc98>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d01d      	beq.n	8006da6 <HAL_DMA_IRQHandler+0xc62>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a1c      	ldr	r2, [pc, #112]	; (8006de0 <HAL_DMA_IRQHandler+0xc9c>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d018      	beq.n	8006da6 <HAL_DMA_IRQHandler+0xc62>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a1a      	ldr	r2, [pc, #104]	; (8006de4 <HAL_DMA_IRQHandler+0xca0>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d013      	beq.n	8006da6 <HAL_DMA_IRQHandler+0xc62>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a19      	ldr	r2, [pc, #100]	; (8006de8 <HAL_DMA_IRQHandler+0xca4>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d00e      	beq.n	8006da6 <HAL_DMA_IRQHandler+0xc62>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a17      	ldr	r2, [pc, #92]	; (8006dec <HAL_DMA_IRQHandler+0xca8>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d009      	beq.n	8006da6 <HAL_DMA_IRQHandler+0xc62>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a16      	ldr	r2, [pc, #88]	; (8006df0 <HAL_DMA_IRQHandler+0xcac>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d004      	beq.n	8006da6 <HAL_DMA_IRQHandler+0xc62>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a14      	ldr	r2, [pc, #80]	; (8006df4 <HAL_DMA_IRQHandler+0xcb0>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d128      	bne.n	8006df8 <HAL_DMA_IRQHandler+0xcb4>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 0214 	bic.w	r2, r2, #20
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	e027      	b.n	8006e08 <HAL_DMA_IRQHandler+0xcc4>
 8006db8:	40020010 	.word	0x40020010
 8006dbc:	40020028 	.word	0x40020028
 8006dc0:	40020040 	.word	0x40020040
 8006dc4:	40020058 	.word	0x40020058
 8006dc8:	40020070 	.word	0x40020070
 8006dcc:	40020088 	.word	0x40020088
 8006dd0:	400200a0 	.word	0x400200a0
 8006dd4:	400200b8 	.word	0x400200b8
 8006dd8:	40020410 	.word	0x40020410
 8006ddc:	40020428 	.word	0x40020428
 8006de0:	40020440 	.word	0x40020440
 8006de4:	40020458 	.word	0x40020458
 8006de8:	40020470 	.word	0x40020470
 8006dec:	40020488 	.word	0x40020488
 8006df0:	400204a0 	.word	0x400204a0
 8006df4:	400204b8 	.word	0x400204b8
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 020a 	bic.w	r2, r2, #10
 8006e06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f000 8097 	beq.w	8006f50 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e2a:	e091      	b.n	8006f50 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e30:	f003 031f 	and.w	r3, r3, #31
 8006e34:	2208      	movs	r2, #8
 8006e36:	409a      	lsls	r2, r3
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 8088 	beq.w	8006f52 <HAL_DMA_IRQHandler+0xe0e>
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	f003 0308 	and.w	r3, r3, #8
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 8082 	beq.w	8006f52 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a41      	ldr	r2, [pc, #260]	; (8006f58 <HAL_DMA_IRQHandler+0xe14>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d04a      	beq.n	8006eee <HAL_DMA_IRQHandler+0xdaa>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a3f      	ldr	r2, [pc, #252]	; (8006f5c <HAL_DMA_IRQHandler+0xe18>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d045      	beq.n	8006eee <HAL_DMA_IRQHandler+0xdaa>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a3e      	ldr	r2, [pc, #248]	; (8006f60 <HAL_DMA_IRQHandler+0xe1c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d040      	beq.n	8006eee <HAL_DMA_IRQHandler+0xdaa>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a3c      	ldr	r2, [pc, #240]	; (8006f64 <HAL_DMA_IRQHandler+0xe20>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d03b      	beq.n	8006eee <HAL_DMA_IRQHandler+0xdaa>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a3b      	ldr	r2, [pc, #236]	; (8006f68 <HAL_DMA_IRQHandler+0xe24>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d036      	beq.n	8006eee <HAL_DMA_IRQHandler+0xdaa>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a39      	ldr	r2, [pc, #228]	; (8006f6c <HAL_DMA_IRQHandler+0xe28>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d031      	beq.n	8006eee <HAL_DMA_IRQHandler+0xdaa>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a38      	ldr	r2, [pc, #224]	; (8006f70 <HAL_DMA_IRQHandler+0xe2c>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d02c      	beq.n	8006eee <HAL_DMA_IRQHandler+0xdaa>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a36      	ldr	r2, [pc, #216]	; (8006f74 <HAL_DMA_IRQHandler+0xe30>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d027      	beq.n	8006eee <HAL_DMA_IRQHandler+0xdaa>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a35      	ldr	r2, [pc, #212]	; (8006f78 <HAL_DMA_IRQHandler+0xe34>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d022      	beq.n	8006eee <HAL_DMA_IRQHandler+0xdaa>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a33      	ldr	r2, [pc, #204]	; (8006f7c <HAL_DMA_IRQHandler+0xe38>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d01d      	beq.n	8006eee <HAL_DMA_IRQHandler+0xdaa>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a32      	ldr	r2, [pc, #200]	; (8006f80 <HAL_DMA_IRQHandler+0xe3c>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d018      	beq.n	8006eee <HAL_DMA_IRQHandler+0xdaa>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a30      	ldr	r2, [pc, #192]	; (8006f84 <HAL_DMA_IRQHandler+0xe40>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d013      	beq.n	8006eee <HAL_DMA_IRQHandler+0xdaa>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a2f      	ldr	r2, [pc, #188]	; (8006f88 <HAL_DMA_IRQHandler+0xe44>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d00e      	beq.n	8006eee <HAL_DMA_IRQHandler+0xdaa>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a2d      	ldr	r2, [pc, #180]	; (8006f8c <HAL_DMA_IRQHandler+0xe48>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d009      	beq.n	8006eee <HAL_DMA_IRQHandler+0xdaa>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a2c      	ldr	r2, [pc, #176]	; (8006f90 <HAL_DMA_IRQHandler+0xe4c>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d004      	beq.n	8006eee <HAL_DMA_IRQHandler+0xdaa>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a2a      	ldr	r2, [pc, #168]	; (8006f94 <HAL_DMA_IRQHandler+0xe50>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d108      	bne.n	8006f00 <HAL_DMA_IRQHandler+0xdbc>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 021c 	bic.w	r2, r2, #28
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	e007      	b.n	8006f10 <HAL_DMA_IRQHandler+0xdcc>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 020e 	bic.w	r2, r2, #14
 8006f0e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f14:	f003 031f 	and.w	r3, r3, #31
 8006f18:	2201      	movs	r2, #1
 8006f1a:	409a      	lsls	r2, r3
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d009      	beq.n	8006f52 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	4798      	blx	r3
 8006f46:	e004      	b.n	8006f52 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006f48:	bf00      	nop
 8006f4a:	e002      	b.n	8006f52 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f4c:	bf00      	nop
 8006f4e:	e000      	b.n	8006f52 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f50:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f52:	3728      	adds	r7, #40	; 0x28
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	40020010 	.word	0x40020010
 8006f5c:	40020028 	.word	0x40020028
 8006f60:	40020040 	.word	0x40020040
 8006f64:	40020058 	.word	0x40020058
 8006f68:	40020070 	.word	0x40020070
 8006f6c:	40020088 	.word	0x40020088
 8006f70:	400200a0 	.word	0x400200a0
 8006f74:	400200b8 	.word	0x400200b8
 8006f78:	40020410 	.word	0x40020410
 8006f7c:	40020428 	.word	0x40020428
 8006f80:	40020440 	.word	0x40020440
 8006f84:	40020458 	.word	0x40020458
 8006f88:	40020470 	.word	0x40020470
 8006f8c:	40020488 	.word	0x40020488
 8006f90:	400204a0 	.word	0x400204a0
 8006f94:	400204b8 	.word	0x400204b8

08006f98 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b087      	sub	sp, #28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
 8006fa4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006faa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a7f      	ldr	r2, [pc, #508]	; (80071b4 <DMA_SetConfig+0x21c>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d072      	beq.n	80070a2 <DMA_SetConfig+0x10a>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a7d      	ldr	r2, [pc, #500]	; (80071b8 <DMA_SetConfig+0x220>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d06d      	beq.n	80070a2 <DMA_SetConfig+0x10a>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a7c      	ldr	r2, [pc, #496]	; (80071bc <DMA_SetConfig+0x224>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d068      	beq.n	80070a2 <DMA_SetConfig+0x10a>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a7a      	ldr	r2, [pc, #488]	; (80071c0 <DMA_SetConfig+0x228>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d063      	beq.n	80070a2 <DMA_SetConfig+0x10a>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a79      	ldr	r2, [pc, #484]	; (80071c4 <DMA_SetConfig+0x22c>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d05e      	beq.n	80070a2 <DMA_SetConfig+0x10a>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a77      	ldr	r2, [pc, #476]	; (80071c8 <DMA_SetConfig+0x230>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d059      	beq.n	80070a2 <DMA_SetConfig+0x10a>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a76      	ldr	r2, [pc, #472]	; (80071cc <DMA_SetConfig+0x234>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d054      	beq.n	80070a2 <DMA_SetConfig+0x10a>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a74      	ldr	r2, [pc, #464]	; (80071d0 <DMA_SetConfig+0x238>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d04f      	beq.n	80070a2 <DMA_SetConfig+0x10a>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a73      	ldr	r2, [pc, #460]	; (80071d4 <DMA_SetConfig+0x23c>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d04a      	beq.n	80070a2 <DMA_SetConfig+0x10a>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a71      	ldr	r2, [pc, #452]	; (80071d8 <DMA_SetConfig+0x240>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d045      	beq.n	80070a2 <DMA_SetConfig+0x10a>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a70      	ldr	r2, [pc, #448]	; (80071dc <DMA_SetConfig+0x244>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d040      	beq.n	80070a2 <DMA_SetConfig+0x10a>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a6e      	ldr	r2, [pc, #440]	; (80071e0 <DMA_SetConfig+0x248>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d03b      	beq.n	80070a2 <DMA_SetConfig+0x10a>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a6d      	ldr	r2, [pc, #436]	; (80071e4 <DMA_SetConfig+0x24c>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d036      	beq.n	80070a2 <DMA_SetConfig+0x10a>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a6b      	ldr	r2, [pc, #428]	; (80071e8 <DMA_SetConfig+0x250>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d031      	beq.n	80070a2 <DMA_SetConfig+0x10a>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a6a      	ldr	r2, [pc, #424]	; (80071ec <DMA_SetConfig+0x254>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d02c      	beq.n	80070a2 <DMA_SetConfig+0x10a>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a68      	ldr	r2, [pc, #416]	; (80071f0 <DMA_SetConfig+0x258>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d027      	beq.n	80070a2 <DMA_SetConfig+0x10a>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a67      	ldr	r2, [pc, #412]	; (80071f4 <DMA_SetConfig+0x25c>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d022      	beq.n	80070a2 <DMA_SetConfig+0x10a>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a65      	ldr	r2, [pc, #404]	; (80071f8 <DMA_SetConfig+0x260>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d01d      	beq.n	80070a2 <DMA_SetConfig+0x10a>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a64      	ldr	r2, [pc, #400]	; (80071fc <DMA_SetConfig+0x264>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d018      	beq.n	80070a2 <DMA_SetConfig+0x10a>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a62      	ldr	r2, [pc, #392]	; (8007200 <DMA_SetConfig+0x268>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d013      	beq.n	80070a2 <DMA_SetConfig+0x10a>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a61      	ldr	r2, [pc, #388]	; (8007204 <DMA_SetConfig+0x26c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d00e      	beq.n	80070a2 <DMA_SetConfig+0x10a>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a5f      	ldr	r2, [pc, #380]	; (8007208 <DMA_SetConfig+0x270>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d009      	beq.n	80070a2 <DMA_SetConfig+0x10a>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a5e      	ldr	r2, [pc, #376]	; (800720c <DMA_SetConfig+0x274>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d004      	beq.n	80070a2 <DMA_SetConfig+0x10a>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a5c      	ldr	r2, [pc, #368]	; (8007210 <DMA_SetConfig+0x278>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d101      	bne.n	80070a6 <DMA_SetConfig+0x10e>
 80070a2:	2301      	movs	r3, #1
 80070a4:	e000      	b.n	80070a8 <DMA_SetConfig+0x110>
 80070a6:	2300      	movs	r3, #0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00d      	beq.n	80070c8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80070b4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d004      	beq.n	80070c8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80070c6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a39      	ldr	r2, [pc, #228]	; (80071b4 <DMA_SetConfig+0x21c>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d04a      	beq.n	8007168 <DMA_SetConfig+0x1d0>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a38      	ldr	r2, [pc, #224]	; (80071b8 <DMA_SetConfig+0x220>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d045      	beq.n	8007168 <DMA_SetConfig+0x1d0>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a36      	ldr	r2, [pc, #216]	; (80071bc <DMA_SetConfig+0x224>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d040      	beq.n	8007168 <DMA_SetConfig+0x1d0>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a35      	ldr	r2, [pc, #212]	; (80071c0 <DMA_SetConfig+0x228>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d03b      	beq.n	8007168 <DMA_SetConfig+0x1d0>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a33      	ldr	r2, [pc, #204]	; (80071c4 <DMA_SetConfig+0x22c>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d036      	beq.n	8007168 <DMA_SetConfig+0x1d0>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a32      	ldr	r2, [pc, #200]	; (80071c8 <DMA_SetConfig+0x230>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d031      	beq.n	8007168 <DMA_SetConfig+0x1d0>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a30      	ldr	r2, [pc, #192]	; (80071cc <DMA_SetConfig+0x234>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d02c      	beq.n	8007168 <DMA_SetConfig+0x1d0>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a2f      	ldr	r2, [pc, #188]	; (80071d0 <DMA_SetConfig+0x238>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d027      	beq.n	8007168 <DMA_SetConfig+0x1d0>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a2d      	ldr	r2, [pc, #180]	; (80071d4 <DMA_SetConfig+0x23c>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d022      	beq.n	8007168 <DMA_SetConfig+0x1d0>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a2c      	ldr	r2, [pc, #176]	; (80071d8 <DMA_SetConfig+0x240>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d01d      	beq.n	8007168 <DMA_SetConfig+0x1d0>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a2a      	ldr	r2, [pc, #168]	; (80071dc <DMA_SetConfig+0x244>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d018      	beq.n	8007168 <DMA_SetConfig+0x1d0>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a29      	ldr	r2, [pc, #164]	; (80071e0 <DMA_SetConfig+0x248>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d013      	beq.n	8007168 <DMA_SetConfig+0x1d0>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a27      	ldr	r2, [pc, #156]	; (80071e4 <DMA_SetConfig+0x24c>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d00e      	beq.n	8007168 <DMA_SetConfig+0x1d0>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a26      	ldr	r2, [pc, #152]	; (80071e8 <DMA_SetConfig+0x250>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d009      	beq.n	8007168 <DMA_SetConfig+0x1d0>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a24      	ldr	r2, [pc, #144]	; (80071ec <DMA_SetConfig+0x254>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d004      	beq.n	8007168 <DMA_SetConfig+0x1d0>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a23      	ldr	r2, [pc, #140]	; (80071f0 <DMA_SetConfig+0x258>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d101      	bne.n	800716c <DMA_SetConfig+0x1d4>
 8007168:	2301      	movs	r3, #1
 800716a:	e000      	b.n	800716e <DMA_SetConfig+0x1d6>
 800716c:	2300      	movs	r3, #0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d059      	beq.n	8007226 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007176:	f003 031f 	and.w	r3, r3, #31
 800717a:	223f      	movs	r2, #63	; 0x3f
 800717c:	409a      	lsls	r2, r3
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007190:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	2b40      	cmp	r3, #64	; 0x40
 80071a0:	d138      	bne.n	8007214 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80071b2:	e086      	b.n	80072c2 <DMA_SetConfig+0x32a>
 80071b4:	40020010 	.word	0x40020010
 80071b8:	40020028 	.word	0x40020028
 80071bc:	40020040 	.word	0x40020040
 80071c0:	40020058 	.word	0x40020058
 80071c4:	40020070 	.word	0x40020070
 80071c8:	40020088 	.word	0x40020088
 80071cc:	400200a0 	.word	0x400200a0
 80071d0:	400200b8 	.word	0x400200b8
 80071d4:	40020410 	.word	0x40020410
 80071d8:	40020428 	.word	0x40020428
 80071dc:	40020440 	.word	0x40020440
 80071e0:	40020458 	.word	0x40020458
 80071e4:	40020470 	.word	0x40020470
 80071e8:	40020488 	.word	0x40020488
 80071ec:	400204a0 	.word	0x400204a0
 80071f0:	400204b8 	.word	0x400204b8
 80071f4:	58025408 	.word	0x58025408
 80071f8:	5802541c 	.word	0x5802541c
 80071fc:	58025430 	.word	0x58025430
 8007200:	58025444 	.word	0x58025444
 8007204:	58025458 	.word	0x58025458
 8007208:	5802546c 	.word	0x5802546c
 800720c:	58025480 	.word	0x58025480
 8007210:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	60da      	str	r2, [r3, #12]
}
 8007224:	e04d      	b.n	80072c2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a29      	ldr	r2, [pc, #164]	; (80072d0 <DMA_SetConfig+0x338>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d022      	beq.n	8007276 <DMA_SetConfig+0x2de>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a27      	ldr	r2, [pc, #156]	; (80072d4 <DMA_SetConfig+0x33c>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d01d      	beq.n	8007276 <DMA_SetConfig+0x2de>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a26      	ldr	r2, [pc, #152]	; (80072d8 <DMA_SetConfig+0x340>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d018      	beq.n	8007276 <DMA_SetConfig+0x2de>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a24      	ldr	r2, [pc, #144]	; (80072dc <DMA_SetConfig+0x344>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d013      	beq.n	8007276 <DMA_SetConfig+0x2de>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a23      	ldr	r2, [pc, #140]	; (80072e0 <DMA_SetConfig+0x348>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d00e      	beq.n	8007276 <DMA_SetConfig+0x2de>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a21      	ldr	r2, [pc, #132]	; (80072e4 <DMA_SetConfig+0x34c>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d009      	beq.n	8007276 <DMA_SetConfig+0x2de>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a20      	ldr	r2, [pc, #128]	; (80072e8 <DMA_SetConfig+0x350>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d004      	beq.n	8007276 <DMA_SetConfig+0x2de>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a1e      	ldr	r2, [pc, #120]	; (80072ec <DMA_SetConfig+0x354>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d101      	bne.n	800727a <DMA_SetConfig+0x2e2>
 8007276:	2301      	movs	r3, #1
 8007278:	e000      	b.n	800727c <DMA_SetConfig+0x2e4>
 800727a:	2300      	movs	r3, #0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d020      	beq.n	80072c2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007284:	f003 031f 	and.w	r3, r3, #31
 8007288:	2201      	movs	r2, #1
 800728a:	409a      	lsls	r2, r3
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	2b40      	cmp	r3, #64	; 0x40
 800729e:	d108      	bne.n	80072b2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	60da      	str	r2, [r3, #12]
}
 80072b0:	e007      	b.n	80072c2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	60da      	str	r2, [r3, #12]
}
 80072c2:	bf00      	nop
 80072c4:	371c      	adds	r7, #28
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	58025408 	.word	0x58025408
 80072d4:	5802541c 	.word	0x5802541c
 80072d8:	58025430 	.word	0x58025430
 80072dc:	58025444 	.word	0x58025444
 80072e0:	58025458 	.word	0x58025458
 80072e4:	5802546c 	.word	0x5802546c
 80072e8:	58025480 	.word	0x58025480
 80072ec:	58025494 	.word	0x58025494

080072f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a42      	ldr	r2, [pc, #264]	; (8007408 <DMA_CalcBaseAndBitshift+0x118>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d04a      	beq.n	8007398 <DMA_CalcBaseAndBitshift+0xa8>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a41      	ldr	r2, [pc, #260]	; (800740c <DMA_CalcBaseAndBitshift+0x11c>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d045      	beq.n	8007398 <DMA_CalcBaseAndBitshift+0xa8>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a3f      	ldr	r2, [pc, #252]	; (8007410 <DMA_CalcBaseAndBitshift+0x120>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d040      	beq.n	8007398 <DMA_CalcBaseAndBitshift+0xa8>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a3e      	ldr	r2, [pc, #248]	; (8007414 <DMA_CalcBaseAndBitshift+0x124>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d03b      	beq.n	8007398 <DMA_CalcBaseAndBitshift+0xa8>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a3c      	ldr	r2, [pc, #240]	; (8007418 <DMA_CalcBaseAndBitshift+0x128>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d036      	beq.n	8007398 <DMA_CalcBaseAndBitshift+0xa8>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a3b      	ldr	r2, [pc, #236]	; (800741c <DMA_CalcBaseAndBitshift+0x12c>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d031      	beq.n	8007398 <DMA_CalcBaseAndBitshift+0xa8>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a39      	ldr	r2, [pc, #228]	; (8007420 <DMA_CalcBaseAndBitshift+0x130>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d02c      	beq.n	8007398 <DMA_CalcBaseAndBitshift+0xa8>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a38      	ldr	r2, [pc, #224]	; (8007424 <DMA_CalcBaseAndBitshift+0x134>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d027      	beq.n	8007398 <DMA_CalcBaseAndBitshift+0xa8>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a36      	ldr	r2, [pc, #216]	; (8007428 <DMA_CalcBaseAndBitshift+0x138>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d022      	beq.n	8007398 <DMA_CalcBaseAndBitshift+0xa8>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a35      	ldr	r2, [pc, #212]	; (800742c <DMA_CalcBaseAndBitshift+0x13c>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d01d      	beq.n	8007398 <DMA_CalcBaseAndBitshift+0xa8>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a33      	ldr	r2, [pc, #204]	; (8007430 <DMA_CalcBaseAndBitshift+0x140>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d018      	beq.n	8007398 <DMA_CalcBaseAndBitshift+0xa8>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a32      	ldr	r2, [pc, #200]	; (8007434 <DMA_CalcBaseAndBitshift+0x144>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d013      	beq.n	8007398 <DMA_CalcBaseAndBitshift+0xa8>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a30      	ldr	r2, [pc, #192]	; (8007438 <DMA_CalcBaseAndBitshift+0x148>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d00e      	beq.n	8007398 <DMA_CalcBaseAndBitshift+0xa8>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a2f      	ldr	r2, [pc, #188]	; (800743c <DMA_CalcBaseAndBitshift+0x14c>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d009      	beq.n	8007398 <DMA_CalcBaseAndBitshift+0xa8>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a2d      	ldr	r2, [pc, #180]	; (8007440 <DMA_CalcBaseAndBitshift+0x150>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d004      	beq.n	8007398 <DMA_CalcBaseAndBitshift+0xa8>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a2c      	ldr	r2, [pc, #176]	; (8007444 <DMA_CalcBaseAndBitshift+0x154>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d101      	bne.n	800739c <DMA_CalcBaseAndBitshift+0xac>
 8007398:	2301      	movs	r3, #1
 800739a:	e000      	b.n	800739e <DMA_CalcBaseAndBitshift+0xae>
 800739c:	2300      	movs	r3, #0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d024      	beq.n	80073ec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	3b10      	subs	r3, #16
 80073aa:	4a27      	ldr	r2, [pc, #156]	; (8007448 <DMA_CalcBaseAndBitshift+0x158>)
 80073ac:	fba2 2303 	umull	r2, r3, r2, r3
 80073b0:	091b      	lsrs	r3, r3, #4
 80073b2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f003 0307 	and.w	r3, r3, #7
 80073ba:	4a24      	ldr	r2, [pc, #144]	; (800744c <DMA_CalcBaseAndBitshift+0x15c>)
 80073bc:	5cd3      	ldrb	r3, [r2, r3]
 80073be:	461a      	mov	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d908      	bls.n	80073dc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	461a      	mov	r2, r3
 80073d0:	4b1f      	ldr	r3, [pc, #124]	; (8007450 <DMA_CalcBaseAndBitshift+0x160>)
 80073d2:	4013      	ands	r3, r2
 80073d4:	1d1a      	adds	r2, r3, #4
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	659a      	str	r2, [r3, #88]	; 0x58
 80073da:	e00d      	b.n	80073f8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	461a      	mov	r2, r3
 80073e2:	4b1b      	ldr	r3, [pc, #108]	; (8007450 <DMA_CalcBaseAndBitshift+0x160>)
 80073e4:	4013      	ands	r3, r2
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	6593      	str	r3, [r2, #88]	; 0x58
 80073ea:	e005      	b.n	80073f8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3714      	adds	r7, #20
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	40020010 	.word	0x40020010
 800740c:	40020028 	.word	0x40020028
 8007410:	40020040 	.word	0x40020040
 8007414:	40020058 	.word	0x40020058
 8007418:	40020070 	.word	0x40020070
 800741c:	40020088 	.word	0x40020088
 8007420:	400200a0 	.word	0x400200a0
 8007424:	400200b8 	.word	0x400200b8
 8007428:	40020410 	.word	0x40020410
 800742c:	40020428 	.word	0x40020428
 8007430:	40020440 	.word	0x40020440
 8007434:	40020458 	.word	0x40020458
 8007438:	40020470 	.word	0x40020470
 800743c:	40020488 	.word	0x40020488
 8007440:	400204a0 	.word	0x400204a0
 8007444:	400204b8 	.word	0x400204b8
 8007448:	aaaaaaab 	.word	0xaaaaaaab
 800744c:	08010064 	.word	0x08010064
 8007450:	fffffc00 	.word	0xfffffc00

08007454 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800745c:	2300      	movs	r3, #0
 800745e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d120      	bne.n	80074aa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746c:	2b03      	cmp	r3, #3
 800746e:	d858      	bhi.n	8007522 <DMA_CheckFifoParam+0xce>
 8007470:	a201      	add	r2, pc, #4	; (adr r2, 8007478 <DMA_CheckFifoParam+0x24>)
 8007472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007476:	bf00      	nop
 8007478:	08007489 	.word	0x08007489
 800747c:	0800749b 	.word	0x0800749b
 8007480:	08007489 	.word	0x08007489
 8007484:	08007523 	.word	0x08007523
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d048      	beq.n	8007526 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007498:	e045      	b.n	8007526 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80074a2:	d142      	bne.n	800752a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074a8:	e03f      	b.n	800752a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074b2:	d123      	bne.n	80074fc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b8:	2b03      	cmp	r3, #3
 80074ba:	d838      	bhi.n	800752e <DMA_CheckFifoParam+0xda>
 80074bc:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <DMA_CheckFifoParam+0x70>)
 80074be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c2:	bf00      	nop
 80074c4:	080074d5 	.word	0x080074d5
 80074c8:	080074db 	.word	0x080074db
 80074cc:	080074d5 	.word	0x080074d5
 80074d0:	080074ed 	.word	0x080074ed
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	73fb      	strb	r3, [r7, #15]
        break;
 80074d8:	e030      	b.n	800753c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d025      	beq.n	8007532 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074ea:	e022      	b.n	8007532 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80074f4:	d11f      	bne.n	8007536 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074fa:	e01c      	b.n	8007536 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007500:	2b02      	cmp	r3, #2
 8007502:	d902      	bls.n	800750a <DMA_CheckFifoParam+0xb6>
 8007504:	2b03      	cmp	r3, #3
 8007506:	d003      	beq.n	8007510 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007508:	e018      	b.n	800753c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	73fb      	strb	r3, [r7, #15]
        break;
 800750e:	e015      	b.n	800753c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007514:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00e      	beq.n	800753a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	73fb      	strb	r3, [r7, #15]
    break;
 8007520:	e00b      	b.n	800753a <DMA_CheckFifoParam+0xe6>
        break;
 8007522:	bf00      	nop
 8007524:	e00a      	b.n	800753c <DMA_CheckFifoParam+0xe8>
        break;
 8007526:	bf00      	nop
 8007528:	e008      	b.n	800753c <DMA_CheckFifoParam+0xe8>
        break;
 800752a:	bf00      	nop
 800752c:	e006      	b.n	800753c <DMA_CheckFifoParam+0xe8>
        break;
 800752e:	bf00      	nop
 8007530:	e004      	b.n	800753c <DMA_CheckFifoParam+0xe8>
        break;
 8007532:	bf00      	nop
 8007534:	e002      	b.n	800753c <DMA_CheckFifoParam+0xe8>
        break;
 8007536:	bf00      	nop
 8007538:	e000      	b.n	800753c <DMA_CheckFifoParam+0xe8>
    break;
 800753a:	bf00      	nop
    }
  }

  return status;
 800753c:	7bfb      	ldrb	r3, [r7, #15]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop

0800754c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a38      	ldr	r2, [pc, #224]	; (8007640 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d022      	beq.n	80075aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a36      	ldr	r2, [pc, #216]	; (8007644 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d01d      	beq.n	80075aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a35      	ldr	r2, [pc, #212]	; (8007648 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d018      	beq.n	80075aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a33      	ldr	r2, [pc, #204]	; (800764c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d013      	beq.n	80075aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a32      	ldr	r2, [pc, #200]	; (8007650 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d00e      	beq.n	80075aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a30      	ldr	r2, [pc, #192]	; (8007654 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d009      	beq.n	80075aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a2f      	ldr	r2, [pc, #188]	; (8007658 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d004      	beq.n	80075aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a2d      	ldr	r2, [pc, #180]	; (800765c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d101      	bne.n	80075ae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80075aa:	2301      	movs	r3, #1
 80075ac:	e000      	b.n	80075b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80075ae:	2300      	movs	r3, #0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d01a      	beq.n	80075ea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	3b08      	subs	r3, #8
 80075bc:	4a28      	ldr	r2, [pc, #160]	; (8007660 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80075be:	fba2 2303 	umull	r2, r3, r2, r3
 80075c2:	091b      	lsrs	r3, r3, #4
 80075c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	4b26      	ldr	r3, [pc, #152]	; (8007664 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80075ca:	4413      	add	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	461a      	mov	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a24      	ldr	r2, [pc, #144]	; (8007668 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80075d8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f003 031f 	and.w	r3, r3, #31
 80075e0:	2201      	movs	r2, #1
 80075e2:	409a      	lsls	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80075e8:	e024      	b.n	8007634 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	3b10      	subs	r3, #16
 80075f2:	4a1e      	ldr	r2, [pc, #120]	; (800766c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80075f4:	fba2 2303 	umull	r2, r3, r2, r3
 80075f8:	091b      	lsrs	r3, r3, #4
 80075fa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	4a1c      	ldr	r2, [pc, #112]	; (8007670 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d806      	bhi.n	8007612 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	4a1b      	ldr	r2, [pc, #108]	; (8007674 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d902      	bls.n	8007612 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	3308      	adds	r3, #8
 8007610:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	4b18      	ldr	r3, [pc, #96]	; (8007678 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007616:	4413      	add	r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	461a      	mov	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a16      	ldr	r2, [pc, #88]	; (800767c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007624:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f003 031f 	and.w	r3, r3, #31
 800762c:	2201      	movs	r2, #1
 800762e:	409a      	lsls	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007634:	bf00      	nop
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	58025408 	.word	0x58025408
 8007644:	5802541c 	.word	0x5802541c
 8007648:	58025430 	.word	0x58025430
 800764c:	58025444 	.word	0x58025444
 8007650:	58025458 	.word	0x58025458
 8007654:	5802546c 	.word	0x5802546c
 8007658:	58025480 	.word	0x58025480
 800765c:	58025494 	.word	0x58025494
 8007660:	cccccccd 	.word	0xcccccccd
 8007664:	16009600 	.word	0x16009600
 8007668:	58025880 	.word	0x58025880
 800766c:	aaaaaaab 	.word	0xaaaaaaab
 8007670:	400204b8 	.word	0x400204b8
 8007674:	4002040f 	.word	0x4002040f
 8007678:	10008200 	.word	0x10008200
 800767c:	40020880 	.word	0x40020880

08007680 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	b2db      	uxtb	r3, r3
 800768e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d04a      	beq.n	800772c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2b08      	cmp	r3, #8
 800769a:	d847      	bhi.n	800772c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a25      	ldr	r2, [pc, #148]	; (8007738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d022      	beq.n	80076ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a24      	ldr	r2, [pc, #144]	; (800773c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d01d      	beq.n	80076ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a22      	ldr	r2, [pc, #136]	; (8007740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d018      	beq.n	80076ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a21      	ldr	r2, [pc, #132]	; (8007744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d013      	beq.n	80076ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a1f      	ldr	r2, [pc, #124]	; (8007748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d00e      	beq.n	80076ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a1e      	ldr	r2, [pc, #120]	; (800774c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d009      	beq.n	80076ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a1c      	ldr	r2, [pc, #112]	; (8007750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d004      	beq.n	80076ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a1b      	ldr	r2, [pc, #108]	; (8007754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d101      	bne.n	80076f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80076ec:	2301      	movs	r3, #1
 80076ee:	e000      	b.n	80076f2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80076f0:	2300      	movs	r3, #0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00a      	beq.n	800770c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	4b17      	ldr	r3, [pc, #92]	; (8007758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80076fa:	4413      	add	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	461a      	mov	r2, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a15      	ldr	r2, [pc, #84]	; (800775c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007708:	671a      	str	r2, [r3, #112]	; 0x70
 800770a:	e009      	b.n	8007720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	4b14      	ldr	r3, [pc, #80]	; (8007760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007710:	4413      	add	r3, r2
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	461a      	mov	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a11      	ldr	r2, [pc, #68]	; (8007764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800771e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	3b01      	subs	r3, #1
 8007724:	2201      	movs	r2, #1
 8007726:	409a      	lsls	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800772c:	bf00      	nop
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	58025408 	.word	0x58025408
 800773c:	5802541c 	.word	0x5802541c
 8007740:	58025430 	.word	0x58025430
 8007744:	58025444 	.word	0x58025444
 8007748:	58025458 	.word	0x58025458
 800774c:	5802546c 	.word	0x5802546c
 8007750:	58025480 	.word	0x58025480
 8007754:	58025494 	.word	0x58025494
 8007758:	1600963f 	.word	0x1600963f
 800775c:	58025940 	.word	0x58025940
 8007760:	1000823f 	.word	0x1000823f
 8007764:	40020940 	.word	0x40020940

08007768 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007768:	b480      	push	{r7}
 800776a:	b089      	sub	sp, #36	; 0x24
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007772:	2300      	movs	r3, #0
 8007774:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007776:	4b89      	ldr	r3, [pc, #548]	; (800799c <HAL_GPIO_Init+0x234>)
 8007778:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800777a:	e194      	b.n	8007aa6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	2101      	movs	r1, #1
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	fa01 f303 	lsl.w	r3, r1, r3
 8007788:	4013      	ands	r3, r2
 800778a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	2b00      	cmp	r3, #0
 8007790:	f000 8186 	beq.w	8007aa0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f003 0303 	and.w	r3, r3, #3
 800779c:	2b01      	cmp	r3, #1
 800779e:	d005      	beq.n	80077ac <HAL_GPIO_Init+0x44>
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	f003 0303 	and.w	r3, r3, #3
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d130      	bne.n	800780e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	005b      	lsls	r3, r3, #1
 80077b6:	2203      	movs	r2, #3
 80077b8:	fa02 f303 	lsl.w	r3, r2, r3
 80077bc:	43db      	mvns	r3, r3
 80077be:	69ba      	ldr	r2, [r7, #24]
 80077c0:	4013      	ands	r3, r2
 80077c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	68da      	ldr	r2, [r3, #12]
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	005b      	lsls	r3, r3, #1
 80077cc:	fa02 f303 	lsl.w	r3, r2, r3
 80077d0:	69ba      	ldr	r2, [r7, #24]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	69ba      	ldr	r2, [r7, #24]
 80077da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80077e2:	2201      	movs	r2, #1
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	fa02 f303 	lsl.w	r3, r2, r3
 80077ea:	43db      	mvns	r3, r3
 80077ec:	69ba      	ldr	r2, [r7, #24]
 80077ee:	4013      	ands	r3, r2
 80077f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	091b      	lsrs	r3, r3, #4
 80077f8:	f003 0201 	and.w	r2, r3, #1
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007802:	69ba      	ldr	r2, [r7, #24]
 8007804:	4313      	orrs	r3, r2
 8007806:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	69ba      	ldr	r2, [r7, #24]
 800780c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	f003 0303 	and.w	r3, r3, #3
 8007816:	2b03      	cmp	r3, #3
 8007818:	d017      	beq.n	800784a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	005b      	lsls	r3, r3, #1
 8007824:	2203      	movs	r2, #3
 8007826:	fa02 f303 	lsl.w	r3, r2, r3
 800782a:	43db      	mvns	r3, r3
 800782c:	69ba      	ldr	r2, [r7, #24]
 800782e:	4013      	ands	r3, r2
 8007830:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	689a      	ldr	r2, [r3, #8]
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	005b      	lsls	r3, r3, #1
 800783a:	fa02 f303 	lsl.w	r3, r2, r3
 800783e:	69ba      	ldr	r2, [r7, #24]
 8007840:	4313      	orrs	r3, r2
 8007842:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	69ba      	ldr	r2, [r7, #24]
 8007848:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	f003 0303 	and.w	r3, r3, #3
 8007852:	2b02      	cmp	r3, #2
 8007854:	d123      	bne.n	800789e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	08da      	lsrs	r2, r3, #3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	3208      	adds	r2, #8
 800785e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007862:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	f003 0307 	and.w	r3, r3, #7
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	220f      	movs	r2, #15
 800786e:	fa02 f303 	lsl.w	r3, r2, r3
 8007872:	43db      	mvns	r3, r3
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	4013      	ands	r3, r2
 8007878:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	691a      	ldr	r2, [r3, #16]
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	f003 0307 	and.w	r3, r3, #7
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	fa02 f303 	lsl.w	r3, r2, r3
 800788a:	69ba      	ldr	r2, [r7, #24]
 800788c:	4313      	orrs	r3, r2
 800788e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	08da      	lsrs	r2, r3, #3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	3208      	adds	r2, #8
 8007898:	69b9      	ldr	r1, [r7, #24]
 800789a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	005b      	lsls	r3, r3, #1
 80078a8:	2203      	movs	r2, #3
 80078aa:	fa02 f303 	lsl.w	r3, r2, r3
 80078ae:	43db      	mvns	r3, r3
 80078b0:	69ba      	ldr	r2, [r7, #24]
 80078b2:	4013      	ands	r3, r2
 80078b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	f003 0203 	and.w	r2, r3, #3
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	fa02 f303 	lsl.w	r3, r2, r3
 80078c6:	69ba      	ldr	r2, [r7, #24]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	69ba      	ldr	r2, [r7, #24]
 80078d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f000 80e0 	beq.w	8007aa0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078e0:	4b2f      	ldr	r3, [pc, #188]	; (80079a0 <HAL_GPIO_Init+0x238>)
 80078e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80078e6:	4a2e      	ldr	r2, [pc, #184]	; (80079a0 <HAL_GPIO_Init+0x238>)
 80078e8:	f043 0302 	orr.w	r3, r3, #2
 80078ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80078f0:	4b2b      	ldr	r3, [pc, #172]	; (80079a0 <HAL_GPIO_Init+0x238>)
 80078f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80078f6:	f003 0302 	and.w	r3, r3, #2
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80078fe:	4a29      	ldr	r2, [pc, #164]	; (80079a4 <HAL_GPIO_Init+0x23c>)
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	089b      	lsrs	r3, r3, #2
 8007904:	3302      	adds	r3, #2
 8007906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800790a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	f003 0303 	and.w	r3, r3, #3
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	220f      	movs	r2, #15
 8007916:	fa02 f303 	lsl.w	r3, r2, r3
 800791a:	43db      	mvns	r3, r3
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	4013      	ands	r3, r2
 8007920:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a20      	ldr	r2, [pc, #128]	; (80079a8 <HAL_GPIO_Init+0x240>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d052      	beq.n	80079d0 <HAL_GPIO_Init+0x268>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a1f      	ldr	r2, [pc, #124]	; (80079ac <HAL_GPIO_Init+0x244>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d031      	beq.n	8007996 <HAL_GPIO_Init+0x22e>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a1e      	ldr	r2, [pc, #120]	; (80079b0 <HAL_GPIO_Init+0x248>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d02b      	beq.n	8007992 <HAL_GPIO_Init+0x22a>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a1d      	ldr	r2, [pc, #116]	; (80079b4 <HAL_GPIO_Init+0x24c>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d025      	beq.n	800798e <HAL_GPIO_Init+0x226>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a1c      	ldr	r2, [pc, #112]	; (80079b8 <HAL_GPIO_Init+0x250>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d01f      	beq.n	800798a <HAL_GPIO_Init+0x222>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a1b      	ldr	r2, [pc, #108]	; (80079bc <HAL_GPIO_Init+0x254>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d019      	beq.n	8007986 <HAL_GPIO_Init+0x21e>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a1a      	ldr	r2, [pc, #104]	; (80079c0 <HAL_GPIO_Init+0x258>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d013      	beq.n	8007982 <HAL_GPIO_Init+0x21a>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a19      	ldr	r2, [pc, #100]	; (80079c4 <HAL_GPIO_Init+0x25c>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d00d      	beq.n	800797e <HAL_GPIO_Init+0x216>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a18      	ldr	r2, [pc, #96]	; (80079c8 <HAL_GPIO_Init+0x260>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d007      	beq.n	800797a <HAL_GPIO_Init+0x212>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a17      	ldr	r2, [pc, #92]	; (80079cc <HAL_GPIO_Init+0x264>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d101      	bne.n	8007976 <HAL_GPIO_Init+0x20e>
 8007972:	2309      	movs	r3, #9
 8007974:	e02d      	b.n	80079d2 <HAL_GPIO_Init+0x26a>
 8007976:	230a      	movs	r3, #10
 8007978:	e02b      	b.n	80079d2 <HAL_GPIO_Init+0x26a>
 800797a:	2308      	movs	r3, #8
 800797c:	e029      	b.n	80079d2 <HAL_GPIO_Init+0x26a>
 800797e:	2307      	movs	r3, #7
 8007980:	e027      	b.n	80079d2 <HAL_GPIO_Init+0x26a>
 8007982:	2306      	movs	r3, #6
 8007984:	e025      	b.n	80079d2 <HAL_GPIO_Init+0x26a>
 8007986:	2305      	movs	r3, #5
 8007988:	e023      	b.n	80079d2 <HAL_GPIO_Init+0x26a>
 800798a:	2304      	movs	r3, #4
 800798c:	e021      	b.n	80079d2 <HAL_GPIO_Init+0x26a>
 800798e:	2303      	movs	r3, #3
 8007990:	e01f      	b.n	80079d2 <HAL_GPIO_Init+0x26a>
 8007992:	2302      	movs	r3, #2
 8007994:	e01d      	b.n	80079d2 <HAL_GPIO_Init+0x26a>
 8007996:	2301      	movs	r3, #1
 8007998:	e01b      	b.n	80079d2 <HAL_GPIO_Init+0x26a>
 800799a:	bf00      	nop
 800799c:	58000080 	.word	0x58000080
 80079a0:	58024400 	.word	0x58024400
 80079a4:	58000400 	.word	0x58000400
 80079a8:	58020000 	.word	0x58020000
 80079ac:	58020400 	.word	0x58020400
 80079b0:	58020800 	.word	0x58020800
 80079b4:	58020c00 	.word	0x58020c00
 80079b8:	58021000 	.word	0x58021000
 80079bc:	58021400 	.word	0x58021400
 80079c0:	58021800 	.word	0x58021800
 80079c4:	58021c00 	.word	0x58021c00
 80079c8:	58022000 	.word	0x58022000
 80079cc:	58022400 	.word	0x58022400
 80079d0:	2300      	movs	r3, #0
 80079d2:	69fa      	ldr	r2, [r7, #28]
 80079d4:	f002 0203 	and.w	r2, r2, #3
 80079d8:	0092      	lsls	r2, r2, #2
 80079da:	4093      	lsls	r3, r2
 80079dc:	69ba      	ldr	r2, [r7, #24]
 80079de:	4313      	orrs	r3, r2
 80079e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80079e2:	4938      	ldr	r1, [pc, #224]	; (8007ac4 <HAL_GPIO_Init+0x35c>)
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	089b      	lsrs	r3, r3, #2
 80079e8:	3302      	adds	r3, #2
 80079ea:	69ba      	ldr	r2, [r7, #24]
 80079ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80079f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	43db      	mvns	r3, r3
 80079fc:	69ba      	ldr	r2, [r7, #24]
 80079fe:	4013      	ands	r3, r2
 8007a00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007a0e:	69ba      	ldr	r2, [r7, #24]
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007a16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	43db      	mvns	r3, r3
 8007a2a:	69ba      	ldr	r2, [r7, #24]
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d003      	beq.n	8007a44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007a3c:	69ba      	ldr	r2, [r7, #24]
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007a44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	43db      	mvns	r3, r3
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	4013      	ands	r3, r2
 8007a5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d003      	beq.n	8007a70 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007a68:	69ba      	ldr	r2, [r7, #24]
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	69ba      	ldr	r2, [r7, #24]
 8007a74:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	43db      	mvns	r3, r3
 8007a80:	69ba      	ldr	r2, [r7, #24]
 8007a82:	4013      	ands	r3, r2
 8007a84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d003      	beq.n	8007a9a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	69ba      	ldr	r2, [r7, #24]
 8007a9e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	fa22 f303 	lsr.w	r3, r2, r3
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f47f ae63 	bne.w	800777c <HAL_GPIO_Init+0x14>
  }
}
 8007ab6:	bf00      	nop
 8007ab8:	bf00      	nop
 8007aba:	3724      	adds	r7, #36	; 0x24
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	58000400 	.word	0x58000400

08007ac8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	691a      	ldr	r2, [r3, #16]
 8007ad8:	887b      	ldrh	r3, [r7, #2]
 8007ada:	4013      	ands	r3, r2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d002      	beq.n	8007ae6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	73fb      	strb	r3, [r7, #15]
 8007ae4:	e001      	b.n	8007aea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3714      	adds	r7, #20
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	460b      	mov	r3, r1
 8007b02:	807b      	strh	r3, [r7, #2]
 8007b04:	4613      	mov	r3, r2
 8007b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007b08:	787b      	ldrb	r3, [r7, #1]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d003      	beq.n	8007b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b0e:	887a      	ldrh	r2, [r7, #2]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007b14:	e003      	b.n	8007b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007b16:	887b      	ldrh	r3, [r7, #2]
 8007b18:	041a      	lsls	r2, r3, #16
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	619a      	str	r2, [r3, #24]
}
 8007b1e:	bf00      	nop
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
	...

08007b2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e07f      	b.n	8007c3e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d106      	bne.n	8007b58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7fa fb40 	bl	80021d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2224      	movs	r2, #36	; 0x24
 8007b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f022 0201 	bic.w	r2, r2, #1
 8007b6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007b7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689a      	ldr	r2, [r3, #8]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d107      	bne.n	8007ba6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	689a      	ldr	r2, [r3, #8]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ba2:	609a      	str	r2, [r3, #8]
 8007ba4:	e006      	b.n	8007bb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	689a      	ldr	r2, [r3, #8]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007bb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d104      	bne.n	8007bc6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6859      	ldr	r1, [r3, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	4b1d      	ldr	r3, [pc, #116]	; (8007c48 <HAL_I2C_Init+0x11c>)
 8007bd2:	430b      	orrs	r3, r1
 8007bd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68da      	ldr	r2, [r3, #12]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007be4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	691a      	ldr	r2, [r3, #16]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	695b      	ldr	r3, [r3, #20]
 8007bee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	430a      	orrs	r2, r1
 8007bfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	69d9      	ldr	r1, [r3, #28]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a1a      	ldr	r2, [r3, #32]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f042 0201 	orr.w	r2, r2, #1
 8007c1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	02008000 	.word	0x02008000

08007c4c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b088      	sub	sp, #32
 8007c50:	af02      	add	r7, sp, #8
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	607a      	str	r2, [r7, #4]
 8007c56:	461a      	mov	r2, r3
 8007c58:	460b      	mov	r3, r1
 8007c5a:	817b      	strh	r3, [r7, #10]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b20      	cmp	r3, #32
 8007c6a:	f040 80da 	bne.w	8007e22 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d101      	bne.n	8007c7c <HAL_I2C_Master_Transmit+0x30>
 8007c78:	2302      	movs	r3, #2
 8007c7a:	e0d3      	b.n	8007e24 <HAL_I2C_Master_Transmit+0x1d8>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007c84:	f7fa fed6 	bl	8002a34 <HAL_GetTick>
 8007c88:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	2319      	movs	r3, #25
 8007c90:	2201      	movs	r2, #1
 8007c92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f000 f9e6 	bl	8008068 <I2C_WaitOnFlagUntilTimeout>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d001      	beq.n	8007ca6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e0be      	b.n	8007e24 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2221      	movs	r2, #33	; 0x21
 8007caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2210      	movs	r2, #16
 8007cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	893a      	ldrh	r2, [r7, #8]
 8007cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	2bff      	cmp	r3, #255	; 0xff
 8007cd6:	d90e      	bls.n	8007cf6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	22ff      	movs	r2, #255	; 0xff
 8007cdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	8979      	ldrh	r1, [r7, #10]
 8007ce6:	4b51      	ldr	r3, [pc, #324]	; (8007e2c <HAL_I2C_Master_Transmit+0x1e0>)
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 fbdc 	bl	80084ac <I2C_TransferConfig>
 8007cf4:	e06c      	b.n	8007dd0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d04:	b2da      	uxtb	r2, r3
 8007d06:	8979      	ldrh	r1, [r7, #10]
 8007d08:	4b48      	ldr	r3, [pc, #288]	; (8007e2c <HAL_I2C_Master_Transmit+0x1e0>)
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f000 fbcb 	bl	80084ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007d16:	e05b      	b.n	8007dd0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d18:	697a      	ldr	r2, [r7, #20]
 8007d1a:	6a39      	ldr	r1, [r7, #32]
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 f9e3 	bl	80080e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d001      	beq.n	8007d2c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e07b      	b.n	8007e24 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d30:	781a      	ldrb	r2, [r3, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3c:	1c5a      	adds	r2, r3, #1
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d54:	3b01      	subs	r3, #1
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d034      	beq.n	8007dd0 <HAL_I2C_Master_Transmit+0x184>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d130      	bne.n	8007dd0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	6a3b      	ldr	r3, [r7, #32]
 8007d74:	2200      	movs	r2, #0
 8007d76:	2180      	movs	r1, #128	; 0x80
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f000 f975 	bl	8008068 <I2C_WaitOnFlagUntilTimeout>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d001      	beq.n	8007d88 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e04d      	b.n	8007e24 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	2bff      	cmp	r3, #255	; 0xff
 8007d90:	d90e      	bls.n	8007db0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	22ff      	movs	r2, #255	; 0xff
 8007d96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d9c:	b2da      	uxtb	r2, r3
 8007d9e:	8979      	ldrh	r1, [r7, #10]
 8007da0:	2300      	movs	r3, #0
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f000 fb7f 	bl	80084ac <I2C_TransferConfig>
 8007dae:	e00f      	b.n	8007dd0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	8979      	ldrh	r1, [r7, #10]
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f000 fb6e 	bl	80084ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d19e      	bne.n	8007d18 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	6a39      	ldr	r1, [r7, #32]
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f000 f9c2 	bl	8008168 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e01a      	b.n	8007e24 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2220      	movs	r2, #32
 8007df4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	6859      	ldr	r1, [r3, #4]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	4b0b      	ldr	r3, [pc, #44]	; (8007e30 <HAL_I2C_Master_Transmit+0x1e4>)
 8007e02:	400b      	ands	r3, r1
 8007e04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2220      	movs	r2, #32
 8007e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	e000      	b.n	8007e24 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007e22:	2302      	movs	r3, #2
  }
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3718      	adds	r7, #24
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	80002000 	.word	0x80002000
 8007e30:	fe00e800 	.word	0xfe00e800

08007e34 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b088      	sub	sp, #32
 8007e38:	af02      	add	r7, sp, #8
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	607a      	str	r2, [r7, #4]
 8007e3e:	461a      	mov	r2, r3
 8007e40:	460b      	mov	r3, r1
 8007e42:	817b      	strh	r3, [r7, #10]
 8007e44:	4613      	mov	r3, r2
 8007e46:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	2b20      	cmp	r3, #32
 8007e52:	f040 80db 	bne.w	800800c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d101      	bne.n	8007e64 <HAL_I2C_Master_Receive+0x30>
 8007e60:	2302      	movs	r3, #2
 8007e62:	e0d4      	b.n	800800e <HAL_I2C_Master_Receive+0x1da>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007e6c:	f7fa fde2 	bl	8002a34 <HAL_GetTick>
 8007e70:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	2319      	movs	r3, #25
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f000 f8f2 	bl	8008068 <I2C_WaitOnFlagUntilTimeout>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d001      	beq.n	8007e8e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e0bf      	b.n	800800e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2222      	movs	r2, #34	; 0x22
 8007e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2210      	movs	r2, #16
 8007e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	893a      	ldrh	r2, [r7, #8]
 8007eae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	2bff      	cmp	r3, #255	; 0xff
 8007ebe:	d90e      	bls.n	8007ede <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	22ff      	movs	r2, #255	; 0xff
 8007ec4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eca:	b2da      	uxtb	r2, r3
 8007ecc:	8979      	ldrh	r1, [r7, #10]
 8007ece:	4b52      	ldr	r3, [pc, #328]	; (8008018 <HAL_I2C_Master_Receive+0x1e4>)
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f000 fae8 	bl	80084ac <I2C_TransferConfig>
 8007edc:	e06d      	b.n	8007fba <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	8979      	ldrh	r1, [r7, #10]
 8007ef0:	4b49      	ldr	r3, [pc, #292]	; (8008018 <HAL_I2C_Master_Receive+0x1e4>)
 8007ef2:	9300      	str	r3, [sp, #0]
 8007ef4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f000 fad7 	bl	80084ac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007efe:	e05c      	b.n	8007fba <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	6a39      	ldr	r1, [r7, #32]
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f000 f96b 	bl	80081e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d001      	beq.n	8007f14 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e07c      	b.n	800800e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1e:	b2d2      	uxtb	r2, r2
 8007f20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f26:	1c5a      	adds	r2, r3, #1
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f30:	3b01      	subs	r3, #1
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	b29a      	uxth	r2, r3
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d034      	beq.n	8007fba <HAL_I2C_Master_Receive+0x186>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d130      	bne.n	8007fba <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	2180      	movs	r1, #128	; 0x80
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f000 f880 	bl	8008068 <I2C_WaitOnFlagUntilTimeout>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e04d      	b.n	800800e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	2bff      	cmp	r3, #255	; 0xff
 8007f7a:	d90e      	bls.n	8007f9a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	22ff      	movs	r2, #255	; 0xff
 8007f80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	8979      	ldrh	r1, [r7, #10]
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f000 fa8a 	bl	80084ac <I2C_TransferConfig>
 8007f98:	e00f      	b.n	8007fba <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	8979      	ldrh	r1, [r7, #10]
 8007fac:	2300      	movs	r3, #0
 8007fae:	9300      	str	r3, [sp, #0]
 8007fb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f000 fa79 	bl	80084ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d19d      	bne.n	8007f00 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fc4:	697a      	ldr	r2, [r7, #20]
 8007fc6:	6a39      	ldr	r1, [r7, #32]
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f000 f8cd 	bl	8008168 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e01a      	b.n	800800e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2220      	movs	r2, #32
 8007fde:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6859      	ldr	r1, [r3, #4]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	4b0c      	ldr	r3, [pc, #48]	; (800801c <HAL_I2C_Master_Receive+0x1e8>)
 8007fec:	400b      	ands	r3, r1
 8007fee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2220      	movs	r2, #32
 8007ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	e000      	b.n	800800e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800800c:	2302      	movs	r3, #2
  }
}
 800800e:	4618      	mov	r0, r3
 8008010:	3718      	adds	r7, #24
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	80002400 	.word	0x80002400
 800801c:	fe00e800 	.word	0xfe00e800

08008020 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	f003 0302 	and.w	r3, r3, #2
 8008032:	2b02      	cmp	r3, #2
 8008034:	d103      	bne.n	800803e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2200      	movs	r2, #0
 800803c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	2b01      	cmp	r3, #1
 800804a:	d007      	beq.n	800805c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	699a      	ldr	r2, [r3, #24]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f042 0201 	orr.w	r2, r2, #1
 800805a:	619a      	str	r2, [r3, #24]
  }
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	603b      	str	r3, [r7, #0]
 8008074:	4613      	mov	r3, r2
 8008076:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008078:	e022      	b.n	80080c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008080:	d01e      	beq.n	80080c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008082:	f7fa fcd7 	bl	8002a34 <HAL_GetTick>
 8008086:	4602      	mov	r2, r0
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	683a      	ldr	r2, [r7, #0]
 800808e:	429a      	cmp	r2, r3
 8008090:	d302      	bcc.n	8008098 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d113      	bne.n	80080c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800809c:	f043 0220 	orr.w	r2, r3, #32
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2220      	movs	r2, #32
 80080a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e00f      	b.n	80080e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	699a      	ldr	r2, [r3, #24]
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	4013      	ands	r3, r2
 80080ca:	68ba      	ldr	r2, [r7, #8]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	bf0c      	ite	eq
 80080d0:	2301      	moveq	r3, #1
 80080d2:	2300      	movne	r3, #0
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	461a      	mov	r2, r3
 80080d8:	79fb      	ldrb	r3, [r7, #7]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d0cd      	beq.n	800807a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80080f4:	e02c      	b.n	8008150 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	68b9      	ldr	r1, [r7, #8]
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f000 f8ea 	bl	80082d4 <I2C_IsErrorOccurred>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d001      	beq.n	800810a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e02a      	b.n	8008160 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008110:	d01e      	beq.n	8008150 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008112:	f7fa fc8f 	bl	8002a34 <HAL_GetTick>
 8008116:	4602      	mov	r2, r0
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	429a      	cmp	r2, r3
 8008120:	d302      	bcc.n	8008128 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d113      	bne.n	8008150 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800812c:	f043 0220 	orr.w	r2, r3, #32
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2220      	movs	r2, #32
 8008138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e007      	b.n	8008160 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	f003 0302 	and.w	r3, r3, #2
 800815a:	2b02      	cmp	r3, #2
 800815c:	d1cb      	bne.n	80080f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008174:	e028      	b.n	80081c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	68b9      	ldr	r1, [r7, #8]
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f000 f8aa 	bl	80082d4 <I2C_IsErrorOccurred>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e026      	b.n	80081d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800818a:	f7fa fc53 	bl	8002a34 <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	429a      	cmp	r2, r3
 8008198:	d302      	bcc.n	80081a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d113      	bne.n	80081c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a4:	f043 0220 	orr.w	r2, r3, #32
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2220      	movs	r2, #32
 80081b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e007      	b.n	80081d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	f003 0320 	and.w	r3, r3, #32
 80081d2:	2b20      	cmp	r3, #32
 80081d4:	d1cf      	bne.n	8008176 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80081ec:	e064      	b.n	80082b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	68b9      	ldr	r1, [r7, #8]
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f000 f86e 	bl	80082d4 <I2C_IsErrorOccurred>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e062      	b.n	80082c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	f003 0320 	and.w	r3, r3, #32
 800820c:	2b20      	cmp	r3, #32
 800820e:	d138      	bne.n	8008282 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	f003 0304 	and.w	r3, r3, #4
 800821a:	2b04      	cmp	r3, #4
 800821c:	d105      	bne.n	800822a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008222:	2b00      	cmp	r3, #0
 8008224:	d001      	beq.n	800822a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	e04e      	b.n	80082c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	f003 0310 	and.w	r3, r3, #16
 8008234:	2b10      	cmp	r3, #16
 8008236:	d107      	bne.n	8008248 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2210      	movs	r2, #16
 800823e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2204      	movs	r2, #4
 8008244:	645a      	str	r2, [r3, #68]	; 0x44
 8008246:	e002      	b.n	800824e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2220      	movs	r2, #32
 8008254:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	6859      	ldr	r1, [r3, #4]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	4b1b      	ldr	r3, [pc, #108]	; (80082d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8008262:	400b      	ands	r3, r1
 8008264:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2220      	movs	r2, #32
 800826a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e022      	b.n	80082c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008282:	f7fa fbd7 	bl	8002a34 <HAL_GetTick>
 8008286:	4602      	mov	r2, r0
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	429a      	cmp	r2, r3
 8008290:	d302      	bcc.n	8008298 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10f      	bne.n	80082b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800829c:	f043 0220 	orr.w	r2, r3, #32
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2220      	movs	r2, #32
 80082a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e007      	b.n	80082c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	699b      	ldr	r3, [r3, #24]
 80082be:	f003 0304 	and.w	r3, r3, #4
 80082c2:	2b04      	cmp	r3, #4
 80082c4:	d193      	bne.n	80081ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	fe00e800 	.word	0xfe00e800

080082d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b08a      	sub	sp, #40	; 0x28
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80082ee:	2300      	movs	r3, #0
 80082f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	f003 0310 	and.w	r3, r3, #16
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d075      	beq.n	80083ec <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2210      	movs	r2, #16
 8008306:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008308:	e056      	b.n	80083b8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008310:	d052      	beq.n	80083b8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008312:	f7fa fb8f 	bl	8002a34 <HAL_GetTick>
 8008316:	4602      	mov	r2, r0
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	429a      	cmp	r2, r3
 8008320:	d302      	bcc.n	8008328 <I2C_IsErrorOccurred+0x54>
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d147      	bne.n	80083b8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008332:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800833a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	699b      	ldr	r3, [r3, #24]
 8008342:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800834a:	d12e      	bne.n	80083aa <I2C_IsErrorOccurred+0xd6>
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008352:	d02a      	beq.n	80083aa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008354:	7cfb      	ldrb	r3, [r7, #19]
 8008356:	2b20      	cmp	r3, #32
 8008358:	d027      	beq.n	80083aa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	685a      	ldr	r2, [r3, #4]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008368:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800836a:	f7fa fb63 	bl	8002a34 <HAL_GetTick>
 800836e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008370:	e01b      	b.n	80083aa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008372:	f7fa fb5f 	bl	8002a34 <HAL_GetTick>
 8008376:	4602      	mov	r2, r0
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	2b19      	cmp	r3, #25
 800837e:	d914      	bls.n	80083aa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008384:	f043 0220 	orr.w	r2, r3, #32
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2220      	movs	r2, #32
 8008390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	f003 0320 	and.w	r3, r3, #32
 80083b4:	2b20      	cmp	r3, #32
 80083b6:	d1dc      	bne.n	8008372 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	f003 0320 	and.w	r3, r3, #32
 80083c2:	2b20      	cmp	r3, #32
 80083c4:	d003      	beq.n	80083ce <I2C_IsErrorOccurred+0xfa>
 80083c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d09d      	beq.n	800830a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80083ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d103      	bne.n	80083de <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2220      	movs	r2, #32
 80083dc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80083de:	6a3b      	ldr	r3, [r7, #32]
 80083e0:	f043 0304 	orr.w	r3, r3, #4
 80083e4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00b      	beq.n	8008416 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80083fe:	6a3b      	ldr	r3, [r7, #32]
 8008400:	f043 0301 	orr.w	r3, r3, #1
 8008404:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800840e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00b      	beq.n	8008438 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008420:	6a3b      	ldr	r3, [r7, #32]
 8008422:	f043 0308 	orr.w	r3, r3, #8
 8008426:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008430:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00b      	beq.n	800845a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008442:	6a3b      	ldr	r3, [r7, #32]
 8008444:	f043 0302 	orr.w	r3, r3, #2
 8008448:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008452:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800845a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800845e:	2b00      	cmp	r3, #0
 8008460:	d01c      	beq.n	800849c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f7ff fddc 	bl	8008020 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	6859      	ldr	r1, [r3, #4]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	4b0d      	ldr	r3, [pc, #52]	; (80084a8 <I2C_IsErrorOccurred+0x1d4>)
 8008474:	400b      	ands	r3, r1
 8008476:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800847c:	6a3b      	ldr	r3, [r7, #32]
 800847e:	431a      	orrs	r2, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2220      	movs	r2, #32
 8008488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800849c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3728      	adds	r7, #40	; 0x28
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	fe00e800 	.word	0xfe00e800

080084ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b087      	sub	sp, #28
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	607b      	str	r3, [r7, #4]
 80084b6:	460b      	mov	r3, r1
 80084b8:	817b      	strh	r3, [r7, #10]
 80084ba:	4613      	mov	r3, r2
 80084bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084be:	897b      	ldrh	r3, [r7, #10]
 80084c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80084c4:	7a7b      	ldrb	r3, [r7, #9]
 80084c6:	041b      	lsls	r3, r3, #16
 80084c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084cc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084d2:	6a3b      	ldr	r3, [r7, #32]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084da:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	685a      	ldr	r2, [r3, #4]
 80084e2:	6a3b      	ldr	r3, [r7, #32]
 80084e4:	0d5b      	lsrs	r3, r3, #21
 80084e6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80084ea:	4b08      	ldr	r3, [pc, #32]	; (800850c <I2C_TransferConfig+0x60>)
 80084ec:	430b      	orrs	r3, r1
 80084ee:	43db      	mvns	r3, r3
 80084f0:	ea02 0103 	and.w	r1, r2, r3
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	430a      	orrs	r2, r1
 80084fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80084fe:	bf00      	nop
 8008500:	371c      	adds	r7, #28
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	03ff63ff 	.word	0x03ff63ff

08008510 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b20      	cmp	r3, #32
 8008524:	d138      	bne.n	8008598 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800852c:	2b01      	cmp	r3, #1
 800852e:	d101      	bne.n	8008534 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008530:	2302      	movs	r3, #2
 8008532:	e032      	b.n	800859a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2224      	movs	r2, #36	; 0x24
 8008540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f022 0201 	bic.w	r2, r2, #1
 8008552:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008562:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6819      	ldr	r1, [r3, #0]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	430a      	orrs	r2, r1
 8008572:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f042 0201 	orr.w	r2, r2, #1
 8008582:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2220      	movs	r2, #32
 8008588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008594:	2300      	movs	r3, #0
 8008596:	e000      	b.n	800859a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008598:	2302      	movs	r3, #2
  }
}
 800859a:	4618      	mov	r0, r3
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b085      	sub	sp, #20
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	2b20      	cmp	r3, #32
 80085ba:	d139      	bne.n	8008630 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d101      	bne.n	80085ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80085c6:	2302      	movs	r3, #2
 80085c8:	e033      	b.n	8008632 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2224      	movs	r2, #36	; 0x24
 80085d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f022 0201 	bic.w	r2, r2, #1
 80085e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80085f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	021b      	lsls	r3, r3, #8
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	4313      	orrs	r3, r2
 8008602:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f042 0201 	orr.w	r2, r2, #1
 800861a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2220      	movs	r2, #32
 8008620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800862c:	2300      	movs	r3, #0
 800862e:	e000      	b.n	8008632 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008630:	2302      	movs	r3, #2
  }
}
 8008632:	4618      	mov	r0, r3
 8008634:	3714      	adds	r7, #20
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
	...

08008640 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	460b      	mov	r3, r1
 800864a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800864c:	4b18      	ldr	r3, [pc, #96]	; (80086b0 <HAL_PWR_EnterSTOPMode+0x70>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f023 0201 	bic.w	r2, r3, #1
 8008654:	4916      	ldr	r1, [pc, #88]	; (80086b0 <HAL_PWR_EnterSTOPMode+0x70>)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4313      	orrs	r3, r2
 800865a:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800865c:	4b14      	ldr	r3, [pc, #80]	; (80086b0 <HAL_PWR_EnterSTOPMode+0x70>)
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	4a13      	ldr	r2, [pc, #76]	; (80086b0 <HAL_PWR_EnterSTOPMode+0x70>)
 8008662:	f023 0305 	bic.w	r3, r3, #5
 8008666:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8008668:	4b11      	ldr	r3, [pc, #68]	; (80086b0 <HAL_PWR_EnterSTOPMode+0x70>)
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	4a10      	ldr	r2, [pc, #64]	; (80086b0 <HAL_PWR_EnterSTOPMode+0x70>)
 800866e:	f023 0302 	bic.w	r3, r3, #2
 8008672:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008674:	4b0f      	ldr	r3, [pc, #60]	; (80086b4 <HAL_PWR_EnterSTOPMode+0x74>)
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	4a0e      	ldr	r2, [pc, #56]	; (80086b4 <HAL_PWR_EnterSTOPMode+0x74>)
 800867a:	f043 0304 	orr.w	r3, r3, #4
 800867e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8008680:	f3bf 8f4f 	dsb	sy
}
 8008684:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008686:	f3bf 8f6f 	isb	sy
}
 800868a:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800868c:	78fb      	ldrb	r3, [r7, #3]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d101      	bne.n	8008696 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8008692:	bf30      	wfi
 8008694:	e000      	b.n	8008698 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8008696:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008698:	4b06      	ldr	r3, [pc, #24]	; (80086b4 <HAL_PWR_EnterSTOPMode+0x74>)
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	4a05      	ldr	r2, [pc, #20]	; (80086b4 <HAL_PWR_EnterSTOPMode+0x74>)
 800869e:	f023 0304 	bic.w	r3, r3, #4
 80086a2:	6113      	str	r3, [r2, #16]
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	58024800 	.word	0x58024800
 80086b4:	e000ed00 	.word	0xe000ed00

080086b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80086c0:	4b19      	ldr	r3, [pc, #100]	; (8008728 <HAL_PWREx_ConfigSupply+0x70>)
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	f003 0304 	and.w	r3, r3, #4
 80086c8:	2b04      	cmp	r3, #4
 80086ca:	d00a      	beq.n	80086e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80086cc:	4b16      	ldr	r3, [pc, #88]	; (8008728 <HAL_PWREx_ConfigSupply+0x70>)
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	f003 0307 	and.w	r3, r3, #7
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d001      	beq.n	80086de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	e01f      	b.n	800871e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80086de:	2300      	movs	r3, #0
 80086e0:	e01d      	b.n	800871e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80086e2:	4b11      	ldr	r3, [pc, #68]	; (8008728 <HAL_PWREx_ConfigSupply+0x70>)
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	f023 0207 	bic.w	r2, r3, #7
 80086ea:	490f      	ldr	r1, [pc, #60]	; (8008728 <HAL_PWREx_ConfigSupply+0x70>)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80086f2:	f7fa f99f 	bl	8002a34 <HAL_GetTick>
 80086f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80086f8:	e009      	b.n	800870e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80086fa:	f7fa f99b 	bl	8002a34 <HAL_GetTick>
 80086fe:	4602      	mov	r2, r0
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008708:	d901      	bls.n	800870e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	e007      	b.n	800871e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800870e:	4b06      	ldr	r3, [pc, #24]	; (8008728 <HAL_PWREx_ConfigSupply+0x70>)
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800871a:	d1ee      	bne.n	80086fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	58024800 	.word	0x58024800

0800872c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b08c      	sub	sp, #48	; 0x30
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d102      	bne.n	8008740 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	f000 bc1d 	b.w	8008f7a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0301 	and.w	r3, r3, #1
 8008748:	2b00      	cmp	r3, #0
 800874a:	f000 8087 	beq.w	800885c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800874e:	4b99      	ldr	r3, [pc, #612]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008756:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008758:	4b96      	ldr	r3, [pc, #600]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 800875a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800875e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008760:	2b10      	cmp	r3, #16
 8008762:	d007      	beq.n	8008774 <HAL_RCC_OscConfig+0x48>
 8008764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008766:	2b18      	cmp	r3, #24
 8008768:	d110      	bne.n	800878c <HAL_RCC_OscConfig+0x60>
 800876a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876c:	f003 0303 	and.w	r3, r3, #3
 8008770:	2b02      	cmp	r3, #2
 8008772:	d10b      	bne.n	800878c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008774:	4b8f      	ldr	r3, [pc, #572]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800877c:	2b00      	cmp	r3, #0
 800877e:	d06c      	beq.n	800885a <HAL_RCC_OscConfig+0x12e>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d168      	bne.n	800885a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	e3f6      	b.n	8008f7a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008794:	d106      	bne.n	80087a4 <HAL_RCC_OscConfig+0x78>
 8008796:	4b87      	ldr	r3, [pc, #540]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a86      	ldr	r2, [pc, #536]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 800879c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087a0:	6013      	str	r3, [r2, #0]
 80087a2:	e02e      	b.n	8008802 <HAL_RCC_OscConfig+0xd6>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10c      	bne.n	80087c6 <HAL_RCC_OscConfig+0x9a>
 80087ac:	4b81      	ldr	r3, [pc, #516]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a80      	ldr	r2, [pc, #512]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 80087b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087b6:	6013      	str	r3, [r2, #0]
 80087b8:	4b7e      	ldr	r3, [pc, #504]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a7d      	ldr	r2, [pc, #500]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 80087be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087c2:	6013      	str	r3, [r2, #0]
 80087c4:	e01d      	b.n	8008802 <HAL_RCC_OscConfig+0xd6>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087ce:	d10c      	bne.n	80087ea <HAL_RCC_OscConfig+0xbe>
 80087d0:	4b78      	ldr	r3, [pc, #480]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a77      	ldr	r2, [pc, #476]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 80087d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087da:	6013      	str	r3, [r2, #0]
 80087dc:	4b75      	ldr	r3, [pc, #468]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a74      	ldr	r2, [pc, #464]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 80087e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087e6:	6013      	str	r3, [r2, #0]
 80087e8:	e00b      	b.n	8008802 <HAL_RCC_OscConfig+0xd6>
 80087ea:	4b72      	ldr	r3, [pc, #456]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a71      	ldr	r2, [pc, #452]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 80087f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087f4:	6013      	str	r3, [r2, #0]
 80087f6:	4b6f      	ldr	r3, [pc, #444]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a6e      	ldr	r2, [pc, #440]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 80087fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008800:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d013      	beq.n	8008832 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800880a:	f7fa f913 	bl	8002a34 <HAL_GetTick>
 800880e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008810:	e008      	b.n	8008824 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008812:	f7fa f90f 	bl	8002a34 <HAL_GetTick>
 8008816:	4602      	mov	r2, r0
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	2b64      	cmp	r3, #100	; 0x64
 800881e:	d901      	bls.n	8008824 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008820:	2303      	movs	r3, #3
 8008822:	e3aa      	b.n	8008f7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008824:	4b63      	ldr	r3, [pc, #396]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800882c:	2b00      	cmp	r3, #0
 800882e:	d0f0      	beq.n	8008812 <HAL_RCC_OscConfig+0xe6>
 8008830:	e014      	b.n	800885c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008832:	f7fa f8ff 	bl	8002a34 <HAL_GetTick>
 8008836:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008838:	e008      	b.n	800884c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800883a:	f7fa f8fb 	bl	8002a34 <HAL_GetTick>
 800883e:	4602      	mov	r2, r0
 8008840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	2b64      	cmp	r3, #100	; 0x64
 8008846:	d901      	bls.n	800884c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008848:	2303      	movs	r3, #3
 800884a:	e396      	b.n	8008f7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800884c:	4b59      	ldr	r3, [pc, #356]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008854:	2b00      	cmp	r3, #0
 8008856:	d1f0      	bne.n	800883a <HAL_RCC_OscConfig+0x10e>
 8008858:	e000      	b.n	800885c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800885a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 0302 	and.w	r3, r3, #2
 8008864:	2b00      	cmp	r3, #0
 8008866:	f000 80cb 	beq.w	8008a00 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800886a:	4b52      	ldr	r3, [pc, #328]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008872:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008874:	4b4f      	ldr	r3, [pc, #316]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 8008876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008878:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800887a:	6a3b      	ldr	r3, [r7, #32]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d007      	beq.n	8008890 <HAL_RCC_OscConfig+0x164>
 8008880:	6a3b      	ldr	r3, [r7, #32]
 8008882:	2b18      	cmp	r3, #24
 8008884:	d156      	bne.n	8008934 <HAL_RCC_OscConfig+0x208>
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	f003 0303 	and.w	r3, r3, #3
 800888c:	2b00      	cmp	r3, #0
 800888e:	d151      	bne.n	8008934 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008890:	4b48      	ldr	r3, [pc, #288]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 0304 	and.w	r3, r3, #4
 8008898:	2b00      	cmp	r3, #0
 800889a:	d005      	beq.n	80088a8 <HAL_RCC_OscConfig+0x17c>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d101      	bne.n	80088a8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e368      	b.n	8008f7a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80088a8:	4b42      	ldr	r3, [pc, #264]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f023 0219 	bic.w	r2, r3, #25
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	493f      	ldr	r1, [pc, #252]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 80088b6:	4313      	orrs	r3, r2
 80088b8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80088ba:	f7fa f8bb 	bl	8002a34 <HAL_GetTick>
 80088be:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088c0:	e008      	b.n	80088d4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088c2:	f7fa f8b7 	bl	8002a34 <HAL_GetTick>
 80088c6:	4602      	mov	r2, r0
 80088c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d901      	bls.n	80088d4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e352      	b.n	8008f7a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088d4:	4b37      	ldr	r3, [pc, #220]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 0304 	and.w	r3, r3, #4
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d0f0      	beq.n	80088c2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088e0:	f7fa f8e8 	bl	8002ab4 <HAL_GetREVID>
 80088e4:	4603      	mov	r3, r0
 80088e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d817      	bhi.n	800891e <HAL_RCC_OscConfig+0x1f2>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	2b40      	cmp	r3, #64	; 0x40
 80088f4:	d108      	bne.n	8008908 <HAL_RCC_OscConfig+0x1dc>
 80088f6:	4b2f      	ldr	r3, [pc, #188]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80088fe:	4a2d      	ldr	r2, [pc, #180]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 8008900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008904:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008906:	e07b      	b.n	8008a00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008908:	4b2a      	ldr	r3, [pc, #168]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	691b      	ldr	r3, [r3, #16]
 8008914:	031b      	lsls	r3, r3, #12
 8008916:	4927      	ldr	r1, [pc, #156]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 8008918:	4313      	orrs	r3, r2
 800891a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800891c:	e070      	b.n	8008a00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800891e:	4b25      	ldr	r3, [pc, #148]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	061b      	lsls	r3, r3, #24
 800892c:	4921      	ldr	r1, [pc, #132]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 800892e:	4313      	orrs	r3, r2
 8008930:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008932:	e065      	b.n	8008a00 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d048      	beq.n	80089ce <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800893c:	4b1d      	ldr	r3, [pc, #116]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f023 0219 	bic.w	r2, r3, #25
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	491a      	ldr	r1, [pc, #104]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 800894a:	4313      	orrs	r3, r2
 800894c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800894e:	f7fa f871 	bl	8002a34 <HAL_GetTick>
 8008952:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008954:	e008      	b.n	8008968 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008956:	f7fa f86d 	bl	8002a34 <HAL_GetTick>
 800895a:	4602      	mov	r2, r0
 800895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	2b02      	cmp	r3, #2
 8008962:	d901      	bls.n	8008968 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8008964:	2303      	movs	r3, #3
 8008966:	e308      	b.n	8008f7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008968:	4b12      	ldr	r3, [pc, #72]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f003 0304 	and.w	r3, r3, #4
 8008970:	2b00      	cmp	r3, #0
 8008972:	d0f0      	beq.n	8008956 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008974:	f7fa f89e 	bl	8002ab4 <HAL_GetREVID>
 8008978:	4603      	mov	r3, r0
 800897a:	f241 0203 	movw	r2, #4099	; 0x1003
 800897e:	4293      	cmp	r3, r2
 8008980:	d81a      	bhi.n	80089b8 <HAL_RCC_OscConfig+0x28c>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	2b40      	cmp	r3, #64	; 0x40
 8008988:	d108      	bne.n	800899c <HAL_RCC_OscConfig+0x270>
 800898a:	4b0a      	ldr	r3, [pc, #40]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008992:	4a08      	ldr	r2, [pc, #32]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 8008994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008998:	6053      	str	r3, [r2, #4]
 800899a:	e031      	b.n	8008a00 <HAL_RCC_OscConfig+0x2d4>
 800899c:	4b05      	ldr	r3, [pc, #20]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	031b      	lsls	r3, r3, #12
 80089aa:	4902      	ldr	r1, [pc, #8]	; (80089b4 <HAL_RCC_OscConfig+0x288>)
 80089ac:	4313      	orrs	r3, r2
 80089ae:	604b      	str	r3, [r1, #4]
 80089b0:	e026      	b.n	8008a00 <HAL_RCC_OscConfig+0x2d4>
 80089b2:	bf00      	nop
 80089b4:	58024400 	.word	0x58024400
 80089b8:	4b9a      	ldr	r3, [pc, #616]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	061b      	lsls	r3, r3, #24
 80089c6:	4997      	ldr	r1, [pc, #604]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 80089c8:	4313      	orrs	r3, r2
 80089ca:	604b      	str	r3, [r1, #4]
 80089cc:	e018      	b.n	8008a00 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089ce:	4b95      	ldr	r3, [pc, #596]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a94      	ldr	r2, [pc, #592]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 80089d4:	f023 0301 	bic.w	r3, r3, #1
 80089d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089da:	f7fa f82b 	bl	8002a34 <HAL_GetTick>
 80089de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80089e0:	e008      	b.n	80089f4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089e2:	f7fa f827 	bl	8002a34 <HAL_GetTick>
 80089e6:	4602      	mov	r2, r0
 80089e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ea:	1ad3      	subs	r3, r2, r3
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d901      	bls.n	80089f4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80089f0:	2303      	movs	r3, #3
 80089f2:	e2c2      	b.n	8008f7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80089f4:	4b8b      	ldr	r3, [pc, #556]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 0304 	and.w	r3, r3, #4
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1f0      	bne.n	80089e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0310 	and.w	r3, r3, #16
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f000 80a9 	beq.w	8008b60 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a0e:	4b85      	ldr	r3, [pc, #532]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a16:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008a18:	4b82      	ldr	r3, [pc, #520]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a1c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	2b08      	cmp	r3, #8
 8008a22:	d007      	beq.n	8008a34 <HAL_RCC_OscConfig+0x308>
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	2b18      	cmp	r3, #24
 8008a28:	d13a      	bne.n	8008aa0 <HAL_RCC_OscConfig+0x374>
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	f003 0303 	and.w	r3, r3, #3
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d135      	bne.n	8008aa0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a34:	4b7b      	ldr	r3, [pc, #492]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d005      	beq.n	8008a4c <HAL_RCC_OscConfig+0x320>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	69db      	ldr	r3, [r3, #28]
 8008a44:	2b80      	cmp	r3, #128	; 0x80
 8008a46:	d001      	beq.n	8008a4c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e296      	b.n	8008f7a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a4c:	f7fa f832 	bl	8002ab4 <HAL_GetREVID>
 8008a50:	4603      	mov	r3, r0
 8008a52:	f241 0203 	movw	r2, #4099	; 0x1003
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d817      	bhi.n	8008a8a <HAL_RCC_OscConfig+0x35e>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a1b      	ldr	r3, [r3, #32]
 8008a5e:	2b20      	cmp	r3, #32
 8008a60:	d108      	bne.n	8008a74 <HAL_RCC_OscConfig+0x348>
 8008a62:	4b70      	ldr	r3, [pc, #448]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008a6a:	4a6e      	ldr	r2, [pc, #440]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008a6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a70:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a72:	e075      	b.n	8008b60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a74:	4b6b      	ldr	r3, [pc, #428]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a1b      	ldr	r3, [r3, #32]
 8008a80:	069b      	lsls	r3, r3, #26
 8008a82:	4968      	ldr	r1, [pc, #416]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008a84:	4313      	orrs	r3, r2
 8008a86:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a88:	e06a      	b.n	8008b60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a8a:	4b66      	ldr	r3, [pc, #408]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	061b      	lsls	r3, r3, #24
 8008a98:	4962      	ldr	r1, [pc, #392]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a9e:	e05f      	b.n	8008b60 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	69db      	ldr	r3, [r3, #28]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d042      	beq.n	8008b2e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008aa8:	4b5e      	ldr	r3, [pc, #376]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a5d      	ldr	r2, [pc, #372]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ab4:	f7f9 ffbe 	bl	8002a34 <HAL_GetTick>
 8008ab8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008aba:	e008      	b.n	8008ace <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008abc:	f7f9 ffba 	bl	8002a34 <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d901      	bls.n	8008ace <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	e255      	b.n	8008f7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ace:	4b55      	ldr	r3, [pc, #340]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d0f0      	beq.n	8008abc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ada:	f7f9 ffeb 	bl	8002ab4 <HAL_GetREVID>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	f241 0203 	movw	r2, #4099	; 0x1003
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d817      	bhi.n	8008b18 <HAL_RCC_OscConfig+0x3ec>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a1b      	ldr	r3, [r3, #32]
 8008aec:	2b20      	cmp	r3, #32
 8008aee:	d108      	bne.n	8008b02 <HAL_RCC_OscConfig+0x3d6>
 8008af0:	4b4c      	ldr	r3, [pc, #304]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008af8:	4a4a      	ldr	r2, [pc, #296]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008afa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008afe:	6053      	str	r3, [r2, #4]
 8008b00:	e02e      	b.n	8008b60 <HAL_RCC_OscConfig+0x434>
 8008b02:	4b48      	ldr	r3, [pc, #288]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	069b      	lsls	r3, r3, #26
 8008b10:	4944      	ldr	r1, [pc, #272]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008b12:	4313      	orrs	r3, r2
 8008b14:	604b      	str	r3, [r1, #4]
 8008b16:	e023      	b.n	8008b60 <HAL_RCC_OscConfig+0x434>
 8008b18:	4b42      	ldr	r3, [pc, #264]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a1b      	ldr	r3, [r3, #32]
 8008b24:	061b      	lsls	r3, r3, #24
 8008b26:	493f      	ldr	r1, [pc, #252]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	60cb      	str	r3, [r1, #12]
 8008b2c:	e018      	b.n	8008b60 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008b2e:	4b3d      	ldr	r3, [pc, #244]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a3c      	ldr	r2, [pc, #240]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008b34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b3a:	f7f9 ff7b 	bl	8002a34 <HAL_GetTick>
 8008b3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b40:	e008      	b.n	8008b54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008b42:	f7f9 ff77 	bl	8002a34 <HAL_GetTick>
 8008b46:	4602      	mov	r2, r0
 8008b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4a:	1ad3      	subs	r3, r2, r3
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	d901      	bls.n	8008b54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008b50:	2303      	movs	r3, #3
 8008b52:	e212      	b.n	8008f7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b54:	4b33      	ldr	r3, [pc, #204]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1f0      	bne.n	8008b42 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 0308 	and.w	r3, r3, #8
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d036      	beq.n	8008bda <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	695b      	ldr	r3, [r3, #20]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d019      	beq.n	8008ba8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b74:	4b2b      	ldr	r3, [pc, #172]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b78:	4a2a      	ldr	r2, [pc, #168]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008b7a:	f043 0301 	orr.w	r3, r3, #1
 8008b7e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b80:	f7f9 ff58 	bl	8002a34 <HAL_GetTick>
 8008b84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b86:	e008      	b.n	8008b9a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b88:	f7f9 ff54 	bl	8002a34 <HAL_GetTick>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b90:	1ad3      	subs	r3, r2, r3
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d901      	bls.n	8008b9a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008b96:	2303      	movs	r3, #3
 8008b98:	e1ef      	b.n	8008f7a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b9a:	4b22      	ldr	r3, [pc, #136]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b9e:	f003 0302 	and.w	r3, r3, #2
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d0f0      	beq.n	8008b88 <HAL_RCC_OscConfig+0x45c>
 8008ba6:	e018      	b.n	8008bda <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ba8:	4b1e      	ldr	r3, [pc, #120]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bac:	4a1d      	ldr	r2, [pc, #116]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008bae:	f023 0301 	bic.w	r3, r3, #1
 8008bb2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bb4:	f7f9 ff3e 	bl	8002a34 <HAL_GetTick>
 8008bb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008bba:	e008      	b.n	8008bce <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008bbc:	f7f9 ff3a 	bl	8002a34 <HAL_GetTick>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d901      	bls.n	8008bce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	e1d5      	b.n	8008f7a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008bce:	4b15      	ldr	r3, [pc, #84]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bd2:	f003 0302 	and.w	r3, r3, #2
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1f0      	bne.n	8008bbc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 0320 	and.w	r3, r3, #32
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d039      	beq.n	8008c5a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	699b      	ldr	r3, [r3, #24]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d01c      	beq.n	8008c28 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008bee:	4b0d      	ldr	r3, [pc, #52]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a0c      	ldr	r2, [pc, #48]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008bf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008bf8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008bfa:	f7f9 ff1b 	bl	8002a34 <HAL_GetTick>
 8008bfe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008c00:	e008      	b.n	8008c14 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008c02:	f7f9 ff17 	bl	8002a34 <HAL_GetTick>
 8008c06:	4602      	mov	r2, r0
 8008c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0a:	1ad3      	subs	r3, r2, r3
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d901      	bls.n	8008c14 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e1b2      	b.n	8008f7a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008c14:	4b03      	ldr	r3, [pc, #12]	; (8008c24 <HAL_RCC_OscConfig+0x4f8>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d0f0      	beq.n	8008c02 <HAL_RCC_OscConfig+0x4d6>
 8008c20:	e01b      	b.n	8008c5a <HAL_RCC_OscConfig+0x52e>
 8008c22:	bf00      	nop
 8008c24:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008c28:	4b9b      	ldr	r3, [pc, #620]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a9a      	ldr	r2, [pc, #616]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008c2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008c34:	f7f9 fefe 	bl	8002a34 <HAL_GetTick>
 8008c38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c3a:	e008      	b.n	8008c4e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008c3c:	f7f9 fefa 	bl	8002a34 <HAL_GetTick>
 8008c40:	4602      	mov	r2, r0
 8008c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d901      	bls.n	8008c4e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e195      	b.n	8008f7a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c4e:	4b92      	ldr	r3, [pc, #584]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1f0      	bne.n	8008c3c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 0304 	and.w	r3, r3, #4
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f000 8081 	beq.w	8008d6a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008c68:	4b8c      	ldr	r3, [pc, #560]	; (8008e9c <HAL_RCC_OscConfig+0x770>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a8b      	ldr	r2, [pc, #556]	; (8008e9c <HAL_RCC_OscConfig+0x770>)
 8008c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c74:	f7f9 fede 	bl	8002a34 <HAL_GetTick>
 8008c78:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c7a:	e008      	b.n	8008c8e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008c7c:	f7f9 feda 	bl	8002a34 <HAL_GetTick>
 8008c80:	4602      	mov	r2, r0
 8008c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	2b64      	cmp	r3, #100	; 0x64
 8008c88:	d901      	bls.n	8008c8e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	e175      	b.n	8008f7a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c8e:	4b83      	ldr	r3, [pc, #524]	; (8008e9c <HAL_RCC_OscConfig+0x770>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d0f0      	beq.n	8008c7c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d106      	bne.n	8008cb0 <HAL_RCC_OscConfig+0x584>
 8008ca2:	4b7d      	ldr	r3, [pc, #500]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca6:	4a7c      	ldr	r2, [pc, #496]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008ca8:	f043 0301 	orr.w	r3, r3, #1
 8008cac:	6713      	str	r3, [r2, #112]	; 0x70
 8008cae:	e02d      	b.n	8008d0c <HAL_RCC_OscConfig+0x5e0>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d10c      	bne.n	8008cd2 <HAL_RCC_OscConfig+0x5a6>
 8008cb8:	4b77      	ldr	r3, [pc, #476]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cbc:	4a76      	ldr	r2, [pc, #472]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008cbe:	f023 0301 	bic.w	r3, r3, #1
 8008cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8008cc4:	4b74      	ldr	r3, [pc, #464]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cc8:	4a73      	ldr	r2, [pc, #460]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008cca:	f023 0304 	bic.w	r3, r3, #4
 8008cce:	6713      	str	r3, [r2, #112]	; 0x70
 8008cd0:	e01c      	b.n	8008d0c <HAL_RCC_OscConfig+0x5e0>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	2b05      	cmp	r3, #5
 8008cd8:	d10c      	bne.n	8008cf4 <HAL_RCC_OscConfig+0x5c8>
 8008cda:	4b6f      	ldr	r3, [pc, #444]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cde:	4a6e      	ldr	r2, [pc, #440]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008ce0:	f043 0304 	orr.w	r3, r3, #4
 8008ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8008ce6:	4b6c      	ldr	r3, [pc, #432]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cea:	4a6b      	ldr	r2, [pc, #428]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008cec:	f043 0301 	orr.w	r3, r3, #1
 8008cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8008cf2:	e00b      	b.n	8008d0c <HAL_RCC_OscConfig+0x5e0>
 8008cf4:	4b68      	ldr	r3, [pc, #416]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf8:	4a67      	ldr	r2, [pc, #412]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008cfa:	f023 0301 	bic.w	r3, r3, #1
 8008cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8008d00:	4b65      	ldr	r3, [pc, #404]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d04:	4a64      	ldr	r2, [pc, #400]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008d06:	f023 0304 	bic.w	r3, r3, #4
 8008d0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d015      	beq.n	8008d40 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d14:	f7f9 fe8e 	bl	8002a34 <HAL_GetTick>
 8008d18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d1a:	e00a      	b.n	8008d32 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d1c:	f7f9 fe8a 	bl	8002a34 <HAL_GetTick>
 8008d20:	4602      	mov	r2, r0
 8008d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d24:	1ad3      	subs	r3, r2, r3
 8008d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d901      	bls.n	8008d32 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	e123      	b.n	8008f7a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d32:	4b59      	ldr	r3, [pc, #356]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d36:	f003 0302 	and.w	r3, r3, #2
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d0ee      	beq.n	8008d1c <HAL_RCC_OscConfig+0x5f0>
 8008d3e:	e014      	b.n	8008d6a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d40:	f7f9 fe78 	bl	8002a34 <HAL_GetTick>
 8008d44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d46:	e00a      	b.n	8008d5e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d48:	f7f9 fe74 	bl	8002a34 <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d901      	bls.n	8008d5e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	e10d      	b.n	8008f7a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d5e:	4b4e      	ldr	r3, [pc, #312]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d62:	f003 0302 	and.w	r3, r3, #2
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1ee      	bne.n	8008d48 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	f000 8102 	beq.w	8008f78 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008d74:	4b48      	ldr	r3, [pc, #288]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d7c:	2b18      	cmp	r3, #24
 8008d7e:	f000 80bd 	beq.w	8008efc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	f040 809e 	bne.w	8008ec8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d8c:	4b42      	ldr	r3, [pc, #264]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a41      	ldr	r2, [pc, #260]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008d92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d98:	f7f9 fe4c 	bl	8002a34 <HAL_GetTick>
 8008d9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d9e:	e008      	b.n	8008db2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008da0:	f7f9 fe48 	bl	8002a34 <HAL_GetTick>
 8008da4:	4602      	mov	r2, r0
 8008da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d901      	bls.n	8008db2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008dae:	2303      	movs	r3, #3
 8008db0:	e0e3      	b.n	8008f7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008db2:	4b39      	ldr	r3, [pc, #228]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1f0      	bne.n	8008da0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008dbe:	4b36      	ldr	r3, [pc, #216]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008dc2:	4b37      	ldr	r3, [pc, #220]	; (8008ea0 <HAL_RCC_OscConfig+0x774>)
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008dce:	0112      	lsls	r2, r2, #4
 8008dd0:	430a      	orrs	r2, r1
 8008dd2:	4931      	ldr	r1, [pc, #196]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	628b      	str	r3, [r1, #40]	; 0x28
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008de6:	3b01      	subs	r3, #1
 8008de8:	025b      	lsls	r3, r3, #9
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	431a      	orrs	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df2:	3b01      	subs	r3, #1
 8008df4:	041b      	lsls	r3, r3, #16
 8008df6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008dfa:	431a      	orrs	r2, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e00:	3b01      	subs	r3, #1
 8008e02:	061b      	lsls	r3, r3, #24
 8008e04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e08:	4923      	ldr	r1, [pc, #140]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008e0e:	4b22      	ldr	r3, [pc, #136]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e12:	4a21      	ldr	r2, [pc, #132]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008e14:	f023 0301 	bic.w	r3, r3, #1
 8008e18:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008e1a:	4b1f      	ldr	r3, [pc, #124]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e1e:	4b21      	ldr	r3, [pc, #132]	; (8008ea4 <HAL_RCC_OscConfig+0x778>)
 8008e20:	4013      	ands	r3, r2
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008e26:	00d2      	lsls	r2, r2, #3
 8008e28:	491b      	ldr	r1, [pc, #108]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008e2e:	4b1a      	ldr	r3, [pc, #104]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e32:	f023 020c 	bic.w	r2, r3, #12
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e3a:	4917      	ldr	r1, [pc, #92]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008e40:	4b15      	ldr	r3, [pc, #84]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e44:	f023 0202 	bic.w	r2, r3, #2
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e4c:	4912      	ldr	r1, [pc, #72]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008e52:	4b11      	ldr	r3, [pc, #68]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e56:	4a10      	ldr	r2, [pc, #64]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e5e:	4b0e      	ldr	r3, [pc, #56]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e62:	4a0d      	ldr	r2, [pc, #52]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008e6a:	4b0b      	ldr	r3, [pc, #44]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6e:	4a0a      	ldr	r2, [pc, #40]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008e76:	4b08      	ldr	r3, [pc, #32]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7a:	4a07      	ldr	r2, [pc, #28]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008e7c:	f043 0301 	orr.w	r3, r3, #1
 8008e80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e82:	4b05      	ldr	r3, [pc, #20]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a04      	ldr	r2, [pc, #16]	; (8008e98 <HAL_RCC_OscConfig+0x76c>)
 8008e88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e8e:	f7f9 fdd1 	bl	8002a34 <HAL_GetTick>
 8008e92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e94:	e011      	b.n	8008eba <HAL_RCC_OscConfig+0x78e>
 8008e96:	bf00      	nop
 8008e98:	58024400 	.word	0x58024400
 8008e9c:	58024800 	.word	0x58024800
 8008ea0:	fffffc0c 	.word	0xfffffc0c
 8008ea4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ea8:	f7f9 fdc4 	bl	8002a34 <HAL_GetTick>
 8008eac:	4602      	mov	r2, r0
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	2b02      	cmp	r3, #2
 8008eb4:	d901      	bls.n	8008eba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	e05f      	b.n	8008f7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008eba:	4b32      	ldr	r3, [pc, #200]	; (8008f84 <HAL_RCC_OscConfig+0x858>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d0f0      	beq.n	8008ea8 <HAL_RCC_OscConfig+0x77c>
 8008ec6:	e057      	b.n	8008f78 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ec8:	4b2e      	ldr	r3, [pc, #184]	; (8008f84 <HAL_RCC_OscConfig+0x858>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a2d      	ldr	r2, [pc, #180]	; (8008f84 <HAL_RCC_OscConfig+0x858>)
 8008ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ed4:	f7f9 fdae 	bl	8002a34 <HAL_GetTick>
 8008ed8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008eda:	e008      	b.n	8008eee <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008edc:	f7f9 fdaa 	bl	8002a34 <HAL_GetTick>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	d901      	bls.n	8008eee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008eea:	2303      	movs	r3, #3
 8008eec:	e045      	b.n	8008f7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008eee:	4b25      	ldr	r3, [pc, #148]	; (8008f84 <HAL_RCC_OscConfig+0x858>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1f0      	bne.n	8008edc <HAL_RCC_OscConfig+0x7b0>
 8008efa:	e03d      	b.n	8008f78 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008efc:	4b21      	ldr	r3, [pc, #132]	; (8008f84 <HAL_RCC_OscConfig+0x858>)
 8008efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008f02:	4b20      	ldr	r3, [pc, #128]	; (8008f84 <HAL_RCC_OscConfig+0x858>)
 8008f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f06:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d031      	beq.n	8008f74 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	f003 0203 	and.w	r2, r3, #3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d12a      	bne.n	8008f74 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	091b      	lsrs	r3, r3, #4
 8008f22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d122      	bne.n	8008f74 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f38:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d11a      	bne.n	8008f74 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	0a5b      	lsrs	r3, r3, #9
 8008f42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f4a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d111      	bne.n	8008f74 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	0c1b      	lsrs	r3, r3, #16
 8008f54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f5c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d108      	bne.n	8008f74 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	0e1b      	lsrs	r3, r3, #24
 8008f66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f6e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d001      	beq.n	8008f78 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	e000      	b.n	8008f7a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3730      	adds	r7, #48	; 0x30
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	58024400 	.word	0x58024400

08008f88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b086      	sub	sp, #24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d101      	bne.n	8008f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e19c      	b.n	80092d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008f9c:	4b8a      	ldr	r3, [pc, #552]	; (80091c8 <HAL_RCC_ClockConfig+0x240>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 030f 	and.w	r3, r3, #15
 8008fa4:	683a      	ldr	r2, [r7, #0]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d910      	bls.n	8008fcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008faa:	4b87      	ldr	r3, [pc, #540]	; (80091c8 <HAL_RCC_ClockConfig+0x240>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f023 020f 	bic.w	r2, r3, #15
 8008fb2:	4985      	ldr	r1, [pc, #532]	; (80091c8 <HAL_RCC_ClockConfig+0x240>)
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fba:	4b83      	ldr	r3, [pc, #524]	; (80091c8 <HAL_RCC_ClockConfig+0x240>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f003 030f 	and.w	r3, r3, #15
 8008fc2:	683a      	ldr	r2, [r7, #0]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d001      	beq.n	8008fcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e184      	b.n	80092d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 0304 	and.w	r3, r3, #4
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d010      	beq.n	8008ffa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	691a      	ldr	r2, [r3, #16]
 8008fdc:	4b7b      	ldr	r3, [pc, #492]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d908      	bls.n	8008ffa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008fe8:	4b78      	ldr	r3, [pc, #480]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 8008fea:	699b      	ldr	r3, [r3, #24]
 8008fec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	4975      	ldr	r1, [pc, #468]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f003 0308 	and.w	r3, r3, #8
 8009002:	2b00      	cmp	r3, #0
 8009004:	d010      	beq.n	8009028 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	695a      	ldr	r2, [r3, #20]
 800900a:	4b70      	ldr	r3, [pc, #448]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 800900c:	69db      	ldr	r3, [r3, #28]
 800900e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009012:	429a      	cmp	r2, r3
 8009014:	d908      	bls.n	8009028 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009016:	4b6d      	ldr	r3, [pc, #436]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 8009018:	69db      	ldr	r3, [r3, #28]
 800901a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	695b      	ldr	r3, [r3, #20]
 8009022:	496a      	ldr	r1, [pc, #424]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 8009024:	4313      	orrs	r3, r2
 8009026:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 0310 	and.w	r3, r3, #16
 8009030:	2b00      	cmp	r3, #0
 8009032:	d010      	beq.n	8009056 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	699a      	ldr	r2, [r3, #24]
 8009038:	4b64      	ldr	r3, [pc, #400]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 800903a:	69db      	ldr	r3, [r3, #28]
 800903c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009040:	429a      	cmp	r2, r3
 8009042:	d908      	bls.n	8009056 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009044:	4b61      	ldr	r3, [pc, #388]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 8009046:	69db      	ldr	r3, [r3, #28]
 8009048:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	699b      	ldr	r3, [r3, #24]
 8009050:	495e      	ldr	r1, [pc, #376]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 8009052:	4313      	orrs	r3, r2
 8009054:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 0320 	and.w	r3, r3, #32
 800905e:	2b00      	cmp	r3, #0
 8009060:	d010      	beq.n	8009084 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	69da      	ldr	r2, [r3, #28]
 8009066:	4b59      	ldr	r3, [pc, #356]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800906e:	429a      	cmp	r2, r3
 8009070:	d908      	bls.n	8009084 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009072:	4b56      	ldr	r3, [pc, #344]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 8009074:	6a1b      	ldr	r3, [r3, #32]
 8009076:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	69db      	ldr	r3, [r3, #28]
 800907e:	4953      	ldr	r1, [pc, #332]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 8009080:	4313      	orrs	r3, r2
 8009082:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 0302 	and.w	r3, r3, #2
 800908c:	2b00      	cmp	r3, #0
 800908e:	d010      	beq.n	80090b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	68da      	ldr	r2, [r3, #12]
 8009094:	4b4d      	ldr	r3, [pc, #308]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 8009096:	699b      	ldr	r3, [r3, #24]
 8009098:	f003 030f 	and.w	r3, r3, #15
 800909c:	429a      	cmp	r2, r3
 800909e:	d908      	bls.n	80090b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090a0:	4b4a      	ldr	r3, [pc, #296]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 80090a2:	699b      	ldr	r3, [r3, #24]
 80090a4:	f023 020f 	bic.w	r2, r3, #15
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	4947      	ldr	r1, [pc, #284]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 80090ae:	4313      	orrs	r3, r2
 80090b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 0301 	and.w	r3, r3, #1
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d055      	beq.n	800916a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80090be:	4b43      	ldr	r3, [pc, #268]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 80090c0:	699b      	ldr	r3, [r3, #24]
 80090c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	4940      	ldr	r1, [pc, #256]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 80090cc:	4313      	orrs	r3, r2
 80090ce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d107      	bne.n	80090e8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80090d8:	4b3c      	ldr	r3, [pc, #240]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d121      	bne.n	8009128 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	e0f6      	b.n	80092d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	2b03      	cmp	r3, #3
 80090ee:	d107      	bne.n	8009100 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80090f0:	4b36      	ldr	r3, [pc, #216]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d115      	bne.n	8009128 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	e0ea      	b.n	80092d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d107      	bne.n	8009118 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009108:	4b30      	ldr	r3, [pc, #192]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009110:	2b00      	cmp	r3, #0
 8009112:	d109      	bne.n	8009128 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	e0de      	b.n	80092d6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009118:	4b2c      	ldr	r3, [pc, #176]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 0304 	and.w	r3, r3, #4
 8009120:	2b00      	cmp	r3, #0
 8009122:	d101      	bne.n	8009128 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	e0d6      	b.n	80092d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009128:	4b28      	ldr	r3, [pc, #160]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 800912a:	691b      	ldr	r3, [r3, #16]
 800912c:	f023 0207 	bic.w	r2, r3, #7
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	4925      	ldr	r1, [pc, #148]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 8009136:	4313      	orrs	r3, r2
 8009138:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800913a:	f7f9 fc7b 	bl	8002a34 <HAL_GetTick>
 800913e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009140:	e00a      	b.n	8009158 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009142:	f7f9 fc77 	bl	8002a34 <HAL_GetTick>
 8009146:	4602      	mov	r2, r0
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009150:	4293      	cmp	r3, r2
 8009152:	d901      	bls.n	8009158 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009154:	2303      	movs	r3, #3
 8009156:	e0be      	b.n	80092d6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009158:	4b1c      	ldr	r3, [pc, #112]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	00db      	lsls	r3, r3, #3
 8009166:	429a      	cmp	r2, r3
 8009168:	d1eb      	bne.n	8009142 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 0302 	and.w	r3, r3, #2
 8009172:	2b00      	cmp	r3, #0
 8009174:	d010      	beq.n	8009198 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	68da      	ldr	r2, [r3, #12]
 800917a:	4b14      	ldr	r3, [pc, #80]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 800917c:	699b      	ldr	r3, [r3, #24]
 800917e:	f003 030f 	and.w	r3, r3, #15
 8009182:	429a      	cmp	r2, r3
 8009184:	d208      	bcs.n	8009198 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009186:	4b11      	ldr	r3, [pc, #68]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 8009188:	699b      	ldr	r3, [r3, #24]
 800918a:	f023 020f 	bic.w	r2, r3, #15
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	490e      	ldr	r1, [pc, #56]	; (80091cc <HAL_RCC_ClockConfig+0x244>)
 8009194:	4313      	orrs	r3, r2
 8009196:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009198:	4b0b      	ldr	r3, [pc, #44]	; (80091c8 <HAL_RCC_ClockConfig+0x240>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 030f 	and.w	r3, r3, #15
 80091a0:	683a      	ldr	r2, [r7, #0]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d214      	bcs.n	80091d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091a6:	4b08      	ldr	r3, [pc, #32]	; (80091c8 <HAL_RCC_ClockConfig+0x240>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f023 020f 	bic.w	r2, r3, #15
 80091ae:	4906      	ldr	r1, [pc, #24]	; (80091c8 <HAL_RCC_ClockConfig+0x240>)
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091b6:	4b04      	ldr	r3, [pc, #16]	; (80091c8 <HAL_RCC_ClockConfig+0x240>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 030f 	and.w	r3, r3, #15
 80091be:	683a      	ldr	r2, [r7, #0]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d005      	beq.n	80091d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	e086      	b.n	80092d6 <HAL_RCC_ClockConfig+0x34e>
 80091c8:	52002000 	.word	0x52002000
 80091cc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 0304 	and.w	r3, r3, #4
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d010      	beq.n	80091fe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	691a      	ldr	r2, [r3, #16]
 80091e0:	4b3f      	ldr	r3, [pc, #252]	; (80092e0 <HAL_RCC_ClockConfig+0x358>)
 80091e2:	699b      	ldr	r3, [r3, #24]
 80091e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d208      	bcs.n	80091fe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80091ec:	4b3c      	ldr	r3, [pc, #240]	; (80092e0 <HAL_RCC_ClockConfig+0x358>)
 80091ee:	699b      	ldr	r3, [r3, #24]
 80091f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	4939      	ldr	r1, [pc, #228]	; (80092e0 <HAL_RCC_ClockConfig+0x358>)
 80091fa:	4313      	orrs	r3, r2
 80091fc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f003 0308 	and.w	r3, r3, #8
 8009206:	2b00      	cmp	r3, #0
 8009208:	d010      	beq.n	800922c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	695a      	ldr	r2, [r3, #20]
 800920e:	4b34      	ldr	r3, [pc, #208]	; (80092e0 <HAL_RCC_ClockConfig+0x358>)
 8009210:	69db      	ldr	r3, [r3, #28]
 8009212:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009216:	429a      	cmp	r2, r3
 8009218:	d208      	bcs.n	800922c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800921a:	4b31      	ldr	r3, [pc, #196]	; (80092e0 <HAL_RCC_ClockConfig+0x358>)
 800921c:	69db      	ldr	r3, [r3, #28]
 800921e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	695b      	ldr	r3, [r3, #20]
 8009226:	492e      	ldr	r1, [pc, #184]	; (80092e0 <HAL_RCC_ClockConfig+0x358>)
 8009228:	4313      	orrs	r3, r2
 800922a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 0310 	and.w	r3, r3, #16
 8009234:	2b00      	cmp	r3, #0
 8009236:	d010      	beq.n	800925a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	699a      	ldr	r2, [r3, #24]
 800923c:	4b28      	ldr	r3, [pc, #160]	; (80092e0 <HAL_RCC_ClockConfig+0x358>)
 800923e:	69db      	ldr	r3, [r3, #28]
 8009240:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009244:	429a      	cmp	r2, r3
 8009246:	d208      	bcs.n	800925a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009248:	4b25      	ldr	r3, [pc, #148]	; (80092e0 <HAL_RCC_ClockConfig+0x358>)
 800924a:	69db      	ldr	r3, [r3, #28]
 800924c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	699b      	ldr	r3, [r3, #24]
 8009254:	4922      	ldr	r1, [pc, #136]	; (80092e0 <HAL_RCC_ClockConfig+0x358>)
 8009256:	4313      	orrs	r3, r2
 8009258:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f003 0320 	and.w	r3, r3, #32
 8009262:	2b00      	cmp	r3, #0
 8009264:	d010      	beq.n	8009288 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	69da      	ldr	r2, [r3, #28]
 800926a:	4b1d      	ldr	r3, [pc, #116]	; (80092e0 <HAL_RCC_ClockConfig+0x358>)
 800926c:	6a1b      	ldr	r3, [r3, #32]
 800926e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009272:	429a      	cmp	r2, r3
 8009274:	d208      	bcs.n	8009288 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009276:	4b1a      	ldr	r3, [pc, #104]	; (80092e0 <HAL_RCC_ClockConfig+0x358>)
 8009278:	6a1b      	ldr	r3, [r3, #32]
 800927a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	69db      	ldr	r3, [r3, #28]
 8009282:	4917      	ldr	r1, [pc, #92]	; (80092e0 <HAL_RCC_ClockConfig+0x358>)
 8009284:	4313      	orrs	r3, r2
 8009286:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009288:	f000 f834 	bl	80092f4 <HAL_RCC_GetSysClockFreq>
 800928c:	4602      	mov	r2, r0
 800928e:	4b14      	ldr	r3, [pc, #80]	; (80092e0 <HAL_RCC_ClockConfig+0x358>)
 8009290:	699b      	ldr	r3, [r3, #24]
 8009292:	0a1b      	lsrs	r3, r3, #8
 8009294:	f003 030f 	and.w	r3, r3, #15
 8009298:	4912      	ldr	r1, [pc, #72]	; (80092e4 <HAL_RCC_ClockConfig+0x35c>)
 800929a:	5ccb      	ldrb	r3, [r1, r3]
 800929c:	f003 031f 	and.w	r3, r3, #31
 80092a0:	fa22 f303 	lsr.w	r3, r2, r3
 80092a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092a6:	4b0e      	ldr	r3, [pc, #56]	; (80092e0 <HAL_RCC_ClockConfig+0x358>)
 80092a8:	699b      	ldr	r3, [r3, #24]
 80092aa:	f003 030f 	and.w	r3, r3, #15
 80092ae:	4a0d      	ldr	r2, [pc, #52]	; (80092e4 <HAL_RCC_ClockConfig+0x35c>)
 80092b0:	5cd3      	ldrb	r3, [r2, r3]
 80092b2:	f003 031f 	and.w	r3, r3, #31
 80092b6:	693a      	ldr	r2, [r7, #16]
 80092b8:	fa22 f303 	lsr.w	r3, r2, r3
 80092bc:	4a0a      	ldr	r2, [pc, #40]	; (80092e8 <HAL_RCC_ClockConfig+0x360>)
 80092be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80092c0:	4a0a      	ldr	r2, [pc, #40]	; (80092ec <HAL_RCC_ClockConfig+0x364>)
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80092c6:	4b0a      	ldr	r3, [pc, #40]	; (80092f0 <HAL_RCC_ClockConfig+0x368>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7f9 fb68 	bl	80029a0 <HAL_InitTick>
 80092d0:	4603      	mov	r3, r0
 80092d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80092d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3718      	adds	r7, #24
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	58024400 	.word	0x58024400
 80092e4:	08010054 	.word	0x08010054
 80092e8:	24000028 	.word	0x24000028
 80092ec:	24000024 	.word	0x24000024
 80092f0:	2400002c 	.word	0x2400002c

080092f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b089      	sub	sp, #36	; 0x24
 80092f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092fa:	4bb3      	ldr	r3, [pc, #716]	; (80095c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009302:	2b18      	cmp	r3, #24
 8009304:	f200 8155 	bhi.w	80095b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8009308:	a201      	add	r2, pc, #4	; (adr r2, 8009310 <HAL_RCC_GetSysClockFreq+0x1c>)
 800930a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930e:	bf00      	nop
 8009310:	08009375 	.word	0x08009375
 8009314:	080095b3 	.word	0x080095b3
 8009318:	080095b3 	.word	0x080095b3
 800931c:	080095b3 	.word	0x080095b3
 8009320:	080095b3 	.word	0x080095b3
 8009324:	080095b3 	.word	0x080095b3
 8009328:	080095b3 	.word	0x080095b3
 800932c:	080095b3 	.word	0x080095b3
 8009330:	0800939b 	.word	0x0800939b
 8009334:	080095b3 	.word	0x080095b3
 8009338:	080095b3 	.word	0x080095b3
 800933c:	080095b3 	.word	0x080095b3
 8009340:	080095b3 	.word	0x080095b3
 8009344:	080095b3 	.word	0x080095b3
 8009348:	080095b3 	.word	0x080095b3
 800934c:	080095b3 	.word	0x080095b3
 8009350:	080093a1 	.word	0x080093a1
 8009354:	080095b3 	.word	0x080095b3
 8009358:	080095b3 	.word	0x080095b3
 800935c:	080095b3 	.word	0x080095b3
 8009360:	080095b3 	.word	0x080095b3
 8009364:	080095b3 	.word	0x080095b3
 8009368:	080095b3 	.word	0x080095b3
 800936c:	080095b3 	.word	0x080095b3
 8009370:	080093a7 	.word	0x080093a7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009374:	4b94      	ldr	r3, [pc, #592]	; (80095c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 0320 	and.w	r3, r3, #32
 800937c:	2b00      	cmp	r3, #0
 800937e:	d009      	beq.n	8009394 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009380:	4b91      	ldr	r3, [pc, #580]	; (80095c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	08db      	lsrs	r3, r3, #3
 8009386:	f003 0303 	and.w	r3, r3, #3
 800938a:	4a90      	ldr	r2, [pc, #576]	; (80095cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800938c:	fa22 f303 	lsr.w	r3, r2, r3
 8009390:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009392:	e111      	b.n	80095b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009394:	4b8d      	ldr	r3, [pc, #564]	; (80095cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009396:	61bb      	str	r3, [r7, #24]
    break;
 8009398:	e10e      	b.n	80095b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800939a:	4b8d      	ldr	r3, [pc, #564]	; (80095d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800939c:	61bb      	str	r3, [r7, #24]
    break;
 800939e:	e10b      	b.n	80095b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80093a0:	4b8c      	ldr	r3, [pc, #560]	; (80095d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80093a2:	61bb      	str	r3, [r7, #24]
    break;
 80093a4:	e108      	b.n	80095b8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80093a6:	4b88      	ldr	r3, [pc, #544]	; (80095c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093aa:	f003 0303 	and.w	r3, r3, #3
 80093ae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80093b0:	4b85      	ldr	r3, [pc, #532]	; (80095c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b4:	091b      	lsrs	r3, r3, #4
 80093b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093ba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80093bc:	4b82      	ldr	r3, [pc, #520]	; (80095c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c0:	f003 0301 	and.w	r3, r3, #1
 80093c4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80093c6:	4b80      	ldr	r3, [pc, #512]	; (80095c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ca:	08db      	lsrs	r3, r3, #3
 80093cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	fb02 f303 	mul.w	r3, r2, r3
 80093d6:	ee07 3a90 	vmov	s15, r3
 80093da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093de:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f000 80e1 	beq.w	80095ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	f000 8083 	beq.w	80094f8 <HAL_RCC_GetSysClockFreq+0x204>
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	f200 80a1 	bhi.w	800953c <HAL_RCC_GetSysClockFreq+0x248>
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d003      	beq.n	8009408 <HAL_RCC_GetSysClockFreq+0x114>
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	2b01      	cmp	r3, #1
 8009404:	d056      	beq.n	80094b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009406:	e099      	b.n	800953c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009408:	4b6f      	ldr	r3, [pc, #444]	; (80095c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 0320 	and.w	r3, r3, #32
 8009410:	2b00      	cmp	r3, #0
 8009412:	d02d      	beq.n	8009470 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009414:	4b6c      	ldr	r3, [pc, #432]	; (80095c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	08db      	lsrs	r3, r3, #3
 800941a:	f003 0303 	and.w	r3, r3, #3
 800941e:	4a6b      	ldr	r2, [pc, #428]	; (80095cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009420:	fa22 f303 	lsr.w	r3, r2, r3
 8009424:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	ee07 3a90 	vmov	s15, r3
 800942c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	ee07 3a90 	vmov	s15, r3
 8009436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800943a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800943e:	4b62      	ldr	r3, [pc, #392]	; (80095c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009446:	ee07 3a90 	vmov	s15, r3
 800944a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800944e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009452:	eddf 5a61 	vldr	s11, [pc, #388]	; 80095d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800945a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800945e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800946a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800946e:	e087      	b.n	8009580 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	ee07 3a90 	vmov	s15, r3
 8009476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80095dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800947e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009482:	4b51      	ldr	r3, [pc, #324]	; (80095c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800948a:	ee07 3a90 	vmov	s15, r3
 800948e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009492:	ed97 6a02 	vldr	s12, [r7, #8]
 8009496:	eddf 5a50 	vldr	s11, [pc, #320]	; 80095d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800949a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800949e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094b2:	e065      	b.n	8009580 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	ee07 3a90 	vmov	s15, r3
 80094ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094be:	eddf 6a48 	vldr	s13, [pc, #288]	; 80095e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80094c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094c6:	4b40      	ldr	r3, [pc, #256]	; (80095c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ce:	ee07 3a90 	vmov	s15, r3
 80094d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80094da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80095d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094f6:	e043      	b.n	8009580 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	ee07 3a90 	vmov	s15, r3
 80094fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009502:	eddf 6a38 	vldr	s13, [pc, #224]	; 80095e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800950a:	4b2f      	ldr	r3, [pc, #188]	; (80095c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800950c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800950e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009512:	ee07 3a90 	vmov	s15, r3
 8009516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800951a:	ed97 6a02 	vldr	s12, [r7, #8]
 800951e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80095d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800952a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800952e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009536:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800953a:	e021      	b.n	8009580 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	ee07 3a90 	vmov	s15, r3
 8009542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009546:	eddf 6a26 	vldr	s13, [pc, #152]	; 80095e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800954a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800954e:	4b1e      	ldr	r3, [pc, #120]	; (80095c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009556:	ee07 3a90 	vmov	s15, r3
 800955a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800955e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009562:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80095d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800956a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800956e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800957a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800957e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009580:	4b11      	ldr	r3, [pc, #68]	; (80095c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009584:	0a5b      	lsrs	r3, r3, #9
 8009586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800958a:	3301      	adds	r3, #1
 800958c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	ee07 3a90 	vmov	s15, r3
 8009594:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009598:	edd7 6a07 	vldr	s13, [r7, #28]
 800959c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095a4:	ee17 3a90 	vmov	r3, s15
 80095a8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80095aa:	e005      	b.n	80095b8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80095ac:	2300      	movs	r3, #0
 80095ae:	61bb      	str	r3, [r7, #24]
    break;
 80095b0:	e002      	b.n	80095b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80095b2:	4b07      	ldr	r3, [pc, #28]	; (80095d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80095b4:	61bb      	str	r3, [r7, #24]
    break;
 80095b6:	bf00      	nop
  }

  return sysclockfreq;
 80095b8:	69bb      	ldr	r3, [r7, #24]
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3724      	adds	r7, #36	; 0x24
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	58024400 	.word	0x58024400
 80095cc:	03d09000 	.word	0x03d09000
 80095d0:	003d0900 	.word	0x003d0900
 80095d4:	017d7840 	.word	0x017d7840
 80095d8:	46000000 	.word	0x46000000
 80095dc:	4c742400 	.word	0x4c742400
 80095e0:	4a742400 	.word	0x4a742400
 80095e4:	4bbebc20 	.word	0x4bbebc20

080095e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80095ee:	f7ff fe81 	bl	80092f4 <HAL_RCC_GetSysClockFreq>
 80095f2:	4602      	mov	r2, r0
 80095f4:	4b10      	ldr	r3, [pc, #64]	; (8009638 <HAL_RCC_GetHCLKFreq+0x50>)
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	0a1b      	lsrs	r3, r3, #8
 80095fa:	f003 030f 	and.w	r3, r3, #15
 80095fe:	490f      	ldr	r1, [pc, #60]	; (800963c <HAL_RCC_GetHCLKFreq+0x54>)
 8009600:	5ccb      	ldrb	r3, [r1, r3]
 8009602:	f003 031f 	and.w	r3, r3, #31
 8009606:	fa22 f303 	lsr.w	r3, r2, r3
 800960a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800960c:	4b0a      	ldr	r3, [pc, #40]	; (8009638 <HAL_RCC_GetHCLKFreq+0x50>)
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	f003 030f 	and.w	r3, r3, #15
 8009614:	4a09      	ldr	r2, [pc, #36]	; (800963c <HAL_RCC_GetHCLKFreq+0x54>)
 8009616:	5cd3      	ldrb	r3, [r2, r3]
 8009618:	f003 031f 	and.w	r3, r3, #31
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	fa22 f303 	lsr.w	r3, r2, r3
 8009622:	4a07      	ldr	r2, [pc, #28]	; (8009640 <HAL_RCC_GetHCLKFreq+0x58>)
 8009624:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009626:	4a07      	ldr	r2, [pc, #28]	; (8009644 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800962c:	4b04      	ldr	r3, [pc, #16]	; (8009640 <HAL_RCC_GetHCLKFreq+0x58>)
 800962e:	681b      	ldr	r3, [r3, #0]
}
 8009630:	4618      	mov	r0, r3
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	58024400 	.word	0x58024400
 800963c:	08010054 	.word	0x08010054
 8009640:	24000028 	.word	0x24000028
 8009644:	24000024 	.word	0x24000024

08009648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800964c:	f7ff ffcc 	bl	80095e8 <HAL_RCC_GetHCLKFreq>
 8009650:	4602      	mov	r2, r0
 8009652:	4b06      	ldr	r3, [pc, #24]	; (800966c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009654:	69db      	ldr	r3, [r3, #28]
 8009656:	091b      	lsrs	r3, r3, #4
 8009658:	f003 0307 	and.w	r3, r3, #7
 800965c:	4904      	ldr	r1, [pc, #16]	; (8009670 <HAL_RCC_GetPCLK1Freq+0x28>)
 800965e:	5ccb      	ldrb	r3, [r1, r3]
 8009660:	f003 031f 	and.w	r3, r3, #31
 8009664:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009668:	4618      	mov	r0, r3
 800966a:	bd80      	pop	{r7, pc}
 800966c:	58024400 	.word	0x58024400
 8009670:	08010054 	.word	0x08010054

08009674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009678:	f7ff ffb6 	bl	80095e8 <HAL_RCC_GetHCLKFreq>
 800967c:	4602      	mov	r2, r0
 800967e:	4b06      	ldr	r3, [pc, #24]	; (8009698 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009680:	69db      	ldr	r3, [r3, #28]
 8009682:	0a1b      	lsrs	r3, r3, #8
 8009684:	f003 0307 	and.w	r3, r3, #7
 8009688:	4904      	ldr	r1, [pc, #16]	; (800969c <HAL_RCC_GetPCLK2Freq+0x28>)
 800968a:	5ccb      	ldrb	r3, [r1, r3]
 800968c:	f003 031f 	and.w	r3, r3, #31
 8009690:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009694:	4618      	mov	r0, r3
 8009696:	bd80      	pop	{r7, pc}
 8009698:	58024400 	.word	0x58024400
 800969c:	08010054 	.word	0x08010054

080096a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80096a8:	2300      	movs	r3, #0
 80096aa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80096ac:	2300      	movs	r3, #0
 80096ae:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d03f      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096c4:	d02a      	beq.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80096c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096ca:	d824      	bhi.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80096cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096d0:	d018      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80096d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096d6:	d81e      	bhi.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d003      	beq.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80096dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096e0:	d007      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80096e2:	e018      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096e4:	4ba3      	ldr	r3, [pc, #652]	; (8009974 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80096e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e8:	4aa2      	ldr	r2, [pc, #648]	; (8009974 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80096ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80096f0:	e015      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	3304      	adds	r3, #4
 80096f6:	2102      	movs	r1, #2
 80096f8:	4618      	mov	r0, r3
 80096fa:	f001 fff9 	bl	800b6f0 <RCCEx_PLL2_Config>
 80096fe:	4603      	mov	r3, r0
 8009700:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009702:	e00c      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	3324      	adds	r3, #36	; 0x24
 8009708:	2102      	movs	r1, #2
 800970a:	4618      	mov	r0, r3
 800970c:	f002 f8a2 	bl	800b854 <RCCEx_PLL3_Config>
 8009710:	4603      	mov	r3, r0
 8009712:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009714:	e003      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	75fb      	strb	r3, [r7, #23]
      break;
 800971a:	e000      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800971c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800971e:	7dfb      	ldrb	r3, [r7, #23]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d109      	bne.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009724:	4b93      	ldr	r3, [pc, #588]	; (8009974 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009728:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009730:	4990      	ldr	r1, [pc, #576]	; (8009974 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009732:	4313      	orrs	r3, r2
 8009734:	650b      	str	r3, [r1, #80]	; 0x50
 8009736:	e001      	b.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009738:	7dfb      	ldrb	r3, [r7, #23]
 800973a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009744:	2b00      	cmp	r3, #0
 8009746:	d03d      	beq.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800974c:	2b04      	cmp	r3, #4
 800974e:	d826      	bhi.n	800979e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009750:	a201      	add	r2, pc, #4	; (adr r2, 8009758 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009756:	bf00      	nop
 8009758:	0800976d 	.word	0x0800976d
 800975c:	0800977b 	.word	0x0800977b
 8009760:	0800978d 	.word	0x0800978d
 8009764:	080097a5 	.word	0x080097a5
 8009768:	080097a5 	.word	0x080097a5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800976c:	4b81      	ldr	r3, [pc, #516]	; (8009974 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800976e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009770:	4a80      	ldr	r2, [pc, #512]	; (8009974 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009776:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009778:	e015      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	3304      	adds	r3, #4
 800977e:	2100      	movs	r1, #0
 8009780:	4618      	mov	r0, r3
 8009782:	f001 ffb5 	bl	800b6f0 <RCCEx_PLL2_Config>
 8009786:	4603      	mov	r3, r0
 8009788:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800978a:	e00c      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	3324      	adds	r3, #36	; 0x24
 8009790:	2100      	movs	r1, #0
 8009792:	4618      	mov	r0, r3
 8009794:	f002 f85e 	bl	800b854 <RCCEx_PLL3_Config>
 8009798:	4603      	mov	r3, r0
 800979a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800979c:	e003      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	75fb      	strb	r3, [r7, #23]
      break;
 80097a2:	e000      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80097a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097a6:	7dfb      	ldrb	r3, [r7, #23]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d109      	bne.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80097ac:	4b71      	ldr	r3, [pc, #452]	; (8009974 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097b0:	f023 0207 	bic.w	r2, r3, #7
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097b8:	496e      	ldr	r1, [pc, #440]	; (8009974 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097ba:	4313      	orrs	r3, r2
 80097bc:	650b      	str	r3, [r1, #80]	; 0x50
 80097be:	e001      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c0:	7dfb      	ldrb	r3, [r7, #23]
 80097c2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d042      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097d8:	d02b      	beq.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80097da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097de:	d825      	bhi.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80097e0:	2bc0      	cmp	r3, #192	; 0xc0
 80097e2:	d028      	beq.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80097e4:	2bc0      	cmp	r3, #192	; 0xc0
 80097e6:	d821      	bhi.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80097e8:	2b80      	cmp	r3, #128	; 0x80
 80097ea:	d016      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80097ec:	2b80      	cmp	r3, #128	; 0x80
 80097ee:	d81d      	bhi.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d002      	beq.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80097f4:	2b40      	cmp	r3, #64	; 0x40
 80097f6:	d007      	beq.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80097f8:	e018      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097fa:	4b5e      	ldr	r3, [pc, #376]	; (8009974 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fe:	4a5d      	ldr	r2, [pc, #372]	; (8009974 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009804:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009806:	e017      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	3304      	adds	r3, #4
 800980c:	2100      	movs	r1, #0
 800980e:	4618      	mov	r0, r3
 8009810:	f001 ff6e 	bl	800b6f0 <RCCEx_PLL2_Config>
 8009814:	4603      	mov	r3, r0
 8009816:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009818:	e00e      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	3324      	adds	r3, #36	; 0x24
 800981e:	2100      	movs	r1, #0
 8009820:	4618      	mov	r0, r3
 8009822:	f002 f817 	bl	800b854 <RCCEx_PLL3_Config>
 8009826:	4603      	mov	r3, r0
 8009828:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800982a:	e005      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	75fb      	strb	r3, [r7, #23]
      break;
 8009830:	e002      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009832:	bf00      	nop
 8009834:	e000      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009836:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009838:	7dfb      	ldrb	r3, [r7, #23]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d109      	bne.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800983e:	4b4d      	ldr	r3, [pc, #308]	; (8009974 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009842:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800984a:	494a      	ldr	r1, [pc, #296]	; (8009974 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800984c:	4313      	orrs	r3, r2
 800984e:	650b      	str	r3, [r1, #80]	; 0x50
 8009850:	e001      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009852:	7dfb      	ldrb	r3, [r7, #23]
 8009854:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800985e:	2b00      	cmp	r3, #0
 8009860:	d049      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009868:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800986c:	d030      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800986e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009872:	d82a      	bhi.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009874:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009878:	d02c      	beq.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800987a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800987e:	d824      	bhi.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009880:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009884:	d018      	beq.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009886:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800988a:	d81e      	bhi.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800988c:	2b00      	cmp	r3, #0
 800988e:	d003      	beq.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009890:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009894:	d007      	beq.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009896:	e018      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009898:	4b36      	ldr	r3, [pc, #216]	; (8009974 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800989a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989c:	4a35      	ldr	r2, [pc, #212]	; (8009974 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800989e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098a4:	e017      	b.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	3304      	adds	r3, #4
 80098aa:	2100      	movs	r1, #0
 80098ac:	4618      	mov	r0, r3
 80098ae:	f001 ff1f 	bl	800b6f0 <RCCEx_PLL2_Config>
 80098b2:	4603      	mov	r3, r0
 80098b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80098b6:	e00e      	b.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	3324      	adds	r3, #36	; 0x24
 80098bc:	2100      	movs	r1, #0
 80098be:	4618      	mov	r0, r3
 80098c0:	f001 ffc8 	bl	800b854 <RCCEx_PLL3_Config>
 80098c4:	4603      	mov	r3, r0
 80098c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098c8:	e005      	b.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	75fb      	strb	r3, [r7, #23]
      break;
 80098ce:	e002      	b.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80098d0:	bf00      	nop
 80098d2:	e000      	b.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80098d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098d6:	7dfb      	ldrb	r3, [r7, #23]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d10a      	bne.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80098dc:	4b25      	ldr	r3, [pc, #148]	; (8009974 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80098de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098e0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80098ea:	4922      	ldr	r1, [pc, #136]	; (8009974 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80098ec:	4313      	orrs	r3, r2
 80098ee:	658b      	str	r3, [r1, #88]	; 0x58
 80098f0:	e001      	b.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098f2:	7dfb      	ldrb	r3, [r7, #23]
 80098f4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d04b      	beq.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009908:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800990c:	d030      	beq.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800990e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009912:	d82a      	bhi.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009914:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009918:	d02e      	beq.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800991a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800991e:	d824      	bhi.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009920:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009924:	d018      	beq.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009926:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800992a:	d81e      	bhi.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800992c:	2b00      	cmp	r3, #0
 800992e:	d003      	beq.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009930:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009934:	d007      	beq.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009936:	e018      	b.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009938:	4b0e      	ldr	r3, [pc, #56]	; (8009974 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800993a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800993c:	4a0d      	ldr	r2, [pc, #52]	; (8009974 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800993e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009942:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009944:	e019      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	3304      	adds	r3, #4
 800994a:	2100      	movs	r1, #0
 800994c:	4618      	mov	r0, r3
 800994e:	f001 fecf 	bl	800b6f0 <RCCEx_PLL2_Config>
 8009952:	4603      	mov	r3, r0
 8009954:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009956:	e010      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	3324      	adds	r3, #36	; 0x24
 800995c:	2100      	movs	r1, #0
 800995e:	4618      	mov	r0, r3
 8009960:	f001 ff78 	bl	800b854 <RCCEx_PLL3_Config>
 8009964:	4603      	mov	r3, r0
 8009966:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009968:	e007      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	75fb      	strb	r3, [r7, #23]
      break;
 800996e:	e004      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8009970:	bf00      	nop
 8009972:	e002      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009974:	58024400 	.word	0x58024400
      break;
 8009978:	bf00      	nop
    }

    if(ret == HAL_OK)
 800997a:	7dfb      	ldrb	r3, [r7, #23]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d10a      	bne.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009980:	4b99      	ldr	r3, [pc, #612]	; (8009be8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009984:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800998e:	4996      	ldr	r1, [pc, #600]	; (8009be8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009990:	4313      	orrs	r3, r2
 8009992:	658b      	str	r3, [r1, #88]	; 0x58
 8009994:	e001      	b.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009996:	7dfb      	ldrb	r3, [r7, #23]
 8009998:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d032      	beq.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099aa:	2b30      	cmp	r3, #48	; 0x30
 80099ac:	d01c      	beq.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80099ae:	2b30      	cmp	r3, #48	; 0x30
 80099b0:	d817      	bhi.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80099b2:	2b20      	cmp	r3, #32
 80099b4:	d00c      	beq.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80099b6:	2b20      	cmp	r3, #32
 80099b8:	d813      	bhi.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d016      	beq.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80099be:	2b10      	cmp	r3, #16
 80099c0:	d10f      	bne.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099c2:	4b89      	ldr	r3, [pc, #548]	; (8009be8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c6:	4a88      	ldr	r2, [pc, #544]	; (8009be8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80099ce:	e00e      	b.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	3304      	adds	r3, #4
 80099d4:	2102      	movs	r1, #2
 80099d6:	4618      	mov	r0, r3
 80099d8:	f001 fe8a 	bl	800b6f0 <RCCEx_PLL2_Config>
 80099dc:	4603      	mov	r3, r0
 80099de:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80099e0:	e005      	b.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80099e2:	2301      	movs	r3, #1
 80099e4:	75fb      	strb	r3, [r7, #23]
      break;
 80099e6:	e002      	b.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80099e8:	bf00      	nop
 80099ea:	e000      	b.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80099ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099ee:	7dfb      	ldrb	r3, [r7, #23]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d109      	bne.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80099f4:	4b7c      	ldr	r3, [pc, #496]	; (8009be8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a00:	4979      	ldr	r1, [pc, #484]	; (8009be8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a02:	4313      	orrs	r3, r2
 8009a04:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009a06:	e001      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a08:	7dfb      	ldrb	r3, [r7, #23]
 8009a0a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d047      	beq.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a20:	d030      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009a22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a26:	d82a      	bhi.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009a28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a2c:	d02c      	beq.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009a2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a32:	d824      	bhi.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a38:	d018      	beq.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8009a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a3e:	d81e      	bhi.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d003      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8009a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a48:	d007      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8009a4a:	e018      	b.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a4c:	4b66      	ldr	r3, [pc, #408]	; (8009be8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a50:	4a65      	ldr	r2, [pc, #404]	; (8009be8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a58:	e017      	b.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	3304      	adds	r3, #4
 8009a5e:	2100      	movs	r1, #0
 8009a60:	4618      	mov	r0, r3
 8009a62:	f001 fe45 	bl	800b6f0 <RCCEx_PLL2_Config>
 8009a66:	4603      	mov	r3, r0
 8009a68:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a6a:	e00e      	b.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	3324      	adds	r3, #36	; 0x24
 8009a70:	2100      	movs	r1, #0
 8009a72:	4618      	mov	r0, r3
 8009a74:	f001 feee 	bl	800b854 <RCCEx_PLL3_Config>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a7c:	e005      	b.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	75fb      	strb	r3, [r7, #23]
      break;
 8009a82:	e002      	b.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009a84:	bf00      	nop
 8009a86:	e000      	b.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009a88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a8a:	7dfb      	ldrb	r3, [r7, #23]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d109      	bne.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009a90:	4b55      	ldr	r3, [pc, #340]	; (8009be8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a94:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a9c:	4952      	ldr	r1, [pc, #328]	; (8009be8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	650b      	str	r3, [r1, #80]	; 0x50
 8009aa2:	e001      	b.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aa4:	7dfb      	ldrb	r3, [r7, #23]
 8009aa6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d049      	beq.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009abc:	d02e      	beq.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009abe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ac2:	d828      	bhi.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009ac4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ac8:	d02a      	beq.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8009aca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ace:	d822      	bhi.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009ad0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ad4:	d026      	beq.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8009ad6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ada:	d81c      	bhi.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009adc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ae0:	d010      	beq.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009ae2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ae6:	d816      	bhi.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d01d      	beq.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009af0:	d111      	bne.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	3304      	adds	r3, #4
 8009af6:	2101      	movs	r1, #1
 8009af8:	4618      	mov	r0, r3
 8009afa:	f001 fdf9 	bl	800b6f0 <RCCEx_PLL2_Config>
 8009afe:	4603      	mov	r3, r0
 8009b00:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009b02:	e012      	b.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	3324      	adds	r3, #36	; 0x24
 8009b08:	2101      	movs	r1, #1
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f001 fea2 	bl	800b854 <RCCEx_PLL3_Config>
 8009b10:	4603      	mov	r3, r0
 8009b12:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009b14:	e009      	b.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	75fb      	strb	r3, [r7, #23]
      break;
 8009b1a:	e006      	b.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009b1c:	bf00      	nop
 8009b1e:	e004      	b.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009b20:	bf00      	nop
 8009b22:	e002      	b.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009b24:	bf00      	nop
 8009b26:	e000      	b.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009b28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b2a:	7dfb      	ldrb	r3, [r7, #23]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d109      	bne.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009b30:	4b2d      	ldr	r3, [pc, #180]	; (8009be8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b34:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b3c:	492a      	ldr	r1, [pc, #168]	; (8009be8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	650b      	str	r3, [r1, #80]	; 0x50
 8009b42:	e001      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b44:	7dfb      	ldrb	r3, [r7, #23]
 8009b46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d04d      	beq.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b5e:	d02e      	beq.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8009b60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b64:	d828      	bhi.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b6a:	d02a      	beq.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b70:	d822      	bhi.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009b72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b76:	d026      	beq.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009b78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b7c:	d81c      	bhi.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b82:	d010      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009b84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b88:	d816      	bhi.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d01d      	beq.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009b8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b92:	d111      	bne.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	3304      	adds	r3, #4
 8009b98:	2101      	movs	r1, #1
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f001 fda8 	bl	800b6f0 <RCCEx_PLL2_Config>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009ba4:	e012      	b.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	3324      	adds	r3, #36	; 0x24
 8009baa:	2101      	movs	r1, #1
 8009bac:	4618      	mov	r0, r3
 8009bae:	f001 fe51 	bl	800b854 <RCCEx_PLL3_Config>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009bb6:	e009      	b.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	75fb      	strb	r3, [r7, #23]
      break;
 8009bbc:	e006      	b.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009bbe:	bf00      	nop
 8009bc0:	e004      	b.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009bc2:	bf00      	nop
 8009bc4:	e002      	b.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009bc6:	bf00      	nop
 8009bc8:	e000      	b.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009bca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bcc:	7dfb      	ldrb	r3, [r7, #23]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10c      	bne.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009bd2:	4b05      	ldr	r3, [pc, #20]	; (8009be8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bd6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009be0:	4901      	ldr	r1, [pc, #4]	; (8009be8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009be2:	4313      	orrs	r3, r2
 8009be4:	658b      	str	r3, [r1, #88]	; 0x58
 8009be6:	e003      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009be8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bec:	7dfb      	ldrb	r3, [r7, #23]
 8009bee:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d02f      	beq.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c04:	d00e      	beq.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8009c06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c0a:	d814      	bhi.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d015      	beq.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8009c10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c14:	d10f      	bne.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c16:	4baf      	ldr	r3, [pc, #700]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1a:	4aae      	ldr	r2, [pc, #696]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009c22:	e00c      	b.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	3304      	adds	r3, #4
 8009c28:	2101      	movs	r1, #1
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f001 fd60 	bl	800b6f0 <RCCEx_PLL2_Config>
 8009c30:	4603      	mov	r3, r0
 8009c32:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009c34:	e003      	b.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c36:	2301      	movs	r3, #1
 8009c38:	75fb      	strb	r3, [r7, #23]
      break;
 8009c3a:	e000      	b.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8009c3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c3e:	7dfb      	ldrb	r3, [r7, #23]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d109      	bne.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009c44:	4ba3      	ldr	r3, [pc, #652]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c48:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c50:	49a0      	ldr	r1, [pc, #640]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c52:	4313      	orrs	r3, r2
 8009c54:	650b      	str	r3, [r1, #80]	; 0x50
 8009c56:	e001      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c58:	7dfb      	ldrb	r3, [r7, #23]
 8009c5a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d032      	beq.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c6c:	2b03      	cmp	r3, #3
 8009c6e:	d81b      	bhi.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009c70:	a201      	add	r2, pc, #4	; (adr r2, 8009c78 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8009c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c76:	bf00      	nop
 8009c78:	08009caf 	.word	0x08009caf
 8009c7c:	08009c89 	.word	0x08009c89
 8009c80:	08009c97 	.word	0x08009c97
 8009c84:	08009caf 	.word	0x08009caf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c88:	4b92      	ldr	r3, [pc, #584]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c8c:	4a91      	ldr	r2, [pc, #580]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009c94:	e00c      	b.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	3304      	adds	r3, #4
 8009c9a:	2102      	movs	r1, #2
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f001 fd27 	bl	800b6f0 <RCCEx_PLL2_Config>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009ca6:	e003      	b.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	75fb      	strb	r3, [r7, #23]
      break;
 8009cac:	e000      	b.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009cae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cb0:	7dfb      	ldrb	r3, [r7, #23]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d109      	bne.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009cb6:	4b87      	ldr	r3, [pc, #540]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cba:	f023 0203 	bic.w	r2, r3, #3
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cc2:	4984      	ldr	r1, [pc, #528]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009cc8:	e001      	b.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cca:	7dfb      	ldrb	r3, [r7, #23]
 8009ccc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	f000 8086 	beq.w	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009cdc:	4b7e      	ldr	r3, [pc, #504]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a7d      	ldr	r2, [pc, #500]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ce6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ce8:	f7f8 fea4 	bl	8002a34 <HAL_GetTick>
 8009cec:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cee:	e009      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cf0:	f7f8 fea0 	bl	8002a34 <HAL_GetTick>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	1ad3      	subs	r3, r2, r3
 8009cfa:	2b64      	cmp	r3, #100	; 0x64
 8009cfc:	d902      	bls.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009cfe:	2303      	movs	r3, #3
 8009d00:	75fb      	strb	r3, [r7, #23]
        break;
 8009d02:	e005      	b.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d04:	4b74      	ldr	r3, [pc, #464]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d0ef      	beq.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009d10:	7dfb      	ldrb	r3, [r7, #23]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d166      	bne.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009d16:	4b6f      	ldr	r3, [pc, #444]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d20:	4053      	eors	r3, r2
 8009d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d013      	beq.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009d2a:	4b6a      	ldr	r3, [pc, #424]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d32:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009d34:	4b67      	ldr	r3, [pc, #412]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d38:	4a66      	ldr	r2, [pc, #408]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d3e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009d40:	4b64      	ldr	r3, [pc, #400]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d44:	4a63      	ldr	r2, [pc, #396]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d4a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009d4c:	4a61      	ldr	r2, [pc, #388]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d5c:	d115      	bne.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d5e:	f7f8 fe69 	bl	8002a34 <HAL_GetTick>
 8009d62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d64:	e00b      	b.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d66:	f7f8 fe65 	bl	8002a34 <HAL_GetTick>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	1ad3      	subs	r3, r2, r3
 8009d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d902      	bls.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009d78:	2303      	movs	r3, #3
 8009d7a:	75fb      	strb	r3, [r7, #23]
            break;
 8009d7c:	e005      	b.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d7e:	4b55      	ldr	r3, [pc, #340]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d82:	f003 0302 	and.w	r3, r3, #2
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d0ed      	beq.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009d8a:	7dfb      	ldrb	r3, [r7, #23]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d126      	bne.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d9e:	d10d      	bne.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009da0:	4b4c      	ldr	r3, [pc, #304]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009dae:	0919      	lsrs	r1, r3, #4
 8009db0:	4b4a      	ldr	r3, [pc, #296]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8009db2:	400b      	ands	r3, r1
 8009db4:	4947      	ldr	r1, [pc, #284]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009db6:	4313      	orrs	r3, r2
 8009db8:	610b      	str	r3, [r1, #16]
 8009dba:	e005      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009dbc:	4b45      	ldr	r3, [pc, #276]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	4a44      	ldr	r2, [pc, #272]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009dc2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009dc6:	6113      	str	r3, [r2, #16]
 8009dc8:	4b42      	ldr	r3, [pc, #264]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009dca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009dd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009dd6:	493f      	ldr	r1, [pc, #252]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	670b      	str	r3, [r1, #112]	; 0x70
 8009ddc:	e004      	b.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009dde:	7dfb      	ldrb	r3, [r7, #23]
 8009de0:	75bb      	strb	r3, [r7, #22]
 8009de2:	e001      	b.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009de4:	7dfb      	ldrb	r3, [r7, #23]
 8009de6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f003 0301 	and.w	r3, r3, #1
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f000 8085 	beq.w	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dfa:	2b28      	cmp	r3, #40	; 0x28
 8009dfc:	d866      	bhi.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009dfe:	a201      	add	r2, pc, #4	; (adr r2, 8009e04 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e04:	08009ee1 	.word	0x08009ee1
 8009e08:	08009ecd 	.word	0x08009ecd
 8009e0c:	08009ecd 	.word	0x08009ecd
 8009e10:	08009ecd 	.word	0x08009ecd
 8009e14:	08009ecd 	.word	0x08009ecd
 8009e18:	08009ecd 	.word	0x08009ecd
 8009e1c:	08009ecd 	.word	0x08009ecd
 8009e20:	08009ecd 	.word	0x08009ecd
 8009e24:	08009ea9 	.word	0x08009ea9
 8009e28:	08009ecd 	.word	0x08009ecd
 8009e2c:	08009ecd 	.word	0x08009ecd
 8009e30:	08009ecd 	.word	0x08009ecd
 8009e34:	08009ecd 	.word	0x08009ecd
 8009e38:	08009ecd 	.word	0x08009ecd
 8009e3c:	08009ecd 	.word	0x08009ecd
 8009e40:	08009ecd 	.word	0x08009ecd
 8009e44:	08009ebb 	.word	0x08009ebb
 8009e48:	08009ecd 	.word	0x08009ecd
 8009e4c:	08009ecd 	.word	0x08009ecd
 8009e50:	08009ecd 	.word	0x08009ecd
 8009e54:	08009ecd 	.word	0x08009ecd
 8009e58:	08009ecd 	.word	0x08009ecd
 8009e5c:	08009ecd 	.word	0x08009ecd
 8009e60:	08009ecd 	.word	0x08009ecd
 8009e64:	08009ee1 	.word	0x08009ee1
 8009e68:	08009ecd 	.word	0x08009ecd
 8009e6c:	08009ecd 	.word	0x08009ecd
 8009e70:	08009ecd 	.word	0x08009ecd
 8009e74:	08009ecd 	.word	0x08009ecd
 8009e78:	08009ecd 	.word	0x08009ecd
 8009e7c:	08009ecd 	.word	0x08009ecd
 8009e80:	08009ecd 	.word	0x08009ecd
 8009e84:	08009ee1 	.word	0x08009ee1
 8009e88:	08009ecd 	.word	0x08009ecd
 8009e8c:	08009ecd 	.word	0x08009ecd
 8009e90:	08009ecd 	.word	0x08009ecd
 8009e94:	08009ecd 	.word	0x08009ecd
 8009e98:	08009ecd 	.word	0x08009ecd
 8009e9c:	08009ecd 	.word	0x08009ecd
 8009ea0:	08009ecd 	.word	0x08009ecd
 8009ea4:	08009ee1 	.word	0x08009ee1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	3304      	adds	r3, #4
 8009eac:	2101      	movs	r1, #1
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f001 fc1e 	bl	800b6f0 <RCCEx_PLL2_Config>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009eb8:	e013      	b.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	3324      	adds	r3, #36	; 0x24
 8009ebe:	2101      	movs	r1, #1
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f001 fcc7 	bl	800b854 <RCCEx_PLL3_Config>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009eca:	e00a      	b.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	75fb      	strb	r3, [r7, #23]
      break;
 8009ed0:	e007      	b.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009ed2:	bf00      	nop
 8009ed4:	58024400 	.word	0x58024400
 8009ed8:	58024800 	.word	0x58024800
 8009edc:	00ffffcf 	.word	0x00ffffcf
      break;
 8009ee0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ee2:	7dfb      	ldrb	r3, [r7, #23]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d109      	bne.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009ee8:	4b96      	ldr	r3, [pc, #600]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eec:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ef4:	4993      	ldr	r1, [pc, #588]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	654b      	str	r3, [r1, #84]	; 0x54
 8009efa:	e001      	b.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009efc:	7dfb      	ldrb	r3, [r7, #23]
 8009efe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f003 0302 	and.w	r3, r3, #2
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d038      	beq.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f10:	2b05      	cmp	r3, #5
 8009f12:	d821      	bhi.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009f14:	a201      	add	r2, pc, #4	; (adr r2, 8009f1c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1a:	bf00      	nop
 8009f1c:	08009f5f 	.word	0x08009f5f
 8009f20:	08009f35 	.word	0x08009f35
 8009f24:	08009f47 	.word	0x08009f47
 8009f28:	08009f5f 	.word	0x08009f5f
 8009f2c:	08009f5f 	.word	0x08009f5f
 8009f30:	08009f5f 	.word	0x08009f5f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	3304      	adds	r3, #4
 8009f38:	2101      	movs	r1, #1
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f001 fbd8 	bl	800b6f0 <RCCEx_PLL2_Config>
 8009f40:	4603      	mov	r3, r0
 8009f42:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009f44:	e00c      	b.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	3324      	adds	r3, #36	; 0x24
 8009f4a:	2101      	movs	r1, #1
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f001 fc81 	bl	800b854 <RCCEx_PLL3_Config>
 8009f52:	4603      	mov	r3, r0
 8009f54:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009f56:	e003      	b.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8009f5c:	e000      	b.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009f5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f60:	7dfb      	ldrb	r3, [r7, #23]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d109      	bne.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009f66:	4b77      	ldr	r3, [pc, #476]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f6a:	f023 0207 	bic.w	r2, r3, #7
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f72:	4974      	ldr	r1, [pc, #464]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009f74:	4313      	orrs	r3, r2
 8009f76:	654b      	str	r3, [r1, #84]	; 0x54
 8009f78:	e001      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f7a:	7dfb      	ldrb	r3, [r7, #23]
 8009f7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f003 0304 	and.w	r3, r3, #4
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d03a      	beq.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f90:	2b05      	cmp	r3, #5
 8009f92:	d821      	bhi.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009f94:	a201      	add	r2, pc, #4	; (adr r2, 8009f9c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9a:	bf00      	nop
 8009f9c:	08009fdf 	.word	0x08009fdf
 8009fa0:	08009fb5 	.word	0x08009fb5
 8009fa4:	08009fc7 	.word	0x08009fc7
 8009fa8:	08009fdf 	.word	0x08009fdf
 8009fac:	08009fdf 	.word	0x08009fdf
 8009fb0:	08009fdf 	.word	0x08009fdf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	3304      	adds	r3, #4
 8009fb8:	2101      	movs	r1, #1
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f001 fb98 	bl	800b6f0 <RCCEx_PLL2_Config>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009fc4:	e00c      	b.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	3324      	adds	r3, #36	; 0x24
 8009fca:	2101      	movs	r1, #1
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f001 fc41 	bl	800b854 <RCCEx_PLL3_Config>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009fd6:	e003      	b.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	75fb      	strb	r3, [r7, #23]
      break;
 8009fdc:	e000      	b.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009fde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fe0:	7dfb      	ldrb	r3, [r7, #23]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d10a      	bne.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009fe6:	4b57      	ldr	r3, [pc, #348]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fea:	f023 0207 	bic.w	r2, r3, #7
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ff4:	4953      	ldr	r1, [pc, #332]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	658b      	str	r3, [r1, #88]	; 0x58
 8009ffa:	e001      	b.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ffc:	7dfb      	ldrb	r3, [r7, #23]
 8009ffe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f003 0320 	and.w	r3, r3, #32
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d04b      	beq.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a012:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a016:	d02e      	beq.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a018:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a01c:	d828      	bhi.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a01e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a022:	d02a      	beq.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a028:	d822      	bhi.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a02a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a02e:	d026      	beq.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a030:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a034:	d81c      	bhi.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a03a:	d010      	beq.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800a03c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a040:	d816      	bhi.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a042:	2b00      	cmp	r3, #0
 800a044:	d01d      	beq.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800a046:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a04a:	d111      	bne.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	3304      	adds	r3, #4
 800a050:	2100      	movs	r1, #0
 800a052:	4618      	mov	r0, r3
 800a054:	f001 fb4c 	bl	800b6f0 <RCCEx_PLL2_Config>
 800a058:	4603      	mov	r3, r0
 800a05a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a05c:	e012      	b.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	3324      	adds	r3, #36	; 0x24
 800a062:	2102      	movs	r1, #2
 800a064:	4618      	mov	r0, r3
 800a066:	f001 fbf5 	bl	800b854 <RCCEx_PLL3_Config>
 800a06a:	4603      	mov	r3, r0
 800a06c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a06e:	e009      	b.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	75fb      	strb	r3, [r7, #23]
      break;
 800a074:	e006      	b.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a076:	bf00      	nop
 800a078:	e004      	b.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a07a:	bf00      	nop
 800a07c:	e002      	b.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a07e:	bf00      	nop
 800a080:	e000      	b.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a082:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a084:	7dfb      	ldrb	r3, [r7, #23]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d10a      	bne.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a08a:	4b2e      	ldr	r3, [pc, #184]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a08c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a08e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a098:	492a      	ldr	r1, [pc, #168]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a09a:	4313      	orrs	r3, r2
 800a09c:	654b      	str	r3, [r1, #84]	; 0x54
 800a09e:	e001      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0a0:	7dfb      	ldrb	r3, [r7, #23]
 800a0a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d04d      	beq.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a0b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a0ba:	d02e      	beq.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a0bc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a0c0:	d828      	bhi.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a0c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0c6:	d02a      	beq.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a0c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0cc:	d822      	bhi.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a0ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0d2:	d026      	beq.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a0d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0d8:	d81c      	bhi.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a0da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0de:	d010      	beq.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800a0e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0e4:	d816      	bhi.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d01d      	beq.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800a0ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0ee:	d111      	bne.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	3304      	adds	r3, #4
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f001 fafa 	bl	800b6f0 <RCCEx_PLL2_Config>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a100:	e012      	b.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	3324      	adds	r3, #36	; 0x24
 800a106:	2102      	movs	r1, #2
 800a108:	4618      	mov	r0, r3
 800a10a:	f001 fba3 	bl	800b854 <RCCEx_PLL3_Config>
 800a10e:	4603      	mov	r3, r0
 800a110:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a112:	e009      	b.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	75fb      	strb	r3, [r7, #23]
      break;
 800a118:	e006      	b.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a11a:	bf00      	nop
 800a11c:	e004      	b.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a11e:	bf00      	nop
 800a120:	e002      	b.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a122:	bf00      	nop
 800a124:	e000      	b.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a126:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a128:	7dfb      	ldrb	r3, [r7, #23]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d10c      	bne.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a12e:	4b05      	ldr	r3, [pc, #20]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a132:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a13c:	4901      	ldr	r1, [pc, #4]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a13e:	4313      	orrs	r3, r2
 800a140:	658b      	str	r3, [r1, #88]	; 0x58
 800a142:	e003      	b.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800a144:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a148:	7dfb      	ldrb	r3, [r7, #23]
 800a14a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a154:	2b00      	cmp	r3, #0
 800a156:	d04b      	beq.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a15e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a162:	d02e      	beq.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a164:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a168:	d828      	bhi.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a16a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a16e:	d02a      	beq.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a174:	d822      	bhi.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a176:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a17a:	d026      	beq.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800a17c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a180:	d81c      	bhi.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a182:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a186:	d010      	beq.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800a188:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a18c:	d816      	bhi.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d01d      	beq.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800a192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a196:	d111      	bne.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	3304      	adds	r3, #4
 800a19c:	2100      	movs	r1, #0
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f001 faa6 	bl	800b6f0 <RCCEx_PLL2_Config>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a1a8:	e012      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	3324      	adds	r3, #36	; 0x24
 800a1ae:	2102      	movs	r1, #2
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f001 fb4f 	bl	800b854 <RCCEx_PLL3_Config>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a1ba:	e009      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	75fb      	strb	r3, [r7, #23]
      break;
 800a1c0:	e006      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a1c2:	bf00      	nop
 800a1c4:	e004      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a1c6:	bf00      	nop
 800a1c8:	e002      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a1ca:	bf00      	nop
 800a1cc:	e000      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a1ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1d0:	7dfb      	ldrb	r3, [r7, #23]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10a      	bne.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a1d6:	4b9d      	ldr	r3, [pc, #628]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a1d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a1e4:	4999      	ldr	r1, [pc, #612]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	658b      	str	r3, [r1, #88]	; 0x58
 800a1ea:	e001      	b.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ec:	7dfb      	ldrb	r3, [r7, #23]
 800a1ee:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f003 0308 	and.w	r3, r3, #8
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d01a      	beq.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a206:	d10a      	bne.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	3324      	adds	r3, #36	; 0x24
 800a20c:	2102      	movs	r1, #2
 800a20e:	4618      	mov	r0, r3
 800a210:	f001 fb20 	bl	800b854 <RCCEx_PLL3_Config>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d001      	beq.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a21e:	4b8b      	ldr	r3, [pc, #556]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a222:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a22c:	4987      	ldr	r1, [pc, #540]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a22e:	4313      	orrs	r3, r2
 800a230:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f003 0310 	and.w	r3, r3, #16
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d01a      	beq.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a248:	d10a      	bne.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	3324      	adds	r3, #36	; 0x24
 800a24e:	2102      	movs	r1, #2
 800a250:	4618      	mov	r0, r3
 800a252:	f001 faff 	bl	800b854 <RCCEx_PLL3_Config>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d001      	beq.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800a25c:	2301      	movs	r3, #1
 800a25e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a260:	4b7a      	ldr	r3, [pc, #488]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a264:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a26e:	4977      	ldr	r1, [pc, #476]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a270:	4313      	orrs	r3, r2
 800a272:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d034      	beq.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a286:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a28a:	d01d      	beq.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800a28c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a290:	d817      	bhi.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800a292:	2b00      	cmp	r3, #0
 800a294:	d003      	beq.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a29a:	d009      	beq.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800a29c:	e011      	b.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	3304      	adds	r3, #4
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f001 fa23 	bl	800b6f0 <RCCEx_PLL2_Config>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a2ae:	e00c      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	3324      	adds	r3, #36	; 0x24
 800a2b4:	2102      	movs	r1, #2
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f001 facc 	bl	800b854 <RCCEx_PLL3_Config>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a2c0:	e003      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	75fb      	strb	r3, [r7, #23]
      break;
 800a2c6:	e000      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800a2c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2ca:	7dfb      	ldrb	r3, [r7, #23]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d10a      	bne.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a2d0:	4b5e      	ldr	r3, [pc, #376]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a2d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a2de:	495b      	ldr	r1, [pc, #364]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	658b      	str	r3, [r1, #88]	; 0x58
 800a2e4:	e001      	b.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2e6:	7dfb      	ldrb	r3, [r7, #23]
 800a2e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d033      	beq.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a300:	d01c      	beq.n	800a33c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800a302:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a306:	d816      	bhi.n	800a336 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800a308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a30c:	d003      	beq.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800a30e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a312:	d007      	beq.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800a314:	e00f      	b.n	800a336 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a316:	4b4d      	ldr	r3, [pc, #308]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a31a:	4a4c      	ldr	r2, [pc, #304]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a31c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a320:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a322:	e00c      	b.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	3324      	adds	r3, #36	; 0x24
 800a328:	2101      	movs	r1, #1
 800a32a:	4618      	mov	r0, r3
 800a32c:	f001 fa92 	bl	800b854 <RCCEx_PLL3_Config>
 800a330:	4603      	mov	r3, r0
 800a332:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a334:	e003      	b.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a336:	2301      	movs	r3, #1
 800a338:	75fb      	strb	r3, [r7, #23]
      break;
 800a33a:	e000      	b.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800a33c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a33e:	7dfb      	ldrb	r3, [r7, #23]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d10a      	bne.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a344:	4b41      	ldr	r3, [pc, #260]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a348:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a352:	493e      	ldr	r1, [pc, #248]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a354:	4313      	orrs	r3, r2
 800a356:	654b      	str	r3, [r1, #84]	; 0x54
 800a358:	e001      	b.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a35a:	7dfb      	ldrb	r3, [r7, #23]
 800a35c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a366:	2b00      	cmp	r3, #0
 800a368:	d029      	beq.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d003      	beq.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800a372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a376:	d007      	beq.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800a378:	e00f      	b.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a37a:	4b34      	ldr	r3, [pc, #208]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37e:	4a33      	ldr	r2, [pc, #204]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a384:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a386:	e00b      	b.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	3304      	adds	r3, #4
 800a38c:	2102      	movs	r1, #2
 800a38e:	4618      	mov	r0, r3
 800a390:	f001 f9ae 	bl	800b6f0 <RCCEx_PLL2_Config>
 800a394:	4603      	mov	r3, r0
 800a396:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a398:	e002      	b.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800a39a:	2301      	movs	r3, #1
 800a39c:	75fb      	strb	r3, [r7, #23]
      break;
 800a39e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3a0:	7dfb      	ldrb	r3, [r7, #23]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d109      	bne.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a3a6:	4b29      	ldr	r3, [pc, #164]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a3a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3b2:	4926      	ldr	r1, [pc, #152]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a3b8:	e001      	b.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3ba:	7dfb      	ldrb	r3, [r7, #23]
 800a3bc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00a      	beq.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	3324      	adds	r3, #36	; 0x24
 800a3ce:	2102      	movs	r1, #2
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f001 fa3f 	bl	800b854 <RCCEx_PLL3_Config>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d001      	beq.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d033      	beq.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3f4:	d017      	beq.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a3f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3fa:	d811      	bhi.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a3fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a400:	d013      	beq.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a406:	d80b      	bhi.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d010      	beq.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800a40c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a410:	d106      	bne.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a412:	4b0e      	ldr	r3, [pc, #56]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a416:	4a0d      	ldr	r2, [pc, #52]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a41c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a41e:	e007      	b.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	75fb      	strb	r3, [r7, #23]
      break;
 800a424:	e004      	b.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a426:	bf00      	nop
 800a428:	e002      	b.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a42a:	bf00      	nop
 800a42c:	e000      	b.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a42e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a430:	7dfb      	ldrb	r3, [r7, #23]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d10c      	bne.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a436:	4b05      	ldr	r3, [pc, #20]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a43a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a442:	4902      	ldr	r1, [pc, #8]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a444:	4313      	orrs	r3, r2
 800a446:	654b      	str	r3, [r1, #84]	; 0x54
 800a448:	e004      	b.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800a44a:	bf00      	nop
 800a44c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a450:	7dfb      	ldrb	r3, [r7, #23]
 800a452:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d008      	beq.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a460:	4b31      	ldr	r3, [pc, #196]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a464:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a46c:	492e      	ldr	r1, [pc, #184]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a46e:	4313      	orrs	r3, r2
 800a470:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d009      	beq.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a47e:	4b2a      	ldr	r3, [pc, #168]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a480:	691b      	ldr	r3, [r3, #16]
 800a482:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a48c:	4926      	ldr	r1, [pc, #152]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a48e:	4313      	orrs	r3, r2
 800a490:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d008      	beq.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a49e:	4b22      	ldr	r3, [pc, #136]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4a2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4aa:	491f      	ldr	r1, [pc, #124]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d00d      	beq.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a4bc:	4b1a      	ldr	r3, [pc, #104]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	4a19      	ldr	r2, [pc, #100]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a4c6:	6113      	str	r3, [r2, #16]
 800a4c8:	4b17      	ldr	r3, [pc, #92]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4ca:	691a      	ldr	r2, [r3, #16]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a4d2:	4915      	ldr	r1, [pc, #84]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	da08      	bge.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a4e0:	4b11      	ldr	r3, [pc, #68]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4e4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4ec:	490e      	ldr	r1, [pc, #56]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d009      	beq.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a4fe:	4b0a      	ldr	r3, [pc, #40]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a502:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a50c:	4906      	ldr	r1, [pc, #24]	; (800a528 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a50e:	4313      	orrs	r3, r2
 800a510:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a512:	7dbb      	ldrb	r3, [r7, #22]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d101      	bne.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800a518:	2300      	movs	r3, #0
 800a51a:	e000      	b.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800a51c:	2301      	movs	r3, #1
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3718      	adds	r7, #24
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	58024400 	.word	0x58024400

0800a52c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b090      	sub	sp, #64	; 0x40
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a53a:	f040 8095 	bne.w	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a53e:	4b97      	ldr	r3, [pc, #604]	; (800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a542:	f003 0307 	and.w	r3, r3, #7
 800a546:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54a:	2b04      	cmp	r3, #4
 800a54c:	f200 8088 	bhi.w	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a550:	a201      	add	r2, pc, #4	; (adr r2, 800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a556:	bf00      	nop
 800a558:	0800a56d 	.word	0x0800a56d
 800a55c:	0800a595 	.word	0x0800a595
 800a560:	0800a5bd 	.word	0x0800a5bd
 800a564:	0800a659 	.word	0x0800a659
 800a568:	0800a5e5 	.word	0x0800a5e5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a56c:	4b8b      	ldr	r3, [pc, #556]	; (800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a574:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a578:	d108      	bne.n	800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a57a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a57e:	4618      	mov	r0, r3
 800a580:	f000 ff64 	bl	800b44c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a586:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a588:	f000 bc94 	b.w	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a58c:	2300      	movs	r3, #0
 800a58e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a590:	f000 bc90 	b.w	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a594:	4b81      	ldr	r3, [pc, #516]	; (800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a59c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5a0:	d108      	bne.n	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5a2:	f107 0318 	add.w	r3, r7, #24
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f000 fca8 	bl	800aefc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5b0:	f000 bc80 	b.w	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5b8:	f000 bc7c 	b.w	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5bc:	4b77      	ldr	r3, [pc, #476]	; (800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5c8:	d108      	bne.n	800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5ca:	f107 030c 	add.w	r3, r7, #12
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f000 fde8 	bl	800b1a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5d8:	f000 bc6c 	b.w	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5e0:	f000 bc68 	b.w	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a5e4:	4b6d      	ldr	r3, [pc, #436]	; (800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a5ec:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5ee:	4b6b      	ldr	r3, [pc, #428]	; (800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f003 0304 	and.w	r3, r3, #4
 800a5f6:	2b04      	cmp	r3, #4
 800a5f8:	d10c      	bne.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a5fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d109      	bne.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a600:	4b66      	ldr	r3, [pc, #408]	; (800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	08db      	lsrs	r3, r3, #3
 800a606:	f003 0303 	and.w	r3, r3, #3
 800a60a:	4a65      	ldr	r2, [pc, #404]	; (800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a60c:	fa22 f303 	lsr.w	r3, r2, r3
 800a610:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a612:	e01f      	b.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a614:	4b61      	ldr	r3, [pc, #388]	; (800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a61c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a620:	d106      	bne.n	800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a624:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a628:	d102      	bne.n	800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a62a:	4b5e      	ldr	r3, [pc, #376]	; (800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a62c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a62e:	e011      	b.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a630:	4b5a      	ldr	r3, [pc, #360]	; (800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a638:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a63c:	d106      	bne.n	800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a644:	d102      	bne.n	800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a646:	4b58      	ldr	r3, [pc, #352]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a64a:	e003      	b.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a64c:	2300      	movs	r3, #0
 800a64e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a650:	f000 bc30 	b.w	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a654:	f000 bc2e 	b.w	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a658:	4b54      	ldr	r3, [pc, #336]	; (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a65a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a65c:	f000 bc2a 	b.w	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a660:	2300      	movs	r3, #0
 800a662:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a664:	f000 bc26 	b.w	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a66e:	f040 809f 	bne.w	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a672:	4b4a      	ldr	r3, [pc, #296]	; (800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a676:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a67a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a682:	d04d      	beq.n	800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a68a:	f200 8084 	bhi.w	800a796 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a690:	2bc0      	cmp	r3, #192	; 0xc0
 800a692:	d07d      	beq.n	800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a696:	2bc0      	cmp	r3, #192	; 0xc0
 800a698:	d87d      	bhi.n	800a796 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69c:	2b80      	cmp	r3, #128	; 0x80
 800a69e:	d02d      	beq.n	800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a2:	2b80      	cmp	r3, #128	; 0x80
 800a6a4:	d877      	bhi.n	800a796 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d003      	beq.n	800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ae:	2b40      	cmp	r3, #64	; 0x40
 800a6b0:	d012      	beq.n	800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a6b2:	e070      	b.n	800a796 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6b4:	4b39      	ldr	r3, [pc, #228]	; (800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6c0:	d107      	bne.n	800a6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f000 fec0 	bl	800b44c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a6d0:	e3f0      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6d6:	e3ed      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6d8:	4b30      	ldr	r3, [pc, #192]	; (800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6e4:	d107      	bne.n	800a6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6e6:	f107 0318 	add.w	r3, r7, #24
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f000 fc06 	bl	800aefc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6f0:	69bb      	ldr	r3, [r7, #24]
 800a6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a6f4:	e3de      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6fa:	e3db      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6fc:	4b27      	ldr	r3, [pc, #156]	; (800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a708:	d107      	bne.n	800a71a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a70a:	f107 030c 	add.w	r3, r7, #12
 800a70e:	4618      	mov	r0, r3
 800a710:	f000 fd48 	bl	800b1a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a718:	e3cc      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a71a:	2300      	movs	r3, #0
 800a71c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a71e:	e3c9      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a720:	4b1e      	ldr	r3, [pc, #120]	; (800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a724:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a728:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a72a:	4b1c      	ldr	r3, [pc, #112]	; (800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f003 0304 	and.w	r3, r3, #4
 800a732:	2b04      	cmp	r3, #4
 800a734:	d10c      	bne.n	800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d109      	bne.n	800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a73c:	4b17      	ldr	r3, [pc, #92]	; (800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	08db      	lsrs	r3, r3, #3
 800a742:	f003 0303 	and.w	r3, r3, #3
 800a746:	4a16      	ldr	r2, [pc, #88]	; (800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a748:	fa22 f303 	lsr.w	r3, r2, r3
 800a74c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a74e:	e01e      	b.n	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a750:	4b12      	ldr	r3, [pc, #72]	; (800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a75c:	d106      	bne.n	800a76c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a75e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a764:	d102      	bne.n	800a76c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a766:	4b0f      	ldr	r3, [pc, #60]	; (800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a76a:	e010      	b.n	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a76c:	4b0b      	ldr	r3, [pc, #44]	; (800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a774:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a778:	d106      	bne.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a77a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a77c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a780:	d102      	bne.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a782:	4b09      	ldr	r3, [pc, #36]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a784:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a786:	e002      	b.n	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a788:	2300      	movs	r3, #0
 800a78a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a78c:	e392      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a78e:	e391      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a790:	4b06      	ldr	r3, [pc, #24]	; (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a792:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a794:	e38e      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a796:	2300      	movs	r3, #0
 800a798:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a79a:	e38b      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a79c:	58024400 	.word	0x58024400
 800a7a0:	03d09000 	.word	0x03d09000
 800a7a4:	003d0900 	.word	0x003d0900
 800a7a8:	017d7840 	.word	0x017d7840
 800a7ac:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7b6:	f040 809c 	bne.w	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a7ba:	4b9d      	ldr	r3, [pc, #628]	; (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a7bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7be:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a7c2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a7ca:	d054      	beq.n	800a876 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800a7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a7d2:	f200 808b 	bhi.w	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a7dc:	f000 8083 	beq.w	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a7e6:	f200 8081 	bhi.w	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7f0:	d02f      	beq.n	800a852 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800a7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7f8:	d878      	bhi.n	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d004      	beq.n	800a80a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800a800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a802:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a806:	d012      	beq.n	800a82e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800a808:	e070      	b.n	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a80a:	4b89      	ldr	r3, [pc, #548]	; (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a812:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a816:	d107      	bne.n	800a828 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a81c:	4618      	mov	r0, r3
 800a81e:	f000 fe15 	bl	800b44c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a824:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a826:	e345      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a828:	2300      	movs	r3, #0
 800a82a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a82c:	e342      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a82e:	4b80      	ldr	r3, [pc, #512]	; (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a836:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a83a:	d107      	bne.n	800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a83c:	f107 0318 	add.w	r3, r7, #24
 800a840:	4618      	mov	r0, r3
 800a842:	f000 fb5b 	bl	800aefc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a84a:	e333      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a84c:	2300      	movs	r3, #0
 800a84e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a850:	e330      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a852:	4b77      	ldr	r3, [pc, #476]	; (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a85a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a85e:	d107      	bne.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a860:	f107 030c 	add.w	r3, r7, #12
 800a864:	4618      	mov	r0, r3
 800a866:	f000 fc9d 	bl	800b1a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a86e:	e321      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a870:	2300      	movs	r3, #0
 800a872:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a874:	e31e      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a876:	4b6e      	ldr	r3, [pc, #440]	; (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a87a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a87e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a880:	4b6b      	ldr	r3, [pc, #428]	; (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 0304 	and.w	r3, r3, #4
 800a888:	2b04      	cmp	r3, #4
 800a88a:	d10c      	bne.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800a88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d109      	bne.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a892:	4b67      	ldr	r3, [pc, #412]	; (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	08db      	lsrs	r3, r3, #3
 800a898:	f003 0303 	and.w	r3, r3, #3
 800a89c:	4a65      	ldr	r2, [pc, #404]	; (800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a89e:	fa22 f303 	lsr.w	r3, r2, r3
 800a8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8a4:	e01e      	b.n	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8a6:	4b62      	ldr	r3, [pc, #392]	; (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8b2:	d106      	bne.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a8b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8ba:	d102      	bne.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a8bc:	4b5e      	ldr	r3, [pc, #376]	; (800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a8be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8c0:	e010      	b.n	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8c2:	4b5b      	ldr	r3, [pc, #364]	; (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8ce:	d106      	bne.n	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a8d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8d6:	d102      	bne.n	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a8d8:	4b58      	ldr	r3, [pc, #352]	; (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a8da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8dc:	e002      	b.n	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a8e2:	e2e7      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a8e4:	e2e6      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a8e6:	4b56      	ldr	r3, [pc, #344]	; (800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8ea:	e2e3      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8f0:	e2e0      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8f8:	f040 80a7 	bne.w	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a8fc:	4b4c      	ldr	r3, [pc, #304]	; (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a900:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a904:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a908:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a90c:	d055      	beq.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a910:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a914:	f200 8096 	bhi.w	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a91e:	f000 8084 	beq.w	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a924:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a928:	f200 808c 	bhi.w	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a932:	d030      	beq.n	800a996 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a936:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a93a:	f200 8083 	bhi.w	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a940:	2b00      	cmp	r3, #0
 800a942:	d004      	beq.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a946:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a94a:	d012      	beq.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a94c:	e07a      	b.n	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a94e:	4b38      	ldr	r3, [pc, #224]	; (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a956:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a95a:	d107      	bne.n	800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a95c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a960:	4618      	mov	r0, r3
 800a962:	f000 fd73 	bl	800b44c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a968:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a96a:	e2a3      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a96c:	2300      	movs	r3, #0
 800a96e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a970:	e2a0      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a972:	4b2f      	ldr	r3, [pc, #188]	; (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a97a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a97e:	d107      	bne.n	800a990 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a980:	f107 0318 	add.w	r3, r7, #24
 800a984:	4618      	mov	r0, r3
 800a986:	f000 fab9 	bl	800aefc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a98e:	e291      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a990:	2300      	movs	r3, #0
 800a992:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a994:	e28e      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a996:	4b26      	ldr	r3, [pc, #152]	; (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a99e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9a2:	d107      	bne.n	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9a4:	f107 030c 	add.w	r3, r7, #12
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f000 fbfb 	bl	800b1a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a9b2:	e27f      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9b8:	e27c      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a9ba:	4b1d      	ldr	r3, [pc, #116]	; (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a9bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a9c2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9c4:	4b1a      	ldr	r3, [pc, #104]	; (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f003 0304 	and.w	r3, r3, #4
 800a9cc:	2b04      	cmp	r3, #4
 800a9ce:	d10c      	bne.n	800a9ea <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a9d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d109      	bne.n	800a9ea <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9d6:	4b16      	ldr	r3, [pc, #88]	; (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	08db      	lsrs	r3, r3, #3
 800a9dc:	f003 0303 	and.w	r3, r3, #3
 800a9e0:	4a14      	ldr	r2, [pc, #80]	; (800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a9e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9e8:	e01e      	b.n	800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a9ea:	4b11      	ldr	r3, [pc, #68]	; (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9f6:	d106      	bne.n	800aa06 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a9f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9fe:	d102      	bne.n	800aa06 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800aa00:	4b0d      	ldr	r3, [pc, #52]	; (800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800aa02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa04:	e010      	b.n	800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa06:	4b0a      	ldr	r3, [pc, #40]	; (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa12:	d106      	bne.n	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800aa14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa1a:	d102      	bne.n	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aa1c:	4b07      	ldr	r3, [pc, #28]	; (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800aa1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa20:	e002      	b.n	800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800aa22:	2300      	movs	r3, #0
 800aa24:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800aa26:	e245      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800aa28:	e244      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800aa2a:	4b05      	ldr	r3, [pc, #20]	; (800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aa2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa2e:	e241      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800aa30:	58024400 	.word	0x58024400
 800aa34:	03d09000 	.word	0x03d09000
 800aa38:	003d0900 	.word	0x003d0900
 800aa3c:	017d7840 	.word	0x017d7840
 800aa40:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800aa44:	2300      	movs	r3, #0
 800aa46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa48:	e234      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa50:	f040 809c 	bne.w	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800aa54:	4b9b      	ldr	r3, [pc, #620]	; (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa58:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800aa5c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aa5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa64:	d054      	beq.n	800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800aa66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa6c:	f200 808b 	bhi.w	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800aa70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa76:	f000 8083 	beq.w	800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800aa7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa80:	f200 8081 	bhi.w	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800aa84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa8a:	d02f      	beq.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800aa8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa92:	d878      	bhi.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800aa94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d004      	beq.n	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800aa9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaa0:	d012      	beq.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800aaa2:	e070      	b.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aaa4:	4b87      	ldr	r3, [pc, #540]	; (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aab0:	d107      	bne.n	800aac2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aab6:	4618      	mov	r0, r3
 800aab8:	f000 fcc8 	bl	800b44c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aabe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aac0:	e1f8      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aac2:	2300      	movs	r3, #0
 800aac4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aac6:	e1f5      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aac8:	4b7e      	ldr	r3, [pc, #504]	; (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aad0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aad4:	d107      	bne.n	800aae6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aad6:	f107 0318 	add.w	r3, r7, #24
 800aada:	4618      	mov	r0, r3
 800aadc:	f000 fa0e 	bl	800aefc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aae4:	e1e6      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aae6:	2300      	movs	r3, #0
 800aae8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaea:	e1e3      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aaec:	4b75      	ldr	r3, [pc, #468]	; (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aaf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aaf8:	d107      	bne.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aafa:	f107 030c 	add.w	r3, r7, #12
 800aafe:	4618      	mov	r0, r3
 800ab00:	f000 fb50 	bl	800b1a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ab08:	e1d4      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab0e:	e1d1      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ab10:	4b6c      	ldr	r3, [pc, #432]	; (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab18:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab1a:	4b6a      	ldr	r3, [pc, #424]	; (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f003 0304 	and.w	r3, r3, #4
 800ab22:	2b04      	cmp	r3, #4
 800ab24:	d10c      	bne.n	800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ab26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d109      	bne.n	800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab2c:	4b65      	ldr	r3, [pc, #404]	; (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	08db      	lsrs	r3, r3, #3
 800ab32:	f003 0303 	and.w	r3, r3, #3
 800ab36:	4a64      	ldr	r2, [pc, #400]	; (800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800ab38:	fa22 f303 	lsr.w	r3, r2, r3
 800ab3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab3e:	e01e      	b.n	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab40:	4b60      	ldr	r3, [pc, #384]	; (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab4c:	d106      	bne.n	800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800ab4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab54:	d102      	bne.n	800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ab56:	4b5d      	ldr	r3, [pc, #372]	; (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800ab58:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab5a:	e010      	b.n	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab5c:	4b59      	ldr	r3, [pc, #356]	; (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab68:	d106      	bne.n	800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800ab6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab70:	d102      	bne.n	800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ab72:	4b57      	ldr	r3, [pc, #348]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800ab74:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab76:	e002      	b.n	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ab7c:	e19a      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ab7e:	e199      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ab80:	4b54      	ldr	r3, [pc, #336]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab84:	e196      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800ab86:	2300      	movs	r3, #0
 800ab88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab8a:	e193      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ab92:	d173      	bne.n	800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800ab94:	4b4b      	ldr	r3, [pc, #300]	; (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ab9c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ab9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aba4:	d02f      	beq.n	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800aba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abac:	d863      	bhi.n	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800abae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d004      	beq.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800abb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abba:	d012      	beq.n	800abe2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800abbc:	e05b      	b.n	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abbe:	4b41      	ldr	r3, [pc, #260]	; (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abca:	d107      	bne.n	800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abcc:	f107 0318 	add.w	r3, r7, #24
 800abd0:	4618      	mov	r0, r3
 800abd2:	f000 f993 	bl	800aefc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800abda:	e16b      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800abdc:	2300      	movs	r3, #0
 800abde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abe0:	e168      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abe2:	4b38      	ldr	r3, [pc, #224]	; (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abee:	d107      	bne.n	800ac00 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abf0:	f107 030c 	add.w	r3, r7, #12
 800abf4:	4618      	mov	r0, r3
 800abf6:	f000 fad5 	bl	800b1a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800abfe:	e159      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ac00:	2300      	movs	r3, #0
 800ac02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac04:	e156      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ac06:	4b2f      	ldr	r3, [pc, #188]	; (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac0e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac10:	4b2c      	ldr	r3, [pc, #176]	; (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f003 0304 	and.w	r3, r3, #4
 800ac18:	2b04      	cmp	r3, #4
 800ac1a:	d10c      	bne.n	800ac36 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800ac1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d109      	bne.n	800ac36 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac22:	4b28      	ldr	r3, [pc, #160]	; (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	08db      	lsrs	r3, r3, #3
 800ac28:	f003 0303 	and.w	r3, r3, #3
 800ac2c:	4a26      	ldr	r2, [pc, #152]	; (800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800ac2e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac34:	e01e      	b.n	800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac36:	4b23      	ldr	r3, [pc, #140]	; (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac42:	d106      	bne.n	800ac52 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800ac44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac4a:	d102      	bne.n	800ac52 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ac4c:	4b1f      	ldr	r3, [pc, #124]	; (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800ac4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac50:	e010      	b.n	800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac52:	4b1c      	ldr	r3, [pc, #112]	; (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac5e:	d106      	bne.n	800ac6e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800ac60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac66:	d102      	bne.n	800ac6e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ac68:	4b19      	ldr	r3, [pc, #100]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800ac6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac6c:	e002      	b.n	800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ac72:	e11f      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ac74:	e11e      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800ac76:	2300      	movs	r3, #0
 800ac78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac7a:	e11b      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac82:	d13e      	bne.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800ac84:	4b0f      	ldr	r3, [pc, #60]	; (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac8c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ac8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d004      	beq.n	800ac9e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800ac94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac9a:	d01d      	beq.n	800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800ac9c:	e02e      	b.n	800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac9e:	4b09      	ldr	r3, [pc, #36]	; (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aca6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acaa:	d107      	bne.n	800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800acac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800acb0:	4618      	mov	r0, r3
 800acb2:	f000 fbcb 	bl	800b44c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800acb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800acba:	e0fb      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800acbc:	2300      	movs	r3, #0
 800acbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acc0:	e0f8      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800acc2:	bf00      	nop
 800acc4:	58024400 	.word	0x58024400
 800acc8:	03d09000 	.word	0x03d09000
 800accc:	003d0900 	.word	0x003d0900
 800acd0:	017d7840 	.word	0x017d7840
 800acd4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acd8:	4b79      	ldr	r3, [pc, #484]	; (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ace0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ace4:	d107      	bne.n	800acf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ace6:	f107 0318 	add.w	r3, r7, #24
 800acea:	4618      	mov	r0, r3
 800acec:	f000 f906 	bl	800aefc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800acf0:	6a3b      	ldr	r3, [r7, #32]
 800acf2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800acf4:	e0de      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800acf6:	2300      	movs	r3, #0
 800acf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acfa:	e0db      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800acfc:	2300      	movs	r3, #0
 800acfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad00:	e0d8      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad08:	f040 8085 	bne.w	800ae16 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800ad0c:	4b6c      	ldr	r3, [pc, #432]	; (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad10:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ad14:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ad16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad1c:	d06b      	beq.n	800adf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800ad1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad24:	d874      	bhi.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ad26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad2c:	d056      	beq.n	800addc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800ad2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad34:	d86c      	bhi.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ad36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad3c:	d03b      	beq.n	800adb6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800ad3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad44:	d864      	bhi.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ad46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad4c:	d021      	beq.n	800ad92 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800ad4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad54:	d85c      	bhi.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ad56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d004      	beq.n	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ad5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad62:	d004      	beq.n	800ad6e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800ad64:	e054      	b.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ad66:	f000 f8b3 	bl	800aed0 <HAL_RCCEx_GetD3PCLK1Freq>
 800ad6a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800ad6c:	e0a2      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad6e:	4b54      	ldr	r3, [pc, #336]	; (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad7a:	d107      	bne.n	800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad7c:	f107 0318 	add.w	r3, r7, #24
 800ad80:	4618      	mov	r0, r3
 800ad82:	f000 f8bb 	bl	800aefc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad8a:	e093      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad90:	e090      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad92:	4b4b      	ldr	r3, [pc, #300]	; (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad9e:	d107      	bne.n	800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ada0:	f107 030c 	add.w	r3, r7, #12
 800ada4:	4618      	mov	r0, r3
 800ada6:	f000 f9fd 	bl	800b1a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800adae:	e081      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800adb0:	2300      	movs	r3, #0
 800adb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adb4:	e07e      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800adb6:	4b42      	ldr	r3, [pc, #264]	; (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f003 0304 	and.w	r3, r3, #4
 800adbe:	2b04      	cmp	r3, #4
 800adc0:	d109      	bne.n	800add6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800adc2:	4b3f      	ldr	r3, [pc, #252]	; (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	08db      	lsrs	r3, r3, #3
 800adc8:	f003 0303 	and.w	r3, r3, #3
 800adcc:	4a3d      	ldr	r2, [pc, #244]	; (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800adce:	fa22 f303 	lsr.w	r3, r2, r3
 800add2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800add4:	e06e      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800add6:	2300      	movs	r3, #0
 800add8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adda:	e06b      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800addc:	4b38      	ldr	r3, [pc, #224]	; (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ade4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ade8:	d102      	bne.n	800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800adea:	4b37      	ldr	r3, [pc, #220]	; (800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800adec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800adee:	e061      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800adf0:	2300      	movs	r3, #0
 800adf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adf4:	e05e      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800adf6:	4b32      	ldr	r3, [pc, #200]	; (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae02:	d102      	bne.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800ae04:	4b31      	ldr	r3, [pc, #196]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ae06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae08:	e054      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae0e:	e051      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800ae10:	2300      	movs	r3, #0
 800ae12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae14:	e04e      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae1c:	d148      	bne.n	800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800ae1e:	4b28      	ldr	r3, [pc, #160]	; (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae26:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ae28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae2e:	d02a      	beq.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800ae30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae36:	d838      	bhi.n	800aeaa <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800ae38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d004      	beq.n	800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800ae3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae44:	d00d      	beq.n	800ae62 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800ae46:	e030      	b.n	800aeaa <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae48:	4b1d      	ldr	r3, [pc, #116]	; (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae54:	d102      	bne.n	800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800ae56:	4b1d      	ldr	r3, [pc, #116]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ae58:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae5a:	e02b      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae60:	e028      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae62:	4b17      	ldr	r3, [pc, #92]	; (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae6e:	d107      	bne.n	800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae74:	4618      	mov	r0, r3
 800ae76:	f000 fae9 	bl	800b44c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae7e:	e019      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ae80:	2300      	movs	r3, #0
 800ae82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae84:	e016      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae86:	4b0e      	ldr	r3, [pc, #56]	; (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae92:	d107      	bne.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae94:	f107 0318 	add.w	r3, r7, #24
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f000 f82f 	bl	800aefc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aea2:	e007      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aea4:	2300      	movs	r3, #0
 800aea6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aea8:	e004      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aeae:	e001      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800aeb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3740      	adds	r7, #64	; 0x40
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	58024400 	.word	0x58024400
 800aec4:	03d09000 	.word	0x03d09000
 800aec8:	003d0900 	.word	0x003d0900
 800aecc:	017d7840 	.word	0x017d7840

0800aed0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aed4:	f7fe fb88 	bl	80095e8 <HAL_RCC_GetHCLKFreq>
 800aed8:	4602      	mov	r2, r0
 800aeda:	4b06      	ldr	r3, [pc, #24]	; (800aef4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aedc:	6a1b      	ldr	r3, [r3, #32]
 800aede:	091b      	lsrs	r3, r3, #4
 800aee0:	f003 0307 	and.w	r3, r3, #7
 800aee4:	4904      	ldr	r1, [pc, #16]	; (800aef8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aee6:	5ccb      	ldrb	r3, [r1, r3]
 800aee8:	f003 031f 	and.w	r3, r3, #31
 800aeec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	58024400 	.word	0x58024400
 800aef8:	08010054 	.word	0x08010054

0800aefc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b089      	sub	sp, #36	; 0x24
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af04:	4ba1      	ldr	r3, [pc, #644]	; (800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af08:	f003 0303 	and.w	r3, r3, #3
 800af0c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800af0e:	4b9f      	ldr	r3, [pc, #636]	; (800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af12:	0b1b      	lsrs	r3, r3, #12
 800af14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af18:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800af1a:	4b9c      	ldr	r3, [pc, #624]	; (800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af1e:	091b      	lsrs	r3, r3, #4
 800af20:	f003 0301 	and.w	r3, r3, #1
 800af24:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800af26:	4b99      	ldr	r3, [pc, #612]	; (800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af2a:	08db      	lsrs	r3, r3, #3
 800af2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af30:	693a      	ldr	r2, [r7, #16]
 800af32:	fb02 f303 	mul.w	r3, r2, r3
 800af36:	ee07 3a90 	vmov	s15, r3
 800af3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	2b00      	cmp	r3, #0
 800af46:	f000 8111 	beq.w	800b16c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	f000 8083 	beq.w	800b058 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	2b02      	cmp	r3, #2
 800af56:	f200 80a1 	bhi.w	800b09c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800af5a:	69bb      	ldr	r3, [r7, #24]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d003      	beq.n	800af68 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	2b01      	cmp	r3, #1
 800af64:	d056      	beq.n	800b014 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800af66:	e099      	b.n	800b09c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af68:	4b88      	ldr	r3, [pc, #544]	; (800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f003 0320 	and.w	r3, r3, #32
 800af70:	2b00      	cmp	r3, #0
 800af72:	d02d      	beq.n	800afd0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af74:	4b85      	ldr	r3, [pc, #532]	; (800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	08db      	lsrs	r3, r3, #3
 800af7a:	f003 0303 	and.w	r3, r3, #3
 800af7e:	4a84      	ldr	r2, [pc, #528]	; (800b190 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800af80:	fa22 f303 	lsr.w	r3, r2, r3
 800af84:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	ee07 3a90 	vmov	s15, r3
 800af8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	ee07 3a90 	vmov	s15, r3
 800af96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af9e:	4b7b      	ldr	r3, [pc, #492]	; (800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afa6:	ee07 3a90 	vmov	s15, r3
 800afaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afae:	ed97 6a03 	vldr	s12, [r7, #12]
 800afb2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b194 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800afce:	e087      	b.n	800b0e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	ee07 3a90 	vmov	s15, r3
 800afd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afda:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800afde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afe2:	4b6a      	ldr	r3, [pc, #424]	; (800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afea:	ee07 3a90 	vmov	s15, r3
 800afee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aff2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aff6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b194 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800affa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800affe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b00a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b00e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b012:	e065      	b.n	800b0e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	ee07 3a90 	vmov	s15, r3
 800b01a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b01e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b19c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b026:	4b59      	ldr	r3, [pc, #356]	; (800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b02a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b02e:	ee07 3a90 	vmov	s15, r3
 800b032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b036:	ed97 6a03 	vldr	s12, [r7, #12]
 800b03a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b194 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b03e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b04a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b04e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b052:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b056:	e043      	b.n	800b0e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	ee07 3a90 	vmov	s15, r3
 800b05e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b062:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b06a:	4b48      	ldr	r3, [pc, #288]	; (800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b06e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b072:	ee07 3a90 	vmov	s15, r3
 800b076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b07a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b07e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b194 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b08a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b08e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b092:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b096:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b09a:	e021      	b.n	800b0e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	ee07 3a90 	vmov	s15, r3
 800b0a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b19c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b0aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0ae:	4b37      	ldr	r3, [pc, #220]	; (800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0b6:	ee07 3a90 	vmov	s15, r3
 800b0ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0be:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b194 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b0de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b0e0:	4b2a      	ldr	r3, [pc, #168]	; (800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e4:	0a5b      	lsrs	r3, r3, #9
 800b0e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0ea:	ee07 3a90 	vmov	s15, r3
 800b0ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b106:	ee17 2a90 	vmov	r2, s15
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b10e:	4b1f      	ldr	r3, [pc, #124]	; (800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b112:	0c1b      	lsrs	r3, r3, #16
 800b114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b118:	ee07 3a90 	vmov	s15, r3
 800b11c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b120:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b124:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b128:	edd7 6a07 	vldr	s13, [r7, #28]
 800b12c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b134:	ee17 2a90 	vmov	r2, s15
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b13c:	4b13      	ldr	r3, [pc, #76]	; (800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b13e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b140:	0e1b      	lsrs	r3, r3, #24
 800b142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b146:	ee07 3a90 	vmov	s15, r3
 800b14a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b14e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b152:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b156:	edd7 6a07 	vldr	s13, [r7, #28]
 800b15a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b15e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b162:	ee17 2a90 	vmov	r2, s15
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b16a:	e008      	b.n	800b17e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2200      	movs	r2, #0
 800b170:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	609a      	str	r2, [r3, #8]
}
 800b17e:	bf00      	nop
 800b180:	3724      	adds	r7, #36	; 0x24
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr
 800b18a:	bf00      	nop
 800b18c:	58024400 	.word	0x58024400
 800b190:	03d09000 	.word	0x03d09000
 800b194:	46000000 	.word	0x46000000
 800b198:	4c742400 	.word	0x4c742400
 800b19c:	4a742400 	.word	0x4a742400
 800b1a0:	4bbebc20 	.word	0x4bbebc20

0800b1a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b089      	sub	sp, #36	; 0x24
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b1ac:	4ba1      	ldr	r3, [pc, #644]	; (800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1b0:	f003 0303 	and.w	r3, r3, #3
 800b1b4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b1b6:	4b9f      	ldr	r3, [pc, #636]	; (800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ba:	0d1b      	lsrs	r3, r3, #20
 800b1bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1c0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b1c2:	4b9c      	ldr	r3, [pc, #624]	; (800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c6:	0a1b      	lsrs	r3, r3, #8
 800b1c8:	f003 0301 	and.w	r3, r3, #1
 800b1cc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b1ce:	4b99      	ldr	r3, [pc, #612]	; (800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1d2:	08db      	lsrs	r3, r3, #3
 800b1d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1d8:	693a      	ldr	r2, [r7, #16]
 800b1da:	fb02 f303 	mul.w	r3, r2, r3
 800b1de:	ee07 3a90 	vmov	s15, r3
 800b1e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	f000 8111 	beq.w	800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	2b02      	cmp	r3, #2
 800b1f6:	f000 8083 	beq.w	800b300 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	2b02      	cmp	r3, #2
 800b1fe:	f200 80a1 	bhi.w	800b344 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b202:	69bb      	ldr	r3, [r7, #24]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d003      	beq.n	800b210 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b208:	69bb      	ldr	r3, [r7, #24]
 800b20a:	2b01      	cmp	r3, #1
 800b20c:	d056      	beq.n	800b2bc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b20e:	e099      	b.n	800b344 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b210:	4b88      	ldr	r3, [pc, #544]	; (800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f003 0320 	and.w	r3, r3, #32
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d02d      	beq.n	800b278 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b21c:	4b85      	ldr	r3, [pc, #532]	; (800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	08db      	lsrs	r3, r3, #3
 800b222:	f003 0303 	and.w	r3, r3, #3
 800b226:	4a84      	ldr	r2, [pc, #528]	; (800b438 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b228:	fa22 f303 	lsr.w	r3, r2, r3
 800b22c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	ee07 3a90 	vmov	s15, r3
 800b234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	ee07 3a90 	vmov	s15, r3
 800b23e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b246:	4b7b      	ldr	r3, [pc, #492]	; (800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b24a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b24e:	ee07 3a90 	vmov	s15, r3
 800b252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b256:	ed97 6a03 	vldr	s12, [r7, #12]
 800b25a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b43c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b25e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b26a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b26e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b272:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b276:	e087      	b.n	800b388 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	ee07 3a90 	vmov	s15, r3
 800b27e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b282:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b28a:	4b6a      	ldr	r3, [pc, #424]	; (800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b28e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b292:	ee07 3a90 	vmov	s15, r3
 800b296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b29a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b29e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b43c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2ba:	e065      	b.n	800b388 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	ee07 3a90 	vmov	s15, r3
 800b2c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b444 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b2ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2ce:	4b59      	ldr	r3, [pc, #356]	; (800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2d6:	ee07 3a90 	vmov	s15, r3
 800b2da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2de:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b43c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2fe:	e043      	b.n	800b388 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	ee07 3a90 	vmov	s15, r3
 800b306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b30a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b448 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b30e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b312:	4b48      	ldr	r3, [pc, #288]	; (800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b31a:	ee07 3a90 	vmov	s15, r3
 800b31e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b322:	ed97 6a03 	vldr	s12, [r7, #12]
 800b326:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b43c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b32a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b32e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b33a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b33e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b342:	e021      	b.n	800b388 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	ee07 3a90 	vmov	s15, r3
 800b34a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b34e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b444 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b356:	4b37      	ldr	r3, [pc, #220]	; (800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b35a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b35e:	ee07 3a90 	vmov	s15, r3
 800b362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b366:	ed97 6a03 	vldr	s12, [r7, #12]
 800b36a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b43c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b36e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b37a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b37e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b382:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b386:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b388:	4b2a      	ldr	r3, [pc, #168]	; (800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b38c:	0a5b      	lsrs	r3, r3, #9
 800b38e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b392:	ee07 3a90 	vmov	s15, r3
 800b396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b39a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b39e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3ae:	ee17 2a90 	vmov	r2, s15
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b3b6:	4b1f      	ldr	r3, [pc, #124]	; (800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ba:	0c1b      	lsrs	r3, r3, #16
 800b3bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3c0:	ee07 3a90 	vmov	s15, r3
 800b3c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3dc:	ee17 2a90 	vmov	r2, s15
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b3e4:	4b13      	ldr	r3, [pc, #76]	; (800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e8:	0e1b      	lsrs	r3, r3, #24
 800b3ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3ee:	ee07 3a90 	vmov	s15, r3
 800b3f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800b402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b40a:	ee17 2a90 	vmov	r2, s15
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b412:	e008      	b.n	800b426 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	609a      	str	r2, [r3, #8]
}
 800b426:	bf00      	nop
 800b428:	3724      	adds	r7, #36	; 0x24
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr
 800b432:	bf00      	nop
 800b434:	58024400 	.word	0x58024400
 800b438:	03d09000 	.word	0x03d09000
 800b43c:	46000000 	.word	0x46000000
 800b440:	4c742400 	.word	0x4c742400
 800b444:	4a742400 	.word	0x4a742400
 800b448:	4bbebc20 	.word	0x4bbebc20

0800b44c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b089      	sub	sp, #36	; 0x24
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b454:	4ba0      	ldr	r3, [pc, #640]	; (800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b458:	f003 0303 	and.w	r3, r3, #3
 800b45c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b45e:	4b9e      	ldr	r3, [pc, #632]	; (800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b462:	091b      	lsrs	r3, r3, #4
 800b464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b468:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b46a:	4b9b      	ldr	r3, [pc, #620]	; (800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b46e:	f003 0301 	and.w	r3, r3, #1
 800b472:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b474:	4b98      	ldr	r3, [pc, #608]	; (800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b478:	08db      	lsrs	r3, r3, #3
 800b47a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b47e:	693a      	ldr	r2, [r7, #16]
 800b480:	fb02 f303 	mul.w	r3, r2, r3
 800b484:	ee07 3a90 	vmov	s15, r3
 800b488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b48c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	2b00      	cmp	r3, #0
 800b494:	f000 8111 	beq.w	800b6ba <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	2b02      	cmp	r3, #2
 800b49c:	f000 8083 	beq.w	800b5a6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	2b02      	cmp	r3, #2
 800b4a4:	f200 80a1 	bhi.w	800b5ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b4a8:	69bb      	ldr	r3, [r7, #24]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d003      	beq.n	800b4b6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b4ae:	69bb      	ldr	r3, [r7, #24]
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d056      	beq.n	800b562 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b4b4:	e099      	b.n	800b5ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4b6:	4b88      	ldr	r3, [pc, #544]	; (800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f003 0320 	and.w	r3, r3, #32
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d02d      	beq.n	800b51e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b4c2:	4b85      	ldr	r3, [pc, #532]	; (800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	08db      	lsrs	r3, r3, #3
 800b4c8:	f003 0303 	and.w	r3, r3, #3
 800b4cc:	4a83      	ldr	r2, [pc, #524]	; (800b6dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b4ce:	fa22 f303 	lsr.w	r3, r2, r3
 800b4d2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	ee07 3a90 	vmov	s15, r3
 800b4da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	ee07 3a90 	vmov	s15, r3
 800b4e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4ec:	4b7a      	ldr	r3, [pc, #488]	; (800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4f4:	ee07 3a90 	vmov	s15, r3
 800b4f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b500:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b6e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b504:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b508:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b50c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b510:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b514:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b518:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b51c:	e087      	b.n	800b62e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	ee07 3a90 	vmov	s15, r3
 800b524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b528:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b52c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b530:	4b69      	ldr	r3, [pc, #420]	; (800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b538:	ee07 3a90 	vmov	s15, r3
 800b53c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b540:	ed97 6a03 	vldr	s12, [r7, #12]
 800b544:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b6e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b548:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b54c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b550:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b554:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b55c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b560:	e065      	b.n	800b62e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	ee07 3a90 	vmov	s15, r3
 800b568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b56c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b570:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b574:	4b58      	ldr	r3, [pc, #352]	; (800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b57c:	ee07 3a90 	vmov	s15, r3
 800b580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b584:	ed97 6a03 	vldr	s12, [r7, #12]
 800b588:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b6e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b58c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b590:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b594:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b598:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b59c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b5a4:	e043      	b.n	800b62e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	ee07 3a90 	vmov	s15, r3
 800b5ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5b0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b6ec <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b5b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5b8:	4b47      	ldr	r3, [pc, #284]	; (800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5c0:	ee07 3a90 	vmov	s15, r3
 800b5c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5c8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5cc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b6e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b5e8:	e021      	b.n	800b62e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	ee07 3a90 	vmov	s15, r3
 800b5f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5f4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b5f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5fc:	4b36      	ldr	r3, [pc, #216]	; (800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b604:	ee07 3a90 	vmov	s15, r3
 800b608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b60c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b610:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b6e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b614:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b618:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b61c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b620:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b624:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b628:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b62c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b62e:	4b2a      	ldr	r3, [pc, #168]	; (800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b632:	0a5b      	lsrs	r3, r3, #9
 800b634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b638:	ee07 3a90 	vmov	s15, r3
 800b63c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b640:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b644:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b648:	edd7 6a07 	vldr	s13, [r7, #28]
 800b64c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b654:	ee17 2a90 	vmov	r2, s15
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b65c:	4b1e      	ldr	r3, [pc, #120]	; (800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b65e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b660:	0c1b      	lsrs	r3, r3, #16
 800b662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b666:	ee07 3a90 	vmov	s15, r3
 800b66a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b66e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b672:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b676:	edd7 6a07 	vldr	s13, [r7, #28]
 800b67a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b67e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b682:	ee17 2a90 	vmov	r2, s15
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b68a:	4b13      	ldr	r3, [pc, #76]	; (800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b68e:	0e1b      	lsrs	r3, r3, #24
 800b690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b694:	ee07 3a90 	vmov	s15, r3
 800b698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b69c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6b0:	ee17 2a90 	vmov	r2, s15
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b6b8:	e008      	b.n	800b6cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	609a      	str	r2, [r3, #8]
}
 800b6cc:	bf00      	nop
 800b6ce:	3724      	adds	r7, #36	; 0x24
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr
 800b6d8:	58024400 	.word	0x58024400
 800b6dc:	03d09000 	.word	0x03d09000
 800b6e0:	46000000 	.word	0x46000000
 800b6e4:	4c742400 	.word	0x4c742400
 800b6e8:	4a742400 	.word	0x4a742400
 800b6ec:	4bbebc20 	.word	0x4bbebc20

0800b6f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b6fe:	4b53      	ldr	r3, [pc, #332]	; (800b84c <RCCEx_PLL2_Config+0x15c>)
 800b700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b702:	f003 0303 	and.w	r3, r3, #3
 800b706:	2b03      	cmp	r3, #3
 800b708:	d101      	bne.n	800b70e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b70a:	2301      	movs	r3, #1
 800b70c:	e099      	b.n	800b842 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b70e:	4b4f      	ldr	r3, [pc, #316]	; (800b84c <RCCEx_PLL2_Config+0x15c>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4a4e      	ldr	r2, [pc, #312]	; (800b84c <RCCEx_PLL2_Config+0x15c>)
 800b714:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b718:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b71a:	f7f7 f98b 	bl	8002a34 <HAL_GetTick>
 800b71e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b720:	e008      	b.n	800b734 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b722:	f7f7 f987 	bl	8002a34 <HAL_GetTick>
 800b726:	4602      	mov	r2, r0
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	1ad3      	subs	r3, r2, r3
 800b72c:	2b02      	cmp	r3, #2
 800b72e:	d901      	bls.n	800b734 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b730:	2303      	movs	r3, #3
 800b732:	e086      	b.n	800b842 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b734:	4b45      	ldr	r3, [pc, #276]	; (800b84c <RCCEx_PLL2_Config+0x15c>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d1f0      	bne.n	800b722 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b740:	4b42      	ldr	r3, [pc, #264]	; (800b84c <RCCEx_PLL2_Config+0x15c>)
 800b742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b744:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	031b      	lsls	r3, r3, #12
 800b74e:	493f      	ldr	r1, [pc, #252]	; (800b84c <RCCEx_PLL2_Config+0x15c>)
 800b750:	4313      	orrs	r3, r2
 800b752:	628b      	str	r3, [r1, #40]	; 0x28
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	3b01      	subs	r3, #1
 800b75a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	689b      	ldr	r3, [r3, #8]
 800b762:	3b01      	subs	r3, #1
 800b764:	025b      	lsls	r3, r3, #9
 800b766:	b29b      	uxth	r3, r3
 800b768:	431a      	orrs	r2, r3
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	3b01      	subs	r3, #1
 800b770:	041b      	lsls	r3, r3, #16
 800b772:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b776:	431a      	orrs	r2, r3
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	691b      	ldr	r3, [r3, #16]
 800b77c:	3b01      	subs	r3, #1
 800b77e:	061b      	lsls	r3, r3, #24
 800b780:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b784:	4931      	ldr	r1, [pc, #196]	; (800b84c <RCCEx_PLL2_Config+0x15c>)
 800b786:	4313      	orrs	r3, r2
 800b788:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b78a:	4b30      	ldr	r3, [pc, #192]	; (800b84c <RCCEx_PLL2_Config+0x15c>)
 800b78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b78e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	695b      	ldr	r3, [r3, #20]
 800b796:	492d      	ldr	r1, [pc, #180]	; (800b84c <RCCEx_PLL2_Config+0x15c>)
 800b798:	4313      	orrs	r3, r2
 800b79a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b79c:	4b2b      	ldr	r3, [pc, #172]	; (800b84c <RCCEx_PLL2_Config+0x15c>)
 800b79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a0:	f023 0220 	bic.w	r2, r3, #32
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	699b      	ldr	r3, [r3, #24]
 800b7a8:	4928      	ldr	r1, [pc, #160]	; (800b84c <RCCEx_PLL2_Config+0x15c>)
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b7ae:	4b27      	ldr	r3, [pc, #156]	; (800b84c <RCCEx_PLL2_Config+0x15c>)
 800b7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b2:	4a26      	ldr	r2, [pc, #152]	; (800b84c <RCCEx_PLL2_Config+0x15c>)
 800b7b4:	f023 0310 	bic.w	r3, r3, #16
 800b7b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b7ba:	4b24      	ldr	r3, [pc, #144]	; (800b84c <RCCEx_PLL2_Config+0x15c>)
 800b7bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7be:	4b24      	ldr	r3, [pc, #144]	; (800b850 <RCCEx_PLL2_Config+0x160>)
 800b7c0:	4013      	ands	r3, r2
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	69d2      	ldr	r2, [r2, #28]
 800b7c6:	00d2      	lsls	r2, r2, #3
 800b7c8:	4920      	ldr	r1, [pc, #128]	; (800b84c <RCCEx_PLL2_Config+0x15c>)
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b7ce:	4b1f      	ldr	r3, [pc, #124]	; (800b84c <RCCEx_PLL2_Config+0x15c>)
 800b7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d2:	4a1e      	ldr	r2, [pc, #120]	; (800b84c <RCCEx_PLL2_Config+0x15c>)
 800b7d4:	f043 0310 	orr.w	r3, r3, #16
 800b7d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d106      	bne.n	800b7ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b7e0:	4b1a      	ldr	r3, [pc, #104]	; (800b84c <RCCEx_PLL2_Config+0x15c>)
 800b7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e4:	4a19      	ldr	r2, [pc, #100]	; (800b84c <RCCEx_PLL2_Config+0x15c>)
 800b7e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b7ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b7ec:	e00f      	b.n	800b80e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d106      	bne.n	800b802 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b7f4:	4b15      	ldr	r3, [pc, #84]	; (800b84c <RCCEx_PLL2_Config+0x15c>)
 800b7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f8:	4a14      	ldr	r2, [pc, #80]	; (800b84c <RCCEx_PLL2_Config+0x15c>)
 800b7fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b800:	e005      	b.n	800b80e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b802:	4b12      	ldr	r3, [pc, #72]	; (800b84c <RCCEx_PLL2_Config+0x15c>)
 800b804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b806:	4a11      	ldr	r2, [pc, #68]	; (800b84c <RCCEx_PLL2_Config+0x15c>)
 800b808:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b80c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b80e:	4b0f      	ldr	r3, [pc, #60]	; (800b84c <RCCEx_PLL2_Config+0x15c>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4a0e      	ldr	r2, [pc, #56]	; (800b84c <RCCEx_PLL2_Config+0x15c>)
 800b814:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b818:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b81a:	f7f7 f90b 	bl	8002a34 <HAL_GetTick>
 800b81e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b820:	e008      	b.n	800b834 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b822:	f7f7 f907 	bl	8002a34 <HAL_GetTick>
 800b826:	4602      	mov	r2, r0
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	1ad3      	subs	r3, r2, r3
 800b82c:	2b02      	cmp	r3, #2
 800b82e:	d901      	bls.n	800b834 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b830:	2303      	movs	r3, #3
 800b832:	e006      	b.n	800b842 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b834:	4b05      	ldr	r3, [pc, #20]	; (800b84c <RCCEx_PLL2_Config+0x15c>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d0f0      	beq.n	800b822 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b840:	7bfb      	ldrb	r3, [r7, #15]
}
 800b842:	4618      	mov	r0, r3
 800b844:	3710      	adds	r7, #16
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	58024400 	.word	0x58024400
 800b850:	ffff0007 	.word	0xffff0007

0800b854 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b084      	sub	sp, #16
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b85e:	2300      	movs	r3, #0
 800b860:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b862:	4b53      	ldr	r3, [pc, #332]	; (800b9b0 <RCCEx_PLL3_Config+0x15c>)
 800b864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b866:	f003 0303 	and.w	r3, r3, #3
 800b86a:	2b03      	cmp	r3, #3
 800b86c:	d101      	bne.n	800b872 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b86e:	2301      	movs	r3, #1
 800b870:	e099      	b.n	800b9a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b872:	4b4f      	ldr	r3, [pc, #316]	; (800b9b0 <RCCEx_PLL3_Config+0x15c>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4a4e      	ldr	r2, [pc, #312]	; (800b9b0 <RCCEx_PLL3_Config+0x15c>)
 800b878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b87c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b87e:	f7f7 f8d9 	bl	8002a34 <HAL_GetTick>
 800b882:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b884:	e008      	b.n	800b898 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b886:	f7f7 f8d5 	bl	8002a34 <HAL_GetTick>
 800b88a:	4602      	mov	r2, r0
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	1ad3      	subs	r3, r2, r3
 800b890:	2b02      	cmp	r3, #2
 800b892:	d901      	bls.n	800b898 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b894:	2303      	movs	r3, #3
 800b896:	e086      	b.n	800b9a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b898:	4b45      	ldr	r3, [pc, #276]	; (800b9b0 <RCCEx_PLL3_Config+0x15c>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d1f0      	bne.n	800b886 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b8a4:	4b42      	ldr	r3, [pc, #264]	; (800b9b0 <RCCEx_PLL3_Config+0x15c>)
 800b8a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	051b      	lsls	r3, r3, #20
 800b8b2:	493f      	ldr	r1, [pc, #252]	; (800b9b0 <RCCEx_PLL3_Config+0x15c>)
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	628b      	str	r3, [r1, #40]	; 0x28
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	3b01      	subs	r3, #1
 800b8be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	689b      	ldr	r3, [r3, #8]
 800b8c6:	3b01      	subs	r3, #1
 800b8c8:	025b      	lsls	r3, r3, #9
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	431a      	orrs	r2, r3
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	3b01      	subs	r3, #1
 800b8d4:	041b      	lsls	r3, r3, #16
 800b8d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b8da:	431a      	orrs	r2, r3
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	691b      	ldr	r3, [r3, #16]
 800b8e0:	3b01      	subs	r3, #1
 800b8e2:	061b      	lsls	r3, r3, #24
 800b8e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b8e8:	4931      	ldr	r1, [pc, #196]	; (800b9b0 <RCCEx_PLL3_Config+0x15c>)
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b8ee:	4b30      	ldr	r3, [pc, #192]	; (800b9b0 <RCCEx_PLL3_Config+0x15c>)
 800b8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	695b      	ldr	r3, [r3, #20]
 800b8fa:	492d      	ldr	r1, [pc, #180]	; (800b9b0 <RCCEx_PLL3_Config+0x15c>)
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b900:	4b2b      	ldr	r3, [pc, #172]	; (800b9b0 <RCCEx_PLL3_Config+0x15c>)
 800b902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b904:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	699b      	ldr	r3, [r3, #24]
 800b90c:	4928      	ldr	r1, [pc, #160]	; (800b9b0 <RCCEx_PLL3_Config+0x15c>)
 800b90e:	4313      	orrs	r3, r2
 800b910:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b912:	4b27      	ldr	r3, [pc, #156]	; (800b9b0 <RCCEx_PLL3_Config+0x15c>)
 800b914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b916:	4a26      	ldr	r2, [pc, #152]	; (800b9b0 <RCCEx_PLL3_Config+0x15c>)
 800b918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b91c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b91e:	4b24      	ldr	r3, [pc, #144]	; (800b9b0 <RCCEx_PLL3_Config+0x15c>)
 800b920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b922:	4b24      	ldr	r3, [pc, #144]	; (800b9b4 <RCCEx_PLL3_Config+0x160>)
 800b924:	4013      	ands	r3, r2
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	69d2      	ldr	r2, [r2, #28]
 800b92a:	00d2      	lsls	r2, r2, #3
 800b92c:	4920      	ldr	r1, [pc, #128]	; (800b9b0 <RCCEx_PLL3_Config+0x15c>)
 800b92e:	4313      	orrs	r3, r2
 800b930:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b932:	4b1f      	ldr	r3, [pc, #124]	; (800b9b0 <RCCEx_PLL3_Config+0x15c>)
 800b934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b936:	4a1e      	ldr	r2, [pc, #120]	; (800b9b0 <RCCEx_PLL3_Config+0x15c>)
 800b938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b93c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d106      	bne.n	800b952 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b944:	4b1a      	ldr	r3, [pc, #104]	; (800b9b0 <RCCEx_PLL3_Config+0x15c>)
 800b946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b948:	4a19      	ldr	r2, [pc, #100]	; (800b9b0 <RCCEx_PLL3_Config+0x15c>)
 800b94a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b94e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b950:	e00f      	b.n	800b972 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	2b01      	cmp	r3, #1
 800b956:	d106      	bne.n	800b966 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b958:	4b15      	ldr	r3, [pc, #84]	; (800b9b0 <RCCEx_PLL3_Config+0x15c>)
 800b95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95c:	4a14      	ldr	r2, [pc, #80]	; (800b9b0 <RCCEx_PLL3_Config+0x15c>)
 800b95e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b962:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b964:	e005      	b.n	800b972 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b966:	4b12      	ldr	r3, [pc, #72]	; (800b9b0 <RCCEx_PLL3_Config+0x15c>)
 800b968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b96a:	4a11      	ldr	r2, [pc, #68]	; (800b9b0 <RCCEx_PLL3_Config+0x15c>)
 800b96c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b970:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b972:	4b0f      	ldr	r3, [pc, #60]	; (800b9b0 <RCCEx_PLL3_Config+0x15c>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a0e      	ldr	r2, [pc, #56]	; (800b9b0 <RCCEx_PLL3_Config+0x15c>)
 800b978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b97c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b97e:	f7f7 f859 	bl	8002a34 <HAL_GetTick>
 800b982:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b984:	e008      	b.n	800b998 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b986:	f7f7 f855 	bl	8002a34 <HAL_GetTick>
 800b98a:	4602      	mov	r2, r0
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	1ad3      	subs	r3, r2, r3
 800b990:	2b02      	cmp	r3, #2
 800b992:	d901      	bls.n	800b998 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b994:	2303      	movs	r3, #3
 800b996:	e006      	b.n	800b9a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b998:	4b05      	ldr	r3, [pc, #20]	; (800b9b0 <RCCEx_PLL3_Config+0x15c>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d0f0      	beq.n	800b986 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b9a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	58024400 	.word	0x58024400
 800b9b4:	ffff0007 	.word	0xffff0007

0800b9b8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d101      	bne.n	800b9ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	e0f1      	b.n	800bbae <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4a78      	ldr	r2, [pc, #480]	; (800bbb8 <HAL_SPI_Init+0x200>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d00f      	beq.n	800b9fa <HAL_SPI_Init+0x42>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	4a77      	ldr	r2, [pc, #476]	; (800bbbc <HAL_SPI_Init+0x204>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d00a      	beq.n	800b9fa <HAL_SPI_Init+0x42>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4a75      	ldr	r2, [pc, #468]	; (800bbc0 <HAL_SPI_Init+0x208>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d005      	beq.n	800b9fa <HAL_SPI_Init+0x42>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	68db      	ldr	r3, [r3, #12]
 800b9f2:	2b0f      	cmp	r3, #15
 800b9f4:	d901      	bls.n	800b9fa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e0d9      	b.n	800bbae <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 fd74 	bl	800c4e8 <SPI_GetPacketSize>
 800ba00:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4a6c      	ldr	r2, [pc, #432]	; (800bbb8 <HAL_SPI_Init+0x200>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d00c      	beq.n	800ba26 <HAL_SPI_Init+0x6e>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4a6a      	ldr	r2, [pc, #424]	; (800bbbc <HAL_SPI_Init+0x204>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d007      	beq.n	800ba26 <HAL_SPI_Init+0x6e>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	4a69      	ldr	r2, [pc, #420]	; (800bbc0 <HAL_SPI_Init+0x208>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d002      	beq.n	800ba26 <HAL_SPI_Init+0x6e>
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2b08      	cmp	r3, #8
 800ba24:	d811      	bhi.n	800ba4a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ba2a:	4a63      	ldr	r2, [pc, #396]	; (800bbb8 <HAL_SPI_Init+0x200>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d009      	beq.n	800ba44 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4a61      	ldr	r2, [pc, #388]	; (800bbbc <HAL_SPI_Init+0x204>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d004      	beq.n	800ba44 <HAL_SPI_Init+0x8c>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4a60      	ldr	r2, [pc, #384]	; (800bbc0 <HAL_SPI_Init+0x208>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d104      	bne.n	800ba4e <HAL_SPI_Init+0x96>
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2b10      	cmp	r3, #16
 800ba48:	d901      	bls.n	800ba4e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	e0af      	b.n	800bbae <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ba54:	b2db      	uxtb	r3, r3
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d106      	bne.n	800ba68 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f7f6 fc1e 	bl	80022a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2202      	movs	r2, #2
 800ba6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f022 0201 	bic.w	r2, r2, #1
 800ba7e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ba8a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	699b      	ldr	r3, [r3, #24]
 800ba90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba94:	d119      	bne.n	800baca <HAL_SPI_Init+0x112>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba9e:	d103      	bne.n	800baa8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d008      	beq.n	800baba <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800baac:	2b00      	cmp	r3, #0
 800baae:	d10c      	bne.n	800baca <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bab4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bab8:	d107      	bne.n	800baca <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bac8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	69da      	ldr	r2, [r3, #28]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad2:	431a      	orrs	r2, r3
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	431a      	orrs	r2, r3
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800badc:	ea42 0103 	orr.w	r1, r2, r3
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	68da      	ldr	r2, [r3, #12]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	430a      	orrs	r2, r1
 800baea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf4:	431a      	orrs	r2, r3
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bafa:	431a      	orrs	r2, r3
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	699b      	ldr	r3, [r3, #24]
 800bb00:	431a      	orrs	r2, r3
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	691b      	ldr	r3, [r3, #16]
 800bb06:	431a      	orrs	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	695b      	ldr	r3, [r3, #20]
 800bb0c:	431a      	orrs	r2, r3
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6a1b      	ldr	r3, [r3, #32]
 800bb12:	431a      	orrs	r2, r3
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	431a      	orrs	r2, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb1e:	431a      	orrs	r2, r3
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	431a      	orrs	r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb2a:	ea42 0103 	orr.w	r1, r2, r3
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	430a      	orrs	r2, r1
 800bb38:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d113      	bne.n	800bb6a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb54:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	689b      	ldr	r3, [r3, #8]
 800bb5c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bb68:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f022 0201 	bic.w	r2, r2, #1
 800bb78:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d00a      	beq.n	800bb9c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	68db      	ldr	r3, [r3, #12]
 800bb8c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	430a      	orrs	r2, r1
 800bb9a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2201      	movs	r2, #1
 800bba8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800bbac:	2300      	movs	r3, #0
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3710      	adds	r7, #16
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	40013000 	.word	0x40013000
 800bbbc:	40003800 	.word	0x40003800
 800bbc0:	40003c00 	.word	0x40003c00

0800bbc4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b08a      	sub	sp, #40	; 0x28
 800bbc8:	af02      	add	r7, sp, #8
 800bbca:	60f8      	str	r0, [r7, #12]
 800bbcc:	60b9      	str	r1, [r7, #8]
 800bbce:	603b      	str	r3, [r7, #0]
 800bbd0:	4613      	mov	r3, r2
 800bbd2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	3330      	adds	r3, #48	; 0x30
 800bbde:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bbe8:	d112      	bne.n	800bc10 <HAL_SPI_Receive+0x4c>
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	689b      	ldr	r3, [r3, #8]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d10e      	bne.n	800bc10 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2204      	movs	r2, #4
 800bbf6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bbfa:	88fa      	ldrh	r2, [r7, #6]
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	9300      	str	r3, [sp, #0]
 800bc00:	4613      	mov	r3, r2
 800bc02:	68ba      	ldr	r2, [r7, #8]
 800bc04:	68b9      	ldr	r1, [r7, #8]
 800bc06:	68f8      	ldr	r0, [r7, #12]
 800bc08:	f000 f978 	bl	800befc <HAL_SPI_TransmitReceive>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	e16f      	b.n	800bef0 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	d101      	bne.n	800bc1e <HAL_SPI_Receive+0x5a>
 800bc1a:	2302      	movs	r3, #2
 800bc1c:	e168      	b.n	800bef0 <HAL_SPI_Receive+0x32c>
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2201      	movs	r2, #1
 800bc22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bc26:	f7f6 ff05 	bl	8002a34 <HAL_GetTick>
 800bc2a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bc32:	b2db      	uxtb	r3, r3
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d007      	beq.n	800bc48 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800bc38:	2302      	movs	r3, #2
 800bc3a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bc44:	7ffb      	ldrb	r3, [r7, #31]
 800bc46:	e153      	b.n	800bef0 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d002      	beq.n	800bc54 <HAL_SPI_Receive+0x90>
 800bc4e:	88fb      	ldrh	r3, [r7, #6]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d107      	bne.n	800bc64 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800bc54:	2301      	movs	r3, #1
 800bc56:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bc60:	7ffb      	ldrb	r3, [r7, #31]
 800bc62:	e145      	b.n	800bef0 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2204      	movs	r2, #4
 800bc68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	68ba      	ldr	r2, [r7, #8]
 800bc78:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	88fa      	ldrh	r2, [r7, #6]
 800bc7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	88fa      	ldrh	r2, [r7, #6]
 800bc86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	2200      	movs	r2, #0
 800bc94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2200      	movs	r2, #0
 800bca4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	689b      	ldr	r3, [r3, #8]
 800bcb0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800bcb4:	d107      	bne.n	800bcc6 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bcc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	685a      	ldr	r2, [r3, #4]
 800bccc:	4b8a      	ldr	r3, [pc, #552]	; (800bef8 <HAL_SPI_Receive+0x334>)
 800bcce:	4013      	ands	r3, r2
 800bcd0:	88f9      	ldrh	r1, [r7, #6]
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	6812      	ldr	r2, [r2, #0]
 800bcd6:	430b      	orrs	r3, r1
 800bcd8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	681a      	ldr	r2, [r3, #0]
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f042 0201 	orr.w	r2, r2, #1
 800bce8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bcf2:	d107      	bne.n	800bd04 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd02:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	2b0f      	cmp	r3, #15
 800bd0a:	d948      	bls.n	800bd9e <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bd0c:	e040      	b.n	800bd90 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	695a      	ldr	r2, [r3, #20]
 800bd14:	f248 0308 	movw	r3, #32776	; 0x8008
 800bd18:	4013      	ands	r3, r2
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d014      	beq.n	800bd48 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd26:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bd28:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd2e:	1d1a      	adds	r2, r3, #4
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	3b01      	subs	r3, #1
 800bd3e:	b29a      	uxth	r2, r3
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bd46:	e023      	b.n	800bd90 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd48:	f7f6 fe74 	bl	8002a34 <HAL_GetTick>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	1ad3      	subs	r3, r2, r3
 800bd52:	683a      	ldr	r2, [r7, #0]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d803      	bhi.n	800bd60 <HAL_SPI_Receive+0x19c>
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd5e:	d102      	bne.n	800bd66 <HAL_SPI_Receive+0x1a2>
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d114      	bne.n	800bd90 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bd66:	68f8      	ldr	r0, [r7, #12]
 800bd68:	f000 faf0 	bl	800c34c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2201      	movs	r2, #1
 800bd88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bd8c:	2303      	movs	r3, #3
 800bd8e:	e0af      	b.n	800bef0 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d1b8      	bne.n	800bd0e <HAL_SPI_Receive+0x14a>
 800bd9c:	e095      	b.n	800beca <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	68db      	ldr	r3, [r3, #12]
 800bda2:	2b07      	cmp	r3, #7
 800bda4:	f240 808b 	bls.w	800bebe <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bda8:	e03f      	b.n	800be2a <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	695b      	ldr	r3, [r3, #20]
 800bdb0:	f003 0301 	and.w	r3, r3, #1
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d114      	bne.n	800bde2 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdbc:	69ba      	ldr	r2, [r7, #24]
 800bdbe:	8812      	ldrh	r2, [r2, #0]
 800bdc0:	b292      	uxth	r2, r2
 800bdc2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdc8:	1c9a      	adds	r2, r3, #2
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	3b01      	subs	r3, #1
 800bdd8:	b29a      	uxth	r2, r3
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bde0:	e023      	b.n	800be2a <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bde2:	f7f6 fe27 	bl	8002a34 <HAL_GetTick>
 800bde6:	4602      	mov	r2, r0
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	1ad3      	subs	r3, r2, r3
 800bdec:	683a      	ldr	r2, [r7, #0]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d803      	bhi.n	800bdfa <HAL_SPI_Receive+0x236>
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bdf8:	d102      	bne.n	800be00 <HAL_SPI_Receive+0x23c>
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d114      	bne.n	800be2a <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800be00:	68f8      	ldr	r0, [r7, #12]
 800be02:	f000 faa3 	bl	800c34c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2200      	movs	r2, #0
 800be0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2201      	movs	r2, #1
 800be22:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800be26:	2303      	movs	r3, #3
 800be28:	e062      	b.n	800bef0 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be30:	b29b      	uxth	r3, r3
 800be32:	2b00      	cmp	r3, #0
 800be34:	d1b9      	bne.n	800bdaa <HAL_SPI_Receive+0x1e6>
 800be36:	e048      	b.n	800beca <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	695b      	ldr	r3, [r3, #20]
 800be3e:	f003 0301 	and.w	r3, r3, #1
 800be42:	2b01      	cmp	r3, #1
 800be44:	d117      	bne.n	800be76 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be52:	7812      	ldrb	r2, [r2, #0]
 800be54:	b2d2      	uxtb	r2, r2
 800be56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be5c:	1c5a      	adds	r2, r3, #1
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be68:	b29b      	uxth	r3, r3
 800be6a:	3b01      	subs	r3, #1
 800be6c:	b29a      	uxth	r2, r3
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800be74:	e023      	b.n	800bebe <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be76:	f7f6 fddd 	bl	8002a34 <HAL_GetTick>
 800be7a:	4602      	mov	r2, r0
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	1ad3      	subs	r3, r2, r3
 800be80:	683a      	ldr	r2, [r7, #0]
 800be82:	429a      	cmp	r2, r3
 800be84:	d803      	bhi.n	800be8e <HAL_SPI_Receive+0x2ca>
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be8c:	d102      	bne.n	800be94 <HAL_SPI_Receive+0x2d0>
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d114      	bne.n	800bebe <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800be94:	68f8      	ldr	r0, [r7, #12]
 800be96:	f000 fa59 	bl	800c34c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	2200      	movs	r2, #0
 800be9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bea8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2201      	movs	r2, #1
 800beb6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800beba:	2303      	movs	r3, #3
 800bebc:	e018      	b.n	800bef0 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d1b6      	bne.n	800be38 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800beca:	68f8      	ldr	r0, [r7, #12]
 800becc:	f000 fa3e 	bl	800c34c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2200      	movs	r2, #0
 800bed4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2201      	movs	r2, #1
 800bedc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d001      	beq.n	800beee <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800beea:	2301      	movs	r3, #1
 800beec:	e000      	b.n	800bef0 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800beee:	7ffb      	ldrb	r3, [r7, #31]
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3720      	adds	r7, #32
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}
 800bef8:	ffff0000 	.word	0xffff0000

0800befc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b08e      	sub	sp, #56	; 0x38
 800bf00:	af02      	add	r7, sp, #8
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	60b9      	str	r1, [r7, #8]
 800bf06:	607a      	str	r2, [r7, #4]
 800bf08:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	3320      	adds	r3, #32
 800bf16:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	3330      	adds	r3, #48	; 0x30
 800bf1e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bf26:	2b01      	cmp	r3, #1
 800bf28:	d101      	bne.n	800bf2e <HAL_SPI_TransmitReceive+0x32>
 800bf2a:	2302      	movs	r3, #2
 800bf2c:	e209      	b.n	800c342 <HAL_SPI_TransmitReceive+0x446>
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2201      	movs	r2, #1
 800bf32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bf36:	f7f6 fd7d 	bl	8002a34 <HAL_GetTick>
 800bf3a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800bf3c:	887b      	ldrh	r3, [r7, #2]
 800bf3e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800bf40:	887b      	ldrh	r3, [r7, #2]
 800bf42:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bf4a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bf52:	7efb      	ldrb	r3, [r7, #27]
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d014      	beq.n	800bf82 <HAL_SPI_TransmitReceive+0x86>
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf5e:	d106      	bne.n	800bf6e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d102      	bne.n	800bf6e <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bf68:	7efb      	ldrb	r3, [r7, #27]
 800bf6a:	2b04      	cmp	r3, #4
 800bf6c:	d009      	beq.n	800bf82 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800bf6e:	2302      	movs	r3, #2
 800bf70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2200      	movs	r2, #0
 800bf78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bf7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf80:	e1df      	b.n	800c342 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d005      	beq.n	800bf94 <HAL_SPI_TransmitReceive+0x98>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d002      	beq.n	800bf94 <HAL_SPI_TransmitReceive+0x98>
 800bf8e:	887b      	ldrh	r3, [r7, #2]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d109      	bne.n	800bfa8 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800bf94:	2301      	movs	r3, #1
 800bf96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bfa2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bfa6:	e1cc      	b.n	800c342 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	2b04      	cmp	r3, #4
 800bfb2:	d003      	beq.n	800bfbc <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2205      	movs	r2, #5
 800bfb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	887a      	ldrh	r2, [r7, #2]
 800bfce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	887a      	ldrh	r2, [r7, #2]
 800bfd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	68ba      	ldr	r2, [r7, #8]
 800bfde:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	887a      	ldrh	r2, [r7, #2]
 800bfe4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	887a      	ldrh	r2, [r7, #2]
 800bfec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2200      	movs	r2, #0
 800bff4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	2200      	movs	r2, #0
 800bffa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	685a      	ldr	r2, [r3, #4]
 800c002:	4b82      	ldr	r3, [pc, #520]	; (800c20c <HAL_SPI_TransmitReceive+0x310>)
 800c004:	4013      	ands	r3, r2
 800c006:	8879      	ldrh	r1, [r7, #2]
 800c008:	68fa      	ldr	r2, [r7, #12]
 800c00a:	6812      	ldr	r2, [r2, #0]
 800c00c:	430b      	orrs	r3, r1
 800c00e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	681a      	ldr	r2, [r3, #0]
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f042 0201 	orr.w	r2, r2, #1
 800c01e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c028:	d107      	bne.n	800c03a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	681a      	ldr	r2, [r3, #0]
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c038:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	2b0f      	cmp	r3, #15
 800c040:	d970      	bls.n	800c124 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c042:	e068      	b.n	800c116 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	695b      	ldr	r3, [r3, #20]
 800c04a:	f003 0302 	and.w	r3, r3, #2
 800c04e:	2b02      	cmp	r3, #2
 800c050:	d11a      	bne.n	800c088 <HAL_SPI_TransmitReceive+0x18c>
 800c052:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c054:	2b00      	cmp	r3, #0
 800c056:	d017      	beq.n	800c088 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	6812      	ldr	r2, [r2, #0]
 800c062:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c068:	1d1a      	adds	r2, r3, #4
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c074:	b29b      	uxth	r3, r3
 800c076:	3b01      	subs	r3, #1
 800c078:	b29a      	uxth	r2, r3
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c086:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	695a      	ldr	r2, [r3, #20]
 800c08e:	f248 0308 	movw	r3, #32776	; 0x8008
 800c092:	4013      	ands	r3, r2
 800c094:	2b00      	cmp	r3, #0
 800c096:	d01a      	beq.n	800c0ce <HAL_SPI_TransmitReceive+0x1d2>
 800c098:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d017      	beq.n	800c0ce <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681a      	ldr	r2, [r3, #0]
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c0a8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0ae:	1d1a      	adds	r2, r3, #4
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c0ba:	b29b      	uxth	r3, r3
 800c0bc:	3b01      	subs	r3, #1
 800c0be:	b29a      	uxth	r2, r3
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c0cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0ce:	f7f6 fcb1 	bl	8002a34 <HAL_GetTick>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	69fb      	ldr	r3, [r7, #28]
 800c0d6:	1ad3      	subs	r3, r2, r3
 800c0d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d803      	bhi.n	800c0e6 <HAL_SPI_TransmitReceive+0x1ea>
 800c0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0e4:	d102      	bne.n	800c0ec <HAL_SPI_TransmitReceive+0x1f0>
 800c0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d114      	bne.n	800c116 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c0ec:	68f8      	ldr	r0, [r7, #12]
 800c0ee:	f000 f92d 	bl	800c34c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c100:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2201      	movs	r2, #1
 800c10e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c112:	2303      	movs	r3, #3
 800c114:	e115      	b.n	800c342 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c116:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d193      	bne.n	800c044 <HAL_SPI_TransmitReceive+0x148>
 800c11c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d190      	bne.n	800c044 <HAL_SPI_TransmitReceive+0x148>
 800c122:	e0e7      	b.n	800c2f4 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	68db      	ldr	r3, [r3, #12]
 800c128:	2b07      	cmp	r3, #7
 800c12a:	f240 80dd 	bls.w	800c2e8 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c12e:	e066      	b.n	800c1fe <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	695b      	ldr	r3, [r3, #20]
 800c136:	f003 0302 	and.w	r3, r3, #2
 800c13a:	2b02      	cmp	r3, #2
 800c13c:	d119      	bne.n	800c172 <HAL_SPI_TransmitReceive+0x276>
 800c13e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c140:	2b00      	cmp	r3, #0
 800c142:	d016      	beq.n	800c172 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c148:	881a      	ldrh	r2, [r3, #0]
 800c14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c152:	1c9a      	adds	r2, r3, #2
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c15e:	b29b      	uxth	r3, r3
 800c160:	3b01      	subs	r3, #1
 800c162:	b29a      	uxth	r2, r3
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c170:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	695b      	ldr	r3, [r3, #20]
 800c178:	f003 0301 	and.w	r3, r3, #1
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	d11a      	bne.n	800c1b6 <HAL_SPI_TransmitReceive+0x2ba>
 800c180:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c182:	2b00      	cmp	r3, #0
 800c184:	d017      	beq.n	800c1b6 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c18a:	6a3a      	ldr	r2, [r7, #32]
 800c18c:	8812      	ldrh	r2, [r2, #0]
 800c18e:	b292      	uxth	r2, r2
 800c190:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c196:	1c9a      	adds	r2, r3, #2
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	3b01      	subs	r3, #1
 800c1a6:	b29a      	uxth	r2, r3
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c1b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1b6:	f7f6 fc3d 	bl	8002a34 <HAL_GetTick>
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	69fb      	ldr	r3, [r7, #28]
 800c1be:	1ad3      	subs	r3, r2, r3
 800c1c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d803      	bhi.n	800c1ce <HAL_SPI_TransmitReceive+0x2d2>
 800c1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1cc:	d102      	bne.n	800c1d4 <HAL_SPI_TransmitReceive+0x2d8>
 800c1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d114      	bne.n	800c1fe <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c1d4:	68f8      	ldr	r0, [r7, #12]
 800c1d6:	f000 f8b9 	bl	800c34c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2201      	movs	r2, #1
 800c1f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c1fa:	2303      	movs	r3, #3
 800c1fc:	e0a1      	b.n	800c342 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c1fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c200:	2b00      	cmp	r3, #0
 800c202:	d195      	bne.n	800c130 <HAL_SPI_TransmitReceive+0x234>
 800c204:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c206:	2b00      	cmp	r3, #0
 800c208:	d192      	bne.n	800c130 <HAL_SPI_TransmitReceive+0x234>
 800c20a:	e073      	b.n	800c2f4 <HAL_SPI_TransmitReceive+0x3f8>
 800c20c:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	695b      	ldr	r3, [r3, #20]
 800c216:	f003 0302 	and.w	r3, r3, #2
 800c21a:	2b02      	cmp	r3, #2
 800c21c:	d11b      	bne.n	800c256 <HAL_SPI_TransmitReceive+0x35a>
 800c21e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c220:	2b00      	cmp	r3, #0
 800c222:	d018      	beq.n	800c256 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	3320      	adds	r3, #32
 800c22e:	7812      	ldrb	r2, [r2, #0]
 800c230:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c236:	1c5a      	adds	r2, r3, #1
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c242:	b29b      	uxth	r3, r3
 800c244:	3b01      	subs	r3, #1
 800c246:	b29a      	uxth	r2, r3
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c254:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	695b      	ldr	r3, [r3, #20]
 800c25c:	f003 0301 	and.w	r3, r3, #1
 800c260:	2b01      	cmp	r3, #1
 800c262:	d11d      	bne.n	800c2a0 <HAL_SPI_TransmitReceive+0x3a4>
 800c264:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c266:	2b00      	cmp	r3, #0
 800c268:	d01a      	beq.n	800c2a0 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c276:	7812      	ldrb	r2, [r2, #0]
 800c278:	b2d2      	uxtb	r2, r2
 800c27a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c280:	1c5a      	adds	r2, r3, #1
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c28c:	b29b      	uxth	r3, r3
 800c28e:	3b01      	subs	r3, #1
 800c290:	b29a      	uxth	r2, r3
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c29e:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2a0:	f7f6 fbc8 	bl	8002a34 <HAL_GetTick>
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	69fb      	ldr	r3, [r7, #28]
 800c2a8:	1ad3      	subs	r3, r2, r3
 800c2aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d803      	bhi.n	800c2b8 <HAL_SPI_TransmitReceive+0x3bc>
 800c2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2b6:	d102      	bne.n	800c2be <HAL_SPI_TransmitReceive+0x3c2>
 800c2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d114      	bne.n	800c2e8 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c2be:	68f8      	ldr	r0, [r7, #12]
 800c2c0:	f000 f844 	bl	800c34c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2201      	movs	r2, #1
 800c2e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c2e4:	2303      	movs	r3, #3
 800c2e6:	e02c      	b.n	800c342 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c2e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d190      	bne.n	800c210 <HAL_SPI_TransmitReceive+0x314>
 800c2ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d18d      	bne.n	800c210 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f6:	9300      	str	r3, [sp, #0]
 800c2f8:	69fb      	ldr	r3, [r7, #28]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	2108      	movs	r1, #8
 800c2fe:	68f8      	ldr	r0, [r7, #12]
 800c300:	f000 f8c4 	bl	800c48c <SPI_WaitOnFlagUntilTimeout>
 800c304:	4603      	mov	r3, r0
 800c306:	2b00      	cmp	r3, #0
 800c308:	d007      	beq.n	800c31a <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c310:	f043 0220 	orr.w	r2, r3, #32
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c31a:	68f8      	ldr	r0, [r7, #12]
 800c31c:	f000 f816 	bl	800c34c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2200      	movs	r2, #0
 800c324:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2201      	movs	r2, #1
 800c32c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c336:	2b00      	cmp	r3, #0
 800c338:	d001      	beq.n	800c33e <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800c33a:	2301      	movs	r3, #1
 800c33c:	e001      	b.n	800c342 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800c33e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c342:	4618      	mov	r0, r3
 800c344:	3730      	adds	r7, #48	; 0x30
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop

0800c34c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b085      	sub	sp, #20
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	695b      	ldr	r3, [r3, #20]
 800c35a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	699a      	ldr	r2, [r3, #24]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f042 0208 	orr.w	r2, r2, #8
 800c36a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	699a      	ldr	r2, [r3, #24]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f042 0210 	orr.w	r2, r2, #16
 800c37a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	681a      	ldr	r2, [r3, #0]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f022 0201 	bic.w	r2, r2, #1
 800c38a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	6919      	ldr	r1, [r3, #16]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	4b3c      	ldr	r3, [pc, #240]	; (800c488 <SPI_CloseTransfer+0x13c>)
 800c398:	400b      	ands	r3, r1
 800c39a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	689a      	ldr	r2, [r3, #8]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c3aa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	2b04      	cmp	r3, #4
 800c3b6:	d014      	beq.n	800c3e2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f003 0320 	and.w	r3, r3, #32
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d00f      	beq.n	800c3e2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	699a      	ldr	r2, [r3, #24]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f042 0220 	orr.w	r2, r2, #32
 800c3e0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c3e8:	b2db      	uxtb	r3, r3
 800c3ea:	2b03      	cmp	r3, #3
 800c3ec:	d014      	beq.n	800c418 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d00f      	beq.n	800c418 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3fe:	f043 0204 	orr.w	r2, r3, #4
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	699a      	ldr	r2, [r3, #24]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c416:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d00f      	beq.n	800c442 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c428:	f043 0201 	orr.w	r2, r3, #1
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	699a      	ldr	r2, [r3, #24]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c440:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d00f      	beq.n	800c46c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c452:	f043 0208 	orr.w	r2, r3, #8
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	699a      	ldr	r2, [r3, #24]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c46a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2200      	movs	r2, #0
 800c470:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2200      	movs	r2, #0
 800c478:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c47c:	bf00      	nop
 800c47e:	3714      	adds	r7, #20
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr
 800c488:	fffffc90 	.word	0xfffffc90

0800c48c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b084      	sub	sp, #16
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	603b      	str	r3, [r7, #0]
 800c498:	4613      	mov	r3, r2
 800c49a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c49c:	e010      	b.n	800c4c0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c49e:	f7f6 fac9 	bl	8002a34 <HAL_GetTick>
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	1ad3      	subs	r3, r2, r3
 800c4a8:	69ba      	ldr	r2, [r7, #24]
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d803      	bhi.n	800c4b6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c4ae:	69bb      	ldr	r3, [r7, #24]
 800c4b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4b4:	d102      	bne.n	800c4bc <SPI_WaitOnFlagUntilTimeout+0x30>
 800c4b6:	69bb      	ldr	r3, [r7, #24]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d101      	bne.n	800c4c0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c4bc:	2303      	movs	r3, #3
 800c4be:	e00f      	b.n	800c4e0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	695a      	ldr	r2, [r3, #20]
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	4013      	ands	r3, r2
 800c4ca:	68ba      	ldr	r2, [r7, #8]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	bf0c      	ite	eq
 800c4d0:	2301      	moveq	r3, #1
 800c4d2:	2300      	movne	r3, #0
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	79fb      	ldrb	r3, [r7, #7]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d0df      	beq.n	800c49e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c4de:	2300      	movs	r3, #0
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3710      	adds	r7, #16
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b085      	sub	sp, #20
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4f4:	095b      	lsrs	r3, r3, #5
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	68db      	ldr	r3, [r3, #12]
 800c4fe:	3301      	adds	r3, #1
 800c500:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	3307      	adds	r3, #7
 800c506:	08db      	lsrs	r3, r3, #3
 800c508:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	68fa      	ldr	r2, [r7, #12]
 800c50e:	fb02 f303 	mul.w	r3, r2, r3
}
 800c512:	4618      	mov	r0, r3
 800c514:	3714      	adds	r7, #20
 800c516:	46bd      	mov	sp, r7
 800c518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51c:	4770      	bx	lr
	...

0800c520 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b084      	sub	sp, #16
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c52a:	2300      	movs	r3, #0
 800c52c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d109      	bne.n	800c548 <HAL_TIM_OC_Start_IT+0x28>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	bf14      	ite	ne
 800c540:	2301      	movne	r3, #1
 800c542:	2300      	moveq	r3, #0
 800c544:	b2db      	uxtb	r3, r3
 800c546:	e03c      	b.n	800c5c2 <HAL_TIM_OC_Start_IT+0xa2>
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	2b04      	cmp	r3, #4
 800c54c:	d109      	bne.n	800c562 <HAL_TIM_OC_Start_IT+0x42>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c554:	b2db      	uxtb	r3, r3
 800c556:	2b01      	cmp	r3, #1
 800c558:	bf14      	ite	ne
 800c55a:	2301      	movne	r3, #1
 800c55c:	2300      	moveq	r3, #0
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	e02f      	b.n	800c5c2 <HAL_TIM_OC_Start_IT+0xa2>
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	2b08      	cmp	r3, #8
 800c566:	d109      	bne.n	800c57c <HAL_TIM_OC_Start_IT+0x5c>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	2b01      	cmp	r3, #1
 800c572:	bf14      	ite	ne
 800c574:	2301      	movne	r3, #1
 800c576:	2300      	moveq	r3, #0
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	e022      	b.n	800c5c2 <HAL_TIM_OC_Start_IT+0xa2>
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	2b0c      	cmp	r3, #12
 800c580:	d109      	bne.n	800c596 <HAL_TIM_OC_Start_IT+0x76>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	bf14      	ite	ne
 800c58e:	2301      	movne	r3, #1
 800c590:	2300      	moveq	r3, #0
 800c592:	b2db      	uxtb	r3, r3
 800c594:	e015      	b.n	800c5c2 <HAL_TIM_OC_Start_IT+0xa2>
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	2b10      	cmp	r3, #16
 800c59a:	d109      	bne.n	800c5b0 <HAL_TIM_OC_Start_IT+0x90>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	bf14      	ite	ne
 800c5a8:	2301      	movne	r3, #1
 800c5aa:	2300      	moveq	r3, #0
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	e008      	b.n	800c5c2 <HAL_TIM_OC_Start_IT+0xa2>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	bf14      	ite	ne
 800c5bc:	2301      	movne	r3, #1
 800c5be:	2300      	moveq	r3, #0
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d001      	beq.n	800c5ca <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	e0ec      	b.n	800c7a4 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d104      	bne.n	800c5da <HAL_TIM_OC_Start_IT+0xba>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2202      	movs	r2, #2
 800c5d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c5d8:	e023      	b.n	800c622 <HAL_TIM_OC_Start_IT+0x102>
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	2b04      	cmp	r3, #4
 800c5de:	d104      	bne.n	800c5ea <HAL_TIM_OC_Start_IT+0xca>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2202      	movs	r2, #2
 800c5e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c5e8:	e01b      	b.n	800c622 <HAL_TIM_OC_Start_IT+0x102>
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	2b08      	cmp	r3, #8
 800c5ee:	d104      	bne.n	800c5fa <HAL_TIM_OC_Start_IT+0xda>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2202      	movs	r2, #2
 800c5f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c5f8:	e013      	b.n	800c622 <HAL_TIM_OC_Start_IT+0x102>
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	2b0c      	cmp	r3, #12
 800c5fe:	d104      	bne.n	800c60a <HAL_TIM_OC_Start_IT+0xea>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2202      	movs	r2, #2
 800c604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c608:	e00b      	b.n	800c622 <HAL_TIM_OC_Start_IT+0x102>
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	2b10      	cmp	r3, #16
 800c60e:	d104      	bne.n	800c61a <HAL_TIM_OC_Start_IT+0xfa>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2202      	movs	r2, #2
 800c614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c618:	e003      	b.n	800c622 <HAL_TIM_OC_Start_IT+0x102>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2202      	movs	r2, #2
 800c61e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	2b0c      	cmp	r3, #12
 800c626:	d841      	bhi.n	800c6ac <HAL_TIM_OC_Start_IT+0x18c>
 800c628:	a201      	add	r2, pc, #4	; (adr r2, 800c630 <HAL_TIM_OC_Start_IT+0x110>)
 800c62a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c62e:	bf00      	nop
 800c630:	0800c665 	.word	0x0800c665
 800c634:	0800c6ad 	.word	0x0800c6ad
 800c638:	0800c6ad 	.word	0x0800c6ad
 800c63c:	0800c6ad 	.word	0x0800c6ad
 800c640:	0800c677 	.word	0x0800c677
 800c644:	0800c6ad 	.word	0x0800c6ad
 800c648:	0800c6ad 	.word	0x0800c6ad
 800c64c:	0800c6ad 	.word	0x0800c6ad
 800c650:	0800c689 	.word	0x0800c689
 800c654:	0800c6ad 	.word	0x0800c6ad
 800c658:	0800c6ad 	.word	0x0800c6ad
 800c65c:	0800c6ad 	.word	0x0800c6ad
 800c660:	0800c69b 	.word	0x0800c69b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	68da      	ldr	r2, [r3, #12]
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f042 0202 	orr.w	r2, r2, #2
 800c672:	60da      	str	r2, [r3, #12]
      break;
 800c674:	e01d      	b.n	800c6b2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	68da      	ldr	r2, [r3, #12]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f042 0204 	orr.w	r2, r2, #4
 800c684:	60da      	str	r2, [r3, #12]
      break;
 800c686:	e014      	b.n	800c6b2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	68da      	ldr	r2, [r3, #12]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f042 0208 	orr.w	r2, r2, #8
 800c696:	60da      	str	r2, [r3, #12]
      break;
 800c698:	e00b      	b.n	800c6b2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	68da      	ldr	r2, [r3, #12]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f042 0210 	orr.w	r2, r2, #16
 800c6a8:	60da      	str	r2, [r3, #12]
      break;
 800c6aa:	e002      	b.n	800c6b2 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	73fb      	strb	r3, [r7, #15]
      break;
 800c6b0:	bf00      	nop
  }

  if (status == HAL_OK)
 800c6b2:	7bfb      	ldrb	r3, [r7, #15]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d174      	bne.n	800c7a2 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	2201      	movs	r2, #1
 800c6be:	6839      	ldr	r1, [r7, #0]
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f000 fea9 	bl	800d418 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a38      	ldr	r2, [pc, #224]	; (800c7ac <HAL_TIM_OC_Start_IT+0x28c>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d013      	beq.n	800c6f8 <HAL_TIM_OC_Start_IT+0x1d8>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	4a36      	ldr	r2, [pc, #216]	; (800c7b0 <HAL_TIM_OC_Start_IT+0x290>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d00e      	beq.n	800c6f8 <HAL_TIM_OC_Start_IT+0x1d8>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4a35      	ldr	r2, [pc, #212]	; (800c7b4 <HAL_TIM_OC_Start_IT+0x294>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d009      	beq.n	800c6f8 <HAL_TIM_OC_Start_IT+0x1d8>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4a33      	ldr	r2, [pc, #204]	; (800c7b8 <HAL_TIM_OC_Start_IT+0x298>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d004      	beq.n	800c6f8 <HAL_TIM_OC_Start_IT+0x1d8>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	4a32      	ldr	r2, [pc, #200]	; (800c7bc <HAL_TIM_OC_Start_IT+0x29c>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d101      	bne.n	800c6fc <HAL_TIM_OC_Start_IT+0x1dc>
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	e000      	b.n	800c6fe <HAL_TIM_OC_Start_IT+0x1de>
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d007      	beq.n	800c712 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c710:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	4a25      	ldr	r2, [pc, #148]	; (800c7ac <HAL_TIM_OC_Start_IT+0x28c>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d022      	beq.n	800c762 <HAL_TIM_OC_Start_IT+0x242>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c724:	d01d      	beq.n	800c762 <HAL_TIM_OC_Start_IT+0x242>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4a25      	ldr	r2, [pc, #148]	; (800c7c0 <HAL_TIM_OC_Start_IT+0x2a0>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d018      	beq.n	800c762 <HAL_TIM_OC_Start_IT+0x242>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a23      	ldr	r2, [pc, #140]	; (800c7c4 <HAL_TIM_OC_Start_IT+0x2a4>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d013      	beq.n	800c762 <HAL_TIM_OC_Start_IT+0x242>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4a22      	ldr	r2, [pc, #136]	; (800c7c8 <HAL_TIM_OC_Start_IT+0x2a8>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d00e      	beq.n	800c762 <HAL_TIM_OC_Start_IT+0x242>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a19      	ldr	r2, [pc, #100]	; (800c7b0 <HAL_TIM_OC_Start_IT+0x290>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d009      	beq.n	800c762 <HAL_TIM_OC_Start_IT+0x242>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	4a1e      	ldr	r2, [pc, #120]	; (800c7cc <HAL_TIM_OC_Start_IT+0x2ac>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d004      	beq.n	800c762 <HAL_TIM_OC_Start_IT+0x242>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a15      	ldr	r2, [pc, #84]	; (800c7b4 <HAL_TIM_OC_Start_IT+0x294>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d115      	bne.n	800c78e <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	689a      	ldr	r2, [r3, #8]
 800c768:	4b19      	ldr	r3, [pc, #100]	; (800c7d0 <HAL_TIM_OC_Start_IT+0x2b0>)
 800c76a:	4013      	ands	r3, r2
 800c76c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	2b06      	cmp	r3, #6
 800c772:	d015      	beq.n	800c7a0 <HAL_TIM_OC_Start_IT+0x280>
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c77a:	d011      	beq.n	800c7a0 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f042 0201 	orr.w	r2, r2, #1
 800c78a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c78c:	e008      	b.n	800c7a0 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	681a      	ldr	r2, [r3, #0]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f042 0201 	orr.w	r2, r2, #1
 800c79c:	601a      	str	r2, [r3, #0]
 800c79e:	e000      	b.n	800c7a2 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7a0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c7a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3710      	adds	r7, #16
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}
 800c7ac:	40010000 	.word	0x40010000
 800c7b0:	40010400 	.word	0x40010400
 800c7b4:	40014000 	.word	0x40014000
 800c7b8:	40014400 	.word	0x40014400
 800c7bc:	40014800 	.word	0x40014800
 800c7c0:	40000400 	.word	0x40000400
 800c7c4:	40000800 	.word	0x40000800
 800c7c8:	40000c00 	.word	0x40000c00
 800c7cc:	40001800 	.word	0x40001800
 800c7d0:	00010007 	.word	0x00010007

0800c7d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b082      	sub	sp, #8
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d101      	bne.n	800c7e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e049      	b.n	800c87a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7ec:	b2db      	uxtb	r3, r3
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d106      	bne.n	800c800 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f7f5 fe02 	bl	8002404 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2202      	movs	r2, #2
 800c804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	3304      	adds	r3, #4
 800c810:	4619      	mov	r1, r3
 800c812:	4610      	mov	r0, r2
 800c814:	f000 fa90 	bl	800cd38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2201      	movs	r2, #1
 800c81c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2201      	movs	r2, #1
 800c824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2201      	movs	r2, #1
 800c82c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2201      	movs	r2, #1
 800c834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2201      	movs	r2, #1
 800c83c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2201      	movs	r2, #1
 800c844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2201      	movs	r2, #1
 800c84c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2201      	movs	r2, #1
 800c854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2201      	movs	r2, #1
 800c85c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2201      	movs	r2, #1
 800c864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2201      	movs	r2, #1
 800c86c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2201      	movs	r2, #1
 800c874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c878:	2300      	movs	r3, #0
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3708      	adds	r7, #8
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}

0800c882 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c882:	b580      	push	{r7, lr}
 800c884:	b082      	sub	sp, #8
 800c886:	af00      	add	r7, sp, #0
 800c888:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	691b      	ldr	r3, [r3, #16]
 800c890:	f003 0302 	and.w	r3, r3, #2
 800c894:	2b02      	cmp	r3, #2
 800c896:	d122      	bne.n	800c8de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	68db      	ldr	r3, [r3, #12]
 800c89e:	f003 0302 	and.w	r3, r3, #2
 800c8a2:	2b02      	cmp	r3, #2
 800c8a4:	d11b      	bne.n	800c8de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	f06f 0202 	mvn.w	r2, #2
 800c8ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	699b      	ldr	r3, [r3, #24]
 800c8bc:	f003 0303 	and.w	r3, r3, #3
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d003      	beq.n	800c8cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 fa19 	bl	800ccfc <HAL_TIM_IC_CaptureCallback>
 800c8ca:	e005      	b.n	800c8d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f7f4 f9f7 	bl	8000cc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 fa1c 	bl	800cd10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	691b      	ldr	r3, [r3, #16]
 800c8e4:	f003 0304 	and.w	r3, r3, #4
 800c8e8:	2b04      	cmp	r3, #4
 800c8ea:	d122      	bne.n	800c932 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	f003 0304 	and.w	r3, r3, #4
 800c8f6:	2b04      	cmp	r3, #4
 800c8f8:	d11b      	bne.n	800c932 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f06f 0204 	mvn.w	r2, #4
 800c902:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2202      	movs	r2, #2
 800c908:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	699b      	ldr	r3, [r3, #24]
 800c910:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c914:	2b00      	cmp	r3, #0
 800c916:	d003      	beq.n	800c920 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f000 f9ef 	bl	800ccfc <HAL_TIM_IC_CaptureCallback>
 800c91e:	e005      	b.n	800c92c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f7f4 f9cd 	bl	8000cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 f9f2 	bl	800cd10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2200      	movs	r2, #0
 800c930:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	691b      	ldr	r3, [r3, #16]
 800c938:	f003 0308 	and.w	r3, r3, #8
 800c93c:	2b08      	cmp	r3, #8
 800c93e:	d122      	bne.n	800c986 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	68db      	ldr	r3, [r3, #12]
 800c946:	f003 0308 	and.w	r3, r3, #8
 800c94a:	2b08      	cmp	r3, #8
 800c94c:	d11b      	bne.n	800c986 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f06f 0208 	mvn.w	r2, #8
 800c956:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2204      	movs	r2, #4
 800c95c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	69db      	ldr	r3, [r3, #28]
 800c964:	f003 0303 	and.w	r3, r3, #3
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d003      	beq.n	800c974 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f000 f9c5 	bl	800ccfc <HAL_TIM_IC_CaptureCallback>
 800c972:	e005      	b.n	800c980 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f7f4 f9a3 	bl	8000cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f000 f9c8 	bl	800cd10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2200      	movs	r2, #0
 800c984:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	691b      	ldr	r3, [r3, #16]
 800c98c:	f003 0310 	and.w	r3, r3, #16
 800c990:	2b10      	cmp	r3, #16
 800c992:	d122      	bne.n	800c9da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	f003 0310 	and.w	r3, r3, #16
 800c99e:	2b10      	cmp	r3, #16
 800c9a0:	d11b      	bne.n	800c9da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f06f 0210 	mvn.w	r2, #16
 800c9aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2208      	movs	r2, #8
 800c9b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	69db      	ldr	r3, [r3, #28]
 800c9b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d003      	beq.n	800c9c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 f99b 	bl	800ccfc <HAL_TIM_IC_CaptureCallback>
 800c9c6:	e005      	b.n	800c9d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f7f4 f979 	bl	8000cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 f99e 	bl	800cd10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	691b      	ldr	r3, [r3, #16]
 800c9e0:	f003 0301 	and.w	r3, r3, #1
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d10e      	bne.n	800ca06 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	68db      	ldr	r3, [r3, #12]
 800c9ee:	f003 0301 	and.w	r3, r3, #1
 800c9f2:	2b01      	cmp	r3, #1
 800c9f4:	d107      	bne.n	800ca06 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f06f 0201 	mvn.w	r2, #1
 800c9fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f000 f971 	bl	800cce8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	691b      	ldr	r3, [r3, #16]
 800ca0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca10:	2b80      	cmp	r3, #128	; 0x80
 800ca12:	d10e      	bne.n	800ca32 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	68db      	ldr	r3, [r3, #12]
 800ca1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca1e:	2b80      	cmp	r3, #128	; 0x80
 800ca20:	d107      	bne.n	800ca32 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ca2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f000 fe2f 	bl	800d690 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	691b      	ldr	r3, [r3, #16]
 800ca38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca40:	d10e      	bne.n	800ca60 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	68db      	ldr	r3, [r3, #12]
 800ca48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca4c:	2b80      	cmp	r3, #128	; 0x80
 800ca4e:	d107      	bne.n	800ca60 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ca58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f000 fe22 	bl	800d6a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	691b      	ldr	r3, [r3, #16]
 800ca66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca6a:	2b40      	cmp	r3, #64	; 0x40
 800ca6c:	d10e      	bne.n	800ca8c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	68db      	ldr	r3, [r3, #12]
 800ca74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca78:	2b40      	cmp	r3, #64	; 0x40
 800ca7a:	d107      	bne.n	800ca8c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ca84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f000 f94c 	bl	800cd24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	691b      	ldr	r3, [r3, #16]
 800ca92:	f003 0320 	and.w	r3, r3, #32
 800ca96:	2b20      	cmp	r3, #32
 800ca98:	d10e      	bne.n	800cab8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	f003 0320 	and.w	r3, r3, #32
 800caa4:	2b20      	cmp	r3, #32
 800caa6:	d107      	bne.n	800cab8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f06f 0220 	mvn.w	r2, #32
 800cab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 fde2 	bl	800d67c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cab8:	bf00      	nop
 800caba:	3708      	adds	r7, #8
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b086      	sub	sp, #24
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	60f8      	str	r0, [r7, #12]
 800cac8:	60b9      	str	r1, [r7, #8]
 800caca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cacc:	2300      	movs	r3, #0
 800cace:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cad6:	2b01      	cmp	r3, #1
 800cad8:	d101      	bne.n	800cade <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cada:	2302      	movs	r3, #2
 800cadc:	e0ff      	b.n	800ccde <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2201      	movs	r2, #1
 800cae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2b14      	cmp	r3, #20
 800caea:	f200 80f0 	bhi.w	800ccce <HAL_TIM_PWM_ConfigChannel+0x20e>
 800caee:	a201      	add	r2, pc, #4	; (adr r2, 800caf4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800caf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caf4:	0800cb49 	.word	0x0800cb49
 800caf8:	0800cccf 	.word	0x0800cccf
 800cafc:	0800cccf 	.word	0x0800cccf
 800cb00:	0800cccf 	.word	0x0800cccf
 800cb04:	0800cb89 	.word	0x0800cb89
 800cb08:	0800cccf 	.word	0x0800cccf
 800cb0c:	0800cccf 	.word	0x0800cccf
 800cb10:	0800cccf 	.word	0x0800cccf
 800cb14:	0800cbcb 	.word	0x0800cbcb
 800cb18:	0800cccf 	.word	0x0800cccf
 800cb1c:	0800cccf 	.word	0x0800cccf
 800cb20:	0800cccf 	.word	0x0800cccf
 800cb24:	0800cc0b 	.word	0x0800cc0b
 800cb28:	0800cccf 	.word	0x0800cccf
 800cb2c:	0800cccf 	.word	0x0800cccf
 800cb30:	0800cccf 	.word	0x0800cccf
 800cb34:	0800cc4d 	.word	0x0800cc4d
 800cb38:	0800cccf 	.word	0x0800cccf
 800cb3c:	0800cccf 	.word	0x0800cccf
 800cb40:	0800cccf 	.word	0x0800cccf
 800cb44:	0800cc8d 	.word	0x0800cc8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	68b9      	ldr	r1, [r7, #8]
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f000 f98c 	bl	800ce6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	699a      	ldr	r2, [r3, #24]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f042 0208 	orr.w	r2, r2, #8
 800cb62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	699a      	ldr	r2, [r3, #24]
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f022 0204 	bic.w	r2, r2, #4
 800cb72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	6999      	ldr	r1, [r3, #24]
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	691a      	ldr	r2, [r3, #16]
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	430a      	orrs	r2, r1
 800cb84:	619a      	str	r2, [r3, #24]
      break;
 800cb86:	e0a5      	b.n	800ccd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	68b9      	ldr	r1, [r7, #8]
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f000 f9fc 	bl	800cf8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	699a      	ldr	r2, [r3, #24]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	699a      	ldr	r2, [r3, #24]
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cbb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	6999      	ldr	r1, [r3, #24]
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	691b      	ldr	r3, [r3, #16]
 800cbbe:	021a      	lsls	r2, r3, #8
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	430a      	orrs	r2, r1
 800cbc6:	619a      	str	r2, [r3, #24]
      break;
 800cbc8:	e084      	b.n	800ccd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	68b9      	ldr	r1, [r7, #8]
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f000 fa65 	bl	800d0a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	69da      	ldr	r2, [r3, #28]
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f042 0208 	orr.w	r2, r2, #8
 800cbe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	69da      	ldr	r2, [r3, #28]
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f022 0204 	bic.w	r2, r2, #4
 800cbf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	69d9      	ldr	r1, [r3, #28]
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	691a      	ldr	r2, [r3, #16]
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	430a      	orrs	r2, r1
 800cc06:	61da      	str	r2, [r3, #28]
      break;
 800cc08:	e064      	b.n	800ccd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	68b9      	ldr	r1, [r7, #8]
 800cc10:	4618      	mov	r0, r3
 800cc12:	f000 facd 	bl	800d1b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	69da      	ldr	r2, [r3, #28]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	69da      	ldr	r2, [r3, #28]
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	69d9      	ldr	r1, [r3, #28]
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	691b      	ldr	r3, [r3, #16]
 800cc40:	021a      	lsls	r2, r3, #8
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	430a      	orrs	r2, r1
 800cc48:	61da      	str	r2, [r3, #28]
      break;
 800cc4a:	e043      	b.n	800ccd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	68b9      	ldr	r1, [r7, #8]
 800cc52:	4618      	mov	r0, r3
 800cc54:	f000 fb16 	bl	800d284 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f042 0208 	orr.w	r2, r2, #8
 800cc66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	f022 0204 	bic.w	r2, r2, #4
 800cc76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	691a      	ldr	r2, [r3, #16]
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	430a      	orrs	r2, r1
 800cc88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cc8a:	e023      	b.n	800ccd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	68b9      	ldr	r1, [r7, #8]
 800cc92:	4618      	mov	r0, r3
 800cc94:	f000 fb5a 	bl	800d34c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cca6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ccb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	691b      	ldr	r3, [r3, #16]
 800ccc2:	021a      	lsls	r2, r3, #8
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	430a      	orrs	r2, r1
 800ccca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cccc:	e002      	b.n	800ccd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ccce:	2301      	movs	r3, #1
 800ccd0:	75fb      	strb	r3, [r7, #23]
      break;
 800ccd2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ccdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3718      	adds	r7, #24
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
 800cce6:	bf00      	nop

0800cce8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b083      	sub	sp, #12
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ccf0:	bf00      	nop
 800ccf2:	370c      	adds	r7, #12
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr

0800ccfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b083      	sub	sp, #12
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cd04:	bf00      	nop
 800cd06:	370c      	adds	r7, #12
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr

0800cd10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b083      	sub	sp, #12
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cd18:	bf00      	nop
 800cd1a:	370c      	adds	r7, #12
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr

0800cd24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b083      	sub	sp, #12
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cd2c:	bf00      	nop
 800cd2e:	370c      	adds	r7, #12
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr

0800cd38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b085      	sub	sp, #20
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	4a40      	ldr	r2, [pc, #256]	; (800ce4c <TIM_Base_SetConfig+0x114>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d013      	beq.n	800cd78 <TIM_Base_SetConfig+0x40>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd56:	d00f      	beq.n	800cd78 <TIM_Base_SetConfig+0x40>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	4a3d      	ldr	r2, [pc, #244]	; (800ce50 <TIM_Base_SetConfig+0x118>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d00b      	beq.n	800cd78 <TIM_Base_SetConfig+0x40>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	4a3c      	ldr	r2, [pc, #240]	; (800ce54 <TIM_Base_SetConfig+0x11c>)
 800cd64:	4293      	cmp	r3, r2
 800cd66:	d007      	beq.n	800cd78 <TIM_Base_SetConfig+0x40>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	4a3b      	ldr	r2, [pc, #236]	; (800ce58 <TIM_Base_SetConfig+0x120>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d003      	beq.n	800cd78 <TIM_Base_SetConfig+0x40>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	4a3a      	ldr	r2, [pc, #232]	; (800ce5c <TIM_Base_SetConfig+0x124>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d108      	bne.n	800cd8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	68fa      	ldr	r2, [r7, #12]
 800cd86:	4313      	orrs	r3, r2
 800cd88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	4a2f      	ldr	r2, [pc, #188]	; (800ce4c <TIM_Base_SetConfig+0x114>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d01f      	beq.n	800cdd2 <TIM_Base_SetConfig+0x9a>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd98:	d01b      	beq.n	800cdd2 <TIM_Base_SetConfig+0x9a>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	4a2c      	ldr	r2, [pc, #176]	; (800ce50 <TIM_Base_SetConfig+0x118>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d017      	beq.n	800cdd2 <TIM_Base_SetConfig+0x9a>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	4a2b      	ldr	r2, [pc, #172]	; (800ce54 <TIM_Base_SetConfig+0x11c>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d013      	beq.n	800cdd2 <TIM_Base_SetConfig+0x9a>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	4a2a      	ldr	r2, [pc, #168]	; (800ce58 <TIM_Base_SetConfig+0x120>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d00f      	beq.n	800cdd2 <TIM_Base_SetConfig+0x9a>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	4a29      	ldr	r2, [pc, #164]	; (800ce5c <TIM_Base_SetConfig+0x124>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d00b      	beq.n	800cdd2 <TIM_Base_SetConfig+0x9a>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	4a28      	ldr	r2, [pc, #160]	; (800ce60 <TIM_Base_SetConfig+0x128>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d007      	beq.n	800cdd2 <TIM_Base_SetConfig+0x9a>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	4a27      	ldr	r2, [pc, #156]	; (800ce64 <TIM_Base_SetConfig+0x12c>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d003      	beq.n	800cdd2 <TIM_Base_SetConfig+0x9a>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	4a26      	ldr	r2, [pc, #152]	; (800ce68 <TIM_Base_SetConfig+0x130>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d108      	bne.n	800cde4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cdd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	68db      	ldr	r3, [r3, #12]
 800cdde:	68fa      	ldr	r2, [r7, #12]
 800cde0:	4313      	orrs	r3, r2
 800cde2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	695b      	ldr	r3, [r3, #20]
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	68fa      	ldr	r2, [r7, #12]
 800cdf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	689a      	ldr	r2, [r3, #8]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	681a      	ldr	r2, [r3, #0]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	4a10      	ldr	r2, [pc, #64]	; (800ce4c <TIM_Base_SetConfig+0x114>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d00f      	beq.n	800ce30 <TIM_Base_SetConfig+0xf8>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	4a12      	ldr	r2, [pc, #72]	; (800ce5c <TIM_Base_SetConfig+0x124>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d00b      	beq.n	800ce30 <TIM_Base_SetConfig+0xf8>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	4a11      	ldr	r2, [pc, #68]	; (800ce60 <TIM_Base_SetConfig+0x128>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d007      	beq.n	800ce30 <TIM_Base_SetConfig+0xf8>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	4a10      	ldr	r2, [pc, #64]	; (800ce64 <TIM_Base_SetConfig+0x12c>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d003      	beq.n	800ce30 <TIM_Base_SetConfig+0xf8>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	4a0f      	ldr	r2, [pc, #60]	; (800ce68 <TIM_Base_SetConfig+0x130>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d103      	bne.n	800ce38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	691a      	ldr	r2, [r3, #16]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	615a      	str	r2, [r3, #20]
}
 800ce3e:	bf00      	nop
 800ce40:	3714      	adds	r7, #20
 800ce42:	46bd      	mov	sp, r7
 800ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce48:	4770      	bx	lr
 800ce4a:	bf00      	nop
 800ce4c:	40010000 	.word	0x40010000
 800ce50:	40000400 	.word	0x40000400
 800ce54:	40000800 	.word	0x40000800
 800ce58:	40000c00 	.word	0x40000c00
 800ce5c:	40010400 	.word	0x40010400
 800ce60:	40014000 	.word	0x40014000
 800ce64:	40014400 	.word	0x40014400
 800ce68:	40014800 	.word	0x40014800

0800ce6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b087      	sub	sp, #28
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6a1b      	ldr	r3, [r3, #32]
 800ce7a:	f023 0201 	bic.w	r2, r3, #1
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6a1b      	ldr	r3, [r3, #32]
 800ce86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	699b      	ldr	r3, [r3, #24]
 800ce92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ce94:	68fa      	ldr	r2, [r7, #12]
 800ce96:	4b37      	ldr	r3, [pc, #220]	; (800cf74 <TIM_OC1_SetConfig+0x108>)
 800ce98:	4013      	ands	r3, r2
 800ce9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	f023 0303 	bic.w	r3, r3, #3
 800cea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	68fa      	ldr	r2, [r7, #12]
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	f023 0302 	bic.w	r3, r3, #2
 800ceb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	689b      	ldr	r3, [r3, #8]
 800ceba:	697a      	ldr	r2, [r7, #20]
 800cebc:	4313      	orrs	r3, r2
 800cebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	4a2d      	ldr	r2, [pc, #180]	; (800cf78 <TIM_OC1_SetConfig+0x10c>)
 800cec4:	4293      	cmp	r3, r2
 800cec6:	d00f      	beq.n	800cee8 <TIM_OC1_SetConfig+0x7c>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	4a2c      	ldr	r2, [pc, #176]	; (800cf7c <TIM_OC1_SetConfig+0x110>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d00b      	beq.n	800cee8 <TIM_OC1_SetConfig+0x7c>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	4a2b      	ldr	r2, [pc, #172]	; (800cf80 <TIM_OC1_SetConfig+0x114>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d007      	beq.n	800cee8 <TIM_OC1_SetConfig+0x7c>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	4a2a      	ldr	r2, [pc, #168]	; (800cf84 <TIM_OC1_SetConfig+0x118>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d003      	beq.n	800cee8 <TIM_OC1_SetConfig+0x7c>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	4a29      	ldr	r2, [pc, #164]	; (800cf88 <TIM_OC1_SetConfig+0x11c>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d10c      	bne.n	800cf02 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	f023 0308 	bic.w	r3, r3, #8
 800ceee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	68db      	ldr	r3, [r3, #12]
 800cef4:	697a      	ldr	r2, [r7, #20]
 800cef6:	4313      	orrs	r3, r2
 800cef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	f023 0304 	bic.w	r3, r3, #4
 800cf00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	4a1c      	ldr	r2, [pc, #112]	; (800cf78 <TIM_OC1_SetConfig+0x10c>)
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d00f      	beq.n	800cf2a <TIM_OC1_SetConfig+0xbe>
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	4a1b      	ldr	r2, [pc, #108]	; (800cf7c <TIM_OC1_SetConfig+0x110>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d00b      	beq.n	800cf2a <TIM_OC1_SetConfig+0xbe>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	4a1a      	ldr	r2, [pc, #104]	; (800cf80 <TIM_OC1_SetConfig+0x114>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d007      	beq.n	800cf2a <TIM_OC1_SetConfig+0xbe>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	4a19      	ldr	r2, [pc, #100]	; (800cf84 <TIM_OC1_SetConfig+0x118>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d003      	beq.n	800cf2a <TIM_OC1_SetConfig+0xbe>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	4a18      	ldr	r2, [pc, #96]	; (800cf88 <TIM_OC1_SetConfig+0x11c>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d111      	bne.n	800cf4e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cf38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	695b      	ldr	r3, [r3, #20]
 800cf3e:	693a      	ldr	r2, [r7, #16]
 800cf40:	4313      	orrs	r3, r2
 800cf42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	699b      	ldr	r3, [r3, #24]
 800cf48:	693a      	ldr	r2, [r7, #16]
 800cf4a:	4313      	orrs	r3, r2
 800cf4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	693a      	ldr	r2, [r7, #16]
 800cf52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	68fa      	ldr	r2, [r7, #12]
 800cf58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	685a      	ldr	r2, [r3, #4]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	697a      	ldr	r2, [r7, #20]
 800cf66:	621a      	str	r2, [r3, #32]
}
 800cf68:	bf00      	nop
 800cf6a:	371c      	adds	r7, #28
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr
 800cf74:	fffeff8f 	.word	0xfffeff8f
 800cf78:	40010000 	.word	0x40010000
 800cf7c:	40010400 	.word	0x40010400
 800cf80:	40014000 	.word	0x40014000
 800cf84:	40014400 	.word	0x40014400
 800cf88:	40014800 	.word	0x40014800

0800cf8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b087      	sub	sp, #28
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6a1b      	ldr	r3, [r3, #32]
 800cf9a:	f023 0210 	bic.w	r2, r3, #16
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6a1b      	ldr	r3, [r3, #32]
 800cfa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	685b      	ldr	r3, [r3, #4]
 800cfac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	699b      	ldr	r3, [r3, #24]
 800cfb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cfb4:	68fa      	ldr	r2, [r7, #12]
 800cfb6:	4b34      	ldr	r3, [pc, #208]	; (800d088 <TIM_OC2_SetConfig+0xfc>)
 800cfb8:	4013      	ands	r3, r2
 800cfba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cfc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	021b      	lsls	r3, r3, #8
 800cfca:	68fa      	ldr	r2, [r7, #12]
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	f023 0320 	bic.w	r3, r3, #32
 800cfd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	011b      	lsls	r3, r3, #4
 800cfde:	697a      	ldr	r2, [r7, #20]
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	4a29      	ldr	r2, [pc, #164]	; (800d08c <TIM_OC2_SetConfig+0x100>)
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d003      	beq.n	800cff4 <TIM_OC2_SetConfig+0x68>
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	4a28      	ldr	r2, [pc, #160]	; (800d090 <TIM_OC2_SetConfig+0x104>)
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d10d      	bne.n	800d010 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	68db      	ldr	r3, [r3, #12]
 800d000:	011b      	lsls	r3, r3, #4
 800d002:	697a      	ldr	r2, [r7, #20]
 800d004:	4313      	orrs	r3, r2
 800d006:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d00e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	4a1e      	ldr	r2, [pc, #120]	; (800d08c <TIM_OC2_SetConfig+0x100>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d00f      	beq.n	800d038 <TIM_OC2_SetConfig+0xac>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	4a1d      	ldr	r2, [pc, #116]	; (800d090 <TIM_OC2_SetConfig+0x104>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d00b      	beq.n	800d038 <TIM_OC2_SetConfig+0xac>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	4a1c      	ldr	r2, [pc, #112]	; (800d094 <TIM_OC2_SetConfig+0x108>)
 800d024:	4293      	cmp	r3, r2
 800d026:	d007      	beq.n	800d038 <TIM_OC2_SetConfig+0xac>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	4a1b      	ldr	r2, [pc, #108]	; (800d098 <TIM_OC2_SetConfig+0x10c>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d003      	beq.n	800d038 <TIM_OC2_SetConfig+0xac>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	4a1a      	ldr	r2, [pc, #104]	; (800d09c <TIM_OC2_SetConfig+0x110>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d113      	bne.n	800d060 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d038:	693b      	ldr	r3, [r7, #16]
 800d03a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d03e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d046:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	695b      	ldr	r3, [r3, #20]
 800d04c:	009b      	lsls	r3, r3, #2
 800d04e:	693a      	ldr	r2, [r7, #16]
 800d050:	4313      	orrs	r3, r2
 800d052:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	699b      	ldr	r3, [r3, #24]
 800d058:	009b      	lsls	r3, r3, #2
 800d05a:	693a      	ldr	r2, [r7, #16]
 800d05c:	4313      	orrs	r3, r2
 800d05e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	693a      	ldr	r2, [r7, #16]
 800d064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	68fa      	ldr	r2, [r7, #12]
 800d06a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	685a      	ldr	r2, [r3, #4]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	697a      	ldr	r2, [r7, #20]
 800d078:	621a      	str	r2, [r3, #32]
}
 800d07a:	bf00      	nop
 800d07c:	371c      	adds	r7, #28
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr
 800d086:	bf00      	nop
 800d088:	feff8fff 	.word	0xfeff8fff
 800d08c:	40010000 	.word	0x40010000
 800d090:	40010400 	.word	0x40010400
 800d094:	40014000 	.word	0x40014000
 800d098:	40014400 	.word	0x40014400
 800d09c:	40014800 	.word	0x40014800

0800d0a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b087      	sub	sp, #28
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6a1b      	ldr	r3, [r3, #32]
 800d0ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6a1b      	ldr	r3, [r3, #32]
 800d0ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	69db      	ldr	r3, [r3, #28]
 800d0c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d0c8:	68fa      	ldr	r2, [r7, #12]
 800d0ca:	4b33      	ldr	r3, [pc, #204]	; (800d198 <TIM_OC3_SetConfig+0xf8>)
 800d0cc:	4013      	ands	r3, r2
 800d0ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	f023 0303 	bic.w	r3, r3, #3
 800d0d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	68fa      	ldr	r2, [r7, #12]
 800d0de:	4313      	orrs	r3, r2
 800d0e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d0e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	689b      	ldr	r3, [r3, #8]
 800d0ee:	021b      	lsls	r3, r3, #8
 800d0f0:	697a      	ldr	r2, [r7, #20]
 800d0f2:	4313      	orrs	r3, r2
 800d0f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	4a28      	ldr	r2, [pc, #160]	; (800d19c <TIM_OC3_SetConfig+0xfc>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d003      	beq.n	800d106 <TIM_OC3_SetConfig+0x66>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	4a27      	ldr	r2, [pc, #156]	; (800d1a0 <TIM_OC3_SetConfig+0x100>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d10d      	bne.n	800d122 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d10c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	68db      	ldr	r3, [r3, #12]
 800d112:	021b      	lsls	r3, r3, #8
 800d114:	697a      	ldr	r2, [r7, #20]
 800d116:	4313      	orrs	r3, r2
 800d118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	4a1d      	ldr	r2, [pc, #116]	; (800d19c <TIM_OC3_SetConfig+0xfc>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d00f      	beq.n	800d14a <TIM_OC3_SetConfig+0xaa>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	4a1c      	ldr	r2, [pc, #112]	; (800d1a0 <TIM_OC3_SetConfig+0x100>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d00b      	beq.n	800d14a <TIM_OC3_SetConfig+0xaa>
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	4a1b      	ldr	r2, [pc, #108]	; (800d1a4 <TIM_OC3_SetConfig+0x104>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d007      	beq.n	800d14a <TIM_OC3_SetConfig+0xaa>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	4a1a      	ldr	r2, [pc, #104]	; (800d1a8 <TIM_OC3_SetConfig+0x108>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d003      	beq.n	800d14a <TIM_OC3_SetConfig+0xaa>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	4a19      	ldr	r2, [pc, #100]	; (800d1ac <TIM_OC3_SetConfig+0x10c>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d113      	bne.n	800d172 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d14a:	693b      	ldr	r3, [r7, #16]
 800d14c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d150:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d158:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	695b      	ldr	r3, [r3, #20]
 800d15e:	011b      	lsls	r3, r3, #4
 800d160:	693a      	ldr	r2, [r7, #16]
 800d162:	4313      	orrs	r3, r2
 800d164:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	699b      	ldr	r3, [r3, #24]
 800d16a:	011b      	lsls	r3, r3, #4
 800d16c:	693a      	ldr	r2, [r7, #16]
 800d16e:	4313      	orrs	r3, r2
 800d170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	693a      	ldr	r2, [r7, #16]
 800d176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	68fa      	ldr	r2, [r7, #12]
 800d17c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	685a      	ldr	r2, [r3, #4]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	697a      	ldr	r2, [r7, #20]
 800d18a:	621a      	str	r2, [r3, #32]
}
 800d18c:	bf00      	nop
 800d18e:	371c      	adds	r7, #28
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr
 800d198:	fffeff8f 	.word	0xfffeff8f
 800d19c:	40010000 	.word	0x40010000
 800d1a0:	40010400 	.word	0x40010400
 800d1a4:	40014000 	.word	0x40014000
 800d1a8:	40014400 	.word	0x40014400
 800d1ac:	40014800 	.word	0x40014800

0800d1b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b087      	sub	sp, #28
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6a1b      	ldr	r3, [r3, #32]
 800d1be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6a1b      	ldr	r3, [r3, #32]
 800d1ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	69db      	ldr	r3, [r3, #28]
 800d1d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d1d8:	68fa      	ldr	r2, [r7, #12]
 800d1da:	4b24      	ldr	r3, [pc, #144]	; (800d26c <TIM_OC4_SetConfig+0xbc>)
 800d1dc:	4013      	ands	r3, r2
 800d1de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d1e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	021b      	lsls	r3, r3, #8
 800d1ee:	68fa      	ldr	r2, [r7, #12]
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d1fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	689b      	ldr	r3, [r3, #8]
 800d200:	031b      	lsls	r3, r3, #12
 800d202:	693a      	ldr	r2, [r7, #16]
 800d204:	4313      	orrs	r3, r2
 800d206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	4a19      	ldr	r2, [pc, #100]	; (800d270 <TIM_OC4_SetConfig+0xc0>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d00f      	beq.n	800d230 <TIM_OC4_SetConfig+0x80>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	4a18      	ldr	r2, [pc, #96]	; (800d274 <TIM_OC4_SetConfig+0xc4>)
 800d214:	4293      	cmp	r3, r2
 800d216:	d00b      	beq.n	800d230 <TIM_OC4_SetConfig+0x80>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	4a17      	ldr	r2, [pc, #92]	; (800d278 <TIM_OC4_SetConfig+0xc8>)
 800d21c:	4293      	cmp	r3, r2
 800d21e:	d007      	beq.n	800d230 <TIM_OC4_SetConfig+0x80>
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	4a16      	ldr	r2, [pc, #88]	; (800d27c <TIM_OC4_SetConfig+0xcc>)
 800d224:	4293      	cmp	r3, r2
 800d226:	d003      	beq.n	800d230 <TIM_OC4_SetConfig+0x80>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	4a15      	ldr	r2, [pc, #84]	; (800d280 <TIM_OC4_SetConfig+0xd0>)
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d109      	bne.n	800d244 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d236:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	695b      	ldr	r3, [r3, #20]
 800d23c:	019b      	lsls	r3, r3, #6
 800d23e:	697a      	ldr	r2, [r7, #20]
 800d240:	4313      	orrs	r3, r2
 800d242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	697a      	ldr	r2, [r7, #20]
 800d248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	68fa      	ldr	r2, [r7, #12]
 800d24e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	685a      	ldr	r2, [r3, #4]
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	693a      	ldr	r2, [r7, #16]
 800d25c:	621a      	str	r2, [r3, #32]
}
 800d25e:	bf00      	nop
 800d260:	371c      	adds	r7, #28
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr
 800d26a:	bf00      	nop
 800d26c:	feff8fff 	.word	0xfeff8fff
 800d270:	40010000 	.word	0x40010000
 800d274:	40010400 	.word	0x40010400
 800d278:	40014000 	.word	0x40014000
 800d27c:	40014400 	.word	0x40014400
 800d280:	40014800 	.word	0x40014800

0800d284 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d284:	b480      	push	{r7}
 800d286:	b087      	sub	sp, #28
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6a1b      	ldr	r3, [r3, #32]
 800d292:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6a1b      	ldr	r3, [r3, #32]
 800d29e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d2ac:	68fa      	ldr	r2, [r7, #12]
 800d2ae:	4b21      	ldr	r3, [pc, #132]	; (800d334 <TIM_OC5_SetConfig+0xb0>)
 800d2b0:	4013      	ands	r3, r2
 800d2b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	68fa      	ldr	r2, [r7, #12]
 800d2ba:	4313      	orrs	r3, r2
 800d2bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d2c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	689b      	ldr	r3, [r3, #8]
 800d2ca:	041b      	lsls	r3, r3, #16
 800d2cc:	693a      	ldr	r2, [r7, #16]
 800d2ce:	4313      	orrs	r3, r2
 800d2d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	4a18      	ldr	r2, [pc, #96]	; (800d338 <TIM_OC5_SetConfig+0xb4>)
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d00f      	beq.n	800d2fa <TIM_OC5_SetConfig+0x76>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	4a17      	ldr	r2, [pc, #92]	; (800d33c <TIM_OC5_SetConfig+0xb8>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d00b      	beq.n	800d2fa <TIM_OC5_SetConfig+0x76>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	4a16      	ldr	r2, [pc, #88]	; (800d340 <TIM_OC5_SetConfig+0xbc>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d007      	beq.n	800d2fa <TIM_OC5_SetConfig+0x76>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	4a15      	ldr	r2, [pc, #84]	; (800d344 <TIM_OC5_SetConfig+0xc0>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d003      	beq.n	800d2fa <TIM_OC5_SetConfig+0x76>
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	4a14      	ldr	r2, [pc, #80]	; (800d348 <TIM_OC5_SetConfig+0xc4>)
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	d109      	bne.n	800d30e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d300:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	695b      	ldr	r3, [r3, #20]
 800d306:	021b      	lsls	r3, r3, #8
 800d308:	697a      	ldr	r2, [r7, #20]
 800d30a:	4313      	orrs	r3, r2
 800d30c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	697a      	ldr	r2, [r7, #20]
 800d312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	68fa      	ldr	r2, [r7, #12]
 800d318:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	685a      	ldr	r2, [r3, #4]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	693a      	ldr	r2, [r7, #16]
 800d326:	621a      	str	r2, [r3, #32]
}
 800d328:	bf00      	nop
 800d32a:	371c      	adds	r7, #28
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr
 800d334:	fffeff8f 	.word	0xfffeff8f
 800d338:	40010000 	.word	0x40010000
 800d33c:	40010400 	.word	0x40010400
 800d340:	40014000 	.word	0x40014000
 800d344:	40014400 	.word	0x40014400
 800d348:	40014800 	.word	0x40014800

0800d34c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d34c:	b480      	push	{r7}
 800d34e:	b087      	sub	sp, #28
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6a1b      	ldr	r3, [r3, #32]
 800d35a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6a1b      	ldr	r3, [r3, #32]
 800d366:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d374:	68fa      	ldr	r2, [r7, #12]
 800d376:	4b22      	ldr	r3, [pc, #136]	; (800d400 <TIM_OC6_SetConfig+0xb4>)
 800d378:	4013      	ands	r3, r2
 800d37a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	021b      	lsls	r3, r3, #8
 800d382:	68fa      	ldr	r2, [r7, #12]
 800d384:	4313      	orrs	r3, r2
 800d386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d38e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	689b      	ldr	r3, [r3, #8]
 800d394:	051b      	lsls	r3, r3, #20
 800d396:	693a      	ldr	r2, [r7, #16]
 800d398:	4313      	orrs	r3, r2
 800d39a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	4a19      	ldr	r2, [pc, #100]	; (800d404 <TIM_OC6_SetConfig+0xb8>)
 800d3a0:	4293      	cmp	r3, r2
 800d3a2:	d00f      	beq.n	800d3c4 <TIM_OC6_SetConfig+0x78>
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	4a18      	ldr	r2, [pc, #96]	; (800d408 <TIM_OC6_SetConfig+0xbc>)
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	d00b      	beq.n	800d3c4 <TIM_OC6_SetConfig+0x78>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	4a17      	ldr	r2, [pc, #92]	; (800d40c <TIM_OC6_SetConfig+0xc0>)
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	d007      	beq.n	800d3c4 <TIM_OC6_SetConfig+0x78>
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	4a16      	ldr	r2, [pc, #88]	; (800d410 <TIM_OC6_SetConfig+0xc4>)
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d003      	beq.n	800d3c4 <TIM_OC6_SetConfig+0x78>
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	4a15      	ldr	r2, [pc, #84]	; (800d414 <TIM_OC6_SetConfig+0xc8>)
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	d109      	bne.n	800d3d8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d3ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	695b      	ldr	r3, [r3, #20]
 800d3d0:	029b      	lsls	r3, r3, #10
 800d3d2:	697a      	ldr	r2, [r7, #20]
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	697a      	ldr	r2, [r7, #20]
 800d3dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	68fa      	ldr	r2, [r7, #12]
 800d3e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	685a      	ldr	r2, [r3, #4]
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	693a      	ldr	r2, [r7, #16]
 800d3f0:	621a      	str	r2, [r3, #32]
}
 800d3f2:	bf00      	nop
 800d3f4:	371c      	adds	r7, #28
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fc:	4770      	bx	lr
 800d3fe:	bf00      	nop
 800d400:	feff8fff 	.word	0xfeff8fff
 800d404:	40010000 	.word	0x40010000
 800d408:	40010400 	.word	0x40010400
 800d40c:	40014000 	.word	0x40014000
 800d410:	40014400 	.word	0x40014400
 800d414:	40014800 	.word	0x40014800

0800d418 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d418:	b480      	push	{r7}
 800d41a:	b087      	sub	sp, #28
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	60f8      	str	r0, [r7, #12]
 800d420:	60b9      	str	r1, [r7, #8]
 800d422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	f003 031f 	and.w	r3, r3, #31
 800d42a:	2201      	movs	r2, #1
 800d42c:	fa02 f303 	lsl.w	r3, r2, r3
 800d430:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	6a1a      	ldr	r2, [r3, #32]
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	43db      	mvns	r3, r3
 800d43a:	401a      	ands	r2, r3
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	6a1a      	ldr	r2, [r3, #32]
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	f003 031f 	and.w	r3, r3, #31
 800d44a:	6879      	ldr	r1, [r7, #4]
 800d44c:	fa01 f303 	lsl.w	r3, r1, r3
 800d450:	431a      	orrs	r2, r3
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	621a      	str	r2, [r3, #32]
}
 800d456:	bf00      	nop
 800d458:	371c      	adds	r7, #28
 800d45a:	46bd      	mov	sp, r7
 800d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d460:	4770      	bx	lr
	...

0800d464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d464:	b480      	push	{r7}
 800d466:	b085      	sub	sp, #20
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d474:	2b01      	cmp	r3, #1
 800d476:	d101      	bne.n	800d47c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d478:	2302      	movs	r3, #2
 800d47a:	e06d      	b.n	800d558 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2201      	movs	r2, #1
 800d480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2202      	movs	r2, #2
 800d488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	685b      	ldr	r3, [r3, #4]
 800d492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	689b      	ldr	r3, [r3, #8]
 800d49a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4a30      	ldr	r2, [pc, #192]	; (800d564 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d4a2:	4293      	cmp	r3, r2
 800d4a4:	d004      	beq.n	800d4b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	4a2f      	ldr	r2, [pc, #188]	; (800d568 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d4ac:	4293      	cmp	r3, r2
 800d4ae:	d108      	bne.n	800d4c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d4b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	68fa      	ldr	r2, [r7, #12]
 800d4be:	4313      	orrs	r3, r2
 800d4c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	68fa      	ldr	r2, [r7, #12]
 800d4d0:	4313      	orrs	r3, r2
 800d4d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	68fa      	ldr	r2, [r7, #12]
 800d4da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4a20      	ldr	r2, [pc, #128]	; (800d564 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d4e2:	4293      	cmp	r3, r2
 800d4e4:	d022      	beq.n	800d52c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4ee:	d01d      	beq.n	800d52c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4a1d      	ldr	r2, [pc, #116]	; (800d56c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	d018      	beq.n	800d52c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	4a1c      	ldr	r2, [pc, #112]	; (800d570 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d500:	4293      	cmp	r3, r2
 800d502:	d013      	beq.n	800d52c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	4a1a      	ldr	r2, [pc, #104]	; (800d574 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d50a:	4293      	cmp	r3, r2
 800d50c:	d00e      	beq.n	800d52c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	4a15      	ldr	r2, [pc, #84]	; (800d568 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d514:	4293      	cmp	r3, r2
 800d516:	d009      	beq.n	800d52c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4a16      	ldr	r2, [pc, #88]	; (800d578 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d004      	beq.n	800d52c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	4a15      	ldr	r2, [pc, #84]	; (800d57c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d528:	4293      	cmp	r3, r2
 800d52a:	d10c      	bne.n	800d546 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d532:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	689b      	ldr	r3, [r3, #8]
 800d538:	68ba      	ldr	r2, [r7, #8]
 800d53a:	4313      	orrs	r3, r2
 800d53c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	68ba      	ldr	r2, [r7, #8]
 800d544:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2201      	movs	r2, #1
 800d54a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2200      	movs	r2, #0
 800d552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d556:	2300      	movs	r3, #0
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3714      	adds	r7, #20
 800d55c:	46bd      	mov	sp, r7
 800d55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d562:	4770      	bx	lr
 800d564:	40010000 	.word	0x40010000
 800d568:	40010400 	.word	0x40010400
 800d56c:	40000400 	.word	0x40000400
 800d570:	40000800 	.word	0x40000800
 800d574:	40000c00 	.word	0x40000c00
 800d578:	40001800 	.word	0x40001800
 800d57c:	40014000 	.word	0x40014000

0800d580 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d580:	b480      	push	{r7}
 800d582:	b085      	sub	sp, #20
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d58a:	2300      	movs	r3, #0
 800d58c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d594:	2b01      	cmp	r3, #1
 800d596:	d101      	bne.n	800d59c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d598:	2302      	movs	r3, #2
 800d59a:	e065      	b.n	800d668 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	68db      	ldr	r3, [r3, #12]
 800d5ae:	4313      	orrs	r3, r2
 800d5b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	689b      	ldr	r3, [r3, #8]
 800d5bc:	4313      	orrs	r3, r2
 800d5be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	685b      	ldr	r3, [r3, #4]
 800d5ca:	4313      	orrs	r3, r2
 800d5cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	4313      	orrs	r3, r2
 800d5da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	691b      	ldr	r3, [r3, #16]
 800d5e6:	4313      	orrs	r3, r2
 800d5e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	695b      	ldr	r3, [r3, #20]
 800d5f4:	4313      	orrs	r3, r2
 800d5f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d602:	4313      	orrs	r3, r2
 800d604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	699b      	ldr	r3, [r3, #24]
 800d610:	041b      	lsls	r3, r3, #16
 800d612:	4313      	orrs	r3, r2
 800d614:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	4a16      	ldr	r2, [pc, #88]	; (800d674 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d004      	beq.n	800d62a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	4a14      	ldr	r2, [pc, #80]	; (800d678 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d626:	4293      	cmp	r3, r2
 800d628:	d115      	bne.n	800d656 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d634:	051b      	lsls	r3, r3, #20
 800d636:	4313      	orrs	r3, r2
 800d638:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	69db      	ldr	r3, [r3, #28]
 800d644:	4313      	orrs	r3, r2
 800d646:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	6a1b      	ldr	r3, [r3, #32]
 800d652:	4313      	orrs	r3, r2
 800d654:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	68fa      	ldr	r2, [r7, #12]
 800d65c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2200      	movs	r2, #0
 800d662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d666:	2300      	movs	r3, #0
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3714      	adds	r7, #20
 800d66c:	46bd      	mov	sp, r7
 800d66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d672:	4770      	bx	lr
 800d674:	40010000 	.word	0x40010000
 800d678:	40010400 	.word	0x40010400

0800d67c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b083      	sub	sp, #12
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d684:	bf00      	nop
 800d686:	370c      	adds	r7, #12
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr

0800d690 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d690:	b480      	push	{r7}
 800d692:	b083      	sub	sp, #12
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d698:	bf00      	nop
 800d69a:	370c      	adds	r7, #12
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr

0800d6a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b083      	sub	sp, #12
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d6ac:	bf00      	nop
 800d6ae:	370c      	adds	r7, #12
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr

0800d6b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d101      	bne.n	800d6ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	e042      	b.n	800d750 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d106      	bne.n	800d6e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f7f4 ff53 	bl	8002588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2224      	movs	r2, #36	; 0x24
 800d6e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	681a      	ldr	r2, [r3, #0]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f022 0201 	bic.w	r2, r2, #1
 800d6f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 fcd6 	bl	800e0ac <UART_SetConfig>
 800d700:	4603      	mov	r3, r0
 800d702:	2b01      	cmp	r3, #1
 800d704:	d101      	bne.n	800d70a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d706:	2301      	movs	r3, #1
 800d708:	e022      	b.n	800d750 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d002      	beq.n	800d718 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f001 fa32 	bl	800eb7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	685a      	ldr	r2, [r3, #4]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d726:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	689a      	ldr	r2, [r3, #8]
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d736:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	681a      	ldr	r2, [r3, #0]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f042 0201 	orr.w	r2, r2, #1
 800d746:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f001 fab9 	bl	800ecc0 <UART_CheckIdleState>
 800d74e:	4603      	mov	r3, r0
}
 800d750:	4618      	mov	r0, r3
 800d752:	3708      	adds	r7, #8
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b08a      	sub	sp, #40	; 0x28
 800d75c:	af02      	add	r7, sp, #8
 800d75e:	60f8      	str	r0, [r7, #12]
 800d760:	60b9      	str	r1, [r7, #8]
 800d762:	603b      	str	r3, [r7, #0]
 800d764:	4613      	mov	r3, r2
 800d766:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d76e:	2b20      	cmp	r3, #32
 800d770:	f040 8083 	bne.w	800d87a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d002      	beq.n	800d780 <HAL_UART_Transmit+0x28>
 800d77a:	88fb      	ldrh	r3, [r7, #6]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d101      	bne.n	800d784 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d780:	2301      	movs	r3, #1
 800d782:	e07b      	b.n	800d87c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d101      	bne.n	800d792 <HAL_UART_Transmit+0x3a>
 800d78e:	2302      	movs	r3, #2
 800d790:	e074      	b.n	800d87c <HAL_UART_Transmit+0x124>
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	2201      	movs	r2, #1
 800d796:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	2200      	movs	r2, #0
 800d79e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2221      	movs	r2, #33	; 0x21
 800d7a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d7aa:	f7f5 f943 	bl	8002a34 <HAL_GetTick>
 800d7ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	88fa      	ldrh	r2, [r7, #6]
 800d7b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	88fa      	ldrh	r2, [r7, #6]
 800d7bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	689b      	ldr	r3, [r3, #8]
 800d7c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7c8:	d108      	bne.n	800d7dc <HAL_UART_Transmit+0x84>
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	691b      	ldr	r3, [r3, #16]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d104      	bne.n	800d7dc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	61bb      	str	r3, [r7, #24]
 800d7da:	e003      	b.n	800d7e4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d7ec:	e02c      	b.n	800d848 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	9300      	str	r3, [sp, #0]
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	2180      	movs	r1, #128	; 0x80
 800d7f8:	68f8      	ldr	r0, [r7, #12]
 800d7fa:	f001 faac 	bl	800ed56 <UART_WaitOnFlagUntilTimeout>
 800d7fe:	4603      	mov	r3, r0
 800d800:	2b00      	cmp	r3, #0
 800d802:	d001      	beq.n	800d808 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d804:	2303      	movs	r3, #3
 800d806:	e039      	b.n	800d87c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d808:	69fb      	ldr	r3, [r7, #28]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d10b      	bne.n	800d826 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d80e:	69bb      	ldr	r3, [r7, #24]
 800d810:	881b      	ldrh	r3, [r3, #0]
 800d812:	461a      	mov	r2, r3
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d81c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d81e:	69bb      	ldr	r3, [r7, #24]
 800d820:	3302      	adds	r3, #2
 800d822:	61bb      	str	r3, [r7, #24]
 800d824:	e007      	b.n	800d836 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d826:	69fb      	ldr	r3, [r7, #28]
 800d828:	781a      	ldrb	r2, [r3, #0]
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d830:	69fb      	ldr	r3, [r7, #28]
 800d832:	3301      	adds	r3, #1
 800d834:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d83c:	b29b      	uxth	r3, r3
 800d83e:	3b01      	subs	r3, #1
 800d840:	b29a      	uxth	r2, r3
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d84e:	b29b      	uxth	r3, r3
 800d850:	2b00      	cmp	r3, #0
 800d852:	d1cc      	bne.n	800d7ee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	9300      	str	r3, [sp, #0]
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	2200      	movs	r2, #0
 800d85c:	2140      	movs	r1, #64	; 0x40
 800d85e:	68f8      	ldr	r0, [r7, #12]
 800d860:	f001 fa79 	bl	800ed56 <UART_WaitOnFlagUntilTimeout>
 800d864:	4603      	mov	r3, r0
 800d866:	2b00      	cmp	r3, #0
 800d868:	d001      	beq.n	800d86e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d86a:	2303      	movs	r3, #3
 800d86c:	e006      	b.n	800d87c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2220      	movs	r2, #32
 800d872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d876:	2300      	movs	r3, #0
 800d878:	e000      	b.n	800d87c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d87a:	2302      	movs	r3, #2
  }
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3720      	adds	r7, #32
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}

0800d884 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b08a      	sub	sp, #40	; 0x28
 800d888:	af00      	add	r7, sp, #0
 800d88a:	60f8      	str	r0, [r7, #12]
 800d88c:	60b9      	str	r1, [r7, #8]
 800d88e:	4613      	mov	r3, r2
 800d890:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d898:	2b20      	cmp	r3, #32
 800d89a:	d142      	bne.n	800d922 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d002      	beq.n	800d8a8 <HAL_UART_Receive_IT+0x24>
 800d8a2:	88fb      	ldrh	r3, [r7, #6]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d101      	bne.n	800d8ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	e03b      	b.n	800d924 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d8b2:	2b01      	cmp	r3, #1
 800d8b4:	d101      	bne.n	800d8ba <HAL_UART_Receive_IT+0x36>
 800d8b6:	2302      	movs	r3, #2
 800d8b8:	e034      	b.n	800d924 <HAL_UART_Receive_IT+0xa0>
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	2201      	movs	r2, #1
 800d8be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4a17      	ldr	r2, [pc, #92]	; (800d92c <HAL_UART_Receive_IT+0xa8>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d01f      	beq.n	800d912 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d018      	beq.n	800d912 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	e853 3f00 	ldrex	r3, [r3]
 800d8ec:	613b      	str	r3, [r7, #16]
   return(result);
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d8f4:	627b      	str	r3, [r7, #36]	; 0x24
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fe:	623b      	str	r3, [r7, #32]
 800d900:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d902:	69f9      	ldr	r1, [r7, #28]
 800d904:	6a3a      	ldr	r2, [r7, #32]
 800d906:	e841 2300 	strex	r3, r2, [r1]
 800d90a:	61bb      	str	r3, [r7, #24]
   return(result);
 800d90c:	69bb      	ldr	r3, [r7, #24]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d1e6      	bne.n	800d8e0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d912:	88fb      	ldrh	r3, [r7, #6]
 800d914:	461a      	mov	r2, r3
 800d916:	68b9      	ldr	r1, [r7, #8]
 800d918:	68f8      	ldr	r0, [r7, #12]
 800d91a:	f001 fae5 	bl	800eee8 <UART_Start_Receive_IT>
 800d91e:	4603      	mov	r3, r0
 800d920:	e000      	b.n	800d924 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d922:	2302      	movs	r3, #2
  }
}
 800d924:	4618      	mov	r0, r3
 800d926:	3728      	adds	r7, #40	; 0x28
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}
 800d92c:	58000c00 	.word	0x58000c00

0800d930 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b0ba      	sub	sp, #232	; 0xe8
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	69db      	ldr	r3, [r3, #28]
 800d93e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	689b      	ldr	r3, [r3, #8]
 800d952:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d956:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d95a:	f640 030f 	movw	r3, #2063	; 0x80f
 800d95e:	4013      	ands	r3, r2
 800d960:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d964:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d11b      	bne.n	800d9a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d96c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d970:	f003 0320 	and.w	r3, r3, #32
 800d974:	2b00      	cmp	r3, #0
 800d976:	d015      	beq.n	800d9a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d97c:	f003 0320 	and.w	r3, r3, #32
 800d980:	2b00      	cmp	r3, #0
 800d982:	d105      	bne.n	800d990 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d009      	beq.n	800d9a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d994:	2b00      	cmp	r3, #0
 800d996:	f000 835a 	beq.w	800e04e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	4798      	blx	r3
      }
      return;
 800d9a2:	e354      	b.n	800e04e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d9a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	f000 811f 	beq.w	800dbec <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d9ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d9b2:	4b8b      	ldr	r3, [pc, #556]	; (800dbe0 <HAL_UART_IRQHandler+0x2b0>)
 800d9b4:	4013      	ands	r3, r2
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d106      	bne.n	800d9c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d9ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d9be:	4b89      	ldr	r3, [pc, #548]	; (800dbe4 <HAL_UART_IRQHandler+0x2b4>)
 800d9c0:	4013      	ands	r3, r2
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	f000 8112 	beq.w	800dbec <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d9c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9cc:	f003 0301 	and.w	r3, r3, #1
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d011      	beq.n	800d9f8 <HAL_UART_IRQHandler+0xc8>
 800d9d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d00b      	beq.n	800d9f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d9ee:	f043 0201 	orr.w	r2, r3, #1
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d9f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9fc:	f003 0302 	and.w	r3, r3, #2
 800da00:	2b00      	cmp	r3, #0
 800da02:	d011      	beq.n	800da28 <HAL_UART_IRQHandler+0xf8>
 800da04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da08:	f003 0301 	and.w	r3, r3, #1
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d00b      	beq.n	800da28 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	2202      	movs	r2, #2
 800da16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da1e:	f043 0204 	orr.w	r2, r3, #4
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800da28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da2c:	f003 0304 	and.w	r3, r3, #4
 800da30:	2b00      	cmp	r3, #0
 800da32:	d011      	beq.n	800da58 <HAL_UART_IRQHandler+0x128>
 800da34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da38:	f003 0301 	and.w	r3, r3, #1
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d00b      	beq.n	800da58 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2204      	movs	r2, #4
 800da46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da4e:	f043 0202 	orr.w	r2, r3, #2
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800da58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da5c:	f003 0308 	and.w	r3, r3, #8
 800da60:	2b00      	cmp	r3, #0
 800da62:	d017      	beq.n	800da94 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800da64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da68:	f003 0320 	and.w	r3, r3, #32
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d105      	bne.n	800da7c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800da70:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800da74:	4b5a      	ldr	r3, [pc, #360]	; (800dbe0 <HAL_UART_IRQHandler+0x2b0>)
 800da76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d00b      	beq.n	800da94 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2208      	movs	r2, #8
 800da82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da8a:	f043 0208 	orr.w	r2, r3, #8
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800da94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d012      	beq.n	800dac6 <HAL_UART_IRQHandler+0x196>
 800daa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800daa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d00c      	beq.n	800dac6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dab4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dabc:	f043 0220 	orr.w	r2, r3, #32
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dacc:	2b00      	cmp	r3, #0
 800dace:	f000 82c0 	beq.w	800e052 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dad6:	f003 0320 	and.w	r3, r3, #32
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d013      	beq.n	800db06 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dae2:	f003 0320 	and.w	r3, r3, #32
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d105      	bne.n	800daf6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800daea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800daee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d007      	beq.n	800db06 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d003      	beq.n	800db06 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	689b      	ldr	r3, [r3, #8]
 800db16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db1a:	2b40      	cmp	r3, #64	; 0x40
 800db1c:	d005      	beq.n	800db2a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800db1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800db22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800db26:	2b00      	cmp	r3, #0
 800db28:	d04f      	beq.n	800dbca <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f001 fb06 	bl	800f13c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	689b      	ldr	r3, [r3, #8]
 800db36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db3a:	2b40      	cmp	r3, #64	; 0x40
 800db3c:	d141      	bne.n	800dbc2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	3308      	adds	r3, #8
 800db44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800db4c:	e853 3f00 	ldrex	r3, [r3]
 800db50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800db54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800db58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	3308      	adds	r3, #8
 800db66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800db6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800db6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800db76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800db7a:	e841 2300 	strex	r3, r2, [r1]
 800db7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800db82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800db86:	2b00      	cmp	r3, #0
 800db88:	d1d9      	bne.n	800db3e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d013      	beq.n	800dbba <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db96:	4a14      	ldr	r2, [pc, #80]	; (800dbe8 <HAL_UART_IRQHandler+0x2b8>)
 800db98:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db9e:	4618      	mov	r0, r3
 800dba0:	f7f8 f88a 	bl	8005cb8 <HAL_DMA_Abort_IT>
 800dba4:	4603      	mov	r3, r0
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d017      	beq.n	800dbda <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbb0:	687a      	ldr	r2, [r7, #4]
 800dbb2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800dbb4:	4610      	mov	r0, r2
 800dbb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbb8:	e00f      	b.n	800dbda <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f000 fa60 	bl	800e080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbc0:	e00b      	b.n	800dbda <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f000 fa5c 	bl	800e080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbc8:	e007      	b.n	800dbda <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f000 fa58 	bl	800e080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800dbd8:	e23b      	b.n	800e052 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbda:	bf00      	nop
    return;
 800dbdc:	e239      	b.n	800e052 <HAL_UART_IRQHandler+0x722>
 800dbde:	bf00      	nop
 800dbe0:	10000001 	.word	0x10000001
 800dbe4:	04000120 	.word	0x04000120
 800dbe8:	0800f209 	.word	0x0800f209

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	f040 81ce 	bne.w	800df92 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dbf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbfa:	f003 0310 	and.w	r3, r3, #16
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	f000 81c7 	beq.w	800df92 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dc04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc08:	f003 0310 	and.w	r3, r3, #16
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	f000 81c0 	beq.w	800df92 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	2210      	movs	r2, #16
 800dc18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	689b      	ldr	r3, [r3, #8]
 800dc20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc24:	2b40      	cmp	r3, #64	; 0x40
 800dc26:	f040 813b 	bne.w	800dea0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	4a8b      	ldr	r2, [pc, #556]	; (800de60 <HAL_UART_IRQHandler+0x530>)
 800dc32:	4293      	cmp	r3, r2
 800dc34:	d059      	beq.n	800dcea <HAL_UART_IRQHandler+0x3ba>
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	4a89      	ldr	r2, [pc, #548]	; (800de64 <HAL_UART_IRQHandler+0x534>)
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	d053      	beq.n	800dcea <HAL_UART_IRQHandler+0x3ba>
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	4a87      	ldr	r2, [pc, #540]	; (800de68 <HAL_UART_IRQHandler+0x538>)
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	d04d      	beq.n	800dcea <HAL_UART_IRQHandler+0x3ba>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	4a85      	ldr	r2, [pc, #532]	; (800de6c <HAL_UART_IRQHandler+0x53c>)
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d047      	beq.n	800dcea <HAL_UART_IRQHandler+0x3ba>
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	4a83      	ldr	r2, [pc, #524]	; (800de70 <HAL_UART_IRQHandler+0x540>)
 800dc62:	4293      	cmp	r3, r2
 800dc64:	d041      	beq.n	800dcea <HAL_UART_IRQHandler+0x3ba>
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	4a81      	ldr	r2, [pc, #516]	; (800de74 <HAL_UART_IRQHandler+0x544>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d03b      	beq.n	800dcea <HAL_UART_IRQHandler+0x3ba>
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	4a7f      	ldr	r2, [pc, #508]	; (800de78 <HAL_UART_IRQHandler+0x548>)
 800dc7a:	4293      	cmp	r3, r2
 800dc7c:	d035      	beq.n	800dcea <HAL_UART_IRQHandler+0x3ba>
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4a7d      	ldr	r2, [pc, #500]	; (800de7c <HAL_UART_IRQHandler+0x54c>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d02f      	beq.n	800dcea <HAL_UART_IRQHandler+0x3ba>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	4a7b      	ldr	r2, [pc, #492]	; (800de80 <HAL_UART_IRQHandler+0x550>)
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d029      	beq.n	800dcea <HAL_UART_IRQHandler+0x3ba>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	4a79      	ldr	r2, [pc, #484]	; (800de84 <HAL_UART_IRQHandler+0x554>)
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	d023      	beq.n	800dcea <HAL_UART_IRQHandler+0x3ba>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4a77      	ldr	r2, [pc, #476]	; (800de88 <HAL_UART_IRQHandler+0x558>)
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	d01d      	beq.n	800dcea <HAL_UART_IRQHandler+0x3ba>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4a75      	ldr	r2, [pc, #468]	; (800de8c <HAL_UART_IRQHandler+0x55c>)
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d017      	beq.n	800dcea <HAL_UART_IRQHandler+0x3ba>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4a73      	ldr	r2, [pc, #460]	; (800de90 <HAL_UART_IRQHandler+0x560>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d011      	beq.n	800dcea <HAL_UART_IRQHandler+0x3ba>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	4a71      	ldr	r2, [pc, #452]	; (800de94 <HAL_UART_IRQHandler+0x564>)
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	d00b      	beq.n	800dcea <HAL_UART_IRQHandler+0x3ba>
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	4a6f      	ldr	r2, [pc, #444]	; (800de98 <HAL_UART_IRQHandler+0x568>)
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	d005      	beq.n	800dcea <HAL_UART_IRQHandler+0x3ba>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	4a6d      	ldr	r2, [pc, #436]	; (800de9c <HAL_UART_IRQHandler+0x56c>)
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d105      	bne.n	800dcf6 <HAL_UART_IRQHandler+0x3c6>
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	685b      	ldr	r3, [r3, #4]
 800dcf2:	b29b      	uxth	r3, r3
 800dcf4:	e004      	b.n	800dd00 <HAL_UART_IRQHandler+0x3d0>
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	685b      	ldr	r3, [r3, #4]
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dd04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	f000 81a4 	beq.w	800e056 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dd14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	f080 819c 	bcs.w	800e056 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dd24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd2c:	69db      	ldr	r3, [r3, #28]
 800dd2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd32:	f000 8086 	beq.w	800de42 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dd42:	e853 3f00 	ldrex	r3, [r3]
 800dd46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800dd4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dd4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	461a      	mov	r2, r3
 800dd5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dd60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dd64:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd68:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dd6c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dd70:	e841 2300 	strex	r3, r2, [r1]
 800dd74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dd78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d1da      	bne.n	800dd36 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	3308      	adds	r3, #8
 800dd86:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dd8a:	e853 3f00 	ldrex	r3, [r3]
 800dd8e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dd90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dd92:	f023 0301 	bic.w	r3, r3, #1
 800dd96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	3308      	adds	r3, #8
 800dda0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dda4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800dda8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddaa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ddac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ddb0:	e841 2300 	strex	r3, r2, [r1]
 800ddb4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ddb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d1e1      	bne.n	800dd80 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	3308      	adds	r3, #8
 800ddc2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddc6:	e853 3f00 	ldrex	r3, [r3]
 800ddca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ddcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ddd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	3308      	adds	r3, #8
 800dddc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dde0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dde2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dde4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dde6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dde8:	e841 2300 	strex	r3, r2, [r1]
 800ddec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ddee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d1e3      	bne.n	800ddbc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2220      	movs	r2, #32
 800ddf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2200      	movs	r2, #0
 800de00:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de0a:	e853 3f00 	ldrex	r3, [r3]
 800de0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800de10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de12:	f023 0310 	bic.w	r3, r3, #16
 800de16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	461a      	mov	r2, r3
 800de20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800de24:	65bb      	str	r3, [r7, #88]	; 0x58
 800de26:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800de2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800de2c:	e841 2300 	strex	r3, r2, [r1]
 800de30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800de32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de34:	2b00      	cmp	r3, #0
 800de36:	d1e4      	bne.n	800de02 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de3c:	4618      	mov	r0, r3
 800de3e:	f7f7 fc1d 	bl	800567c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de4e:	b29b      	uxth	r3, r3
 800de50:	1ad3      	subs	r3, r2, r3
 800de52:	b29b      	uxth	r3, r3
 800de54:	4619      	mov	r1, r3
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f000 f91c 	bl	800e094 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800de5c:	e0fb      	b.n	800e056 <HAL_UART_IRQHandler+0x726>
 800de5e:	bf00      	nop
 800de60:	40020010 	.word	0x40020010
 800de64:	40020028 	.word	0x40020028
 800de68:	40020040 	.word	0x40020040
 800de6c:	40020058 	.word	0x40020058
 800de70:	40020070 	.word	0x40020070
 800de74:	40020088 	.word	0x40020088
 800de78:	400200a0 	.word	0x400200a0
 800de7c:	400200b8 	.word	0x400200b8
 800de80:	40020410 	.word	0x40020410
 800de84:	40020428 	.word	0x40020428
 800de88:	40020440 	.word	0x40020440
 800de8c:	40020458 	.word	0x40020458
 800de90:	40020470 	.word	0x40020470
 800de94:	40020488 	.word	0x40020488
 800de98:	400204a0 	.word	0x400204a0
 800de9c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800deac:	b29b      	uxth	r3, r3
 800deae:	1ad3      	subs	r3, r2, r3
 800deb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800deba:	b29b      	uxth	r3, r3
 800debc:	2b00      	cmp	r3, #0
 800debe:	f000 80cc 	beq.w	800e05a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800dec2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	f000 80c7 	beq.w	800e05a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ded2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded4:	e853 3f00 	ldrex	r3, [r3]
 800ded8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800deda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dedc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dee0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	461a      	mov	r2, r3
 800deea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800deee:	647b      	str	r3, [r7, #68]	; 0x44
 800def0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800def2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800def4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800def6:	e841 2300 	strex	r3, r2, [r1]
 800defa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800defc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800defe:	2b00      	cmp	r3, #0
 800df00:	d1e4      	bne.n	800decc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	3308      	adds	r3, #8
 800df08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0c:	e853 3f00 	ldrex	r3, [r3]
 800df10:	623b      	str	r3, [r7, #32]
   return(result);
 800df12:	6a3a      	ldr	r2, [r7, #32]
 800df14:	4b54      	ldr	r3, [pc, #336]	; (800e068 <HAL_UART_IRQHandler+0x738>)
 800df16:	4013      	ands	r3, r2
 800df18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	3308      	adds	r3, #8
 800df22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800df26:	633a      	str	r2, [r7, #48]	; 0x30
 800df28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df2e:	e841 2300 	strex	r3, r2, [r1]
 800df32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800df34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df36:	2b00      	cmp	r3, #0
 800df38:	d1e3      	bne.n	800df02 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2220      	movs	r2, #32
 800df3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2200      	movs	r2, #0
 800df46:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2200      	movs	r2, #0
 800df4c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	e853 3f00 	ldrex	r3, [r3]
 800df5a:	60fb      	str	r3, [r7, #12]
   return(result);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	f023 0310 	bic.w	r3, r3, #16
 800df62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	461a      	mov	r2, r3
 800df6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800df70:	61fb      	str	r3, [r7, #28]
 800df72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df74:	69b9      	ldr	r1, [r7, #24]
 800df76:	69fa      	ldr	r2, [r7, #28]
 800df78:	e841 2300 	strex	r3, r2, [r1]
 800df7c:	617b      	str	r3, [r7, #20]
   return(result);
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d1e4      	bne.n	800df4e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800df84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800df88:	4619      	mov	r1, r3
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f000 f882 	bl	800e094 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800df90:	e063      	b.n	800e05a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800df92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d00e      	beq.n	800dfbc <HAL_UART_IRQHandler+0x68c>
 800df9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dfa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d008      	beq.n	800dfbc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dfb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f001 fdc5 	bl	800fb44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dfba:	e051      	b.n	800e060 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800dfbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d014      	beq.n	800dff2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dfc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dfcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d105      	bne.n	800dfe0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800dfd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dfd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d008      	beq.n	800dff2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d03a      	beq.n	800e05e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	4798      	blx	r3
    }
    return;
 800dff0:	e035      	b.n	800e05e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d009      	beq.n	800e012 <HAL_UART_IRQHandler+0x6e2>
 800dffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e006:	2b00      	cmp	r3, #0
 800e008:	d003      	beq.n	800e012 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f001 f912 	bl	800f234 <UART_EndTransmit_IT>
    return;
 800e010:	e026      	b.n	800e060 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e016:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d009      	beq.n	800e032 <HAL_UART_IRQHandler+0x702>
 800e01e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e022:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e026:	2b00      	cmp	r3, #0
 800e028:	d003      	beq.n	800e032 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f001 fd9e 	bl	800fb6c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e030:	e016      	b.n	800e060 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e036:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d010      	beq.n	800e060 <HAL_UART_IRQHandler+0x730>
 800e03e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e042:	2b00      	cmp	r3, #0
 800e044:	da0c      	bge.n	800e060 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f001 fd86 	bl	800fb58 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e04c:	e008      	b.n	800e060 <HAL_UART_IRQHandler+0x730>
      return;
 800e04e:	bf00      	nop
 800e050:	e006      	b.n	800e060 <HAL_UART_IRQHandler+0x730>
    return;
 800e052:	bf00      	nop
 800e054:	e004      	b.n	800e060 <HAL_UART_IRQHandler+0x730>
      return;
 800e056:	bf00      	nop
 800e058:	e002      	b.n	800e060 <HAL_UART_IRQHandler+0x730>
      return;
 800e05a:	bf00      	nop
 800e05c:	e000      	b.n	800e060 <HAL_UART_IRQHandler+0x730>
    return;
 800e05e:	bf00      	nop
  }
}
 800e060:	37e8      	adds	r7, #232	; 0xe8
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}
 800e066:	bf00      	nop
 800e068:	effffffe 	.word	0xeffffffe

0800e06c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e06c:	b480      	push	{r7}
 800e06e:	b083      	sub	sp, #12
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e074:	bf00      	nop
 800e076:	370c      	adds	r7, #12
 800e078:	46bd      	mov	sp, r7
 800e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07e:	4770      	bx	lr

0800e080 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e080:	b480      	push	{r7}
 800e082:	b083      	sub	sp, #12
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e088:	bf00      	nop
 800e08a:	370c      	adds	r7, #12
 800e08c:	46bd      	mov	sp, r7
 800e08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e092:	4770      	bx	lr

0800e094 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e094:	b480      	push	{r7}
 800e096:	b083      	sub	sp, #12
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	460b      	mov	r3, r1
 800e09e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e0a0:	bf00      	nop
 800e0a2:	370c      	adds	r7, #12
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0aa:	4770      	bx	lr

0800e0ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e0ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e0b0:	b092      	sub	sp, #72	; 0x48
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	689a      	ldr	r2, [r3, #8]
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	691b      	ldr	r3, [r3, #16]
 800e0c4:	431a      	orrs	r2, r3
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	695b      	ldr	r3, [r3, #20]
 800e0ca:	431a      	orrs	r2, r3
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	69db      	ldr	r3, [r3, #28]
 800e0d0:	4313      	orrs	r3, r2
 800e0d2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	681a      	ldr	r2, [r3, #0]
 800e0da:	4bbe      	ldr	r3, [pc, #760]	; (800e3d4 <UART_SetConfig+0x328>)
 800e0dc:	4013      	ands	r3, r2
 800e0de:	697a      	ldr	r2, [r7, #20]
 800e0e0:	6812      	ldr	r2, [r2, #0]
 800e0e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e0e4:	430b      	orrs	r3, r1
 800e0e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	685b      	ldr	r3, [r3, #4]
 800e0ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	68da      	ldr	r2, [r3, #12]
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	430a      	orrs	r2, r1
 800e0fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	699b      	ldr	r3, [r3, #24]
 800e102:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	4ab3      	ldr	r2, [pc, #716]	; (800e3d8 <UART_SetConfig+0x32c>)
 800e10a:	4293      	cmp	r3, r2
 800e10c:	d004      	beq.n	800e118 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	6a1b      	ldr	r3, [r3, #32]
 800e112:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e114:	4313      	orrs	r3, r2
 800e116:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	689a      	ldr	r2, [r3, #8]
 800e11e:	4baf      	ldr	r3, [pc, #700]	; (800e3dc <UART_SetConfig+0x330>)
 800e120:	4013      	ands	r3, r2
 800e122:	697a      	ldr	r2, [r7, #20]
 800e124:	6812      	ldr	r2, [r2, #0]
 800e126:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e128:	430b      	orrs	r3, r1
 800e12a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e132:	f023 010f 	bic.w	r1, r3, #15
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	430a      	orrs	r2, r1
 800e140:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	4aa6      	ldr	r2, [pc, #664]	; (800e3e0 <UART_SetConfig+0x334>)
 800e148:	4293      	cmp	r3, r2
 800e14a:	d177      	bne.n	800e23c <UART_SetConfig+0x190>
 800e14c:	4ba5      	ldr	r3, [pc, #660]	; (800e3e4 <UART_SetConfig+0x338>)
 800e14e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e150:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e154:	2b28      	cmp	r3, #40	; 0x28
 800e156:	d86d      	bhi.n	800e234 <UART_SetConfig+0x188>
 800e158:	a201      	add	r2, pc, #4	; (adr r2, 800e160 <UART_SetConfig+0xb4>)
 800e15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e15e:	bf00      	nop
 800e160:	0800e205 	.word	0x0800e205
 800e164:	0800e235 	.word	0x0800e235
 800e168:	0800e235 	.word	0x0800e235
 800e16c:	0800e235 	.word	0x0800e235
 800e170:	0800e235 	.word	0x0800e235
 800e174:	0800e235 	.word	0x0800e235
 800e178:	0800e235 	.word	0x0800e235
 800e17c:	0800e235 	.word	0x0800e235
 800e180:	0800e20d 	.word	0x0800e20d
 800e184:	0800e235 	.word	0x0800e235
 800e188:	0800e235 	.word	0x0800e235
 800e18c:	0800e235 	.word	0x0800e235
 800e190:	0800e235 	.word	0x0800e235
 800e194:	0800e235 	.word	0x0800e235
 800e198:	0800e235 	.word	0x0800e235
 800e19c:	0800e235 	.word	0x0800e235
 800e1a0:	0800e215 	.word	0x0800e215
 800e1a4:	0800e235 	.word	0x0800e235
 800e1a8:	0800e235 	.word	0x0800e235
 800e1ac:	0800e235 	.word	0x0800e235
 800e1b0:	0800e235 	.word	0x0800e235
 800e1b4:	0800e235 	.word	0x0800e235
 800e1b8:	0800e235 	.word	0x0800e235
 800e1bc:	0800e235 	.word	0x0800e235
 800e1c0:	0800e21d 	.word	0x0800e21d
 800e1c4:	0800e235 	.word	0x0800e235
 800e1c8:	0800e235 	.word	0x0800e235
 800e1cc:	0800e235 	.word	0x0800e235
 800e1d0:	0800e235 	.word	0x0800e235
 800e1d4:	0800e235 	.word	0x0800e235
 800e1d8:	0800e235 	.word	0x0800e235
 800e1dc:	0800e235 	.word	0x0800e235
 800e1e0:	0800e225 	.word	0x0800e225
 800e1e4:	0800e235 	.word	0x0800e235
 800e1e8:	0800e235 	.word	0x0800e235
 800e1ec:	0800e235 	.word	0x0800e235
 800e1f0:	0800e235 	.word	0x0800e235
 800e1f4:	0800e235 	.word	0x0800e235
 800e1f8:	0800e235 	.word	0x0800e235
 800e1fc:	0800e235 	.word	0x0800e235
 800e200:	0800e22d 	.word	0x0800e22d
 800e204:	2301      	movs	r3, #1
 800e206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e20a:	e222      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e20c:	2304      	movs	r3, #4
 800e20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e212:	e21e      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e214:	2308      	movs	r3, #8
 800e216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e21a:	e21a      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e21c:	2310      	movs	r3, #16
 800e21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e222:	e216      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e224:	2320      	movs	r3, #32
 800e226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e22a:	e212      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e22c:	2340      	movs	r3, #64	; 0x40
 800e22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e232:	e20e      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e234:	2380      	movs	r3, #128	; 0x80
 800e236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e23a:	e20a      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e23c:	697b      	ldr	r3, [r7, #20]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	4a69      	ldr	r2, [pc, #420]	; (800e3e8 <UART_SetConfig+0x33c>)
 800e242:	4293      	cmp	r3, r2
 800e244:	d130      	bne.n	800e2a8 <UART_SetConfig+0x1fc>
 800e246:	4b67      	ldr	r3, [pc, #412]	; (800e3e4 <UART_SetConfig+0x338>)
 800e248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e24a:	f003 0307 	and.w	r3, r3, #7
 800e24e:	2b05      	cmp	r3, #5
 800e250:	d826      	bhi.n	800e2a0 <UART_SetConfig+0x1f4>
 800e252:	a201      	add	r2, pc, #4	; (adr r2, 800e258 <UART_SetConfig+0x1ac>)
 800e254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e258:	0800e271 	.word	0x0800e271
 800e25c:	0800e279 	.word	0x0800e279
 800e260:	0800e281 	.word	0x0800e281
 800e264:	0800e289 	.word	0x0800e289
 800e268:	0800e291 	.word	0x0800e291
 800e26c:	0800e299 	.word	0x0800e299
 800e270:	2300      	movs	r3, #0
 800e272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e276:	e1ec      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e278:	2304      	movs	r3, #4
 800e27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e27e:	e1e8      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e280:	2308      	movs	r3, #8
 800e282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e286:	e1e4      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e288:	2310      	movs	r3, #16
 800e28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e28e:	e1e0      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e290:	2320      	movs	r3, #32
 800e292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e296:	e1dc      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e298:	2340      	movs	r3, #64	; 0x40
 800e29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e29e:	e1d8      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e2a0:	2380      	movs	r3, #128	; 0x80
 800e2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2a6:	e1d4      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e2a8:	697b      	ldr	r3, [r7, #20]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	4a4f      	ldr	r2, [pc, #316]	; (800e3ec <UART_SetConfig+0x340>)
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d130      	bne.n	800e314 <UART_SetConfig+0x268>
 800e2b2:	4b4c      	ldr	r3, [pc, #304]	; (800e3e4 <UART_SetConfig+0x338>)
 800e2b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2b6:	f003 0307 	and.w	r3, r3, #7
 800e2ba:	2b05      	cmp	r3, #5
 800e2bc:	d826      	bhi.n	800e30c <UART_SetConfig+0x260>
 800e2be:	a201      	add	r2, pc, #4	; (adr r2, 800e2c4 <UART_SetConfig+0x218>)
 800e2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2c4:	0800e2dd 	.word	0x0800e2dd
 800e2c8:	0800e2e5 	.word	0x0800e2e5
 800e2cc:	0800e2ed 	.word	0x0800e2ed
 800e2d0:	0800e2f5 	.word	0x0800e2f5
 800e2d4:	0800e2fd 	.word	0x0800e2fd
 800e2d8:	0800e305 	.word	0x0800e305
 800e2dc:	2300      	movs	r3, #0
 800e2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2e2:	e1b6      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e2e4:	2304      	movs	r3, #4
 800e2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ea:	e1b2      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e2ec:	2308      	movs	r3, #8
 800e2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2f2:	e1ae      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e2f4:	2310      	movs	r3, #16
 800e2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2fa:	e1aa      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e2fc:	2320      	movs	r3, #32
 800e2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e302:	e1a6      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e304:	2340      	movs	r3, #64	; 0x40
 800e306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e30a:	e1a2      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e30c:	2380      	movs	r3, #128	; 0x80
 800e30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e312:	e19e      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	4a35      	ldr	r2, [pc, #212]	; (800e3f0 <UART_SetConfig+0x344>)
 800e31a:	4293      	cmp	r3, r2
 800e31c:	d130      	bne.n	800e380 <UART_SetConfig+0x2d4>
 800e31e:	4b31      	ldr	r3, [pc, #196]	; (800e3e4 <UART_SetConfig+0x338>)
 800e320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e322:	f003 0307 	and.w	r3, r3, #7
 800e326:	2b05      	cmp	r3, #5
 800e328:	d826      	bhi.n	800e378 <UART_SetConfig+0x2cc>
 800e32a:	a201      	add	r2, pc, #4	; (adr r2, 800e330 <UART_SetConfig+0x284>)
 800e32c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e330:	0800e349 	.word	0x0800e349
 800e334:	0800e351 	.word	0x0800e351
 800e338:	0800e359 	.word	0x0800e359
 800e33c:	0800e361 	.word	0x0800e361
 800e340:	0800e369 	.word	0x0800e369
 800e344:	0800e371 	.word	0x0800e371
 800e348:	2300      	movs	r3, #0
 800e34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e34e:	e180      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e350:	2304      	movs	r3, #4
 800e352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e356:	e17c      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e358:	2308      	movs	r3, #8
 800e35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e35e:	e178      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e360:	2310      	movs	r3, #16
 800e362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e366:	e174      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e368:	2320      	movs	r3, #32
 800e36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e36e:	e170      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e370:	2340      	movs	r3, #64	; 0x40
 800e372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e376:	e16c      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e378:	2380      	movs	r3, #128	; 0x80
 800e37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e37e:	e168      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e380:	697b      	ldr	r3, [r7, #20]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	4a1b      	ldr	r2, [pc, #108]	; (800e3f4 <UART_SetConfig+0x348>)
 800e386:	4293      	cmp	r3, r2
 800e388:	d142      	bne.n	800e410 <UART_SetConfig+0x364>
 800e38a:	4b16      	ldr	r3, [pc, #88]	; (800e3e4 <UART_SetConfig+0x338>)
 800e38c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e38e:	f003 0307 	and.w	r3, r3, #7
 800e392:	2b05      	cmp	r3, #5
 800e394:	d838      	bhi.n	800e408 <UART_SetConfig+0x35c>
 800e396:	a201      	add	r2, pc, #4	; (adr r2, 800e39c <UART_SetConfig+0x2f0>)
 800e398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e39c:	0800e3b5 	.word	0x0800e3b5
 800e3a0:	0800e3bd 	.word	0x0800e3bd
 800e3a4:	0800e3c5 	.word	0x0800e3c5
 800e3a8:	0800e3cd 	.word	0x0800e3cd
 800e3ac:	0800e3f9 	.word	0x0800e3f9
 800e3b0:	0800e401 	.word	0x0800e401
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ba:	e14a      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e3bc:	2304      	movs	r3, #4
 800e3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3c2:	e146      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e3c4:	2308      	movs	r3, #8
 800e3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ca:	e142      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e3cc:	2310      	movs	r3, #16
 800e3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3d2:	e13e      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e3d4:	cfff69f3 	.word	0xcfff69f3
 800e3d8:	58000c00 	.word	0x58000c00
 800e3dc:	11fff4ff 	.word	0x11fff4ff
 800e3e0:	40011000 	.word	0x40011000
 800e3e4:	58024400 	.word	0x58024400
 800e3e8:	40004400 	.word	0x40004400
 800e3ec:	40004800 	.word	0x40004800
 800e3f0:	40004c00 	.word	0x40004c00
 800e3f4:	40005000 	.word	0x40005000
 800e3f8:	2320      	movs	r3, #32
 800e3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3fe:	e128      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e400:	2340      	movs	r3, #64	; 0x40
 800e402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e406:	e124      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e408:	2380      	movs	r3, #128	; 0x80
 800e40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e40e:	e120      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	4acb      	ldr	r2, [pc, #812]	; (800e744 <UART_SetConfig+0x698>)
 800e416:	4293      	cmp	r3, r2
 800e418:	d176      	bne.n	800e508 <UART_SetConfig+0x45c>
 800e41a:	4bcb      	ldr	r3, [pc, #812]	; (800e748 <UART_SetConfig+0x69c>)
 800e41c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e41e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e422:	2b28      	cmp	r3, #40	; 0x28
 800e424:	d86c      	bhi.n	800e500 <UART_SetConfig+0x454>
 800e426:	a201      	add	r2, pc, #4	; (adr r2, 800e42c <UART_SetConfig+0x380>)
 800e428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e42c:	0800e4d1 	.word	0x0800e4d1
 800e430:	0800e501 	.word	0x0800e501
 800e434:	0800e501 	.word	0x0800e501
 800e438:	0800e501 	.word	0x0800e501
 800e43c:	0800e501 	.word	0x0800e501
 800e440:	0800e501 	.word	0x0800e501
 800e444:	0800e501 	.word	0x0800e501
 800e448:	0800e501 	.word	0x0800e501
 800e44c:	0800e4d9 	.word	0x0800e4d9
 800e450:	0800e501 	.word	0x0800e501
 800e454:	0800e501 	.word	0x0800e501
 800e458:	0800e501 	.word	0x0800e501
 800e45c:	0800e501 	.word	0x0800e501
 800e460:	0800e501 	.word	0x0800e501
 800e464:	0800e501 	.word	0x0800e501
 800e468:	0800e501 	.word	0x0800e501
 800e46c:	0800e4e1 	.word	0x0800e4e1
 800e470:	0800e501 	.word	0x0800e501
 800e474:	0800e501 	.word	0x0800e501
 800e478:	0800e501 	.word	0x0800e501
 800e47c:	0800e501 	.word	0x0800e501
 800e480:	0800e501 	.word	0x0800e501
 800e484:	0800e501 	.word	0x0800e501
 800e488:	0800e501 	.word	0x0800e501
 800e48c:	0800e4e9 	.word	0x0800e4e9
 800e490:	0800e501 	.word	0x0800e501
 800e494:	0800e501 	.word	0x0800e501
 800e498:	0800e501 	.word	0x0800e501
 800e49c:	0800e501 	.word	0x0800e501
 800e4a0:	0800e501 	.word	0x0800e501
 800e4a4:	0800e501 	.word	0x0800e501
 800e4a8:	0800e501 	.word	0x0800e501
 800e4ac:	0800e4f1 	.word	0x0800e4f1
 800e4b0:	0800e501 	.word	0x0800e501
 800e4b4:	0800e501 	.word	0x0800e501
 800e4b8:	0800e501 	.word	0x0800e501
 800e4bc:	0800e501 	.word	0x0800e501
 800e4c0:	0800e501 	.word	0x0800e501
 800e4c4:	0800e501 	.word	0x0800e501
 800e4c8:	0800e501 	.word	0x0800e501
 800e4cc:	0800e4f9 	.word	0x0800e4f9
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4d6:	e0bc      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e4d8:	2304      	movs	r3, #4
 800e4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4de:	e0b8      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e4e0:	2308      	movs	r3, #8
 800e4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4e6:	e0b4      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e4e8:	2310      	movs	r3, #16
 800e4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ee:	e0b0      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e4f0:	2320      	movs	r3, #32
 800e4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4f6:	e0ac      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e4f8:	2340      	movs	r3, #64	; 0x40
 800e4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4fe:	e0a8      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e500:	2380      	movs	r3, #128	; 0x80
 800e502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e506:	e0a4      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	4a8f      	ldr	r2, [pc, #572]	; (800e74c <UART_SetConfig+0x6a0>)
 800e50e:	4293      	cmp	r3, r2
 800e510:	d130      	bne.n	800e574 <UART_SetConfig+0x4c8>
 800e512:	4b8d      	ldr	r3, [pc, #564]	; (800e748 <UART_SetConfig+0x69c>)
 800e514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e516:	f003 0307 	and.w	r3, r3, #7
 800e51a:	2b05      	cmp	r3, #5
 800e51c:	d826      	bhi.n	800e56c <UART_SetConfig+0x4c0>
 800e51e:	a201      	add	r2, pc, #4	; (adr r2, 800e524 <UART_SetConfig+0x478>)
 800e520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e524:	0800e53d 	.word	0x0800e53d
 800e528:	0800e545 	.word	0x0800e545
 800e52c:	0800e54d 	.word	0x0800e54d
 800e530:	0800e555 	.word	0x0800e555
 800e534:	0800e55d 	.word	0x0800e55d
 800e538:	0800e565 	.word	0x0800e565
 800e53c:	2300      	movs	r3, #0
 800e53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e542:	e086      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e544:	2304      	movs	r3, #4
 800e546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e54a:	e082      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e54c:	2308      	movs	r3, #8
 800e54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e552:	e07e      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e554:	2310      	movs	r3, #16
 800e556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e55a:	e07a      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e55c:	2320      	movs	r3, #32
 800e55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e562:	e076      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e564:	2340      	movs	r3, #64	; 0x40
 800e566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e56a:	e072      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e56c:	2380      	movs	r3, #128	; 0x80
 800e56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e572:	e06e      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	4a75      	ldr	r2, [pc, #468]	; (800e750 <UART_SetConfig+0x6a4>)
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d130      	bne.n	800e5e0 <UART_SetConfig+0x534>
 800e57e:	4b72      	ldr	r3, [pc, #456]	; (800e748 <UART_SetConfig+0x69c>)
 800e580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e582:	f003 0307 	and.w	r3, r3, #7
 800e586:	2b05      	cmp	r3, #5
 800e588:	d826      	bhi.n	800e5d8 <UART_SetConfig+0x52c>
 800e58a:	a201      	add	r2, pc, #4	; (adr r2, 800e590 <UART_SetConfig+0x4e4>)
 800e58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e590:	0800e5a9 	.word	0x0800e5a9
 800e594:	0800e5b1 	.word	0x0800e5b1
 800e598:	0800e5b9 	.word	0x0800e5b9
 800e59c:	0800e5c1 	.word	0x0800e5c1
 800e5a0:	0800e5c9 	.word	0x0800e5c9
 800e5a4:	0800e5d1 	.word	0x0800e5d1
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ae:	e050      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e5b0:	2304      	movs	r3, #4
 800e5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5b6:	e04c      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e5b8:	2308      	movs	r3, #8
 800e5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5be:	e048      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e5c0:	2310      	movs	r3, #16
 800e5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5c6:	e044      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e5c8:	2320      	movs	r3, #32
 800e5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ce:	e040      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e5d0:	2340      	movs	r3, #64	; 0x40
 800e5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5d6:	e03c      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e5d8:	2380      	movs	r3, #128	; 0x80
 800e5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5de:	e038      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	4a5b      	ldr	r2, [pc, #364]	; (800e754 <UART_SetConfig+0x6a8>)
 800e5e6:	4293      	cmp	r3, r2
 800e5e8:	d130      	bne.n	800e64c <UART_SetConfig+0x5a0>
 800e5ea:	4b57      	ldr	r3, [pc, #348]	; (800e748 <UART_SetConfig+0x69c>)
 800e5ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5ee:	f003 0307 	and.w	r3, r3, #7
 800e5f2:	2b05      	cmp	r3, #5
 800e5f4:	d826      	bhi.n	800e644 <UART_SetConfig+0x598>
 800e5f6:	a201      	add	r2, pc, #4	; (adr r2, 800e5fc <UART_SetConfig+0x550>)
 800e5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5fc:	0800e615 	.word	0x0800e615
 800e600:	0800e61d 	.word	0x0800e61d
 800e604:	0800e625 	.word	0x0800e625
 800e608:	0800e62d 	.word	0x0800e62d
 800e60c:	0800e635 	.word	0x0800e635
 800e610:	0800e63d 	.word	0x0800e63d
 800e614:	2302      	movs	r3, #2
 800e616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e61a:	e01a      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e61c:	2304      	movs	r3, #4
 800e61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e622:	e016      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e624:	2308      	movs	r3, #8
 800e626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e62a:	e012      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e62c:	2310      	movs	r3, #16
 800e62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e632:	e00e      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e634:	2320      	movs	r3, #32
 800e636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e63a:	e00a      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e63c:	2340      	movs	r3, #64	; 0x40
 800e63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e642:	e006      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e644:	2380      	movs	r3, #128	; 0x80
 800e646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e64a:	e002      	b.n	800e652 <UART_SetConfig+0x5a6>
 800e64c:	2380      	movs	r3, #128	; 0x80
 800e64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	4a3f      	ldr	r2, [pc, #252]	; (800e754 <UART_SetConfig+0x6a8>)
 800e658:	4293      	cmp	r3, r2
 800e65a:	f040 80f8 	bne.w	800e84e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e65e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e662:	2b20      	cmp	r3, #32
 800e664:	dc46      	bgt.n	800e6f4 <UART_SetConfig+0x648>
 800e666:	2b02      	cmp	r3, #2
 800e668:	f2c0 8082 	blt.w	800e770 <UART_SetConfig+0x6c4>
 800e66c:	3b02      	subs	r3, #2
 800e66e:	2b1e      	cmp	r3, #30
 800e670:	d87e      	bhi.n	800e770 <UART_SetConfig+0x6c4>
 800e672:	a201      	add	r2, pc, #4	; (adr r2, 800e678 <UART_SetConfig+0x5cc>)
 800e674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e678:	0800e6fb 	.word	0x0800e6fb
 800e67c:	0800e771 	.word	0x0800e771
 800e680:	0800e703 	.word	0x0800e703
 800e684:	0800e771 	.word	0x0800e771
 800e688:	0800e771 	.word	0x0800e771
 800e68c:	0800e771 	.word	0x0800e771
 800e690:	0800e713 	.word	0x0800e713
 800e694:	0800e771 	.word	0x0800e771
 800e698:	0800e771 	.word	0x0800e771
 800e69c:	0800e771 	.word	0x0800e771
 800e6a0:	0800e771 	.word	0x0800e771
 800e6a4:	0800e771 	.word	0x0800e771
 800e6a8:	0800e771 	.word	0x0800e771
 800e6ac:	0800e771 	.word	0x0800e771
 800e6b0:	0800e723 	.word	0x0800e723
 800e6b4:	0800e771 	.word	0x0800e771
 800e6b8:	0800e771 	.word	0x0800e771
 800e6bc:	0800e771 	.word	0x0800e771
 800e6c0:	0800e771 	.word	0x0800e771
 800e6c4:	0800e771 	.word	0x0800e771
 800e6c8:	0800e771 	.word	0x0800e771
 800e6cc:	0800e771 	.word	0x0800e771
 800e6d0:	0800e771 	.word	0x0800e771
 800e6d4:	0800e771 	.word	0x0800e771
 800e6d8:	0800e771 	.word	0x0800e771
 800e6dc:	0800e771 	.word	0x0800e771
 800e6e0:	0800e771 	.word	0x0800e771
 800e6e4:	0800e771 	.word	0x0800e771
 800e6e8:	0800e771 	.word	0x0800e771
 800e6ec:	0800e771 	.word	0x0800e771
 800e6f0:	0800e763 	.word	0x0800e763
 800e6f4:	2b40      	cmp	r3, #64	; 0x40
 800e6f6:	d037      	beq.n	800e768 <UART_SetConfig+0x6bc>
 800e6f8:	e03a      	b.n	800e770 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e6fa:	f7fc fbe9 	bl	800aed0 <HAL_RCCEx_GetD3PCLK1Freq>
 800e6fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e700:	e03c      	b.n	800e77c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e706:	4618      	mov	r0, r3
 800e708:	f7fc fbf8 	bl	800aefc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e70e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e710:	e034      	b.n	800e77c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e712:	f107 0318 	add.w	r3, r7, #24
 800e716:	4618      	mov	r0, r3
 800e718:	f7fc fd44 	bl	800b1a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e71c:	69fb      	ldr	r3, [r7, #28]
 800e71e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e720:	e02c      	b.n	800e77c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e722:	4b09      	ldr	r3, [pc, #36]	; (800e748 <UART_SetConfig+0x69c>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	f003 0320 	and.w	r3, r3, #32
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d016      	beq.n	800e75c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e72e:	4b06      	ldr	r3, [pc, #24]	; (800e748 <UART_SetConfig+0x69c>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	08db      	lsrs	r3, r3, #3
 800e734:	f003 0303 	and.w	r3, r3, #3
 800e738:	4a07      	ldr	r2, [pc, #28]	; (800e758 <UART_SetConfig+0x6ac>)
 800e73a:	fa22 f303 	lsr.w	r3, r2, r3
 800e73e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e740:	e01c      	b.n	800e77c <UART_SetConfig+0x6d0>
 800e742:	bf00      	nop
 800e744:	40011400 	.word	0x40011400
 800e748:	58024400 	.word	0x58024400
 800e74c:	40007800 	.word	0x40007800
 800e750:	40007c00 	.word	0x40007c00
 800e754:	58000c00 	.word	0x58000c00
 800e758:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e75c:	4b9d      	ldr	r3, [pc, #628]	; (800e9d4 <UART_SetConfig+0x928>)
 800e75e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e760:	e00c      	b.n	800e77c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e762:	4b9d      	ldr	r3, [pc, #628]	; (800e9d8 <UART_SetConfig+0x92c>)
 800e764:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e766:	e009      	b.n	800e77c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e768:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e76c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e76e:	e005      	b.n	800e77c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e770:	2300      	movs	r3, #0
 800e772:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e774:	2301      	movs	r3, #1
 800e776:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e77a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e77c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e77e:	2b00      	cmp	r3, #0
 800e780:	f000 81de 	beq.w	800eb40 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e788:	4a94      	ldr	r2, [pc, #592]	; (800e9dc <UART_SetConfig+0x930>)
 800e78a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e78e:	461a      	mov	r2, r3
 800e790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e792:	fbb3 f3f2 	udiv	r3, r3, r2
 800e796:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	685a      	ldr	r2, [r3, #4]
 800e79c:	4613      	mov	r3, r2
 800e79e:	005b      	lsls	r3, r3, #1
 800e7a0:	4413      	add	r3, r2
 800e7a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d305      	bcc.n	800e7b4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	685b      	ldr	r3, [r3, #4]
 800e7ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e7ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	d903      	bls.n	800e7bc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e7ba:	e1c1      	b.n	800eb40 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e7bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7be:	2200      	movs	r2, #0
 800e7c0:	60bb      	str	r3, [r7, #8]
 800e7c2:	60fa      	str	r2, [r7, #12]
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7c8:	4a84      	ldr	r2, [pc, #528]	; (800e9dc <UART_SetConfig+0x930>)
 800e7ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e7ce:	b29b      	uxth	r3, r3
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	603b      	str	r3, [r7, #0]
 800e7d4:	607a      	str	r2, [r7, #4]
 800e7d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e7de:	f7f1 fd7b 	bl	80002d8 <__aeabi_uldivmod>
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	460b      	mov	r3, r1
 800e7e6:	4610      	mov	r0, r2
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	f04f 0200 	mov.w	r2, #0
 800e7ee:	f04f 0300 	mov.w	r3, #0
 800e7f2:	020b      	lsls	r3, r1, #8
 800e7f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e7f8:	0202      	lsls	r2, r0, #8
 800e7fa:	6979      	ldr	r1, [r7, #20]
 800e7fc:	6849      	ldr	r1, [r1, #4]
 800e7fe:	0849      	lsrs	r1, r1, #1
 800e800:	2000      	movs	r0, #0
 800e802:	460c      	mov	r4, r1
 800e804:	4605      	mov	r5, r0
 800e806:	eb12 0804 	adds.w	r8, r2, r4
 800e80a:	eb43 0905 	adc.w	r9, r3, r5
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	2200      	movs	r2, #0
 800e814:	469a      	mov	sl, r3
 800e816:	4693      	mov	fp, r2
 800e818:	4652      	mov	r2, sl
 800e81a:	465b      	mov	r3, fp
 800e81c:	4640      	mov	r0, r8
 800e81e:	4649      	mov	r1, r9
 800e820:	f7f1 fd5a 	bl	80002d8 <__aeabi_uldivmod>
 800e824:	4602      	mov	r2, r0
 800e826:	460b      	mov	r3, r1
 800e828:	4613      	mov	r3, r2
 800e82a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e832:	d308      	bcc.n	800e846 <UART_SetConfig+0x79a>
 800e834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e83a:	d204      	bcs.n	800e846 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e842:	60da      	str	r2, [r3, #12]
 800e844:	e17c      	b.n	800eb40 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e846:	2301      	movs	r3, #1
 800e848:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e84c:	e178      	b.n	800eb40 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	69db      	ldr	r3, [r3, #28]
 800e852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e856:	f040 80c5 	bne.w	800e9e4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e85a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e85e:	2b20      	cmp	r3, #32
 800e860:	dc48      	bgt.n	800e8f4 <UART_SetConfig+0x848>
 800e862:	2b00      	cmp	r3, #0
 800e864:	db7b      	blt.n	800e95e <UART_SetConfig+0x8b2>
 800e866:	2b20      	cmp	r3, #32
 800e868:	d879      	bhi.n	800e95e <UART_SetConfig+0x8b2>
 800e86a:	a201      	add	r2, pc, #4	; (adr r2, 800e870 <UART_SetConfig+0x7c4>)
 800e86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e870:	0800e8fb 	.word	0x0800e8fb
 800e874:	0800e903 	.word	0x0800e903
 800e878:	0800e95f 	.word	0x0800e95f
 800e87c:	0800e95f 	.word	0x0800e95f
 800e880:	0800e90b 	.word	0x0800e90b
 800e884:	0800e95f 	.word	0x0800e95f
 800e888:	0800e95f 	.word	0x0800e95f
 800e88c:	0800e95f 	.word	0x0800e95f
 800e890:	0800e91b 	.word	0x0800e91b
 800e894:	0800e95f 	.word	0x0800e95f
 800e898:	0800e95f 	.word	0x0800e95f
 800e89c:	0800e95f 	.word	0x0800e95f
 800e8a0:	0800e95f 	.word	0x0800e95f
 800e8a4:	0800e95f 	.word	0x0800e95f
 800e8a8:	0800e95f 	.word	0x0800e95f
 800e8ac:	0800e95f 	.word	0x0800e95f
 800e8b0:	0800e92b 	.word	0x0800e92b
 800e8b4:	0800e95f 	.word	0x0800e95f
 800e8b8:	0800e95f 	.word	0x0800e95f
 800e8bc:	0800e95f 	.word	0x0800e95f
 800e8c0:	0800e95f 	.word	0x0800e95f
 800e8c4:	0800e95f 	.word	0x0800e95f
 800e8c8:	0800e95f 	.word	0x0800e95f
 800e8cc:	0800e95f 	.word	0x0800e95f
 800e8d0:	0800e95f 	.word	0x0800e95f
 800e8d4:	0800e95f 	.word	0x0800e95f
 800e8d8:	0800e95f 	.word	0x0800e95f
 800e8dc:	0800e95f 	.word	0x0800e95f
 800e8e0:	0800e95f 	.word	0x0800e95f
 800e8e4:	0800e95f 	.word	0x0800e95f
 800e8e8:	0800e95f 	.word	0x0800e95f
 800e8ec:	0800e95f 	.word	0x0800e95f
 800e8f0:	0800e951 	.word	0x0800e951
 800e8f4:	2b40      	cmp	r3, #64	; 0x40
 800e8f6:	d02e      	beq.n	800e956 <UART_SetConfig+0x8aa>
 800e8f8:	e031      	b.n	800e95e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e8fa:	f7fa fea5 	bl	8009648 <HAL_RCC_GetPCLK1Freq>
 800e8fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e900:	e033      	b.n	800e96a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e902:	f7fa feb7 	bl	8009674 <HAL_RCC_GetPCLK2Freq>
 800e906:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e908:	e02f      	b.n	800e96a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e90a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e90e:	4618      	mov	r0, r3
 800e910:	f7fc faf4 	bl	800aefc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e918:	e027      	b.n	800e96a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e91a:	f107 0318 	add.w	r3, r7, #24
 800e91e:	4618      	mov	r0, r3
 800e920:	f7fc fc40 	bl	800b1a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e924:	69fb      	ldr	r3, [r7, #28]
 800e926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e928:	e01f      	b.n	800e96a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e92a:	4b2d      	ldr	r3, [pc, #180]	; (800e9e0 <UART_SetConfig+0x934>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	f003 0320 	and.w	r3, r3, #32
 800e932:	2b00      	cmp	r3, #0
 800e934:	d009      	beq.n	800e94a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e936:	4b2a      	ldr	r3, [pc, #168]	; (800e9e0 <UART_SetConfig+0x934>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	08db      	lsrs	r3, r3, #3
 800e93c:	f003 0303 	and.w	r3, r3, #3
 800e940:	4a24      	ldr	r2, [pc, #144]	; (800e9d4 <UART_SetConfig+0x928>)
 800e942:	fa22 f303 	lsr.w	r3, r2, r3
 800e946:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e948:	e00f      	b.n	800e96a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e94a:	4b22      	ldr	r3, [pc, #136]	; (800e9d4 <UART_SetConfig+0x928>)
 800e94c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e94e:	e00c      	b.n	800e96a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e950:	4b21      	ldr	r3, [pc, #132]	; (800e9d8 <UART_SetConfig+0x92c>)
 800e952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e954:	e009      	b.n	800e96a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e95a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e95c:	e005      	b.n	800e96a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e95e:	2300      	movs	r3, #0
 800e960:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e962:	2301      	movs	r3, #1
 800e964:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e968:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e96a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	f000 80e7 	beq.w	800eb40 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e976:	4a19      	ldr	r2, [pc, #100]	; (800e9dc <UART_SetConfig+0x930>)
 800e978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e97c:	461a      	mov	r2, r3
 800e97e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e980:	fbb3 f3f2 	udiv	r3, r3, r2
 800e984:	005a      	lsls	r2, r3, #1
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	685b      	ldr	r3, [r3, #4]
 800e98a:	085b      	lsrs	r3, r3, #1
 800e98c:	441a      	add	r2, r3
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	685b      	ldr	r3, [r3, #4]
 800e992:	fbb2 f3f3 	udiv	r3, r2, r3
 800e996:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e99a:	2b0f      	cmp	r3, #15
 800e99c:	d916      	bls.n	800e9cc <UART_SetConfig+0x920>
 800e99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9a4:	d212      	bcs.n	800e9cc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9a8:	b29b      	uxth	r3, r3
 800e9aa:	f023 030f 	bic.w	r3, r3, #15
 800e9ae:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b2:	085b      	lsrs	r3, r3, #1
 800e9b4:	b29b      	uxth	r3, r3
 800e9b6:	f003 0307 	and.w	r3, r3, #7
 800e9ba:	b29a      	uxth	r2, r3
 800e9bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e9be:	4313      	orrs	r3, r2
 800e9c0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e9c8:	60da      	str	r2, [r3, #12]
 800e9ca:	e0b9      	b.n	800eb40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e9d2:	e0b5      	b.n	800eb40 <UART_SetConfig+0xa94>
 800e9d4:	03d09000 	.word	0x03d09000
 800e9d8:	003d0900 	.word	0x003d0900
 800e9dc:	0801006c 	.word	0x0801006c
 800e9e0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e9e4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e9e8:	2b20      	cmp	r3, #32
 800e9ea:	dc49      	bgt.n	800ea80 <UART_SetConfig+0x9d4>
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	db7c      	blt.n	800eaea <UART_SetConfig+0xa3e>
 800e9f0:	2b20      	cmp	r3, #32
 800e9f2:	d87a      	bhi.n	800eaea <UART_SetConfig+0xa3e>
 800e9f4:	a201      	add	r2, pc, #4	; (adr r2, 800e9fc <UART_SetConfig+0x950>)
 800e9f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9fa:	bf00      	nop
 800e9fc:	0800ea87 	.word	0x0800ea87
 800ea00:	0800ea8f 	.word	0x0800ea8f
 800ea04:	0800eaeb 	.word	0x0800eaeb
 800ea08:	0800eaeb 	.word	0x0800eaeb
 800ea0c:	0800ea97 	.word	0x0800ea97
 800ea10:	0800eaeb 	.word	0x0800eaeb
 800ea14:	0800eaeb 	.word	0x0800eaeb
 800ea18:	0800eaeb 	.word	0x0800eaeb
 800ea1c:	0800eaa7 	.word	0x0800eaa7
 800ea20:	0800eaeb 	.word	0x0800eaeb
 800ea24:	0800eaeb 	.word	0x0800eaeb
 800ea28:	0800eaeb 	.word	0x0800eaeb
 800ea2c:	0800eaeb 	.word	0x0800eaeb
 800ea30:	0800eaeb 	.word	0x0800eaeb
 800ea34:	0800eaeb 	.word	0x0800eaeb
 800ea38:	0800eaeb 	.word	0x0800eaeb
 800ea3c:	0800eab7 	.word	0x0800eab7
 800ea40:	0800eaeb 	.word	0x0800eaeb
 800ea44:	0800eaeb 	.word	0x0800eaeb
 800ea48:	0800eaeb 	.word	0x0800eaeb
 800ea4c:	0800eaeb 	.word	0x0800eaeb
 800ea50:	0800eaeb 	.word	0x0800eaeb
 800ea54:	0800eaeb 	.word	0x0800eaeb
 800ea58:	0800eaeb 	.word	0x0800eaeb
 800ea5c:	0800eaeb 	.word	0x0800eaeb
 800ea60:	0800eaeb 	.word	0x0800eaeb
 800ea64:	0800eaeb 	.word	0x0800eaeb
 800ea68:	0800eaeb 	.word	0x0800eaeb
 800ea6c:	0800eaeb 	.word	0x0800eaeb
 800ea70:	0800eaeb 	.word	0x0800eaeb
 800ea74:	0800eaeb 	.word	0x0800eaeb
 800ea78:	0800eaeb 	.word	0x0800eaeb
 800ea7c:	0800eadd 	.word	0x0800eadd
 800ea80:	2b40      	cmp	r3, #64	; 0x40
 800ea82:	d02e      	beq.n	800eae2 <UART_SetConfig+0xa36>
 800ea84:	e031      	b.n	800eaea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea86:	f7fa fddf 	bl	8009648 <HAL_RCC_GetPCLK1Freq>
 800ea8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea8c:	e033      	b.n	800eaf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea8e:	f7fa fdf1 	bl	8009674 <HAL_RCC_GetPCLK2Freq>
 800ea92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea94:	e02f      	b.n	800eaf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f7fc fa2e 	bl	800aefc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eaa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eaa4:	e027      	b.n	800eaf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eaa6:	f107 0318 	add.w	r3, r7, #24
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7fc fb7a 	bl	800b1a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eab0:	69fb      	ldr	r3, [r7, #28]
 800eab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eab4:	e01f      	b.n	800eaf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eab6:	4b2d      	ldr	r3, [pc, #180]	; (800eb6c <UART_SetConfig+0xac0>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	f003 0320 	and.w	r3, r3, #32
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d009      	beq.n	800ead6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eac2:	4b2a      	ldr	r3, [pc, #168]	; (800eb6c <UART_SetConfig+0xac0>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	08db      	lsrs	r3, r3, #3
 800eac8:	f003 0303 	and.w	r3, r3, #3
 800eacc:	4a28      	ldr	r2, [pc, #160]	; (800eb70 <UART_SetConfig+0xac4>)
 800eace:	fa22 f303 	lsr.w	r3, r2, r3
 800ead2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ead4:	e00f      	b.n	800eaf6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ead6:	4b26      	ldr	r3, [pc, #152]	; (800eb70 <UART_SetConfig+0xac4>)
 800ead8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eada:	e00c      	b.n	800eaf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eadc:	4b25      	ldr	r3, [pc, #148]	; (800eb74 <UART_SetConfig+0xac8>)
 800eade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eae0:	e009      	b.n	800eaf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eae8:	e005      	b.n	800eaf6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800eaea:	2300      	movs	r3, #0
 800eaec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800eaee:	2301      	movs	r3, #1
 800eaf0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800eaf4:	bf00      	nop
    }

    if (pclk != 0U)
 800eaf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d021      	beq.n	800eb40 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb00:	4a1d      	ldr	r2, [pc, #116]	; (800eb78 <UART_SetConfig+0xacc>)
 800eb02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb06:	461a      	mov	r2, r3
 800eb08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb0a:	fbb3 f2f2 	udiv	r2, r3, r2
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	685b      	ldr	r3, [r3, #4]
 800eb12:	085b      	lsrs	r3, r3, #1
 800eb14:	441a      	add	r2, r3
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	685b      	ldr	r3, [r3, #4]
 800eb1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb1e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb22:	2b0f      	cmp	r3, #15
 800eb24:	d909      	bls.n	800eb3a <UART_SetConfig+0xa8e>
 800eb26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb2c:	d205      	bcs.n	800eb3a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800eb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb30:	b29a      	uxth	r2, r3
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	60da      	str	r2, [r3, #12]
 800eb38:	e002      	b.n	800eb40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	2201      	movs	r2, #1
 800eb44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800eb48:	697b      	ldr	r3, [r7, #20]
 800eb4a:	2201      	movs	r2, #1
 800eb4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	2200      	movs	r2, #0
 800eb54:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800eb5c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3748      	adds	r7, #72	; 0x48
 800eb64:	46bd      	mov	sp, r7
 800eb66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eb6a:	bf00      	nop
 800eb6c:	58024400 	.word	0x58024400
 800eb70:	03d09000 	.word	0x03d09000
 800eb74:	003d0900 	.word	0x003d0900
 800eb78:	0801006c 	.word	0x0801006c

0800eb7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b083      	sub	sp, #12
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb88:	f003 0301 	and.w	r3, r3, #1
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d00a      	beq.n	800eba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	685b      	ldr	r3, [r3, #4]
 800eb96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	430a      	orrs	r2, r1
 800eba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebaa:	f003 0302 	and.w	r3, r3, #2
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d00a      	beq.n	800ebc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	685b      	ldr	r3, [r3, #4]
 800ebb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	430a      	orrs	r2, r1
 800ebc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebcc:	f003 0304 	and.w	r3, r3, #4
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d00a      	beq.n	800ebea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	685b      	ldr	r3, [r3, #4]
 800ebda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	430a      	orrs	r2, r1
 800ebe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebee:	f003 0308 	and.w	r3, r3, #8
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d00a      	beq.n	800ec0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	430a      	orrs	r2, r1
 800ec0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec10:	f003 0310 	and.w	r3, r3, #16
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d00a      	beq.n	800ec2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	689b      	ldr	r3, [r3, #8]
 800ec1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	430a      	orrs	r2, r1
 800ec2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec32:	f003 0320 	and.w	r3, r3, #32
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d00a      	beq.n	800ec50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	689b      	ldr	r3, [r3, #8]
 800ec40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	430a      	orrs	r2, r1
 800ec4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d01a      	beq.n	800ec92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	685b      	ldr	r3, [r3, #4]
 800ec62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	430a      	orrs	r2, r1
 800ec70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec7a:	d10a      	bne.n	800ec92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	685b      	ldr	r3, [r3, #4]
 800ec82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	430a      	orrs	r2, r1
 800ec90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d00a      	beq.n	800ecb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	430a      	orrs	r2, r1
 800ecb2:	605a      	str	r2, [r3, #4]
  }
}
 800ecb4:	bf00      	nop
 800ecb6:	370c      	adds	r7, #12
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbe:	4770      	bx	lr

0800ecc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b086      	sub	sp, #24
 800ecc4:	af02      	add	r7, sp, #8
 800ecc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2200      	movs	r2, #0
 800eccc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ecd0:	f7f3 feb0 	bl	8002a34 <HAL_GetTick>
 800ecd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	f003 0308 	and.w	r3, r3, #8
 800ece0:	2b08      	cmp	r3, #8
 800ece2:	d10e      	bne.n	800ed02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ece4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ece8:	9300      	str	r3, [sp, #0]
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	2200      	movs	r2, #0
 800ecee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f000 f82f 	bl	800ed56 <UART_WaitOnFlagUntilTimeout>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d001      	beq.n	800ed02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ecfe:	2303      	movs	r3, #3
 800ed00:	e025      	b.n	800ed4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	f003 0304 	and.w	r3, r3, #4
 800ed0c:	2b04      	cmp	r3, #4
 800ed0e:	d10e      	bne.n	800ed2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ed10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ed14:	9300      	str	r3, [sp, #0]
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f000 f819 	bl	800ed56 <UART_WaitOnFlagUntilTimeout>
 800ed24:	4603      	mov	r3, r0
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d001      	beq.n	800ed2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ed2a:	2303      	movs	r3, #3
 800ed2c:	e00f      	b.n	800ed4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2220      	movs	r2, #32
 800ed32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2220      	movs	r2, #32
 800ed3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2200      	movs	r2, #0
 800ed42:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2200      	movs	r2, #0
 800ed48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ed4c:	2300      	movs	r3, #0
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3710      	adds	r7, #16
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}

0800ed56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ed56:	b580      	push	{r7, lr}
 800ed58:	b09c      	sub	sp, #112	; 0x70
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	60f8      	str	r0, [r7, #12]
 800ed5e:	60b9      	str	r1, [r7, #8]
 800ed60:	603b      	str	r3, [r7, #0]
 800ed62:	4613      	mov	r3, r2
 800ed64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed66:	e0a9      	b.n	800eebc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ed68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed6e:	f000 80a5 	beq.w	800eebc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ed72:	f7f3 fe5f 	bl	8002a34 <HAL_GetTick>
 800ed76:	4602      	mov	r2, r0
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	1ad3      	subs	r3, r2, r3
 800ed7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	d302      	bcc.n	800ed88 <UART_WaitOnFlagUntilTimeout+0x32>
 800ed82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d140      	bne.n	800ee0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed90:	e853 3f00 	ldrex	r3, [r3]
 800ed94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ed96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ed9c:	667b      	str	r3, [r7, #100]	; 0x64
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	461a      	mov	r2, r3
 800eda4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eda6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eda8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800edac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800edae:	e841 2300 	strex	r3, r2, [r1]
 800edb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800edb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d1e6      	bne.n	800ed88 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	3308      	adds	r3, #8
 800edc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edc4:	e853 3f00 	ldrex	r3, [r3]
 800edc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800edca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edcc:	f023 0301 	bic.w	r3, r3, #1
 800edd0:	663b      	str	r3, [r7, #96]	; 0x60
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	3308      	adds	r3, #8
 800edd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800edda:	64ba      	str	r2, [r7, #72]	; 0x48
 800eddc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ede0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ede2:	e841 2300 	strex	r3, r2, [r1]
 800ede6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ede8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edea:	2b00      	cmp	r3, #0
 800edec:	d1e5      	bne.n	800edba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2220      	movs	r2, #32
 800edf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	2220      	movs	r2, #32
 800edfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	2200      	movs	r2, #0
 800ee02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ee06:	2303      	movs	r3, #3
 800ee08:	e069      	b.n	800eede <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	f003 0304 	and.w	r3, r3, #4
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d051      	beq.n	800eebc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	69db      	ldr	r3, [r3, #28]
 800ee1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ee26:	d149      	bne.n	800eebc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ee30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee3a:	e853 3f00 	ldrex	r3, [r3]
 800ee3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ee40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ee46:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	461a      	mov	r2, r3
 800ee4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee50:	637b      	str	r3, [r7, #52]	; 0x34
 800ee52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ee56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee58:	e841 2300 	strex	r3, r2, [r1]
 800ee5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ee5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d1e6      	bne.n	800ee32 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	3308      	adds	r3, #8
 800ee6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee6c:	697b      	ldr	r3, [r7, #20]
 800ee6e:	e853 3f00 	ldrex	r3, [r3]
 800ee72:	613b      	str	r3, [r7, #16]
   return(result);
 800ee74:	693b      	ldr	r3, [r7, #16]
 800ee76:	f023 0301 	bic.w	r3, r3, #1
 800ee7a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	3308      	adds	r3, #8
 800ee82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ee84:	623a      	str	r2, [r7, #32]
 800ee86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee88:	69f9      	ldr	r1, [r7, #28]
 800ee8a:	6a3a      	ldr	r2, [r7, #32]
 800ee8c:	e841 2300 	strex	r3, r2, [r1]
 800ee90:	61bb      	str	r3, [r7, #24]
   return(result);
 800ee92:	69bb      	ldr	r3, [r7, #24]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d1e5      	bne.n	800ee64 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	2220      	movs	r2, #32
 800ee9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	2220      	movs	r2, #32
 800eea4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	2220      	movs	r2, #32
 800eeac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800eeb8:	2303      	movs	r3, #3
 800eeba:	e010      	b.n	800eede <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	69da      	ldr	r2, [r3, #28]
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	4013      	ands	r3, r2
 800eec6:	68ba      	ldr	r2, [r7, #8]
 800eec8:	429a      	cmp	r2, r3
 800eeca:	bf0c      	ite	eq
 800eecc:	2301      	moveq	r3, #1
 800eece:	2300      	movne	r3, #0
 800eed0:	b2db      	uxtb	r3, r3
 800eed2:	461a      	mov	r2, r3
 800eed4:	79fb      	ldrb	r3, [r7, #7]
 800eed6:	429a      	cmp	r2, r3
 800eed8:	f43f af46 	beq.w	800ed68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eedc:	2300      	movs	r3, #0
}
 800eede:	4618      	mov	r0, r3
 800eee0:	3770      	adds	r7, #112	; 0x70
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
	...

0800eee8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eee8:	b480      	push	{r7}
 800eeea:	b0a3      	sub	sp, #140	; 0x8c
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	60f8      	str	r0, [r7, #12]
 800eef0:	60b9      	str	r1, [r7, #8]
 800eef2:	4613      	mov	r3, r2
 800eef4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	68ba      	ldr	r2, [r7, #8]
 800eefa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	88fa      	ldrh	r2, [r7, #6]
 800ef00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	88fa      	ldrh	r2, [r7, #6]
 800ef08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	2200      	movs	r2, #0
 800ef10:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	689b      	ldr	r3, [r3, #8]
 800ef16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef1a:	d10e      	bne.n	800ef3a <UART_Start_Receive_IT+0x52>
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	691b      	ldr	r3, [r3, #16]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d105      	bne.n	800ef30 <UART_Start_Receive_IT+0x48>
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ef2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef2e:	e02d      	b.n	800ef8c <UART_Start_Receive_IT+0xa4>
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	22ff      	movs	r2, #255	; 0xff
 800ef34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef38:	e028      	b.n	800ef8c <UART_Start_Receive_IT+0xa4>
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	689b      	ldr	r3, [r3, #8]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d10d      	bne.n	800ef5e <UART_Start_Receive_IT+0x76>
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	691b      	ldr	r3, [r3, #16]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d104      	bne.n	800ef54 <UART_Start_Receive_IT+0x6c>
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	22ff      	movs	r2, #255	; 0xff
 800ef4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef52:	e01b      	b.n	800ef8c <UART_Start_Receive_IT+0xa4>
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	227f      	movs	r2, #127	; 0x7f
 800ef58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef5c:	e016      	b.n	800ef8c <UART_Start_Receive_IT+0xa4>
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	689b      	ldr	r3, [r3, #8]
 800ef62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ef66:	d10d      	bne.n	800ef84 <UART_Start_Receive_IT+0x9c>
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	691b      	ldr	r3, [r3, #16]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d104      	bne.n	800ef7a <UART_Start_Receive_IT+0x92>
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	227f      	movs	r2, #127	; 0x7f
 800ef74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef78:	e008      	b.n	800ef8c <UART_Start_Receive_IT+0xa4>
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	223f      	movs	r2, #63	; 0x3f
 800ef7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef82:	e003      	b.n	800ef8c <UART_Start_Receive_IT+0xa4>
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	2200      	movs	r2, #0
 800ef88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	2200      	movs	r2, #0
 800ef90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2222      	movs	r2, #34	; 0x22
 800ef98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	3308      	adds	r3, #8
 800efa2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800efa6:	e853 3f00 	ldrex	r3, [r3]
 800efaa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800efac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800efae:	f043 0301 	orr.w	r3, r3, #1
 800efb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	3308      	adds	r3, #8
 800efbc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800efc0:	673a      	str	r2, [r7, #112]	; 0x70
 800efc2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efc4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800efc6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800efc8:	e841 2300 	strex	r3, r2, [r1]
 800efcc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800efce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d1e3      	bne.n	800ef9c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800efd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800efdc:	d153      	bne.n	800f086 <UART_Start_Receive_IT+0x19e>
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800efe4:	88fa      	ldrh	r2, [r7, #6]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d34d      	bcc.n	800f086 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	689b      	ldr	r3, [r3, #8]
 800efee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eff2:	d107      	bne.n	800f004 <UART_Start_Receive_IT+0x11c>
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	691b      	ldr	r3, [r3, #16]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d103      	bne.n	800f004 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	4a4b      	ldr	r2, [pc, #300]	; (800f12c <UART_Start_Receive_IT+0x244>)
 800f000:	671a      	str	r2, [r3, #112]	; 0x70
 800f002:	e002      	b.n	800f00a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	4a4a      	ldr	r2, [pc, #296]	; (800f130 <UART_Start_Receive_IT+0x248>)
 800f008:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	2200      	movs	r2, #0
 800f00e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	691b      	ldr	r3, [r3, #16]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d01a      	beq.n	800f050 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f022:	e853 3f00 	ldrex	r3, [r3]
 800f026:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f02a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f02e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	461a      	mov	r2, r3
 800f038:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f03c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f03e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f040:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f042:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f044:	e841 2300 	strex	r3, r2, [r1]
 800f048:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f04a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d1e4      	bne.n	800f01a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	3308      	adds	r3, #8
 800f056:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f05a:	e853 3f00 	ldrex	r3, [r3]
 800f05e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f066:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	3308      	adds	r3, #8
 800f06e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f070:	64ba      	str	r2, [r7, #72]	; 0x48
 800f072:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f074:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f076:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f078:	e841 2300 	strex	r3, r2, [r1]
 800f07c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f07e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f080:	2b00      	cmp	r3, #0
 800f082:	d1e5      	bne.n	800f050 <UART_Start_Receive_IT+0x168>
 800f084:	e04a      	b.n	800f11c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	689b      	ldr	r3, [r3, #8]
 800f08a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f08e:	d107      	bne.n	800f0a0 <UART_Start_Receive_IT+0x1b8>
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	691b      	ldr	r3, [r3, #16]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d103      	bne.n	800f0a0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	4a26      	ldr	r2, [pc, #152]	; (800f134 <UART_Start_Receive_IT+0x24c>)
 800f09c:	671a      	str	r2, [r3, #112]	; 0x70
 800f09e:	e002      	b.n	800f0a6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	4a25      	ldr	r2, [pc, #148]	; (800f138 <UART_Start_Receive_IT+0x250>)
 800f0a4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	691b      	ldr	r3, [r3, #16]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d019      	beq.n	800f0ea <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0be:	e853 3f00 	ldrex	r3, [r3]
 800f0c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f0ca:	677b      	str	r3, [r7, #116]	; 0x74
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	461a      	mov	r2, r3
 800f0d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f0d4:	637b      	str	r3, [r7, #52]	; 0x34
 800f0d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f0da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0dc:	e841 2300 	strex	r3, r2, [r1]
 800f0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d1e6      	bne.n	800f0b6 <UART_Start_Receive_IT+0x1ce>
 800f0e8:	e018      	b.n	800f11c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	e853 3f00 	ldrex	r3, [r3]
 800f0f6:	613b      	str	r3, [r7, #16]
   return(result);
 800f0f8:	693b      	ldr	r3, [r7, #16]
 800f0fa:	f043 0320 	orr.w	r3, r3, #32
 800f0fe:	67bb      	str	r3, [r7, #120]	; 0x78
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	461a      	mov	r2, r3
 800f106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f108:	623b      	str	r3, [r7, #32]
 800f10a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f10c:	69f9      	ldr	r1, [r7, #28]
 800f10e:	6a3a      	ldr	r2, [r7, #32]
 800f110:	e841 2300 	strex	r3, r2, [r1]
 800f114:	61bb      	str	r3, [r7, #24]
   return(result);
 800f116:	69bb      	ldr	r3, [r7, #24]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d1e6      	bne.n	800f0ea <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800f11c:	2300      	movs	r3, #0
}
 800f11e:	4618      	mov	r0, r3
 800f120:	378c      	adds	r7, #140	; 0x8c
 800f122:	46bd      	mov	sp, r7
 800f124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f128:	4770      	bx	lr
 800f12a:	bf00      	nop
 800f12c:	0800f845 	.word	0x0800f845
 800f130:	0800f54d 	.word	0x0800f54d
 800f134:	0800f3eb 	.word	0x0800f3eb
 800f138:	0800f28b 	.word	0x0800f28b

0800f13c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f13c:	b480      	push	{r7}
 800f13e:	b095      	sub	sp, #84	; 0x54
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f14c:	e853 3f00 	ldrex	r3, [r3]
 800f150:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f154:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f158:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	461a      	mov	r2, r3
 800f160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f162:	643b      	str	r3, [r7, #64]	; 0x40
 800f164:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f166:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f168:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f16a:	e841 2300 	strex	r3, r2, [r1]
 800f16e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f172:	2b00      	cmp	r3, #0
 800f174:	d1e6      	bne.n	800f144 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	3308      	adds	r3, #8
 800f17c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f17e:	6a3b      	ldr	r3, [r7, #32]
 800f180:	e853 3f00 	ldrex	r3, [r3]
 800f184:	61fb      	str	r3, [r7, #28]
   return(result);
 800f186:	69fa      	ldr	r2, [r7, #28]
 800f188:	4b1e      	ldr	r3, [pc, #120]	; (800f204 <UART_EndRxTransfer+0xc8>)
 800f18a:	4013      	ands	r3, r2
 800f18c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	3308      	adds	r3, #8
 800f194:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f196:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f198:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f19a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f19c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f19e:	e841 2300 	strex	r3, r2, [r1]
 800f1a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d1e5      	bne.n	800f176 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1ae:	2b01      	cmp	r3, #1
 800f1b0:	d118      	bne.n	800f1e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	e853 3f00 	ldrex	r3, [r3]
 800f1be:	60bb      	str	r3, [r7, #8]
   return(result);
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	f023 0310 	bic.w	r3, r3, #16
 800f1c6:	647b      	str	r3, [r7, #68]	; 0x44
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	461a      	mov	r2, r3
 800f1ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1d0:	61bb      	str	r3, [r7, #24]
 800f1d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1d4:	6979      	ldr	r1, [r7, #20]
 800f1d6:	69ba      	ldr	r2, [r7, #24]
 800f1d8:	e841 2300 	strex	r3, r2, [r1]
 800f1dc:	613b      	str	r3, [r7, #16]
   return(result);
 800f1de:	693b      	ldr	r3, [r7, #16]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d1e6      	bne.n	800f1b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2220      	movs	r2, #32
 800f1e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f1f8:	bf00      	nop
 800f1fa:	3754      	adds	r7, #84	; 0x54
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f202:	4770      	bx	lr
 800f204:	effffffe 	.word	0xeffffffe

0800f208 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b084      	sub	sp, #16
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f214:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	2200      	movs	r2, #0
 800f21a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	2200      	movs	r2, #0
 800f222:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f226:	68f8      	ldr	r0, [r7, #12]
 800f228:	f7fe ff2a 	bl	800e080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f22c:	bf00      	nop
 800f22e:	3710      	adds	r7, #16
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}

0800f234 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b088      	sub	sp, #32
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	e853 3f00 	ldrex	r3, [r3]
 800f248:	60bb      	str	r3, [r7, #8]
   return(result);
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f250:	61fb      	str	r3, [r7, #28]
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	461a      	mov	r2, r3
 800f258:	69fb      	ldr	r3, [r7, #28]
 800f25a:	61bb      	str	r3, [r7, #24]
 800f25c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f25e:	6979      	ldr	r1, [r7, #20]
 800f260:	69ba      	ldr	r2, [r7, #24]
 800f262:	e841 2300 	strex	r3, r2, [r1]
 800f266:	613b      	str	r3, [r7, #16]
   return(result);
 800f268:	693b      	ldr	r3, [r7, #16]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d1e6      	bne.n	800f23c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2220      	movs	r2, #32
 800f272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2200      	movs	r2, #0
 800f27a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f7fe fef5 	bl	800e06c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f282:	bf00      	nop
 800f284:	3720      	adds	r7, #32
 800f286:	46bd      	mov	sp, r7
 800f288:	bd80      	pop	{r7, pc}

0800f28a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f28a:	b580      	push	{r7, lr}
 800f28c:	b096      	sub	sp, #88	; 0x58
 800f28e:	af00      	add	r7, sp, #0
 800f290:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f298:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f2a2:	2b22      	cmp	r3, #34	; 0x22
 800f2a4:	f040 8095 	bne.w	800f3d2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2ae:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f2b2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f2b6:	b2d9      	uxtb	r1, r3
 800f2b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f2bc:	b2da      	uxtb	r2, r3
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2c2:	400a      	ands	r2, r1
 800f2c4:	b2d2      	uxtb	r2, r2
 800f2c6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2cc:	1c5a      	adds	r2, r3, #1
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f2d8:	b29b      	uxth	r3, r3
 800f2da:	3b01      	subs	r3, #1
 800f2dc:	b29a      	uxth	r2, r3
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f2ea:	b29b      	uxth	r3, r3
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d178      	bne.n	800f3e2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f8:	e853 3f00 	ldrex	r3, [r3]
 800f2fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f2fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f300:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f304:	653b      	str	r3, [r7, #80]	; 0x50
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	461a      	mov	r2, r3
 800f30c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f30e:	647b      	str	r3, [r7, #68]	; 0x44
 800f310:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f312:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f314:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f316:	e841 2300 	strex	r3, r2, [r1]
 800f31a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f31c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d1e6      	bne.n	800f2f0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	3308      	adds	r3, #8
 800f328:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f32c:	e853 3f00 	ldrex	r3, [r3]
 800f330:	623b      	str	r3, [r7, #32]
   return(result);
 800f332:	6a3b      	ldr	r3, [r7, #32]
 800f334:	f023 0301 	bic.w	r3, r3, #1
 800f338:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	3308      	adds	r3, #8
 800f340:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f342:	633a      	str	r2, [r7, #48]	; 0x30
 800f344:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f346:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f34a:	e841 2300 	strex	r3, r2, [r1]
 800f34e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f352:	2b00      	cmp	r3, #0
 800f354:	d1e5      	bne.n	800f322 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2220      	movs	r2, #32
 800f35a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	2200      	movs	r2, #0
 800f362:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f368:	2b01      	cmp	r3, #1
 800f36a:	d12e      	bne.n	800f3ca <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2200      	movs	r2, #0
 800f370:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	e853 3f00 	ldrex	r3, [r3]
 800f37e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	f023 0310 	bic.w	r3, r3, #16
 800f386:	64bb      	str	r3, [r7, #72]	; 0x48
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	461a      	mov	r2, r3
 800f38e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f390:	61fb      	str	r3, [r7, #28]
 800f392:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f394:	69b9      	ldr	r1, [r7, #24]
 800f396:	69fa      	ldr	r2, [r7, #28]
 800f398:	e841 2300 	strex	r3, r2, [r1]
 800f39c:	617b      	str	r3, [r7, #20]
   return(result);
 800f39e:	697b      	ldr	r3, [r7, #20]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d1e6      	bne.n	800f372 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	69db      	ldr	r3, [r3, #28]
 800f3aa:	f003 0310 	and.w	r3, r3, #16
 800f3ae:	2b10      	cmp	r3, #16
 800f3b0:	d103      	bne.n	800f3ba <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	2210      	movs	r2, #16
 800f3b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f3c0:	4619      	mov	r1, r3
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f7fe fe66 	bl	800e094 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f3c8:	e00b      	b.n	800f3e2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f7f1 fd08 	bl	8000de0 <HAL_UART_RxCpltCallback>
}
 800f3d0:	e007      	b.n	800f3e2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	699a      	ldr	r2, [r3, #24]
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	f042 0208 	orr.w	r2, r2, #8
 800f3e0:	619a      	str	r2, [r3, #24]
}
 800f3e2:	bf00      	nop
 800f3e4:	3758      	adds	r7, #88	; 0x58
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}

0800f3ea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f3ea:	b580      	push	{r7, lr}
 800f3ec:	b096      	sub	sp, #88	; 0x58
 800f3ee:	af00      	add	r7, sp, #0
 800f3f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f3f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f402:	2b22      	cmp	r3, #34	; 0x22
 800f404:	f040 8095 	bne.w	800f532 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f40e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f416:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f418:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f41c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f420:	4013      	ands	r3, r2
 800f422:	b29a      	uxth	r2, r3
 800f424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f426:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f42c:	1c9a      	adds	r2, r3, #2
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f438:	b29b      	uxth	r3, r3
 800f43a:	3b01      	subs	r3, #1
 800f43c:	b29a      	uxth	r2, r3
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f44a:	b29b      	uxth	r3, r3
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d178      	bne.n	800f542 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f458:	e853 3f00 	ldrex	r3, [r3]
 800f45c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f460:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f464:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	461a      	mov	r2, r3
 800f46c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f46e:	643b      	str	r3, [r7, #64]	; 0x40
 800f470:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f472:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f474:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f476:	e841 2300 	strex	r3, r2, [r1]
 800f47a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d1e6      	bne.n	800f450 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	3308      	adds	r3, #8
 800f488:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f48a:	6a3b      	ldr	r3, [r7, #32]
 800f48c:	e853 3f00 	ldrex	r3, [r3]
 800f490:	61fb      	str	r3, [r7, #28]
   return(result);
 800f492:	69fb      	ldr	r3, [r7, #28]
 800f494:	f023 0301 	bic.w	r3, r3, #1
 800f498:	64bb      	str	r3, [r7, #72]	; 0x48
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	3308      	adds	r3, #8
 800f4a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f4a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f4a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4aa:	e841 2300 	strex	r3, r2, [r1]
 800f4ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d1e5      	bne.n	800f482 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2220      	movs	r2, #32
 800f4ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4c8:	2b01      	cmp	r3, #1
 800f4ca:	d12e      	bne.n	800f52a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	e853 3f00 	ldrex	r3, [r3]
 800f4de:	60bb      	str	r3, [r7, #8]
   return(result);
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	f023 0310 	bic.w	r3, r3, #16
 800f4e6:	647b      	str	r3, [r7, #68]	; 0x44
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	461a      	mov	r2, r3
 800f4ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4f0:	61bb      	str	r3, [r7, #24]
 800f4f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4f4:	6979      	ldr	r1, [r7, #20]
 800f4f6:	69ba      	ldr	r2, [r7, #24]
 800f4f8:	e841 2300 	strex	r3, r2, [r1]
 800f4fc:	613b      	str	r3, [r7, #16]
   return(result);
 800f4fe:	693b      	ldr	r3, [r7, #16]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d1e6      	bne.n	800f4d2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	69db      	ldr	r3, [r3, #28]
 800f50a:	f003 0310 	and.w	r3, r3, #16
 800f50e:	2b10      	cmp	r3, #16
 800f510:	d103      	bne.n	800f51a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	2210      	movs	r2, #16
 800f518:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f520:	4619      	mov	r1, r3
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f7fe fdb6 	bl	800e094 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f528:	e00b      	b.n	800f542 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f7f1 fc58 	bl	8000de0 <HAL_UART_RxCpltCallback>
}
 800f530:	e007      	b.n	800f542 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	699a      	ldr	r2, [r3, #24]
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	f042 0208 	orr.w	r2, r2, #8
 800f540:	619a      	str	r2, [r3, #24]
}
 800f542:	bf00      	nop
 800f544:	3758      	adds	r7, #88	; 0x58
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}
	...

0800f54c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b0a6      	sub	sp, #152	; 0x98
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f55a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	69db      	ldr	r3, [r3, #28]
 800f564:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	689b      	ldr	r3, [r3, #8]
 800f578:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f582:	2b22      	cmp	r3, #34	; 0x22
 800f584:	f040 814d 	bne.w	800f822 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f58e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f592:	e0f4      	b.n	800f77e <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f59a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f59e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800f5a2:	b2d9      	uxtb	r1, r3
 800f5a4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800f5a8:	b2da      	uxtb	r2, r3
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5ae:	400a      	ands	r2, r1
 800f5b0:	b2d2      	uxtb	r2, r2
 800f5b2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5b8:	1c5a      	adds	r2, r3, #1
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f5c4:	b29b      	uxth	r3, r3
 800f5c6:	3b01      	subs	r3, #1
 800f5c8:	b29a      	uxth	r2, r3
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	69db      	ldr	r3, [r3, #28]
 800f5d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f5da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f5de:	f003 0307 	and.w	r3, r3, #7
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d053      	beq.n	800f68e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f5e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f5ea:	f003 0301 	and.w	r3, r3, #1
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d011      	beq.n	800f616 <UART_RxISR_8BIT_FIFOEN+0xca>
 800f5f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f5f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d00b      	beq.n	800f616 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	2201      	movs	r2, #1
 800f604:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f60c:	f043 0201 	orr.w	r2, r3, #1
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f616:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f61a:	f003 0302 	and.w	r3, r3, #2
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d011      	beq.n	800f646 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f622:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f626:	f003 0301 	and.w	r3, r3, #1
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d00b      	beq.n	800f646 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	2202      	movs	r2, #2
 800f634:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f63c:	f043 0204 	orr.w	r2, r3, #4
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f646:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f64a:	f003 0304 	and.w	r3, r3, #4
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d011      	beq.n	800f676 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f652:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f656:	f003 0301 	and.w	r3, r3, #1
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d00b      	beq.n	800f676 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	2204      	movs	r2, #4
 800f664:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f66c:	f043 0202 	orr.w	r2, r3, #2
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d006      	beq.n	800f68e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f7fe fcfd 	bl	800e080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2200      	movs	r2, #0
 800f68a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f694:	b29b      	uxth	r3, r3
 800f696:	2b00      	cmp	r3, #0
 800f698:	d171      	bne.n	800f77e <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6a2:	e853 3f00 	ldrex	r3, [r3]
 800f6a6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f6a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f6ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	461a      	mov	r2, r3
 800f6b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f6bc:	66bb      	str	r3, [r7, #104]	; 0x68
 800f6be:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6c0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f6c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f6c4:	e841 2300 	strex	r3, r2, [r1]
 800f6c8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f6ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d1e4      	bne.n	800f69a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	3308      	adds	r3, #8
 800f6d6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6da:	e853 3f00 	ldrex	r3, [r3]
 800f6de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f6e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f6e2:	4b56      	ldr	r3, [pc, #344]	; (800f83c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800f6e4:	4013      	ands	r3, r2
 800f6e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	3308      	adds	r3, #8
 800f6ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f6f0:	657a      	str	r2, [r7, #84]	; 0x54
 800f6f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f6f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f6f8:	e841 2300 	strex	r3, r2, [r1]
 800f6fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f6fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f700:	2b00      	cmp	r3, #0
 800f702:	d1e5      	bne.n	800f6d0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	2220      	movs	r2, #32
 800f708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2200      	movs	r2, #0
 800f710:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f716:	2b01      	cmp	r3, #1
 800f718:	d12e      	bne.n	800f778 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	2200      	movs	r2, #0
 800f71e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f728:	e853 3f00 	ldrex	r3, [r3]
 800f72c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f730:	f023 0310 	bic.w	r3, r3, #16
 800f734:	67bb      	str	r3, [r7, #120]	; 0x78
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	461a      	mov	r2, r3
 800f73c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f73e:	643b      	str	r3, [r7, #64]	; 0x40
 800f740:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f742:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f744:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f746:	e841 2300 	strex	r3, r2, [r1]
 800f74a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d1e6      	bne.n	800f720 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	69db      	ldr	r3, [r3, #28]
 800f758:	f003 0310 	and.w	r3, r3, #16
 800f75c:	2b10      	cmp	r3, #16
 800f75e:	d103      	bne.n	800f768 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	2210      	movs	r2, #16
 800f766:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f76e:	4619      	mov	r1, r3
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f7fe fc8f 	bl	800e094 <HAL_UARTEx_RxEventCallback>
 800f776:	e002      	b.n	800f77e <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f7f1 fb31 	bl	8000de0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f77e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f782:	2b00      	cmp	r3, #0
 800f784:	d006      	beq.n	800f794 <UART_RxISR_8BIT_FIFOEN+0x248>
 800f786:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f78a:	f003 0320 	and.w	r3, r3, #32
 800f78e:	2b00      	cmp	r3, #0
 800f790:	f47f af00 	bne.w	800f594 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f79a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f79e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d045      	beq.n	800f832 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f7ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f7b0:	429a      	cmp	r2, r3
 800f7b2:	d23e      	bcs.n	800f832 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	3308      	adds	r3, #8
 800f7ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7bc:	6a3b      	ldr	r3, [r7, #32]
 800f7be:	e853 3f00 	ldrex	r3, [r3]
 800f7c2:	61fb      	str	r3, [r7, #28]
   return(result);
 800f7c4:	69fb      	ldr	r3, [r7, #28]
 800f7c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f7ca:	673b      	str	r3, [r7, #112]	; 0x70
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	3308      	adds	r3, #8
 800f7d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f7d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f7d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f7da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7dc:	e841 2300 	strex	r3, r2, [r1]
 800f7e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d1e5      	bne.n	800f7b4 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	4a15      	ldr	r2, [pc, #84]	; (800f840 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800f7ec:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	e853 3f00 	ldrex	r3, [r3]
 800f7fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	f043 0320 	orr.w	r3, r3, #32
 800f802:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	461a      	mov	r2, r3
 800f80a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f80c:	61bb      	str	r3, [r7, #24]
 800f80e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f810:	6979      	ldr	r1, [r7, #20]
 800f812:	69ba      	ldr	r2, [r7, #24]
 800f814:	e841 2300 	strex	r3, r2, [r1]
 800f818:	613b      	str	r3, [r7, #16]
   return(result);
 800f81a:	693b      	ldr	r3, [r7, #16]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d1e6      	bne.n	800f7ee <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f820:	e007      	b.n	800f832 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	699a      	ldr	r2, [r3, #24]
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	f042 0208 	orr.w	r2, r2, #8
 800f830:	619a      	str	r2, [r3, #24]
}
 800f832:	bf00      	nop
 800f834:	3798      	adds	r7, #152	; 0x98
 800f836:	46bd      	mov	sp, r7
 800f838:	bd80      	pop	{r7, pc}
 800f83a:	bf00      	nop
 800f83c:	effffffe 	.word	0xeffffffe
 800f840:	0800f28b 	.word	0x0800f28b

0800f844 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b0a8      	sub	sp, #160	; 0xa0
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f852:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	69db      	ldr	r3, [r3, #28]
 800f85c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	689b      	ldr	r3, [r3, #8]
 800f870:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f87a:	2b22      	cmp	r3, #34	; 0x22
 800f87c:	f040 8151 	bne.w	800fb22 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f886:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f88a:	e0f8      	b.n	800fa7e <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f892:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f89a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800f89e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800f8a2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800f8a6:	4013      	ands	r3, r2
 800f8a8:	b29a      	uxth	r2, r3
 800f8aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8b4:	1c9a      	adds	r2, r3, #2
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f8c0:	b29b      	uxth	r3, r3
 800f8c2:	3b01      	subs	r3, #1
 800f8c4:	b29a      	uxth	r2, r3
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	69db      	ldr	r3, [r3, #28]
 800f8d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f8d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f8da:	f003 0307 	and.w	r3, r3, #7
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d053      	beq.n	800f98a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f8e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f8e6:	f003 0301 	and.w	r3, r3, #1
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d011      	beq.n	800f912 <UART_RxISR_16BIT_FIFOEN+0xce>
 800f8ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f8f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d00b      	beq.n	800f912 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	2201      	movs	r2, #1
 800f900:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f908:	f043 0201 	orr.w	r2, r3, #1
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f912:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f916:	f003 0302 	and.w	r3, r3, #2
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d011      	beq.n	800f942 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f91e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f922:	f003 0301 	and.w	r3, r3, #1
 800f926:	2b00      	cmp	r3, #0
 800f928:	d00b      	beq.n	800f942 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	2202      	movs	r2, #2
 800f930:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f938:	f043 0204 	orr.w	r2, r3, #4
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f942:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f946:	f003 0304 	and.w	r3, r3, #4
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d011      	beq.n	800f972 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f94e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f952:	f003 0301 	and.w	r3, r3, #1
 800f956:	2b00      	cmp	r3, #0
 800f958:	d00b      	beq.n	800f972 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	2204      	movs	r2, #4
 800f960:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f968:	f043 0202 	orr.w	r2, r3, #2
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d006      	beq.n	800f98a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	f7fe fb7f 	bl	800e080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	2200      	movs	r2, #0
 800f986:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f990:	b29b      	uxth	r3, r3
 800f992:	2b00      	cmp	r3, #0
 800f994:	d173      	bne.n	800fa7e <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f99c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f99e:	e853 3f00 	ldrex	r3, [r3]
 800f9a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f9a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f9aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	461a      	mov	r2, r3
 800f9b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f9b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f9ba:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f9be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f9c0:	e841 2300 	strex	r3, r2, [r1]
 800f9c4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f9c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d1e4      	bne.n	800f996 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	3308      	adds	r3, #8
 800f9d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9d6:	e853 3f00 	ldrex	r3, [r3]
 800f9da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f9dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f9de:	4b57      	ldr	r3, [pc, #348]	; (800fb3c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800f9e0:	4013      	ands	r3, r2
 800f9e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	3308      	adds	r3, #8
 800f9ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f9f0:	65ba      	str	r2, [r7, #88]	; 0x58
 800f9f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f9f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f9f8:	e841 2300 	strex	r3, r2, [r1]
 800f9fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f9fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d1e3      	bne.n	800f9cc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2220      	movs	r2, #32
 800fa08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2200      	movs	r2, #0
 800fa10:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa16:	2b01      	cmp	r3, #1
 800fa18:	d12e      	bne.n	800fa78 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa28:	e853 3f00 	ldrex	r3, [r3]
 800fa2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fa2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa30:	f023 0310 	bic.w	r3, r3, #16
 800fa34:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	461a      	mov	r2, r3
 800fa3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fa3e:	647b      	str	r3, [r7, #68]	; 0x44
 800fa40:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fa44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa46:	e841 2300 	strex	r3, r2, [r1]
 800fa4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fa4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d1e6      	bne.n	800fa20 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	69db      	ldr	r3, [r3, #28]
 800fa58:	f003 0310 	and.w	r3, r3, #16
 800fa5c:	2b10      	cmp	r3, #16
 800fa5e:	d103      	bne.n	800fa68 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	2210      	movs	r2, #16
 800fa66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fa6e:	4619      	mov	r1, r3
 800fa70:	6878      	ldr	r0, [r7, #4]
 800fa72:	f7fe fb0f 	bl	800e094 <HAL_UARTEx_RxEventCallback>
 800fa76:	e002      	b.n	800fa7e <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f7f1 f9b1 	bl	8000de0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fa7e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d006      	beq.n	800fa94 <UART_RxISR_16BIT_FIFOEN+0x250>
 800fa86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fa8a:	f003 0320 	and.w	r3, r3, #32
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	f47f aefc 	bne.w	800f88c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fa9a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fa9e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d045      	beq.n	800fb32 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800faac:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800fab0:	429a      	cmp	r2, r3
 800fab2:	d23e      	bcs.n	800fb32 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	3308      	adds	r3, #8
 800faba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fabe:	e853 3f00 	ldrex	r3, [r3]
 800fac2:	623b      	str	r3, [r7, #32]
   return(result);
 800fac4:	6a3b      	ldr	r3, [r7, #32]
 800fac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800faca:	677b      	str	r3, [r7, #116]	; 0x74
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	3308      	adds	r3, #8
 800fad2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fad4:	633a      	str	r2, [r7, #48]	; 0x30
 800fad6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fad8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fadc:	e841 2300 	strex	r3, r2, [r1]
 800fae0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d1e5      	bne.n	800fab4 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	4a15      	ldr	r2, [pc, #84]	; (800fb40 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800faec:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	e853 3f00 	ldrex	r3, [r3]
 800fafa:	60fb      	str	r3, [r7, #12]
   return(result);
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	f043 0320 	orr.w	r3, r3, #32
 800fb02:	673b      	str	r3, [r7, #112]	; 0x70
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	461a      	mov	r2, r3
 800fb0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb0c:	61fb      	str	r3, [r7, #28]
 800fb0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb10:	69b9      	ldr	r1, [r7, #24]
 800fb12:	69fa      	ldr	r2, [r7, #28]
 800fb14:	e841 2300 	strex	r3, r2, [r1]
 800fb18:	617b      	str	r3, [r7, #20]
   return(result);
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d1e6      	bne.n	800faee <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fb20:	e007      	b.n	800fb32 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	699a      	ldr	r2, [r3, #24]
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	f042 0208 	orr.w	r2, r2, #8
 800fb30:	619a      	str	r2, [r3, #24]
}
 800fb32:	bf00      	nop
 800fb34:	37a0      	adds	r7, #160	; 0xa0
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}
 800fb3a:	bf00      	nop
 800fb3c:	effffffe 	.word	0xeffffffe
 800fb40:	0800f3eb 	.word	0x0800f3eb

0800fb44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fb44:	b480      	push	{r7}
 800fb46:	b083      	sub	sp, #12
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fb4c:	bf00      	nop
 800fb4e:	370c      	adds	r7, #12
 800fb50:	46bd      	mov	sp, r7
 800fb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb56:	4770      	bx	lr

0800fb58 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fb58:	b480      	push	{r7}
 800fb5a:	b083      	sub	sp, #12
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fb60:	bf00      	nop
 800fb62:	370c      	adds	r7, #12
 800fb64:	46bd      	mov	sp, r7
 800fb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6a:	4770      	bx	lr

0800fb6c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fb6c:	b480      	push	{r7}
 800fb6e:	b083      	sub	sp, #12
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fb74:	bf00      	nop
 800fb76:	370c      	adds	r7, #12
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7e:	4770      	bx	lr

0800fb80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fb80:	b480      	push	{r7}
 800fb82:	b085      	sub	sp, #20
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fb8e:	2b01      	cmp	r3, #1
 800fb90:	d101      	bne.n	800fb96 <HAL_UARTEx_DisableFifoMode+0x16>
 800fb92:	2302      	movs	r3, #2
 800fb94:	e027      	b.n	800fbe6 <HAL_UARTEx_DisableFifoMode+0x66>
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2201      	movs	r2, #1
 800fb9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2224      	movs	r2, #36	; 0x24
 800fba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	681a      	ldr	r2, [r3, #0]
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	f022 0201 	bic.w	r2, r2, #1
 800fbbc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fbc4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	68fa      	ldr	r2, [r7, #12]
 800fbd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	2220      	movs	r2, #32
 800fbd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2200      	movs	r2, #0
 800fbe0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fbe4:	2300      	movs	r3, #0
}
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	3714      	adds	r7, #20
 800fbea:	46bd      	mov	sp, r7
 800fbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf0:	4770      	bx	lr

0800fbf2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fbf2:	b580      	push	{r7, lr}
 800fbf4:	b084      	sub	sp, #16
 800fbf6:	af00      	add	r7, sp, #0
 800fbf8:	6078      	str	r0, [r7, #4]
 800fbfa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fc02:	2b01      	cmp	r3, #1
 800fc04:	d101      	bne.n	800fc0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fc06:	2302      	movs	r3, #2
 800fc08:	e02d      	b.n	800fc66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2201      	movs	r2, #1
 800fc0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	2224      	movs	r2, #36	; 0x24
 800fc16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	681a      	ldr	r2, [r3, #0]
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	f022 0201 	bic.w	r2, r2, #1
 800fc30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	689b      	ldr	r3, [r3, #8]
 800fc38:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	683a      	ldr	r2, [r7, #0]
 800fc42:	430a      	orrs	r2, r1
 800fc44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f000 f850 	bl	800fcec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	68fa      	ldr	r2, [r7, #12]
 800fc52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	2220      	movs	r2, #32
 800fc58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2200      	movs	r2, #0
 800fc60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fc64:	2300      	movs	r3, #0
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	3710      	adds	r7, #16
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd80      	pop	{r7, pc}

0800fc6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc6e:	b580      	push	{r7, lr}
 800fc70:	b084      	sub	sp, #16
 800fc72:	af00      	add	r7, sp, #0
 800fc74:	6078      	str	r0, [r7, #4]
 800fc76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fc7e:	2b01      	cmp	r3, #1
 800fc80:	d101      	bne.n	800fc86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fc82:	2302      	movs	r3, #2
 800fc84:	e02d      	b.n	800fce2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2201      	movs	r2, #1
 800fc8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2224      	movs	r2, #36	; 0x24
 800fc92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	681a      	ldr	r2, [r3, #0]
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	f022 0201 	bic.w	r2, r2, #1
 800fcac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	689b      	ldr	r3, [r3, #8]
 800fcb4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	683a      	ldr	r2, [r7, #0]
 800fcbe:	430a      	orrs	r2, r1
 800fcc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f000 f812 	bl	800fcec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	68fa      	ldr	r2, [r7, #12]
 800fcce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2220      	movs	r2, #32
 800fcd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fce0:	2300      	movs	r3, #0
}
 800fce2:	4618      	mov	r0, r3
 800fce4:	3710      	adds	r7, #16
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}
	...

0800fcec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fcec:	b480      	push	{r7}
 800fcee:	b085      	sub	sp, #20
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d108      	bne.n	800fd0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2201      	movs	r2, #1
 800fd00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2201      	movs	r2, #1
 800fd08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fd0c:	e031      	b.n	800fd72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fd0e:	2310      	movs	r3, #16
 800fd10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fd12:	2310      	movs	r3, #16
 800fd14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	689b      	ldr	r3, [r3, #8]
 800fd1c:	0e5b      	lsrs	r3, r3, #25
 800fd1e:	b2db      	uxtb	r3, r3
 800fd20:	f003 0307 	and.w	r3, r3, #7
 800fd24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	689b      	ldr	r3, [r3, #8]
 800fd2c:	0f5b      	lsrs	r3, r3, #29
 800fd2e:	b2db      	uxtb	r3, r3
 800fd30:	f003 0307 	and.w	r3, r3, #7
 800fd34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd36:	7bbb      	ldrb	r3, [r7, #14]
 800fd38:	7b3a      	ldrb	r2, [r7, #12]
 800fd3a:	4911      	ldr	r1, [pc, #68]	; (800fd80 <UARTEx_SetNbDataToProcess+0x94>)
 800fd3c:	5c8a      	ldrb	r2, [r1, r2]
 800fd3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fd42:	7b3a      	ldrb	r2, [r7, #12]
 800fd44:	490f      	ldr	r1, [pc, #60]	; (800fd84 <UARTEx_SetNbDataToProcess+0x98>)
 800fd46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd48:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd4c:	b29a      	uxth	r2, r3
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd54:	7bfb      	ldrb	r3, [r7, #15]
 800fd56:	7b7a      	ldrb	r2, [r7, #13]
 800fd58:	4909      	ldr	r1, [pc, #36]	; (800fd80 <UARTEx_SetNbDataToProcess+0x94>)
 800fd5a:	5c8a      	ldrb	r2, [r1, r2]
 800fd5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fd60:	7b7a      	ldrb	r2, [r7, #13]
 800fd62:	4908      	ldr	r1, [pc, #32]	; (800fd84 <UARTEx_SetNbDataToProcess+0x98>)
 800fd64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd66:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd6a:	b29a      	uxth	r2, r3
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fd72:	bf00      	nop
 800fd74:	3714      	adds	r7, #20
 800fd76:	46bd      	mov	sp, r7
 800fd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7c:	4770      	bx	lr
 800fd7e:	bf00      	nop
 800fd80:	08010084 	.word	0x08010084
 800fd84:	0801008c 	.word	0x0801008c

0800fd88 <__errno>:
 800fd88:	4b01      	ldr	r3, [pc, #4]	; (800fd90 <__errno+0x8>)
 800fd8a:	6818      	ldr	r0, [r3, #0]
 800fd8c:	4770      	bx	lr
 800fd8e:	bf00      	nop
 800fd90:	24000034 	.word	0x24000034

0800fd94 <__libc_init_array>:
 800fd94:	b570      	push	{r4, r5, r6, lr}
 800fd96:	4d0d      	ldr	r5, [pc, #52]	; (800fdcc <__libc_init_array+0x38>)
 800fd98:	4c0d      	ldr	r4, [pc, #52]	; (800fdd0 <__libc_init_array+0x3c>)
 800fd9a:	1b64      	subs	r4, r4, r5
 800fd9c:	10a4      	asrs	r4, r4, #2
 800fd9e:	2600      	movs	r6, #0
 800fda0:	42a6      	cmp	r6, r4
 800fda2:	d109      	bne.n	800fdb8 <__libc_init_array+0x24>
 800fda4:	4d0b      	ldr	r5, [pc, #44]	; (800fdd4 <__libc_init_array+0x40>)
 800fda6:	4c0c      	ldr	r4, [pc, #48]	; (800fdd8 <__libc_init_array+0x44>)
 800fda8:	f000 f93c 	bl	8010024 <_init>
 800fdac:	1b64      	subs	r4, r4, r5
 800fdae:	10a4      	asrs	r4, r4, #2
 800fdb0:	2600      	movs	r6, #0
 800fdb2:	42a6      	cmp	r6, r4
 800fdb4:	d105      	bne.n	800fdc2 <__libc_init_array+0x2e>
 800fdb6:	bd70      	pop	{r4, r5, r6, pc}
 800fdb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800fdbc:	4798      	blx	r3
 800fdbe:	3601      	adds	r6, #1
 800fdc0:	e7ee      	b.n	800fda0 <__libc_init_array+0xc>
 800fdc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800fdc6:	4798      	blx	r3
 800fdc8:	3601      	adds	r6, #1
 800fdca:	e7f2      	b.n	800fdb2 <__libc_init_array+0x1e>
 800fdcc:	0801009c 	.word	0x0801009c
 800fdd0:	0801009c 	.word	0x0801009c
 800fdd4:	0801009c 	.word	0x0801009c
 800fdd8:	080100a0 	.word	0x080100a0

0800fddc <malloc>:
 800fddc:	4b02      	ldr	r3, [pc, #8]	; (800fde8 <malloc+0xc>)
 800fdde:	4601      	mov	r1, r0
 800fde0:	6818      	ldr	r0, [r3, #0]
 800fde2:	f000 b88d 	b.w	800ff00 <_malloc_r>
 800fde6:	bf00      	nop
 800fde8:	24000034 	.word	0x24000034

0800fdec <free>:
 800fdec:	4b02      	ldr	r3, [pc, #8]	; (800fdf8 <free+0xc>)
 800fdee:	4601      	mov	r1, r0
 800fdf0:	6818      	ldr	r0, [r3, #0]
 800fdf2:	f000 b819 	b.w	800fe28 <_free_r>
 800fdf6:	bf00      	nop
 800fdf8:	24000034 	.word	0x24000034

0800fdfc <memcpy>:
 800fdfc:	440a      	add	r2, r1
 800fdfe:	4291      	cmp	r1, r2
 800fe00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fe04:	d100      	bne.n	800fe08 <memcpy+0xc>
 800fe06:	4770      	bx	lr
 800fe08:	b510      	push	{r4, lr}
 800fe0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe12:	4291      	cmp	r1, r2
 800fe14:	d1f9      	bne.n	800fe0a <memcpy+0xe>
 800fe16:	bd10      	pop	{r4, pc}

0800fe18 <memset>:
 800fe18:	4402      	add	r2, r0
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	4293      	cmp	r3, r2
 800fe1e:	d100      	bne.n	800fe22 <memset+0xa>
 800fe20:	4770      	bx	lr
 800fe22:	f803 1b01 	strb.w	r1, [r3], #1
 800fe26:	e7f9      	b.n	800fe1c <memset+0x4>

0800fe28 <_free_r>:
 800fe28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe2a:	2900      	cmp	r1, #0
 800fe2c:	d044      	beq.n	800feb8 <_free_r+0x90>
 800fe2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe32:	9001      	str	r0, [sp, #4]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	f1a1 0404 	sub.w	r4, r1, #4
 800fe3a:	bfb8      	it	lt
 800fe3c:	18e4      	addlt	r4, r4, r3
 800fe3e:	f000 f8e3 	bl	8010008 <__malloc_lock>
 800fe42:	4a1e      	ldr	r2, [pc, #120]	; (800febc <_free_r+0x94>)
 800fe44:	9801      	ldr	r0, [sp, #4]
 800fe46:	6813      	ldr	r3, [r2, #0]
 800fe48:	b933      	cbnz	r3, 800fe58 <_free_r+0x30>
 800fe4a:	6063      	str	r3, [r4, #4]
 800fe4c:	6014      	str	r4, [r2, #0]
 800fe4e:	b003      	add	sp, #12
 800fe50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe54:	f000 b8de 	b.w	8010014 <__malloc_unlock>
 800fe58:	42a3      	cmp	r3, r4
 800fe5a:	d908      	bls.n	800fe6e <_free_r+0x46>
 800fe5c:	6825      	ldr	r5, [r4, #0]
 800fe5e:	1961      	adds	r1, r4, r5
 800fe60:	428b      	cmp	r3, r1
 800fe62:	bf01      	itttt	eq
 800fe64:	6819      	ldreq	r1, [r3, #0]
 800fe66:	685b      	ldreq	r3, [r3, #4]
 800fe68:	1949      	addeq	r1, r1, r5
 800fe6a:	6021      	streq	r1, [r4, #0]
 800fe6c:	e7ed      	b.n	800fe4a <_free_r+0x22>
 800fe6e:	461a      	mov	r2, r3
 800fe70:	685b      	ldr	r3, [r3, #4]
 800fe72:	b10b      	cbz	r3, 800fe78 <_free_r+0x50>
 800fe74:	42a3      	cmp	r3, r4
 800fe76:	d9fa      	bls.n	800fe6e <_free_r+0x46>
 800fe78:	6811      	ldr	r1, [r2, #0]
 800fe7a:	1855      	adds	r5, r2, r1
 800fe7c:	42a5      	cmp	r5, r4
 800fe7e:	d10b      	bne.n	800fe98 <_free_r+0x70>
 800fe80:	6824      	ldr	r4, [r4, #0]
 800fe82:	4421      	add	r1, r4
 800fe84:	1854      	adds	r4, r2, r1
 800fe86:	42a3      	cmp	r3, r4
 800fe88:	6011      	str	r1, [r2, #0]
 800fe8a:	d1e0      	bne.n	800fe4e <_free_r+0x26>
 800fe8c:	681c      	ldr	r4, [r3, #0]
 800fe8e:	685b      	ldr	r3, [r3, #4]
 800fe90:	6053      	str	r3, [r2, #4]
 800fe92:	4421      	add	r1, r4
 800fe94:	6011      	str	r1, [r2, #0]
 800fe96:	e7da      	b.n	800fe4e <_free_r+0x26>
 800fe98:	d902      	bls.n	800fea0 <_free_r+0x78>
 800fe9a:	230c      	movs	r3, #12
 800fe9c:	6003      	str	r3, [r0, #0]
 800fe9e:	e7d6      	b.n	800fe4e <_free_r+0x26>
 800fea0:	6825      	ldr	r5, [r4, #0]
 800fea2:	1961      	adds	r1, r4, r5
 800fea4:	428b      	cmp	r3, r1
 800fea6:	bf04      	itt	eq
 800fea8:	6819      	ldreq	r1, [r3, #0]
 800feaa:	685b      	ldreq	r3, [r3, #4]
 800feac:	6063      	str	r3, [r4, #4]
 800feae:	bf04      	itt	eq
 800feb0:	1949      	addeq	r1, r1, r5
 800feb2:	6021      	streq	r1, [r4, #0]
 800feb4:	6054      	str	r4, [r2, #4]
 800feb6:	e7ca      	b.n	800fe4e <_free_r+0x26>
 800feb8:	b003      	add	sp, #12
 800feba:	bd30      	pop	{r4, r5, pc}
 800febc:	2400061c 	.word	0x2400061c

0800fec0 <sbrk_aligned>:
 800fec0:	b570      	push	{r4, r5, r6, lr}
 800fec2:	4e0e      	ldr	r6, [pc, #56]	; (800fefc <sbrk_aligned+0x3c>)
 800fec4:	460c      	mov	r4, r1
 800fec6:	6831      	ldr	r1, [r6, #0]
 800fec8:	4605      	mov	r5, r0
 800feca:	b911      	cbnz	r1, 800fed2 <sbrk_aligned+0x12>
 800fecc:	f000 f88c 	bl	800ffe8 <_sbrk_r>
 800fed0:	6030      	str	r0, [r6, #0]
 800fed2:	4621      	mov	r1, r4
 800fed4:	4628      	mov	r0, r5
 800fed6:	f000 f887 	bl	800ffe8 <_sbrk_r>
 800feda:	1c43      	adds	r3, r0, #1
 800fedc:	d00a      	beq.n	800fef4 <sbrk_aligned+0x34>
 800fede:	1cc4      	adds	r4, r0, #3
 800fee0:	f024 0403 	bic.w	r4, r4, #3
 800fee4:	42a0      	cmp	r0, r4
 800fee6:	d007      	beq.n	800fef8 <sbrk_aligned+0x38>
 800fee8:	1a21      	subs	r1, r4, r0
 800feea:	4628      	mov	r0, r5
 800feec:	f000 f87c 	bl	800ffe8 <_sbrk_r>
 800fef0:	3001      	adds	r0, #1
 800fef2:	d101      	bne.n	800fef8 <sbrk_aligned+0x38>
 800fef4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fef8:	4620      	mov	r0, r4
 800fefa:	bd70      	pop	{r4, r5, r6, pc}
 800fefc:	24000620 	.word	0x24000620

0800ff00 <_malloc_r>:
 800ff00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff04:	1ccd      	adds	r5, r1, #3
 800ff06:	f025 0503 	bic.w	r5, r5, #3
 800ff0a:	3508      	adds	r5, #8
 800ff0c:	2d0c      	cmp	r5, #12
 800ff0e:	bf38      	it	cc
 800ff10:	250c      	movcc	r5, #12
 800ff12:	2d00      	cmp	r5, #0
 800ff14:	4607      	mov	r7, r0
 800ff16:	db01      	blt.n	800ff1c <_malloc_r+0x1c>
 800ff18:	42a9      	cmp	r1, r5
 800ff1a:	d905      	bls.n	800ff28 <_malloc_r+0x28>
 800ff1c:	230c      	movs	r3, #12
 800ff1e:	603b      	str	r3, [r7, #0]
 800ff20:	2600      	movs	r6, #0
 800ff22:	4630      	mov	r0, r6
 800ff24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff28:	4e2e      	ldr	r6, [pc, #184]	; (800ffe4 <_malloc_r+0xe4>)
 800ff2a:	f000 f86d 	bl	8010008 <__malloc_lock>
 800ff2e:	6833      	ldr	r3, [r6, #0]
 800ff30:	461c      	mov	r4, r3
 800ff32:	bb34      	cbnz	r4, 800ff82 <_malloc_r+0x82>
 800ff34:	4629      	mov	r1, r5
 800ff36:	4638      	mov	r0, r7
 800ff38:	f7ff ffc2 	bl	800fec0 <sbrk_aligned>
 800ff3c:	1c43      	adds	r3, r0, #1
 800ff3e:	4604      	mov	r4, r0
 800ff40:	d14d      	bne.n	800ffde <_malloc_r+0xde>
 800ff42:	6834      	ldr	r4, [r6, #0]
 800ff44:	4626      	mov	r6, r4
 800ff46:	2e00      	cmp	r6, #0
 800ff48:	d140      	bne.n	800ffcc <_malloc_r+0xcc>
 800ff4a:	6823      	ldr	r3, [r4, #0]
 800ff4c:	4631      	mov	r1, r6
 800ff4e:	4638      	mov	r0, r7
 800ff50:	eb04 0803 	add.w	r8, r4, r3
 800ff54:	f000 f848 	bl	800ffe8 <_sbrk_r>
 800ff58:	4580      	cmp	r8, r0
 800ff5a:	d13a      	bne.n	800ffd2 <_malloc_r+0xd2>
 800ff5c:	6821      	ldr	r1, [r4, #0]
 800ff5e:	3503      	adds	r5, #3
 800ff60:	1a6d      	subs	r5, r5, r1
 800ff62:	f025 0503 	bic.w	r5, r5, #3
 800ff66:	3508      	adds	r5, #8
 800ff68:	2d0c      	cmp	r5, #12
 800ff6a:	bf38      	it	cc
 800ff6c:	250c      	movcc	r5, #12
 800ff6e:	4629      	mov	r1, r5
 800ff70:	4638      	mov	r0, r7
 800ff72:	f7ff ffa5 	bl	800fec0 <sbrk_aligned>
 800ff76:	3001      	adds	r0, #1
 800ff78:	d02b      	beq.n	800ffd2 <_malloc_r+0xd2>
 800ff7a:	6823      	ldr	r3, [r4, #0]
 800ff7c:	442b      	add	r3, r5
 800ff7e:	6023      	str	r3, [r4, #0]
 800ff80:	e00e      	b.n	800ffa0 <_malloc_r+0xa0>
 800ff82:	6822      	ldr	r2, [r4, #0]
 800ff84:	1b52      	subs	r2, r2, r5
 800ff86:	d41e      	bmi.n	800ffc6 <_malloc_r+0xc6>
 800ff88:	2a0b      	cmp	r2, #11
 800ff8a:	d916      	bls.n	800ffba <_malloc_r+0xba>
 800ff8c:	1961      	adds	r1, r4, r5
 800ff8e:	42a3      	cmp	r3, r4
 800ff90:	6025      	str	r5, [r4, #0]
 800ff92:	bf18      	it	ne
 800ff94:	6059      	strne	r1, [r3, #4]
 800ff96:	6863      	ldr	r3, [r4, #4]
 800ff98:	bf08      	it	eq
 800ff9a:	6031      	streq	r1, [r6, #0]
 800ff9c:	5162      	str	r2, [r4, r5]
 800ff9e:	604b      	str	r3, [r1, #4]
 800ffa0:	4638      	mov	r0, r7
 800ffa2:	f104 060b 	add.w	r6, r4, #11
 800ffa6:	f000 f835 	bl	8010014 <__malloc_unlock>
 800ffaa:	f026 0607 	bic.w	r6, r6, #7
 800ffae:	1d23      	adds	r3, r4, #4
 800ffb0:	1af2      	subs	r2, r6, r3
 800ffb2:	d0b6      	beq.n	800ff22 <_malloc_r+0x22>
 800ffb4:	1b9b      	subs	r3, r3, r6
 800ffb6:	50a3      	str	r3, [r4, r2]
 800ffb8:	e7b3      	b.n	800ff22 <_malloc_r+0x22>
 800ffba:	6862      	ldr	r2, [r4, #4]
 800ffbc:	42a3      	cmp	r3, r4
 800ffbe:	bf0c      	ite	eq
 800ffc0:	6032      	streq	r2, [r6, #0]
 800ffc2:	605a      	strne	r2, [r3, #4]
 800ffc4:	e7ec      	b.n	800ffa0 <_malloc_r+0xa0>
 800ffc6:	4623      	mov	r3, r4
 800ffc8:	6864      	ldr	r4, [r4, #4]
 800ffca:	e7b2      	b.n	800ff32 <_malloc_r+0x32>
 800ffcc:	4634      	mov	r4, r6
 800ffce:	6876      	ldr	r6, [r6, #4]
 800ffd0:	e7b9      	b.n	800ff46 <_malloc_r+0x46>
 800ffd2:	230c      	movs	r3, #12
 800ffd4:	603b      	str	r3, [r7, #0]
 800ffd6:	4638      	mov	r0, r7
 800ffd8:	f000 f81c 	bl	8010014 <__malloc_unlock>
 800ffdc:	e7a1      	b.n	800ff22 <_malloc_r+0x22>
 800ffde:	6025      	str	r5, [r4, #0]
 800ffe0:	e7de      	b.n	800ffa0 <_malloc_r+0xa0>
 800ffe2:	bf00      	nop
 800ffe4:	2400061c 	.word	0x2400061c

0800ffe8 <_sbrk_r>:
 800ffe8:	b538      	push	{r3, r4, r5, lr}
 800ffea:	4d06      	ldr	r5, [pc, #24]	; (8010004 <_sbrk_r+0x1c>)
 800ffec:	2300      	movs	r3, #0
 800ffee:	4604      	mov	r4, r0
 800fff0:	4608      	mov	r0, r1
 800fff2:	602b      	str	r3, [r5, #0]
 800fff4:	f7f2 fbb0 	bl	8002758 <_sbrk>
 800fff8:	1c43      	adds	r3, r0, #1
 800fffa:	d102      	bne.n	8010002 <_sbrk_r+0x1a>
 800fffc:	682b      	ldr	r3, [r5, #0]
 800fffe:	b103      	cbz	r3, 8010002 <_sbrk_r+0x1a>
 8010000:	6023      	str	r3, [r4, #0]
 8010002:	bd38      	pop	{r3, r4, r5, pc}
 8010004:	24000624 	.word	0x24000624

08010008 <__malloc_lock>:
 8010008:	4801      	ldr	r0, [pc, #4]	; (8010010 <__malloc_lock+0x8>)
 801000a:	f000 b809 	b.w	8010020 <__retarget_lock_acquire_recursive>
 801000e:	bf00      	nop
 8010010:	24000628 	.word	0x24000628

08010014 <__malloc_unlock>:
 8010014:	4801      	ldr	r0, [pc, #4]	; (801001c <__malloc_unlock+0x8>)
 8010016:	f000 b804 	b.w	8010022 <__retarget_lock_release_recursive>
 801001a:	bf00      	nop
 801001c:	24000628 	.word	0x24000628

08010020 <__retarget_lock_acquire_recursive>:
 8010020:	4770      	bx	lr

08010022 <__retarget_lock_release_recursive>:
 8010022:	4770      	bx	lr

08010024 <_init>:
 8010024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010026:	bf00      	nop
 8010028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801002a:	bc08      	pop	{r3}
 801002c:	469e      	mov	lr, r3
 801002e:	4770      	bx	lr

08010030 <_fini>:
 8010030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010032:	bf00      	nop
 8010034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010036:	bc08      	pop	{r3}
 8010038:	469e      	mov	lr, r3
 801003a:	4770      	bx	lr
