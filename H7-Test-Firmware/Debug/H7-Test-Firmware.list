
H7-Test-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbb8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800fe50  0800fe50  0001fe50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fea8  0800fea8  0001fea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800feb0  0800feb0  0001feb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800feb4  0800feb4  0001feb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000030  24000000  0800feb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005bc  24000040  0800fee8  00020040  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240005fc  0800fee8  000205fc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023845  00000000  00000000  0002005e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000035d2  00000000  00000000  000438a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ae0  00000000  00000000  00046e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000019a8  00000000  00000000  00048958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b2b4  00000000  00000000  0004a300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023aa1  00000000  00000000  000855b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00180f7b  00000000  00000000  000a9055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00229fd0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007530  00000000  00000000  0022a020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800fe38 	.word	0x0800fe38

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	0800fe38 	.word	0x0800fe38

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ee:	4904      	ldr	r1, [pc, #16]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x28>)
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f6:	f3bf 8f4f 	dsb	sy
}
 80005fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <__NVIC_SystemReset+0x20>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	05fa0004 	.word	0x05fa0004

08000608 <HAL_TIM_OC_DelayElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b092      	sub	sp, #72	; 0x48
 800060c:	af02      	add	r7, sp, #8
 800060e:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4aab      	ldr	r2, [pc, #684]	; (80008c0 <HAL_TIM_OC_DelayElapsedCallback+0x2b8>)
 8000614:	4293      	cmp	r3, r2
 8000616:	f040 8315 	bne.w	8000c44 <HAL_TIM_OC_DelayElapsedCallback+0x63c>
  {
    if (1)
    { // check pin state
      if (ERPA_ON)
 800061a:	4baa      	ldr	r3, [pc, #680]	; (80008c4 <HAL_TIM_OC_DelayElapsedCallback+0x2bc>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	f000 809f 	beq.w	8000762 <HAL_TIM_OC_DelayElapsedCallback+0x15a>
         */

        /* Write to SPI (begin transfer?) */


		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) { 	//check pin state
 8000624:	bf00      	nop
 8000626:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800062a:	48a7      	ldr	r0, [pc, #668]	; (80008c8 <HAL_TIM_OC_DelayElapsedCallback+0x2c0>)
 800062c:	f007 f9c8 	bl	80079c0 <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1f7      	bne.n	8000626 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		 * Steps DAC
		 * +/- 0.5v Every 100ms
		*/

		/* Write to SPI (begin transfer?) */
		HAL_SPI_Receive(&hspi2,(uint8_t *)spi2RxBuffer, 1, 1);
 8000636:	2301      	movs	r3, #1
 8000638:	2201      	movs	r2, #1
 800063a:	49a4      	ldr	r1, [pc, #656]	; (80008cc <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 800063c:	48a4      	ldr	r0, [pc, #656]	; (80008d0 <HAL_TIM_OC_DelayElapsedCallback+0x2c8>)
 800063e:	f00b fa3d 	bl	800babc <HAL_SPI_Receive>
		uint8_t SPI2_LSB = ((spi2RxBuffer[0] & 0xFF00) >> 8);
 8000642:	2300      	movs	r3, #0
 8000644:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		uint8_t SPI2_MSB = (spi2RxBuffer[1] & 0xFF);
 8000648:	4ba0      	ldr	r3, [pc, #640]	; (80008cc <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 800064a:	785b      	ldrb	r3, [r3, #1]
 800064c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		hspi2.Instance->CR1 |= 1<<10; // THIS IS NEEDED TO STOP SPI2_SCK FROM GENERATING CLOCK PULSES
 8000650:	4b9f      	ldr	r3, [pc, #636]	; (80008d0 <HAL_TIM_OC_DelayElapsedCallback+0x2c8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4b9e      	ldr	r3, [pc, #632]	; (80008d0 <HAL_TIM_OC_DelayElapsedCallback+0x2c8>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800065e:	601a      	str	r2, [r3, #0]

		uint32_t current_step = DAC_OUT[step];
 8000660:	4b9c      	ldr	r3, [pc, #624]	; (80008d4 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	4b9c      	ldr	r3, [pc, #624]	; (80008d8 <HAL_TIM_OC_DelayElapsedCallback+0x2d0>)
 8000668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800066c:	633b      	str	r3, [r7, #48]	; 0x30
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 800066e:	4b99      	ldr	r3, [pc, #612]	; (80008d4 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	4b98      	ldr	r3, [pc, #608]	; (80008d8 <HAL_TIM_OC_DelayElapsedCallback+0x2d0>)
 8000676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	4897      	ldr	r0, [pc, #604]	; (80008dc <HAL_TIM_OC_DelayElapsedCallback+0x2d4>)
 8000680:	f004 f85d 	bl	800473e <HAL_DAC_SetValue>
		HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000684:	2100      	movs	r1, #0
 8000686:	4895      	ldr	r0, [pc, #596]	; (80008dc <HAL_TIM_OC_DelayElapsedCallback+0x2d4>)
 8000688:	f004 f807 	bl	800469a <HAL_DAC_Start>

        HAL_ADC_Stop_DMA(&hadc1);
 800068c:	4894      	ldr	r0, [pc, #592]	; (80008e0 <HAL_TIM_OC_DelayElapsedCallback+0x2d8>)
 800068e:	f002 fe37 	bl	8003300 <HAL_ADC_Stop_DMA>
		if (HAL_ADC_Start_DMA(&hadc1,
 8000692:	2220      	movs	r2, #32
 8000694:	4993      	ldr	r1, [pc, #588]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x2dc>)
 8000696:	4892      	ldr	r0, [pc, #584]	; (80008e0 <HAL_TIM_OC_DelayElapsedCallback+0x2d8>)
 8000698:	f002 fd6e 	bl	8003178 <HAL_ADC_Start_DMA>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <HAL_TIM_OC_DelayElapsedCallback+0x9e>
			(uint32_t *)aADCxConvertedData,
			 ADC_CONVERTED_DATA_BUFFER_SIZE
		) != HAL_OK) {
		     Error_Handler();
 80006a2:	f001 fbab 	bl	8001dfc <Error_Handler>
		}

		uint16_t PF11 = aADCxConvertedData[13]; 		// ENDmon -- verified
 80006a6:	4b8f      	ldr	r3, [pc, #572]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x2dc>)
 80006a8:	8b5b      	ldrh	r3, [r3, #26]
 80006aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		uint16_t PA6 = aADCxConvertedData[14]; 			// SWPmon -- verified
 80006ac:	4b8d      	ldr	r3, [pc, #564]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x2dc>)
 80006ae:	8b9b      	ldrh	r3, [r3, #28]
 80006b0:	85bb      	strh	r3, [r7, #44]	; 0x2c
		uint16_t PC4 = aADCxConvertedData[15]; 			// TEMP1 -- verified
 80006b2:	4b8c      	ldr	r3, [pc, #560]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x2dc>)
 80006b4:	8bdb      	ldrh	r3, [r3, #30]
 80006b6:	857b      	strh	r3, [r7, #42]	; 0x2a
		uint16_t PB1 = aADCxConvertedData[0];			// TEMP2 -- verified
 80006b8:	4b8a      	ldr	r3, [pc, #552]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x2dc>)
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	853b      	strh	r3, [r7, #40]	; 0x28

		erpa_buf[0] = erpa_sync;                  		// ERPA SYNC 0xAA MSB
 80006be:	22aa      	movs	r2, #170	; 0xaa
 80006c0:	4b89      	ldr	r3, [pc, #548]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 80006c2:	701a      	strb	r2, [r3, #0]
		erpa_buf[1] = erpa_sync;                  		// ERPA SYNC 0xAA LSB
 80006c4:	22aa      	movs	r2, #170	; 0xaa
 80006c6:	4b88      	ldr	r3, [pc, #544]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 80006c8:	705a      	strb	r2, [r3, #1]
		erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 		// ERPA SEQ # MSB
 80006ca:	4b88      	ldr	r3, [pc, #544]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x2e4>)
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	0a1b      	lsrs	r3, r3, #8
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b84      	ldr	r3, [pc, #528]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 80006d6:	709a      	strb	r2, [r3, #2]
		erpa_buf[3] = (erpa_seq & 0xFF);          		// ERPA SEQ # MSB
 80006d8:	4b84      	ldr	r3, [pc, #528]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x2e4>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	4b82      	ldr	r3, [pc, #520]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 80006e0:	70da      	strb	r2, [r3, #3]
		erpa_buf[4] = ((PF11 & 0xFF00) >> 8); 	  		// ENDmon MSB
 80006e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80006e4:	0a1b      	lsrs	r3, r3, #8
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b7f      	ldr	r3, [pc, #508]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 80006ec:	711a      	strb	r2, [r3, #4]
		erpa_buf[5] = (PF11 & 0xFF);               		// ENDmon LSB
 80006ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b7d      	ldr	r3, [pc, #500]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 80006f4:	715a      	strb	r2, [r3, #5]
		erpa_buf[6] = ((PA6 & 0xFF00) >> 8);      		// SWP Monitored MSB
 80006f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80006f8:	0a1b      	lsrs	r3, r3, #8
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b7a      	ldr	r3, [pc, #488]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 8000700:	719a      	strb	r2, [r3, #6]
		erpa_buf[7] = (PA6 & 0xFF);               		// SWP Monitored LSB
 8000702:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4b78      	ldr	r3, [pc, #480]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 8000708:	71da      	strb	r2, [r3, #7]
		erpa_buf[8] = ((PC4 & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 800070a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800070c:	0a1b      	lsrs	r3, r3, #8
 800070e:	b29b      	uxth	r3, r3
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b75      	ldr	r3, [pc, #468]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 8000714:	721a      	strb	r2, [r3, #8]
		erpa_buf[9] = (PC4 & 0xFF);               		// TEMPURATURE 1 LSB
 8000716:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b73      	ldr	r3, [pc, #460]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 800071c:	725a      	strb	r2, [r3, #9]
		erpa_buf[10] = ((PB1 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 800071e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000720:	0a1b      	lsrs	r3, r3, #8
 8000722:	b29b      	uxth	r3, r3
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4b70      	ldr	r3, [pc, #448]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 8000728:	729a      	strb	r2, [r3, #10]
		erpa_buf[11] = (PB1 & 0xFF);                    // TEMPURATURE 2 LSB
 800072a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800072c:	b2da      	uxtb	r2, r3
 800072e:	4b6e      	ldr	r3, [pc, #440]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 8000730:	72da      	strb	r2, [r3, #11]
		erpa_buf[12] = SPI2_MSB;					    // ERPA eADC MSB
 8000732:	4a6d      	ldr	r2, [pc, #436]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 8000734:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000738:	7313      	strb	r3, [r2, #12]
		erpa_buf[13] = SPI2_LSB;          				// ERPA eADC LSB
 800073a:	4a6b      	ldr	r2, [pc, #428]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 800073c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000740:	7353      	strb	r3, [r2, #13]


		erpa_seq++;
 8000742:	4b6a      	ldr	r3, [pc, #424]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x2e4>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	3301      	adds	r3, #1
 8000748:	b29a      	uxth	r2, r3
 800074a:	4b68      	ldr	r3, [pc, #416]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x2e4>)
 800074c:	801a      	strh	r2, [r3, #0]
		if (ERPA_ON)
 800074e:	4b5d      	ldr	r3, [pc, #372]	; (80008c4 <HAL_TIM_OC_DelayElapsedCallback+0x2bc>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d005      	beq.n	8000762 <HAL_TIM_OC_DelayElapsedCallback+0x15a>
		{
		  HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 8000756:	2364      	movs	r3, #100	; 0x64
 8000758:	220e      	movs	r2, #14
 800075a:	4963      	ldr	r1, [pc, #396]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 800075c:	4864      	ldr	r0, [pc, #400]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 800075e:	f00c ff77 	bl	800d650 <HAL_UART_Transmit>
		}
      }
      if (HK_ON)
 8000762:	4b64      	ldr	r3, [pc, #400]	; (80008f4 <HAL_TIM_OC_DelayElapsedCallback+0x2ec>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	f000 82b8 	beq.w	8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x6d4>
      {
        if (hk_counter == HK_CADENCE)
 800076c:	4b62      	ldr	r3, [pc, #392]	; (80008f8 <HAL_TIM_OC_DelayElapsedCallback+0x2f0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2201      	movs	r2, #1
 8000772:	4293      	cmp	r3, r2
 8000774:	f040 824e 	bne.w	8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>
          int16_t output1;
          int16_t output2;
          int16_t output3;
          int16_t output4;

          buf[0] = REG_TEMP;
 8000778:	2300      	movs	r3, #0
 800077a:	723b      	strb	r3, [r7, #8]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_1, buf, 1,
 800077c:	2390      	movs	r3, #144	; 0x90
 800077e:	b299      	uxth	r1, r3
 8000780:	f107 0208 	add.w	r2, r7, #8
 8000784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2301      	movs	r3, #1
 800078c:	485b      	ldr	r0, [pc, #364]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x2f4>)
 800078e:	f007 f9d9 	bl	8007b44 <HAL_I2C_Master_Transmit>
 8000792:	4603      	mov	r3, r0
 8000794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                        1000);
          if (ret != HAL_OK)
 8000798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800079c:	2b00      	cmp	r3, #0
 800079e:	d009      	beq.n	80007b4 <HAL_TIM_OC_DelayElapsedCallback+0x1ac>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	4a56      	ldr	r2, [pc, #344]	; (8000900 <HAL_TIM_OC_DelayElapsedCallback+0x2f8>)
 80007a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80007a8:	c303      	stmia	r3!, {r0, r1}
 80007aa:	801a      	strh	r2, [r3, #0]
 80007ac:	3302      	adds	r3, #2
 80007ae:	0c12      	lsrs	r2, r2, #16
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	e024      	b.n	80007fe <HAL_TIM_OC_DelayElapsedCallback+0x1f6>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_1, buf, 2,
 80007b4:	2390      	movs	r3, #144	; 0x90
 80007b6:	b299      	uxth	r1, r3
 80007b8:	f107 0208 	add.w	r2, r7, #8
 80007bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	2302      	movs	r3, #2
 80007c4:	484d      	ldr	r0, [pc, #308]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x2f4>)
 80007c6:	f007 fab1 	bl	8007d2c <HAL_I2C_Master_Receive>
 80007ca:	4603      	mov	r3, r0
 80007cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                         1000);
            if (ret != HAL_OK)
 80007d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d009      	beq.n	80007ec <HAL_TIM_OC_DelayElapsedCallback+0x1e4>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	4a49      	ldr	r2, [pc, #292]	; (8000904 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 80007de:	ca07      	ldmia	r2, {r0, r1, r2}
 80007e0:	c303      	stmia	r3!, {r0, r1}
 80007e2:	801a      	strh	r2, [r3, #0]
 80007e4:	3302      	adds	r3, #2
 80007e6:	0c12      	lsrs	r2, r2, #16
 80007e8:	701a      	strb	r2, [r3, #0]
 80007ea:	e008      	b.n	80007fe <HAL_TIM_OC_DelayElapsedCallback+0x1f6>
            }
            else
            {
              output1 = (int16_t)(buf[0] << 8);
 80007ec:	7a3b      	ldrb	r3, [r7, #8]
 80007ee:	021b      	lsls	r3, r3, #8
 80007f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
              output1 = (output1 | buf[1]) >> 3;
 80007f2:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80007f6:	7a7a      	ldrb	r2, [r7, #9]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	10db      	asrs	r3, r3, #3
 80007fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }
          }

          /* Tell ADT7410_2 that we want to read from the temperature register */
          buf[0] = REG_TEMP;
 80007fe:	2300      	movs	r3, #0
 8000800:	723b      	strb	r3, [r7, #8]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_2, buf, 1,
 8000802:	2394      	movs	r3, #148	; 0x94
 8000804:	b299      	uxth	r1, r3
 8000806:	f107 0208 	add.w	r2, r7, #8
 800080a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	2301      	movs	r3, #1
 8000812:	483a      	ldr	r0, [pc, #232]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x2f4>)
 8000814:	f007 f996 	bl	8007b44 <HAL_I2C_Master_Transmit>
 8000818:	4603      	mov	r3, r0
 800081a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 800081e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000822:	2b00      	cmp	r3, #0
 8000824:	d009      	beq.n	800083a <HAL_TIM_OC_DelayElapsedCallback+0x232>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	4a35      	ldr	r2, [pc, #212]	; (8000900 <HAL_TIM_OC_DelayElapsedCallback+0x2f8>)
 800082c:	ca07      	ldmia	r2, {r0, r1, r2}
 800082e:	c303      	stmia	r3!, {r0, r1}
 8000830:	801a      	strh	r2, [r3, #0]
 8000832:	3302      	adds	r3, #2
 8000834:	0c12      	lsrs	r2, r2, #16
 8000836:	701a      	strb	r2, [r3, #0]
 8000838:	e024      	b.n	8000884 <HAL_TIM_OC_DelayElapsedCallback+0x27c>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_2, buf, 2,
 800083a:	2394      	movs	r3, #148	; 0x94
 800083c:	b299      	uxth	r1, r3
 800083e:	f107 0208 	add.w	r2, r7, #8
 8000842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	2302      	movs	r3, #2
 800084a:	482c      	ldr	r0, [pc, #176]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x2f4>)
 800084c:	f007 fa6e 	bl	8007d2c <HAL_I2C_Master_Receive>
 8000850:	4603      	mov	r3, r0
 8000852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                         1000);
            if (ret != HAL_OK)
 8000856:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800085a:	2b00      	cmp	r3, #0
 800085c:	d009      	beq.n	8000872 <HAL_TIM_OC_DelayElapsedCallback+0x26a>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	4a28      	ldr	r2, [pc, #160]	; (8000904 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 8000864:	ca07      	ldmia	r2, {r0, r1, r2}
 8000866:	c303      	stmia	r3!, {r0, r1}
 8000868:	801a      	strh	r2, [r3, #0]
 800086a:	3302      	adds	r3, #2
 800086c:	0c12      	lsrs	r2, r2, #16
 800086e:	701a      	strb	r2, [r3, #0]
 8000870:	e008      	b.n	8000884 <HAL_TIM_OC_DelayElapsedCallback+0x27c>
            }
            else
            {

              output2 = (int16_t)(buf[0] << 8);
 8000872:	7a3b      	ldrb	r3, [r7, #8]
 8000874:	021b      	lsls	r3, r3, #8
 8000876:	87bb      	strh	r3, [r7, #60]	; 0x3c
              output2 = (output2 | buf[1]) >> 3;
 8000878:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800087c:	7a7a      	ldrb	r2, [r7, #9]
 800087e:	4313      	orrs	r3, r2
 8000880:	10db      	asrs	r3, r3, #3
 8000882:	87bb      	strh	r3, [r7, #60]	; 0x3c
            }
          }
          // TEMP SENSOR 3
          buf[0] = REG_TEMP;
 8000884:	2300      	movs	r3, #0
 8000886:	723b      	strb	r3, [r7, #8]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_3, buf, 1,
 8000888:	2392      	movs	r3, #146	; 0x92
 800088a:	b299      	uxth	r1, r3
 800088c:	f107 0208 	add.w	r2, r7, #8
 8000890:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2301      	movs	r3, #1
 8000898:	4818      	ldr	r0, [pc, #96]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x2f4>)
 800089a:	f007 f953 	bl	8007b44 <HAL_I2C_Master_Transmit>
 800089e:	4603      	mov	r3, r0
 80008a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 80008a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d02d      	beq.n	8000908 <HAL_TIM_OC_DelayElapsedCallback+0x300>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 80008ac:	f107 0308 	add.w	r3, r7, #8
 80008b0:	4a13      	ldr	r2, [pc, #76]	; (8000900 <HAL_TIM_OC_DelayElapsedCallback+0x2f8>)
 80008b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80008b4:	c303      	stmia	r3!, {r0, r1}
 80008b6:	801a      	strh	r2, [r3, #0]
 80008b8:	3302      	adds	r3, #2
 80008ba:	0c12      	lsrs	r2, r2, #16
 80008bc:	701a      	strb	r2, [r3, #0]
 80008be:	e048      	b.n	8000952 <HAL_TIM_OC_DelayElapsedCallback+0x34a>
 80008c0:	240003d0 	.word	0x240003d0
 80008c4:	240005f5 	.word	0x240005f5
 80008c8:	58020400 	.word	0x58020400
 80008cc:	240005ac 	.word	0x240005ac
 80008d0:	240002fc 	.word	0x240002fc
 80008d4:	240005a0 	.word	0x240005a0
 80008d8:	24000000 	.word	0x24000000
 80008dc:	24000214 	.word	0x24000214
 80008e0:	2400005c 	.word	0x2400005c
 80008e4:	24000520 	.word	0x24000520
 80008e8:	240005b0 	.word	0x240005b0
 80008ec:	240005be 	.word	0x240005be
 80008f0:	2400041c 	.word	0x2400041c
 80008f4:	240005f6 	.word	0x240005f6
 80008f8:	240005f0 	.word	0x240005f0
 80008fc:	24000228 	.word	0x24000228
 8000900:	0800fe50 	.word	0x0800fe50
 8000904:	0800fe5c 	.word	0x0800fe5c
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_3, buf, 2,
 8000908:	2392      	movs	r3, #146	; 0x92
 800090a:	b299      	uxth	r1, r3
 800090c:	f107 0208 	add.w	r2, r7, #8
 8000910:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2302      	movs	r3, #2
 8000918:	482b      	ldr	r0, [pc, #172]	; (80009c8 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 800091a:	f007 fa07 	bl	8007d2c <HAL_I2C_Master_Receive>
 800091e:	4603      	mov	r3, r0
 8000920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                         1000);
            if (ret != HAL_OK)
 8000924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000928:	2b00      	cmp	r3, #0
 800092a:	d009      	beq.n	8000940 <HAL_TIM_OC_DelayElapsedCallback+0x338>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 800092c:	f107 0308 	add.w	r3, r7, #8
 8000930:	4a26      	ldr	r2, [pc, #152]	; (80009cc <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 8000932:	ca07      	ldmia	r2, {r0, r1, r2}
 8000934:	c303      	stmia	r3!, {r0, r1}
 8000936:	801a      	strh	r2, [r3, #0]
 8000938:	3302      	adds	r3, #2
 800093a:	0c12      	lsrs	r2, r2, #16
 800093c:	701a      	strb	r2, [r3, #0]
 800093e:	e008      	b.n	8000952 <HAL_TIM_OC_DelayElapsedCallback+0x34a>
            }
            else
            {

              output3 = (int16_t)(buf[0] << 8);
 8000940:	7a3b      	ldrb	r3, [r7, #8]
 8000942:	021b      	lsls	r3, r3, #8
 8000944:	877b      	strh	r3, [r7, #58]	; 0x3a
              output3 = (output3 | buf[1]) >> 3;
 8000946:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800094a:	7a7a      	ldrb	r2, [r7, #9]
 800094c:	4313      	orrs	r3, r2
 800094e:	10db      	asrs	r3, r3, #3
 8000950:	877b      	strh	r3, [r7, #58]	; 0x3a
            }
          }
          /* TEMP SENSOR 4 */
          buf[0] = REG_TEMP;
 8000952:	2300      	movs	r3, #0
 8000954:	723b      	strb	r3, [r7, #8]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_4, buf, 1,
 8000956:	2396      	movs	r3, #150	; 0x96
 8000958:	b299      	uxth	r1, r3
 800095a:	f107 0208 	add.w	r2, r7, #8
 800095e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2301      	movs	r3, #1
 8000966:	4818      	ldr	r0, [pc, #96]	; (80009c8 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 8000968:	f007 f8ec 	bl	8007b44 <HAL_I2C_Master_Transmit>
 800096c:	4603      	mov	r3, r0
 800096e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 8000972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000976:	2b00      	cmp	r3, #0
 8000978:	d009      	beq.n	800098e <HAL_TIM_OC_DelayElapsedCallback+0x386>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <HAL_TIM_OC_DelayElapsedCallback+0x3c8>)
 8000980:	ca07      	ldmia	r2, {r0, r1, r2}
 8000982:	c303      	stmia	r3!, {r0, r1}
 8000984:	801a      	strh	r2, [r3, #0]
 8000986:	3302      	adds	r3, #2
 8000988:	0c12      	lsrs	r2, r2, #16
 800098a:	701a      	strb	r2, [r3, #0]
 800098c:	e02b      	b.n	80009e6 <HAL_TIM_OC_DelayElapsedCallback+0x3de>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_4, buf, 2,
 800098e:	2396      	movs	r3, #150	; 0x96
 8000990:	b299      	uxth	r1, r3
 8000992:	f107 0208 	add.w	r2, r7, #8
 8000996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	2302      	movs	r3, #2
 800099e:	480a      	ldr	r0, [pc, #40]	; (80009c8 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 80009a0:	f007 f9c4 	bl	8007d2c <HAL_I2C_Master_Receive>
 80009a4:	4603      	mov	r3, r0
 80009a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                         1000);
            if (ret != HAL_OK)
 80009aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d010      	beq.n	80009d4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80009b2:	f107 0308 	add.w	r3, r7, #8
 80009b6:	4a05      	ldr	r2, [pc, #20]	; (80009cc <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 80009b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80009ba:	c303      	stmia	r3!, {r0, r1}
 80009bc:	801a      	strh	r2, [r3, #0]
 80009be:	3302      	adds	r3, #2
 80009c0:	0c12      	lsrs	r2, r2, #16
 80009c2:	701a      	strb	r2, [r3, #0]
 80009c4:	e00f      	b.n	80009e6 <HAL_TIM_OC_DelayElapsedCallback+0x3de>
 80009c6:	bf00      	nop
 80009c8:	24000228 	.word	0x24000228
 80009cc:	0800fe5c 	.word	0x0800fe5c
 80009d0:	0800fe50 	.word	0x0800fe50
            }
            else
            {

              output4 = (int16_t)(buf[0] << 8);
 80009d4:	7a3b      	ldrb	r3, [r7, #8]
 80009d6:	021b      	lsls	r3, r3, #8
 80009d8:	873b      	strh	r3, [r7, #56]	; 0x38
              output4 = (output4 | buf[1]) >> 3;
 80009da:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80009de:	7a7a      	ldrb	r2, [r7, #9]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	10db      	asrs	r3, r3, #3
 80009e4:	873b      	strh	r3, [r7, #56]	; 0x38
            }
          }

          HAL_ADC_Stop_DMA(&hadc3);
 80009e6:	488e      	ldr	r0, [pc, #568]	; (8000c20 <HAL_TIM_OC_DelayElapsedCallback+0x618>)
 80009e8:	f002 fc8a 	bl	8003300 <HAL_ADC_Stop_DMA>
          if (HAL_ADC_Start_DMA(&hadc3,
 80009ec:	2220      	movs	r2, #32
 80009ee:	498d      	ldr	r1, [pc, #564]	; (8000c24 <HAL_TIM_OC_DelayElapsedCallback+0x61c>)
 80009f0:	488b      	ldr	r0, [pc, #556]	; (8000c20 <HAL_TIM_OC_DelayElapsedCallback+0x618>)
 80009f2:	f002 fbc1 	bl	8003178 <HAL_ADC_Start_DMA>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <HAL_TIM_OC_DelayElapsedCallback+0x3f8>
          (uint32_t *)aADC3ConvertedData,
          ADC_CONVERTED_DATA_BUFFER_SIZE)
          != HAL_OK) {
             Error_Handler();
 80009fc:	f001 f9fe 	bl	8001dfc <Error_Handler>
          }

          uint16_t vrefint = aADC3ConvertedData[1];
 8000a00:	4b88      	ldr	r3, [pc, #544]	; (8000c24 <HAL_TIM_OC_DelayElapsedCallback+0x61c>)
 8000a02:	885b      	ldrh	r3, [r3, #2]
 8000a04:	84bb      	strh	r3, [r7, #36]	; 0x24
          uint16_t vsense = aADC3ConvertedData[2];
 8000a06:	4b87      	ldr	r3, [pc, #540]	; (8000c24 <HAL_TIM_OC_DelayElapsedCallback+0x61c>)
 8000a08:	889b      	ldrh	r3, [r3, #4]
 8000a0a:	847b      	strh	r3, [r7, #34]	; 0x22
          uint16_t PF9 = aADC3ConvertedData[0];
 8000a0c:	4b85      	ldr	r3, [pc, #532]	; (8000c24 <HAL_TIM_OC_DelayElapsedCallback+0x61c>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	843b      	strh	r3, [r7, #32]


          HAL_ADC_Stop_DMA(&hadc1);
 8000a12:	4885      	ldr	r0, [pc, #532]	; (8000c28 <HAL_TIM_OC_DelayElapsedCallback+0x620>)
 8000a14:	f002 fc74 	bl	8003300 <HAL_ADC_Stop_DMA>
          if (HAL_ADC_Start_DMA(&hadc1,
 8000a18:	2220      	movs	r2, #32
 8000a1a:	4984      	ldr	r1, [pc, #528]	; (8000c2c <HAL_TIM_OC_DelayElapsedCallback+0x624>)
 8000a1c:	4882      	ldr	r0, [pc, #520]	; (8000c28 <HAL_TIM_OC_DelayElapsedCallback+0x620>)
 8000a1e:	f002 fbab 	bl	8003178 <HAL_ADC_Start_DMA>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <HAL_TIM_OC_DelayElapsedCallback+0x424>
          	(uint32_t *)aADCxConvertedData,
          	ADC_CONVERTED_DATA_BUFFER_SIZE)
        	!= HAL_OK) {
          	Error_Handler();
 8000a28:	f001 f9e8 	bl	8001dfc <Error_Handler>
          }

          uint16_t PF12 = aADCxConvertedData[2];		// BUSVmon -- sending as ENDMON
 8000a2c:	4b7f      	ldr	r3, [pc, #508]	; (8000c2c <HAL_TIM_OC_DelayElapsedCallback+0x624>)
 8000a2e:	889b      	ldrh	r3, [r3, #4]
 8000a30:	83fb      	strh	r3, [r7, #30]
          uint16_t PA7 = aADCxConvertedData[1];			// BUSImon -- sending as n800vmon
 8000a32:	4b7e      	ldr	r3, [pc, #504]	; (8000c2c <HAL_TIM_OC_DelayElapsedCallback+0x624>)
 8000a34:	885b      	ldrh	r3, [r3, #2]
 8000a36:	83bb      	strh	r3, [r7, #28]
          uint16_t PC5 = aADCxConvertedData[4];			// 2v5mon -- verified sending as TMP1 too
 8000a38:	4b7c      	ldr	r3, [pc, #496]	; (8000c2c <HAL_TIM_OC_DelayElapsedCallback+0x624>)
 8000a3a:	891b      	ldrh	r3, [r3, #8]
 8000a3c:	837b      	strh	r3, [r7, #26]
          uint16_t PB0 = aADCxConvertedData[5];			// 3v3mon -- verified sending as TMP2 too
 8000a3e:	4b7b      	ldr	r3, [pc, #492]	; (8000c2c <HAL_TIM_OC_DelayElapsedCallback+0x624>)
 8000a40:	895b      	ldrh	r3, [r3, #10]
 8000a42:	833b      	strh	r3, [r7, #24]
          uint16_t PC0 = aADCxConvertedData[6];			// 5vmon -- verified
 8000a44:	4b79      	ldr	r3, [pc, #484]	; (8000c2c <HAL_TIM_OC_DelayElapsedCallback+0x624>)
 8000a46:	899b      	ldrh	r3, [r3, #12]
 8000a48:	82fb      	strh	r3, [r7, #22]
          uint16_t PC1 = aADCxConvertedData[7];			// n3v3mon -- verified sending as SWPMon too
 8000a4a:	4b78      	ldr	r3, [pc, #480]	; (8000c2c <HAL_TIM_OC_DelayElapsedCallback+0x624>)
 8000a4c:	89db      	ldrh	r3, [r3, #14]
 8000a4e:	82bb      	strh	r3, [r7, #20]
          uint16_t PA2 = aADCxConvertedData[8];			// n5vmon -- verified
 8000a50:	4b76      	ldr	r3, [pc, #472]	; (8000c2c <HAL_TIM_OC_DelayElapsedCallback+0x624>)
 8000a52:	8a1b      	ldrh	r3, [r3, #16]
 8000a54:	827b      	strh	r3, [r7, #18]
          uint16_t PA3 = aADCxConvertedData[9];			// 15vmon -- verified
 8000a56:	4b75      	ldr	r3, [pc, #468]	; (8000c2c <HAL_TIM_OC_DelayElapsedCallback+0x624>)
 8000a58:	8a5b      	ldrh	r3, [r3, #18]
 8000a5a:	823b      	strh	r3, [r7, #16]
          uint16_t PA0 = aADCxConvertedData[10];		// 5vrefmon -- verified
 8000a5c:	4b73      	ldr	r3, [pc, #460]	; (8000c2c <HAL_TIM_OC_DelayElapsedCallback+0x624>)
 8000a5e:	8a9b      	ldrh	r3, [r3, #20]
 8000a60:	81fb      	strh	r3, [r7, #14]
          uint16_t PA1 = aADCxConvertedData[11];		// n200vmon -- verified
 8000a62:	4b72      	ldr	r3, [pc, #456]	; (8000c2c <HAL_TIM_OC_DelayElapsedCallback+0x624>)
 8000a64:	8adb      	ldrh	r3, [r3, #22]
 8000a66:	81bb      	strh	r3, [r7, #12]


          hk_buf[0] = hk_sync;                     		// HK SYNC 0xCC MSB					0 SYNC
 8000a68:	22cc      	movs	r2, #204	; 0xcc
 8000a6a:	4b71      	ldr	r3, [pc, #452]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000a6c:	701a      	strb	r2, [r3, #0]
          hk_buf[1] = hk_sync;                     		// HK SYNC 0xCC LSB
 8000a6e:	22cc      	movs	r2, #204	; 0xcc
 8000a70:	4b6f      	ldr	r3, [pc, #444]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000a72:	705a      	strb	r2, [r3, #1]
          hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    		// HK SEQ # MSB		1 SEQUENCE
 8000a74:	4b6f      	ldr	r3, [pc, #444]	; (8000c34 <HAL_TIM_OC_DelayElapsedCallback+0x62c>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	0a1b      	lsrs	r3, r3, #8
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4b6c      	ldr	r3, [pc, #432]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000a80:	709a      	strb	r2, [r3, #2]
          hk_buf[3] = (hk_seq & 0xFF);             		// HK SEQ # LSB
 8000a82:	4b6c      	ldr	r3, [pc, #432]	; (8000c34 <HAL_TIM_OC_DelayElapsedCallback+0x62c>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b69      	ldr	r3, [pc, #420]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000a8a:	70da      	strb	r2, [r3, #3]
          hk_buf[4] = ((vsense & 0xFF00) >> 8);
 8000a8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000a8e:	0a1b      	lsrs	r3, r3, #8
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b66      	ldr	r3, [pc, #408]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000a96:	711a      	strb	r2, [r3, #4]
          hk_buf[5] = (vsense & 0xFF);
 8000a98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b64      	ldr	r3, [pc, #400]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000a9e:	715a      	strb	r2, [r3, #5]
          hk_buf[6] = ((vrefint & 0xFF00) >> 8);
 8000aa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000aa2:	0a1b      	lsrs	r3, r3, #8
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	4b61      	ldr	r3, [pc, #388]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000aaa:	719a      	strb	r2, [r3, #6]
          hk_buf[7] = (vrefint & 0xFF);
 8000aac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	4b5f      	ldr	r3, [pc, #380]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000ab2:	71da      	strb	r2, [r3, #7]
          hk_buf[8] = ((output1 & 0xFF00) >> 8);
 8000ab4:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8000ab8:	121b      	asrs	r3, r3, #8
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	4b5c      	ldr	r3, [pc, #368]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000abe:	721a      	strb	r2, [r3, #8]
          hk_buf[9] = (output1 & 0xFF);
 8000ac0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	4b5a      	ldr	r3, [pc, #360]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000ac6:	725a      	strb	r2, [r3, #9]
          hk_buf[10] = ((output2 & 0xFF00) >> 8);
 8000ac8:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8000acc:	121b      	asrs	r3, r3, #8
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b57      	ldr	r3, [pc, #348]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000ad2:	729a      	strb	r2, [r3, #10]
          hk_buf[11] = (output2 & 0xFF);
 8000ad4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	4b55      	ldr	r3, [pc, #340]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000ada:	72da      	strb	r2, [r3, #11]
          hk_buf[12] = ((output3 & 0xFF00) >> 8);
 8000adc:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8000ae0:	121b      	asrs	r3, r3, #8
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	4b52      	ldr	r3, [pc, #328]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000ae6:	731a      	strb	r2, [r3, #12]
          hk_buf[13] = (output3 & 0xFF);
 8000ae8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	4b50      	ldr	r3, [pc, #320]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000aee:	735a      	strb	r2, [r3, #13]
          hk_buf[14] = ((output4 & 0xFF00) >> 8);
 8000af0:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8000af4:	121b      	asrs	r3, r3, #8
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	4b4d      	ldr	r3, [pc, #308]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000afa:	739a      	strb	r2, [r3, #14]
          hk_buf[15] = (output4 & 0xFF);
 8000afc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	4b4b      	ldr	r3, [pc, #300]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b02:	73da      	strb	r2, [r3, #15]
          hk_buf[16] = ((PF12 & 0xFF00) >> 8);
 8000b04:	8bfb      	ldrh	r3, [r7, #30]
 8000b06:	0a1b      	lsrs	r3, r3, #8
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	4b48      	ldr	r3, [pc, #288]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b0e:	741a      	strb	r2, [r3, #16]
          hk_buf[17] = (PF12 & 0xFF);
 8000b10:	8bfb      	ldrh	r3, [r7, #30]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b46      	ldr	r3, [pc, #280]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b16:	745a      	strb	r2, [r3, #17]
          hk_buf[18] = ((PA7 & 0xFF00) >> 8);
 8000b18:	8bbb      	ldrh	r3, [r7, #28]
 8000b1a:	0a1b      	lsrs	r3, r3, #8
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	4b43      	ldr	r3, [pc, #268]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b22:	749a      	strb	r2, [r3, #18]
          hk_buf[19] = (PA7 & 0xFF);
 8000b24:	8bbb      	ldrh	r3, [r7, #28]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	4b41      	ldr	r3, [pc, #260]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b2a:	74da      	strb	r2, [r3, #19]
          hk_buf[20] = ((PC5 & 0xFF00) >> 8);
 8000b2c:	8b7b      	ldrh	r3, [r7, #26]
 8000b2e:	0a1b      	lsrs	r3, r3, #8
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	4b3e      	ldr	r3, [pc, #248]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b36:	751a      	strb	r2, [r3, #20]
          hk_buf[21] = (PC5 & 0xFF);
 8000b38:	8b7b      	ldrh	r3, [r7, #26]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	4b3c      	ldr	r3, [pc, #240]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b3e:	755a      	strb	r2, [r3, #21]
          hk_buf[22] = ((PB0 & 0xFF00) >> 8);
 8000b40:	8b3b      	ldrh	r3, [r7, #24]
 8000b42:	0a1b      	lsrs	r3, r3, #8
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b39      	ldr	r3, [pc, #228]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b4a:	759a      	strb	r2, [r3, #22]
          hk_buf[23] = (PB0 & 0xFF);
 8000b4c:	8b3b      	ldrh	r3, [r7, #24]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	4b37      	ldr	r3, [pc, #220]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b52:	75da      	strb	r2, [r3, #23]
          hk_buf[24] = ((PC0 & 0xFF00) >> 8);
 8000b54:	8afb      	ldrh	r3, [r7, #22]
 8000b56:	0a1b      	lsrs	r3, r3, #8
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	4b34      	ldr	r3, [pc, #208]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b5e:	761a      	strb	r2, [r3, #24]
          hk_buf[25] = (PC0 & 0xFF);
 8000b60:	8afb      	ldrh	r3, [r7, #22]
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b32      	ldr	r3, [pc, #200]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b66:	765a      	strb	r2, [r3, #25]
          hk_buf[26] = ((PC1 & 0xFF00) >> 8);
 8000b68:	8abb      	ldrh	r3, [r7, #20]
 8000b6a:	0a1b      	lsrs	r3, r3, #8
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	4b2f      	ldr	r3, [pc, #188]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b72:	769a      	strb	r2, [r3, #26]
          hk_buf[27] = (PC1 & 0xFF);
 8000b74:	8abb      	ldrh	r3, [r7, #20]
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	4b2d      	ldr	r3, [pc, #180]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b7a:	76da      	strb	r2, [r3, #27]
          hk_buf[28] = ((PA2 & 0xFF00) >> 8);
 8000b7c:	8a7b      	ldrh	r3, [r7, #18]
 8000b7e:	0a1b      	lsrs	r3, r3, #8
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	4b2a      	ldr	r3, [pc, #168]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b86:	771a      	strb	r2, [r3, #28]
          hk_buf[29] = (PA2 & 0xFF);
 8000b88:	8a7b      	ldrh	r3, [r7, #18]
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	4b28      	ldr	r3, [pc, #160]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b8e:	775a      	strb	r2, [r3, #29]
          hk_buf[30] = ((PA3 & 0xFF00) >> 8);
 8000b90:	8a3b      	ldrh	r3, [r7, #16]
 8000b92:	0a1b      	lsrs	r3, r3, #8
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b9a:	779a      	strb	r2, [r3, #30]
          hk_buf[31] = (PA3 & 0xFF);
 8000b9c:	8a3b      	ldrh	r3, [r7, #16]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	4b23      	ldr	r3, [pc, #140]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000ba2:	77da      	strb	r2, [r3, #31]
          hk_buf[32] = ((PA0 & 0xFF00) >> 8);
 8000ba4:	89fb      	ldrh	r3, [r7, #14]
 8000ba6:	0a1b      	lsrs	r3, r3, #8
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000bae:	f883 2020 	strb.w	r2, [r3, #32]
          hk_buf[33] = (PA0 & 0xFF);
 8000bb2:	89fb      	ldrh	r3, [r7, #14]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000bb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          hk_buf[34] = ((PA1 & 0xFF00) >> 8);
 8000bbc:	89bb      	ldrh	r3, [r7, #12]
 8000bbe:	0a1b      	lsrs	r3, r3, #8
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000bc6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
          hk_buf[35] = (PA1 & 0xFF);
 8000bca:	89bb      	ldrh	r3, [r7, #12]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000bd0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
          hk_buf[36] = ((PF9 & 0xFF00) >> 8);
 8000bd4:	8c3b      	ldrh	r3, [r7, #32]
 8000bd6:	0a1b      	lsrs	r3, r3, #8
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          hk_buf[37] = (PF9 & 0xFF);
 8000be2:	8c3b      	ldrh	r3, [r7, #32]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000be8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25


          if (HK_ON)
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <HAL_TIM_OC_DelayElapsedCallback+0x630>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d005      	beq.n	8000c00 <HAL_TIM_OC_DelayElapsedCallback+0x5f8>
          {
           HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000bf4:	2364      	movs	r3, #100	; 0x64
 8000bf6:	2226      	movs	r2, #38	; 0x26
 8000bf8:	490d      	ldr	r1, [pc, #52]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000bfa:	4810      	ldr	r0, [pc, #64]	; (8000c3c <HAL_TIM_OC_DelayElapsedCallback+0x634>)
 8000bfc:	f00c fd28 	bl	800d650 <HAL_UART_Transmit>
          }
          hk_counter = 1;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_TIM_OC_DelayElapsedCallback+0x638>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	601a      	str	r2, [r3, #0]
          hk_seq++;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_TIM_OC_DelayElapsedCallback+0x62c>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <HAL_TIM_OC_DelayElapsedCallback+0x62c>)
 8000c10:	801a      	strh	r2, [r3, #0]
      }
    }
  }

  /* Timer 3 also called but doesn't need to do anything on IT */
}
 8000c12:	e063      	b.n	8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x6d4>
          hk_counter++;
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <HAL_TIM_OC_DelayElapsedCallback+0x638>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	4a09      	ldr	r2, [pc, #36]	; (8000c40 <HAL_TIM_OC_DelayElapsedCallback+0x638>)
 8000c1c:	6013      	str	r3, [r2, #0]
}
 8000c1e:	e05d      	b.n	8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x6d4>
 8000c20:	240000c0 	.word	0x240000c0
 8000c24:	24000560 	.word	0x24000560
 8000c28:	2400005c 	.word	0x2400005c
 8000c2c:	24000520 	.word	0x24000520
 8000c30:	240005c8 	.word	0x240005c8
 8000c34:	240005ee 	.word	0x240005ee
 8000c38:	240005f6 	.word	0x240005f6
 8000c3c:	2400041c 	.word	0x2400041c
 8000c40:	240005f0 	.word	0x240005f0
  else if (htim == &htim1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a27      	ldr	r2, [pc, #156]	; (8000ce4 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d147      	bne.n	8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x6d4>
      if (PMT_ON)
 8000c4c:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d043      	beq.n	8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x6d4>
    	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8000c54:	bf00      	nop
 8000c56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c5a:	4824      	ldr	r0, [pc, #144]	; (8000cec <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 8000c5c:	f006 feb0 	bl	80079c0 <HAL_GPIO_ReadPin>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d1f7      	bne.n	8000c56 <HAL_TIM_OC_DelayElapsedCallback+0x64e>
  		HAL_SPI_Receive(&hspi1, (uint8_t *)spi1RxBuffer, 1, 1);
 8000c66:	2301      	movs	r3, #1
 8000c68:	2201      	movs	r2, #1
 8000c6a:	4921      	ldr	r1, [pc, #132]	; (8000cf0 <HAL_TIM_OC_DelayElapsedCallback+0x6e8>)
 8000c6c:	4821      	ldr	r0, [pc, #132]	; (8000cf4 <HAL_TIM_OC_DelayElapsedCallback+0x6ec>)
 8000c6e:	f00a ff25 	bl	800babc <HAL_SPI_Receive>
  		uint8_t SPI1_LSB = ((spi1RxBuffer[0] & 0xFF00) >> 8);
 8000c72:	2300      	movs	r3, #0
 8000c74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  		uint8_t SPI1_MSB = (spi1RxBuffer[1] & 0xFF);
 8000c78:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <HAL_TIM_OC_DelayElapsedCallback+0x6e8>)
 8000c7a:	785b      	ldrb	r3, [r3, #1]
 8000c7c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		hspi1.Instance->CR1 |= 1<<10; // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 8000c80:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <HAL_TIM_OC_DelayElapsedCallback+0x6ec>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <HAL_TIM_OC_DelayElapsedCallback+0x6ec>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c8e:	601a      	str	r2, [r3, #0]
		pmt_buf[0] = pmt_sync;
 8000c90:	22bb      	movs	r2, #187	; 0xbb
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <HAL_TIM_OC_DelayElapsedCallback+0x6f0>)
 8000c94:	701a      	strb	r2, [r3, #0]
		pmt_buf[1] = pmt_sync;
 8000c96:	22bb      	movs	r2, #187	; 0xbb
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <HAL_TIM_OC_DelayElapsedCallback+0x6f0>)
 8000c9a:	705a      	strb	r2, [r3, #1]
		pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 8000c9c:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <HAL_TIM_OC_DelayElapsedCallback+0x6f0>)
 8000ca8:	709a      	strb	r2, [r3, #2]
		pmt_buf[3] = (pmt_seq & 0xFF);
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <HAL_TIM_OC_DelayElapsedCallback+0x6f0>)
 8000cb2:	70da      	strb	r2, [r3, #3]
		pmt_buf[4] = SPI1_MSB;
 8000cb4:	4a10      	ldr	r2, [pc, #64]	; (8000cf8 <HAL_TIM_OC_DelayElapsedCallback+0x6f0>)
 8000cb6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000cba:	7113      	strb	r3, [r2, #4]
		pmt_buf[5] = SPI1_LSB;
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <HAL_TIM_OC_DelayElapsedCallback+0x6f0>)
 8000cbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000cc2:	7153      	strb	r3, [r2, #5]
		pmt_seq++;
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 8000cce:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000cd0:	2364      	movs	r3, #100	; 0x64
 8000cd2:	2206      	movs	r2, #6
 8000cd4:	4908      	ldr	r1, [pc, #32]	; (8000cf8 <HAL_TIM_OC_DelayElapsedCallback+0x6f0>)
 8000cd6:	480a      	ldr	r0, [pc, #40]	; (8000d00 <HAL_TIM_OC_DelayElapsedCallback+0x6f8>)
 8000cd8:	f00c fcba 	bl	800d650 <HAL_UART_Transmit>
}
 8000cdc:	bf00      	nop
 8000cde:	3740      	adds	r7, #64	; 0x40
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	24000384 	.word	0x24000384
 8000ce8:	240005f4 	.word	0x240005f4
 8000cec:	58020000 	.word	0x58020000
 8000cf0:	240005a8 	.word	0x240005a8
 8000cf4:	24000274 	.word	0x24000274
 8000cf8:	240005c0 	.word	0x240005c0
 8000cfc:	240005c6 	.word	0x240005c6
 8000d00:	2400041c 	.word	0x2400041c

08000d04 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	4998      	ldr	r1, [pc, #608]	; (8000f70 <HAL_UART_RxCpltCallback+0x26c>)
 8000d10:	4898      	ldr	r0, [pc, #608]	; (8000f74 <HAL_UART_RxCpltCallback+0x270>)
 8000d12:	f00c fd33 	bl	800d77c <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000d16:	4b96      	ldr	r3, [pc, #600]	; (8000f70 <HAL_UART_RxCpltCallback+0x26c>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	73fb      	strb	r3, [r7, #15]

  switch (key)
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	2b1d      	cmp	r3, #29
 8000d20:	f200 8121 	bhi.w	8000f66 <HAL_UART_RxCpltCallback+0x262>
 8000d24:	a201      	add	r2, pc, #4	; (adr r2, 8000d2c <HAL_UART_RxCpltCallback+0x28>)
 8000d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d2a:	bf00      	nop
 8000d2c:	08000e31 	.word	0x08000e31
 8000d30:	08000e4d 	.word	0x08000e4d
 8000d34:	08000e69 	.word	0x08000e69
 8000d38:	08000e89 	.word	0x08000e89
 8000d3c:	08000ea9 	.word	0x08000ea9
 8000d40:	08000ec5 	.word	0x08000ec5
 8000d44:	08000ee5 	.word	0x08000ee5
 8000d48:	08000f05 	.word	0x08000f05
 8000d4c:	08000dc1 	.word	0x08000dc1
 8000d50:	08000dcf 	.word	0x08000dcf
 8000d54:	08000db3 	.word	0x08000db3
 8000d58:	08000da5 	.word	0x08000da5
 8000d5c:	08000f21 	.word	0x08000f21
 8000d60:	08000f31 	.word	0x08000f31
 8000d64:	08000f41 	.word	0x08000f41
 8000d68:	08000f51 	.word	0x08000f51
 8000d6c:	08000f39 	.word	0x08000f39
 8000d70:	08000f49 	.word	0x08000f49
 8000d74:	08000f59 	.word	0x08000f59
 8000d78:	08000e3f 	.word	0x08000e3f
 8000d7c:	08000e5b 	.word	0x08000e5b
 8000d80:	08000e79 	.word	0x08000e79
 8000d84:	08000e99 	.word	0x08000e99
 8000d88:	08000eb7 	.word	0x08000eb7
 8000d8c:	08000ed5 	.word	0x08000ed5
 8000d90:	08000ef5 	.word	0x08000ef5
 8000d94:	08000f13 	.word	0x08000f13
 8000d98:	08000ddd 	.word	0x08000ddd
 8000d9c:	08000df5 	.word	0x08000df5
 8000da0:	08000e0d 	.word	0x08000e0d
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000da4:	4b74      	ldr	r3, [pc, #464]	; (8000f78 <HAL_UART_RxCpltCallback+0x274>)
 8000da6:	2140      	movs	r1, #64	; 0x40
 8000da8:	2201      	movs	r2, #1
 8000daa:	4618      	mov	r0, r3
 8000dac:	f006 fe20 	bl	80079f0 <HAL_GPIO_WritePin>
    break;
 8000db0:	e0d9      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000db2:	4b71      	ldr	r3, [pc, #452]	; (8000f78 <HAL_UART_RxCpltCallback+0x274>)
 8000db4:	2140      	movs	r1, #64	; 0x40
 8000db6:	2200      	movs	r2, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f006 fe19 	bl	80079f0 <HAL_GPIO_WritePin>
    break;
 8000dbe:	e0d2      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
  }

  case 0x08:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 8000dc0:	4b6d      	ldr	r3, [pc, #436]	; (8000f78 <HAL_UART_RxCpltCallback+0x274>)
 8000dc2:	2180      	movs	r1, #128	; 0x80
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f006 fe12 	bl	80079f0 <HAL_GPIO_WritePin>
    break;
 8000dcc:	e0cb      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x09:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 8000dce:	4b6a      	ldr	r3, [pc, #424]	; (8000f78 <HAL_UART_RxCpltCallback+0x274>)
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f006 fe0b 	bl	80079f0 <HAL_GPIO_WritePin>
    break;
 8000dda:	e0c4      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x1B:
  {
    if (step < 7)
 8000ddc:	4b67      	ldr	r3, [pc, #412]	; (8000f7c <HAL_UART_RxCpltCallback+0x278>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b06      	cmp	r3, #6
 8000de2:	f200 80bd 	bhi.w	8000f60 <HAL_UART_RxCpltCallback+0x25c>
    {
      step++;
 8000de6:	4b65      	ldr	r3, [pc, #404]	; (8000f7c <HAL_UART_RxCpltCallback+0x278>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4b63      	ldr	r3, [pc, #396]	; (8000f7c <HAL_UART_RxCpltCallback+0x278>)
 8000df0:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000df2:	e0b5      	b.n	8000f60 <HAL_UART_RxCpltCallback+0x25c>
  }
  case 0x1C:
  {
    if (step > 0)
 8000df4:	4b61      	ldr	r3, [pc, #388]	; (8000f7c <HAL_UART_RxCpltCallback+0x278>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f000 80b3 	beq.w	8000f64 <HAL_UART_RxCpltCallback+0x260>
    {
      step--;
 8000dfe:	4b5f      	ldr	r3, [pc, #380]	; (8000f7c <HAL_UART_RxCpltCallback+0x278>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4b5d      	ldr	r3, [pc, #372]	; (8000f7c <HAL_UART_RxCpltCallback+0x278>)
 8000e08:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000e0a:	e0ab      	b.n	8000f64 <HAL_UART_RxCpltCallback+0x260>
  }
  case 0x1D: {
	if (!auto_sweep) {
 8000e0c:	4b5c      	ldr	r3, [pc, #368]	; (8000f80 <HAL_UART_RxCpltCallback+0x27c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d106      	bne.n	8000e22 <HAL_UART_RxCpltCallback+0x11e>
		auto_sweep = 1;
 8000e14:	4b5a      	ldr	r3, [pc, #360]	; (8000f80 <HAL_UART_RxCpltCallback+0x27c>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	601a      	str	r2, [r3, #0]
		step = 0;
 8000e1a:	4b58      	ldr	r3, [pc, #352]	; (8000f7c <HAL_UART_RxCpltCallback+0x278>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
	} else {
		auto_sweep = 0;
		step = 0;
	}
  	break;
 8000e20:	e0a1      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
		auto_sweep = 0;
 8000e22:	4b57      	ldr	r3, [pc, #348]	; (8000f80 <HAL_UART_RxCpltCallback+0x27c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
		step = 0;
 8000e28:	4b54      	ldr	r3, [pc, #336]	; (8000f7c <HAL_UART_RxCpltCallback+0x278>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
  	break;
 8000e2e:	e09a      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
   }
  case 0x00:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000e30:	4b54      	ldr	r3, [pc, #336]	; (8000f84 <HAL_UART_RxCpltCallback+0x280>)
 8000e32:	2120      	movs	r1, #32
 8000e34:	2201      	movs	r2, #1
 8000e36:	4618      	mov	r0, r3
 8000e38:	f006 fdda 	bl	80079f0 <HAL_GPIO_WritePin>
    break;
 8000e3c:	e093      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x13:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000e3e:	4b51      	ldr	r3, [pc, #324]	; (8000f84 <HAL_UART_RxCpltCallback+0x280>)
 8000e40:	2120      	movs	r1, #32
 8000e42:	2200      	movs	r2, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f006 fdd3 	bl	80079f0 <HAL_GPIO_WritePin>
    break;
 8000e4a:	e08c      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x01:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000e4c:	4b4d      	ldr	r3, [pc, #308]	; (8000f84 <HAL_UART_RxCpltCallback+0x280>)
 8000e4e:	2140      	movs	r1, #64	; 0x40
 8000e50:	2201      	movs	r2, #1
 8000e52:	4618      	mov	r0, r3
 8000e54:	f006 fdcc 	bl	80079f0 <HAL_GPIO_WritePin>
    break;
 8000e58:	e085      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000e5a:	4b4a      	ldr	r3, [pc, #296]	; (8000f84 <HAL_UART_RxCpltCallback+0x280>)
 8000e5c:	2140      	movs	r1, #64	; 0x40
 8000e5e:	2200      	movs	r2, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f006 fdc5 	bl	80079f0 <HAL_GPIO_WritePin>
    break;
 8000e66:	e07e      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000e68:	4b47      	ldr	r3, [pc, #284]	; (8000f88 <HAL_UART_RxCpltCallback+0x284>)
 8000e6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4618      	mov	r0, r3
 8000e72:	f006 fdbd 	bl	80079f0 <HAL_GPIO_WritePin>
    break;
 8000e76:	e076      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000e78:	4b43      	ldr	r3, [pc, #268]	; (8000f88 <HAL_UART_RxCpltCallback+0x284>)
 8000e7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f006 fdb5 	bl	80079f0 <HAL_GPIO_WritePin>
    break;
 8000e86:	e06e      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000e88:	4b3f      	ldr	r3, [pc, #252]	; (8000f88 <HAL_UART_RxCpltCallback+0x284>)
 8000e8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e8e:	2201      	movs	r2, #1
 8000e90:	4618      	mov	r0, r3
 8000e92:	f006 fdad 	bl	80079f0 <HAL_GPIO_WritePin>
    break;
 8000e96:	e066      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000e98:	4b3b      	ldr	r3, [pc, #236]	; (8000f88 <HAL_UART_RxCpltCallback+0x284>)
 8000e9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f006 fda5 	bl	80079f0 <HAL_GPIO_WritePin>
    break;
 8000ea6:	e05e      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000ea8:	4b37      	ldr	r3, [pc, #220]	; (8000f88 <HAL_UART_RxCpltCallback+0x284>)
 8000eaa:	2180      	movs	r1, #128	; 0x80
 8000eac:	2201      	movs	r2, #1
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f006 fd9e 	bl	80079f0 <HAL_GPIO_WritePin>
    break;
 8000eb4:	e057      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000eb6:	4b34      	ldr	r3, [pc, #208]	; (8000f88 <HAL_UART_RxCpltCallback+0x284>)
 8000eb8:	2180      	movs	r1, #128	; 0x80
 8000eba:	2200      	movs	r2, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f006 fd97 	bl	80079f0 <HAL_GPIO_WritePin>
    break;
 8000ec2:	e050      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000ec4:	4b30      	ldr	r3, [pc, #192]	; (8000f88 <HAL_UART_RxCpltCallback+0x284>)
 8000ec6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f006 fd8f 	bl	80079f0 <HAL_GPIO_WritePin>
    break;
 8000ed2:	e048      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000ed4:	4b2c      	ldr	r3, [pc, #176]	; (8000f88 <HAL_UART_RxCpltCallback+0x284>)
 8000ed6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eda:	2200      	movs	r2, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f006 fd87 	bl	80079f0 <HAL_GPIO_WritePin>
    break;
 8000ee2:	e040      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000ee4:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <HAL_UART_RxCpltCallback+0x284>)
 8000ee6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eea:	2201      	movs	r2, #1
 8000eec:	4618      	mov	r0, r3
 8000eee:	f006 fd7f 	bl	80079f0 <HAL_GPIO_WritePin>
    break;
 8000ef2:	e038      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000ef4:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <HAL_UART_RxCpltCallback+0x284>)
 8000ef6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000efa:	2200      	movs	r2, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f006 fd77 	bl	80079f0 <HAL_GPIO_WritePin>
    break;
 8000f02:	e030      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000f04:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <HAL_UART_RxCpltCallback+0x284>)
 8000f06:	2140      	movs	r1, #64	; 0x40
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f006 fd70 	bl	80079f0 <HAL_GPIO_WritePin>
    break;
 8000f10:	e029      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000f12:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <HAL_UART_RxCpltCallback+0x284>)
 8000f14:	2140      	movs	r1, #64	; 0x40
 8000f16:	2200      	movs	r2, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f006 fd69 	bl	80079f0 <HAL_GPIO_WritePin>
    break;
 8000f1e:	e022      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0C:
  {
      HAL_SuspendTick();
 8000f20:	f001 fd34 	bl	800298c <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000f24:	2101      	movs	r1, #1
 8000f26:	2001      	movs	r0, #1
 8000f28:	f007 fb06 	bl	8008538 <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8000f2c:	f7ff fb56 	bl	80005dc <__NVIC_SystemReset>
      break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <HAL_UART_RxCpltCallback+0x288>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
    break;
 8000f36:	e016      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x10:
  {
    PMT_ON = 0;
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <HAL_UART_RxCpltCallback+0x288>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
    break;
 8000f3e:	e012      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <HAL_UART_RxCpltCallback+0x28c>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]
    break;
 8000f46:	e00e      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HAL_UART_RxCpltCallback+0x28c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
    break;
 8000f4e:	e00a      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0F:
  {
    HK_ON = 1;
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <HAL_UART_RxCpltCallback+0x290>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
    break;
 8000f56:	e006      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x12:
  {
    HK_ON = 0;
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_UART_RxCpltCallback+0x290>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
    break;
 8000f5e:	e002      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
    break;
 8000f60:	bf00      	nop
 8000f62:	e000      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x262>
    break;
 8000f64:	bf00      	nop
  }
  }
}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	240004ac 	.word	0x240004ac
 8000f74:	2400041c 	.word	0x2400041c
 8000f78:	58021400 	.word	0x58021400
 8000f7c:	240005a0 	.word	0x240005a0
 8000f80:	240005a4 	.word	0x240005a4
 8000f84:	58020400 	.word	0x58020400
 8000f88:	58020800 	.word	0x58020800
 8000f8c:	240005f4 	.word	0x240005f4
 8000f90:	240005f5 	.word	0x240005f5
 8000f94:	240005f6 	.word	0x240005f6

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9c:	f001 fc40 	bl	8002820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa0:	f000 f87e 	bl	80010a0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000fa4:	f000 f902 	bl	80011ac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa8:	f000 fd90 	bl	8001acc <MX_GPIO_Init>
  MX_DAC1_Init();
 8000fac:	f000 fb04 	bl	80015b8 <MX_DAC1_Init>
  MX_TIM1_Init();
 8000fb0:	f000 fc2e 	bl	8001810 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000fb4:	f000 fcbc 	bl	8001930 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000fb8:	f000 fb3a 	bl	8001630 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000fbc:	f000 fb78 	bl	80016b0 <MX_SPI1_Init>
  MX_DMA_Init();
 8000fc0:	f000 fd5c 	bl	8001a7c <MX_DMA_Init>
  MX_ADC1_Init();
 8000fc4:	f000 f920 	bl	8001208 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000fc8:	f000 fd0c 	bl	80019e4 <MX_USART1_UART_Init>
  MX_ADC3_Init();
 8000fcc:	f000 fa70 	bl	80014b0 <MX_ADC3_Init>
  MX_SPI2_Init();
 8000fd0:	f000 fbc6 	bl	8001760 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */



  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8000fd4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000fd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000fdc:	4829      	ldr	r0, [pc, #164]	; (8001084 <main+0xec>)
 8000fde:	f003 f8e9 	bl	80041b4 <HAL_ADCEx_Calibration_Start>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <main+0x54>
  {
    /* Calibration Error */
    Error_Handler();
 8000fe8:	f000 ff08 	bl	8001dfc <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8000fec:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000ff0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000ff4:	4824      	ldr	r0, [pc, #144]	; (8001088 <main+0xf0>)
 8000ff6:	f003 f8dd 	bl	80041b4 <HAL_ADCEx_Calibration_Start>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <main+0x6c>
  {
	/* Calibration Error */
	Error_Handler();
 8001000:	f000 fefc 	bl	8001dfc <Error_Handler>
  }


  /* Start Timers with OC & Interrupt */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001004:	2100      	movs	r1, #0
 8001006:	4821      	ldr	r0, [pc, #132]	; (800108c <main+0xf4>)
 8001008:	f00b fa06 	bl	800c418 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 800100c:	210c      	movs	r1, #12
 800100e:	4820      	ldr	r0, [pc, #128]	; (8001090 <main+0xf8>)
 8001010:	f00b fa02 	bl	800c418 <HAL_TIM_OC_Start_IT>

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8001014:	bf00      	nop
 8001016:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <main+0xfc>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	69db      	ldr	r3, [r3, #28]
 800101c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001024:	d0f7      	beq.n	8001016 <main+0x7e>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8001026:	bf00      	nop
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <main+0xfc>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001032:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001036:	d1f7      	bne.n	8001028 <main+0x90>

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <main+0x100>)
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 800103e:	4b16      	ldr	r3, [pc, #88]	; (8001098 <main+0x100>)
 8001040:	2210      	movs	r2, #16
 8001042:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x5B; // send "["
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <main+0x100>)
 8001046:	225b      	movs	r2, #91	; 0x5b
 8001048:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <main+0x100>)
 800104c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001050:	4810      	ldr	r0, [pc, #64]	; (8001094 <main+0xfc>)
 8001052:	f00e fd11 	bl	800fa78 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <main+0xc8>
      Error_Handler();
 800105c:	f000 fece 	bl	8001dfc <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <main+0xfc>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <main+0xfc>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800106e:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 8001070:	4808      	ldr	r0, [pc, #32]	; (8001094 <main+0xfc>)
 8001072:	f00e fd5c 	bl	800fb2e <HAL_UARTEx_EnableStopMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8001076:	2201      	movs	r2, #1
 8001078:	4908      	ldr	r1, [pc, #32]	; (800109c <main+0x104>)
 800107a:	4806      	ldr	r0, [pc, #24]	; (8001094 <main+0xfc>)
 800107c:	f00c fb7e 	bl	800d77c <HAL_UART_Receive_IT>
 8001080:	e7f9      	b.n	8001076 <main+0xde>
 8001082:	bf00      	nop
 8001084:	2400005c 	.word	0x2400005c
 8001088:	240000c0 	.word	0x240000c0
 800108c:	24000384 	.word	0x24000384
 8001090:	240003d0 	.word	0x240003d0
 8001094:	2400041c 	.word	0x2400041c
 8001098:	24000510 	.word	0x24000510
 800109c:	240004ac 	.word	0x240004ac

080010a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b09c      	sub	sp, #112	; 0x70
 80010a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010aa:	224c      	movs	r2, #76	; 0x4c
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f00e feba 	bl	800fe28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2220      	movs	r2, #32
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f00e feb4 	bl	800fe28 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80010c0:	2002      	movs	r0, #2
 80010c2:	f007 fa75 	bl	80085b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010c6:	2300      	movs	r3, #0
 80010c8:	603b      	str	r3, [r7, #0]
 80010ca:	4b35      	ldr	r3, [pc, #212]	; (80011a0 <SystemClock_Config+0x100>)
 80010cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ce:	4a34      	ldr	r2, [pc, #208]	; (80011a0 <SystemClock_Config+0x100>)
 80010d0:	f023 0301 	bic.w	r3, r3, #1
 80010d4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80010d6:	4b32      	ldr	r3, [pc, #200]	; (80011a0 <SystemClock_Config+0x100>)
 80010d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	4b30      	ldr	r3, [pc, #192]	; (80011a4 <SystemClock_Config+0x104>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010e8:	4a2e      	ldr	r2, [pc, #184]	; (80011a4 <SystemClock_Config+0x104>)
 80010ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ee:	6193      	str	r3, [r2, #24]
 80010f0:	4b2c      	ldr	r3, [pc, #176]	; (80011a4 <SystemClock_Config+0x104>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010f8:	603b      	str	r3, [r7, #0]
 80010fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010fc:	bf00      	nop
 80010fe:	4b29      	ldr	r3, [pc, #164]	; (80011a4 <SystemClock_Config+0x104>)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800110a:	d1f8      	bne.n	80010fe <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800110c:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <SystemClock_Config+0x108>)
 800110e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001110:	4a25      	ldr	r2, [pc, #148]	; (80011a8 <SystemClock_Config+0x108>)
 8001112:	f023 0303 	bic.w	r3, r3, #3
 8001116:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001118:	2302      	movs	r3, #2
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800111c:	2301      	movs	r3, #1
 800111e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001120:	2340      	movs	r3, #64	; 0x40
 8001122:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001124:	2302      	movs	r3, #2
 8001126:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001128:	2300      	movs	r3, #0
 800112a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800112c:	2304      	movs	r3, #4
 800112e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001130:	230c      	movs	r3, #12
 8001132:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001134:	2302      	movs	r3, #2
 8001136:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001138:	2302      	movs	r3, #2
 800113a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800113c:	2302      	movs	r3, #2
 800113e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001140:	230c      	movs	r3, #12
 8001142:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001144:	2300      	movs	r3, #0
 8001146:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001150:	4618      	mov	r0, r3
 8001152:	f007 fa67 	bl	8008624 <HAL_RCC_OscConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800115c:	f000 fe4e 	bl	8001dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001160:	233f      	movs	r3, #63	; 0x3f
 8001162:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001164:	2303      	movs	r3, #3
 8001166:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8001168:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800116c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2101      	movs	r1, #1
 8001186:	4618      	mov	r0, r3
 8001188:	f007 fe7a 	bl	8008e80 <HAL_RCC_ClockConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001192:	f000 fe33 	bl	8001dfc <Error_Handler>
  }
}
 8001196:	bf00      	nop
 8001198:	3770      	adds	r7, #112	; 0x70
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	58000400 	.word	0x58000400
 80011a4:	58024800 	.word	0x58024800
 80011a8:	58024400 	.word	0x58024400

080011ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b0b0      	sub	sp, #192	; 0xc0
 80011b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	22bc      	movs	r2, #188	; 0xbc
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f00e fe35 	bl	800fe28 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80011c2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80011c4:	2304      	movs	r3, #4
 80011c6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 80011c8:	2309      	movs	r3, #9
 80011ca:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 80011cc:	2304      	movs	r3, #4
 80011ce:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80011d0:	2302      	movs	r3, #2
 80011d2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80011d4:	2302      	movs	r3, #2
 80011d6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80011d8:	23c0      	movs	r3, #192	; 0xc0
 80011da:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80011dc:	2320      	movs	r3, #32
 80011de:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80011e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	4618      	mov	r0, r3
 80011f0:	f008 f9d2 	bl	8009598 <HAL_RCCEx_PeriphCLKConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 80011fa:	f000 fdff 	bl	8001dfc <Error_Handler>
  }
}
 80011fe:	bf00      	nop
 8001200:	37c0      	adds	r7, #192	; 0xc0
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800121a:	463b      	mov	r3, r7
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
 8001228:	615a      	str	r2, [r3, #20]
 800122a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800122c:	4b90      	ldr	r3, [pc, #576]	; (8001470 <MX_ADC1_Init+0x268>)
 800122e:	4a91      	ldr	r2, [pc, #580]	; (8001474 <MX_ADC1_Init+0x26c>)
 8001230:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001232:	4b8f      	ldr	r3, [pc, #572]	; (8001470 <MX_ADC1_Init+0x268>)
 8001234:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001238:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800123a:	4b8d      	ldr	r3, [pc, #564]	; (8001470 <MX_ADC1_Init+0x268>)
 800123c:	2208      	movs	r2, #8
 800123e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001240:	4b8b      	ldr	r3, [pc, #556]	; (8001470 <MX_ADC1_Init+0x268>)
 8001242:	2201      	movs	r2, #1
 8001244:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001246:	4b8a      	ldr	r3, [pc, #552]	; (8001470 <MX_ADC1_Init+0x268>)
 8001248:	2204      	movs	r2, #4
 800124a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800124c:	4b88      	ldr	r3, [pc, #544]	; (8001470 <MX_ADC1_Init+0x268>)
 800124e:	2200      	movs	r2, #0
 8001250:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001252:	4b87      	ldr	r3, [pc, #540]	; (8001470 <MX_ADC1_Init+0x268>)
 8001254:	2201      	movs	r2, #1
 8001256:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 14;
 8001258:	4b85      	ldr	r3, [pc, #532]	; (8001470 <MX_ADC1_Init+0x268>)
 800125a:	220e      	movs	r2, #14
 800125c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800125e:	4b84      	ldr	r3, [pc, #528]	; (8001470 <MX_ADC1_Init+0x268>)
 8001260:	2200      	movs	r2, #0
 8001262:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001264:	4b82      	ldr	r3, [pc, #520]	; (8001470 <MX_ADC1_Init+0x268>)
 8001266:	2200      	movs	r2, #0
 8001268:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800126a:	4b81      	ldr	r3, [pc, #516]	; (8001470 <MX_ADC1_Init+0x268>)
 800126c:	2200      	movs	r2, #0
 800126e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001270:	4b7f      	ldr	r3, [pc, #508]	; (8001470 <MX_ADC1_Init+0x268>)
 8001272:	2203      	movs	r2, #3
 8001274:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001276:	4b7e      	ldr	r3, [pc, #504]	; (8001470 <MX_ADC1_Init+0x268>)
 8001278:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800127c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800127e:	4b7c      	ldr	r3, [pc, #496]	; (8001470 <MX_ADC1_Init+0x268>)
 8001280:	2200      	movs	r2, #0
 8001282:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001284:	4b7a      	ldr	r3, [pc, #488]	; (8001470 <MX_ADC1_Init+0x268>)
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800128c:	4878      	ldr	r0, [pc, #480]	; (8001470 <MX_ADC1_Init+0x268>)
 800128e:	f001 fdd1 	bl	8002e34 <HAL_ADC_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001298:	f000 fdb0 	bl	8001dfc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4619      	mov	r1, r3
 80012a6:	4872      	ldr	r0, [pc, #456]	; (8001470 <MX_ADC1_Init+0x268>)
 80012a8:	f002 ffe8 	bl	800427c <HAL_ADCEx_MultiModeConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80012b2:	f000 fda3 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012b6:	4b70      	ldr	r3, [pc, #448]	; (8001478 <MX_ADC1_Init+0x270>)
 80012b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ba:	2306      	movs	r3, #6
 80012bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80012be:	2307      	movs	r3, #7
 80012c0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012c2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80012c6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012c8:	2304      	movs	r3, #4
 80012ca:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d4:	463b      	mov	r3, r7
 80012d6:	4619      	mov	r1, r3
 80012d8:	4865      	ldr	r0, [pc, #404]	; (8001470 <MX_ADC1_Init+0x268>)
 80012da:	f002 f87d 	bl	80033d8 <HAL_ADC_ConfigChannel>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80012e4:	f000 fd8a 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012e8:	4b64      	ldr	r3, [pc, #400]	; (800147c <MX_ADC1_Init+0x274>)
 80012ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012ec:	230c      	movs	r3, #12
 80012ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f0:	463b      	mov	r3, r7
 80012f2:	4619      	mov	r1, r3
 80012f4:	485e      	ldr	r0, [pc, #376]	; (8001470 <MX_ADC1_Init+0x268>)
 80012f6:	f002 f86f 	bl	80033d8 <HAL_ADC_ConfigChannel>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001300:	f000 fd7c 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001304:	4b5e      	ldr	r3, [pc, #376]	; (8001480 <MX_ADC1_Init+0x278>)
 8001306:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001308:	2312      	movs	r3, #18
 800130a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800130c:	463b      	mov	r3, r7
 800130e:	4619      	mov	r1, r3
 8001310:	4857      	ldr	r0, [pc, #348]	; (8001470 <MX_ADC1_Init+0x268>)
 8001312:	f002 f861 	bl	80033d8 <HAL_ADC_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 800131c:	f000 fd6e 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001320:	4b58      	ldr	r3, [pc, #352]	; (8001484 <MX_ADC1_Init+0x27c>)
 8001322:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001324:	2318      	movs	r3, #24
 8001326:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001328:	463b      	mov	r3, r7
 800132a:	4619      	mov	r1, r3
 800132c:	4850      	ldr	r0, [pc, #320]	; (8001470 <MX_ADC1_Init+0x268>)
 800132e:	f002 f853 	bl	80033d8 <HAL_ADC_ConfigChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001338:	f000 fd60 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800133c:	4b52      	ldr	r3, [pc, #328]	; (8001488 <MX_ADC1_Init+0x280>)
 800133e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001344:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001346:	463b      	mov	r3, r7
 8001348:	4619      	mov	r1, r3
 800134a:	4849      	ldr	r0, [pc, #292]	; (8001470 <MX_ADC1_Init+0x268>)
 800134c:	f002 f844 	bl	80033d8 <HAL_ADC_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8001356:	f000 fd51 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800135a:	4b4c      	ldr	r3, [pc, #304]	; (800148c <MX_ADC1_Init+0x284>)
 800135c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800135e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001362:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001364:	463b      	mov	r3, r7
 8001366:	4619      	mov	r1, r3
 8001368:	4841      	ldr	r0, [pc, #260]	; (8001470 <MX_ADC1_Init+0x268>)
 800136a:	f002 f835 	bl	80033d8 <HAL_ADC_ConfigChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001374:	f000 fd42 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001378:	4b45      	ldr	r3, [pc, #276]	; (8001490 <MX_ADC1_Init+0x288>)
 800137a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800137c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001380:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001382:	463b      	mov	r3, r7
 8001384:	4619      	mov	r1, r3
 8001386:	483a      	ldr	r0, [pc, #232]	; (8001470 <MX_ADC1_Init+0x268>)
 8001388:	f002 f826 	bl	80033d8 <HAL_ADC_ConfigChannel>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8001392:	f000 fd33 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001396:	4b3f      	ldr	r3, [pc, #252]	; (8001494 <MX_ADC1_Init+0x28c>)
 8001398:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800139a:	f44f 7389 	mov.w	r3, #274	; 0x112
 800139e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a0:	463b      	mov	r3, r7
 80013a2:	4619      	mov	r1, r3
 80013a4:	4832      	ldr	r0, [pc, #200]	; (8001470 <MX_ADC1_Init+0x268>)
 80013a6:	f002 f817 	bl	80033d8 <HAL_ADC_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 80013b0:	f000 fd24 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80013b4:	4b38      	ldr	r3, [pc, #224]	; (8001498 <MX_ADC1_Init+0x290>)
 80013b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80013b8:	f44f 738c 	mov.w	r3, #280	; 0x118
 80013bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013be:	463b      	mov	r3, r7
 80013c0:	4619      	mov	r1, r3
 80013c2:	482b      	ldr	r0, [pc, #172]	; (8001470 <MX_ADC1_Init+0x268>)
 80013c4:	f002 f808 	bl	80033d8 <HAL_ADC_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80013ce:	f000 fd15 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013d2:	4b32      	ldr	r3, [pc, #200]	; (800149c <MX_ADC1_Init+0x294>)
 80013d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80013d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013dc:	463b      	mov	r3, r7
 80013de:	4619      	mov	r1, r3
 80013e0:	4823      	ldr	r0, [pc, #140]	; (8001470 <MX_ADC1_Init+0x268>)
 80013e2:	f001 fff9 	bl	80033d8 <HAL_ADC_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80013ec:	f000 fd06 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80013f0:	4b2b      	ldr	r3, [pc, #172]	; (80014a0 <MX_ADC1_Init+0x298>)
 80013f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80013f4:	f240 2306 	movw	r3, #518	; 0x206
 80013f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013fa:	463b      	mov	r3, r7
 80013fc:	4619      	mov	r1, r3
 80013fe:	481c      	ldr	r0, [pc, #112]	; (8001470 <MX_ADC1_Init+0x268>)
 8001400:	f001 ffea 	bl	80033d8 <HAL_ADC_ConfigChannel>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 800140a:	f000 fcf7 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800140e:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <MX_ADC1_Init+0x29c>)
 8001410:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8001412:	f44f 7303 	mov.w	r3, #524	; 0x20c
 8001416:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001418:	463b      	mov	r3, r7
 800141a:	4619      	mov	r1, r3
 800141c:	4814      	ldr	r0, [pc, #80]	; (8001470 <MX_ADC1_Init+0x268>)
 800141e:	f001 ffdb 	bl	80033d8 <HAL_ADC_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_ADC1_Init+0x224>
  {
    Error_Handler();
 8001428:	f000 fce8 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800142c:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <MX_ADC1_Init+0x2a0>)
 800142e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8001430:	f240 2312 	movw	r3, #530	; 0x212
 8001434:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001436:	463b      	mov	r3, r7
 8001438:	4619      	mov	r1, r3
 800143a:	480d      	ldr	r0, [pc, #52]	; (8001470 <MX_ADC1_Init+0x268>)
 800143c:	f001 ffcc 	bl	80033d8 <HAL_ADC_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_ADC1_Init+0x242>
  {
    Error_Handler();
 8001446:	f000 fcd9 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_ADC1_Init+0x2a4>)
 800144c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 800144e:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001452:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001454:	463b      	mov	r3, r7
 8001456:	4619      	mov	r1, r3
 8001458:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_ADC1_Init+0x268>)
 800145a:	f001 ffbd 	bl	80033d8 <HAL_ADC_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_ADC1_Init+0x260>
  {
    Error_Handler();
 8001464:	f000 fcca 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	3728      	adds	r7, #40	; 0x28
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	2400005c 	.word	0x2400005c
 8001474:	40022000 	.word	0x40022000
 8001478:	08600004 	.word	0x08600004
 800147c:	0c900008 	.word	0x0c900008
 8001480:	10c00010 	.word	0x10c00010
 8001484:	14f00020 	.word	0x14f00020
 8001488:	19200040 	.word	0x19200040
 800148c:	1d500080 	.word	0x1d500080
 8001490:	21800100 	.word	0x21800100
 8001494:	25b00200 	.word	0x25b00200
 8001498:	2a000400 	.word	0x2a000400
 800149c:	2e300800 	.word	0x2e300800
 80014a0:	3ac04000 	.word	0x3ac04000
 80014a4:	3ef08000 	.word	0x3ef08000
 80014a8:	43210000 	.word	0x43210000
 80014ac:	47520000 	.word	0x47520000

080014b0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
 80014c4:	615a      	str	r2, [r3, #20]
 80014c6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014c8:	4b36      	ldr	r3, [pc, #216]	; (80015a4 <MX_ADC3_Init+0xf4>)
 80014ca:	4a37      	ldr	r2, [pc, #220]	; (80015a8 <MX_ADC3_Init+0xf8>)
 80014cc:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014ce:	4b35      	ldr	r3, [pc, #212]	; (80015a4 <MX_ADC3_Init+0xf4>)
 80014d0:	2208      	movs	r2, #8
 80014d2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014d4:	4b33      	ldr	r3, [pc, #204]	; (80015a4 <MX_ADC3_Init+0xf4>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014da:	4b32      	ldr	r3, [pc, #200]	; (80015a4 <MX_ADC3_Init+0xf4>)
 80014dc:	2204      	movs	r2, #4
 80014de:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80014e0:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <MX_ADC3_Init+0xf4>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80014e6:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <MX_ADC3_Init+0xf4>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 3;
 80014ec:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <MX_ADC3_Init+0xf4>)
 80014ee:	2203      	movs	r2, #3
 80014f0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014f2:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <MX_ADC3_Init+0xf4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014f8:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <MX_ADC3_Init+0xf4>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014fe:	4b29      	ldr	r3, [pc, #164]	; (80015a4 <MX_ADC3_Init+0xf4>)
 8001500:	2200      	movs	r2, #0
 8001502:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001504:	4b27      	ldr	r3, [pc, #156]	; (80015a4 <MX_ADC3_Init+0xf4>)
 8001506:	2203      	movs	r2, #3
 8001508:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800150a:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <MX_ADC3_Init+0xf4>)
 800150c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001510:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001512:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <MX_ADC3_Init+0xf4>)
 8001514:	2200      	movs	r2, #0
 8001516:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001518:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <MX_ADC3_Init+0xf4>)
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001520:	4820      	ldr	r0, [pc, #128]	; (80015a4 <MX_ADC3_Init+0xf4>)
 8001522:	f001 fc87 	bl	8002e34 <HAL_ADC_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 800152c:	f000 fc66 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001530:	4b1e      	ldr	r3, [pc, #120]	; (80015ac <MX_ADC3_Init+0xfc>)
 8001532:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001534:	2306      	movs	r3, #6
 8001536:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001538:	2307      	movs	r3, #7
 800153a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800153c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001540:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001542:	2304      	movs	r3, #4
 8001544:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	4619      	mov	r1, r3
 8001552:	4814      	ldr	r0, [pc, #80]	; (80015a4 <MX_ADC3_Init+0xf4>)
 8001554:	f001 ff40 	bl	80033d8 <HAL_ADC_ConfigChannel>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800155e:	f000 fc4d 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <MX_ADC3_Init+0x100>)
 8001564:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001566:	230c      	movs	r3, #12
 8001568:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	4619      	mov	r1, r3
 800156e:	480d      	ldr	r0, [pc, #52]	; (80015a4 <MX_ADC3_Init+0xf4>)
 8001570:	f001 ff32 	bl	80033d8 <HAL_ADC_ConfigChannel>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800157a:	f000 fc3f 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800157e:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <MX_ADC3_Init+0x104>)
 8001580:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001582:	2312      	movs	r3, #18
 8001584:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	4619      	mov	r1, r3
 800158a:	4806      	ldr	r0, [pc, #24]	; (80015a4 <MX_ADC3_Init+0xf4>)
 800158c:	f001 ff24 	bl	80033d8 <HAL_ADC_ConfigChannel>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001596:	f000 fc31 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	3720      	adds	r7, #32
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	240000c0 	.word	0x240000c0
 80015a8:	58026000 	.word	0x58026000
 80015ac:	cfb80000 	.word	0xcfb80000
 80015b0:	cb840000 	.word	0xcb840000
 80015b4:	08600004 	.word	0x08600004

080015b8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	2224      	movs	r2, #36	; 0x24
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f00e fc2f 	bl	800fe28 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015ca:	4b17      	ldr	r3, [pc, #92]	; (8001628 <MX_DAC1_Init+0x70>)
 80015cc:	4a17      	ldr	r2, [pc, #92]	; (800162c <MX_DAC1_Init+0x74>)
 80015ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015d0:	4815      	ldr	r0, [pc, #84]	; (8001628 <MX_DAC1_Init+0x70>)
 80015d2:	f003 f840 	bl	8004656 <HAL_DAC_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80015dc:	f000 fc0e 	bl	8001dfc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 80015e4:	2302      	movs	r3, #2
 80015e6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80015ec:	2301      	movs	r3, #1
 80015ee:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	2200      	movs	r2, #0
 80015f8:	4619      	mov	r1, r3
 80015fa:	480b      	ldr	r0, [pc, #44]	; (8001628 <MX_DAC1_Init+0x70>)
 80015fc:	f003 f8c4 	bl	8004788 <HAL_DAC_ConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001606:	f000 fbf9 	bl	8001dfc <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	2210      	movs	r2, #16
 800160e:	4619      	mov	r1, r3
 8001610:	4805      	ldr	r0, [pc, #20]	; (8001628 <MX_DAC1_Init+0x70>)
 8001612:	f003 f8b9 	bl	8004788 <HAL_DAC_ConfigChannel>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 800161c:	f000 fbee 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001620:	bf00      	nop
 8001622:	3728      	adds	r7, #40	; 0x28
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	24000214 	.word	0x24000214
 800162c:	40007400 	.word	0x40007400

08001630 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <MX_I2C1_Init+0x74>)
 8001636:	4a1c      	ldr	r2, [pc, #112]	; (80016a8 <MX_I2C1_Init+0x78>)
 8001638:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <MX_I2C1_Init+0x74>)
 800163c:	4a1b      	ldr	r2, [pc, #108]	; (80016ac <MX_I2C1_Init+0x7c>)
 800163e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001640:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <MX_I2C1_Init+0x74>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001646:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <MX_I2C1_Init+0x74>)
 8001648:	2201      	movs	r2, #1
 800164a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800164c:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <MX_I2C1_Init+0x74>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <MX_I2C1_Init+0x74>)
 8001654:	2200      	movs	r2, #0
 8001656:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <MX_I2C1_Init+0x74>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_I2C1_Init+0x74>)
 8001660:	2200      	movs	r2, #0
 8001662:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001664:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <MX_I2C1_Init+0x74>)
 8001666:	2200      	movs	r2, #0
 8001668:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800166a:	480e      	ldr	r0, [pc, #56]	; (80016a4 <MX_I2C1_Init+0x74>)
 800166c:	f006 f9da 	bl	8007a24 <HAL_I2C_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001676:	f000 fbc1 	bl	8001dfc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800167a:	2100      	movs	r1, #0
 800167c:	4809      	ldr	r0, [pc, #36]	; (80016a4 <MX_I2C1_Init+0x74>)
 800167e:	f006 fec3 	bl	8008408 <HAL_I2CEx_ConfigAnalogFilter>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001688:	f000 fbb8 	bl	8001dfc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800168c:	2100      	movs	r1, #0
 800168e:	4805      	ldr	r0, [pc, #20]	; (80016a4 <MX_I2C1_Init+0x74>)
 8001690:	f006 ff05 	bl	800849e <HAL_I2CEx_ConfigDigitalFilter>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800169a:	f000 fbaf 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	24000228 	.word	0x24000228
 80016a8:	40005400 	.word	0x40005400
 80016ac:	20303e5d 	.word	0x20303e5d

080016b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <MX_SPI1_Init+0xa8>)
 80016b6:	4a29      	ldr	r2, [pc, #164]	; (800175c <MX_SPI1_Init+0xac>)
 80016b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ba:	4b27      	ldr	r3, [pc, #156]	; (8001758 <MX_SPI1_Init+0xa8>)
 80016bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80016c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80016c2:	4b25      	ldr	r3, [pc, #148]	; (8001758 <MX_SPI1_Init+0xa8>)
 80016c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016c8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80016ca:	4b23      	ldr	r3, [pc, #140]	; (8001758 <MX_SPI1_Init+0xa8>)
 80016cc:	220f      	movs	r2, #15
 80016ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016d0:	4b21      	ldr	r3, [pc, #132]	; (8001758 <MX_SPI1_Init+0xa8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <MX_SPI1_Init+0xa8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016dc:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <MX_SPI1_Init+0xa8>)
 80016de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80016e4:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <MX_SPI1_Init+0xa8>)
 80016e6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80016ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <MX_SPI1_Init+0xa8>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016f2:	4b19      	ldr	r3, [pc, #100]	; (8001758 <MX_SPI1_Init+0xa8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016f8:	4b17      	ldr	r3, [pc, #92]	; (8001758 <MX_SPI1_Init+0xa8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80016fe:	4b16      	ldr	r3, [pc, #88]	; (8001758 <MX_SPI1_Init+0xa8>)
 8001700:	2200      	movs	r2, #0
 8001702:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_SPI1_Init+0xa8>)
 8001706:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800170a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <MX_SPI1_Init+0xa8>)
 800170e:	2200      	movs	r2, #0
 8001710:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_SPI1_Init+0xa8>)
 8001714:	2200      	movs	r2, #0
 8001716:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <MX_SPI1_Init+0xa8>)
 800171a:	2200      	movs	r2, #0
 800171c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_SPI1_Init+0xa8>)
 8001720:	2200      	movs	r2, #0
 8001722:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_SPI1_Init+0xa8>)
 8001726:	2200      	movs	r2, #0
 8001728:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_SPI1_Init+0xa8>)
 800172c:	2200      	movs	r2, #0
 800172e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_SPI1_Init+0xa8>)
 8001732:	2200      	movs	r2, #0
 8001734:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_SPI1_Init+0xa8>)
 8001738:	2200      	movs	r2, #0
 800173a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_SPI1_Init+0xa8>)
 800173e:	2200      	movs	r2, #0
 8001740:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_SPI1_Init+0xa8>)
 8001744:	f00a f8b4 	bl	800b8b0 <HAL_SPI_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800174e:	f000 fb55 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	24000274 	.word	0x24000274
 800175c:	40013000 	.word	0x40013000

08001760 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001764:	4b28      	ldr	r3, [pc, #160]	; (8001808 <MX_SPI2_Init+0xa8>)
 8001766:	4a29      	ldr	r2, [pc, #164]	; (800180c <MX_SPI2_Init+0xac>)
 8001768:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800176a:	4b27      	ldr	r3, [pc, #156]	; (8001808 <MX_SPI2_Init+0xa8>)
 800176c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001770:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001772:	4b25      	ldr	r3, [pc, #148]	; (8001808 <MX_SPI2_Init+0xa8>)
 8001774:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001778:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800177a:	4b23      	ldr	r3, [pc, #140]	; (8001808 <MX_SPI2_Init+0xa8>)
 800177c:	220f      	movs	r2, #15
 800177e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001780:	4b21      	ldr	r3, [pc, #132]	; (8001808 <MX_SPI2_Init+0xa8>)
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001786:	4b20      	ldr	r3, [pc, #128]	; (8001808 <MX_SPI2_Init+0xa8>)
 8001788:	2200      	movs	r2, #0
 800178a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800178c:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <MX_SPI2_Init+0xa8>)
 800178e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001792:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001794:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <MX_SPI2_Init+0xa8>)
 8001796:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800179a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800179c:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <MX_SPI2_Init+0xa8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017a2:	4b19      	ldr	r3, [pc, #100]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017a8:	4b17      	ldr	r3, [pc, #92]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80017ae:	4b16      	ldr	r3, [pc, #88]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ba:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_SPI2_Init+0xa8>)
 80017f4:	f00a f85c 	bl	800b8b0 <HAL_SPI_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80017fe:	f000 fafd 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	240002fc 	.word	0x240002fc
 800180c:	40003800 	.word	0x40003800

08001810 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b096      	sub	sp, #88	; 0x58
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001816:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001822:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]
 8001832:	615a      	str	r2, [r3, #20]
 8001834:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	222c      	movs	r2, #44	; 0x2c
 800183a:	2100      	movs	r1, #0
 800183c:	4618      	mov	r0, r3
 800183e:	f00e faf3 	bl	800fe28 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001842:	4b39      	ldr	r3, [pc, #228]	; (8001928 <MX_TIM1_Init+0x118>)
 8001844:	4a39      	ldr	r2, [pc, #228]	; (800192c <MX_TIM1_Init+0x11c>)
 8001846:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 8001848:	4b37      	ldr	r3, [pc, #220]	; (8001928 <MX_TIM1_Init+0x118>)
 800184a:	2263      	movs	r2, #99	; 0x63
 800184c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184e:	4b36      	ldr	r3, [pc, #216]	; (8001928 <MX_TIM1_Init+0x118>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000 - 1;
 8001854:	4b34      	ldr	r3, [pc, #208]	; (8001928 <MX_TIM1_Init+0x118>)
 8001856:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800185a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185c:	4b32      	ldr	r3, [pc, #200]	; (8001928 <MX_TIM1_Init+0x118>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001862:	4b31      	ldr	r3, [pc, #196]	; (8001928 <MX_TIM1_Init+0x118>)
 8001864:	2200      	movs	r2, #0
 8001866:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001868:	4b2f      	ldr	r3, [pc, #188]	; (8001928 <MX_TIM1_Init+0x118>)
 800186a:	2200      	movs	r2, #0
 800186c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800186e:	482e      	ldr	r0, [pc, #184]	; (8001928 <MX_TIM1_Init+0x118>)
 8001870:	f00a ff2c 	bl	800c6cc <HAL_TIM_PWM_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800187a:	f000 fabf 	bl	8001dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187e:	2300      	movs	r3, #0
 8001880:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001886:	2300      	movs	r3, #0
 8001888:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800188a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800188e:	4619      	mov	r1, r3
 8001890:	4825      	ldr	r0, [pc, #148]	; (8001928 <MX_TIM1_Init+0x118>)
 8001892:	f00b fd63 	bl	800d35c <HAL_TIMEx_MasterConfigSynchronization>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800189c:	f000 faae 	bl	8001dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a0:	2360      	movs	r3, #96	; 0x60
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480 -1;
 80018a4:	f240 13df 	movw	r3, #479	; 0x1df
 80018a8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018aa:	2300      	movs	r3, #0
 80018ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018ae:	2300      	movs	r3, #0
 80018b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018b6:	2300      	movs	r3, #0
 80018b8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018c2:	2200      	movs	r2, #0
 80018c4:	4619      	mov	r1, r3
 80018c6:	4818      	ldr	r0, [pc, #96]	; (8001928 <MX_TIM1_Init+0x118>)
 80018c8:	f00b f876 	bl	800c9b8 <HAL_TIM_PWM_ConfigChannel>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80018d2:	f000 fa93 	bl	8001dfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001902:	2300      	movs	r3, #0
 8001904:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	4619      	mov	r1, r3
 800190a:	4807      	ldr	r0, [pc, #28]	; (8001928 <MX_TIM1_Init+0x118>)
 800190c:	f00b fdb4 	bl	800d478 <HAL_TIMEx_ConfigBreakDeadTime>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001916:	f000 fa71 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800191a:	4803      	ldr	r0, [pc, #12]	; (8001928 <MX_TIM1_Init+0x118>)
 800191c:	f000 fd82 	bl	8002424 <HAL_TIM_MspPostInit>

}
 8001920:	bf00      	nop
 8001922:	3758      	adds	r7, #88	; 0x58
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	24000384 	.word	0x24000384
 800192c:	40010000 	.word	0x40010000

08001930 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	; 0x28
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001936:	f107 031c 	add.w	r3, r7, #28
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001942:	463b      	mov	r3, r7
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
 8001950:	615a      	str	r2, [r3, #20]
 8001952:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001954:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <MX_TIM2_Init+0xb0>)
 8001956:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800195a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 -1;
 800195c:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <MX_TIM2_Init+0xb0>)
 800195e:	2263      	movs	r2, #99	; 0x63
 8001960:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001962:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <MX_TIM2_Init+0xb0>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48000 - 1;
 8001968:	4b1d      	ldr	r3, [pc, #116]	; (80019e0 <MX_TIM2_Init+0xb0>)
 800196a:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 800196e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001970:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <MX_TIM2_Init+0xb0>)
 8001972:	2200      	movs	r2, #0
 8001974:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001976:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <MX_TIM2_Init+0xb0>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800197c:	4818      	ldr	r0, [pc, #96]	; (80019e0 <MX_TIM2_Init+0xb0>)
 800197e:	f00a fea5 	bl	800c6cc <HAL_TIM_PWM_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001988:	f000 fa38 	bl	8001dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001994:	f107 031c 	add.w	r3, r7, #28
 8001998:	4619      	mov	r1, r3
 800199a:	4811      	ldr	r0, [pc, #68]	; (80019e0 <MX_TIM2_Init+0xb0>)
 800199c:	f00b fcde 	bl	800d35c <HAL_TIMEx_MasterConfigSynchronization>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80019a6:	f000 fa29 	bl	8001dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019aa:	2360      	movs	r3, #96	; 0x60
 80019ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 480 - 1;
 80019ae:	f240 13df 	movw	r3, #479	; 0x1df
 80019b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019bc:	463b      	mov	r3, r7
 80019be:	220c      	movs	r2, #12
 80019c0:	4619      	mov	r1, r3
 80019c2:	4807      	ldr	r0, [pc, #28]	; (80019e0 <MX_TIM2_Init+0xb0>)
 80019c4:	f00a fff8 	bl	800c9b8 <HAL_TIM_PWM_ConfigChannel>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80019ce:	f000 fa15 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019d2:	4803      	ldr	r0, [pc, #12]	; (80019e0 <MX_TIM2_Init+0xb0>)
 80019d4:	f000 fd26 	bl	8002424 <HAL_TIM_MspPostInit>

}
 80019d8:	bf00      	nop
 80019da:	3728      	adds	r7, #40	; 0x28
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	240003d0 	.word	0x240003d0

080019e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019e8:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <MX_USART1_UART_Init+0x90>)
 80019ea:	4a23      	ldr	r2, [pc, #140]	; (8001a78 <MX_USART1_UART_Init+0x94>)
 80019ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80019ee:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <MX_USART1_UART_Init+0x90>)
 80019f0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80019f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019f6:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <MX_USART1_UART_Init+0x90>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019fc:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <MX_USART1_UART_Init+0x90>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a02:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <MX_USART1_UART_Init+0x90>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a08:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <MX_USART1_UART_Init+0x90>)
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a0e:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <MX_USART1_UART_Init+0x90>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a14:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <MX_USART1_UART_Init+0x90>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a1a:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <MX_USART1_UART_Init+0x90>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <MX_USART1_UART_Init+0x90>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a26:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <MX_USART1_UART_Init+0x90>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a2c:	4811      	ldr	r0, [pc, #68]	; (8001a74 <MX_USART1_UART_Init+0x90>)
 8001a2e:	f00b fdbf 	bl	800d5b0 <HAL_UART_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a38:	f000 f9e0 	bl	8001dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	480d      	ldr	r0, [pc, #52]	; (8001a74 <MX_USART1_UART_Init+0x90>)
 8001a40:	f00e f8e1 	bl	800fc06 <HAL_UARTEx_SetTxFifoThreshold>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a4a:	f000 f9d7 	bl	8001dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4808      	ldr	r0, [pc, #32]	; (8001a74 <MX_USART1_UART_Init+0x90>)
 8001a52:	f00e f916 	bl	800fc82 <HAL_UARTEx_SetRxFifoThreshold>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a5c:	f000 f9ce 	bl	8001dfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a60:	4804      	ldr	r0, [pc, #16]	; (8001a74 <MX_USART1_UART_Init+0x90>)
 8001a62:	f00e f897 	bl	800fb94 <HAL_UARTEx_DisableFifoMode>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a6c:	f000 f9c6 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	2400041c 	.word	0x2400041c
 8001a78:	40011000 	.word	0x40011000

08001a7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a82:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <MX_DMA_Init+0x4c>)
 8001a84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a88:	4a0f      	ldr	r2, [pc, #60]	; (8001ac8 <MX_DMA_Init+0x4c>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a92:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <MX_DMA_Init+0x4c>)
 8001a94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	200b      	movs	r0, #11
 8001aa6:	f002 fda2 	bl	80045ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001aaa:	200b      	movs	r0, #11
 8001aac:	f002 fdb9 	bl	8004622 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	200c      	movs	r0, #12
 8001ab6:	f002 fd9a 	bl	80045ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001aba:	200c      	movs	r0, #12
 8001abc:	f002 fdb1 	bl	8004622 <HAL_NVIC_EnableIRQ>

}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	58024400 	.word	0x58024400

08001acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08c      	sub	sp, #48	; 0x30
 8001ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad2:	f107 031c 	add.w	r3, r7, #28
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae2:	4b54      	ldr	r3, [pc, #336]	; (8001c34 <MX_GPIO_Init+0x168>)
 8001ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae8:	4a52      	ldr	r2, [pc, #328]	; (8001c34 <MX_GPIO_Init+0x168>)
 8001aea:	f043 0304 	orr.w	r3, r3, #4
 8001aee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001af2:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <MX_GPIO_Init+0x168>)
 8001af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b00:	4b4c      	ldr	r3, [pc, #304]	; (8001c34 <MX_GPIO_Init+0x168>)
 8001b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b06:	4a4b      	ldr	r2, [pc, #300]	; (8001c34 <MX_GPIO_Init+0x168>)
 8001b08:	f043 0320 	orr.w	r3, r3, #32
 8001b0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b10:	4b48      	ldr	r3, [pc, #288]	; (8001c34 <MX_GPIO_Init+0x168>)
 8001b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b16:	f003 0320 	and.w	r3, r3, #32
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b1e:	4b45      	ldr	r3, [pc, #276]	; (8001c34 <MX_GPIO_Init+0x168>)
 8001b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b24:	4a43      	ldr	r2, [pc, #268]	; (8001c34 <MX_GPIO_Init+0x168>)
 8001b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b2e:	4b41      	ldr	r3, [pc, #260]	; (8001c34 <MX_GPIO_Init+0x168>)
 8001b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3c:	4b3d      	ldr	r3, [pc, #244]	; (8001c34 <MX_GPIO_Init+0x168>)
 8001b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b42:	4a3c      	ldr	r2, [pc, #240]	; (8001c34 <MX_GPIO_Init+0x168>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b4c:	4b39      	ldr	r3, [pc, #228]	; (8001c34 <MX_GPIO_Init+0x168>)
 8001b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5a:	4b36      	ldr	r3, [pc, #216]	; (8001c34 <MX_GPIO_Init+0x168>)
 8001b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b60:	4a34      	ldr	r2, [pc, #208]	; (8001c34 <MX_GPIO_Init+0x168>)
 8001b62:	f043 0302 	orr.w	r3, r3, #2
 8001b66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b6a:	4b32      	ldr	r3, [pc, #200]	; (8001c34 <MX_GPIO_Init+0x168>)
 8001b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b78:	4b2e      	ldr	r3, [pc, #184]	; (8001c34 <MX_GPIO_Init+0x168>)
 8001b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7e:	4a2d      	ldr	r2, [pc, #180]	; (8001c34 <MX_GPIO_Init+0x168>)
 8001b80:	f043 0308 	orr.w	r3, r3, #8
 8001b84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b88:	4b2a      	ldr	r3, [pc, #168]	; (8001c34 <MX_GPIO_Init+0x168>)
 8001b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001b96:	2200      	movs	r2, #0
 8001b98:	21c0      	movs	r1, #192	; 0xc0
 8001b9a:	4827      	ldr	r0, [pc, #156]	; (8001c38 <MX_GPIO_Init+0x16c>)
 8001b9c:	f005 ff28 	bl	80079f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8001ba6:	4825      	ldr	r0, [pc, #148]	; (8001c3c <MX_GPIO_Init+0x170>)
 8001ba8:	f005 ff22 	bl	80079f0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001bac:	2200      	movs	r2, #0
 8001bae:	2160      	movs	r1, #96	; 0x60
 8001bb0:	4823      	ldr	r0, [pc, #140]	; (8001c40 <MX_GPIO_Init+0x174>)
 8001bb2:	f005 ff1d 	bl	80079f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bb6:	23c0      	movs	r3, #192	; 0xc0
 8001bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bc6:	f107 031c 	add.w	r3, r7, #28
 8001bca:	4619      	mov	r1, r3
 8001bcc:	481a      	ldr	r0, [pc, #104]	; (8001c38 <MX_GPIO_Init+0x16c>)
 8001bce:	f005 fd47 	bl	8007660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001bd2:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001bd6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be4:	f107 031c 	add.w	r3, r7, #28
 8001be8:	4619      	mov	r1, r3
 8001bea:	4814      	ldr	r0, [pc, #80]	; (8001c3c <MX_GPIO_Init+0x170>)
 8001bec:	f005 fd38 	bl	8007660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001bf0:	2360      	movs	r3, #96	; 0x60
 8001bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c00:	2307      	movs	r3, #7
 8001c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	4619      	mov	r1, r3
 8001c0a:	480e      	ldr	r0, [pc, #56]	; (8001c44 <MX_GPIO_Init+0x178>)
 8001c0c:	f005 fd28 	bl	8007660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c10:	2360      	movs	r3, #96	; 0x60
 8001c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c14:	2301      	movs	r3, #1
 8001c16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	4619      	mov	r1, r3
 8001c26:	4806      	ldr	r0, [pc, #24]	; (8001c40 <MX_GPIO_Init+0x174>)
 8001c28:	f005 fd1a 	bl	8007660 <HAL_GPIO_Init>

}
 8001c2c:	bf00      	nop
 8001c2e:	3730      	adds	r7, #48	; 0x30
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	58024400 	.word	0x58024400
 8001c38:	58021400 	.word	0x58021400
 8001c3c:	58020800 	.word	0x58020800
 8001c40:	58020400 	.word	0x58020400
 8001c44:	58020c00 	.word	0x58020c00

08001c48 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

	/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
	if (hadc == &hadc1) {
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a2f      	ldr	r2, [pc, #188]	; (8001d10 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d129      	bne.n	8001cac <HAL_ADC_ConvHalfCpltCallback+0x64>
 8001c58:	4b2e      	ldr	r3, [pc, #184]	; (8001d14 <HAL_ADC_ConvHalfCpltCallback+0xcc>)
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5c:	2320      	movs	r3, #32
 8001c5e:	623b      	str	r3, [r7, #32]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	dd1d      	ble.n	8001ca2 <HAL_ADC_ConvHalfCpltCallback+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	f003 021f 	and.w	r2, r3, #31
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	4413      	add	r3, r2
 8001c70:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c76:	f3bf 8f4f 	dsb	sy
}
 8001c7a:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001c7c:	4a26      	ldr	r2, [pc, #152]	; (8001d18 <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	3320      	adds	r3, #32
 8001c88:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3b20      	subs	r3, #32
 8001c8e:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	dcf2      	bgt.n	8001c7c <HAL_ADC_ConvHalfCpltCallback+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c96:	f3bf 8f4f 	dsb	sy
}
 8001c9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c9c:	f3bf 8f6f 	isb	sy
}
 8001ca0:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8001ca2:	bf00      	nop
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[0], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc1);
 8001ca4:	481a      	ldr	r0, [pc, #104]	; (8001d10 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 8001ca6:	f001 fb2b 	bl	8003300 <HAL_ADC_Stop_DMA>
	} else if (hadc == &hadc3) {
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[0], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc3);
	}

}
 8001caa:	e02c      	b.n	8001d06 <HAL_ADC_ConvHalfCpltCallback+0xbe>
	} else if (hadc == &hadc3) {
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a1b      	ldr	r2, [pc, #108]	; (8001d1c <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d128      	bne.n	8001d06 <HAL_ADC_ConvHalfCpltCallback+0xbe>
 8001cb4:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <HAL_ADC_ConvHalfCpltCallback+0xcc>)
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	2320      	movs	r3, #32
 8001cba:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	dd1d      	ble.n	8001cfe <HAL_ADC_ConvHalfCpltCallback+0xb6>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f003 021f 	and.w	r2, r3, #31
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4413      	add	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd2:	f3bf 8f4f 	dsb	sy
}
 8001cd6:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001cd8:	4a0f      	ldr	r2, [pc, #60]	; (8001d18 <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	3320      	adds	r3, #32
 8001ce4:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	3b20      	subs	r3, #32
 8001cea:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	dcf2      	bgt.n	8001cd8 <HAL_ADC_ConvHalfCpltCallback+0x90>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cf2:	f3bf 8f4f 	dsb	sy
}
 8001cf6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cf8:	f3bf 8f6f 	isb	sy
}
 8001cfc:	bf00      	nop
}
 8001cfe:	bf00      	nop
		HAL_ADC_Stop_DMA(&hadc3);
 8001d00:	4806      	ldr	r0, [pc, #24]	; (8001d1c <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 8001d02:	f001 fafd 	bl	8003300 <HAL_ADC_Stop_DMA>
}
 8001d06:	bf00      	nop
 8001d08:	3728      	adds	r7, #40	; 0x28
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	2400005c 	.word	0x2400005c
 8001d14:	24000520 	.word	0x24000520
 8001d18:	e000ed00 	.word	0xe000ed00
 8001d1c:	240000c0 	.word	0x240000c0

08001d20 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	; 0x28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
	if (hadc == &hadc1) {
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a2f      	ldr	r2, [pc, #188]	; (8001de8 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d129      	bne.n	8001d84 <HAL_ADC_ConvCpltCallback+0x64>
 8001d30:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <HAL_ADC_ConvCpltCallback+0xcc>)
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
 8001d34:	2320      	movs	r3, #32
 8001d36:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	dd1d      	ble.n	8001d7a <HAL_ADC_ConvCpltCallback+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	f003 021f 	and.w	r2, r3, #31
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	4413      	add	r3, r2
 8001d48:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d4e:	f3bf 8f4f 	dsb	sy
}
 8001d52:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001d54:	4a26      	ldr	r2, [pc, #152]	; (8001df0 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	3320      	adds	r3, #32
 8001d60:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3b20      	subs	r3, #32
 8001d66:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	dcf2      	bgt.n	8001d54 <HAL_ADC_ConvCpltCallback+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d6e:	f3bf 8f4f 	dsb	sy
}
 8001d72:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d74:	f3bf 8f6f 	isb	sy
}
 8001d78:	bf00      	nop
}
 8001d7a:	bf00      	nop
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[ADC_CONVERTED_DATA_BUFFER_SIZE/2], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc1);
 8001d7c:	481a      	ldr	r0, [pc, #104]	; (8001de8 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001d7e:	f001 fabf 	bl	8003300 <HAL_ADC_Stop_DMA>
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADC3ConvertedData[ADC_CONVERTED_DATA_BUFFER_SIZE/2], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc3);

	}

}
 8001d82:	e02c      	b.n	8001dde <HAL_ADC_ConvCpltCallback+0xbe>
	} else if (hadc == &hadc3) {
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a1b      	ldr	r2, [pc, #108]	; (8001df4 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d128      	bne.n	8001dde <HAL_ADC_ConvCpltCallback+0xbe>
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	2320      	movs	r3, #32
 8001d92:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	dd1d      	ble.n	8001dd6 <HAL_ADC_ConvCpltCallback+0xb6>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f003 021f 	and.w	r2, r3, #31
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	4413      	add	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001daa:	f3bf 8f4f 	dsb	sy
}
 8001dae:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001db0:	4a0f      	ldr	r2, [pc, #60]	; (8001df0 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	3320      	adds	r3, #32
 8001dbc:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	3b20      	subs	r3, #32
 8001dc2:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	dcf2      	bgt.n	8001db0 <HAL_ADC_ConvCpltCallback+0x90>
  __ASM volatile ("dsb 0xF":::"memory");
 8001dca:	f3bf 8f4f 	dsb	sy
}
 8001dce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dd0:	f3bf 8f6f 	isb	sy
}
 8001dd4:	bf00      	nop
}
 8001dd6:	bf00      	nop
		HAL_ADC_Stop_DMA(&hadc3);
 8001dd8:	4806      	ldr	r0, [pc, #24]	; (8001df4 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001dda:	f001 fa91 	bl	8003300 <HAL_ADC_Stop_DMA>
}
 8001dde:	bf00      	nop
 8001de0:	3728      	adds	r7, #40	; 0x28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	2400005c 	.word	0x2400005c
 8001dec:	24000540 	.word	0x24000540
 8001df0:	e000ed00 	.word	0xe000ed00
 8001df4:	240000c0 	.word	0x240000c0
 8001df8:	24000580 	.word	0x24000580

08001dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e00:	b672      	cpsid	i
}
 8001e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <Error_Handler+0x8>
	...

08001e08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <HAL_MspInit+0x30>)
 8001e10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e14:	4a08      	ldr	r2, [pc, #32]	; (8001e38 <HAL_MspInit+0x30>)
 8001e16:	f043 0302 	orr.w	r3, r3, #2
 8001e1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_MspInit+0x30>)
 8001e20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	58024400 	.word	0x58024400

08001e3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08e      	sub	sp, #56	; 0x38
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a8a      	ldr	r2, [pc, #552]	; (8002084 <HAL_ADC_MspInit+0x248>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	f040 80ad 	bne.w	8001fba <HAL_ADC_MspInit+0x17e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001e60:	4b89      	ldr	r3, [pc, #548]	; (8002088 <HAL_ADC_MspInit+0x24c>)
 8001e62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e66:	4a88      	ldr	r2, [pc, #544]	; (8002088 <HAL_ADC_MspInit+0x24c>)
 8001e68:	f043 0320 	orr.w	r3, r3, #32
 8001e6c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e70:	4b85      	ldr	r3, [pc, #532]	; (8002088 <HAL_ADC_MspInit+0x24c>)
 8001e72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e76:	f003 0320 	and.w	r3, r3, #32
 8001e7a:	623b      	str	r3, [r7, #32]
 8001e7c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7e:	4b82      	ldr	r3, [pc, #520]	; (8002088 <HAL_ADC_MspInit+0x24c>)
 8001e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e84:	4a80      	ldr	r2, [pc, #512]	; (8002088 <HAL_ADC_MspInit+0x24c>)
 8001e86:	f043 0304 	orr.w	r3, r3, #4
 8001e8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e8e:	4b7e      	ldr	r3, [pc, #504]	; (8002088 <HAL_ADC_MspInit+0x24c>)
 8001e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	61fb      	str	r3, [r7, #28]
 8001e9a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9c:	4b7a      	ldr	r3, [pc, #488]	; (8002088 <HAL_ADC_MspInit+0x24c>)
 8001e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea2:	4a79      	ldr	r2, [pc, #484]	; (8002088 <HAL_ADC_MspInit+0x24c>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eac:	4b76      	ldr	r3, [pc, #472]	; (8002088 <HAL_ADC_MspInit+0x24c>)
 8001eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	61bb      	str	r3, [r7, #24]
 8001eb8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	4b73      	ldr	r3, [pc, #460]	; (8002088 <HAL_ADC_MspInit+0x24c>)
 8001ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec0:	4a71      	ldr	r2, [pc, #452]	; (8002088 <HAL_ADC_MspInit+0x24c>)
 8001ec2:	f043 0302 	orr.w	r3, r3, #2
 8001ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eca:	4b6f      	ldr	r3, [pc, #444]	; (8002088 <HAL_ADC_MspInit+0x24c>)
 8001ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ed8:	4b6b      	ldr	r3, [pc, #428]	; (8002088 <HAL_ADC_MspInit+0x24c>)
 8001eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ede:	4a6a      	ldr	r2, [pc, #424]	; (8002088 <HAL_ADC_MspInit+0x24c>)
 8001ee0:	f043 0320 	orr.w	r3, r3, #32
 8001ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ee8:	4b67      	ldr	r3, [pc, #412]	; (8002088 <HAL_ADC_MspInit+0x24c>)
 8001eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eee:	f003 0320 	and.w	r3, r3, #32
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001ef6:	2333      	movs	r3, #51	; 0x33
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001efa:	2303      	movs	r3, #3
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f06:	4619      	mov	r1, r3
 8001f08:	4860      	ldr	r0, [pc, #384]	; (800208c <HAL_ADC_MspInit+0x250>)
 8001f0a:	f005 fba9 	bl	8007660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001f0e:	23cf      	movs	r3, #207	; 0xcf
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f12:	2303      	movs	r3, #3
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1e:	4619      	mov	r1, r3
 8001f20:	485b      	ldr	r0, [pc, #364]	; (8002090 <HAL_ADC_MspInit+0x254>)
 8001f22:	f005 fb9d 	bl	8007660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f26:	2303      	movs	r3, #3
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f36:	4619      	mov	r1, r3
 8001f38:	4856      	ldr	r0, [pc, #344]	; (8002094 <HAL_ADC_MspInit+0x258>)
 8001f3a:	f005 fb91 	bl	8007660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f44:	2303      	movs	r3, #3
 8001f46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f50:	4619      	mov	r1, r3
 8001f52:	4851      	ldr	r0, [pc, #324]	; (8002098 <HAL_ADC_MspInit+0x25c>)
 8001f54:	f005 fb84 	bl	8007660 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001f58:	4b50      	ldr	r3, [pc, #320]	; (800209c <HAL_ADC_MspInit+0x260>)
 8001f5a:	4a51      	ldr	r2, [pc, #324]	; (80020a0 <HAL_ADC_MspInit+0x264>)
 8001f5c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001f5e:	4b4f      	ldr	r3, [pc, #316]	; (800209c <HAL_ADC_MspInit+0x260>)
 8001f60:	2209      	movs	r2, #9
 8001f62:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f64:	4b4d      	ldr	r3, [pc, #308]	; (800209c <HAL_ADC_MspInit+0x260>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f6a:	4b4c      	ldr	r3, [pc, #304]	; (800209c <HAL_ADC_MspInit+0x260>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f70:	4b4a      	ldr	r3, [pc, #296]	; (800209c <HAL_ADC_MspInit+0x260>)
 8001f72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f76:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f78:	4b48      	ldr	r3, [pc, #288]	; (800209c <HAL_ADC_MspInit+0x260>)
 8001f7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f7e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f80:	4b46      	ldr	r3, [pc, #280]	; (800209c <HAL_ADC_MspInit+0x260>)
 8001f82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f86:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f88:	4b44      	ldr	r3, [pc, #272]	; (800209c <HAL_ADC_MspInit+0x260>)
 8001f8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f8e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f90:	4b42      	ldr	r3, [pc, #264]	; (800209c <HAL_ADC_MspInit+0x260>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f96:	4b41      	ldr	r3, [pc, #260]	; (800209c <HAL_ADC_MspInit+0x260>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f9c:	483f      	ldr	r0, [pc, #252]	; (800209c <HAL_ADC_MspInit+0x260>)
 8001f9e:	f002 fd23 	bl	80049e8 <HAL_DMA_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_ADC_MspInit+0x170>
    {
      Error_Handler();
 8001fa8:	f7ff ff28 	bl	8001dfc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a3b      	ldr	r2, [pc, #236]	; (800209c <HAL_ADC_MspInit+0x260>)
 8001fb0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001fb2:	4a3a      	ldr	r2, [pc, #232]	; (800209c <HAL_ADC_MspInit+0x260>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001fb8:	e05f      	b.n	800207a <HAL_ADC_MspInit+0x23e>
  else if(hadc->Instance==ADC3)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a39      	ldr	r2, [pc, #228]	; (80020a4 <HAL_ADC_MspInit+0x268>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d15a      	bne.n	800207a <HAL_ADC_MspInit+0x23e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001fc4:	4b30      	ldr	r3, [pc, #192]	; (8002088 <HAL_ADC_MspInit+0x24c>)
 8001fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fca:	4a2f      	ldr	r2, [pc, #188]	; (8002088 <HAL_ADC_MspInit+0x24c>)
 8001fcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fd4:	4b2c      	ldr	r3, [pc, #176]	; (8002088 <HAL_ADC_MspInit+0x24c>)
 8001fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fe2:	4b29      	ldr	r3, [pc, #164]	; (8002088 <HAL_ADC_MspInit+0x24c>)
 8001fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fe8:	4a27      	ldr	r2, [pc, #156]	; (8002088 <HAL_ADC_MspInit+0x24c>)
 8001fea:	f043 0320 	orr.w	r3, r3, #32
 8001fee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ff2:	4b25      	ldr	r3, [pc, #148]	; (8002088 <HAL_ADC_MspInit+0x24c>)
 8001ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff8:	f003 0320 	and.w	r3, r3, #32
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002000:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002006:	2303      	movs	r3, #3
 8002008:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800200e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002012:	4619      	mov	r1, r3
 8002014:	4820      	ldr	r0, [pc, #128]	; (8002098 <HAL_ADC_MspInit+0x25c>)
 8002016:	f005 fb23 	bl	8007660 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Stream1;
 800201a:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <HAL_ADC_MspInit+0x26c>)
 800201c:	4a23      	ldr	r2, [pc, #140]	; (80020ac <HAL_ADC_MspInit+0x270>)
 800201e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002020:	4b21      	ldr	r3, [pc, #132]	; (80020a8 <HAL_ADC_MspInit+0x26c>)
 8002022:	2273      	movs	r2, #115	; 0x73
 8002024:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002026:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <HAL_ADC_MspInit+0x26c>)
 8002028:	2200      	movs	r2, #0
 800202a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800202c:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <HAL_ADC_MspInit+0x26c>)
 800202e:	2200      	movs	r2, #0
 8002030:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002032:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <HAL_ADC_MspInit+0x26c>)
 8002034:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002038:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800203a:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <HAL_ADC_MspInit+0x26c>)
 800203c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002040:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002042:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <HAL_ADC_MspInit+0x26c>)
 8002044:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002048:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800204a:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <HAL_ADC_MspInit+0x26c>)
 800204c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002050:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002052:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <HAL_ADC_MspInit+0x26c>)
 8002054:	2200      	movs	r2, #0
 8002056:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002058:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <HAL_ADC_MspInit+0x26c>)
 800205a:	2200      	movs	r2, #0
 800205c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800205e:	4812      	ldr	r0, [pc, #72]	; (80020a8 <HAL_ADC_MspInit+0x26c>)
 8002060:	f002 fcc2 	bl	80049e8 <HAL_DMA_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_ADC_MspInit+0x232>
      Error_Handler();
 800206a:	f7ff fec7 	bl	8001dfc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a0d      	ldr	r2, [pc, #52]	; (80020a8 <HAL_ADC_MspInit+0x26c>)
 8002072:	64da      	str	r2, [r3, #76]	; 0x4c
 8002074:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <HAL_ADC_MspInit+0x26c>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6393      	str	r3, [r2, #56]	; 0x38
}
 800207a:	bf00      	nop
 800207c:	3738      	adds	r7, #56	; 0x38
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40022000 	.word	0x40022000
 8002088:	58024400 	.word	0x58024400
 800208c:	58020800 	.word	0x58020800
 8002090:	58020000 	.word	0x58020000
 8002094:	58020400 	.word	0x58020400
 8002098:	58021400 	.word	0x58021400
 800209c:	24000124 	.word	0x24000124
 80020a0:	40020010 	.word	0x40020010
 80020a4:	58026000 	.word	0x58026000
 80020a8:	2400019c 	.word	0x2400019c
 80020ac:	40020028 	.word	0x40020028

080020b0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08a      	sub	sp, #40	; 0x28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a18      	ldr	r2, [pc, #96]	; (8002130 <HAL_DAC_MspInit+0x80>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d129      	bne.n	8002126 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80020d2:	4b18      	ldr	r3, [pc, #96]	; (8002134 <HAL_DAC_MspInit+0x84>)
 80020d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020d8:	4a16      	ldr	r2, [pc, #88]	; (8002134 <HAL_DAC_MspInit+0x84>)
 80020da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <HAL_DAC_MspInit+0x84>)
 80020e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f0:	4b10      	ldr	r3, [pc, #64]	; (8002134 <HAL_DAC_MspInit+0x84>)
 80020f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f6:	4a0f      	ldr	r2, [pc, #60]	; (8002134 <HAL_DAC_MspInit+0x84>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <HAL_DAC_MspInit+0x84>)
 8002102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800210e:	2330      	movs	r3, #48	; 0x30
 8002110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002112:	2303      	movs	r3, #3
 8002114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	4805      	ldr	r0, [pc, #20]	; (8002138 <HAL_DAC_MspInit+0x88>)
 8002122:	f005 fa9d 	bl	8007660 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002126:	bf00      	nop
 8002128:	3728      	adds	r7, #40	; 0x28
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40007400 	.word	0x40007400
 8002134:	58024400 	.word	0x58024400
 8002138:	58020000 	.word	0x58020000

0800213c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b0b8      	sub	sp, #224	; 0xe0
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002154:	f107 0310 	add.w	r3, r7, #16
 8002158:	22bc      	movs	r2, #188	; 0xbc
 800215a:	2100      	movs	r1, #0
 800215c:	4618      	mov	r0, r3
 800215e:	f00d fe63 	bl	800fe28 <memset>
  if(hi2c->Instance==I2C1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a25      	ldr	r2, [pc, #148]	; (80021fc <HAL_I2C_MspInit+0xc0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d142      	bne.n	80021f2 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800216c:	2308      	movs	r3, #8
 800216e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002170:	2300      	movs	r3, #0
 8002172:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002176:	f107 0310 	add.w	r3, r7, #16
 800217a:	4618      	mov	r0, r3
 800217c:	f007 fa0c 	bl	8009598 <HAL_RCCEx_PeriphCLKConfig>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002186:	f7ff fe39 	bl	8001dfc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800218a:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <HAL_I2C_MspInit+0xc4>)
 800218c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002190:	4a1b      	ldr	r2, [pc, #108]	; (8002200 <HAL_I2C_MspInit+0xc4>)
 8002192:	f043 0302 	orr.w	r3, r3, #2
 8002196:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800219a:	4b19      	ldr	r3, [pc, #100]	; (8002200 <HAL_I2C_MspInit+0xc4>)
 800219c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021b0:	2312      	movs	r3, #18
 80021b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021bc:	2300      	movs	r3, #0
 80021be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021c2:	2304      	movs	r3, #4
 80021c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021cc:	4619      	mov	r1, r3
 80021ce:	480d      	ldr	r0, [pc, #52]	; (8002204 <HAL_I2C_MspInit+0xc8>)
 80021d0:	f005 fa46 	bl	8007660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021d4:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <HAL_I2C_MspInit+0xc4>)
 80021d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021da:	4a09      	ldr	r2, [pc, #36]	; (8002200 <HAL_I2C_MspInit+0xc4>)
 80021dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_I2C_MspInit+0xc4>)
 80021e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021f2:	bf00      	nop
 80021f4:	37e0      	adds	r7, #224	; 0xe0
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40005400 	.word	0x40005400
 8002200:	58024400 	.word	0x58024400
 8002204:	58020400 	.word	0x58020400

08002208 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b0ba      	sub	sp, #232	; 0xe8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002220:	f107 0318 	add.w	r3, r7, #24
 8002224:	22bc      	movs	r2, #188	; 0xbc
 8002226:	2100      	movs	r1, #0
 8002228:	4618      	mov	r0, r3
 800222a:	f00d fdfd 	bl	800fe28 <memset>
  if(hspi->Instance==SPI1)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a49      	ldr	r2, [pc, #292]	; (8002358 <HAL_SPI_MspInit+0x150>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d142      	bne.n	80022be <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800223c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800223e:	2300      	movs	r3, #0
 8002240:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002242:	f107 0318 	add.w	r3, r7, #24
 8002246:	4618      	mov	r0, r3
 8002248:	f007 f9a6 	bl	8009598 <HAL_RCCEx_PeriphCLKConfig>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002252:	f7ff fdd3 	bl	8001dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002256:	4b41      	ldr	r3, [pc, #260]	; (800235c <HAL_SPI_MspInit+0x154>)
 8002258:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800225c:	4a3f      	ldr	r2, [pc, #252]	; (800235c <HAL_SPI_MspInit+0x154>)
 800225e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002262:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002266:	4b3d      	ldr	r3, [pc, #244]	; (800235c <HAL_SPI_MspInit+0x154>)
 8002268:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800226c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002274:	4b39      	ldr	r3, [pc, #228]	; (800235c <HAL_SPI_MspInit+0x154>)
 8002276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800227a:	4a38      	ldr	r2, [pc, #224]	; (800235c <HAL_SPI_MspInit+0x154>)
 800227c:	f043 0302 	orr.w	r3, r3, #2
 8002280:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002284:	4b35      	ldr	r3, [pc, #212]	; (800235c <HAL_SPI_MspInit+0x154>)
 8002286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002292:	2318      	movs	r3, #24
 8002294:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a4:	2300      	movs	r3, #0
 80022a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022aa:	2305      	movs	r3, #5
 80022ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022b4:	4619      	mov	r1, r3
 80022b6:	482a      	ldr	r0, [pc, #168]	; (8002360 <HAL_SPI_MspInit+0x158>)
 80022b8:	f005 f9d2 	bl	8007660 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80022bc:	e047      	b.n	800234e <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a28      	ldr	r2, [pc, #160]	; (8002364 <HAL_SPI_MspInit+0x15c>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d142      	bne.n	800234e <HAL_SPI_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80022c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022d2:	f107 0318 	add.w	r3, r7, #24
 80022d6:	4618      	mov	r0, r3
 80022d8:	f007 f95e 	bl	8009598 <HAL_RCCEx_PeriphCLKConfig>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_SPI_MspInit+0xde>
      Error_Handler();
 80022e2:	f7ff fd8b 	bl	8001dfc <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022e6:	4b1d      	ldr	r3, [pc, #116]	; (800235c <HAL_SPI_MspInit+0x154>)
 80022e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022ec:	4a1b      	ldr	r2, [pc, #108]	; (800235c <HAL_SPI_MspInit+0x154>)
 80022ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022f6:	4b19      	ldr	r3, [pc, #100]	; (800235c <HAL_SPI_MspInit+0x154>)
 80022f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002304:	4b15      	ldr	r3, [pc, #84]	; (800235c <HAL_SPI_MspInit+0x154>)
 8002306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800230a:	4a14      	ldr	r2, [pc, #80]	; (800235c <HAL_SPI_MspInit+0x154>)
 800230c:	f043 0302 	orr.w	r3, r3, #2
 8002310:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <HAL_SPI_MspInit+0x154>)
 8002316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002322:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002326:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002336:	2300      	movs	r3, #0
 8002338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800233c:	2305      	movs	r3, #5
 800233e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002342:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002346:	4619      	mov	r1, r3
 8002348:	4805      	ldr	r0, [pc, #20]	; (8002360 <HAL_SPI_MspInit+0x158>)
 800234a:	f005 f989 	bl	8007660 <HAL_GPIO_Init>
}
 800234e:	bf00      	nop
 8002350:	37e8      	adds	r7, #232	; 0xe8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40013000 	.word	0x40013000
 800235c:	58024400 	.word	0x58024400
 8002360:	58020400 	.word	0x58020400
 8002364:	40003800 	.word	0x40003800

08002368 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a29      	ldr	r2, [pc, #164]	; (800241c <HAL_TIM_PWM_MspInit+0xb4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d12f      	bne.n	80023da <HAL_TIM_PWM_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800237a:	4b29      	ldr	r3, [pc, #164]	; (8002420 <HAL_TIM_PWM_MspInit+0xb8>)
 800237c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002380:	4a27      	ldr	r2, [pc, #156]	; (8002420 <HAL_TIM_PWM_MspInit+0xb8>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800238a:	4b25      	ldr	r3, [pc, #148]	; (8002420 <HAL_TIM_PWM_MspInit+0xb8>)
 800238c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002398:	2200      	movs	r2, #0
 800239a:	2100      	movs	r1, #0
 800239c:	2018      	movs	r0, #24
 800239e:	f002 f926 	bl	80045ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80023a2:	2018      	movs	r0, #24
 80023a4:	f002 f93d 	bl	8004622 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80023a8:	2200      	movs	r2, #0
 80023aa:	2100      	movs	r1, #0
 80023ac:	2019      	movs	r0, #25
 80023ae:	f002 f91e 	bl	80045ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80023b2:	2019      	movs	r0, #25
 80023b4:	f002 f935 	bl	8004622 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80023b8:	2200      	movs	r2, #0
 80023ba:	2100      	movs	r1, #0
 80023bc:	201a      	movs	r0, #26
 80023be:	f002 f916 	bl	80045ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80023c2:	201a      	movs	r0, #26
 80023c4:	f002 f92d 	bl	8004622 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80023c8:	2200      	movs	r2, #0
 80023ca:	2100      	movs	r1, #0
 80023cc:	201b      	movs	r0, #27
 80023ce:	f002 f90e 	bl	80045ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80023d2:	201b      	movs	r0, #27
 80023d4:	f002 f925 	bl	8004622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80023d8:	e01b      	b.n	8002412 <HAL_TIM_PWM_MspInit+0xaa>
  else if(htim_pwm->Instance==TIM2)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e2:	d116      	bne.n	8002412 <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023e4:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <HAL_TIM_PWM_MspInit+0xb8>)
 80023e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023ea:	4a0d      	ldr	r2, [pc, #52]	; (8002420 <HAL_TIM_PWM_MspInit+0xb8>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023f4:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <HAL_TIM_PWM_MspInit+0xb8>)
 80023f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002402:	2200      	movs	r2, #0
 8002404:	2100      	movs	r1, #0
 8002406:	201c      	movs	r0, #28
 8002408:	f002 f8f1 	bl	80045ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800240c:	201c      	movs	r0, #28
 800240e:	f002 f908 	bl	8004622 <HAL_NVIC_EnableIRQ>
}
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40010000 	.word	0x40010000
 8002420:	58024400 	.word	0x58024400

08002424 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	; 0x28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a26      	ldr	r2, [pc, #152]	; (80024dc <HAL_TIM_MspPostInit+0xb8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d120      	bne.n	8002488 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002446:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <HAL_TIM_MspPostInit+0xbc>)
 8002448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800244c:	4a24      	ldr	r2, [pc, #144]	; (80024e0 <HAL_TIM_MspPostInit+0xbc>)
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002456:	4b22      	ldr	r3, [pc, #136]	; (80024e0 <HAL_TIM_MspPostInit+0xbc>)
 8002458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002464:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	2302      	movs	r3, #2
 800246c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002472:	2300      	movs	r3, #0
 8002474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002476:	2301      	movs	r3, #1
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247a:	f107 0314 	add.w	r3, r7, #20
 800247e:	4619      	mov	r1, r3
 8002480:	4818      	ldr	r0, [pc, #96]	; (80024e4 <HAL_TIM_MspPostInit+0xc0>)
 8002482:	f005 f8ed 	bl	8007660 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002486:	e024      	b.n	80024d2 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002490:	d11f      	bne.n	80024d2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002492:	4b13      	ldr	r3, [pc, #76]	; (80024e0 <HAL_TIM_MspPostInit+0xbc>)
 8002494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002498:	4a11      	ldr	r2, [pc, #68]	; (80024e0 <HAL_TIM_MspPostInit+0xbc>)
 800249a:	f043 0302 	orr.w	r3, r3, #2
 800249e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024a2:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <HAL_TIM_MspPostInit+0xbc>)
 80024a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80024b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b6:	2302      	movs	r3, #2
 80024b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024be:	2300      	movs	r3, #0
 80024c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024c2:	2301      	movs	r3, #1
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c6:	f107 0314 	add.w	r3, r7, #20
 80024ca:	4619      	mov	r1, r3
 80024cc:	4806      	ldr	r0, [pc, #24]	; (80024e8 <HAL_TIM_MspPostInit+0xc4>)
 80024ce:	f005 f8c7 	bl	8007660 <HAL_GPIO_Init>
}
 80024d2:	bf00      	nop
 80024d4:	3728      	adds	r7, #40	; 0x28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40010000 	.word	0x40010000
 80024e0:	58024400 	.word	0x58024400
 80024e4:	58020000 	.word	0x58020000
 80024e8:	58020400 	.word	0x58020400

080024ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b0b8      	sub	sp, #224	; 0xe0
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002504:	f107 0310 	add.w	r3, r7, #16
 8002508:	22bc      	movs	r2, #188	; 0xbc
 800250a:	2100      	movs	r1, #0
 800250c:	4618      	mov	r0, r3
 800250e:	f00d fc8b 	bl	800fe28 <memset>
  if(huart->Instance==USART1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a29      	ldr	r2, [pc, #164]	; (80025bc <HAL_UART_MspInit+0xd0>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d14a      	bne.n	80025b2 <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800251c:	2301      	movs	r3, #1
 800251e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002520:	2300      	movs	r3, #0
 8002522:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002526:	f107 0310 	add.w	r3, r7, #16
 800252a:	4618      	mov	r0, r3
 800252c:	f007 f834 	bl	8009598 <HAL_RCCEx_PeriphCLKConfig>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002536:	f7ff fc61 	bl	8001dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800253a:	4b21      	ldr	r3, [pc, #132]	; (80025c0 <HAL_UART_MspInit+0xd4>)
 800253c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002540:	4a1f      	ldr	r2, [pc, #124]	; (80025c0 <HAL_UART_MspInit+0xd4>)
 8002542:	f043 0310 	orr.w	r3, r3, #16
 8002546:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800254a:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <HAL_UART_MspInit+0xd4>)
 800254c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002558:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <HAL_UART_MspInit+0xd4>)
 800255a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800255e:	4a18      	ldr	r2, [pc, #96]	; (80025c0 <HAL_UART_MspInit+0xd4>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002568:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <HAL_UART_MspInit+0xd4>)
 800256a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002576:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800257a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258a:	2300      	movs	r3, #0
 800258c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002590:	2307      	movs	r3, #7
 8002592:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002596:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800259a:	4619      	mov	r1, r3
 800259c:	4809      	ldr	r0, [pc, #36]	; (80025c4 <HAL_UART_MspInit+0xd8>)
 800259e:	f005 f85f 	bl	8007660 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	2100      	movs	r1, #0
 80025a6:	2025      	movs	r0, #37	; 0x25
 80025a8:	f002 f821 	bl	80045ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025ac:	2025      	movs	r0, #37	; 0x25
 80025ae:	f002 f838 	bl	8004622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80025b2:	bf00      	nop
 80025b4:	37e0      	adds	r7, #224	; 0xe0
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40011000 	.word	0x40011000
 80025c0:	58024400 	.word	0x58024400
 80025c4:	58020000 	.word	0x58020000

080025c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025cc:	e7fe      	b.n	80025cc <NMI_Handler+0x4>

080025ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025d2:	e7fe      	b.n	80025d2 <HardFault_Handler+0x4>

080025d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025d8:	e7fe      	b.n	80025d8 <MemManage_Handler+0x4>

080025da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025de:	e7fe      	b.n	80025de <BusFault_Handler+0x4>

080025e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025e4:	e7fe      	b.n	80025e4 <UsageFault_Handler+0x4>

080025e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025e6:	b480      	push	{r7}
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002614:	f000 f976 	bl	8002904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}

0800261c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002620:	4802      	ldr	r0, [pc, #8]	; (800262c <DMA1_Stream0_IRQHandler+0x10>)
 8002622:	f003 fd0b 	bl	800603c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	24000124 	.word	0x24000124

08002630 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002634:	4802      	ldr	r0, [pc, #8]	; (8002640 <DMA1_Stream1_IRQHandler+0x10>)
 8002636:	f003 fd01 	bl	800603c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	2400019c 	.word	0x2400019c

08002644 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002648:	4802      	ldr	r0, [pc, #8]	; (8002654 <TIM1_BRK_IRQHandler+0x10>)
 800264a:	f00a f896 	bl	800c77a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	24000384 	.word	0x24000384

08002658 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800265c:	4802      	ldr	r0, [pc, #8]	; (8002668 <TIM1_UP_IRQHandler+0x10>)
 800265e:	f00a f88c 	bl	800c77a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	24000384 	.word	0x24000384

0800266c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002670:	4802      	ldr	r0, [pc, #8]	; (800267c <TIM1_TRG_COM_IRQHandler+0x10>)
 8002672:	f00a f882 	bl	800c77a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	24000384 	.word	0x24000384

08002680 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002684:	4802      	ldr	r0, [pc, #8]	; (8002690 <TIM1_CC_IRQHandler+0x10>)
 8002686:	f00a f878 	bl	800c77a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	24000384 	.word	0x24000384

08002694 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002698:	4802      	ldr	r0, [pc, #8]	; (80026a4 <TIM2_IRQHandler+0x10>)
 800269a:	f00a f86e 	bl	800c77a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	240003d0 	.word	0x240003d0

080026a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026ac:	4802      	ldr	r0, [pc, #8]	; (80026b8 <USART1_IRQHandler+0x10>)
 80026ae:	f00b f8bb 	bl	800d828 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	2400041c 	.word	0x2400041c

080026bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026c0:	4b37      	ldr	r3, [pc, #220]	; (80027a0 <SystemInit+0xe4>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c6:	4a36      	ldr	r2, [pc, #216]	; (80027a0 <SystemInit+0xe4>)
 80026c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026d0:	4b34      	ldr	r3, [pc, #208]	; (80027a4 <SystemInit+0xe8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	2b06      	cmp	r3, #6
 80026da:	d807      	bhi.n	80026ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026dc:	4b31      	ldr	r3, [pc, #196]	; (80027a4 <SystemInit+0xe8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f023 030f 	bic.w	r3, r3, #15
 80026e4:	4a2f      	ldr	r2, [pc, #188]	; (80027a4 <SystemInit+0xe8>)
 80026e6:	f043 0307 	orr.w	r3, r3, #7
 80026ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80026ec:	4b2e      	ldr	r3, [pc, #184]	; (80027a8 <SystemInit+0xec>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a2d      	ldr	r2, [pc, #180]	; (80027a8 <SystemInit+0xec>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026f8:	4b2b      	ldr	r3, [pc, #172]	; (80027a8 <SystemInit+0xec>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80026fe:	4b2a      	ldr	r3, [pc, #168]	; (80027a8 <SystemInit+0xec>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	4929      	ldr	r1, [pc, #164]	; (80027a8 <SystemInit+0xec>)
 8002704:	4b29      	ldr	r3, [pc, #164]	; (80027ac <SystemInit+0xf0>)
 8002706:	4013      	ands	r3, r2
 8002708:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800270a:	4b26      	ldr	r3, [pc, #152]	; (80027a4 <SystemInit+0xe8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d007      	beq.n	8002726 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002716:	4b23      	ldr	r3, [pc, #140]	; (80027a4 <SystemInit+0xe8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 030f 	bic.w	r3, r3, #15
 800271e:	4a21      	ldr	r2, [pc, #132]	; (80027a4 <SystemInit+0xe8>)
 8002720:	f043 0307 	orr.w	r3, r3, #7
 8002724:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <SystemInit+0xec>)
 8002728:	2200      	movs	r2, #0
 800272a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800272c:	4b1e      	ldr	r3, [pc, #120]	; (80027a8 <SystemInit+0xec>)
 800272e:	2200      	movs	r2, #0
 8002730:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002732:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <SystemInit+0xec>)
 8002734:	2200      	movs	r2, #0
 8002736:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002738:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <SystemInit+0xec>)
 800273a:	4a1d      	ldr	r2, [pc, #116]	; (80027b0 <SystemInit+0xf4>)
 800273c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800273e:	4b1a      	ldr	r3, [pc, #104]	; (80027a8 <SystemInit+0xec>)
 8002740:	4a1c      	ldr	r2, [pc, #112]	; (80027b4 <SystemInit+0xf8>)
 8002742:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002744:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <SystemInit+0xec>)
 8002746:	4a1c      	ldr	r2, [pc, #112]	; (80027b8 <SystemInit+0xfc>)
 8002748:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800274a:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <SystemInit+0xec>)
 800274c:	2200      	movs	r2, #0
 800274e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002750:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <SystemInit+0xec>)
 8002752:	4a19      	ldr	r2, [pc, #100]	; (80027b8 <SystemInit+0xfc>)
 8002754:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002756:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <SystemInit+0xec>)
 8002758:	2200      	movs	r2, #0
 800275a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800275c:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <SystemInit+0xec>)
 800275e:	4a16      	ldr	r2, [pc, #88]	; (80027b8 <SystemInit+0xfc>)
 8002760:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002762:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <SystemInit+0xec>)
 8002764:	2200      	movs	r2, #0
 8002766:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002768:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <SystemInit+0xec>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a0e      	ldr	r2, [pc, #56]	; (80027a8 <SystemInit+0xec>)
 800276e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002772:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002774:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <SystemInit+0xec>)
 8002776:	2200      	movs	r2, #0
 8002778:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800277a:	4b10      	ldr	r3, [pc, #64]	; (80027bc <SystemInit+0x100>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <SystemInit+0x104>)
 8002780:	4013      	ands	r3, r2
 8002782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002786:	d202      	bcs.n	800278e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002788:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <SystemInit+0x108>)
 800278a:	2201      	movs	r2, #1
 800278c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800278e:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <SystemInit+0x10c>)
 8002790:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002794:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002796:	bf00      	nop
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000ed00 	.word	0xe000ed00
 80027a4:	52002000 	.word	0x52002000
 80027a8:	58024400 	.word	0x58024400
 80027ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80027b0:	02020200 	.word	0x02020200
 80027b4:	01ff0000 	.word	0x01ff0000
 80027b8:	01010280 	.word	0x01010280
 80027bc:	5c001000 	.word	0x5c001000
 80027c0:	ffff0000 	.word	0xffff0000
 80027c4:	51008108 	.word	0x51008108
 80027c8:	52004000 	.word	0x52004000

080027cc <Reset_Handler>:
 80027cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002804 <LoopFillZerobss+0xe>
 80027d0:	f7ff ff74 	bl	80026bc <SystemInit>
 80027d4:	480c      	ldr	r0, [pc, #48]	; (8002808 <LoopFillZerobss+0x12>)
 80027d6:	490d      	ldr	r1, [pc, #52]	; (800280c <LoopFillZerobss+0x16>)
 80027d8:	4a0d      	ldr	r2, [pc, #52]	; (8002810 <LoopFillZerobss+0x1a>)
 80027da:	2300      	movs	r3, #0
 80027dc:	e002      	b.n	80027e4 <LoopCopyDataInit>

080027de <CopyDataInit>:
 80027de:	58d4      	ldr	r4, [r2, r3]
 80027e0:	50c4      	str	r4, [r0, r3]
 80027e2:	3304      	adds	r3, #4

080027e4 <LoopCopyDataInit>:
 80027e4:	18c4      	adds	r4, r0, r3
 80027e6:	428c      	cmp	r4, r1
 80027e8:	d3f9      	bcc.n	80027de <CopyDataInit>
 80027ea:	4a0a      	ldr	r2, [pc, #40]	; (8002814 <LoopFillZerobss+0x1e>)
 80027ec:	4c0a      	ldr	r4, [pc, #40]	; (8002818 <LoopFillZerobss+0x22>)
 80027ee:	2300      	movs	r3, #0
 80027f0:	e001      	b.n	80027f6 <LoopFillZerobss>

080027f2 <FillZerobss>:
 80027f2:	6013      	str	r3, [r2, #0]
 80027f4:	3204      	adds	r2, #4

080027f6 <LoopFillZerobss>:
 80027f6:	42a2      	cmp	r2, r4
 80027f8:	d3fb      	bcc.n	80027f2 <FillZerobss>
 80027fa:	f00d faf1 	bl	800fde0 <__libc_init_array>
 80027fe:	f7fe fbcb 	bl	8000f98 <main>
 8002802:	4770      	bx	lr
 8002804:	24080000 	.word	0x24080000
 8002808:	24000000 	.word	0x24000000
 800280c:	24000030 	.word	0x24000030
 8002810:	0800feb8 	.word	0x0800feb8
 8002814:	24000040 	.word	0x24000040
 8002818:	240005fc 	.word	0x240005fc

0800281c <ADC3_IRQHandler>:
 800281c:	e7fe      	b.n	800281c <ADC3_IRQHandler>
	...

08002820 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002826:	2003      	movs	r0, #3
 8002828:	f001 fed6 	bl	80045d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800282c:	f006 fcde 	bl	80091ec <HAL_RCC_GetSysClockFreq>
 8002830:	4602      	mov	r2, r0
 8002832:	4b15      	ldr	r3, [pc, #84]	; (8002888 <HAL_Init+0x68>)
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	0a1b      	lsrs	r3, r3, #8
 8002838:	f003 030f 	and.w	r3, r3, #15
 800283c:	4913      	ldr	r1, [pc, #76]	; (800288c <HAL_Init+0x6c>)
 800283e:	5ccb      	ldrb	r3, [r1, r3]
 8002840:	f003 031f 	and.w	r3, r3, #31
 8002844:	fa22 f303 	lsr.w	r3, r2, r3
 8002848:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800284a:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <HAL_Init+0x68>)
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	4a0e      	ldr	r2, [pc, #56]	; (800288c <HAL_Init+0x6c>)
 8002854:	5cd3      	ldrb	r3, [r2, r3]
 8002856:	f003 031f 	and.w	r3, r3, #31
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
 8002860:	4a0b      	ldr	r2, [pc, #44]	; (8002890 <HAL_Init+0x70>)
 8002862:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002864:	4a0b      	ldr	r2, [pc, #44]	; (8002894 <HAL_Init+0x74>)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800286a:	200f      	movs	r0, #15
 800286c:	f000 f814 	bl	8002898 <HAL_InitTick>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e002      	b.n	8002880 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800287a:	f7ff fac5 	bl	8001e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	58024400 	.word	0x58024400
 800288c:	0800fe68 	.word	0x0800fe68
 8002890:	24000024 	.word	0x24000024
 8002894:	24000020 	.word	0x24000020

08002898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80028a0:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <HAL_InitTick+0x60>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e021      	b.n	80028f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80028ac:	4b13      	ldr	r3, [pc, #76]	; (80028fc <HAL_InitTick+0x64>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <HAL_InitTick+0x60>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	4619      	mov	r1, r3
 80028b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80028be:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c2:	4618      	mov	r0, r3
 80028c4:	f001 febb 	bl	800463e <HAL_SYSTICK_Config>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e00e      	b.n	80028f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b0f      	cmp	r3, #15
 80028d6:	d80a      	bhi.n	80028ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d8:	2200      	movs	r2, #0
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028e0:	f001 fe85 	bl	80045ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028e4:	4a06      	ldr	r2, [pc, #24]	; (8002900 <HAL_InitTick+0x68>)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e000      	b.n	80028f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	2400002c 	.word	0x2400002c
 80028fc:	24000020 	.word	0x24000020
 8002900:	24000028 	.word	0x24000028

08002904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_IncTick+0x20>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_IncTick+0x24>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4413      	add	r3, r2
 8002914:	4a04      	ldr	r2, [pc, #16]	; (8002928 <HAL_IncTick+0x24>)
 8002916:	6013      	str	r3, [r2, #0]
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	2400002c 	.word	0x2400002c
 8002928:	240005f8 	.word	0x240005f8

0800292c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return uwTick;
 8002930:	4b03      	ldr	r3, [pc, #12]	; (8002940 <HAL_GetTick+0x14>)
 8002932:	681b      	ldr	r3, [r3, #0]
}
 8002934:	4618      	mov	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	240005f8 	.word	0x240005f8

08002944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800294c:	f7ff ffee 	bl	800292c <HAL_GetTick>
 8002950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800295c:	d005      	beq.n	800296a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800295e:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <HAL_Delay+0x44>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4413      	add	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800296a:	bf00      	nop
 800296c:	f7ff ffde 	bl	800292c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	429a      	cmp	r2, r3
 800297a:	d8f7      	bhi.n	800296c <HAL_Delay+0x28>
  {
  }
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	2400002c 	.word	0x2400002c

0800298c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <HAL_SuspendTick+0x1c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a04      	ldr	r2, [pc, #16]	; (80029a8 <HAL_SuspendTick+0x1c>)
 8002996:	f023 0302 	bic.w	r3, r3, #2
 800299a:	6013      	str	r3, [r2, #0]
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	e000e010 	.word	0xe000e010

080029ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80029b0:	4b03      	ldr	r3, [pc, #12]	; (80029c0 <HAL_GetREVID+0x14>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	0c1b      	lsrs	r3, r3, #16
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	5c001000 	.word	0x5c001000

080029c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	609a      	str	r2, [r3, #8]
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	609a      	str	r2, [r3, #8]
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
 8002a38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	3360      	adds	r3, #96	; 0x60
 8002a3e:	461a      	mov	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002a60:	bf00      	nop
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	611a      	str	r2, [r3, #16]
}
 8002a92:	bf00      	nop
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b087      	sub	sp, #28
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	3360      	adds	r3, #96	; 0x60
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	601a      	str	r2, [r3, #0]
  }
}
 8002ac8:	bf00      	nop
 8002aca:	371c      	adds	r7, #28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b087      	sub	sp, #28
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	3330      	adds	r3, #48	; 0x30
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	0a1b      	lsrs	r3, r3, #8
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	4413      	add	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f003 031f 	and.w	r3, r3, #31
 8002b24:	211f      	movs	r1, #31
 8002b26:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	401a      	ands	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	0e9b      	lsrs	r3, r3, #26
 8002b32:	f003 011f 	and.w	r1, r3, #31
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f003 031f 	and.w	r3, r3, #31
 8002b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b40:	431a      	orrs	r2, r3
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b46:	bf00      	nop
 8002b48:	371c      	adds	r7, #28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f023 0203 	bic.w	r2, r3, #3
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	60da      	str	r2, [r3, #12]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	3314      	adds	r3, #20
 8002b88:	461a      	mov	r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	0e5b      	lsrs	r3, r3, #25
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	4413      	add	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	0d1b      	lsrs	r3, r3, #20
 8002ba0:	f003 031f 	and.w	r3, r3, #31
 8002ba4:	2107      	movs	r1, #7
 8002ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	401a      	ands	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	0d1b      	lsrs	r3, r3, #20
 8002bb2:	f003 031f 	and.w	r3, r3, #31
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002bc2:	bf00      	nop
 8002bc4:	371c      	adds	r7, #28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
	...

08002bd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002be8:	43db      	mvns	r3, r3
 8002bea:	401a      	ands	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f003 0318 	and.w	r3, r3, #24
 8002bf2:	4908      	ldr	r1, [pc, #32]	; (8002c14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002bf4:	40d9      	lsrs	r1, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	400b      	ands	r3, r1
 8002bfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002c06:	bf00      	nop
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	000fffff 	.word	0x000fffff

08002c18 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 031f 	and.w	r3, r3, #31
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6093      	str	r3, [r2, #8]
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	5fffffc0 	.word	0x5fffffc0

08002c58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c6c:	d101      	bne.n	8002c72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <LL_ADC_EnableInternalRegulator+0x24>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	6fffffc0 	.word	0x6fffffc0

08002ca8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cbc:	d101      	bne.n	8002cc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <LL_ADC_Enable+0x24>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	f043 0201 	orr.w	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	7fffffc0 	.word	0x7fffffc0

08002cf8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <LL_ADC_Disable+0x24>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	f043 0202 	orr.w	r2, r3, #2
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	7fffffc0 	.word	0x7fffffc0

08002d20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <LL_ADC_IsEnabled+0x18>
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <LL_ADC_IsEnabled+0x1a>
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d101      	bne.n	8002d5e <LL_ADC_IsDisableOngoing+0x18>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <LL_ADC_IsDisableOngoing+0x1a>
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <LL_ADC_REG_StartConversion+0x24>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	f043 0204 	orr.w	r2, r3, #4
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	7fffffc0 	.word	0x7fffffc0

08002d94 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <LL_ADC_REG_StopConversion+0x24>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	f043 0210 	orr.w	r2, r3, #16
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	7fffffc0 	.word	0x7fffffc0

08002dbc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d101      	bne.n	8002dd4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
	...

08002de4 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <LL_ADC_INJ_StopConversion+0x24>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	f043 0220 	orr.w	r2, r3, #32
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	7fffffc0 	.word	0x7fffffc0

08002e0c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0308 	and.w	r3, r3, #8
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d101      	bne.n	8002e24 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e34:	b590      	push	{r4, r7, lr}
 8002e36:	b089      	sub	sp, #36	; 0x24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e18f      	b.n	800316e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d109      	bne.n	8002e70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7fe ffed 	bl	8001e3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff feef 	bl	8002c58 <LL_ADC_IsDeepPowerDownEnabled>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d004      	beq.n	8002e8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff fed5 	bl	8002c34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff ff0a 	bl	8002ca8 <LL_ADC_IsInternalRegulatorEnabled>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d114      	bne.n	8002ec4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff feee 	bl	8002c80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ea4:	4b87      	ldr	r3, [pc, #540]	; (80030c4 <HAL_ADC_Init+0x290>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	099b      	lsrs	r3, r3, #6
 8002eaa:	4a87      	ldr	r2, [pc, #540]	; (80030c8 <HAL_ADC_Init+0x294>)
 8002eac:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb0:	099b      	lsrs	r3, r3, #6
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002eb6:	e002      	b.n	8002ebe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f9      	bne.n	8002eb8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff feed 	bl	8002ca8 <LL_ADC_IsInternalRegulatorEnabled>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10d      	bne.n	8002ef0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed8:	f043 0210 	orr.w	r2, r3, #16
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee4:	f043 0201 	orr.w	r2, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff61 	bl	8002dbc <LL_ADC_REG_IsConversionOngoing>
 8002efa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f040 8129 	bne.w	800315c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f040 8125 	bne.w	800315c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f16:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f1a:	f043 0202 	orr.w	r2, r3, #2
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fefa 	bl	8002d20 <LL_ADC_IsEnabled>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d136      	bne.n	8002fa0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a65      	ldr	r2, [pc, #404]	; (80030cc <HAL_ADC_Init+0x298>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d004      	beq.n	8002f46 <HAL_ADC_Init+0x112>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a63      	ldr	r2, [pc, #396]	; (80030d0 <HAL_ADC_Init+0x29c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d10e      	bne.n	8002f64 <HAL_ADC_Init+0x130>
 8002f46:	4861      	ldr	r0, [pc, #388]	; (80030cc <HAL_ADC_Init+0x298>)
 8002f48:	f7ff feea 	bl	8002d20 <LL_ADC_IsEnabled>
 8002f4c:	4604      	mov	r4, r0
 8002f4e:	4860      	ldr	r0, [pc, #384]	; (80030d0 <HAL_ADC_Init+0x29c>)
 8002f50:	f7ff fee6 	bl	8002d20 <LL_ADC_IsEnabled>
 8002f54:	4603      	mov	r3, r0
 8002f56:	4323      	orrs	r3, r4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	e008      	b.n	8002f76 <HAL_ADC_Init+0x142>
 8002f64:	485b      	ldr	r0, [pc, #364]	; (80030d4 <HAL_ADC_Init+0x2a0>)
 8002f66:	f7ff fedb 	bl	8002d20 <LL_ADC_IsEnabled>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	bf0c      	ite	eq
 8002f70:	2301      	moveq	r3, #1
 8002f72:	2300      	movne	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d012      	beq.n	8002fa0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a53      	ldr	r2, [pc, #332]	; (80030cc <HAL_ADC_Init+0x298>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d004      	beq.n	8002f8e <HAL_ADC_Init+0x15a>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a51      	ldr	r2, [pc, #324]	; (80030d0 <HAL_ADC_Init+0x29c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d101      	bne.n	8002f92 <HAL_ADC_Init+0x15e>
 8002f8e:	4a52      	ldr	r2, [pc, #328]	; (80030d8 <HAL_ADC_Init+0x2a4>)
 8002f90:	e000      	b.n	8002f94 <HAL_ADC_Init+0x160>
 8002f92:	4a52      	ldr	r2, [pc, #328]	; (80030dc <HAL_ADC_Init+0x2a8>)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	f7ff fd12 	bl	80029c4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002fa0:	f7ff fd04 	bl	80029ac <HAL_GetREVID>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f241 0203 	movw	r2, #4099	; 0x1003
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d914      	bls.n	8002fd8 <HAL_ADC_Init+0x1a4>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b10      	cmp	r3, #16
 8002fb4:	d110      	bne.n	8002fd8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	7d5b      	ldrb	r3, [r3, #21]
 8002fba:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fc0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002fc6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	7f1b      	ldrb	r3, [r3, #28]
 8002fcc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002fce:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fd0:	f043 030c 	orr.w	r3, r3, #12
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	e00d      	b.n	8002ff4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	7d5b      	ldrb	r3, [r3, #21]
 8002fdc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fe2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002fe8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	7f1b      	ldrb	r3, [r3, #28]
 8002fee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	7f1b      	ldrb	r3, [r3, #28]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d106      	bne.n	800300a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	3b01      	subs	r3, #1
 8003002:	045b      	lsls	r3, r3, #17
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4313      	orrs	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	2b00      	cmp	r3, #0
 8003010:	d009      	beq.n	8003026 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	4b2c      	ldr	r3, [pc, #176]	; (80030e0 <HAL_ADC_Init+0x2ac>)
 800302e:	4013      	ands	r3, r2
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	69b9      	ldr	r1, [r7, #24]
 8003036:	430b      	orrs	r3, r1
 8003038:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff febc 	bl	8002dbc <LL_ADC_REG_IsConversionOngoing>
 8003044:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff fede 	bl	8002e0c <LL_ADC_INJ_IsConversionOngoing>
 8003050:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d15f      	bne.n	8003118 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d15c      	bne.n	8003118 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	7d1b      	ldrb	r3, [r3, #20]
 8003062:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	4b1c      	ldr	r3, [pc, #112]	; (80030e4 <HAL_ADC_Init+0x2b0>)
 8003074:	4013      	ands	r3, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	69b9      	ldr	r1, [r7, #24]
 800307c:	430b      	orrs	r3, r1
 800307e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003086:	2b01      	cmp	r3, #1
 8003088:	d130      	bne.n	80030ec <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	4b14      	ldr	r3, [pc, #80]	; (80030e8 <HAL_ADC_Init+0x2b4>)
 8003098:	4013      	ands	r3, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800309e:	3a01      	subs	r2, #1
 80030a0:	0411      	lsls	r1, r2, #16
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030a6:	4311      	orrs	r1, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030ac:	4311      	orrs	r1, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030b2:	430a      	orrs	r2, r1
 80030b4:	431a      	orrs	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	611a      	str	r2, [r3, #16]
 80030c0:	e01c      	b.n	80030fc <HAL_ADC_Init+0x2c8>
 80030c2:	bf00      	nop
 80030c4:	24000020 	.word	0x24000020
 80030c8:	053e2d63 	.word	0x053e2d63
 80030cc:	40022000 	.word	0x40022000
 80030d0:	40022100 	.word	0x40022100
 80030d4:	58026000 	.word	0x58026000
 80030d8:	40022300 	.word	0x40022300
 80030dc:	58026300 	.word	0x58026300
 80030e0:	fff0c003 	.word	0xfff0c003
 80030e4:	ffffbffc 	.word	0xffffbffc
 80030e8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691a      	ldr	r2, [r3, #16]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0201 	bic.w	r2, r2, #1
 80030fa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 feea 	bl	8003eec <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d10c      	bne.n	800313a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	f023 010f 	bic.w	r1, r3, #15
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	1e5a      	subs	r2, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	631a      	str	r2, [r3, #48]	; 0x30
 8003138:	e007      	b.n	800314a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 020f 	bic.w	r2, r2, #15
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314e:	f023 0303 	bic.w	r3, r3, #3
 8003152:	f043 0201 	orr.w	r2, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	655a      	str	r2, [r3, #84]	; 0x54
 800315a:	e007      	b.n	800316c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003160:	f043 0210 	orr.w	r2, r3, #16
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800316c:	7ffb      	ldrb	r3, [r7, #31]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3724      	adds	r7, #36	; 0x24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd90      	pop	{r4, r7, pc}
 8003176:	bf00      	nop

08003178 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a55      	ldr	r2, [pc, #340]	; (80032e0 <HAL_ADC_Start_DMA+0x168>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d004      	beq.n	8003198 <HAL_ADC_Start_DMA+0x20>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a54      	ldr	r2, [pc, #336]	; (80032e4 <HAL_ADC_Start_DMA+0x16c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d101      	bne.n	800319c <HAL_ADC_Start_DMA+0x24>
 8003198:	4b53      	ldr	r3, [pc, #332]	; (80032e8 <HAL_ADC_Start_DMA+0x170>)
 800319a:	e000      	b.n	800319e <HAL_ADC_Start_DMA+0x26>
 800319c:	4b53      	ldr	r3, [pc, #332]	; (80032ec <HAL_ADC_Start_DMA+0x174>)
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff fd3a 	bl	8002c18 <LL_ADC_GetMultimode>
 80031a4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff fe06 	bl	8002dbc <LL_ADC_REG_IsConversionOngoing>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f040 808c 	bne.w	80032d0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_ADC_Start_DMA+0x4e>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e087      	b.n	80032d6 <HAL_ADC_Start_DMA+0x15e>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	2b05      	cmp	r3, #5
 80031d8:	d002      	beq.n	80031e0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	2b09      	cmp	r3, #9
 80031de:	d170      	bne.n	80032c2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 fd05 	bl	8003bf0 <ADC_Enable>
 80031e6:	4603      	mov	r3, r0
 80031e8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80031ea:	7dfb      	ldrb	r3, [r7, #23]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d163      	bne.n	80032b8 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031f4:	4b3e      	ldr	r3, [pc, #248]	; (80032f0 <HAL_ADC_Start_DMA+0x178>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a37      	ldr	r2, [pc, #220]	; (80032e4 <HAL_ADC_Start_DMA+0x16c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d002      	beq.n	8003210 <HAL_ADC_Start_DMA+0x98>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	e000      	b.n	8003212 <HAL_ADC_Start_DMA+0x9a>
 8003210:	4b33      	ldr	r3, [pc, #204]	; (80032e0 <HAL_ADC_Start_DMA+0x168>)
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	4293      	cmp	r3, r2
 8003218:	d002      	beq.n	8003220 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d105      	bne.n	800322c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003224:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003230:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d006      	beq.n	8003246 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323c:	f023 0206 	bic.w	r2, r3, #6
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	659a      	str	r2, [r3, #88]	; 0x58
 8003244:	e002      	b.n	800324c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003250:	4a28      	ldr	r2, [pc, #160]	; (80032f4 <HAL_ADC_Start_DMA+0x17c>)
 8003252:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003258:	4a27      	ldr	r2, [pc, #156]	; (80032f8 <HAL_ADC_Start_DMA+0x180>)
 800325a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003260:	4a26      	ldr	r2, [pc, #152]	; (80032fc <HAL_ADC_Start_DMA+0x184>)
 8003262:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	221c      	movs	r2, #28
 800326a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0210 	orr.w	r2, r2, #16
 8003282:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	4619      	mov	r1, r3
 800328e:	4610      	mov	r0, r2
 8003290:	f7ff fc5f 	bl	8002b52 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	3340      	adds	r3, #64	; 0x40
 800329e:	4619      	mov	r1, r3
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f001 fefc 	bl	80050a0 <HAL_DMA_Start_IT>
 80032a8:	4603      	mov	r3, r0
 80032aa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fd5b 	bl	8002d6c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80032b6:	e00d      	b.n	80032d4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80032c0:	e008      	b.n	80032d4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80032ce:	e001      	b.n	80032d4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032d0:	2302      	movs	r3, #2
 80032d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80032d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40022000 	.word	0x40022000
 80032e4:	40022100 	.word	0x40022100
 80032e8:	40022300 	.word	0x40022300
 80032ec:	58026300 	.word	0x58026300
 80032f0:	fffff0fe 	.word	0xfffff0fe
 80032f4:	08003dc3 	.word	0x08003dc3
 80032f8:	08003e9b 	.word	0x08003e9b
 80032fc:	08003eb7 	.word	0x08003eb7

08003300 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_ADC_Stop_DMA+0x16>
 8003312:	2302      	movs	r3, #2
 8003314:	e04f      	b.n	80033b6 <HAL_ADC_Stop_DMA+0xb6>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800331e:	2103      	movs	r1, #3
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 fba9 	bl	8003a78 <ADC_ConversionStop>
 8003326:	4603      	mov	r3, r0
 8003328:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d13d      	bne.n	80033ac <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0203 	bic.w	r2, r2, #3
 800333e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003344:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d10f      	bne.n	800336e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003352:	4618      	mov	r0, r3
 8003354:	f002 f90e 	bl	8005574 <HAL_DMA_Abort>
 8003358:	4603      	mov	r3, r0
 800335a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800335c:	7bfb      	ldrb	r3, [r7, #15]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d005      	beq.n	800336e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003366:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0210 	bic.w	r2, r2, #16
 800337c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800337e:	7bfb      	ldrb	r3, [r7, #15]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d105      	bne.n	8003390 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 fcbd 	bl	8003d04 <ADC_Disable>
 800338a:	4603      	mov	r3, r0
 800338c:	73fb      	strb	r3, [r7, #15]
 800338e:	e002      	b.n	8003396 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 fcb7 	bl	8003d04 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003396:	7bfb      	ldrb	r3, [r7, #15]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d107      	bne.n	80033ac <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033a0:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <HAL_ADC_Stop_DMA+0xc0>)
 80033a2:	4013      	ands	r3, r2
 80033a4:	f043 0201 	orr.w	r2, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	ffffeefe 	.word	0xffffeefe

080033c4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033d8:	b590      	push	{r4, r7, lr}
 80033da:	b0a1      	sub	sp, #132	; 0x84
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80033e8:	2300      	movs	r3, #0
 80033ea:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	4a9d      	ldr	r2, [pc, #628]	; (8003668 <HAL_ADC_ConfigChannel+0x290>)
 80033f2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x2a>
 80033fe:	2302      	movs	r3, #2
 8003400:	e321      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x66e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff fcd4 	bl	8002dbc <LL_ADC_REG_IsConversionOngoing>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	f040 8306 	bne.w	8003a28 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003424:	2b00      	cmp	r3, #0
 8003426:	d108      	bne.n	800343a <HAL_ADC_ConfigChannel+0x62>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	0e9b      	lsrs	r3, r3, #26
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	2201      	movs	r2, #1
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	e016      	b.n	8003468 <HAL_ADC_ConfigChannel+0x90>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003442:	fa93 f3a3 	rbit	r3, r3
 8003446:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003448:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800344a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800344c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003452:	2320      	movs	r3, #32
 8003454:	e003      	b.n	800345e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003456:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003458:	fab3 f383 	clz	r3, r3
 800345c:	b2db      	uxtb	r3, r3
 800345e:	f003 031f 	and.w	r3, r3, #31
 8003462:	2201      	movs	r2, #1
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6812      	ldr	r2, [r2, #0]
 800346c:	69d1      	ldr	r1, [r2, #28]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6812      	ldr	r2, [r2, #0]
 8003472:	430b      	orrs	r3, r1
 8003474:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6818      	ldr	r0, [r3, #0]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	6859      	ldr	r1, [r3, #4]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	f7ff fb39 	bl	8002afa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff fc95 	bl	8002dbc <LL_ADC_REG_IsConversionOngoing>
 8003492:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff fcb7 	bl	8002e0c <LL_ADC_INJ_IsConversionOngoing>
 800349e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f040 80b3 	bne.w	800360e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f040 80af 	bne.w	800360e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6818      	ldr	r0, [r3, #0]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	6819      	ldr	r1, [r3, #0]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	461a      	mov	r2, r3
 80034be:	f7ff fb5b 	bl	8002b78 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80034c2:	4b6a      	ldr	r3, [pc, #424]	; (800366c <HAL_ADC_ConfigChannel+0x294>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80034ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034ce:	d10b      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x110>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	695a      	ldr	r2, [r3, #20]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	089b      	lsrs	r3, r3, #2
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	e01d      	b.n	8003524 <HAL_ADC_ConfigChannel+0x14c>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f003 0310 	and.w	r3, r3, #16
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10b      	bne.n	800350e <HAL_ADC_ConfigChannel+0x136>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	695a      	ldr	r2, [r3, #20]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	089b      	lsrs	r3, r3, #2
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	e00a      	b.n	8003524 <HAL_ADC_ConfigChannel+0x14c>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	695a      	ldr	r2, [r3, #20]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	089b      	lsrs	r3, r3, #2
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	2b04      	cmp	r3, #4
 800352c:	d027      	beq.n	800357e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6919      	ldr	r1, [r3, #16]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800353c:	f7ff fa76 	bl	8002a2c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	6919      	ldr	r1, [r3, #16]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	7e5b      	ldrb	r3, [r3, #25]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d102      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x17e>
 8003550:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003554:	e000      	b.n	8003558 <HAL_ADC_ConfigChannel+0x180>
 8003556:	2300      	movs	r3, #0
 8003558:	461a      	mov	r2, r3
 800355a:	f7ff faa0 	bl	8002a9e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	6919      	ldr	r1, [r3, #16]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	7e1b      	ldrb	r3, [r3, #24]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d102      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x19c>
 800356e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003572:	e000      	b.n	8003576 <HAL_ADC_ConfigChannel+0x19e>
 8003574:	2300      	movs	r3, #0
 8003576:	461a      	mov	r2, r3
 8003578:	f7ff fa78 	bl	8002a6c <LL_ADC_SetDataRightShift>
 800357c:	e047      	b.n	800360e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003584:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	069b      	lsls	r3, r3, #26
 800358e:	429a      	cmp	r2, r3
 8003590:	d107      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035a0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	069b      	lsls	r3, r3, #26
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d107      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035c4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	069b      	lsls	r3, r3, #26
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d107      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035e8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	069b      	lsls	r3, r3, #26
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d107      	bne.n	800360e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800360c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff fb84 	bl	8002d20 <LL_ADC_IsEnabled>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	f040 820d 	bne.w	8003a3a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	6819      	ldr	r1, [r3, #0]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	461a      	mov	r2, r3
 800362e:	f7ff facf 	bl	8002bd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	4a0c      	ldr	r2, [pc, #48]	; (8003668 <HAL_ADC_ConfigChannel+0x290>)
 8003638:	4293      	cmp	r3, r2
 800363a:	f040 8133 	bne.w	80038a4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800364a:	2b00      	cmp	r3, #0
 800364c:	d110      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x298>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	0e9b      	lsrs	r3, r3, #26
 8003654:	3301      	adds	r3, #1
 8003656:	f003 031f 	and.w	r3, r3, #31
 800365a:	2b09      	cmp	r3, #9
 800365c:	bf94      	ite	ls
 800365e:	2301      	movls	r3, #1
 8003660:	2300      	movhi	r3, #0
 8003662:	b2db      	uxtb	r3, r3
 8003664:	e01e      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x2cc>
 8003666:	bf00      	nop
 8003668:	47ff0000 	.word	0x47ff0000
 800366c:	5c001000 	.word	0x5c001000
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003676:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003678:	fa93 f3a3 	rbit	r3, r3
 800367c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800367e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003680:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003688:	2320      	movs	r3, #32
 800368a:	e003      	b.n	8003694 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800368c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800368e:	fab3 f383 	clz	r3, r3
 8003692:	b2db      	uxtb	r3, r3
 8003694:	3301      	adds	r3, #1
 8003696:	f003 031f 	and.w	r3, r3, #31
 800369a:	2b09      	cmp	r3, #9
 800369c:	bf94      	ite	ls
 800369e:	2301      	movls	r3, #1
 80036a0:	2300      	movhi	r3, #0
 80036a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d079      	beq.n	800379c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d107      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x2ec>
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	0e9b      	lsrs	r3, r3, #26
 80036ba:	3301      	adds	r3, #1
 80036bc:	069b      	lsls	r3, r3, #26
 80036be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036c2:	e015      	b.n	80036f0 <HAL_ADC_ConfigChannel+0x318>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036cc:	fa93 f3a3 	rbit	r3, r3
 80036d0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80036d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036d4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80036d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80036dc:	2320      	movs	r3, #32
 80036de:	e003      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80036e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036e2:	fab3 f383 	clz	r3, r3
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	3301      	adds	r3, #1
 80036ea:	069b      	lsls	r3, r3, #26
 80036ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d109      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x338>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	0e9b      	lsrs	r3, r3, #26
 8003702:	3301      	adds	r3, #1
 8003704:	f003 031f 	and.w	r3, r3, #31
 8003708:	2101      	movs	r1, #1
 800370a:	fa01 f303 	lsl.w	r3, r1, r3
 800370e:	e017      	b.n	8003740 <HAL_ADC_ConfigChannel+0x368>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003718:	fa93 f3a3 	rbit	r3, r3
 800371c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800371e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003720:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003728:	2320      	movs	r3, #32
 800372a:	e003      	b.n	8003734 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800372c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800372e:	fab3 f383 	clz	r3, r3
 8003732:	b2db      	uxtb	r3, r3
 8003734:	3301      	adds	r3, #1
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	2101      	movs	r1, #1
 800373c:	fa01 f303 	lsl.w	r3, r1, r3
 8003740:	ea42 0103 	orr.w	r1, r2, r3
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10a      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x38e>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	0e9b      	lsrs	r3, r3, #26
 8003756:	3301      	adds	r3, #1
 8003758:	f003 021f 	and.w	r2, r3, #31
 800375c:	4613      	mov	r3, r2
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	4413      	add	r3, r2
 8003762:	051b      	lsls	r3, r3, #20
 8003764:	e018      	b.n	8003798 <HAL_ADC_ConfigChannel+0x3c0>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800376e:	fa93 f3a3 	rbit	r3, r3
 8003772:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003776:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800377e:	2320      	movs	r3, #32
 8003780:	e003      	b.n	800378a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003784:	fab3 f383 	clz	r3, r3
 8003788:	b2db      	uxtb	r3, r3
 800378a:	3301      	adds	r3, #1
 800378c:	f003 021f 	and.w	r2, r3, #31
 8003790:	4613      	mov	r3, r2
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	4413      	add	r3, r2
 8003796:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003798:	430b      	orrs	r3, r1
 800379a:	e07e      	b.n	800389a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d107      	bne.n	80037b8 <HAL_ADC_ConfigChannel+0x3e0>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	0e9b      	lsrs	r3, r3, #26
 80037ae:	3301      	adds	r3, #1
 80037b0:	069b      	lsls	r3, r3, #26
 80037b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037b6:	e015      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x40c>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c0:	fa93 f3a3 	rbit	r3, r3
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80037ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80037d0:	2320      	movs	r3, #32
 80037d2:	e003      	b.n	80037dc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80037d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d6:	fab3 f383 	clz	r3, r3
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	3301      	adds	r3, #1
 80037de:	069b      	lsls	r3, r3, #26
 80037e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d109      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x42c>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	0e9b      	lsrs	r3, r3, #26
 80037f6:	3301      	adds	r3, #1
 80037f8:	f003 031f 	and.w	r3, r3, #31
 80037fc:	2101      	movs	r1, #1
 80037fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003802:	e017      	b.n	8003834 <HAL_ADC_ConfigChannel+0x45c>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	fa93 f3a3 	rbit	r3, r3
 8003810:	61bb      	str	r3, [r7, #24]
  return result;
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800381c:	2320      	movs	r3, #32
 800381e:	e003      	b.n	8003828 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	fab3 f383 	clz	r3, r3
 8003826:	b2db      	uxtb	r3, r3
 8003828:	3301      	adds	r3, #1
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	2101      	movs	r1, #1
 8003830:	fa01 f303 	lsl.w	r3, r1, r3
 8003834:	ea42 0103 	orr.w	r1, r2, r3
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10d      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x488>
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	0e9b      	lsrs	r3, r3, #26
 800384a:	3301      	adds	r3, #1
 800384c:	f003 021f 	and.w	r2, r3, #31
 8003850:	4613      	mov	r3, r2
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	4413      	add	r3, r2
 8003856:	3b1e      	subs	r3, #30
 8003858:	051b      	lsls	r3, r3, #20
 800385a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800385e:	e01b      	b.n	8003898 <HAL_ADC_ConfigChannel+0x4c0>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	fa93 f3a3 	rbit	r3, r3
 800386c:	60fb      	str	r3, [r7, #12]
  return result;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003878:	2320      	movs	r3, #32
 800387a:	e003      	b.n	8003884 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	fab3 f383 	clz	r3, r3
 8003882:	b2db      	uxtb	r3, r3
 8003884:	3301      	adds	r3, #1
 8003886:	f003 021f 	and.w	r2, r3, #31
 800388a:	4613      	mov	r3, r2
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	4413      	add	r3, r2
 8003890:	3b1e      	subs	r3, #30
 8003892:	051b      	lsls	r3, r3, #20
 8003894:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003898:	430b      	orrs	r3, r1
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	6892      	ldr	r2, [r2, #8]
 800389e:	4619      	mov	r1, r3
 80038a0:	f7ff f96a 	bl	8002b78 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f280 80c6 	bge.w	8003a3a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a67      	ldr	r2, [pc, #412]	; (8003a50 <HAL_ADC_ConfigChannel+0x678>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d004      	beq.n	80038c2 <HAL_ADC_ConfigChannel+0x4ea>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a65      	ldr	r2, [pc, #404]	; (8003a54 <HAL_ADC_ConfigChannel+0x67c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d101      	bne.n	80038c6 <HAL_ADC_ConfigChannel+0x4ee>
 80038c2:	4b65      	ldr	r3, [pc, #404]	; (8003a58 <HAL_ADC_ConfigChannel+0x680>)
 80038c4:	e000      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x4f0>
 80038c6:	4b65      	ldr	r3, [pc, #404]	; (8003a5c <HAL_ADC_ConfigChannel+0x684>)
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff f8a1 	bl	8002a10 <LL_ADC_GetCommonPathInternalCh>
 80038ce:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a5e      	ldr	r2, [pc, #376]	; (8003a50 <HAL_ADC_ConfigChannel+0x678>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d004      	beq.n	80038e4 <HAL_ADC_ConfigChannel+0x50c>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a5d      	ldr	r2, [pc, #372]	; (8003a54 <HAL_ADC_ConfigChannel+0x67c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d10e      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x52a>
 80038e4:	485a      	ldr	r0, [pc, #360]	; (8003a50 <HAL_ADC_ConfigChannel+0x678>)
 80038e6:	f7ff fa1b 	bl	8002d20 <LL_ADC_IsEnabled>
 80038ea:	4604      	mov	r4, r0
 80038ec:	4859      	ldr	r0, [pc, #356]	; (8003a54 <HAL_ADC_ConfigChannel+0x67c>)
 80038ee:	f7ff fa17 	bl	8002d20 <LL_ADC_IsEnabled>
 80038f2:	4603      	mov	r3, r0
 80038f4:	4323      	orrs	r3, r4
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	bf0c      	ite	eq
 80038fa:	2301      	moveq	r3, #1
 80038fc:	2300      	movne	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	e008      	b.n	8003914 <HAL_ADC_ConfigChannel+0x53c>
 8003902:	4857      	ldr	r0, [pc, #348]	; (8003a60 <HAL_ADC_ConfigChannel+0x688>)
 8003904:	f7ff fa0c 	bl	8002d20 <LL_ADC_IsEnabled>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	bf0c      	ite	eq
 800390e:	2301      	moveq	r3, #1
 8003910:	2300      	movne	r3, #0
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d07d      	beq.n	8003a14 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a51      	ldr	r2, [pc, #324]	; (8003a64 <HAL_ADC_ConfigChannel+0x68c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d130      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x5ac>
 8003922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003924:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d12b      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a4b      	ldr	r2, [pc, #300]	; (8003a60 <HAL_ADC_ConfigChannel+0x688>)
 8003932:	4293      	cmp	r3, r2
 8003934:	f040 8081 	bne.w	8003a3a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a44      	ldr	r2, [pc, #272]	; (8003a50 <HAL_ADC_ConfigChannel+0x678>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d004      	beq.n	800394c <HAL_ADC_ConfigChannel+0x574>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a43      	ldr	r2, [pc, #268]	; (8003a54 <HAL_ADC_ConfigChannel+0x67c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d101      	bne.n	8003950 <HAL_ADC_ConfigChannel+0x578>
 800394c:	4a42      	ldr	r2, [pc, #264]	; (8003a58 <HAL_ADC_ConfigChannel+0x680>)
 800394e:	e000      	b.n	8003952 <HAL_ADC_ConfigChannel+0x57a>
 8003950:	4a42      	ldr	r2, [pc, #264]	; (8003a5c <HAL_ADC_ConfigChannel+0x684>)
 8003952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003954:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003958:	4619      	mov	r1, r3
 800395a:	4610      	mov	r0, r2
 800395c:	f7ff f845 	bl	80029ea <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003960:	4b41      	ldr	r3, [pc, #260]	; (8003a68 <HAL_ADC_ConfigChannel+0x690>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	099b      	lsrs	r3, r3, #6
 8003966:	4a41      	ldr	r2, [pc, #260]	; (8003a6c <HAL_ADC_ConfigChannel+0x694>)
 8003968:	fba2 2303 	umull	r2, r3, r2, r3
 800396c:	099b      	lsrs	r3, r3, #6
 800396e:	3301      	adds	r3, #1
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003974:	e002      	b.n	800397c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	3b01      	subs	r3, #1
 800397a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1f9      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003982:	e05a      	b.n	8003a3a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a39      	ldr	r2, [pc, #228]	; (8003a70 <HAL_ADC_ConfigChannel+0x698>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d11e      	bne.n	80039cc <HAL_ADC_ConfigChannel+0x5f4>
 800398e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d119      	bne.n	80039cc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a30      	ldr	r2, [pc, #192]	; (8003a60 <HAL_ADC_ConfigChannel+0x688>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d14b      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a2a      	ldr	r2, [pc, #168]	; (8003a50 <HAL_ADC_ConfigChannel+0x678>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d004      	beq.n	80039b6 <HAL_ADC_ConfigChannel+0x5de>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a28      	ldr	r2, [pc, #160]	; (8003a54 <HAL_ADC_ConfigChannel+0x67c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d101      	bne.n	80039ba <HAL_ADC_ConfigChannel+0x5e2>
 80039b6:	4a28      	ldr	r2, [pc, #160]	; (8003a58 <HAL_ADC_ConfigChannel+0x680>)
 80039b8:	e000      	b.n	80039bc <HAL_ADC_ConfigChannel+0x5e4>
 80039ba:	4a28      	ldr	r2, [pc, #160]	; (8003a5c <HAL_ADC_ConfigChannel+0x684>)
 80039bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039c2:	4619      	mov	r1, r3
 80039c4:	4610      	mov	r0, r2
 80039c6:	f7ff f810 	bl	80029ea <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039ca:	e036      	b.n	8003a3a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a28      	ldr	r2, [pc, #160]	; (8003a74 <HAL_ADC_ConfigChannel+0x69c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d131      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x662>
 80039d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d12c      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a1e      	ldr	r2, [pc, #120]	; (8003a60 <HAL_ADC_ConfigChannel+0x688>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d127      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a18      	ldr	r2, [pc, #96]	; (8003a50 <HAL_ADC_ConfigChannel+0x678>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d004      	beq.n	80039fe <HAL_ADC_ConfigChannel+0x626>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a16      	ldr	r2, [pc, #88]	; (8003a54 <HAL_ADC_ConfigChannel+0x67c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d101      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x62a>
 80039fe:	4a16      	ldr	r2, [pc, #88]	; (8003a58 <HAL_ADC_ConfigChannel+0x680>)
 8003a00:	e000      	b.n	8003a04 <HAL_ADC_ConfigChannel+0x62c>
 8003a02:	4a16      	ldr	r2, [pc, #88]	; (8003a5c <HAL_ADC_ConfigChannel+0x684>)
 8003a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	f7fe ffec 	bl	80029ea <LL_ADC_SetCommonPathInternalCh>
 8003a12:	e012      	b.n	8003a3a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a18:	f043 0220 	orr.w	r2, r3, #32
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003a26:	e008      	b.n	8003a3a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2c:	f043 0220 	orr.w	r2, r3, #32
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a42:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3784      	adds	r7, #132	; 0x84
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd90      	pop	{r4, r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40022000 	.word	0x40022000
 8003a54:	40022100 	.word	0x40022100
 8003a58:	40022300 	.word	0x40022300
 8003a5c:	58026300 	.word	0x58026300
 8003a60:	58026000 	.word	0x58026000
 8003a64:	cb840000 	.word	0xcb840000
 8003a68:	24000020 	.word	0x24000020
 8003a6c:	053e2d63 	.word	0x053e2d63
 8003a70:	c7520000 	.word	0xc7520000
 8003a74:	cfb80000 	.word	0xcfb80000

08003a78 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff f994 	bl	8002dbc <LL_ADC_REG_IsConversionOngoing>
 8003a94:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff f9b6 	bl	8002e0c <LL_ADC_INJ_IsConversionOngoing>
 8003aa0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d103      	bne.n	8003ab0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 8098 	beq.w	8003be0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d02a      	beq.n	8003b14 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	7d5b      	ldrb	r3, [r3, #21]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d126      	bne.n	8003b14 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	7d1b      	ldrb	r3, [r3, #20]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d122      	bne.n	8003b14 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003ad2:	e014      	b.n	8003afe <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	4a45      	ldr	r2, [pc, #276]	; (8003bec <ADC_ConversionStop+0x174>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d90d      	bls.n	8003af8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae0:	f043 0210 	orr.w	r2, r3, #16
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aec:	f043 0201 	orr.w	r2, r3, #1
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e074      	b.n	8003be2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	3301      	adds	r3, #1
 8003afc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b08:	2b40      	cmp	r3, #64	; 0x40
 8003b0a:	d1e3      	bne.n	8003ad4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2240      	movs	r2, #64	; 0x40
 8003b12:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d014      	beq.n	8003b44 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff f94c 	bl	8002dbc <LL_ADC_REG_IsConversionOngoing>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00c      	beq.n	8003b44 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff f909 	bl	8002d46 <LL_ADC_IsDisableOngoing>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d104      	bne.n	8003b44 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff f928 	bl	8002d94 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d014      	beq.n	8003b74 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff f95c 	bl	8002e0c <LL_ADC_INJ_IsConversionOngoing>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00c      	beq.n	8003b74 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff f8f1 	bl	8002d46 <LL_ADC_IsDisableOngoing>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d104      	bne.n	8003b74 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff f938 	bl	8002de4 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d005      	beq.n	8003b86 <ADC_ConversionStop+0x10e>
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	d105      	bne.n	8003b8c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003b80:	230c      	movs	r3, #12
 8003b82:	617b      	str	r3, [r7, #20]
        break;
 8003b84:	e005      	b.n	8003b92 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003b86:	2308      	movs	r3, #8
 8003b88:	617b      	str	r3, [r7, #20]
        break;
 8003b8a:	e002      	b.n	8003b92 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003b8c:	2304      	movs	r3, #4
 8003b8e:	617b      	str	r3, [r7, #20]
        break;
 8003b90:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003b92:	f7fe fecb 	bl	800292c <HAL_GetTick>
 8003b96:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003b98:	e01b      	b.n	8003bd2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003b9a:	f7fe fec7 	bl	800292c <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b05      	cmp	r3, #5
 8003ba6:	d914      	bls.n	8003bd2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00d      	beq.n	8003bd2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bba:	f043 0210 	orr.w	r2, r3, #16
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc6:	f043 0201 	orr.w	r2, r3, #1
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e007      	b.n	8003be2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1dc      	bne.n	8003b9a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3720      	adds	r7, #32
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	000cdbff 	.word	0x000cdbff

08003bf0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff f88f 	bl	8002d20 <LL_ADC_IsEnabled>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d16e      	bne.n	8003ce6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	4b38      	ldr	r3, [pc, #224]	; (8003cf0 <ADC_Enable+0x100>)
 8003c10:	4013      	ands	r3, r2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00d      	beq.n	8003c32 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1a:	f043 0210 	orr.w	r2, r3, #16
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c26:	f043 0201 	orr.w	r2, r3, #1
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e05a      	b.n	8003ce8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff f84a 	bl	8002cd0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003c3c:	f7fe fe76 	bl	800292c <HAL_GetTick>
 8003c40:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a2b      	ldr	r2, [pc, #172]	; (8003cf4 <ADC_Enable+0x104>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d004      	beq.n	8003c56 <ADC_Enable+0x66>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a29      	ldr	r2, [pc, #164]	; (8003cf8 <ADC_Enable+0x108>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d101      	bne.n	8003c5a <ADC_Enable+0x6a>
 8003c56:	4b29      	ldr	r3, [pc, #164]	; (8003cfc <ADC_Enable+0x10c>)
 8003c58:	e000      	b.n	8003c5c <ADC_Enable+0x6c>
 8003c5a:	4b29      	ldr	r3, [pc, #164]	; (8003d00 <ADC_Enable+0x110>)
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fe ffdb 	bl	8002c18 <LL_ADC_GetMultimode>
 8003c62:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a23      	ldr	r2, [pc, #140]	; (8003cf8 <ADC_Enable+0x108>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d002      	beq.n	8003c74 <ADC_Enable+0x84>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	e000      	b.n	8003c76 <ADC_Enable+0x86>
 8003c74:	4b1f      	ldr	r3, [pc, #124]	; (8003cf4 <ADC_Enable+0x104>)
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d02c      	beq.n	8003cd8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d130      	bne.n	8003ce6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c84:	e028      	b.n	8003cd8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff f848 	bl	8002d20 <LL_ADC_IsEnabled>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d104      	bne.n	8003ca0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff f818 	bl	8002cd0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ca0:	f7fe fe44 	bl	800292c <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d914      	bls.n	8003cd8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d00d      	beq.n	8003cd8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc0:	f043 0210 	orr.w	r2, r3, #16
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ccc:	f043 0201 	orr.w	r2, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e007      	b.n	8003ce8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d1cf      	bne.n	8003c86 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	8000003f 	.word	0x8000003f
 8003cf4:	40022000 	.word	0x40022000
 8003cf8:	40022100 	.word	0x40022100
 8003cfc:	40022300 	.word	0x40022300
 8003d00:	58026300 	.word	0x58026300

08003d04 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff f818 	bl	8002d46 <LL_ADC_IsDisableOngoing>
 8003d16:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fe ffff 	bl	8002d20 <LL_ADC_IsEnabled>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d047      	beq.n	8003db8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d144      	bne.n	8003db8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 030d 	and.w	r3, r3, #13
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d10c      	bne.n	8003d56 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fe ffd9 	bl	8002cf8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2203      	movs	r2, #3
 8003d4c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d4e:	f7fe fded 	bl	800292c <HAL_GetTick>
 8003d52:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d54:	e029      	b.n	8003daa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5a:	f043 0210 	orr.w	r2, r3, #16
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d66:	f043 0201 	orr.w	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e023      	b.n	8003dba <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d72:	f7fe fddb 	bl	800292c <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d914      	bls.n	8003daa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00d      	beq.n	8003daa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d92:	f043 0210 	orr.w	r2, r3, #16
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9e:	f043 0201 	orr.w	r2, r3, #1
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e007      	b.n	8003dba <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1dc      	bne.n	8003d72 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b084      	sub	sp, #16
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d14b      	bne.n	8003e74 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d021      	beq.n	8003e3a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fe fe6a 	bl	8002ad4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d032      	beq.n	8003e6c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d12b      	bne.n	8003e6c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d11f      	bne.n	8003e6c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e30:	f043 0201 	orr.w	r2, r3, #1
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	655a      	str	r2, [r3, #84]	; 0x54
 8003e38:	e018      	b.n	8003e6c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f003 0303 	and.w	r3, r3, #3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d111      	bne.n	8003e6c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d105      	bne.n	8003e6c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e64:	f043 0201 	orr.w	r2, r3, #1
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f7fd ff57 	bl	8001d20 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003e72:	e00e      	b.n	8003e92 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f7ff fa9f 	bl	80033c4 <HAL_ADC_ErrorCallback>
}
 8003e86:	e004      	b.n	8003e92 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	4798      	blx	r3
}
 8003e92:	bf00      	nop
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f7fd fecd 	bl	8001c48 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003eae:	bf00      	nop
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b084      	sub	sp, #16
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed4:	f043 0204 	orr.w	r2, r3, #4
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f7ff fa71 	bl	80033c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ee2:	bf00      	nop
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
	...

08003eec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a79      	ldr	r2, [pc, #484]	; (80040e0 <ADC_ConfigureBoostMode+0x1f4>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d004      	beq.n	8003f08 <ADC_ConfigureBoostMode+0x1c>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a78      	ldr	r2, [pc, #480]	; (80040e4 <ADC_ConfigureBoostMode+0x1f8>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d109      	bne.n	8003f1c <ADC_ConfigureBoostMode+0x30>
 8003f08:	4b77      	ldr	r3, [pc, #476]	; (80040e8 <ADC_ConfigureBoostMode+0x1fc>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	bf14      	ite	ne
 8003f14:	2301      	movne	r3, #1
 8003f16:	2300      	moveq	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	e008      	b.n	8003f2e <ADC_ConfigureBoostMode+0x42>
 8003f1c:	4b73      	ldr	r3, [pc, #460]	; (80040ec <ADC_ConfigureBoostMode+0x200>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	bf14      	ite	ne
 8003f28:	2301      	movne	r3, #1
 8003f2a:	2300      	moveq	r3, #0
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d01c      	beq.n	8003f6c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003f32:	f005 fad5 	bl	80094e0 <HAL_RCC_GetHCLKFreq>
 8003f36:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f40:	d010      	beq.n	8003f64 <ADC_ConfigureBoostMode+0x78>
 8003f42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f46:	d871      	bhi.n	800402c <ADC_ConfigureBoostMode+0x140>
 8003f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f4c:	d002      	beq.n	8003f54 <ADC_ConfigureBoostMode+0x68>
 8003f4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f52:	d16b      	bne.n	800402c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	0c1b      	lsrs	r3, r3, #16
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f60:	60fb      	str	r3, [r7, #12]
        break;
 8003f62:	e066      	b.n	8004032 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	089b      	lsrs	r3, r3, #2
 8003f68:	60fb      	str	r3, [r7, #12]
        break;
 8003f6a:	e062      	b.n	8004032 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003f6c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003f70:	f006 fa58 	bl	800a424 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f74:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003f7e:	d051      	beq.n	8004024 <ADC_ConfigureBoostMode+0x138>
 8003f80:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003f84:	d854      	bhi.n	8004030 <ADC_ConfigureBoostMode+0x144>
 8003f86:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003f8a:	d047      	beq.n	800401c <ADC_ConfigureBoostMode+0x130>
 8003f8c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003f90:	d84e      	bhi.n	8004030 <ADC_ConfigureBoostMode+0x144>
 8003f92:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003f96:	d03d      	beq.n	8004014 <ADC_ConfigureBoostMode+0x128>
 8003f98:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003f9c:	d848      	bhi.n	8004030 <ADC_ConfigureBoostMode+0x144>
 8003f9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fa2:	d033      	beq.n	800400c <ADC_ConfigureBoostMode+0x120>
 8003fa4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fa8:	d842      	bhi.n	8004030 <ADC_ConfigureBoostMode+0x144>
 8003faa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003fae:	d029      	beq.n	8004004 <ADC_ConfigureBoostMode+0x118>
 8003fb0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003fb4:	d83c      	bhi.n	8004030 <ADC_ConfigureBoostMode+0x144>
 8003fb6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003fba:	d01a      	beq.n	8003ff2 <ADC_ConfigureBoostMode+0x106>
 8003fbc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003fc0:	d836      	bhi.n	8004030 <ADC_ConfigureBoostMode+0x144>
 8003fc2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003fc6:	d014      	beq.n	8003ff2 <ADC_ConfigureBoostMode+0x106>
 8003fc8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003fcc:	d830      	bhi.n	8004030 <ADC_ConfigureBoostMode+0x144>
 8003fce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fd2:	d00e      	beq.n	8003ff2 <ADC_ConfigureBoostMode+0x106>
 8003fd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fd8:	d82a      	bhi.n	8004030 <ADC_ConfigureBoostMode+0x144>
 8003fda:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003fde:	d008      	beq.n	8003ff2 <ADC_ConfigureBoostMode+0x106>
 8003fe0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003fe4:	d824      	bhi.n	8004030 <ADC_ConfigureBoostMode+0x144>
 8003fe6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fea:	d002      	beq.n	8003ff2 <ADC_ConfigureBoostMode+0x106>
 8003fec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ff0:	d11e      	bne.n	8004030 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	0c9b      	lsrs	r3, r3, #18
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004000:	60fb      	str	r3, [r7, #12]
        break;
 8004002:	e016      	b.n	8004032 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	091b      	lsrs	r3, r3, #4
 8004008:	60fb      	str	r3, [r7, #12]
        break;
 800400a:	e012      	b.n	8004032 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	60fb      	str	r3, [r7, #12]
        break;
 8004012:	e00e      	b.n	8004032 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	099b      	lsrs	r3, r3, #6
 8004018:	60fb      	str	r3, [r7, #12]
        break;
 800401a:	e00a      	b.n	8004032 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	09db      	lsrs	r3, r3, #7
 8004020:	60fb      	str	r3, [r7, #12]
        break;
 8004022:	e006      	b.n	8004032 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	0a1b      	lsrs	r3, r3, #8
 8004028:	60fb      	str	r3, [r7, #12]
        break;
 800402a:	e002      	b.n	8004032 <ADC_ConfigureBoostMode+0x146>
        break;
 800402c:	bf00      	nop
 800402e:	e000      	b.n	8004032 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004030:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004032:	f7fe fcbb 	bl	80029ac <HAL_GetREVID>
 8004036:	4603      	mov	r3, r0
 8004038:	f241 0203 	movw	r2, #4099	; 0x1003
 800403c:	4293      	cmp	r3, r2
 800403e:	d815      	bhi.n	800406c <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4a2b      	ldr	r2, [pc, #172]	; (80040f0 <ADC_ConfigureBoostMode+0x204>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d908      	bls.n	800405a <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004056:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004058:	e03e      	b.n	80040d8 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004068:	609a      	str	r2, [r3, #8]
}
 800406a:	e035      	b.n	80040d8 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	085b      	lsrs	r3, r3, #1
 8004070:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4a1f      	ldr	r2, [pc, #124]	; (80040f4 <ADC_ConfigureBoostMode+0x208>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d808      	bhi.n	800408c <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004088:	609a      	str	r2, [r3, #8]
}
 800408a:	e025      	b.n	80040d8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4a1a      	ldr	r2, [pc, #104]	; (80040f8 <ADC_ConfigureBoostMode+0x20c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d80a      	bhi.n	80040aa <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040a6:	609a      	str	r2, [r3, #8]
}
 80040a8:	e016      	b.n	80040d8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4a13      	ldr	r2, [pc, #76]	; (80040fc <ADC_ConfigureBoostMode+0x210>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d80a      	bhi.n	80040c8 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040c4:	609a      	str	r2, [r3, #8]
}
 80040c6:	e007      	b.n	80040d8 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80040d6:	609a      	str	r2, [r3, #8]
}
 80040d8:	bf00      	nop
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40022000 	.word	0x40022000
 80040e4:	40022100 	.word	0x40022100
 80040e8:	40022300 	.word	0x40022300
 80040ec:	58026300 	.word	0x58026300
 80040f0:	01312d00 	.word	0x01312d00
 80040f4:	005f5e10 	.word	0x005f5e10
 80040f8:	00bebc20 	.word	0x00bebc20
 80040fc:	017d7840 	.word	0x017d7840

08004100 <LL_ADC_IsEnabled>:
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <LL_ADC_IsEnabled+0x18>
 8004114:	2301      	movs	r3, #1
 8004116:	e000      	b.n	800411a <LL_ADC_IsEnabled+0x1a>
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
	...

08004128 <LL_ADC_StartCalibration>:
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	4b09      	ldr	r3, [pc, #36]	; (8004160 <LL_ADC_StartCalibration+0x38>)
 800413a:	4013      	ands	r3, r2
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004148:	430a      	orrs	r2, r1
 800414a:	4313      	orrs	r3, r2
 800414c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	609a      	str	r2, [r3, #8]
}
 8004154:	bf00      	nop
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	3ffeffc0 	.word	0x3ffeffc0

08004164 <LL_ADC_IsCalibrationOnGoing>:
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004174:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004178:	d101      	bne.n	800417e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <LL_ADC_REG_IsConversionOngoing>:
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b04      	cmp	r3, #4
 800419e:	d101      	bne.n	80041a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80041a0:	2301      	movs	r3, #1
 80041a2:	e000      	b.n	80041a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
	...

080041b4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80041c0:	2300      	movs	r3, #0
 80041c2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_ADCEx_Calibration_Start+0x1e>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e04c      	b.n	800426c <HAL_ADCEx_Calibration_Start+0xb8>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f7ff fd92 	bl	8003d04 <ADC_Disable>
 80041e0:	4603      	mov	r3, r0
 80041e2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80041e4:	7dfb      	ldrb	r3, [r7, #23]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d135      	bne.n	8004256 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041ee:	4b21      	ldr	r3, [pc, #132]	; (8004274 <HAL_ADCEx_Calibration_Start+0xc0>)
 80041f0:	4013      	ands	r3, r2
 80041f2:	f043 0202 	orr.w	r2, r3, #2
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	68b9      	ldr	r1, [r7, #8]
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff ff90 	bl	8004128 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004208:	e014      	b.n	8004234 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	3301      	adds	r3, #1
 800420e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	4a19      	ldr	r2, [pc, #100]	; (8004278 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d30d      	bcc.n	8004234 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421c:	f023 0312 	bic.w	r3, r3, #18
 8004220:	f043 0210 	orr.w	r2, r3, #16
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e01b      	b.n	800426c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff ff93 	bl	8004164 <LL_ADC_IsCalibrationOnGoing>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e2      	bne.n	800420a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004248:	f023 0303 	bic.w	r3, r3, #3
 800424c:	f043 0201 	orr.w	r2, r3, #1
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	655a      	str	r2, [r3, #84]	; 0x54
 8004254:	e005      	b.n	8004262 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	f043 0210 	orr.w	r2, r3, #16
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800426a:	7dfb      	ldrb	r3, [r7, #23]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	ffffeefd 	.word	0xffffeefd
 8004278:	25c3f800 	.word	0x25c3f800

0800427c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800427c:	b590      	push	{r4, r7, lr}
 800427e:	b09f      	sub	sp, #124	; 0x7c
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004296:	2302      	movs	r3, #2
 8004298:	e0be      	b.n	8004418 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80042a2:	2300      	movs	r3, #0
 80042a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80042a6:	2300      	movs	r3, #0
 80042a8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a5c      	ldr	r2, [pc, #368]	; (8004420 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d102      	bne.n	80042ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80042b4:	4b5b      	ldr	r3, [pc, #364]	; (8004424 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80042b6:	60bb      	str	r3, [r7, #8]
 80042b8:	e001      	b.n	80042be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80042ba:	2300      	movs	r3, #0
 80042bc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10b      	bne.n	80042dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c8:	f043 0220 	orr.w	r2, r3, #32
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e09d      	b.n	8004418 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff ff54 	bl	800418c <LL_ADC_REG_IsConversionOngoing>
 80042e4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff ff4e 	bl	800418c <LL_ADC_REG_IsConversionOngoing>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d17f      	bne.n	80043f6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80042f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d17c      	bne.n	80043f6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a47      	ldr	r2, [pc, #284]	; (8004420 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d004      	beq.n	8004310 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a46      	ldr	r2, [pc, #280]	; (8004424 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d101      	bne.n	8004314 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004310:	4b45      	ldr	r3, [pc, #276]	; (8004428 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004312:	e000      	b.n	8004316 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004314:	4b45      	ldr	r3, [pc, #276]	; (800442c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004316:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d039      	beq.n	8004394 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	431a      	orrs	r2, r3
 800432e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004330:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a3a      	ldr	r2, [pc, #232]	; (8004420 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d004      	beq.n	8004346 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a38      	ldr	r2, [pc, #224]	; (8004424 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d10e      	bne.n	8004364 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004346:	4836      	ldr	r0, [pc, #216]	; (8004420 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004348:	f7ff feda 	bl	8004100 <LL_ADC_IsEnabled>
 800434c:	4604      	mov	r4, r0
 800434e:	4835      	ldr	r0, [pc, #212]	; (8004424 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004350:	f7ff fed6 	bl	8004100 <LL_ADC_IsEnabled>
 8004354:	4603      	mov	r3, r0
 8004356:	4323      	orrs	r3, r4
 8004358:	2b00      	cmp	r3, #0
 800435a:	bf0c      	ite	eq
 800435c:	2301      	moveq	r3, #1
 800435e:	2300      	movne	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	e008      	b.n	8004376 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004364:	4832      	ldr	r0, [pc, #200]	; (8004430 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004366:	f7ff fecb 	bl	8004100 <LL_ADC_IsEnabled>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	bf0c      	ite	eq
 8004370:	2301      	moveq	r3, #1
 8004372:	2300      	movne	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d047      	beq.n	800440a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800437a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	4b2d      	ldr	r3, [pc, #180]	; (8004434 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004380:	4013      	ands	r3, r2
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	6811      	ldr	r1, [r2, #0]
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	6892      	ldr	r2, [r2, #8]
 800438a:	430a      	orrs	r2, r1
 800438c:	431a      	orrs	r2, r3
 800438e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004390:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004392:	e03a      	b.n	800440a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800439c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800439e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a1e      	ldr	r2, [pc, #120]	; (8004420 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d004      	beq.n	80043b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a1d      	ldr	r2, [pc, #116]	; (8004424 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d10e      	bne.n	80043d2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80043b4:	481a      	ldr	r0, [pc, #104]	; (8004420 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80043b6:	f7ff fea3 	bl	8004100 <LL_ADC_IsEnabled>
 80043ba:	4604      	mov	r4, r0
 80043bc:	4819      	ldr	r0, [pc, #100]	; (8004424 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80043be:	f7ff fe9f 	bl	8004100 <LL_ADC_IsEnabled>
 80043c2:	4603      	mov	r3, r0
 80043c4:	4323      	orrs	r3, r4
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	bf0c      	ite	eq
 80043ca:	2301      	moveq	r3, #1
 80043cc:	2300      	movne	r3, #0
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	e008      	b.n	80043e4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80043d2:	4817      	ldr	r0, [pc, #92]	; (8004430 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80043d4:	f7ff fe94 	bl	8004100 <LL_ADC_IsEnabled>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	bf0c      	ite	eq
 80043de:	2301      	moveq	r3, #1
 80043e0:	2300      	movne	r3, #0
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d010      	beq.n	800440a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80043e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	4b11      	ldr	r3, [pc, #68]	; (8004434 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043f2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043f4:	e009      	b.n	800440a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fa:	f043 0220 	orr.w	r2, r3, #32
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004408:	e000      	b.n	800440c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800440a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004414:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004418:	4618      	mov	r0, r3
 800441a:	377c      	adds	r7, #124	; 0x7c
 800441c:	46bd      	mov	sp, r7
 800441e:	bd90      	pop	{r4, r7, pc}
 8004420:	40022000 	.word	0x40022000
 8004424:	40022100 	.word	0x40022100
 8004428:	40022300 	.word	0x40022300
 800442c:	58026300 	.word	0x58026300
 8004430:	58026000 	.word	0x58026000
 8004434:	fffff0e0 	.word	0xfffff0e0

08004438 <__NVIC_SetPriorityGrouping>:
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004448:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <__NVIC_SetPriorityGrouping+0x40>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004454:	4013      	ands	r3, r2
 8004456:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004460:	4b06      	ldr	r3, [pc, #24]	; (800447c <__NVIC_SetPriorityGrouping+0x44>)
 8004462:	4313      	orrs	r3, r2
 8004464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004466:	4a04      	ldr	r2, [pc, #16]	; (8004478 <__NVIC_SetPriorityGrouping+0x40>)
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	60d3      	str	r3, [r2, #12]
}
 800446c:	bf00      	nop
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	e000ed00 	.word	0xe000ed00
 800447c:	05fa0000 	.word	0x05fa0000

08004480 <__NVIC_GetPriorityGrouping>:
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004484:	4b04      	ldr	r3, [pc, #16]	; (8004498 <__NVIC_GetPriorityGrouping+0x18>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	0a1b      	lsrs	r3, r3, #8
 800448a:	f003 0307 	and.w	r3, r3, #7
}
 800448e:	4618      	mov	r0, r3
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	e000ed00 	.word	0xe000ed00

0800449c <__NVIC_EnableIRQ>:
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	4603      	mov	r3, r0
 80044a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80044a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	db0b      	blt.n	80044c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044ae:	88fb      	ldrh	r3, [r7, #6]
 80044b0:	f003 021f 	and.w	r2, r3, #31
 80044b4:	4907      	ldr	r1, [pc, #28]	; (80044d4 <__NVIC_EnableIRQ+0x38>)
 80044b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	2001      	movs	r0, #1
 80044be:	fa00 f202 	lsl.w	r2, r0, r2
 80044c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	e000e100 	.word	0xe000e100

080044d8 <__NVIC_SetPriority>:
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	6039      	str	r1, [r7, #0]
 80044e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80044e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	db0a      	blt.n	8004502 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	490c      	ldr	r1, [pc, #48]	; (8004524 <__NVIC_SetPriority+0x4c>)
 80044f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044f6:	0112      	lsls	r2, r2, #4
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	440b      	add	r3, r1
 80044fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004500:	e00a      	b.n	8004518 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	b2da      	uxtb	r2, r3
 8004506:	4908      	ldr	r1, [pc, #32]	; (8004528 <__NVIC_SetPriority+0x50>)
 8004508:	88fb      	ldrh	r3, [r7, #6]
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	3b04      	subs	r3, #4
 8004510:	0112      	lsls	r2, r2, #4
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	440b      	add	r3, r1
 8004516:	761a      	strb	r2, [r3, #24]
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	e000e100 	.word	0xe000e100
 8004528:	e000ed00 	.word	0xe000ed00

0800452c <NVIC_EncodePriority>:
{
 800452c:	b480      	push	{r7}
 800452e:	b089      	sub	sp, #36	; 0x24
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	f1c3 0307 	rsb	r3, r3, #7
 8004546:	2b04      	cmp	r3, #4
 8004548:	bf28      	it	cs
 800454a:	2304      	movcs	r3, #4
 800454c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	3304      	adds	r3, #4
 8004552:	2b06      	cmp	r3, #6
 8004554:	d902      	bls.n	800455c <NVIC_EncodePriority+0x30>
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	3b03      	subs	r3, #3
 800455a:	e000      	b.n	800455e <NVIC_EncodePriority+0x32>
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004560:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	43da      	mvns	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	401a      	ands	r2, r3
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004574:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	fa01 f303 	lsl.w	r3, r1, r3
 800457e:	43d9      	mvns	r1, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004584:	4313      	orrs	r3, r2
}
 8004586:	4618      	mov	r0, r3
 8004588:	3724      	adds	r7, #36	; 0x24
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
	...

08004594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3b01      	subs	r3, #1
 80045a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045a4:	d301      	bcc.n	80045aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045a6:	2301      	movs	r3, #1
 80045a8:	e00f      	b.n	80045ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045aa:	4a0a      	ldr	r2, [pc, #40]	; (80045d4 <SysTick_Config+0x40>)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045b2:	210f      	movs	r1, #15
 80045b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045b8:	f7ff ff8e 	bl	80044d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045bc:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <SysTick_Config+0x40>)
 80045be:	2200      	movs	r2, #0
 80045c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045c2:	4b04      	ldr	r3, [pc, #16]	; (80045d4 <SysTick_Config+0x40>)
 80045c4:	2207      	movs	r2, #7
 80045c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	e000e010 	.word	0xe000e010

080045d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7ff ff29 	bl	8004438 <__NVIC_SetPriorityGrouping>
}
 80045e6:	bf00      	nop
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b086      	sub	sp, #24
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	4603      	mov	r3, r0
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	607a      	str	r2, [r7, #4]
 80045fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045fc:	f7ff ff40 	bl	8004480 <__NVIC_GetPriorityGrouping>
 8004600:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	68b9      	ldr	r1, [r7, #8]
 8004606:	6978      	ldr	r0, [r7, #20]
 8004608:	f7ff ff90 	bl	800452c <NVIC_EncodePriority>
 800460c:	4602      	mov	r2, r0
 800460e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004612:	4611      	mov	r1, r2
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff ff5f 	bl	80044d8 <__NVIC_SetPriority>
}
 800461a:	bf00      	nop
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	af00      	add	r7, sp, #0
 8004628:	4603      	mov	r3, r0
 800462a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800462c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff ff33 	bl	800449c <__NVIC_EnableIRQ>
}
 8004636:	bf00      	nop
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b082      	sub	sp, #8
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7ff ffa4 	bl	8004594 <SysTick_Config>
 800464c:	4603      	mov	r3, r0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e014      	b.n	8004692 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	791b      	ldrb	r3, [r3, #4]
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d105      	bne.n	800467e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7fd fd19 	bl	80020b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2202      	movs	r2, #2
 8004682:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	795b      	ldrb	r3, [r3, #5]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_DAC_Start+0x16>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e040      	b.n	8004732 <HAL_DAC_Start+0x98>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2202      	movs	r2, #2
 80046ba:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6819      	ldr	r1, [r3, #0]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	f003 0310 	and.w	r3, r3, #16
 80046c8:	2201      	movs	r2, #1
 80046ca:	409a      	lsls	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10f      	bne.n	80046fa <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d11d      	bne.n	8004724 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0201 	orr.w	r2, r2, #1
 80046f6:	605a      	str	r2, [r3, #4]
 80046f8:	e014      	b.n	8004724 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	f003 0310 	and.w	r3, r3, #16
 800470a:	2102      	movs	r1, #2
 800470c:	fa01 f303 	lsl.w	r3, r1, r3
 8004710:	429a      	cmp	r2, r3
 8004712:	d107      	bne.n	8004724 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0202 	orr.w	r2, r2, #2
 8004722:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800473e:	b480      	push	{r7}
 8004740:	b087      	sub	sp, #28
 8004742:	af00      	add	r7, sp, #0
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	607a      	str	r2, [r7, #4]
 800474a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d105      	bne.n	8004768 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4413      	add	r3, r2
 8004762:	3308      	adds	r3, #8
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	e004      	b.n	8004772 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4413      	add	r3, r2
 800476e:	3314      	adds	r3, #20
 8004770:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	461a      	mov	r2, r3
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	371c      	adds	r7, #28
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	795b      	ldrb	r3, [r3, #5]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d101      	bne.n	80047a0 <HAL_DAC_ConfigChannel+0x18>
 800479c:	2302      	movs	r3, #2
 800479e:	e11d      	b.n	80049dc <HAL_DAC_ConfigChannel+0x254>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2201      	movs	r2, #1
 80047a4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2202      	movs	r2, #2
 80047aa:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d174      	bne.n	800489e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80047b4:	f7fe f8ba 	bl	800292c <HAL_GetTick>
 80047b8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d134      	bne.n	800482a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80047c0:	e011      	b.n	80047e6 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80047c2:	f7fe f8b3 	bl	800292c <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d90a      	bls.n	80047e6 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	f043 0208 	orr.w	r2, r3, #8
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2203      	movs	r2, #3
 80047e0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e0fa      	b.n	80049dc <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ec:	4b7d      	ldr	r3, [pc, #500]	; (80049e4 <HAL_DAC_ConfigChannel+0x25c>)
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1e6      	bne.n	80047c2 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80047f4:	2001      	movs	r0, #1
 80047f6:	f7fe f8a5 	bl	8002944 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	6992      	ldr	r2, [r2, #24]
 8004802:	641a      	str	r2, [r3, #64]	; 0x40
 8004804:	e01e      	b.n	8004844 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004806:	f7fe f891 	bl	800292c <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b01      	cmp	r3, #1
 8004812:	d90a      	bls.n	800482a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f043 0208 	orr.w	r2, r3, #8
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2203      	movs	r2, #3
 8004824:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e0d8      	b.n	80049dc <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004830:	2b00      	cmp	r3, #0
 8004832:	dbe8      	blt.n	8004806 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004834:	2001      	movs	r0, #1
 8004836:	f7fe f885 	bl	8002944 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	6992      	ldr	r2, [r2, #24]
 8004842:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f003 0310 	and.w	r3, r3, #16
 8004850:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004854:	fa01 f303 	lsl.w	r3, r1, r3
 8004858:	43db      	mvns	r3, r3
 800485a:	ea02 0103 	and.w	r1, r2, r3
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	69da      	ldr	r2, [r3, #28]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f003 0310 	and.w	r3, r3, #16
 8004868:	409a      	lsls	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f003 0310 	and.w	r3, r3, #16
 800487e:	21ff      	movs	r1, #255	; 0xff
 8004880:	fa01 f303 	lsl.w	r3, r1, r3
 8004884:	43db      	mvns	r3, r3
 8004886:	ea02 0103 	and.w	r1, r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	6a1a      	ldr	r2, [r3, #32]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	409a      	lsls	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d11d      	bne.n	80048e2 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ac:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f003 0310 	and.w	r3, r3, #16
 80048b4:	221f      	movs	r2, #31
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	43db      	mvns	r3, r3
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4013      	ands	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f003 0310 	and.w	r3, r3, #16
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e8:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f003 0310 	and.w	r3, r3, #16
 80048f0:	2207      	movs	r2, #7
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	43db      	mvns	r3, r3
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	4013      	ands	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d102      	bne.n	800490c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004906:	2300      	movs	r3, #0
 8004908:	61fb      	str	r3, [r7, #28]
 800490a:	e00f      	b.n	800492c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	2b02      	cmp	r3, #2
 8004912:	d102      	bne.n	800491a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004914:	2301      	movs	r3, #1
 8004916:	61fb      	str	r3, [r7, #28]
 8004918:	e008      	b.n	800492c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d102      	bne.n	8004928 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004922:	2301      	movs	r3, #1
 8004924:	61fb      	str	r3, [r7, #28]
 8004926:	e001      	b.n	800492c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004928:	2300      	movs	r3, #0
 800492a:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	4313      	orrs	r3, r2
 8004936:	69fa      	ldr	r2, [r7, #28]
 8004938:	4313      	orrs	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f003 0310 	and.w	r3, r3, #16
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	fa02 f303 	lsl.w	r3, r2, r3
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6819      	ldr	r1, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f003 0310 	and.w	r3, r3, #16
 8004962:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	43da      	mvns	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	400a      	ands	r2, r1
 8004972:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f003 0310 	and.w	r3, r3, #16
 8004982:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004986:	fa02 f303 	lsl.w	r3, r2, r3
 800498a:	43db      	mvns	r3, r3
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	4013      	ands	r3, r2
 8004990:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f003 0310 	and.w	r3, r3, #16
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6819      	ldr	r1, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f003 0310 	and.w	r3, r3, #16
 80049be:	22c0      	movs	r2, #192	; 0xc0
 80049c0:	fa02 f303 	lsl.w	r3, r2, r3
 80049c4:	43da      	mvns	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	400a      	ands	r2, r1
 80049cc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2201      	movs	r2, #1
 80049d2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3720      	adds	r7, #32
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	20008000 	.word	0x20008000

080049e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80049f0:	f7fd ff9c 	bl	800292c <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e316      	b.n	800502e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a66      	ldr	r2, [pc, #408]	; (8004ba0 <HAL_DMA_Init+0x1b8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d04a      	beq.n	8004aa0 <HAL_DMA_Init+0xb8>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a65      	ldr	r2, [pc, #404]	; (8004ba4 <HAL_DMA_Init+0x1bc>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d045      	beq.n	8004aa0 <HAL_DMA_Init+0xb8>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a63      	ldr	r2, [pc, #396]	; (8004ba8 <HAL_DMA_Init+0x1c0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d040      	beq.n	8004aa0 <HAL_DMA_Init+0xb8>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a62      	ldr	r2, [pc, #392]	; (8004bac <HAL_DMA_Init+0x1c4>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d03b      	beq.n	8004aa0 <HAL_DMA_Init+0xb8>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a60      	ldr	r2, [pc, #384]	; (8004bb0 <HAL_DMA_Init+0x1c8>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d036      	beq.n	8004aa0 <HAL_DMA_Init+0xb8>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a5f      	ldr	r2, [pc, #380]	; (8004bb4 <HAL_DMA_Init+0x1cc>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d031      	beq.n	8004aa0 <HAL_DMA_Init+0xb8>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a5d      	ldr	r2, [pc, #372]	; (8004bb8 <HAL_DMA_Init+0x1d0>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d02c      	beq.n	8004aa0 <HAL_DMA_Init+0xb8>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a5c      	ldr	r2, [pc, #368]	; (8004bbc <HAL_DMA_Init+0x1d4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d027      	beq.n	8004aa0 <HAL_DMA_Init+0xb8>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a5a      	ldr	r2, [pc, #360]	; (8004bc0 <HAL_DMA_Init+0x1d8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d022      	beq.n	8004aa0 <HAL_DMA_Init+0xb8>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a59      	ldr	r2, [pc, #356]	; (8004bc4 <HAL_DMA_Init+0x1dc>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d01d      	beq.n	8004aa0 <HAL_DMA_Init+0xb8>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a57      	ldr	r2, [pc, #348]	; (8004bc8 <HAL_DMA_Init+0x1e0>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d018      	beq.n	8004aa0 <HAL_DMA_Init+0xb8>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a56      	ldr	r2, [pc, #344]	; (8004bcc <HAL_DMA_Init+0x1e4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d013      	beq.n	8004aa0 <HAL_DMA_Init+0xb8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a54      	ldr	r2, [pc, #336]	; (8004bd0 <HAL_DMA_Init+0x1e8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00e      	beq.n	8004aa0 <HAL_DMA_Init+0xb8>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a53      	ldr	r2, [pc, #332]	; (8004bd4 <HAL_DMA_Init+0x1ec>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d009      	beq.n	8004aa0 <HAL_DMA_Init+0xb8>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a51      	ldr	r2, [pc, #324]	; (8004bd8 <HAL_DMA_Init+0x1f0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d004      	beq.n	8004aa0 <HAL_DMA_Init+0xb8>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a50      	ldr	r2, [pc, #320]	; (8004bdc <HAL_DMA_Init+0x1f4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d101      	bne.n	8004aa4 <HAL_DMA_Init+0xbc>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e000      	b.n	8004aa6 <HAL_DMA_Init+0xbe>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 813b 	beq.w	8004d22 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a37      	ldr	r2, [pc, #220]	; (8004ba0 <HAL_DMA_Init+0x1b8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d04a      	beq.n	8004b5c <HAL_DMA_Init+0x174>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a36      	ldr	r2, [pc, #216]	; (8004ba4 <HAL_DMA_Init+0x1bc>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d045      	beq.n	8004b5c <HAL_DMA_Init+0x174>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a34      	ldr	r2, [pc, #208]	; (8004ba8 <HAL_DMA_Init+0x1c0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d040      	beq.n	8004b5c <HAL_DMA_Init+0x174>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a33      	ldr	r2, [pc, #204]	; (8004bac <HAL_DMA_Init+0x1c4>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d03b      	beq.n	8004b5c <HAL_DMA_Init+0x174>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a31      	ldr	r2, [pc, #196]	; (8004bb0 <HAL_DMA_Init+0x1c8>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d036      	beq.n	8004b5c <HAL_DMA_Init+0x174>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a30      	ldr	r2, [pc, #192]	; (8004bb4 <HAL_DMA_Init+0x1cc>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d031      	beq.n	8004b5c <HAL_DMA_Init+0x174>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a2e      	ldr	r2, [pc, #184]	; (8004bb8 <HAL_DMA_Init+0x1d0>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d02c      	beq.n	8004b5c <HAL_DMA_Init+0x174>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a2d      	ldr	r2, [pc, #180]	; (8004bbc <HAL_DMA_Init+0x1d4>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d027      	beq.n	8004b5c <HAL_DMA_Init+0x174>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a2b      	ldr	r2, [pc, #172]	; (8004bc0 <HAL_DMA_Init+0x1d8>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d022      	beq.n	8004b5c <HAL_DMA_Init+0x174>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a2a      	ldr	r2, [pc, #168]	; (8004bc4 <HAL_DMA_Init+0x1dc>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d01d      	beq.n	8004b5c <HAL_DMA_Init+0x174>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a28      	ldr	r2, [pc, #160]	; (8004bc8 <HAL_DMA_Init+0x1e0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d018      	beq.n	8004b5c <HAL_DMA_Init+0x174>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a27      	ldr	r2, [pc, #156]	; (8004bcc <HAL_DMA_Init+0x1e4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d013      	beq.n	8004b5c <HAL_DMA_Init+0x174>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a25      	ldr	r2, [pc, #148]	; (8004bd0 <HAL_DMA_Init+0x1e8>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d00e      	beq.n	8004b5c <HAL_DMA_Init+0x174>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a24      	ldr	r2, [pc, #144]	; (8004bd4 <HAL_DMA_Init+0x1ec>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d009      	beq.n	8004b5c <HAL_DMA_Init+0x174>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a22      	ldr	r2, [pc, #136]	; (8004bd8 <HAL_DMA_Init+0x1f0>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d004      	beq.n	8004b5c <HAL_DMA_Init+0x174>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a21      	ldr	r2, [pc, #132]	; (8004bdc <HAL_DMA_Init+0x1f4>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d108      	bne.n	8004b6e <HAL_DMA_Init+0x186>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0201 	bic.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	e007      	b.n	8004b7e <HAL_DMA_Init+0x196>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0201 	bic.w	r2, r2, #1
 8004b7c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b7e:	e02f      	b.n	8004be0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b80:	f7fd fed4 	bl	800292c <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b05      	cmp	r3, #5
 8004b8c:	d928      	bls.n	8004be0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2220      	movs	r2, #32
 8004b92:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2203      	movs	r2, #3
 8004b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e246      	b.n	800502e <HAL_DMA_Init+0x646>
 8004ba0:	40020010 	.word	0x40020010
 8004ba4:	40020028 	.word	0x40020028
 8004ba8:	40020040 	.word	0x40020040
 8004bac:	40020058 	.word	0x40020058
 8004bb0:	40020070 	.word	0x40020070
 8004bb4:	40020088 	.word	0x40020088
 8004bb8:	400200a0 	.word	0x400200a0
 8004bbc:	400200b8 	.word	0x400200b8
 8004bc0:	40020410 	.word	0x40020410
 8004bc4:	40020428 	.word	0x40020428
 8004bc8:	40020440 	.word	0x40020440
 8004bcc:	40020458 	.word	0x40020458
 8004bd0:	40020470 	.word	0x40020470
 8004bd4:	40020488 	.word	0x40020488
 8004bd8:	400204a0 	.word	0x400204a0
 8004bdc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1c8      	bne.n	8004b80 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	4b83      	ldr	r3, [pc, #524]	; (8004e08 <HAL_DMA_Init+0x420>)
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004c06:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c12:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c1e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	2b04      	cmp	r3, #4
 8004c32:	d107      	bne.n	8004c44 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004c44:	4b71      	ldr	r3, [pc, #452]	; (8004e0c <HAL_DMA_Init+0x424>)
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	4b71      	ldr	r3, [pc, #452]	; (8004e10 <HAL_DMA_Init+0x428>)
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c50:	d328      	bcc.n	8004ca4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2b28      	cmp	r3, #40	; 0x28
 8004c58:	d903      	bls.n	8004c62 <HAL_DMA_Init+0x27a>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2b2e      	cmp	r3, #46	; 0x2e
 8004c60:	d917      	bls.n	8004c92 <HAL_DMA_Init+0x2aa>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b3e      	cmp	r3, #62	; 0x3e
 8004c68:	d903      	bls.n	8004c72 <HAL_DMA_Init+0x28a>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b42      	cmp	r3, #66	; 0x42
 8004c70:	d90f      	bls.n	8004c92 <HAL_DMA_Init+0x2aa>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b46      	cmp	r3, #70	; 0x46
 8004c78:	d903      	bls.n	8004c82 <HAL_DMA_Init+0x29a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2b48      	cmp	r3, #72	; 0x48
 8004c80:	d907      	bls.n	8004c92 <HAL_DMA_Init+0x2aa>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b4e      	cmp	r3, #78	; 0x4e
 8004c88:	d905      	bls.n	8004c96 <HAL_DMA_Init+0x2ae>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b52      	cmp	r3, #82	; 0x52
 8004c90:	d801      	bhi.n	8004c96 <HAL_DMA_Init+0x2ae>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e000      	b.n	8004c98 <HAL_DMA_Init+0x2b0>
 8004c96:	2300      	movs	r3, #0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ca2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f023 0307 	bic.w	r3, r3, #7
 8004cba:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d117      	bne.n	8004cfe <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00e      	beq.n	8004cfe <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f002 fb33 	bl	800734c <DMA_CheckFifoParam>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d008      	beq.n	8004cfe <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2240      	movs	r2, #64	; 0x40
 8004cf0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e197      	b.n	800502e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f002 fa6e 	bl	80071e8 <DMA_CalcBaseAndBitshift>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d14:	f003 031f 	and.w	r3, r3, #31
 8004d18:	223f      	movs	r2, #63	; 0x3f
 8004d1a:	409a      	lsls	r2, r3
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	609a      	str	r2, [r3, #8]
 8004d20:	e0cd      	b.n	8004ebe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a3b      	ldr	r2, [pc, #236]	; (8004e14 <HAL_DMA_Init+0x42c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d022      	beq.n	8004d72 <HAL_DMA_Init+0x38a>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a39      	ldr	r2, [pc, #228]	; (8004e18 <HAL_DMA_Init+0x430>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d01d      	beq.n	8004d72 <HAL_DMA_Init+0x38a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a38      	ldr	r2, [pc, #224]	; (8004e1c <HAL_DMA_Init+0x434>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d018      	beq.n	8004d72 <HAL_DMA_Init+0x38a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a36      	ldr	r2, [pc, #216]	; (8004e20 <HAL_DMA_Init+0x438>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d013      	beq.n	8004d72 <HAL_DMA_Init+0x38a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a35      	ldr	r2, [pc, #212]	; (8004e24 <HAL_DMA_Init+0x43c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d00e      	beq.n	8004d72 <HAL_DMA_Init+0x38a>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a33      	ldr	r2, [pc, #204]	; (8004e28 <HAL_DMA_Init+0x440>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d009      	beq.n	8004d72 <HAL_DMA_Init+0x38a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a32      	ldr	r2, [pc, #200]	; (8004e2c <HAL_DMA_Init+0x444>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d004      	beq.n	8004d72 <HAL_DMA_Init+0x38a>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a30      	ldr	r2, [pc, #192]	; (8004e30 <HAL_DMA_Init+0x448>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d101      	bne.n	8004d76 <HAL_DMA_Init+0x38e>
 8004d72:	2301      	movs	r3, #1
 8004d74:	e000      	b.n	8004d78 <HAL_DMA_Init+0x390>
 8004d76:	2300      	movs	r3, #0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 8097 	beq.w	8004eac <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a24      	ldr	r2, [pc, #144]	; (8004e14 <HAL_DMA_Init+0x42c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d021      	beq.n	8004dcc <HAL_DMA_Init+0x3e4>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a22      	ldr	r2, [pc, #136]	; (8004e18 <HAL_DMA_Init+0x430>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d01c      	beq.n	8004dcc <HAL_DMA_Init+0x3e4>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a21      	ldr	r2, [pc, #132]	; (8004e1c <HAL_DMA_Init+0x434>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d017      	beq.n	8004dcc <HAL_DMA_Init+0x3e4>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a1f      	ldr	r2, [pc, #124]	; (8004e20 <HAL_DMA_Init+0x438>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d012      	beq.n	8004dcc <HAL_DMA_Init+0x3e4>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a1e      	ldr	r2, [pc, #120]	; (8004e24 <HAL_DMA_Init+0x43c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d00d      	beq.n	8004dcc <HAL_DMA_Init+0x3e4>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a1c      	ldr	r2, [pc, #112]	; (8004e28 <HAL_DMA_Init+0x440>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d008      	beq.n	8004dcc <HAL_DMA_Init+0x3e4>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a1b      	ldr	r2, [pc, #108]	; (8004e2c <HAL_DMA_Init+0x444>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <HAL_DMA_Init+0x3e4>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a19      	ldr	r2, [pc, #100]	; (8004e30 <HAL_DMA_Init+0x448>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4b12      	ldr	r3, [pc, #72]	; (8004e34 <HAL_DMA_Init+0x44c>)
 8004dea:	4013      	ands	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	2b40      	cmp	r3, #64	; 0x40
 8004df4:	d020      	beq.n	8004e38 <HAL_DMA_Init+0x450>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	2b80      	cmp	r3, #128	; 0x80
 8004dfc:	d102      	bne.n	8004e04 <HAL_DMA_Init+0x41c>
 8004dfe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e02:	e01a      	b.n	8004e3a <HAL_DMA_Init+0x452>
 8004e04:	2300      	movs	r3, #0
 8004e06:	e018      	b.n	8004e3a <HAL_DMA_Init+0x452>
 8004e08:	fe10803f 	.word	0xfe10803f
 8004e0c:	5c001000 	.word	0x5c001000
 8004e10:	ffff0000 	.word	0xffff0000
 8004e14:	58025408 	.word	0x58025408
 8004e18:	5802541c 	.word	0x5802541c
 8004e1c:	58025430 	.word	0x58025430
 8004e20:	58025444 	.word	0x58025444
 8004e24:	58025458 	.word	0x58025458
 8004e28:	5802546c 	.word	0x5802546c
 8004e2c:	58025480 	.word	0x58025480
 8004e30:	58025494 	.word	0x58025494
 8004e34:	fffe000f 	.word	0xfffe000f
 8004e38:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	68d2      	ldr	r2, [r2, #12]
 8004e3e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004e48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004e50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004e58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004e60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004e68:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	4b6e      	ldr	r3, [pc, #440]	; (8005038 <HAL_DMA_Init+0x650>)
 8004e80:	4413      	add	r3, r2
 8004e82:	4a6e      	ldr	r2, [pc, #440]	; (800503c <HAL_DMA_Init+0x654>)
 8004e84:	fba2 2303 	umull	r2, r3, r2, r3
 8004e88:	091b      	lsrs	r3, r3, #4
 8004e8a:	009a      	lsls	r2, r3, #2
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f002 f9a9 	bl	80071e8 <DMA_CalcBaseAndBitshift>
 8004e96:	4603      	mov	r3, r0
 8004e98:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e9e:	f003 031f 	and.w	r3, r3, #31
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	409a      	lsls	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	605a      	str	r2, [r3, #4]
 8004eaa:	e008      	b.n	8004ebe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2240      	movs	r2, #64	; 0x40
 8004eb0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2203      	movs	r2, #3
 8004eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e0b7      	b.n	800502e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a5f      	ldr	r2, [pc, #380]	; (8005040 <HAL_DMA_Init+0x658>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d072      	beq.n	8004fae <HAL_DMA_Init+0x5c6>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a5d      	ldr	r2, [pc, #372]	; (8005044 <HAL_DMA_Init+0x65c>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d06d      	beq.n	8004fae <HAL_DMA_Init+0x5c6>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a5c      	ldr	r2, [pc, #368]	; (8005048 <HAL_DMA_Init+0x660>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d068      	beq.n	8004fae <HAL_DMA_Init+0x5c6>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a5a      	ldr	r2, [pc, #360]	; (800504c <HAL_DMA_Init+0x664>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d063      	beq.n	8004fae <HAL_DMA_Init+0x5c6>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a59      	ldr	r2, [pc, #356]	; (8005050 <HAL_DMA_Init+0x668>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d05e      	beq.n	8004fae <HAL_DMA_Init+0x5c6>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a57      	ldr	r2, [pc, #348]	; (8005054 <HAL_DMA_Init+0x66c>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d059      	beq.n	8004fae <HAL_DMA_Init+0x5c6>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a56      	ldr	r2, [pc, #344]	; (8005058 <HAL_DMA_Init+0x670>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d054      	beq.n	8004fae <HAL_DMA_Init+0x5c6>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a54      	ldr	r2, [pc, #336]	; (800505c <HAL_DMA_Init+0x674>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d04f      	beq.n	8004fae <HAL_DMA_Init+0x5c6>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a53      	ldr	r2, [pc, #332]	; (8005060 <HAL_DMA_Init+0x678>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d04a      	beq.n	8004fae <HAL_DMA_Init+0x5c6>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a51      	ldr	r2, [pc, #324]	; (8005064 <HAL_DMA_Init+0x67c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d045      	beq.n	8004fae <HAL_DMA_Init+0x5c6>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a50      	ldr	r2, [pc, #320]	; (8005068 <HAL_DMA_Init+0x680>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d040      	beq.n	8004fae <HAL_DMA_Init+0x5c6>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a4e      	ldr	r2, [pc, #312]	; (800506c <HAL_DMA_Init+0x684>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d03b      	beq.n	8004fae <HAL_DMA_Init+0x5c6>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a4d      	ldr	r2, [pc, #308]	; (8005070 <HAL_DMA_Init+0x688>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d036      	beq.n	8004fae <HAL_DMA_Init+0x5c6>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a4b      	ldr	r2, [pc, #300]	; (8005074 <HAL_DMA_Init+0x68c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d031      	beq.n	8004fae <HAL_DMA_Init+0x5c6>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a4a      	ldr	r2, [pc, #296]	; (8005078 <HAL_DMA_Init+0x690>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d02c      	beq.n	8004fae <HAL_DMA_Init+0x5c6>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a48      	ldr	r2, [pc, #288]	; (800507c <HAL_DMA_Init+0x694>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d027      	beq.n	8004fae <HAL_DMA_Init+0x5c6>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a47      	ldr	r2, [pc, #284]	; (8005080 <HAL_DMA_Init+0x698>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d022      	beq.n	8004fae <HAL_DMA_Init+0x5c6>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a45      	ldr	r2, [pc, #276]	; (8005084 <HAL_DMA_Init+0x69c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d01d      	beq.n	8004fae <HAL_DMA_Init+0x5c6>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a44      	ldr	r2, [pc, #272]	; (8005088 <HAL_DMA_Init+0x6a0>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d018      	beq.n	8004fae <HAL_DMA_Init+0x5c6>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a42      	ldr	r2, [pc, #264]	; (800508c <HAL_DMA_Init+0x6a4>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d013      	beq.n	8004fae <HAL_DMA_Init+0x5c6>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a41      	ldr	r2, [pc, #260]	; (8005090 <HAL_DMA_Init+0x6a8>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00e      	beq.n	8004fae <HAL_DMA_Init+0x5c6>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a3f      	ldr	r2, [pc, #252]	; (8005094 <HAL_DMA_Init+0x6ac>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d009      	beq.n	8004fae <HAL_DMA_Init+0x5c6>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a3e      	ldr	r2, [pc, #248]	; (8005098 <HAL_DMA_Init+0x6b0>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d004      	beq.n	8004fae <HAL_DMA_Init+0x5c6>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a3c      	ldr	r2, [pc, #240]	; (800509c <HAL_DMA_Init+0x6b4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d101      	bne.n	8004fb2 <HAL_DMA_Init+0x5ca>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <HAL_DMA_Init+0x5cc>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d032      	beq.n	800501e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f002 fa43 	bl	8007444 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	2b80      	cmp	r3, #128	; 0x80
 8004fc4:	d102      	bne.n	8004fcc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fd4:	b2d2      	uxtb	r2, r2
 8004fd6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004fe0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d010      	beq.n	800500c <HAL_DMA_Init+0x624>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b08      	cmp	r3, #8
 8004ff0:	d80c      	bhi.n	800500c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f002 fac0 	bl	8007578 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005008:	605a      	str	r2, [r3, #4]
 800500a:	e008      	b.n	800501e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	a7fdabf8 	.word	0xa7fdabf8
 800503c:	cccccccd 	.word	0xcccccccd
 8005040:	40020010 	.word	0x40020010
 8005044:	40020028 	.word	0x40020028
 8005048:	40020040 	.word	0x40020040
 800504c:	40020058 	.word	0x40020058
 8005050:	40020070 	.word	0x40020070
 8005054:	40020088 	.word	0x40020088
 8005058:	400200a0 	.word	0x400200a0
 800505c:	400200b8 	.word	0x400200b8
 8005060:	40020410 	.word	0x40020410
 8005064:	40020428 	.word	0x40020428
 8005068:	40020440 	.word	0x40020440
 800506c:	40020458 	.word	0x40020458
 8005070:	40020470 	.word	0x40020470
 8005074:	40020488 	.word	0x40020488
 8005078:	400204a0 	.word	0x400204a0
 800507c:	400204b8 	.word	0x400204b8
 8005080:	58025408 	.word	0x58025408
 8005084:	5802541c 	.word	0x5802541c
 8005088:	58025430 	.word	0x58025430
 800508c:	58025444 	.word	0x58025444
 8005090:	58025458 	.word	0x58025458
 8005094:	5802546c 	.word	0x5802546c
 8005098:	58025480 	.word	0x58025480
 800509c:	58025494 	.word	0x58025494

080050a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
 80050ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ae:	2300      	movs	r3, #0
 80050b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e226      	b.n	800550a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d101      	bne.n	80050ca <HAL_DMA_Start_IT+0x2a>
 80050c6:	2302      	movs	r3, #2
 80050c8:	e21f      	b.n	800550a <HAL_DMA_Start_IT+0x46a>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b01      	cmp	r3, #1
 80050dc:	f040 820a 	bne.w	80054f4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a68      	ldr	r2, [pc, #416]	; (8005294 <HAL_DMA_Start_IT+0x1f4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d04a      	beq.n	800518e <HAL_DMA_Start_IT+0xee>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a66      	ldr	r2, [pc, #408]	; (8005298 <HAL_DMA_Start_IT+0x1f8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d045      	beq.n	800518e <HAL_DMA_Start_IT+0xee>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a65      	ldr	r2, [pc, #404]	; (800529c <HAL_DMA_Start_IT+0x1fc>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d040      	beq.n	800518e <HAL_DMA_Start_IT+0xee>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a63      	ldr	r2, [pc, #396]	; (80052a0 <HAL_DMA_Start_IT+0x200>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d03b      	beq.n	800518e <HAL_DMA_Start_IT+0xee>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a62      	ldr	r2, [pc, #392]	; (80052a4 <HAL_DMA_Start_IT+0x204>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d036      	beq.n	800518e <HAL_DMA_Start_IT+0xee>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a60      	ldr	r2, [pc, #384]	; (80052a8 <HAL_DMA_Start_IT+0x208>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d031      	beq.n	800518e <HAL_DMA_Start_IT+0xee>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a5f      	ldr	r2, [pc, #380]	; (80052ac <HAL_DMA_Start_IT+0x20c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d02c      	beq.n	800518e <HAL_DMA_Start_IT+0xee>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a5d      	ldr	r2, [pc, #372]	; (80052b0 <HAL_DMA_Start_IT+0x210>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d027      	beq.n	800518e <HAL_DMA_Start_IT+0xee>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a5c      	ldr	r2, [pc, #368]	; (80052b4 <HAL_DMA_Start_IT+0x214>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d022      	beq.n	800518e <HAL_DMA_Start_IT+0xee>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a5a      	ldr	r2, [pc, #360]	; (80052b8 <HAL_DMA_Start_IT+0x218>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d01d      	beq.n	800518e <HAL_DMA_Start_IT+0xee>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a59      	ldr	r2, [pc, #356]	; (80052bc <HAL_DMA_Start_IT+0x21c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d018      	beq.n	800518e <HAL_DMA_Start_IT+0xee>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a57      	ldr	r2, [pc, #348]	; (80052c0 <HAL_DMA_Start_IT+0x220>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d013      	beq.n	800518e <HAL_DMA_Start_IT+0xee>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a56      	ldr	r2, [pc, #344]	; (80052c4 <HAL_DMA_Start_IT+0x224>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d00e      	beq.n	800518e <HAL_DMA_Start_IT+0xee>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a54      	ldr	r2, [pc, #336]	; (80052c8 <HAL_DMA_Start_IT+0x228>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d009      	beq.n	800518e <HAL_DMA_Start_IT+0xee>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a53      	ldr	r2, [pc, #332]	; (80052cc <HAL_DMA_Start_IT+0x22c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d004      	beq.n	800518e <HAL_DMA_Start_IT+0xee>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a51      	ldr	r2, [pc, #324]	; (80052d0 <HAL_DMA_Start_IT+0x230>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d108      	bne.n	80051a0 <HAL_DMA_Start_IT+0x100>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0201 	bic.w	r2, r2, #1
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	e007      	b.n	80051b0 <HAL_DMA_Start_IT+0x110>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 0201 	bic.w	r2, r2, #1
 80051ae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	68b9      	ldr	r1, [r7, #8]
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f001 fe6a 	bl	8006e90 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a34      	ldr	r2, [pc, #208]	; (8005294 <HAL_DMA_Start_IT+0x1f4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d04a      	beq.n	800525c <HAL_DMA_Start_IT+0x1bc>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a33      	ldr	r2, [pc, #204]	; (8005298 <HAL_DMA_Start_IT+0x1f8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d045      	beq.n	800525c <HAL_DMA_Start_IT+0x1bc>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a31      	ldr	r2, [pc, #196]	; (800529c <HAL_DMA_Start_IT+0x1fc>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d040      	beq.n	800525c <HAL_DMA_Start_IT+0x1bc>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a30      	ldr	r2, [pc, #192]	; (80052a0 <HAL_DMA_Start_IT+0x200>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d03b      	beq.n	800525c <HAL_DMA_Start_IT+0x1bc>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a2e      	ldr	r2, [pc, #184]	; (80052a4 <HAL_DMA_Start_IT+0x204>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d036      	beq.n	800525c <HAL_DMA_Start_IT+0x1bc>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a2d      	ldr	r2, [pc, #180]	; (80052a8 <HAL_DMA_Start_IT+0x208>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d031      	beq.n	800525c <HAL_DMA_Start_IT+0x1bc>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a2b      	ldr	r2, [pc, #172]	; (80052ac <HAL_DMA_Start_IT+0x20c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d02c      	beq.n	800525c <HAL_DMA_Start_IT+0x1bc>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a2a      	ldr	r2, [pc, #168]	; (80052b0 <HAL_DMA_Start_IT+0x210>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d027      	beq.n	800525c <HAL_DMA_Start_IT+0x1bc>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a28      	ldr	r2, [pc, #160]	; (80052b4 <HAL_DMA_Start_IT+0x214>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d022      	beq.n	800525c <HAL_DMA_Start_IT+0x1bc>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a27      	ldr	r2, [pc, #156]	; (80052b8 <HAL_DMA_Start_IT+0x218>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d01d      	beq.n	800525c <HAL_DMA_Start_IT+0x1bc>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a25      	ldr	r2, [pc, #148]	; (80052bc <HAL_DMA_Start_IT+0x21c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d018      	beq.n	800525c <HAL_DMA_Start_IT+0x1bc>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a24      	ldr	r2, [pc, #144]	; (80052c0 <HAL_DMA_Start_IT+0x220>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d013      	beq.n	800525c <HAL_DMA_Start_IT+0x1bc>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a22      	ldr	r2, [pc, #136]	; (80052c4 <HAL_DMA_Start_IT+0x224>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00e      	beq.n	800525c <HAL_DMA_Start_IT+0x1bc>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a21      	ldr	r2, [pc, #132]	; (80052c8 <HAL_DMA_Start_IT+0x228>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d009      	beq.n	800525c <HAL_DMA_Start_IT+0x1bc>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a1f      	ldr	r2, [pc, #124]	; (80052cc <HAL_DMA_Start_IT+0x22c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d004      	beq.n	800525c <HAL_DMA_Start_IT+0x1bc>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a1e      	ldr	r2, [pc, #120]	; (80052d0 <HAL_DMA_Start_IT+0x230>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d101      	bne.n	8005260 <HAL_DMA_Start_IT+0x1c0>
 800525c:	2301      	movs	r3, #1
 800525e:	e000      	b.n	8005262 <HAL_DMA_Start_IT+0x1c2>
 8005260:	2300      	movs	r3, #0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d036      	beq.n	80052d4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f023 021e 	bic.w	r2, r3, #30
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f042 0216 	orr.w	r2, r2, #22
 8005278:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	2b00      	cmp	r3, #0
 8005280:	d03e      	beq.n	8005300 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0208 	orr.w	r2, r2, #8
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	e035      	b.n	8005300 <HAL_DMA_Start_IT+0x260>
 8005294:	40020010 	.word	0x40020010
 8005298:	40020028 	.word	0x40020028
 800529c:	40020040 	.word	0x40020040
 80052a0:	40020058 	.word	0x40020058
 80052a4:	40020070 	.word	0x40020070
 80052a8:	40020088 	.word	0x40020088
 80052ac:	400200a0 	.word	0x400200a0
 80052b0:	400200b8 	.word	0x400200b8
 80052b4:	40020410 	.word	0x40020410
 80052b8:	40020428 	.word	0x40020428
 80052bc:	40020440 	.word	0x40020440
 80052c0:	40020458 	.word	0x40020458
 80052c4:	40020470 	.word	0x40020470
 80052c8:	40020488 	.word	0x40020488
 80052cc:	400204a0 	.word	0x400204a0
 80052d0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f023 020e 	bic.w	r2, r3, #14
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 020a 	orr.w	r2, r2, #10
 80052e6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d007      	beq.n	8005300 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f042 0204 	orr.w	r2, r2, #4
 80052fe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a83      	ldr	r2, [pc, #524]	; (8005514 <HAL_DMA_Start_IT+0x474>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d072      	beq.n	80053f0 <HAL_DMA_Start_IT+0x350>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a82      	ldr	r2, [pc, #520]	; (8005518 <HAL_DMA_Start_IT+0x478>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d06d      	beq.n	80053f0 <HAL_DMA_Start_IT+0x350>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a80      	ldr	r2, [pc, #512]	; (800551c <HAL_DMA_Start_IT+0x47c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d068      	beq.n	80053f0 <HAL_DMA_Start_IT+0x350>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a7f      	ldr	r2, [pc, #508]	; (8005520 <HAL_DMA_Start_IT+0x480>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d063      	beq.n	80053f0 <HAL_DMA_Start_IT+0x350>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a7d      	ldr	r2, [pc, #500]	; (8005524 <HAL_DMA_Start_IT+0x484>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d05e      	beq.n	80053f0 <HAL_DMA_Start_IT+0x350>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a7c      	ldr	r2, [pc, #496]	; (8005528 <HAL_DMA_Start_IT+0x488>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d059      	beq.n	80053f0 <HAL_DMA_Start_IT+0x350>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a7a      	ldr	r2, [pc, #488]	; (800552c <HAL_DMA_Start_IT+0x48c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d054      	beq.n	80053f0 <HAL_DMA_Start_IT+0x350>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a79      	ldr	r2, [pc, #484]	; (8005530 <HAL_DMA_Start_IT+0x490>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d04f      	beq.n	80053f0 <HAL_DMA_Start_IT+0x350>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a77      	ldr	r2, [pc, #476]	; (8005534 <HAL_DMA_Start_IT+0x494>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d04a      	beq.n	80053f0 <HAL_DMA_Start_IT+0x350>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a76      	ldr	r2, [pc, #472]	; (8005538 <HAL_DMA_Start_IT+0x498>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d045      	beq.n	80053f0 <HAL_DMA_Start_IT+0x350>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a74      	ldr	r2, [pc, #464]	; (800553c <HAL_DMA_Start_IT+0x49c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d040      	beq.n	80053f0 <HAL_DMA_Start_IT+0x350>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a73      	ldr	r2, [pc, #460]	; (8005540 <HAL_DMA_Start_IT+0x4a0>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d03b      	beq.n	80053f0 <HAL_DMA_Start_IT+0x350>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a71      	ldr	r2, [pc, #452]	; (8005544 <HAL_DMA_Start_IT+0x4a4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d036      	beq.n	80053f0 <HAL_DMA_Start_IT+0x350>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a70      	ldr	r2, [pc, #448]	; (8005548 <HAL_DMA_Start_IT+0x4a8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d031      	beq.n	80053f0 <HAL_DMA_Start_IT+0x350>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a6e      	ldr	r2, [pc, #440]	; (800554c <HAL_DMA_Start_IT+0x4ac>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d02c      	beq.n	80053f0 <HAL_DMA_Start_IT+0x350>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a6d      	ldr	r2, [pc, #436]	; (8005550 <HAL_DMA_Start_IT+0x4b0>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d027      	beq.n	80053f0 <HAL_DMA_Start_IT+0x350>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a6b      	ldr	r2, [pc, #428]	; (8005554 <HAL_DMA_Start_IT+0x4b4>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d022      	beq.n	80053f0 <HAL_DMA_Start_IT+0x350>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a6a      	ldr	r2, [pc, #424]	; (8005558 <HAL_DMA_Start_IT+0x4b8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d01d      	beq.n	80053f0 <HAL_DMA_Start_IT+0x350>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a68      	ldr	r2, [pc, #416]	; (800555c <HAL_DMA_Start_IT+0x4bc>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d018      	beq.n	80053f0 <HAL_DMA_Start_IT+0x350>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a67      	ldr	r2, [pc, #412]	; (8005560 <HAL_DMA_Start_IT+0x4c0>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d013      	beq.n	80053f0 <HAL_DMA_Start_IT+0x350>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a65      	ldr	r2, [pc, #404]	; (8005564 <HAL_DMA_Start_IT+0x4c4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d00e      	beq.n	80053f0 <HAL_DMA_Start_IT+0x350>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a64      	ldr	r2, [pc, #400]	; (8005568 <HAL_DMA_Start_IT+0x4c8>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d009      	beq.n	80053f0 <HAL_DMA_Start_IT+0x350>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a62      	ldr	r2, [pc, #392]	; (800556c <HAL_DMA_Start_IT+0x4cc>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d004      	beq.n	80053f0 <HAL_DMA_Start_IT+0x350>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a61      	ldr	r2, [pc, #388]	; (8005570 <HAL_DMA_Start_IT+0x4d0>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d101      	bne.n	80053f4 <HAL_DMA_Start_IT+0x354>
 80053f0:	2301      	movs	r3, #1
 80053f2:	e000      	b.n	80053f6 <HAL_DMA_Start_IT+0x356>
 80053f4:	2300      	movs	r3, #0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01a      	beq.n	8005430 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d007      	beq.n	8005418 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005416:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800541c:	2b00      	cmp	r3, #0
 800541e:	d007      	beq.n	8005430 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800542a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800542e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a37      	ldr	r2, [pc, #220]	; (8005514 <HAL_DMA_Start_IT+0x474>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d04a      	beq.n	80054d0 <HAL_DMA_Start_IT+0x430>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a36      	ldr	r2, [pc, #216]	; (8005518 <HAL_DMA_Start_IT+0x478>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d045      	beq.n	80054d0 <HAL_DMA_Start_IT+0x430>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a34      	ldr	r2, [pc, #208]	; (800551c <HAL_DMA_Start_IT+0x47c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d040      	beq.n	80054d0 <HAL_DMA_Start_IT+0x430>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a33      	ldr	r2, [pc, #204]	; (8005520 <HAL_DMA_Start_IT+0x480>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d03b      	beq.n	80054d0 <HAL_DMA_Start_IT+0x430>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a31      	ldr	r2, [pc, #196]	; (8005524 <HAL_DMA_Start_IT+0x484>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d036      	beq.n	80054d0 <HAL_DMA_Start_IT+0x430>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a30      	ldr	r2, [pc, #192]	; (8005528 <HAL_DMA_Start_IT+0x488>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d031      	beq.n	80054d0 <HAL_DMA_Start_IT+0x430>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a2e      	ldr	r2, [pc, #184]	; (800552c <HAL_DMA_Start_IT+0x48c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d02c      	beq.n	80054d0 <HAL_DMA_Start_IT+0x430>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a2d      	ldr	r2, [pc, #180]	; (8005530 <HAL_DMA_Start_IT+0x490>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d027      	beq.n	80054d0 <HAL_DMA_Start_IT+0x430>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a2b      	ldr	r2, [pc, #172]	; (8005534 <HAL_DMA_Start_IT+0x494>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d022      	beq.n	80054d0 <HAL_DMA_Start_IT+0x430>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a2a      	ldr	r2, [pc, #168]	; (8005538 <HAL_DMA_Start_IT+0x498>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d01d      	beq.n	80054d0 <HAL_DMA_Start_IT+0x430>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a28      	ldr	r2, [pc, #160]	; (800553c <HAL_DMA_Start_IT+0x49c>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d018      	beq.n	80054d0 <HAL_DMA_Start_IT+0x430>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a27      	ldr	r2, [pc, #156]	; (8005540 <HAL_DMA_Start_IT+0x4a0>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d013      	beq.n	80054d0 <HAL_DMA_Start_IT+0x430>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a25      	ldr	r2, [pc, #148]	; (8005544 <HAL_DMA_Start_IT+0x4a4>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d00e      	beq.n	80054d0 <HAL_DMA_Start_IT+0x430>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a24      	ldr	r2, [pc, #144]	; (8005548 <HAL_DMA_Start_IT+0x4a8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d009      	beq.n	80054d0 <HAL_DMA_Start_IT+0x430>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a22      	ldr	r2, [pc, #136]	; (800554c <HAL_DMA_Start_IT+0x4ac>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d004      	beq.n	80054d0 <HAL_DMA_Start_IT+0x430>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a21      	ldr	r2, [pc, #132]	; (8005550 <HAL_DMA_Start_IT+0x4b0>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d108      	bne.n	80054e2 <HAL_DMA_Start_IT+0x442>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0201 	orr.w	r2, r2, #1
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	e012      	b.n	8005508 <HAL_DMA_Start_IT+0x468>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f042 0201 	orr.w	r2, r2, #1
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	e009      	b.n	8005508 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005508:	7dfb      	ldrb	r3, [r7, #23]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	40020010 	.word	0x40020010
 8005518:	40020028 	.word	0x40020028
 800551c:	40020040 	.word	0x40020040
 8005520:	40020058 	.word	0x40020058
 8005524:	40020070 	.word	0x40020070
 8005528:	40020088 	.word	0x40020088
 800552c:	400200a0 	.word	0x400200a0
 8005530:	400200b8 	.word	0x400200b8
 8005534:	40020410 	.word	0x40020410
 8005538:	40020428 	.word	0x40020428
 800553c:	40020440 	.word	0x40020440
 8005540:	40020458 	.word	0x40020458
 8005544:	40020470 	.word	0x40020470
 8005548:	40020488 	.word	0x40020488
 800554c:	400204a0 	.word	0x400204a0
 8005550:	400204b8 	.word	0x400204b8
 8005554:	58025408 	.word	0x58025408
 8005558:	5802541c 	.word	0x5802541c
 800555c:	58025430 	.word	0x58025430
 8005560:	58025444 	.word	0x58025444
 8005564:	58025458 	.word	0x58025458
 8005568:	5802546c 	.word	0x5802546c
 800556c:	58025480 	.word	0x58025480
 8005570:	58025494 	.word	0x58025494

08005574 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800557c:	f7fd f9d6 	bl	800292c <HAL_GetTick>
 8005580:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e2dc      	b.n	8005b46 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d008      	beq.n	80055aa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2280      	movs	r2, #128	; 0x80
 800559c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e2cd      	b.n	8005b46 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a76      	ldr	r2, [pc, #472]	; (8005788 <HAL_DMA_Abort+0x214>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d04a      	beq.n	800564a <HAL_DMA_Abort+0xd6>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a74      	ldr	r2, [pc, #464]	; (800578c <HAL_DMA_Abort+0x218>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d045      	beq.n	800564a <HAL_DMA_Abort+0xd6>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a73      	ldr	r2, [pc, #460]	; (8005790 <HAL_DMA_Abort+0x21c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d040      	beq.n	800564a <HAL_DMA_Abort+0xd6>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a71      	ldr	r2, [pc, #452]	; (8005794 <HAL_DMA_Abort+0x220>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d03b      	beq.n	800564a <HAL_DMA_Abort+0xd6>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a70      	ldr	r2, [pc, #448]	; (8005798 <HAL_DMA_Abort+0x224>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d036      	beq.n	800564a <HAL_DMA_Abort+0xd6>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a6e      	ldr	r2, [pc, #440]	; (800579c <HAL_DMA_Abort+0x228>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d031      	beq.n	800564a <HAL_DMA_Abort+0xd6>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a6d      	ldr	r2, [pc, #436]	; (80057a0 <HAL_DMA_Abort+0x22c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d02c      	beq.n	800564a <HAL_DMA_Abort+0xd6>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a6b      	ldr	r2, [pc, #428]	; (80057a4 <HAL_DMA_Abort+0x230>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d027      	beq.n	800564a <HAL_DMA_Abort+0xd6>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a6a      	ldr	r2, [pc, #424]	; (80057a8 <HAL_DMA_Abort+0x234>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d022      	beq.n	800564a <HAL_DMA_Abort+0xd6>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a68      	ldr	r2, [pc, #416]	; (80057ac <HAL_DMA_Abort+0x238>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d01d      	beq.n	800564a <HAL_DMA_Abort+0xd6>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a67      	ldr	r2, [pc, #412]	; (80057b0 <HAL_DMA_Abort+0x23c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d018      	beq.n	800564a <HAL_DMA_Abort+0xd6>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a65      	ldr	r2, [pc, #404]	; (80057b4 <HAL_DMA_Abort+0x240>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d013      	beq.n	800564a <HAL_DMA_Abort+0xd6>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a64      	ldr	r2, [pc, #400]	; (80057b8 <HAL_DMA_Abort+0x244>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00e      	beq.n	800564a <HAL_DMA_Abort+0xd6>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a62      	ldr	r2, [pc, #392]	; (80057bc <HAL_DMA_Abort+0x248>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d009      	beq.n	800564a <HAL_DMA_Abort+0xd6>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a61      	ldr	r2, [pc, #388]	; (80057c0 <HAL_DMA_Abort+0x24c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d004      	beq.n	800564a <HAL_DMA_Abort+0xd6>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a5f      	ldr	r2, [pc, #380]	; (80057c4 <HAL_DMA_Abort+0x250>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d101      	bne.n	800564e <HAL_DMA_Abort+0xda>
 800564a:	2301      	movs	r3, #1
 800564c:	e000      	b.n	8005650 <HAL_DMA_Abort+0xdc>
 800564e:	2300      	movs	r3, #0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d013      	beq.n	800567c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 021e 	bic.w	r2, r2, #30
 8005662:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	695a      	ldr	r2, [r3, #20]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005672:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	617b      	str	r3, [r7, #20]
 800567a:	e00a      	b.n	8005692 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 020e 	bic.w	r2, r2, #14
 800568a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a3c      	ldr	r2, [pc, #240]	; (8005788 <HAL_DMA_Abort+0x214>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d072      	beq.n	8005782 <HAL_DMA_Abort+0x20e>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a3a      	ldr	r2, [pc, #232]	; (800578c <HAL_DMA_Abort+0x218>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d06d      	beq.n	8005782 <HAL_DMA_Abort+0x20e>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a39      	ldr	r2, [pc, #228]	; (8005790 <HAL_DMA_Abort+0x21c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d068      	beq.n	8005782 <HAL_DMA_Abort+0x20e>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a37      	ldr	r2, [pc, #220]	; (8005794 <HAL_DMA_Abort+0x220>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d063      	beq.n	8005782 <HAL_DMA_Abort+0x20e>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a36      	ldr	r2, [pc, #216]	; (8005798 <HAL_DMA_Abort+0x224>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d05e      	beq.n	8005782 <HAL_DMA_Abort+0x20e>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a34      	ldr	r2, [pc, #208]	; (800579c <HAL_DMA_Abort+0x228>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d059      	beq.n	8005782 <HAL_DMA_Abort+0x20e>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a33      	ldr	r2, [pc, #204]	; (80057a0 <HAL_DMA_Abort+0x22c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d054      	beq.n	8005782 <HAL_DMA_Abort+0x20e>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a31      	ldr	r2, [pc, #196]	; (80057a4 <HAL_DMA_Abort+0x230>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d04f      	beq.n	8005782 <HAL_DMA_Abort+0x20e>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a30      	ldr	r2, [pc, #192]	; (80057a8 <HAL_DMA_Abort+0x234>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d04a      	beq.n	8005782 <HAL_DMA_Abort+0x20e>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a2e      	ldr	r2, [pc, #184]	; (80057ac <HAL_DMA_Abort+0x238>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d045      	beq.n	8005782 <HAL_DMA_Abort+0x20e>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a2d      	ldr	r2, [pc, #180]	; (80057b0 <HAL_DMA_Abort+0x23c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d040      	beq.n	8005782 <HAL_DMA_Abort+0x20e>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a2b      	ldr	r2, [pc, #172]	; (80057b4 <HAL_DMA_Abort+0x240>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d03b      	beq.n	8005782 <HAL_DMA_Abort+0x20e>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a2a      	ldr	r2, [pc, #168]	; (80057b8 <HAL_DMA_Abort+0x244>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d036      	beq.n	8005782 <HAL_DMA_Abort+0x20e>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a28      	ldr	r2, [pc, #160]	; (80057bc <HAL_DMA_Abort+0x248>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d031      	beq.n	8005782 <HAL_DMA_Abort+0x20e>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a27      	ldr	r2, [pc, #156]	; (80057c0 <HAL_DMA_Abort+0x24c>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d02c      	beq.n	8005782 <HAL_DMA_Abort+0x20e>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a25      	ldr	r2, [pc, #148]	; (80057c4 <HAL_DMA_Abort+0x250>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d027      	beq.n	8005782 <HAL_DMA_Abort+0x20e>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a24      	ldr	r2, [pc, #144]	; (80057c8 <HAL_DMA_Abort+0x254>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d022      	beq.n	8005782 <HAL_DMA_Abort+0x20e>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a22      	ldr	r2, [pc, #136]	; (80057cc <HAL_DMA_Abort+0x258>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d01d      	beq.n	8005782 <HAL_DMA_Abort+0x20e>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a21      	ldr	r2, [pc, #132]	; (80057d0 <HAL_DMA_Abort+0x25c>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d018      	beq.n	8005782 <HAL_DMA_Abort+0x20e>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a1f      	ldr	r2, [pc, #124]	; (80057d4 <HAL_DMA_Abort+0x260>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d013      	beq.n	8005782 <HAL_DMA_Abort+0x20e>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a1e      	ldr	r2, [pc, #120]	; (80057d8 <HAL_DMA_Abort+0x264>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00e      	beq.n	8005782 <HAL_DMA_Abort+0x20e>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a1c      	ldr	r2, [pc, #112]	; (80057dc <HAL_DMA_Abort+0x268>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d009      	beq.n	8005782 <HAL_DMA_Abort+0x20e>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a1b      	ldr	r2, [pc, #108]	; (80057e0 <HAL_DMA_Abort+0x26c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d004      	beq.n	8005782 <HAL_DMA_Abort+0x20e>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a19      	ldr	r2, [pc, #100]	; (80057e4 <HAL_DMA_Abort+0x270>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d132      	bne.n	80057e8 <HAL_DMA_Abort+0x274>
 8005782:	2301      	movs	r3, #1
 8005784:	e031      	b.n	80057ea <HAL_DMA_Abort+0x276>
 8005786:	bf00      	nop
 8005788:	40020010 	.word	0x40020010
 800578c:	40020028 	.word	0x40020028
 8005790:	40020040 	.word	0x40020040
 8005794:	40020058 	.word	0x40020058
 8005798:	40020070 	.word	0x40020070
 800579c:	40020088 	.word	0x40020088
 80057a0:	400200a0 	.word	0x400200a0
 80057a4:	400200b8 	.word	0x400200b8
 80057a8:	40020410 	.word	0x40020410
 80057ac:	40020428 	.word	0x40020428
 80057b0:	40020440 	.word	0x40020440
 80057b4:	40020458 	.word	0x40020458
 80057b8:	40020470 	.word	0x40020470
 80057bc:	40020488 	.word	0x40020488
 80057c0:	400204a0 	.word	0x400204a0
 80057c4:	400204b8 	.word	0x400204b8
 80057c8:	58025408 	.word	0x58025408
 80057cc:	5802541c 	.word	0x5802541c
 80057d0:	58025430 	.word	0x58025430
 80057d4:	58025444 	.word	0x58025444
 80057d8:	58025458 	.word	0x58025458
 80057dc:	5802546c 	.word	0x5802546c
 80057e0:	58025480 	.word	0x58025480
 80057e4:	58025494 	.word	0x58025494
 80057e8:	2300      	movs	r3, #0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d007      	beq.n	80057fe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a6d      	ldr	r2, [pc, #436]	; (80059b8 <HAL_DMA_Abort+0x444>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d04a      	beq.n	800589e <HAL_DMA_Abort+0x32a>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a6b      	ldr	r2, [pc, #428]	; (80059bc <HAL_DMA_Abort+0x448>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d045      	beq.n	800589e <HAL_DMA_Abort+0x32a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a6a      	ldr	r2, [pc, #424]	; (80059c0 <HAL_DMA_Abort+0x44c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d040      	beq.n	800589e <HAL_DMA_Abort+0x32a>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a68      	ldr	r2, [pc, #416]	; (80059c4 <HAL_DMA_Abort+0x450>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d03b      	beq.n	800589e <HAL_DMA_Abort+0x32a>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a67      	ldr	r2, [pc, #412]	; (80059c8 <HAL_DMA_Abort+0x454>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d036      	beq.n	800589e <HAL_DMA_Abort+0x32a>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a65      	ldr	r2, [pc, #404]	; (80059cc <HAL_DMA_Abort+0x458>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d031      	beq.n	800589e <HAL_DMA_Abort+0x32a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a64      	ldr	r2, [pc, #400]	; (80059d0 <HAL_DMA_Abort+0x45c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d02c      	beq.n	800589e <HAL_DMA_Abort+0x32a>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a62      	ldr	r2, [pc, #392]	; (80059d4 <HAL_DMA_Abort+0x460>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d027      	beq.n	800589e <HAL_DMA_Abort+0x32a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a61      	ldr	r2, [pc, #388]	; (80059d8 <HAL_DMA_Abort+0x464>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d022      	beq.n	800589e <HAL_DMA_Abort+0x32a>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a5f      	ldr	r2, [pc, #380]	; (80059dc <HAL_DMA_Abort+0x468>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d01d      	beq.n	800589e <HAL_DMA_Abort+0x32a>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a5e      	ldr	r2, [pc, #376]	; (80059e0 <HAL_DMA_Abort+0x46c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d018      	beq.n	800589e <HAL_DMA_Abort+0x32a>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a5c      	ldr	r2, [pc, #368]	; (80059e4 <HAL_DMA_Abort+0x470>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d013      	beq.n	800589e <HAL_DMA_Abort+0x32a>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a5b      	ldr	r2, [pc, #364]	; (80059e8 <HAL_DMA_Abort+0x474>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d00e      	beq.n	800589e <HAL_DMA_Abort+0x32a>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a59      	ldr	r2, [pc, #356]	; (80059ec <HAL_DMA_Abort+0x478>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d009      	beq.n	800589e <HAL_DMA_Abort+0x32a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a58      	ldr	r2, [pc, #352]	; (80059f0 <HAL_DMA_Abort+0x47c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d004      	beq.n	800589e <HAL_DMA_Abort+0x32a>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a56      	ldr	r2, [pc, #344]	; (80059f4 <HAL_DMA_Abort+0x480>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d108      	bne.n	80058b0 <HAL_DMA_Abort+0x33c>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0201 	bic.w	r2, r2, #1
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	e007      	b.n	80058c0 <HAL_DMA_Abort+0x34c>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0201 	bic.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80058c0:	e013      	b.n	80058ea <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058c2:	f7fd f833 	bl	800292c <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b05      	cmp	r3, #5
 80058ce:	d90c      	bls.n	80058ea <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2220      	movs	r2, #32
 80058d4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2203      	movs	r2, #3
 80058da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e12d      	b.n	8005b46 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1e5      	bne.n	80058c2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a2f      	ldr	r2, [pc, #188]	; (80059b8 <HAL_DMA_Abort+0x444>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d04a      	beq.n	8005996 <HAL_DMA_Abort+0x422>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a2d      	ldr	r2, [pc, #180]	; (80059bc <HAL_DMA_Abort+0x448>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d045      	beq.n	8005996 <HAL_DMA_Abort+0x422>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a2c      	ldr	r2, [pc, #176]	; (80059c0 <HAL_DMA_Abort+0x44c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d040      	beq.n	8005996 <HAL_DMA_Abort+0x422>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a2a      	ldr	r2, [pc, #168]	; (80059c4 <HAL_DMA_Abort+0x450>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d03b      	beq.n	8005996 <HAL_DMA_Abort+0x422>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a29      	ldr	r2, [pc, #164]	; (80059c8 <HAL_DMA_Abort+0x454>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d036      	beq.n	8005996 <HAL_DMA_Abort+0x422>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a27      	ldr	r2, [pc, #156]	; (80059cc <HAL_DMA_Abort+0x458>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d031      	beq.n	8005996 <HAL_DMA_Abort+0x422>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a26      	ldr	r2, [pc, #152]	; (80059d0 <HAL_DMA_Abort+0x45c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d02c      	beq.n	8005996 <HAL_DMA_Abort+0x422>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a24      	ldr	r2, [pc, #144]	; (80059d4 <HAL_DMA_Abort+0x460>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d027      	beq.n	8005996 <HAL_DMA_Abort+0x422>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a23      	ldr	r2, [pc, #140]	; (80059d8 <HAL_DMA_Abort+0x464>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d022      	beq.n	8005996 <HAL_DMA_Abort+0x422>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a21      	ldr	r2, [pc, #132]	; (80059dc <HAL_DMA_Abort+0x468>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d01d      	beq.n	8005996 <HAL_DMA_Abort+0x422>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a20      	ldr	r2, [pc, #128]	; (80059e0 <HAL_DMA_Abort+0x46c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d018      	beq.n	8005996 <HAL_DMA_Abort+0x422>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a1e      	ldr	r2, [pc, #120]	; (80059e4 <HAL_DMA_Abort+0x470>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d013      	beq.n	8005996 <HAL_DMA_Abort+0x422>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a1d      	ldr	r2, [pc, #116]	; (80059e8 <HAL_DMA_Abort+0x474>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00e      	beq.n	8005996 <HAL_DMA_Abort+0x422>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a1b      	ldr	r2, [pc, #108]	; (80059ec <HAL_DMA_Abort+0x478>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d009      	beq.n	8005996 <HAL_DMA_Abort+0x422>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1a      	ldr	r2, [pc, #104]	; (80059f0 <HAL_DMA_Abort+0x47c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d004      	beq.n	8005996 <HAL_DMA_Abort+0x422>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a18      	ldr	r2, [pc, #96]	; (80059f4 <HAL_DMA_Abort+0x480>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d101      	bne.n	800599a <HAL_DMA_Abort+0x426>
 8005996:	2301      	movs	r3, #1
 8005998:	e000      	b.n	800599c <HAL_DMA_Abort+0x428>
 800599a:	2300      	movs	r3, #0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d02b      	beq.n	80059f8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059aa:	f003 031f 	and.w	r3, r3, #31
 80059ae:	223f      	movs	r2, #63	; 0x3f
 80059b0:	409a      	lsls	r2, r3
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	609a      	str	r2, [r3, #8]
 80059b6:	e02a      	b.n	8005a0e <HAL_DMA_Abort+0x49a>
 80059b8:	40020010 	.word	0x40020010
 80059bc:	40020028 	.word	0x40020028
 80059c0:	40020040 	.word	0x40020040
 80059c4:	40020058 	.word	0x40020058
 80059c8:	40020070 	.word	0x40020070
 80059cc:	40020088 	.word	0x40020088
 80059d0:	400200a0 	.word	0x400200a0
 80059d4:	400200b8 	.word	0x400200b8
 80059d8:	40020410 	.word	0x40020410
 80059dc:	40020428 	.word	0x40020428
 80059e0:	40020440 	.word	0x40020440
 80059e4:	40020458 	.word	0x40020458
 80059e8:	40020470 	.word	0x40020470
 80059ec:	40020488 	.word	0x40020488
 80059f0:	400204a0 	.word	0x400204a0
 80059f4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059fc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a02:	f003 031f 	and.w	r3, r3, #31
 8005a06:	2201      	movs	r2, #1
 8005a08:	409a      	lsls	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a4f      	ldr	r2, [pc, #316]	; (8005b50 <HAL_DMA_Abort+0x5dc>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d072      	beq.n	8005afe <HAL_DMA_Abort+0x58a>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a4d      	ldr	r2, [pc, #308]	; (8005b54 <HAL_DMA_Abort+0x5e0>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d06d      	beq.n	8005afe <HAL_DMA_Abort+0x58a>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a4c      	ldr	r2, [pc, #304]	; (8005b58 <HAL_DMA_Abort+0x5e4>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d068      	beq.n	8005afe <HAL_DMA_Abort+0x58a>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a4a      	ldr	r2, [pc, #296]	; (8005b5c <HAL_DMA_Abort+0x5e8>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d063      	beq.n	8005afe <HAL_DMA_Abort+0x58a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a49      	ldr	r2, [pc, #292]	; (8005b60 <HAL_DMA_Abort+0x5ec>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d05e      	beq.n	8005afe <HAL_DMA_Abort+0x58a>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a47      	ldr	r2, [pc, #284]	; (8005b64 <HAL_DMA_Abort+0x5f0>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d059      	beq.n	8005afe <HAL_DMA_Abort+0x58a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a46      	ldr	r2, [pc, #280]	; (8005b68 <HAL_DMA_Abort+0x5f4>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d054      	beq.n	8005afe <HAL_DMA_Abort+0x58a>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a44      	ldr	r2, [pc, #272]	; (8005b6c <HAL_DMA_Abort+0x5f8>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d04f      	beq.n	8005afe <HAL_DMA_Abort+0x58a>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a43      	ldr	r2, [pc, #268]	; (8005b70 <HAL_DMA_Abort+0x5fc>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d04a      	beq.n	8005afe <HAL_DMA_Abort+0x58a>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a41      	ldr	r2, [pc, #260]	; (8005b74 <HAL_DMA_Abort+0x600>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d045      	beq.n	8005afe <HAL_DMA_Abort+0x58a>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a40      	ldr	r2, [pc, #256]	; (8005b78 <HAL_DMA_Abort+0x604>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d040      	beq.n	8005afe <HAL_DMA_Abort+0x58a>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a3e      	ldr	r2, [pc, #248]	; (8005b7c <HAL_DMA_Abort+0x608>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d03b      	beq.n	8005afe <HAL_DMA_Abort+0x58a>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a3d      	ldr	r2, [pc, #244]	; (8005b80 <HAL_DMA_Abort+0x60c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d036      	beq.n	8005afe <HAL_DMA_Abort+0x58a>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a3b      	ldr	r2, [pc, #236]	; (8005b84 <HAL_DMA_Abort+0x610>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d031      	beq.n	8005afe <HAL_DMA_Abort+0x58a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a3a      	ldr	r2, [pc, #232]	; (8005b88 <HAL_DMA_Abort+0x614>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d02c      	beq.n	8005afe <HAL_DMA_Abort+0x58a>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a38      	ldr	r2, [pc, #224]	; (8005b8c <HAL_DMA_Abort+0x618>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d027      	beq.n	8005afe <HAL_DMA_Abort+0x58a>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a37      	ldr	r2, [pc, #220]	; (8005b90 <HAL_DMA_Abort+0x61c>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d022      	beq.n	8005afe <HAL_DMA_Abort+0x58a>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a35      	ldr	r2, [pc, #212]	; (8005b94 <HAL_DMA_Abort+0x620>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d01d      	beq.n	8005afe <HAL_DMA_Abort+0x58a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a34      	ldr	r2, [pc, #208]	; (8005b98 <HAL_DMA_Abort+0x624>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d018      	beq.n	8005afe <HAL_DMA_Abort+0x58a>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a32      	ldr	r2, [pc, #200]	; (8005b9c <HAL_DMA_Abort+0x628>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d013      	beq.n	8005afe <HAL_DMA_Abort+0x58a>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a31      	ldr	r2, [pc, #196]	; (8005ba0 <HAL_DMA_Abort+0x62c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00e      	beq.n	8005afe <HAL_DMA_Abort+0x58a>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a2f      	ldr	r2, [pc, #188]	; (8005ba4 <HAL_DMA_Abort+0x630>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d009      	beq.n	8005afe <HAL_DMA_Abort+0x58a>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a2e      	ldr	r2, [pc, #184]	; (8005ba8 <HAL_DMA_Abort+0x634>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d004      	beq.n	8005afe <HAL_DMA_Abort+0x58a>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a2c      	ldr	r2, [pc, #176]	; (8005bac <HAL_DMA_Abort+0x638>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d101      	bne.n	8005b02 <HAL_DMA_Abort+0x58e>
 8005afe:	2301      	movs	r3, #1
 8005b00:	e000      	b.n	8005b04 <HAL_DMA_Abort+0x590>
 8005b02:	2300      	movs	r3, #0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d015      	beq.n	8005b34 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005b10:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00c      	beq.n	8005b34 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b28:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005b32:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	40020010 	.word	0x40020010
 8005b54:	40020028 	.word	0x40020028
 8005b58:	40020040 	.word	0x40020040
 8005b5c:	40020058 	.word	0x40020058
 8005b60:	40020070 	.word	0x40020070
 8005b64:	40020088 	.word	0x40020088
 8005b68:	400200a0 	.word	0x400200a0
 8005b6c:	400200b8 	.word	0x400200b8
 8005b70:	40020410 	.word	0x40020410
 8005b74:	40020428 	.word	0x40020428
 8005b78:	40020440 	.word	0x40020440
 8005b7c:	40020458 	.word	0x40020458
 8005b80:	40020470 	.word	0x40020470
 8005b84:	40020488 	.word	0x40020488
 8005b88:	400204a0 	.word	0x400204a0
 8005b8c:	400204b8 	.word	0x400204b8
 8005b90:	58025408 	.word	0x58025408
 8005b94:	5802541c 	.word	0x5802541c
 8005b98:	58025430 	.word	0x58025430
 8005b9c:	58025444 	.word	0x58025444
 8005ba0:	58025458 	.word	0x58025458
 8005ba4:	5802546c 	.word	0x5802546c
 8005ba8:	58025480 	.word	0x58025480
 8005bac:	58025494 	.word	0x58025494

08005bb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e237      	b.n	8006032 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d004      	beq.n	8005bd8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2280      	movs	r2, #128	; 0x80
 8005bd2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e22c      	b.n	8006032 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a5c      	ldr	r2, [pc, #368]	; (8005d50 <HAL_DMA_Abort_IT+0x1a0>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d04a      	beq.n	8005c78 <HAL_DMA_Abort_IT+0xc8>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a5b      	ldr	r2, [pc, #364]	; (8005d54 <HAL_DMA_Abort_IT+0x1a4>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d045      	beq.n	8005c78 <HAL_DMA_Abort_IT+0xc8>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a59      	ldr	r2, [pc, #356]	; (8005d58 <HAL_DMA_Abort_IT+0x1a8>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d040      	beq.n	8005c78 <HAL_DMA_Abort_IT+0xc8>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a58      	ldr	r2, [pc, #352]	; (8005d5c <HAL_DMA_Abort_IT+0x1ac>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d03b      	beq.n	8005c78 <HAL_DMA_Abort_IT+0xc8>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a56      	ldr	r2, [pc, #344]	; (8005d60 <HAL_DMA_Abort_IT+0x1b0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d036      	beq.n	8005c78 <HAL_DMA_Abort_IT+0xc8>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a55      	ldr	r2, [pc, #340]	; (8005d64 <HAL_DMA_Abort_IT+0x1b4>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d031      	beq.n	8005c78 <HAL_DMA_Abort_IT+0xc8>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a53      	ldr	r2, [pc, #332]	; (8005d68 <HAL_DMA_Abort_IT+0x1b8>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d02c      	beq.n	8005c78 <HAL_DMA_Abort_IT+0xc8>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a52      	ldr	r2, [pc, #328]	; (8005d6c <HAL_DMA_Abort_IT+0x1bc>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d027      	beq.n	8005c78 <HAL_DMA_Abort_IT+0xc8>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a50      	ldr	r2, [pc, #320]	; (8005d70 <HAL_DMA_Abort_IT+0x1c0>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d022      	beq.n	8005c78 <HAL_DMA_Abort_IT+0xc8>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a4f      	ldr	r2, [pc, #316]	; (8005d74 <HAL_DMA_Abort_IT+0x1c4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d01d      	beq.n	8005c78 <HAL_DMA_Abort_IT+0xc8>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a4d      	ldr	r2, [pc, #308]	; (8005d78 <HAL_DMA_Abort_IT+0x1c8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d018      	beq.n	8005c78 <HAL_DMA_Abort_IT+0xc8>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a4c      	ldr	r2, [pc, #304]	; (8005d7c <HAL_DMA_Abort_IT+0x1cc>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d013      	beq.n	8005c78 <HAL_DMA_Abort_IT+0xc8>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a4a      	ldr	r2, [pc, #296]	; (8005d80 <HAL_DMA_Abort_IT+0x1d0>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00e      	beq.n	8005c78 <HAL_DMA_Abort_IT+0xc8>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a49      	ldr	r2, [pc, #292]	; (8005d84 <HAL_DMA_Abort_IT+0x1d4>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d009      	beq.n	8005c78 <HAL_DMA_Abort_IT+0xc8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a47      	ldr	r2, [pc, #284]	; (8005d88 <HAL_DMA_Abort_IT+0x1d8>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d004      	beq.n	8005c78 <HAL_DMA_Abort_IT+0xc8>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a46      	ldr	r2, [pc, #280]	; (8005d8c <HAL_DMA_Abort_IT+0x1dc>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d101      	bne.n	8005c7c <HAL_DMA_Abort_IT+0xcc>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e000      	b.n	8005c7e <HAL_DMA_Abort_IT+0xce>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 8086 	beq.w	8005d90 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2204      	movs	r2, #4
 8005c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a2f      	ldr	r2, [pc, #188]	; (8005d50 <HAL_DMA_Abort_IT+0x1a0>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d04a      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x17c>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a2e      	ldr	r2, [pc, #184]	; (8005d54 <HAL_DMA_Abort_IT+0x1a4>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d045      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x17c>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a2c      	ldr	r2, [pc, #176]	; (8005d58 <HAL_DMA_Abort_IT+0x1a8>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d040      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x17c>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a2b      	ldr	r2, [pc, #172]	; (8005d5c <HAL_DMA_Abort_IT+0x1ac>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d03b      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x17c>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a29      	ldr	r2, [pc, #164]	; (8005d60 <HAL_DMA_Abort_IT+0x1b0>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d036      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x17c>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a28      	ldr	r2, [pc, #160]	; (8005d64 <HAL_DMA_Abort_IT+0x1b4>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d031      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x17c>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a26      	ldr	r2, [pc, #152]	; (8005d68 <HAL_DMA_Abort_IT+0x1b8>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d02c      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x17c>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a25      	ldr	r2, [pc, #148]	; (8005d6c <HAL_DMA_Abort_IT+0x1bc>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d027      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x17c>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a23      	ldr	r2, [pc, #140]	; (8005d70 <HAL_DMA_Abort_IT+0x1c0>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d022      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x17c>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a22      	ldr	r2, [pc, #136]	; (8005d74 <HAL_DMA_Abort_IT+0x1c4>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d01d      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x17c>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a20      	ldr	r2, [pc, #128]	; (8005d78 <HAL_DMA_Abort_IT+0x1c8>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d018      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x17c>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a1f      	ldr	r2, [pc, #124]	; (8005d7c <HAL_DMA_Abort_IT+0x1cc>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d013      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x17c>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a1d      	ldr	r2, [pc, #116]	; (8005d80 <HAL_DMA_Abort_IT+0x1d0>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d00e      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x17c>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a1c      	ldr	r2, [pc, #112]	; (8005d84 <HAL_DMA_Abort_IT+0x1d4>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d009      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x17c>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a1a      	ldr	r2, [pc, #104]	; (8005d88 <HAL_DMA_Abort_IT+0x1d8>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d004      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x17c>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a19      	ldr	r2, [pc, #100]	; (8005d8c <HAL_DMA_Abort_IT+0x1dc>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d108      	bne.n	8005d3e <HAL_DMA_Abort_IT+0x18e>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0201 	bic.w	r2, r2, #1
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	e178      	b.n	8006030 <HAL_DMA_Abort_IT+0x480>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 0201 	bic.w	r2, r2, #1
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	e16f      	b.n	8006030 <HAL_DMA_Abort_IT+0x480>
 8005d50:	40020010 	.word	0x40020010
 8005d54:	40020028 	.word	0x40020028
 8005d58:	40020040 	.word	0x40020040
 8005d5c:	40020058 	.word	0x40020058
 8005d60:	40020070 	.word	0x40020070
 8005d64:	40020088 	.word	0x40020088
 8005d68:	400200a0 	.word	0x400200a0
 8005d6c:	400200b8 	.word	0x400200b8
 8005d70:	40020410 	.word	0x40020410
 8005d74:	40020428 	.word	0x40020428
 8005d78:	40020440 	.word	0x40020440
 8005d7c:	40020458 	.word	0x40020458
 8005d80:	40020470 	.word	0x40020470
 8005d84:	40020488 	.word	0x40020488
 8005d88:	400204a0 	.word	0x400204a0
 8005d8c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 020e 	bic.w	r2, r2, #14
 8005d9e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a6c      	ldr	r2, [pc, #432]	; (8005f58 <HAL_DMA_Abort_IT+0x3a8>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d04a      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x290>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a6b      	ldr	r2, [pc, #428]	; (8005f5c <HAL_DMA_Abort_IT+0x3ac>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d045      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x290>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a69      	ldr	r2, [pc, #420]	; (8005f60 <HAL_DMA_Abort_IT+0x3b0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d040      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x290>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a68      	ldr	r2, [pc, #416]	; (8005f64 <HAL_DMA_Abort_IT+0x3b4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d03b      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x290>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a66      	ldr	r2, [pc, #408]	; (8005f68 <HAL_DMA_Abort_IT+0x3b8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d036      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x290>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a65      	ldr	r2, [pc, #404]	; (8005f6c <HAL_DMA_Abort_IT+0x3bc>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d031      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x290>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a63      	ldr	r2, [pc, #396]	; (8005f70 <HAL_DMA_Abort_IT+0x3c0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d02c      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x290>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a62      	ldr	r2, [pc, #392]	; (8005f74 <HAL_DMA_Abort_IT+0x3c4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d027      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x290>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a60      	ldr	r2, [pc, #384]	; (8005f78 <HAL_DMA_Abort_IT+0x3c8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d022      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x290>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a5f      	ldr	r2, [pc, #380]	; (8005f7c <HAL_DMA_Abort_IT+0x3cc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d01d      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x290>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a5d      	ldr	r2, [pc, #372]	; (8005f80 <HAL_DMA_Abort_IT+0x3d0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d018      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x290>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a5c      	ldr	r2, [pc, #368]	; (8005f84 <HAL_DMA_Abort_IT+0x3d4>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d013      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x290>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a5a      	ldr	r2, [pc, #360]	; (8005f88 <HAL_DMA_Abort_IT+0x3d8>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d00e      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x290>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a59      	ldr	r2, [pc, #356]	; (8005f8c <HAL_DMA_Abort_IT+0x3dc>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d009      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x290>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a57      	ldr	r2, [pc, #348]	; (8005f90 <HAL_DMA_Abort_IT+0x3e0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d004      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x290>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a56      	ldr	r2, [pc, #344]	; (8005f94 <HAL_DMA_Abort_IT+0x3e4>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d108      	bne.n	8005e52 <HAL_DMA_Abort_IT+0x2a2>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 0201 	bic.w	r2, r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	e007      	b.n	8005e62 <HAL_DMA_Abort_IT+0x2b2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 0201 	bic.w	r2, r2, #1
 8005e60:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a3c      	ldr	r2, [pc, #240]	; (8005f58 <HAL_DMA_Abort_IT+0x3a8>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d072      	beq.n	8005f52 <HAL_DMA_Abort_IT+0x3a2>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a3a      	ldr	r2, [pc, #232]	; (8005f5c <HAL_DMA_Abort_IT+0x3ac>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d06d      	beq.n	8005f52 <HAL_DMA_Abort_IT+0x3a2>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a39      	ldr	r2, [pc, #228]	; (8005f60 <HAL_DMA_Abort_IT+0x3b0>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d068      	beq.n	8005f52 <HAL_DMA_Abort_IT+0x3a2>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a37      	ldr	r2, [pc, #220]	; (8005f64 <HAL_DMA_Abort_IT+0x3b4>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d063      	beq.n	8005f52 <HAL_DMA_Abort_IT+0x3a2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a36      	ldr	r2, [pc, #216]	; (8005f68 <HAL_DMA_Abort_IT+0x3b8>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d05e      	beq.n	8005f52 <HAL_DMA_Abort_IT+0x3a2>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a34      	ldr	r2, [pc, #208]	; (8005f6c <HAL_DMA_Abort_IT+0x3bc>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d059      	beq.n	8005f52 <HAL_DMA_Abort_IT+0x3a2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a33      	ldr	r2, [pc, #204]	; (8005f70 <HAL_DMA_Abort_IT+0x3c0>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d054      	beq.n	8005f52 <HAL_DMA_Abort_IT+0x3a2>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a31      	ldr	r2, [pc, #196]	; (8005f74 <HAL_DMA_Abort_IT+0x3c4>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d04f      	beq.n	8005f52 <HAL_DMA_Abort_IT+0x3a2>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a30      	ldr	r2, [pc, #192]	; (8005f78 <HAL_DMA_Abort_IT+0x3c8>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d04a      	beq.n	8005f52 <HAL_DMA_Abort_IT+0x3a2>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a2e      	ldr	r2, [pc, #184]	; (8005f7c <HAL_DMA_Abort_IT+0x3cc>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d045      	beq.n	8005f52 <HAL_DMA_Abort_IT+0x3a2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a2d      	ldr	r2, [pc, #180]	; (8005f80 <HAL_DMA_Abort_IT+0x3d0>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d040      	beq.n	8005f52 <HAL_DMA_Abort_IT+0x3a2>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a2b      	ldr	r2, [pc, #172]	; (8005f84 <HAL_DMA_Abort_IT+0x3d4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d03b      	beq.n	8005f52 <HAL_DMA_Abort_IT+0x3a2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a2a      	ldr	r2, [pc, #168]	; (8005f88 <HAL_DMA_Abort_IT+0x3d8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d036      	beq.n	8005f52 <HAL_DMA_Abort_IT+0x3a2>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a28      	ldr	r2, [pc, #160]	; (8005f8c <HAL_DMA_Abort_IT+0x3dc>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d031      	beq.n	8005f52 <HAL_DMA_Abort_IT+0x3a2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a27      	ldr	r2, [pc, #156]	; (8005f90 <HAL_DMA_Abort_IT+0x3e0>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d02c      	beq.n	8005f52 <HAL_DMA_Abort_IT+0x3a2>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a25      	ldr	r2, [pc, #148]	; (8005f94 <HAL_DMA_Abort_IT+0x3e4>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d027      	beq.n	8005f52 <HAL_DMA_Abort_IT+0x3a2>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a24      	ldr	r2, [pc, #144]	; (8005f98 <HAL_DMA_Abort_IT+0x3e8>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d022      	beq.n	8005f52 <HAL_DMA_Abort_IT+0x3a2>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a22      	ldr	r2, [pc, #136]	; (8005f9c <HAL_DMA_Abort_IT+0x3ec>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d01d      	beq.n	8005f52 <HAL_DMA_Abort_IT+0x3a2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a21      	ldr	r2, [pc, #132]	; (8005fa0 <HAL_DMA_Abort_IT+0x3f0>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d018      	beq.n	8005f52 <HAL_DMA_Abort_IT+0x3a2>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a1f      	ldr	r2, [pc, #124]	; (8005fa4 <HAL_DMA_Abort_IT+0x3f4>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d013      	beq.n	8005f52 <HAL_DMA_Abort_IT+0x3a2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a1e      	ldr	r2, [pc, #120]	; (8005fa8 <HAL_DMA_Abort_IT+0x3f8>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d00e      	beq.n	8005f52 <HAL_DMA_Abort_IT+0x3a2>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a1c      	ldr	r2, [pc, #112]	; (8005fac <HAL_DMA_Abort_IT+0x3fc>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d009      	beq.n	8005f52 <HAL_DMA_Abort_IT+0x3a2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a1b      	ldr	r2, [pc, #108]	; (8005fb0 <HAL_DMA_Abort_IT+0x400>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d004      	beq.n	8005f52 <HAL_DMA_Abort_IT+0x3a2>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a19      	ldr	r2, [pc, #100]	; (8005fb4 <HAL_DMA_Abort_IT+0x404>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d132      	bne.n	8005fb8 <HAL_DMA_Abort_IT+0x408>
 8005f52:	2301      	movs	r3, #1
 8005f54:	e031      	b.n	8005fba <HAL_DMA_Abort_IT+0x40a>
 8005f56:	bf00      	nop
 8005f58:	40020010 	.word	0x40020010
 8005f5c:	40020028 	.word	0x40020028
 8005f60:	40020040 	.word	0x40020040
 8005f64:	40020058 	.word	0x40020058
 8005f68:	40020070 	.word	0x40020070
 8005f6c:	40020088 	.word	0x40020088
 8005f70:	400200a0 	.word	0x400200a0
 8005f74:	400200b8 	.word	0x400200b8
 8005f78:	40020410 	.word	0x40020410
 8005f7c:	40020428 	.word	0x40020428
 8005f80:	40020440 	.word	0x40020440
 8005f84:	40020458 	.word	0x40020458
 8005f88:	40020470 	.word	0x40020470
 8005f8c:	40020488 	.word	0x40020488
 8005f90:	400204a0 	.word	0x400204a0
 8005f94:	400204b8 	.word	0x400204b8
 8005f98:	58025408 	.word	0x58025408
 8005f9c:	5802541c 	.word	0x5802541c
 8005fa0:	58025430 	.word	0x58025430
 8005fa4:	58025444 	.word	0x58025444
 8005fa8:	58025458 	.word	0x58025458
 8005fac:	5802546c 	.word	0x5802546c
 8005fb0:	58025480 	.word	0x58025480
 8005fb4:	58025494 	.word	0x58025494
 8005fb8:	2300      	movs	r3, #0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d028      	beq.n	8006010 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fcc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fd8:	f003 031f 	and.w	r3, r3, #31
 8005fdc:	2201      	movs	r2, #1
 8005fde:	409a      	lsls	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005fec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00c      	beq.n	8006010 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006000:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006004:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800600e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop

0800603c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b08a      	sub	sp, #40	; 0x28
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006048:	4b67      	ldr	r3, [pc, #412]	; (80061e8 <HAL_DMA_IRQHandler+0x1ac>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a67      	ldr	r2, [pc, #412]	; (80061ec <HAL_DMA_IRQHandler+0x1b0>)
 800604e:	fba2 2303 	umull	r2, r3, r2, r3
 8006052:	0a9b      	lsrs	r3, r3, #10
 8006054:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800605a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006060:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a5f      	ldr	r2, [pc, #380]	; (80061f0 <HAL_DMA_IRQHandler+0x1b4>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d04a      	beq.n	800610e <HAL_DMA_IRQHandler+0xd2>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a5d      	ldr	r2, [pc, #372]	; (80061f4 <HAL_DMA_IRQHandler+0x1b8>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d045      	beq.n	800610e <HAL_DMA_IRQHandler+0xd2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a5c      	ldr	r2, [pc, #368]	; (80061f8 <HAL_DMA_IRQHandler+0x1bc>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d040      	beq.n	800610e <HAL_DMA_IRQHandler+0xd2>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a5a      	ldr	r2, [pc, #360]	; (80061fc <HAL_DMA_IRQHandler+0x1c0>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d03b      	beq.n	800610e <HAL_DMA_IRQHandler+0xd2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a59      	ldr	r2, [pc, #356]	; (8006200 <HAL_DMA_IRQHandler+0x1c4>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d036      	beq.n	800610e <HAL_DMA_IRQHandler+0xd2>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a57      	ldr	r2, [pc, #348]	; (8006204 <HAL_DMA_IRQHandler+0x1c8>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d031      	beq.n	800610e <HAL_DMA_IRQHandler+0xd2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a56      	ldr	r2, [pc, #344]	; (8006208 <HAL_DMA_IRQHandler+0x1cc>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d02c      	beq.n	800610e <HAL_DMA_IRQHandler+0xd2>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a54      	ldr	r2, [pc, #336]	; (800620c <HAL_DMA_IRQHandler+0x1d0>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d027      	beq.n	800610e <HAL_DMA_IRQHandler+0xd2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a53      	ldr	r2, [pc, #332]	; (8006210 <HAL_DMA_IRQHandler+0x1d4>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d022      	beq.n	800610e <HAL_DMA_IRQHandler+0xd2>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a51      	ldr	r2, [pc, #324]	; (8006214 <HAL_DMA_IRQHandler+0x1d8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d01d      	beq.n	800610e <HAL_DMA_IRQHandler+0xd2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a50      	ldr	r2, [pc, #320]	; (8006218 <HAL_DMA_IRQHandler+0x1dc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d018      	beq.n	800610e <HAL_DMA_IRQHandler+0xd2>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a4e      	ldr	r2, [pc, #312]	; (800621c <HAL_DMA_IRQHandler+0x1e0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d013      	beq.n	800610e <HAL_DMA_IRQHandler+0xd2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a4d      	ldr	r2, [pc, #308]	; (8006220 <HAL_DMA_IRQHandler+0x1e4>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d00e      	beq.n	800610e <HAL_DMA_IRQHandler+0xd2>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a4b      	ldr	r2, [pc, #300]	; (8006224 <HAL_DMA_IRQHandler+0x1e8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d009      	beq.n	800610e <HAL_DMA_IRQHandler+0xd2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a4a      	ldr	r2, [pc, #296]	; (8006228 <HAL_DMA_IRQHandler+0x1ec>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d004      	beq.n	800610e <HAL_DMA_IRQHandler+0xd2>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a48      	ldr	r2, [pc, #288]	; (800622c <HAL_DMA_IRQHandler+0x1f0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d101      	bne.n	8006112 <HAL_DMA_IRQHandler+0xd6>
 800610e:	2301      	movs	r3, #1
 8006110:	e000      	b.n	8006114 <HAL_DMA_IRQHandler+0xd8>
 8006112:	2300      	movs	r3, #0
 8006114:	2b00      	cmp	r3, #0
 8006116:	f000 842b 	beq.w	8006970 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800611e:	f003 031f 	and.w	r3, r3, #31
 8006122:	2208      	movs	r2, #8
 8006124:	409a      	lsls	r2, r3
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	4013      	ands	r3, r2
 800612a:	2b00      	cmp	r3, #0
 800612c:	f000 80a2 	beq.w	8006274 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a2e      	ldr	r2, [pc, #184]	; (80061f0 <HAL_DMA_IRQHandler+0x1b4>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d04a      	beq.n	80061d0 <HAL_DMA_IRQHandler+0x194>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a2d      	ldr	r2, [pc, #180]	; (80061f4 <HAL_DMA_IRQHandler+0x1b8>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d045      	beq.n	80061d0 <HAL_DMA_IRQHandler+0x194>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a2b      	ldr	r2, [pc, #172]	; (80061f8 <HAL_DMA_IRQHandler+0x1bc>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d040      	beq.n	80061d0 <HAL_DMA_IRQHandler+0x194>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a2a      	ldr	r2, [pc, #168]	; (80061fc <HAL_DMA_IRQHandler+0x1c0>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d03b      	beq.n	80061d0 <HAL_DMA_IRQHandler+0x194>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a28      	ldr	r2, [pc, #160]	; (8006200 <HAL_DMA_IRQHandler+0x1c4>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d036      	beq.n	80061d0 <HAL_DMA_IRQHandler+0x194>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a27      	ldr	r2, [pc, #156]	; (8006204 <HAL_DMA_IRQHandler+0x1c8>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d031      	beq.n	80061d0 <HAL_DMA_IRQHandler+0x194>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a25      	ldr	r2, [pc, #148]	; (8006208 <HAL_DMA_IRQHandler+0x1cc>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d02c      	beq.n	80061d0 <HAL_DMA_IRQHandler+0x194>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a24      	ldr	r2, [pc, #144]	; (800620c <HAL_DMA_IRQHandler+0x1d0>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d027      	beq.n	80061d0 <HAL_DMA_IRQHandler+0x194>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a22      	ldr	r2, [pc, #136]	; (8006210 <HAL_DMA_IRQHandler+0x1d4>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d022      	beq.n	80061d0 <HAL_DMA_IRQHandler+0x194>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a21      	ldr	r2, [pc, #132]	; (8006214 <HAL_DMA_IRQHandler+0x1d8>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d01d      	beq.n	80061d0 <HAL_DMA_IRQHandler+0x194>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a1f      	ldr	r2, [pc, #124]	; (8006218 <HAL_DMA_IRQHandler+0x1dc>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d018      	beq.n	80061d0 <HAL_DMA_IRQHandler+0x194>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a1e      	ldr	r2, [pc, #120]	; (800621c <HAL_DMA_IRQHandler+0x1e0>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d013      	beq.n	80061d0 <HAL_DMA_IRQHandler+0x194>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a1c      	ldr	r2, [pc, #112]	; (8006220 <HAL_DMA_IRQHandler+0x1e4>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d00e      	beq.n	80061d0 <HAL_DMA_IRQHandler+0x194>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a1b      	ldr	r2, [pc, #108]	; (8006224 <HAL_DMA_IRQHandler+0x1e8>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d009      	beq.n	80061d0 <HAL_DMA_IRQHandler+0x194>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a19      	ldr	r2, [pc, #100]	; (8006228 <HAL_DMA_IRQHandler+0x1ec>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d004      	beq.n	80061d0 <HAL_DMA_IRQHandler+0x194>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a18      	ldr	r2, [pc, #96]	; (800622c <HAL_DMA_IRQHandler+0x1f0>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d12f      	bne.n	8006230 <HAL_DMA_IRQHandler+0x1f4>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0304 	and.w	r3, r3, #4
 80061da:	2b00      	cmp	r3, #0
 80061dc:	bf14      	ite	ne
 80061de:	2301      	movne	r3, #1
 80061e0:	2300      	moveq	r3, #0
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	e02e      	b.n	8006244 <HAL_DMA_IRQHandler+0x208>
 80061e6:	bf00      	nop
 80061e8:	24000020 	.word	0x24000020
 80061ec:	1b4e81b5 	.word	0x1b4e81b5
 80061f0:	40020010 	.word	0x40020010
 80061f4:	40020028 	.word	0x40020028
 80061f8:	40020040 	.word	0x40020040
 80061fc:	40020058 	.word	0x40020058
 8006200:	40020070 	.word	0x40020070
 8006204:	40020088 	.word	0x40020088
 8006208:	400200a0 	.word	0x400200a0
 800620c:	400200b8 	.word	0x400200b8
 8006210:	40020410 	.word	0x40020410
 8006214:	40020428 	.word	0x40020428
 8006218:	40020440 	.word	0x40020440
 800621c:	40020458 	.word	0x40020458
 8006220:	40020470 	.word	0x40020470
 8006224:	40020488 	.word	0x40020488
 8006228:	400204a0 	.word	0x400204a0
 800622c:	400204b8 	.word	0x400204b8
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0308 	and.w	r3, r3, #8
 800623a:	2b00      	cmp	r3, #0
 800623c:	bf14      	ite	ne
 800623e:	2301      	movne	r3, #1
 8006240:	2300      	moveq	r3, #0
 8006242:	b2db      	uxtb	r3, r3
 8006244:	2b00      	cmp	r3, #0
 8006246:	d015      	beq.n	8006274 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 0204 	bic.w	r2, r2, #4
 8006256:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800625c:	f003 031f 	and.w	r3, r3, #31
 8006260:	2208      	movs	r2, #8
 8006262:	409a      	lsls	r2, r3
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626c:	f043 0201 	orr.w	r2, r3, #1
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006278:	f003 031f 	and.w	r3, r3, #31
 800627c:	69ba      	ldr	r2, [r7, #24]
 800627e:	fa22 f303 	lsr.w	r3, r2, r3
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d06e      	beq.n	8006368 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a69      	ldr	r2, [pc, #420]	; (8006434 <HAL_DMA_IRQHandler+0x3f8>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d04a      	beq.n	800632a <HAL_DMA_IRQHandler+0x2ee>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a67      	ldr	r2, [pc, #412]	; (8006438 <HAL_DMA_IRQHandler+0x3fc>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d045      	beq.n	800632a <HAL_DMA_IRQHandler+0x2ee>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a66      	ldr	r2, [pc, #408]	; (800643c <HAL_DMA_IRQHandler+0x400>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d040      	beq.n	800632a <HAL_DMA_IRQHandler+0x2ee>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a64      	ldr	r2, [pc, #400]	; (8006440 <HAL_DMA_IRQHandler+0x404>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d03b      	beq.n	800632a <HAL_DMA_IRQHandler+0x2ee>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a63      	ldr	r2, [pc, #396]	; (8006444 <HAL_DMA_IRQHandler+0x408>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d036      	beq.n	800632a <HAL_DMA_IRQHandler+0x2ee>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a61      	ldr	r2, [pc, #388]	; (8006448 <HAL_DMA_IRQHandler+0x40c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d031      	beq.n	800632a <HAL_DMA_IRQHandler+0x2ee>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a60      	ldr	r2, [pc, #384]	; (800644c <HAL_DMA_IRQHandler+0x410>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d02c      	beq.n	800632a <HAL_DMA_IRQHandler+0x2ee>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a5e      	ldr	r2, [pc, #376]	; (8006450 <HAL_DMA_IRQHandler+0x414>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d027      	beq.n	800632a <HAL_DMA_IRQHandler+0x2ee>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a5d      	ldr	r2, [pc, #372]	; (8006454 <HAL_DMA_IRQHandler+0x418>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d022      	beq.n	800632a <HAL_DMA_IRQHandler+0x2ee>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a5b      	ldr	r2, [pc, #364]	; (8006458 <HAL_DMA_IRQHandler+0x41c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d01d      	beq.n	800632a <HAL_DMA_IRQHandler+0x2ee>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a5a      	ldr	r2, [pc, #360]	; (800645c <HAL_DMA_IRQHandler+0x420>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d018      	beq.n	800632a <HAL_DMA_IRQHandler+0x2ee>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a58      	ldr	r2, [pc, #352]	; (8006460 <HAL_DMA_IRQHandler+0x424>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d013      	beq.n	800632a <HAL_DMA_IRQHandler+0x2ee>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a57      	ldr	r2, [pc, #348]	; (8006464 <HAL_DMA_IRQHandler+0x428>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d00e      	beq.n	800632a <HAL_DMA_IRQHandler+0x2ee>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a55      	ldr	r2, [pc, #340]	; (8006468 <HAL_DMA_IRQHandler+0x42c>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d009      	beq.n	800632a <HAL_DMA_IRQHandler+0x2ee>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a54      	ldr	r2, [pc, #336]	; (800646c <HAL_DMA_IRQHandler+0x430>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d004      	beq.n	800632a <HAL_DMA_IRQHandler+0x2ee>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a52      	ldr	r2, [pc, #328]	; (8006470 <HAL_DMA_IRQHandler+0x434>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d10a      	bne.n	8006340 <HAL_DMA_IRQHandler+0x304>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006334:	2b00      	cmp	r3, #0
 8006336:	bf14      	ite	ne
 8006338:	2301      	movne	r3, #1
 800633a:	2300      	moveq	r3, #0
 800633c:	b2db      	uxtb	r3, r3
 800633e:	e003      	b.n	8006348 <HAL_DMA_IRQHandler+0x30c>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2300      	movs	r3, #0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00d      	beq.n	8006368 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006350:	f003 031f 	and.w	r3, r3, #31
 8006354:	2201      	movs	r2, #1
 8006356:	409a      	lsls	r2, r3
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006360:	f043 0202 	orr.w	r2, r3, #2
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800636c:	f003 031f 	and.w	r3, r3, #31
 8006370:	2204      	movs	r2, #4
 8006372:	409a      	lsls	r2, r3
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	4013      	ands	r3, r2
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 808f 	beq.w	800649c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a2c      	ldr	r2, [pc, #176]	; (8006434 <HAL_DMA_IRQHandler+0x3f8>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d04a      	beq.n	800641e <HAL_DMA_IRQHandler+0x3e2>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a2a      	ldr	r2, [pc, #168]	; (8006438 <HAL_DMA_IRQHandler+0x3fc>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d045      	beq.n	800641e <HAL_DMA_IRQHandler+0x3e2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a29      	ldr	r2, [pc, #164]	; (800643c <HAL_DMA_IRQHandler+0x400>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d040      	beq.n	800641e <HAL_DMA_IRQHandler+0x3e2>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a27      	ldr	r2, [pc, #156]	; (8006440 <HAL_DMA_IRQHandler+0x404>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d03b      	beq.n	800641e <HAL_DMA_IRQHandler+0x3e2>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a26      	ldr	r2, [pc, #152]	; (8006444 <HAL_DMA_IRQHandler+0x408>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d036      	beq.n	800641e <HAL_DMA_IRQHandler+0x3e2>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a24      	ldr	r2, [pc, #144]	; (8006448 <HAL_DMA_IRQHandler+0x40c>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d031      	beq.n	800641e <HAL_DMA_IRQHandler+0x3e2>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a23      	ldr	r2, [pc, #140]	; (800644c <HAL_DMA_IRQHandler+0x410>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d02c      	beq.n	800641e <HAL_DMA_IRQHandler+0x3e2>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a21      	ldr	r2, [pc, #132]	; (8006450 <HAL_DMA_IRQHandler+0x414>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d027      	beq.n	800641e <HAL_DMA_IRQHandler+0x3e2>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a20      	ldr	r2, [pc, #128]	; (8006454 <HAL_DMA_IRQHandler+0x418>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d022      	beq.n	800641e <HAL_DMA_IRQHandler+0x3e2>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a1e      	ldr	r2, [pc, #120]	; (8006458 <HAL_DMA_IRQHandler+0x41c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d01d      	beq.n	800641e <HAL_DMA_IRQHandler+0x3e2>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a1d      	ldr	r2, [pc, #116]	; (800645c <HAL_DMA_IRQHandler+0x420>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d018      	beq.n	800641e <HAL_DMA_IRQHandler+0x3e2>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a1b      	ldr	r2, [pc, #108]	; (8006460 <HAL_DMA_IRQHandler+0x424>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d013      	beq.n	800641e <HAL_DMA_IRQHandler+0x3e2>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a1a      	ldr	r2, [pc, #104]	; (8006464 <HAL_DMA_IRQHandler+0x428>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d00e      	beq.n	800641e <HAL_DMA_IRQHandler+0x3e2>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a18      	ldr	r2, [pc, #96]	; (8006468 <HAL_DMA_IRQHandler+0x42c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d009      	beq.n	800641e <HAL_DMA_IRQHandler+0x3e2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a17      	ldr	r2, [pc, #92]	; (800646c <HAL_DMA_IRQHandler+0x430>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d004      	beq.n	800641e <HAL_DMA_IRQHandler+0x3e2>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a15      	ldr	r2, [pc, #84]	; (8006470 <HAL_DMA_IRQHandler+0x434>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d12a      	bne.n	8006474 <HAL_DMA_IRQHandler+0x438>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0302 	and.w	r3, r3, #2
 8006428:	2b00      	cmp	r3, #0
 800642a:	bf14      	ite	ne
 800642c:	2301      	movne	r3, #1
 800642e:	2300      	moveq	r3, #0
 8006430:	b2db      	uxtb	r3, r3
 8006432:	e023      	b.n	800647c <HAL_DMA_IRQHandler+0x440>
 8006434:	40020010 	.word	0x40020010
 8006438:	40020028 	.word	0x40020028
 800643c:	40020040 	.word	0x40020040
 8006440:	40020058 	.word	0x40020058
 8006444:	40020070 	.word	0x40020070
 8006448:	40020088 	.word	0x40020088
 800644c:	400200a0 	.word	0x400200a0
 8006450:	400200b8 	.word	0x400200b8
 8006454:	40020410 	.word	0x40020410
 8006458:	40020428 	.word	0x40020428
 800645c:	40020440 	.word	0x40020440
 8006460:	40020458 	.word	0x40020458
 8006464:	40020470 	.word	0x40020470
 8006468:	40020488 	.word	0x40020488
 800646c:	400204a0 	.word	0x400204a0
 8006470:	400204b8 	.word	0x400204b8
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2300      	movs	r3, #0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00d      	beq.n	800649c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006484:	f003 031f 	and.w	r3, r3, #31
 8006488:	2204      	movs	r2, #4
 800648a:	409a      	lsls	r2, r3
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006494:	f043 0204 	orr.w	r2, r3, #4
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a0:	f003 031f 	and.w	r3, r3, #31
 80064a4:	2210      	movs	r2, #16
 80064a6:	409a      	lsls	r2, r3
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	4013      	ands	r3, r2
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 80a6 	beq.w	80065fe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a85      	ldr	r2, [pc, #532]	; (80066cc <HAL_DMA_IRQHandler+0x690>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d04a      	beq.n	8006552 <HAL_DMA_IRQHandler+0x516>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a83      	ldr	r2, [pc, #524]	; (80066d0 <HAL_DMA_IRQHandler+0x694>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d045      	beq.n	8006552 <HAL_DMA_IRQHandler+0x516>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a82      	ldr	r2, [pc, #520]	; (80066d4 <HAL_DMA_IRQHandler+0x698>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d040      	beq.n	8006552 <HAL_DMA_IRQHandler+0x516>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a80      	ldr	r2, [pc, #512]	; (80066d8 <HAL_DMA_IRQHandler+0x69c>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d03b      	beq.n	8006552 <HAL_DMA_IRQHandler+0x516>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a7f      	ldr	r2, [pc, #508]	; (80066dc <HAL_DMA_IRQHandler+0x6a0>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d036      	beq.n	8006552 <HAL_DMA_IRQHandler+0x516>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a7d      	ldr	r2, [pc, #500]	; (80066e0 <HAL_DMA_IRQHandler+0x6a4>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d031      	beq.n	8006552 <HAL_DMA_IRQHandler+0x516>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a7c      	ldr	r2, [pc, #496]	; (80066e4 <HAL_DMA_IRQHandler+0x6a8>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d02c      	beq.n	8006552 <HAL_DMA_IRQHandler+0x516>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a7a      	ldr	r2, [pc, #488]	; (80066e8 <HAL_DMA_IRQHandler+0x6ac>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d027      	beq.n	8006552 <HAL_DMA_IRQHandler+0x516>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a79      	ldr	r2, [pc, #484]	; (80066ec <HAL_DMA_IRQHandler+0x6b0>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d022      	beq.n	8006552 <HAL_DMA_IRQHandler+0x516>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a77      	ldr	r2, [pc, #476]	; (80066f0 <HAL_DMA_IRQHandler+0x6b4>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d01d      	beq.n	8006552 <HAL_DMA_IRQHandler+0x516>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a76      	ldr	r2, [pc, #472]	; (80066f4 <HAL_DMA_IRQHandler+0x6b8>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d018      	beq.n	8006552 <HAL_DMA_IRQHandler+0x516>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a74      	ldr	r2, [pc, #464]	; (80066f8 <HAL_DMA_IRQHandler+0x6bc>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d013      	beq.n	8006552 <HAL_DMA_IRQHandler+0x516>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a73      	ldr	r2, [pc, #460]	; (80066fc <HAL_DMA_IRQHandler+0x6c0>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d00e      	beq.n	8006552 <HAL_DMA_IRQHandler+0x516>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a71      	ldr	r2, [pc, #452]	; (8006700 <HAL_DMA_IRQHandler+0x6c4>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d009      	beq.n	8006552 <HAL_DMA_IRQHandler+0x516>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a70      	ldr	r2, [pc, #448]	; (8006704 <HAL_DMA_IRQHandler+0x6c8>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d004      	beq.n	8006552 <HAL_DMA_IRQHandler+0x516>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a6e      	ldr	r2, [pc, #440]	; (8006708 <HAL_DMA_IRQHandler+0x6cc>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d10a      	bne.n	8006568 <HAL_DMA_IRQHandler+0x52c>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0308 	and.w	r3, r3, #8
 800655c:	2b00      	cmp	r3, #0
 800655e:	bf14      	ite	ne
 8006560:	2301      	movne	r3, #1
 8006562:	2300      	moveq	r3, #0
 8006564:	b2db      	uxtb	r3, r3
 8006566:	e009      	b.n	800657c <HAL_DMA_IRQHandler+0x540>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0304 	and.w	r3, r3, #4
 8006572:	2b00      	cmp	r3, #0
 8006574:	bf14      	ite	ne
 8006576:	2301      	movne	r3, #1
 8006578:	2300      	moveq	r3, #0
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d03e      	beq.n	80065fe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006584:	f003 031f 	and.w	r3, r3, #31
 8006588:	2210      	movs	r2, #16
 800658a:	409a      	lsls	r2, r3
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d018      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d108      	bne.n	80065be <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d024      	beq.n	80065fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	4798      	blx	r3
 80065bc:	e01f      	b.n	80065fe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d01b      	beq.n	80065fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	4798      	blx	r3
 80065ce:	e016      	b.n	80065fe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d107      	bne.n	80065ee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 0208 	bic.w	r2, r2, #8
 80065ec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006602:	f003 031f 	and.w	r3, r3, #31
 8006606:	2220      	movs	r2, #32
 8006608:	409a      	lsls	r2, r3
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	4013      	ands	r3, r2
 800660e:	2b00      	cmp	r3, #0
 8006610:	f000 8110 	beq.w	8006834 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a2c      	ldr	r2, [pc, #176]	; (80066cc <HAL_DMA_IRQHandler+0x690>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d04a      	beq.n	80066b4 <HAL_DMA_IRQHandler+0x678>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a2b      	ldr	r2, [pc, #172]	; (80066d0 <HAL_DMA_IRQHandler+0x694>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d045      	beq.n	80066b4 <HAL_DMA_IRQHandler+0x678>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a29      	ldr	r2, [pc, #164]	; (80066d4 <HAL_DMA_IRQHandler+0x698>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d040      	beq.n	80066b4 <HAL_DMA_IRQHandler+0x678>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a28      	ldr	r2, [pc, #160]	; (80066d8 <HAL_DMA_IRQHandler+0x69c>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d03b      	beq.n	80066b4 <HAL_DMA_IRQHandler+0x678>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a26      	ldr	r2, [pc, #152]	; (80066dc <HAL_DMA_IRQHandler+0x6a0>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d036      	beq.n	80066b4 <HAL_DMA_IRQHandler+0x678>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a25      	ldr	r2, [pc, #148]	; (80066e0 <HAL_DMA_IRQHandler+0x6a4>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d031      	beq.n	80066b4 <HAL_DMA_IRQHandler+0x678>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a23      	ldr	r2, [pc, #140]	; (80066e4 <HAL_DMA_IRQHandler+0x6a8>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d02c      	beq.n	80066b4 <HAL_DMA_IRQHandler+0x678>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a22      	ldr	r2, [pc, #136]	; (80066e8 <HAL_DMA_IRQHandler+0x6ac>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d027      	beq.n	80066b4 <HAL_DMA_IRQHandler+0x678>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a20      	ldr	r2, [pc, #128]	; (80066ec <HAL_DMA_IRQHandler+0x6b0>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d022      	beq.n	80066b4 <HAL_DMA_IRQHandler+0x678>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a1f      	ldr	r2, [pc, #124]	; (80066f0 <HAL_DMA_IRQHandler+0x6b4>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d01d      	beq.n	80066b4 <HAL_DMA_IRQHandler+0x678>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a1d      	ldr	r2, [pc, #116]	; (80066f4 <HAL_DMA_IRQHandler+0x6b8>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d018      	beq.n	80066b4 <HAL_DMA_IRQHandler+0x678>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a1c      	ldr	r2, [pc, #112]	; (80066f8 <HAL_DMA_IRQHandler+0x6bc>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d013      	beq.n	80066b4 <HAL_DMA_IRQHandler+0x678>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a1a      	ldr	r2, [pc, #104]	; (80066fc <HAL_DMA_IRQHandler+0x6c0>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d00e      	beq.n	80066b4 <HAL_DMA_IRQHandler+0x678>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a19      	ldr	r2, [pc, #100]	; (8006700 <HAL_DMA_IRQHandler+0x6c4>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d009      	beq.n	80066b4 <HAL_DMA_IRQHandler+0x678>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a17      	ldr	r2, [pc, #92]	; (8006704 <HAL_DMA_IRQHandler+0x6c8>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d004      	beq.n	80066b4 <HAL_DMA_IRQHandler+0x678>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a16      	ldr	r2, [pc, #88]	; (8006708 <HAL_DMA_IRQHandler+0x6cc>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d12b      	bne.n	800670c <HAL_DMA_IRQHandler+0x6d0>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0310 	and.w	r3, r3, #16
 80066be:	2b00      	cmp	r3, #0
 80066c0:	bf14      	ite	ne
 80066c2:	2301      	movne	r3, #1
 80066c4:	2300      	moveq	r3, #0
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	e02a      	b.n	8006720 <HAL_DMA_IRQHandler+0x6e4>
 80066ca:	bf00      	nop
 80066cc:	40020010 	.word	0x40020010
 80066d0:	40020028 	.word	0x40020028
 80066d4:	40020040 	.word	0x40020040
 80066d8:	40020058 	.word	0x40020058
 80066dc:	40020070 	.word	0x40020070
 80066e0:	40020088 	.word	0x40020088
 80066e4:	400200a0 	.word	0x400200a0
 80066e8:	400200b8 	.word	0x400200b8
 80066ec:	40020410 	.word	0x40020410
 80066f0:	40020428 	.word	0x40020428
 80066f4:	40020440 	.word	0x40020440
 80066f8:	40020458 	.word	0x40020458
 80066fc:	40020470 	.word	0x40020470
 8006700:	40020488 	.word	0x40020488
 8006704:	400204a0 	.word	0x400204a0
 8006708:	400204b8 	.word	0x400204b8
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	2b00      	cmp	r3, #0
 8006718:	bf14      	ite	ne
 800671a:	2301      	movne	r3, #1
 800671c:	2300      	moveq	r3, #0
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 8087 	beq.w	8006834 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800672a:	f003 031f 	and.w	r3, r3, #31
 800672e:	2220      	movs	r2, #32
 8006730:	409a      	lsls	r2, r3
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b04      	cmp	r3, #4
 8006740:	d139      	bne.n	80067b6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f022 0216 	bic.w	r2, r2, #22
 8006750:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	695a      	ldr	r2, [r3, #20]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006760:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	2b00      	cmp	r3, #0
 8006768:	d103      	bne.n	8006772 <HAL_DMA_IRQHandler+0x736>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800676e:	2b00      	cmp	r3, #0
 8006770:	d007      	beq.n	8006782 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f022 0208 	bic.w	r2, r2, #8
 8006780:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006786:	f003 031f 	and.w	r3, r3, #31
 800678a:	223f      	movs	r2, #63	; 0x3f
 800678c:	409a      	lsls	r2, r3
 800678e:	6a3b      	ldr	r3, [r7, #32]
 8006790:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f000 834a 	beq.w	8006e40 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	4798      	blx	r3
          }
          return;
 80067b4:	e344      	b.n	8006e40 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d018      	beq.n	80067f6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d108      	bne.n	80067e4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d02c      	beq.n	8006834 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	4798      	blx	r3
 80067e2:	e027      	b.n	8006834 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d023      	beq.n	8006834 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	4798      	blx	r3
 80067f4:	e01e      	b.n	8006834 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10f      	bne.n	8006824 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 0210 	bic.w	r2, r2, #16
 8006812:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006838:	2b00      	cmp	r3, #0
 800683a:	f000 8306 	beq.w	8006e4a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 8088 	beq.w	800695c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2204      	movs	r2, #4
 8006850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a7a      	ldr	r2, [pc, #488]	; (8006a44 <HAL_DMA_IRQHandler+0xa08>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d04a      	beq.n	80068f4 <HAL_DMA_IRQHandler+0x8b8>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a79      	ldr	r2, [pc, #484]	; (8006a48 <HAL_DMA_IRQHandler+0xa0c>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d045      	beq.n	80068f4 <HAL_DMA_IRQHandler+0x8b8>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a77      	ldr	r2, [pc, #476]	; (8006a4c <HAL_DMA_IRQHandler+0xa10>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d040      	beq.n	80068f4 <HAL_DMA_IRQHandler+0x8b8>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a76      	ldr	r2, [pc, #472]	; (8006a50 <HAL_DMA_IRQHandler+0xa14>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d03b      	beq.n	80068f4 <HAL_DMA_IRQHandler+0x8b8>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a74      	ldr	r2, [pc, #464]	; (8006a54 <HAL_DMA_IRQHandler+0xa18>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d036      	beq.n	80068f4 <HAL_DMA_IRQHandler+0x8b8>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a73      	ldr	r2, [pc, #460]	; (8006a58 <HAL_DMA_IRQHandler+0xa1c>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d031      	beq.n	80068f4 <HAL_DMA_IRQHandler+0x8b8>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a71      	ldr	r2, [pc, #452]	; (8006a5c <HAL_DMA_IRQHandler+0xa20>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d02c      	beq.n	80068f4 <HAL_DMA_IRQHandler+0x8b8>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a70      	ldr	r2, [pc, #448]	; (8006a60 <HAL_DMA_IRQHandler+0xa24>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d027      	beq.n	80068f4 <HAL_DMA_IRQHandler+0x8b8>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a6e      	ldr	r2, [pc, #440]	; (8006a64 <HAL_DMA_IRQHandler+0xa28>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d022      	beq.n	80068f4 <HAL_DMA_IRQHandler+0x8b8>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a6d      	ldr	r2, [pc, #436]	; (8006a68 <HAL_DMA_IRQHandler+0xa2c>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d01d      	beq.n	80068f4 <HAL_DMA_IRQHandler+0x8b8>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a6b      	ldr	r2, [pc, #428]	; (8006a6c <HAL_DMA_IRQHandler+0xa30>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d018      	beq.n	80068f4 <HAL_DMA_IRQHandler+0x8b8>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a6a      	ldr	r2, [pc, #424]	; (8006a70 <HAL_DMA_IRQHandler+0xa34>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d013      	beq.n	80068f4 <HAL_DMA_IRQHandler+0x8b8>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a68      	ldr	r2, [pc, #416]	; (8006a74 <HAL_DMA_IRQHandler+0xa38>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d00e      	beq.n	80068f4 <HAL_DMA_IRQHandler+0x8b8>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a67      	ldr	r2, [pc, #412]	; (8006a78 <HAL_DMA_IRQHandler+0xa3c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d009      	beq.n	80068f4 <HAL_DMA_IRQHandler+0x8b8>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a65      	ldr	r2, [pc, #404]	; (8006a7c <HAL_DMA_IRQHandler+0xa40>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d004      	beq.n	80068f4 <HAL_DMA_IRQHandler+0x8b8>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a64      	ldr	r2, [pc, #400]	; (8006a80 <HAL_DMA_IRQHandler+0xa44>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d108      	bne.n	8006906 <HAL_DMA_IRQHandler+0x8ca>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 0201 	bic.w	r2, r2, #1
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	e007      	b.n	8006916 <HAL_DMA_IRQHandler+0x8da>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 0201 	bic.w	r2, r2, #1
 8006914:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	3301      	adds	r3, #1
 800691a:	60fb      	str	r3, [r7, #12]
 800691c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800691e:	429a      	cmp	r2, r3
 8006920:	d307      	bcc.n	8006932 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1f2      	bne.n	8006916 <HAL_DMA_IRQHandler+0x8da>
 8006930:	e000      	b.n	8006934 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006932:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d004      	beq.n	800694c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2203      	movs	r2, #3
 8006946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800694a:	e003      	b.n	8006954 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 8272 	beq.w	8006e4a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	4798      	blx	r3
 800696e:	e26c      	b.n	8006e4a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a43      	ldr	r2, [pc, #268]	; (8006a84 <HAL_DMA_IRQHandler+0xa48>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d022      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x984>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a42      	ldr	r2, [pc, #264]	; (8006a88 <HAL_DMA_IRQHandler+0xa4c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d01d      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x984>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a40      	ldr	r2, [pc, #256]	; (8006a8c <HAL_DMA_IRQHandler+0xa50>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d018      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x984>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a3f      	ldr	r2, [pc, #252]	; (8006a90 <HAL_DMA_IRQHandler+0xa54>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d013      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x984>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a3d      	ldr	r2, [pc, #244]	; (8006a94 <HAL_DMA_IRQHandler+0xa58>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d00e      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x984>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a3c      	ldr	r2, [pc, #240]	; (8006a98 <HAL_DMA_IRQHandler+0xa5c>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d009      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x984>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a3a      	ldr	r2, [pc, #232]	; (8006a9c <HAL_DMA_IRQHandler+0xa60>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d004      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x984>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a39      	ldr	r2, [pc, #228]	; (8006aa0 <HAL_DMA_IRQHandler+0xa64>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d101      	bne.n	80069c4 <HAL_DMA_IRQHandler+0x988>
 80069c0:	2301      	movs	r3, #1
 80069c2:	e000      	b.n	80069c6 <HAL_DMA_IRQHandler+0x98a>
 80069c4:	2300      	movs	r3, #0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 823f 	beq.w	8006e4a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d8:	f003 031f 	and.w	r3, r3, #31
 80069dc:	2204      	movs	r2, #4
 80069de:	409a      	lsls	r2, r3
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	4013      	ands	r3, r2
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 80cd 	beq.w	8006b84 <HAL_DMA_IRQHandler+0xb48>
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	f003 0304 	and.w	r3, r3, #4
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 80c7 	beq.w	8006b84 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069fa:	f003 031f 	and.w	r3, r3, #31
 80069fe:	2204      	movs	r2, #4
 8006a00:	409a      	lsls	r2, r3
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d049      	beq.n	8006aa4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d109      	bne.n	8006a2e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 8210 	beq.w	8006e44 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a2c:	e20a      	b.n	8006e44 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 8206 	beq.w	8006e44 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a40:	e200      	b.n	8006e44 <HAL_DMA_IRQHandler+0xe08>
 8006a42:	bf00      	nop
 8006a44:	40020010 	.word	0x40020010
 8006a48:	40020028 	.word	0x40020028
 8006a4c:	40020040 	.word	0x40020040
 8006a50:	40020058 	.word	0x40020058
 8006a54:	40020070 	.word	0x40020070
 8006a58:	40020088 	.word	0x40020088
 8006a5c:	400200a0 	.word	0x400200a0
 8006a60:	400200b8 	.word	0x400200b8
 8006a64:	40020410 	.word	0x40020410
 8006a68:	40020428 	.word	0x40020428
 8006a6c:	40020440 	.word	0x40020440
 8006a70:	40020458 	.word	0x40020458
 8006a74:	40020470 	.word	0x40020470
 8006a78:	40020488 	.word	0x40020488
 8006a7c:	400204a0 	.word	0x400204a0
 8006a80:	400204b8 	.word	0x400204b8
 8006a84:	58025408 	.word	0x58025408
 8006a88:	5802541c 	.word	0x5802541c
 8006a8c:	58025430 	.word	0x58025430
 8006a90:	58025444 	.word	0x58025444
 8006a94:	58025458 	.word	0x58025458
 8006a98:	5802546c 	.word	0x5802546c
 8006a9c:	58025480 	.word	0x58025480
 8006aa0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f003 0320 	and.w	r3, r3, #32
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d160      	bne.n	8006b70 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a7f      	ldr	r2, [pc, #508]	; (8006cb0 <HAL_DMA_IRQHandler+0xc74>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d04a      	beq.n	8006b4e <HAL_DMA_IRQHandler+0xb12>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a7d      	ldr	r2, [pc, #500]	; (8006cb4 <HAL_DMA_IRQHandler+0xc78>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d045      	beq.n	8006b4e <HAL_DMA_IRQHandler+0xb12>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a7c      	ldr	r2, [pc, #496]	; (8006cb8 <HAL_DMA_IRQHandler+0xc7c>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d040      	beq.n	8006b4e <HAL_DMA_IRQHandler+0xb12>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a7a      	ldr	r2, [pc, #488]	; (8006cbc <HAL_DMA_IRQHandler+0xc80>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d03b      	beq.n	8006b4e <HAL_DMA_IRQHandler+0xb12>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a79      	ldr	r2, [pc, #484]	; (8006cc0 <HAL_DMA_IRQHandler+0xc84>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d036      	beq.n	8006b4e <HAL_DMA_IRQHandler+0xb12>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a77      	ldr	r2, [pc, #476]	; (8006cc4 <HAL_DMA_IRQHandler+0xc88>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d031      	beq.n	8006b4e <HAL_DMA_IRQHandler+0xb12>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a76      	ldr	r2, [pc, #472]	; (8006cc8 <HAL_DMA_IRQHandler+0xc8c>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d02c      	beq.n	8006b4e <HAL_DMA_IRQHandler+0xb12>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a74      	ldr	r2, [pc, #464]	; (8006ccc <HAL_DMA_IRQHandler+0xc90>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d027      	beq.n	8006b4e <HAL_DMA_IRQHandler+0xb12>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a73      	ldr	r2, [pc, #460]	; (8006cd0 <HAL_DMA_IRQHandler+0xc94>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d022      	beq.n	8006b4e <HAL_DMA_IRQHandler+0xb12>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a71      	ldr	r2, [pc, #452]	; (8006cd4 <HAL_DMA_IRQHandler+0xc98>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d01d      	beq.n	8006b4e <HAL_DMA_IRQHandler+0xb12>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a70      	ldr	r2, [pc, #448]	; (8006cd8 <HAL_DMA_IRQHandler+0xc9c>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d018      	beq.n	8006b4e <HAL_DMA_IRQHandler+0xb12>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a6e      	ldr	r2, [pc, #440]	; (8006cdc <HAL_DMA_IRQHandler+0xca0>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d013      	beq.n	8006b4e <HAL_DMA_IRQHandler+0xb12>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a6d      	ldr	r2, [pc, #436]	; (8006ce0 <HAL_DMA_IRQHandler+0xca4>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d00e      	beq.n	8006b4e <HAL_DMA_IRQHandler+0xb12>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a6b      	ldr	r2, [pc, #428]	; (8006ce4 <HAL_DMA_IRQHandler+0xca8>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d009      	beq.n	8006b4e <HAL_DMA_IRQHandler+0xb12>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a6a      	ldr	r2, [pc, #424]	; (8006ce8 <HAL_DMA_IRQHandler+0xcac>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d004      	beq.n	8006b4e <HAL_DMA_IRQHandler+0xb12>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a68      	ldr	r2, [pc, #416]	; (8006cec <HAL_DMA_IRQHandler+0xcb0>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d108      	bne.n	8006b60 <HAL_DMA_IRQHandler+0xb24>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f022 0208 	bic.w	r2, r2, #8
 8006b5c:	601a      	str	r2, [r3, #0]
 8006b5e:	e007      	b.n	8006b70 <HAL_DMA_IRQHandler+0xb34>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 0204 	bic.w	r2, r2, #4
 8006b6e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 8165 	beq.w	8006e44 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b82:	e15f      	b.n	8006e44 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b88:	f003 031f 	and.w	r3, r3, #31
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	409a      	lsls	r2, r3
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	4013      	ands	r3, r2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 80c5 	beq.w	8006d24 <HAL_DMA_IRQHandler+0xce8>
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 80bf 	beq.w	8006d24 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006baa:	f003 031f 	and.w	r3, r3, #31
 8006bae:	2202      	movs	r2, #2
 8006bb0:	409a      	lsls	r2, r3
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d018      	beq.n	8006bf2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d109      	bne.n	8006bde <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 813a 	beq.w	8006e48 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bdc:	e134      	b.n	8006e48 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 8130 	beq.w	8006e48 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bf0:	e12a      	b.n	8006e48 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	f003 0320 	and.w	r3, r3, #32
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f040 8089 	bne.w	8006d10 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a2b      	ldr	r2, [pc, #172]	; (8006cb0 <HAL_DMA_IRQHandler+0xc74>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d04a      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xc62>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a29      	ldr	r2, [pc, #164]	; (8006cb4 <HAL_DMA_IRQHandler+0xc78>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d045      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xc62>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a28      	ldr	r2, [pc, #160]	; (8006cb8 <HAL_DMA_IRQHandler+0xc7c>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d040      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xc62>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a26      	ldr	r2, [pc, #152]	; (8006cbc <HAL_DMA_IRQHandler+0xc80>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d03b      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xc62>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a25      	ldr	r2, [pc, #148]	; (8006cc0 <HAL_DMA_IRQHandler+0xc84>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d036      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xc62>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a23      	ldr	r2, [pc, #140]	; (8006cc4 <HAL_DMA_IRQHandler+0xc88>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d031      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xc62>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a22      	ldr	r2, [pc, #136]	; (8006cc8 <HAL_DMA_IRQHandler+0xc8c>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d02c      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xc62>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a20      	ldr	r2, [pc, #128]	; (8006ccc <HAL_DMA_IRQHandler+0xc90>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d027      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xc62>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a1f      	ldr	r2, [pc, #124]	; (8006cd0 <HAL_DMA_IRQHandler+0xc94>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d022      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xc62>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a1d      	ldr	r2, [pc, #116]	; (8006cd4 <HAL_DMA_IRQHandler+0xc98>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d01d      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xc62>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a1c      	ldr	r2, [pc, #112]	; (8006cd8 <HAL_DMA_IRQHandler+0xc9c>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d018      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xc62>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a1a      	ldr	r2, [pc, #104]	; (8006cdc <HAL_DMA_IRQHandler+0xca0>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d013      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xc62>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a19      	ldr	r2, [pc, #100]	; (8006ce0 <HAL_DMA_IRQHandler+0xca4>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d00e      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xc62>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a17      	ldr	r2, [pc, #92]	; (8006ce4 <HAL_DMA_IRQHandler+0xca8>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d009      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xc62>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a16      	ldr	r2, [pc, #88]	; (8006ce8 <HAL_DMA_IRQHandler+0xcac>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d004      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xc62>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a14      	ldr	r2, [pc, #80]	; (8006cec <HAL_DMA_IRQHandler+0xcb0>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d128      	bne.n	8006cf0 <HAL_DMA_IRQHandler+0xcb4>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f022 0214 	bic.w	r2, r2, #20
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	e027      	b.n	8006d00 <HAL_DMA_IRQHandler+0xcc4>
 8006cb0:	40020010 	.word	0x40020010
 8006cb4:	40020028 	.word	0x40020028
 8006cb8:	40020040 	.word	0x40020040
 8006cbc:	40020058 	.word	0x40020058
 8006cc0:	40020070 	.word	0x40020070
 8006cc4:	40020088 	.word	0x40020088
 8006cc8:	400200a0 	.word	0x400200a0
 8006ccc:	400200b8 	.word	0x400200b8
 8006cd0:	40020410 	.word	0x40020410
 8006cd4:	40020428 	.word	0x40020428
 8006cd8:	40020440 	.word	0x40020440
 8006cdc:	40020458 	.word	0x40020458
 8006ce0:	40020470 	.word	0x40020470
 8006ce4:	40020488 	.word	0x40020488
 8006ce8:	400204a0 	.word	0x400204a0
 8006cec:	400204b8 	.word	0x400204b8
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 020a 	bic.w	r2, r2, #10
 8006cfe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 8097 	beq.w	8006e48 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d22:	e091      	b.n	8006e48 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d28:	f003 031f 	and.w	r3, r3, #31
 8006d2c:	2208      	movs	r2, #8
 8006d2e:	409a      	lsls	r2, r3
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	4013      	ands	r3, r2
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 8088 	beq.w	8006e4a <HAL_DMA_IRQHandler+0xe0e>
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f003 0308 	and.w	r3, r3, #8
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 8082 	beq.w	8006e4a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a41      	ldr	r2, [pc, #260]	; (8006e50 <HAL_DMA_IRQHandler+0xe14>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d04a      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xdaa>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a3f      	ldr	r2, [pc, #252]	; (8006e54 <HAL_DMA_IRQHandler+0xe18>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d045      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xdaa>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a3e      	ldr	r2, [pc, #248]	; (8006e58 <HAL_DMA_IRQHandler+0xe1c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d040      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xdaa>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a3c      	ldr	r2, [pc, #240]	; (8006e5c <HAL_DMA_IRQHandler+0xe20>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d03b      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xdaa>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a3b      	ldr	r2, [pc, #236]	; (8006e60 <HAL_DMA_IRQHandler+0xe24>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d036      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xdaa>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a39      	ldr	r2, [pc, #228]	; (8006e64 <HAL_DMA_IRQHandler+0xe28>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d031      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xdaa>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a38      	ldr	r2, [pc, #224]	; (8006e68 <HAL_DMA_IRQHandler+0xe2c>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d02c      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xdaa>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a36      	ldr	r2, [pc, #216]	; (8006e6c <HAL_DMA_IRQHandler+0xe30>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d027      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xdaa>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a35      	ldr	r2, [pc, #212]	; (8006e70 <HAL_DMA_IRQHandler+0xe34>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d022      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xdaa>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a33      	ldr	r2, [pc, #204]	; (8006e74 <HAL_DMA_IRQHandler+0xe38>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d01d      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xdaa>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a32      	ldr	r2, [pc, #200]	; (8006e78 <HAL_DMA_IRQHandler+0xe3c>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d018      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xdaa>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a30      	ldr	r2, [pc, #192]	; (8006e7c <HAL_DMA_IRQHandler+0xe40>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d013      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xdaa>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a2f      	ldr	r2, [pc, #188]	; (8006e80 <HAL_DMA_IRQHandler+0xe44>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d00e      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xdaa>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a2d      	ldr	r2, [pc, #180]	; (8006e84 <HAL_DMA_IRQHandler+0xe48>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d009      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xdaa>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a2c      	ldr	r2, [pc, #176]	; (8006e88 <HAL_DMA_IRQHandler+0xe4c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d004      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xdaa>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a2a      	ldr	r2, [pc, #168]	; (8006e8c <HAL_DMA_IRQHandler+0xe50>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d108      	bne.n	8006df8 <HAL_DMA_IRQHandler+0xdbc>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f022 021c 	bic.w	r2, r2, #28
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	e007      	b.n	8006e08 <HAL_DMA_IRQHandler+0xdcc>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 020e 	bic.w	r2, r2, #14
 8006e06:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e0c:	f003 031f 	and.w	r3, r3, #31
 8006e10:	2201      	movs	r2, #1
 8006e12:	409a      	lsls	r2, r3
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d009      	beq.n	8006e4a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	4798      	blx	r3
 8006e3e:	e004      	b.n	8006e4a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006e40:	bf00      	nop
 8006e42:	e002      	b.n	8006e4a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e44:	bf00      	nop
 8006e46:	e000      	b.n	8006e4a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e48:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006e4a:	3728      	adds	r7, #40	; 0x28
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	40020010 	.word	0x40020010
 8006e54:	40020028 	.word	0x40020028
 8006e58:	40020040 	.word	0x40020040
 8006e5c:	40020058 	.word	0x40020058
 8006e60:	40020070 	.word	0x40020070
 8006e64:	40020088 	.word	0x40020088
 8006e68:	400200a0 	.word	0x400200a0
 8006e6c:	400200b8 	.word	0x400200b8
 8006e70:	40020410 	.word	0x40020410
 8006e74:	40020428 	.word	0x40020428
 8006e78:	40020440 	.word	0x40020440
 8006e7c:	40020458 	.word	0x40020458
 8006e80:	40020470 	.word	0x40020470
 8006e84:	40020488 	.word	0x40020488
 8006e88:	400204a0 	.word	0x400204a0
 8006e8c:	400204b8 	.word	0x400204b8

08006e90 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b087      	sub	sp, #28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
 8006e9c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a7f      	ldr	r2, [pc, #508]	; (80070ac <DMA_SetConfig+0x21c>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d072      	beq.n	8006f9a <DMA_SetConfig+0x10a>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a7d      	ldr	r2, [pc, #500]	; (80070b0 <DMA_SetConfig+0x220>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d06d      	beq.n	8006f9a <DMA_SetConfig+0x10a>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a7c      	ldr	r2, [pc, #496]	; (80070b4 <DMA_SetConfig+0x224>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d068      	beq.n	8006f9a <DMA_SetConfig+0x10a>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a7a      	ldr	r2, [pc, #488]	; (80070b8 <DMA_SetConfig+0x228>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d063      	beq.n	8006f9a <DMA_SetConfig+0x10a>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a79      	ldr	r2, [pc, #484]	; (80070bc <DMA_SetConfig+0x22c>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d05e      	beq.n	8006f9a <DMA_SetConfig+0x10a>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a77      	ldr	r2, [pc, #476]	; (80070c0 <DMA_SetConfig+0x230>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d059      	beq.n	8006f9a <DMA_SetConfig+0x10a>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a76      	ldr	r2, [pc, #472]	; (80070c4 <DMA_SetConfig+0x234>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d054      	beq.n	8006f9a <DMA_SetConfig+0x10a>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a74      	ldr	r2, [pc, #464]	; (80070c8 <DMA_SetConfig+0x238>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d04f      	beq.n	8006f9a <DMA_SetConfig+0x10a>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a73      	ldr	r2, [pc, #460]	; (80070cc <DMA_SetConfig+0x23c>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d04a      	beq.n	8006f9a <DMA_SetConfig+0x10a>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a71      	ldr	r2, [pc, #452]	; (80070d0 <DMA_SetConfig+0x240>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d045      	beq.n	8006f9a <DMA_SetConfig+0x10a>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a70      	ldr	r2, [pc, #448]	; (80070d4 <DMA_SetConfig+0x244>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d040      	beq.n	8006f9a <DMA_SetConfig+0x10a>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a6e      	ldr	r2, [pc, #440]	; (80070d8 <DMA_SetConfig+0x248>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d03b      	beq.n	8006f9a <DMA_SetConfig+0x10a>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a6d      	ldr	r2, [pc, #436]	; (80070dc <DMA_SetConfig+0x24c>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d036      	beq.n	8006f9a <DMA_SetConfig+0x10a>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a6b      	ldr	r2, [pc, #428]	; (80070e0 <DMA_SetConfig+0x250>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d031      	beq.n	8006f9a <DMA_SetConfig+0x10a>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a6a      	ldr	r2, [pc, #424]	; (80070e4 <DMA_SetConfig+0x254>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d02c      	beq.n	8006f9a <DMA_SetConfig+0x10a>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a68      	ldr	r2, [pc, #416]	; (80070e8 <DMA_SetConfig+0x258>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d027      	beq.n	8006f9a <DMA_SetConfig+0x10a>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a67      	ldr	r2, [pc, #412]	; (80070ec <DMA_SetConfig+0x25c>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d022      	beq.n	8006f9a <DMA_SetConfig+0x10a>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a65      	ldr	r2, [pc, #404]	; (80070f0 <DMA_SetConfig+0x260>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d01d      	beq.n	8006f9a <DMA_SetConfig+0x10a>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a64      	ldr	r2, [pc, #400]	; (80070f4 <DMA_SetConfig+0x264>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d018      	beq.n	8006f9a <DMA_SetConfig+0x10a>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a62      	ldr	r2, [pc, #392]	; (80070f8 <DMA_SetConfig+0x268>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d013      	beq.n	8006f9a <DMA_SetConfig+0x10a>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a61      	ldr	r2, [pc, #388]	; (80070fc <DMA_SetConfig+0x26c>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d00e      	beq.n	8006f9a <DMA_SetConfig+0x10a>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a5f      	ldr	r2, [pc, #380]	; (8007100 <DMA_SetConfig+0x270>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d009      	beq.n	8006f9a <DMA_SetConfig+0x10a>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a5e      	ldr	r2, [pc, #376]	; (8007104 <DMA_SetConfig+0x274>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d004      	beq.n	8006f9a <DMA_SetConfig+0x10a>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a5c      	ldr	r2, [pc, #368]	; (8007108 <DMA_SetConfig+0x278>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d101      	bne.n	8006f9e <DMA_SetConfig+0x10e>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e000      	b.n	8006fa0 <DMA_SetConfig+0x110>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00d      	beq.n	8006fc0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006fac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d004      	beq.n	8006fc0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006fbe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a39      	ldr	r2, [pc, #228]	; (80070ac <DMA_SetConfig+0x21c>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d04a      	beq.n	8007060 <DMA_SetConfig+0x1d0>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a38      	ldr	r2, [pc, #224]	; (80070b0 <DMA_SetConfig+0x220>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d045      	beq.n	8007060 <DMA_SetConfig+0x1d0>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a36      	ldr	r2, [pc, #216]	; (80070b4 <DMA_SetConfig+0x224>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d040      	beq.n	8007060 <DMA_SetConfig+0x1d0>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a35      	ldr	r2, [pc, #212]	; (80070b8 <DMA_SetConfig+0x228>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d03b      	beq.n	8007060 <DMA_SetConfig+0x1d0>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a33      	ldr	r2, [pc, #204]	; (80070bc <DMA_SetConfig+0x22c>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d036      	beq.n	8007060 <DMA_SetConfig+0x1d0>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a32      	ldr	r2, [pc, #200]	; (80070c0 <DMA_SetConfig+0x230>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d031      	beq.n	8007060 <DMA_SetConfig+0x1d0>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a30      	ldr	r2, [pc, #192]	; (80070c4 <DMA_SetConfig+0x234>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d02c      	beq.n	8007060 <DMA_SetConfig+0x1d0>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a2f      	ldr	r2, [pc, #188]	; (80070c8 <DMA_SetConfig+0x238>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d027      	beq.n	8007060 <DMA_SetConfig+0x1d0>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a2d      	ldr	r2, [pc, #180]	; (80070cc <DMA_SetConfig+0x23c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d022      	beq.n	8007060 <DMA_SetConfig+0x1d0>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a2c      	ldr	r2, [pc, #176]	; (80070d0 <DMA_SetConfig+0x240>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d01d      	beq.n	8007060 <DMA_SetConfig+0x1d0>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a2a      	ldr	r2, [pc, #168]	; (80070d4 <DMA_SetConfig+0x244>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d018      	beq.n	8007060 <DMA_SetConfig+0x1d0>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a29      	ldr	r2, [pc, #164]	; (80070d8 <DMA_SetConfig+0x248>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d013      	beq.n	8007060 <DMA_SetConfig+0x1d0>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a27      	ldr	r2, [pc, #156]	; (80070dc <DMA_SetConfig+0x24c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d00e      	beq.n	8007060 <DMA_SetConfig+0x1d0>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a26      	ldr	r2, [pc, #152]	; (80070e0 <DMA_SetConfig+0x250>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d009      	beq.n	8007060 <DMA_SetConfig+0x1d0>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a24      	ldr	r2, [pc, #144]	; (80070e4 <DMA_SetConfig+0x254>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d004      	beq.n	8007060 <DMA_SetConfig+0x1d0>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a23      	ldr	r2, [pc, #140]	; (80070e8 <DMA_SetConfig+0x258>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d101      	bne.n	8007064 <DMA_SetConfig+0x1d4>
 8007060:	2301      	movs	r3, #1
 8007062:	e000      	b.n	8007066 <DMA_SetConfig+0x1d6>
 8007064:	2300      	movs	r3, #0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d059      	beq.n	800711e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800706e:	f003 031f 	and.w	r3, r3, #31
 8007072:	223f      	movs	r2, #63	; 0x3f
 8007074:	409a      	lsls	r2, r3
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007088:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	2b40      	cmp	r3, #64	; 0x40
 8007098:	d138      	bne.n	800710c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80070aa:	e086      	b.n	80071ba <DMA_SetConfig+0x32a>
 80070ac:	40020010 	.word	0x40020010
 80070b0:	40020028 	.word	0x40020028
 80070b4:	40020040 	.word	0x40020040
 80070b8:	40020058 	.word	0x40020058
 80070bc:	40020070 	.word	0x40020070
 80070c0:	40020088 	.word	0x40020088
 80070c4:	400200a0 	.word	0x400200a0
 80070c8:	400200b8 	.word	0x400200b8
 80070cc:	40020410 	.word	0x40020410
 80070d0:	40020428 	.word	0x40020428
 80070d4:	40020440 	.word	0x40020440
 80070d8:	40020458 	.word	0x40020458
 80070dc:	40020470 	.word	0x40020470
 80070e0:	40020488 	.word	0x40020488
 80070e4:	400204a0 	.word	0x400204a0
 80070e8:	400204b8 	.word	0x400204b8
 80070ec:	58025408 	.word	0x58025408
 80070f0:	5802541c 	.word	0x5802541c
 80070f4:	58025430 	.word	0x58025430
 80070f8:	58025444 	.word	0x58025444
 80070fc:	58025458 	.word	0x58025458
 8007100:	5802546c 	.word	0x5802546c
 8007104:	58025480 	.word	0x58025480
 8007108:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	60da      	str	r2, [r3, #12]
}
 800711c:	e04d      	b.n	80071ba <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a29      	ldr	r2, [pc, #164]	; (80071c8 <DMA_SetConfig+0x338>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d022      	beq.n	800716e <DMA_SetConfig+0x2de>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a27      	ldr	r2, [pc, #156]	; (80071cc <DMA_SetConfig+0x33c>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d01d      	beq.n	800716e <DMA_SetConfig+0x2de>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a26      	ldr	r2, [pc, #152]	; (80071d0 <DMA_SetConfig+0x340>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d018      	beq.n	800716e <DMA_SetConfig+0x2de>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a24      	ldr	r2, [pc, #144]	; (80071d4 <DMA_SetConfig+0x344>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d013      	beq.n	800716e <DMA_SetConfig+0x2de>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a23      	ldr	r2, [pc, #140]	; (80071d8 <DMA_SetConfig+0x348>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d00e      	beq.n	800716e <DMA_SetConfig+0x2de>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a21      	ldr	r2, [pc, #132]	; (80071dc <DMA_SetConfig+0x34c>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d009      	beq.n	800716e <DMA_SetConfig+0x2de>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a20      	ldr	r2, [pc, #128]	; (80071e0 <DMA_SetConfig+0x350>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d004      	beq.n	800716e <DMA_SetConfig+0x2de>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a1e      	ldr	r2, [pc, #120]	; (80071e4 <DMA_SetConfig+0x354>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d101      	bne.n	8007172 <DMA_SetConfig+0x2e2>
 800716e:	2301      	movs	r3, #1
 8007170:	e000      	b.n	8007174 <DMA_SetConfig+0x2e4>
 8007172:	2300      	movs	r3, #0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d020      	beq.n	80071ba <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800717c:	f003 031f 	and.w	r3, r3, #31
 8007180:	2201      	movs	r2, #1
 8007182:	409a      	lsls	r2, r3
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	2b40      	cmp	r3, #64	; 0x40
 8007196:	d108      	bne.n	80071aa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	60da      	str	r2, [r3, #12]
}
 80071a8:	e007      	b.n	80071ba <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	60da      	str	r2, [r3, #12]
}
 80071ba:	bf00      	nop
 80071bc:	371c      	adds	r7, #28
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	58025408 	.word	0x58025408
 80071cc:	5802541c 	.word	0x5802541c
 80071d0:	58025430 	.word	0x58025430
 80071d4:	58025444 	.word	0x58025444
 80071d8:	58025458 	.word	0x58025458
 80071dc:	5802546c 	.word	0x5802546c
 80071e0:	58025480 	.word	0x58025480
 80071e4:	58025494 	.word	0x58025494

080071e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a42      	ldr	r2, [pc, #264]	; (8007300 <DMA_CalcBaseAndBitshift+0x118>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d04a      	beq.n	8007290 <DMA_CalcBaseAndBitshift+0xa8>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a41      	ldr	r2, [pc, #260]	; (8007304 <DMA_CalcBaseAndBitshift+0x11c>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d045      	beq.n	8007290 <DMA_CalcBaseAndBitshift+0xa8>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a3f      	ldr	r2, [pc, #252]	; (8007308 <DMA_CalcBaseAndBitshift+0x120>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d040      	beq.n	8007290 <DMA_CalcBaseAndBitshift+0xa8>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a3e      	ldr	r2, [pc, #248]	; (800730c <DMA_CalcBaseAndBitshift+0x124>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d03b      	beq.n	8007290 <DMA_CalcBaseAndBitshift+0xa8>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a3c      	ldr	r2, [pc, #240]	; (8007310 <DMA_CalcBaseAndBitshift+0x128>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d036      	beq.n	8007290 <DMA_CalcBaseAndBitshift+0xa8>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a3b      	ldr	r2, [pc, #236]	; (8007314 <DMA_CalcBaseAndBitshift+0x12c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d031      	beq.n	8007290 <DMA_CalcBaseAndBitshift+0xa8>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a39      	ldr	r2, [pc, #228]	; (8007318 <DMA_CalcBaseAndBitshift+0x130>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d02c      	beq.n	8007290 <DMA_CalcBaseAndBitshift+0xa8>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a38      	ldr	r2, [pc, #224]	; (800731c <DMA_CalcBaseAndBitshift+0x134>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d027      	beq.n	8007290 <DMA_CalcBaseAndBitshift+0xa8>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a36      	ldr	r2, [pc, #216]	; (8007320 <DMA_CalcBaseAndBitshift+0x138>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d022      	beq.n	8007290 <DMA_CalcBaseAndBitshift+0xa8>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a35      	ldr	r2, [pc, #212]	; (8007324 <DMA_CalcBaseAndBitshift+0x13c>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d01d      	beq.n	8007290 <DMA_CalcBaseAndBitshift+0xa8>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a33      	ldr	r2, [pc, #204]	; (8007328 <DMA_CalcBaseAndBitshift+0x140>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d018      	beq.n	8007290 <DMA_CalcBaseAndBitshift+0xa8>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a32      	ldr	r2, [pc, #200]	; (800732c <DMA_CalcBaseAndBitshift+0x144>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d013      	beq.n	8007290 <DMA_CalcBaseAndBitshift+0xa8>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a30      	ldr	r2, [pc, #192]	; (8007330 <DMA_CalcBaseAndBitshift+0x148>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d00e      	beq.n	8007290 <DMA_CalcBaseAndBitshift+0xa8>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a2f      	ldr	r2, [pc, #188]	; (8007334 <DMA_CalcBaseAndBitshift+0x14c>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d009      	beq.n	8007290 <DMA_CalcBaseAndBitshift+0xa8>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a2d      	ldr	r2, [pc, #180]	; (8007338 <DMA_CalcBaseAndBitshift+0x150>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d004      	beq.n	8007290 <DMA_CalcBaseAndBitshift+0xa8>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a2c      	ldr	r2, [pc, #176]	; (800733c <DMA_CalcBaseAndBitshift+0x154>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d101      	bne.n	8007294 <DMA_CalcBaseAndBitshift+0xac>
 8007290:	2301      	movs	r3, #1
 8007292:	e000      	b.n	8007296 <DMA_CalcBaseAndBitshift+0xae>
 8007294:	2300      	movs	r3, #0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d024      	beq.n	80072e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	3b10      	subs	r3, #16
 80072a2:	4a27      	ldr	r2, [pc, #156]	; (8007340 <DMA_CalcBaseAndBitshift+0x158>)
 80072a4:	fba2 2303 	umull	r2, r3, r2, r3
 80072a8:	091b      	lsrs	r3, r3, #4
 80072aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f003 0307 	and.w	r3, r3, #7
 80072b2:	4a24      	ldr	r2, [pc, #144]	; (8007344 <DMA_CalcBaseAndBitshift+0x15c>)
 80072b4:	5cd3      	ldrb	r3, [r2, r3]
 80072b6:	461a      	mov	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d908      	bls.n	80072d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	461a      	mov	r2, r3
 80072c8:	4b1f      	ldr	r3, [pc, #124]	; (8007348 <DMA_CalcBaseAndBitshift+0x160>)
 80072ca:	4013      	ands	r3, r2
 80072cc:	1d1a      	adds	r2, r3, #4
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	659a      	str	r2, [r3, #88]	; 0x58
 80072d2:	e00d      	b.n	80072f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	461a      	mov	r2, r3
 80072da:	4b1b      	ldr	r3, [pc, #108]	; (8007348 <DMA_CalcBaseAndBitshift+0x160>)
 80072dc:	4013      	ands	r3, r2
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	6593      	str	r3, [r2, #88]	; 0x58
 80072e2:	e005      	b.n	80072f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	40020010 	.word	0x40020010
 8007304:	40020028 	.word	0x40020028
 8007308:	40020040 	.word	0x40020040
 800730c:	40020058 	.word	0x40020058
 8007310:	40020070 	.word	0x40020070
 8007314:	40020088 	.word	0x40020088
 8007318:	400200a0 	.word	0x400200a0
 800731c:	400200b8 	.word	0x400200b8
 8007320:	40020410 	.word	0x40020410
 8007324:	40020428 	.word	0x40020428
 8007328:	40020440 	.word	0x40020440
 800732c:	40020458 	.word	0x40020458
 8007330:	40020470 	.word	0x40020470
 8007334:	40020488 	.word	0x40020488
 8007338:	400204a0 	.word	0x400204a0
 800733c:	400204b8 	.word	0x400204b8
 8007340:	aaaaaaab 	.word	0xaaaaaaab
 8007344:	0800fe78 	.word	0x0800fe78
 8007348:	fffffc00 	.word	0xfffffc00

0800734c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007354:	2300      	movs	r3, #0
 8007356:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d120      	bne.n	80073a2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007364:	2b03      	cmp	r3, #3
 8007366:	d858      	bhi.n	800741a <DMA_CheckFifoParam+0xce>
 8007368:	a201      	add	r2, pc, #4	; (adr r2, 8007370 <DMA_CheckFifoParam+0x24>)
 800736a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736e:	bf00      	nop
 8007370:	08007381 	.word	0x08007381
 8007374:	08007393 	.word	0x08007393
 8007378:	08007381 	.word	0x08007381
 800737c:	0800741b 	.word	0x0800741b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d048      	beq.n	800741e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007390:	e045      	b.n	800741e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007396:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800739a:	d142      	bne.n	8007422 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073a0:	e03f      	b.n	8007422 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073aa:	d123      	bne.n	80073f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b0:	2b03      	cmp	r3, #3
 80073b2:	d838      	bhi.n	8007426 <DMA_CheckFifoParam+0xda>
 80073b4:	a201      	add	r2, pc, #4	; (adr r2, 80073bc <DMA_CheckFifoParam+0x70>)
 80073b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ba:	bf00      	nop
 80073bc:	080073cd 	.word	0x080073cd
 80073c0:	080073d3 	.word	0x080073d3
 80073c4:	080073cd 	.word	0x080073cd
 80073c8:	080073e5 	.word	0x080073e5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	73fb      	strb	r3, [r7, #15]
        break;
 80073d0:	e030      	b.n	8007434 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d025      	beq.n	800742a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073e2:	e022      	b.n	800742a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80073ec:	d11f      	bne.n	800742e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073f2:	e01c      	b.n	800742e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d902      	bls.n	8007402 <DMA_CheckFifoParam+0xb6>
 80073fc:	2b03      	cmp	r3, #3
 80073fe:	d003      	beq.n	8007408 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007400:	e018      	b.n	8007434 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	73fb      	strb	r3, [r7, #15]
        break;
 8007406:	e015      	b.n	8007434 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00e      	beq.n	8007432 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	73fb      	strb	r3, [r7, #15]
    break;
 8007418:	e00b      	b.n	8007432 <DMA_CheckFifoParam+0xe6>
        break;
 800741a:	bf00      	nop
 800741c:	e00a      	b.n	8007434 <DMA_CheckFifoParam+0xe8>
        break;
 800741e:	bf00      	nop
 8007420:	e008      	b.n	8007434 <DMA_CheckFifoParam+0xe8>
        break;
 8007422:	bf00      	nop
 8007424:	e006      	b.n	8007434 <DMA_CheckFifoParam+0xe8>
        break;
 8007426:	bf00      	nop
 8007428:	e004      	b.n	8007434 <DMA_CheckFifoParam+0xe8>
        break;
 800742a:	bf00      	nop
 800742c:	e002      	b.n	8007434 <DMA_CheckFifoParam+0xe8>
        break;
 800742e:	bf00      	nop
 8007430:	e000      	b.n	8007434 <DMA_CheckFifoParam+0xe8>
    break;
 8007432:	bf00      	nop
    }
  }

  return status;
 8007434:	7bfb      	ldrb	r3, [r7, #15]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop

08007444 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a38      	ldr	r2, [pc, #224]	; (8007538 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d022      	beq.n	80074a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a36      	ldr	r2, [pc, #216]	; (800753c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d01d      	beq.n	80074a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a35      	ldr	r2, [pc, #212]	; (8007540 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d018      	beq.n	80074a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a33      	ldr	r2, [pc, #204]	; (8007544 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d013      	beq.n	80074a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a32      	ldr	r2, [pc, #200]	; (8007548 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d00e      	beq.n	80074a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a30      	ldr	r2, [pc, #192]	; (800754c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d009      	beq.n	80074a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a2f      	ldr	r2, [pc, #188]	; (8007550 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d004      	beq.n	80074a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a2d      	ldr	r2, [pc, #180]	; (8007554 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d101      	bne.n	80074a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80074a2:	2301      	movs	r3, #1
 80074a4:	e000      	b.n	80074a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80074a6:	2300      	movs	r3, #0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d01a      	beq.n	80074e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	3b08      	subs	r3, #8
 80074b4:	4a28      	ldr	r2, [pc, #160]	; (8007558 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80074b6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ba:	091b      	lsrs	r3, r3, #4
 80074bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	4b26      	ldr	r3, [pc, #152]	; (800755c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	461a      	mov	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a24      	ldr	r2, [pc, #144]	; (8007560 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80074d0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f003 031f 	and.w	r3, r3, #31
 80074d8:	2201      	movs	r2, #1
 80074da:	409a      	lsls	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80074e0:	e024      	b.n	800752c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	3b10      	subs	r3, #16
 80074ea:	4a1e      	ldr	r2, [pc, #120]	; (8007564 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80074ec:	fba2 2303 	umull	r2, r3, r2, r3
 80074f0:	091b      	lsrs	r3, r3, #4
 80074f2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	4a1c      	ldr	r2, [pc, #112]	; (8007568 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d806      	bhi.n	800750a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	4a1b      	ldr	r2, [pc, #108]	; (800756c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d902      	bls.n	800750a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	3308      	adds	r3, #8
 8007508:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	4b18      	ldr	r3, [pc, #96]	; (8007570 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800750e:	4413      	add	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	461a      	mov	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a16      	ldr	r2, [pc, #88]	; (8007574 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800751c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f003 031f 	and.w	r3, r3, #31
 8007524:	2201      	movs	r2, #1
 8007526:	409a      	lsls	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800752c:	bf00      	nop
 800752e:	3714      	adds	r7, #20
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr
 8007538:	58025408 	.word	0x58025408
 800753c:	5802541c 	.word	0x5802541c
 8007540:	58025430 	.word	0x58025430
 8007544:	58025444 	.word	0x58025444
 8007548:	58025458 	.word	0x58025458
 800754c:	5802546c 	.word	0x5802546c
 8007550:	58025480 	.word	0x58025480
 8007554:	58025494 	.word	0x58025494
 8007558:	cccccccd 	.word	0xcccccccd
 800755c:	16009600 	.word	0x16009600
 8007560:	58025880 	.word	0x58025880
 8007564:	aaaaaaab 	.word	0xaaaaaaab
 8007568:	400204b8 	.word	0x400204b8
 800756c:	4002040f 	.word	0x4002040f
 8007570:	10008200 	.word	0x10008200
 8007574:	40020880 	.word	0x40020880

08007578 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	b2db      	uxtb	r3, r3
 8007586:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d04a      	beq.n	8007624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2b08      	cmp	r3, #8
 8007592:	d847      	bhi.n	8007624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a25      	ldr	r2, [pc, #148]	; (8007630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d022      	beq.n	80075e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a24      	ldr	r2, [pc, #144]	; (8007634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d01d      	beq.n	80075e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a22      	ldr	r2, [pc, #136]	; (8007638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d018      	beq.n	80075e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a21      	ldr	r2, [pc, #132]	; (800763c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d013      	beq.n	80075e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a1f      	ldr	r2, [pc, #124]	; (8007640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d00e      	beq.n	80075e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a1e      	ldr	r2, [pc, #120]	; (8007644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d009      	beq.n	80075e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a1c      	ldr	r2, [pc, #112]	; (8007648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d004      	beq.n	80075e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a1b      	ldr	r2, [pc, #108]	; (800764c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d101      	bne.n	80075e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80075e4:	2301      	movs	r3, #1
 80075e6:	e000      	b.n	80075ea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80075e8:	2300      	movs	r3, #0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00a      	beq.n	8007604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	4b17      	ldr	r3, [pc, #92]	; (8007650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80075f2:	4413      	add	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	461a      	mov	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a15      	ldr	r2, [pc, #84]	; (8007654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007600:	671a      	str	r2, [r3, #112]	; 0x70
 8007602:	e009      	b.n	8007618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	4b14      	ldr	r3, [pc, #80]	; (8007658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007608:	4413      	add	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	461a      	mov	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a11      	ldr	r2, [pc, #68]	; (800765c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007616:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	3b01      	subs	r3, #1
 800761c:	2201      	movs	r2, #1
 800761e:	409a      	lsls	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007624:	bf00      	nop
 8007626:	3714      	adds	r7, #20
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr
 8007630:	58025408 	.word	0x58025408
 8007634:	5802541c 	.word	0x5802541c
 8007638:	58025430 	.word	0x58025430
 800763c:	58025444 	.word	0x58025444
 8007640:	58025458 	.word	0x58025458
 8007644:	5802546c 	.word	0x5802546c
 8007648:	58025480 	.word	0x58025480
 800764c:	58025494 	.word	0x58025494
 8007650:	1600963f 	.word	0x1600963f
 8007654:	58025940 	.word	0x58025940
 8007658:	1000823f 	.word	0x1000823f
 800765c:	40020940 	.word	0x40020940

08007660 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007660:	b480      	push	{r7}
 8007662:	b089      	sub	sp, #36	; 0x24
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800766a:	2300      	movs	r3, #0
 800766c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800766e:	4b89      	ldr	r3, [pc, #548]	; (8007894 <HAL_GPIO_Init+0x234>)
 8007670:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007672:	e194      	b.n	800799e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	2101      	movs	r1, #1
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	fa01 f303 	lsl.w	r3, r1, r3
 8007680:	4013      	ands	r3, r2
 8007682:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	f000 8186 	beq.w	8007998 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	f003 0303 	and.w	r3, r3, #3
 8007694:	2b01      	cmp	r3, #1
 8007696:	d005      	beq.n	80076a4 <HAL_GPIO_Init+0x44>
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	f003 0303 	and.w	r3, r3, #3
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d130      	bne.n	8007706 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	005b      	lsls	r3, r3, #1
 80076ae:	2203      	movs	r2, #3
 80076b0:	fa02 f303 	lsl.w	r3, r2, r3
 80076b4:	43db      	mvns	r3, r3
 80076b6:	69ba      	ldr	r2, [r7, #24]
 80076b8:	4013      	ands	r3, r2
 80076ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	68da      	ldr	r2, [r3, #12]
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	005b      	lsls	r3, r3, #1
 80076c4:	fa02 f303 	lsl.w	r3, r2, r3
 80076c8:	69ba      	ldr	r2, [r7, #24]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	69ba      	ldr	r2, [r7, #24]
 80076d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80076da:	2201      	movs	r2, #1
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	fa02 f303 	lsl.w	r3, r2, r3
 80076e2:	43db      	mvns	r3, r3
 80076e4:	69ba      	ldr	r2, [r7, #24]
 80076e6:	4013      	ands	r3, r2
 80076e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	091b      	lsrs	r3, r3, #4
 80076f0:	f003 0201 	and.w	r2, r3, #1
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	fa02 f303 	lsl.w	r3, r2, r3
 80076fa:	69ba      	ldr	r2, [r7, #24]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f003 0303 	and.w	r3, r3, #3
 800770e:	2b03      	cmp	r3, #3
 8007710:	d017      	beq.n	8007742 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	005b      	lsls	r3, r3, #1
 800771c:	2203      	movs	r2, #3
 800771e:	fa02 f303 	lsl.w	r3, r2, r3
 8007722:	43db      	mvns	r3, r3
 8007724:	69ba      	ldr	r2, [r7, #24]
 8007726:	4013      	ands	r3, r2
 8007728:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	689a      	ldr	r2, [r3, #8]
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	005b      	lsls	r3, r3, #1
 8007732:	fa02 f303 	lsl.w	r3, r2, r3
 8007736:	69ba      	ldr	r2, [r7, #24]
 8007738:	4313      	orrs	r3, r2
 800773a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	69ba      	ldr	r2, [r7, #24]
 8007740:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	f003 0303 	and.w	r3, r3, #3
 800774a:	2b02      	cmp	r3, #2
 800774c:	d123      	bne.n	8007796 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	08da      	lsrs	r2, r3, #3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	3208      	adds	r2, #8
 8007756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800775a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	f003 0307 	and.w	r3, r3, #7
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	220f      	movs	r2, #15
 8007766:	fa02 f303 	lsl.w	r3, r2, r3
 800776a:	43db      	mvns	r3, r3
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	4013      	ands	r3, r2
 8007770:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	691a      	ldr	r2, [r3, #16]
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	f003 0307 	and.w	r3, r3, #7
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	fa02 f303 	lsl.w	r3, r2, r3
 8007782:	69ba      	ldr	r2, [r7, #24]
 8007784:	4313      	orrs	r3, r2
 8007786:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	08da      	lsrs	r2, r3, #3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	3208      	adds	r2, #8
 8007790:	69b9      	ldr	r1, [r7, #24]
 8007792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	005b      	lsls	r3, r3, #1
 80077a0:	2203      	movs	r2, #3
 80077a2:	fa02 f303 	lsl.w	r3, r2, r3
 80077a6:	43db      	mvns	r3, r3
 80077a8:	69ba      	ldr	r2, [r7, #24]
 80077aa:	4013      	ands	r3, r2
 80077ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f003 0203 	and.w	r2, r3, #3
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	005b      	lsls	r3, r3, #1
 80077ba:	fa02 f303 	lsl.w	r3, r2, r3
 80077be:	69ba      	ldr	r2, [r7, #24]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	69ba      	ldr	r2, [r7, #24]
 80077c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	f000 80e0 	beq.w	8007998 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077d8:	4b2f      	ldr	r3, [pc, #188]	; (8007898 <HAL_GPIO_Init+0x238>)
 80077da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80077de:	4a2e      	ldr	r2, [pc, #184]	; (8007898 <HAL_GPIO_Init+0x238>)
 80077e0:	f043 0302 	orr.w	r3, r3, #2
 80077e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80077e8:	4b2b      	ldr	r3, [pc, #172]	; (8007898 <HAL_GPIO_Init+0x238>)
 80077ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80077ee:	f003 0302 	and.w	r3, r3, #2
 80077f2:	60fb      	str	r3, [r7, #12]
 80077f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80077f6:	4a29      	ldr	r2, [pc, #164]	; (800789c <HAL_GPIO_Init+0x23c>)
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	089b      	lsrs	r3, r3, #2
 80077fc:	3302      	adds	r3, #2
 80077fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007802:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	f003 0303 	and.w	r3, r3, #3
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	220f      	movs	r2, #15
 800780e:	fa02 f303 	lsl.w	r3, r2, r3
 8007812:	43db      	mvns	r3, r3
 8007814:	69ba      	ldr	r2, [r7, #24]
 8007816:	4013      	ands	r3, r2
 8007818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a20      	ldr	r2, [pc, #128]	; (80078a0 <HAL_GPIO_Init+0x240>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d052      	beq.n	80078c8 <HAL_GPIO_Init+0x268>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a1f      	ldr	r2, [pc, #124]	; (80078a4 <HAL_GPIO_Init+0x244>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d031      	beq.n	800788e <HAL_GPIO_Init+0x22e>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a1e      	ldr	r2, [pc, #120]	; (80078a8 <HAL_GPIO_Init+0x248>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d02b      	beq.n	800788a <HAL_GPIO_Init+0x22a>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a1d      	ldr	r2, [pc, #116]	; (80078ac <HAL_GPIO_Init+0x24c>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d025      	beq.n	8007886 <HAL_GPIO_Init+0x226>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a1c      	ldr	r2, [pc, #112]	; (80078b0 <HAL_GPIO_Init+0x250>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d01f      	beq.n	8007882 <HAL_GPIO_Init+0x222>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a1b      	ldr	r2, [pc, #108]	; (80078b4 <HAL_GPIO_Init+0x254>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d019      	beq.n	800787e <HAL_GPIO_Init+0x21e>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a1a      	ldr	r2, [pc, #104]	; (80078b8 <HAL_GPIO_Init+0x258>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d013      	beq.n	800787a <HAL_GPIO_Init+0x21a>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a19      	ldr	r2, [pc, #100]	; (80078bc <HAL_GPIO_Init+0x25c>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d00d      	beq.n	8007876 <HAL_GPIO_Init+0x216>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a18      	ldr	r2, [pc, #96]	; (80078c0 <HAL_GPIO_Init+0x260>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d007      	beq.n	8007872 <HAL_GPIO_Init+0x212>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a17      	ldr	r2, [pc, #92]	; (80078c4 <HAL_GPIO_Init+0x264>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d101      	bne.n	800786e <HAL_GPIO_Init+0x20e>
 800786a:	2309      	movs	r3, #9
 800786c:	e02d      	b.n	80078ca <HAL_GPIO_Init+0x26a>
 800786e:	230a      	movs	r3, #10
 8007870:	e02b      	b.n	80078ca <HAL_GPIO_Init+0x26a>
 8007872:	2308      	movs	r3, #8
 8007874:	e029      	b.n	80078ca <HAL_GPIO_Init+0x26a>
 8007876:	2307      	movs	r3, #7
 8007878:	e027      	b.n	80078ca <HAL_GPIO_Init+0x26a>
 800787a:	2306      	movs	r3, #6
 800787c:	e025      	b.n	80078ca <HAL_GPIO_Init+0x26a>
 800787e:	2305      	movs	r3, #5
 8007880:	e023      	b.n	80078ca <HAL_GPIO_Init+0x26a>
 8007882:	2304      	movs	r3, #4
 8007884:	e021      	b.n	80078ca <HAL_GPIO_Init+0x26a>
 8007886:	2303      	movs	r3, #3
 8007888:	e01f      	b.n	80078ca <HAL_GPIO_Init+0x26a>
 800788a:	2302      	movs	r3, #2
 800788c:	e01d      	b.n	80078ca <HAL_GPIO_Init+0x26a>
 800788e:	2301      	movs	r3, #1
 8007890:	e01b      	b.n	80078ca <HAL_GPIO_Init+0x26a>
 8007892:	bf00      	nop
 8007894:	58000080 	.word	0x58000080
 8007898:	58024400 	.word	0x58024400
 800789c:	58000400 	.word	0x58000400
 80078a0:	58020000 	.word	0x58020000
 80078a4:	58020400 	.word	0x58020400
 80078a8:	58020800 	.word	0x58020800
 80078ac:	58020c00 	.word	0x58020c00
 80078b0:	58021000 	.word	0x58021000
 80078b4:	58021400 	.word	0x58021400
 80078b8:	58021800 	.word	0x58021800
 80078bc:	58021c00 	.word	0x58021c00
 80078c0:	58022000 	.word	0x58022000
 80078c4:	58022400 	.word	0x58022400
 80078c8:	2300      	movs	r3, #0
 80078ca:	69fa      	ldr	r2, [r7, #28]
 80078cc:	f002 0203 	and.w	r2, r2, #3
 80078d0:	0092      	lsls	r2, r2, #2
 80078d2:	4093      	lsls	r3, r2
 80078d4:	69ba      	ldr	r2, [r7, #24]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80078da:	4938      	ldr	r1, [pc, #224]	; (80079bc <HAL_GPIO_Init+0x35c>)
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	089b      	lsrs	r3, r3, #2
 80078e0:	3302      	adds	r3, #2
 80078e2:	69ba      	ldr	r2, [r7, #24]
 80078e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80078e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	43db      	mvns	r3, r3
 80078f4:	69ba      	ldr	r2, [r7, #24]
 80078f6:	4013      	ands	r3, r2
 80078f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d003      	beq.n	800790e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007906:	69ba      	ldr	r2, [r7, #24]
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	4313      	orrs	r3, r2
 800790c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800790e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	43db      	mvns	r3, r3
 8007922:	69ba      	ldr	r2, [r7, #24]
 8007924:	4013      	ands	r3, r2
 8007926:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d003      	beq.n	800793c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007934:	69ba      	ldr	r2, [r7, #24]
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	4313      	orrs	r3, r2
 800793a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800793c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	43db      	mvns	r3, r3
 800794e:	69ba      	ldr	r2, [r7, #24]
 8007950:	4013      	ands	r3, r2
 8007952:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d003      	beq.n	8007968 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007960:	69ba      	ldr	r2, [r7, #24]
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	4313      	orrs	r3, r2
 8007966:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	43db      	mvns	r3, r3
 8007978:	69ba      	ldr	r2, [r7, #24]
 800797a:	4013      	ands	r3, r2
 800797c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007986:	2b00      	cmp	r3, #0
 8007988:	d003      	beq.n	8007992 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800798a:	69ba      	ldr	r2, [r7, #24]
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	4313      	orrs	r3, r2
 8007990:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	69ba      	ldr	r2, [r7, #24]
 8007996:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	3301      	adds	r3, #1
 800799c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	fa22 f303 	lsr.w	r3, r2, r3
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f47f ae63 	bne.w	8007674 <HAL_GPIO_Init+0x14>
  }
}
 80079ae:	bf00      	nop
 80079b0:	bf00      	nop
 80079b2:	3724      	adds	r7, #36	; 0x24
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	58000400 	.word	0x58000400

080079c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	460b      	mov	r3, r1
 80079ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	691a      	ldr	r2, [r3, #16]
 80079d0:	887b      	ldrh	r3, [r7, #2]
 80079d2:	4013      	ands	r3, r2
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80079d8:	2301      	movs	r3, #1
 80079da:	73fb      	strb	r3, [r7, #15]
 80079dc:	e001      	b.n	80079e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80079de:	2300      	movs	r3, #0
 80079e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	460b      	mov	r3, r1
 80079fa:	807b      	strh	r3, [r7, #2]
 80079fc:	4613      	mov	r3, r2
 80079fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a00:	787b      	ldrb	r3, [r7, #1]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a06:	887a      	ldrh	r2, [r7, #2]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007a0c:	e003      	b.n	8007a16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007a0e:	887b      	ldrh	r3, [r7, #2]
 8007a10:	041a      	lsls	r2, r3, #16
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	619a      	str	r2, [r3, #24]
}
 8007a16:	bf00      	nop
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
	...

08007a24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e07f      	b.n	8007b36 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d106      	bne.n	8007a50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7fa fb76 	bl	800213c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2224      	movs	r2, #36	; 0x24
 8007a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f022 0201 	bic.w	r2, r2, #1
 8007a66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007a74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	689a      	ldr	r2, [r3, #8]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d107      	bne.n	8007a9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	689a      	ldr	r2, [r3, #8]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a9a:	609a      	str	r2, [r3, #8]
 8007a9c:	e006      	b.n	8007aac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	689a      	ldr	r2, [r3, #8]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007aaa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d104      	bne.n	8007abe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007abc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6859      	ldr	r1, [r3, #4]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	4b1d      	ldr	r3, [pc, #116]	; (8007b40 <HAL_I2C_Init+0x11c>)
 8007aca:	430b      	orrs	r3, r1
 8007acc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68da      	ldr	r2, [r3, #12]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007adc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	691a      	ldr	r2, [r3, #16]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	695b      	ldr	r3, [r3, #20]
 8007ae6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	430a      	orrs	r2, r1
 8007af6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	69d9      	ldr	r1, [r3, #28]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a1a      	ldr	r2, [r3, #32]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	430a      	orrs	r2, r1
 8007b06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f042 0201 	orr.w	r2, r2, #1
 8007b16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2220      	movs	r2, #32
 8007b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	02008000 	.word	0x02008000

08007b44 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b088      	sub	sp, #32
 8007b48:	af02      	add	r7, sp, #8
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	607a      	str	r2, [r7, #4]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	460b      	mov	r3, r1
 8007b52:	817b      	strh	r3, [r7, #10]
 8007b54:	4613      	mov	r3, r2
 8007b56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b20      	cmp	r3, #32
 8007b62:	f040 80da 	bne.w	8007d1a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d101      	bne.n	8007b74 <HAL_I2C_Master_Transmit+0x30>
 8007b70:	2302      	movs	r3, #2
 8007b72:	e0d3      	b.n	8007d1c <HAL_I2C_Master_Transmit+0x1d8>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007b7c:	f7fa fed6 	bl	800292c <HAL_GetTick>
 8007b80:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	9300      	str	r3, [sp, #0]
 8007b86:	2319      	movs	r3, #25
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 f9e6 	bl	8007f60 <I2C_WaitOnFlagUntilTimeout>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e0be      	b.n	8007d1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2221      	movs	r2, #33	; 0x21
 8007ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2210      	movs	r2, #16
 8007baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	893a      	ldrh	r2, [r7, #8]
 8007bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	2bff      	cmp	r3, #255	; 0xff
 8007bce:	d90e      	bls.n	8007bee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	22ff      	movs	r2, #255	; 0xff
 8007bd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	8979      	ldrh	r1, [r7, #10]
 8007bde:	4b51      	ldr	r3, [pc, #324]	; (8007d24 <HAL_I2C_Master_Transmit+0x1e0>)
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f000 fbdc 	bl	80083a4 <I2C_TransferConfig>
 8007bec:	e06c      	b.n	8007cc8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	8979      	ldrh	r1, [r7, #10]
 8007c00:	4b48      	ldr	r3, [pc, #288]	; (8007d24 <HAL_I2C_Master_Transmit+0x1e0>)
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f000 fbcb 	bl	80083a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007c0e:	e05b      	b.n	8007cc8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	6a39      	ldr	r1, [r7, #32]
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f000 f9e3 	bl	8007fe0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d001      	beq.n	8007c24 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e07b      	b.n	8007d1c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c28:	781a      	ldrb	r2, [r3, #0]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c34:	1c5a      	adds	r2, r3, #1
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	3b01      	subs	r3, #1
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d034      	beq.n	8007cc8 <HAL_I2C_Master_Transmit+0x184>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d130      	bne.n	8007cc8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	6a3b      	ldr	r3, [r7, #32]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	2180      	movs	r1, #128	; 0x80
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 f975 	bl	8007f60 <I2C_WaitOnFlagUntilTimeout>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d001      	beq.n	8007c80 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e04d      	b.n	8007d1c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	2bff      	cmp	r3, #255	; 0xff
 8007c88:	d90e      	bls.n	8007ca8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	22ff      	movs	r2, #255	; 0xff
 8007c8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c94:	b2da      	uxtb	r2, r3
 8007c96:	8979      	ldrh	r1, [r7, #10]
 8007c98:	2300      	movs	r3, #0
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f000 fb7f 	bl	80083a4 <I2C_TransferConfig>
 8007ca6:	e00f      	b.n	8007cc8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cb6:	b2da      	uxtb	r2, r3
 8007cb8:	8979      	ldrh	r1, [r7, #10]
 8007cba:	2300      	movs	r3, #0
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f000 fb6e 	bl	80083a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d19e      	bne.n	8007c10 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	6a39      	ldr	r1, [r7, #32]
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f000 f9c2 	bl	8008060 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e01a      	b.n	8007d1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2220      	movs	r2, #32
 8007cec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	6859      	ldr	r1, [r3, #4]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	4b0b      	ldr	r3, [pc, #44]	; (8007d28 <HAL_I2C_Master_Transmit+0x1e4>)
 8007cfa:	400b      	ands	r3, r1
 8007cfc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2220      	movs	r2, #32
 8007d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	e000      	b.n	8007d1c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007d1a:	2302      	movs	r3, #2
  }
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3718      	adds	r7, #24
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	80002000 	.word	0x80002000
 8007d28:	fe00e800 	.word	0xfe00e800

08007d2c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b088      	sub	sp, #32
 8007d30:	af02      	add	r7, sp, #8
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	607a      	str	r2, [r7, #4]
 8007d36:	461a      	mov	r2, r3
 8007d38:	460b      	mov	r3, r1
 8007d3a:	817b      	strh	r3, [r7, #10]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	2b20      	cmp	r3, #32
 8007d4a:	f040 80db 	bne.w	8007f04 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d101      	bne.n	8007d5c <HAL_I2C_Master_Receive+0x30>
 8007d58:	2302      	movs	r3, #2
 8007d5a:	e0d4      	b.n	8007f06 <HAL_I2C_Master_Receive+0x1da>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007d64:	f7fa fde2 	bl	800292c <HAL_GetTick>
 8007d68:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	2319      	movs	r3, #25
 8007d70:	2201      	movs	r2, #1
 8007d72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f000 f8f2 	bl	8007f60 <I2C_WaitOnFlagUntilTimeout>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d001      	beq.n	8007d86 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e0bf      	b.n	8007f06 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2222      	movs	r2, #34	; 0x22
 8007d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2210      	movs	r2, #16
 8007d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	893a      	ldrh	r2, [r7, #8]
 8007da6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	2bff      	cmp	r3, #255	; 0xff
 8007db6:	d90e      	bls.n	8007dd6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	22ff      	movs	r2, #255	; 0xff
 8007dbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dc2:	b2da      	uxtb	r2, r3
 8007dc4:	8979      	ldrh	r1, [r7, #10]
 8007dc6:	4b52      	ldr	r3, [pc, #328]	; (8007f10 <HAL_I2C_Master_Receive+0x1e4>)
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f000 fae8 	bl	80083a4 <I2C_TransferConfig>
 8007dd4:	e06d      	b.n	8007eb2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	8979      	ldrh	r1, [r7, #10]
 8007de8:	4b49      	ldr	r3, [pc, #292]	; (8007f10 <HAL_I2C_Master_Receive+0x1e4>)
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 fad7 	bl	80083a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007df6:	e05c      	b.n	8007eb2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007df8:	697a      	ldr	r2, [r7, #20]
 8007dfa:	6a39      	ldr	r1, [r7, #32]
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f000 f96b 	bl	80080d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d001      	beq.n	8007e0c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e07c      	b.n	8007f06 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e16:	b2d2      	uxtb	r2, r2
 8007e18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1e:	1c5a      	adds	r2, r3, #1
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	3b01      	subs	r3, #1
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d034      	beq.n	8007eb2 <HAL_I2C_Master_Receive+0x186>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d130      	bne.n	8007eb2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	6a3b      	ldr	r3, [r7, #32]
 8007e56:	2200      	movs	r2, #0
 8007e58:	2180      	movs	r1, #128	; 0x80
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f000 f880 	bl	8007f60 <I2C_WaitOnFlagUntilTimeout>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e04d      	b.n	8007f06 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	2bff      	cmp	r3, #255	; 0xff
 8007e72:	d90e      	bls.n	8007e92 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	22ff      	movs	r2, #255	; 0xff
 8007e78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e7e:	b2da      	uxtb	r2, r3
 8007e80:	8979      	ldrh	r1, [r7, #10]
 8007e82:	2300      	movs	r3, #0
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f000 fa8a 	bl	80083a4 <I2C_TransferConfig>
 8007e90:	e00f      	b.n	8007eb2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	8979      	ldrh	r1, [r7, #10]
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f000 fa79 	bl	80083a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d19d      	bne.n	8007df8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	6a39      	ldr	r1, [r7, #32]
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f000 f8cd 	bl	8008060 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e01a      	b.n	8007f06 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2220      	movs	r2, #32
 8007ed6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6859      	ldr	r1, [r3, #4]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	4b0c      	ldr	r3, [pc, #48]	; (8007f14 <HAL_I2C_Master_Receive+0x1e8>)
 8007ee4:	400b      	ands	r3, r1
 8007ee6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2220      	movs	r2, #32
 8007eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f00:	2300      	movs	r3, #0
 8007f02:	e000      	b.n	8007f06 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007f04:	2302      	movs	r3, #2
  }
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3718      	adds	r7, #24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	80002400 	.word	0x80002400
 8007f14:	fe00e800 	.word	0xfe00e800

08007f18 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d103      	bne.n	8007f36 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2200      	movs	r2, #0
 8007f34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d007      	beq.n	8007f54 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	699a      	ldr	r2, [r3, #24]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f042 0201 	orr.w	r2, r2, #1
 8007f52:	619a      	str	r2, [r3, #24]
  }
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	603b      	str	r3, [r7, #0]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f70:	e022      	b.n	8007fb8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f78:	d01e      	beq.n	8007fb8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f7a:	f7fa fcd7 	bl	800292c <HAL_GetTick>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	683a      	ldr	r2, [r7, #0]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d302      	bcc.n	8007f90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d113      	bne.n	8007fb8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f94:	f043 0220 	orr.w	r2, r3, #32
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e00f      	b.n	8007fd8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	699a      	ldr	r2, [r3, #24]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	bf0c      	ite	eq
 8007fc8:	2301      	moveq	r3, #1
 8007fca:	2300      	movne	r3, #0
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	461a      	mov	r2, r3
 8007fd0:	79fb      	ldrb	r3, [r7, #7]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d0cd      	beq.n	8007f72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007fec:	e02c      	b.n	8008048 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	68b9      	ldr	r1, [r7, #8]
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f000 f8ea 	bl	80081cc <I2C_IsErrorOccurred>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e02a      	b.n	8008058 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008008:	d01e      	beq.n	8008048 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800800a:	f7fa fc8f 	bl	800292c <HAL_GetTick>
 800800e:	4602      	mov	r2, r0
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	429a      	cmp	r2, r3
 8008018:	d302      	bcc.n	8008020 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d113      	bne.n	8008048 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008024:	f043 0220 	orr.w	r2, r3, #32
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2220      	movs	r2, #32
 8008030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e007      	b.n	8008058 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	f003 0302 	and.w	r3, r3, #2
 8008052:	2b02      	cmp	r3, #2
 8008054:	d1cb      	bne.n	8007fee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800806c:	e028      	b.n	80080c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	68b9      	ldr	r1, [r7, #8]
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f000 f8aa 	bl	80081cc <I2C_IsErrorOccurred>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d001      	beq.n	8008082 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e026      	b.n	80080d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008082:	f7fa fc53 	bl	800292c <HAL_GetTick>
 8008086:	4602      	mov	r2, r0
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	429a      	cmp	r2, r3
 8008090:	d302      	bcc.n	8008098 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d113      	bne.n	80080c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800809c:	f043 0220 	orr.w	r2, r3, #32
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2220      	movs	r2, #32
 80080a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e007      	b.n	80080d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	f003 0320 	and.w	r3, r3, #32
 80080ca:	2b20      	cmp	r3, #32
 80080cc:	d1cf      	bne.n	800806e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80080e4:	e064      	b.n	80081b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	68b9      	ldr	r1, [r7, #8]
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f000 f86e 	bl	80081cc <I2C_IsErrorOccurred>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e062      	b.n	80081c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	f003 0320 	and.w	r3, r3, #32
 8008104:	2b20      	cmp	r3, #32
 8008106:	d138      	bne.n	800817a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	f003 0304 	and.w	r3, r3, #4
 8008112:	2b04      	cmp	r3, #4
 8008114:	d105      	bne.n	8008122 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800811a:	2b00      	cmp	r3, #0
 800811c:	d001      	beq.n	8008122 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800811e:	2300      	movs	r3, #0
 8008120:	e04e      	b.n	80081c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	f003 0310 	and.w	r3, r3, #16
 800812c:	2b10      	cmp	r3, #16
 800812e:	d107      	bne.n	8008140 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2210      	movs	r2, #16
 8008136:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2204      	movs	r2, #4
 800813c:	645a      	str	r2, [r3, #68]	; 0x44
 800813e:	e002      	b.n	8008146 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2220      	movs	r2, #32
 800814c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	6859      	ldr	r1, [r3, #4]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	4b1b      	ldr	r3, [pc, #108]	; (80081c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800815a:	400b      	ands	r3, r1
 800815c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2220      	movs	r2, #32
 8008162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	e022      	b.n	80081c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800817a:	f7fa fbd7 	bl	800292c <HAL_GetTick>
 800817e:	4602      	mov	r2, r0
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	429a      	cmp	r2, r3
 8008188:	d302      	bcc.n	8008190 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d10f      	bne.n	80081b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008194:	f043 0220 	orr.w	r2, r3, #32
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2220      	movs	r2, #32
 80081a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e007      	b.n	80081c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	f003 0304 	and.w	r3, r3, #4
 80081ba:	2b04      	cmp	r3, #4
 80081bc:	d193      	bne.n	80080e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	fe00e800 	.word	0xfe00e800

080081cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b08a      	sub	sp, #40	; 0x28
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80081e6:	2300      	movs	r3, #0
 80081e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	f003 0310 	and.w	r3, r3, #16
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d075      	beq.n	80082e4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2210      	movs	r2, #16
 80081fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008200:	e056      	b.n	80082b0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008208:	d052      	beq.n	80082b0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800820a:	f7fa fb8f 	bl	800292c <HAL_GetTick>
 800820e:	4602      	mov	r2, r0
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	429a      	cmp	r2, r3
 8008218:	d302      	bcc.n	8008220 <I2C_IsErrorOccurred+0x54>
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d147      	bne.n	80082b0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800822a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008232:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800823e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008242:	d12e      	bne.n	80082a2 <I2C_IsErrorOccurred+0xd6>
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800824a:	d02a      	beq.n	80082a2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800824c:	7cfb      	ldrb	r3, [r7, #19]
 800824e:	2b20      	cmp	r3, #32
 8008250:	d027      	beq.n	80082a2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	685a      	ldr	r2, [r3, #4]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008260:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008262:	f7fa fb63 	bl	800292c <HAL_GetTick>
 8008266:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008268:	e01b      	b.n	80082a2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800826a:	f7fa fb5f 	bl	800292c <HAL_GetTick>
 800826e:	4602      	mov	r2, r0
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	2b19      	cmp	r3, #25
 8008276:	d914      	bls.n	80082a2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800827c:	f043 0220 	orr.w	r2, r3, #32
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2220      	movs	r2, #32
 8008288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	f003 0320 	and.w	r3, r3, #32
 80082ac:	2b20      	cmp	r3, #32
 80082ae:	d1dc      	bne.n	800826a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	f003 0320 	and.w	r3, r3, #32
 80082ba:	2b20      	cmp	r3, #32
 80082bc:	d003      	beq.n	80082c6 <I2C_IsErrorOccurred+0xfa>
 80082be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d09d      	beq.n	8008202 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80082c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d103      	bne.n	80082d6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2220      	movs	r2, #32
 80082d4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80082d6:	6a3b      	ldr	r3, [r7, #32]
 80082d8:	f043 0304 	orr.w	r3, r3, #4
 80082dc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00b      	beq.n	800830e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80082f6:	6a3b      	ldr	r3, [r7, #32]
 80082f8:	f043 0301 	orr.w	r3, r3, #1
 80082fc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008306:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00b      	beq.n	8008330 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008318:	6a3b      	ldr	r3, [r7, #32]
 800831a:	f043 0308 	orr.w	r3, r3, #8
 800831e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008328:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00b      	beq.n	8008352 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	f043 0302 	orr.w	r3, r3, #2
 8008340:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800834a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008352:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008356:	2b00      	cmp	r3, #0
 8008358:	d01c      	beq.n	8008394 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f7ff fddc 	bl	8007f18 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	6859      	ldr	r1, [r3, #4]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	4b0d      	ldr	r3, [pc, #52]	; (80083a0 <I2C_IsErrorOccurred+0x1d4>)
 800836c:	400b      	ands	r3, r1
 800836e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008374:	6a3b      	ldr	r3, [r7, #32]
 8008376:	431a      	orrs	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2220      	movs	r2, #32
 8008380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2200      	movs	r2, #0
 8008388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008398:	4618      	mov	r0, r3
 800839a:	3728      	adds	r7, #40	; 0x28
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	fe00e800 	.word	0xfe00e800

080083a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b087      	sub	sp, #28
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	607b      	str	r3, [r7, #4]
 80083ae:	460b      	mov	r3, r1
 80083b0:	817b      	strh	r3, [r7, #10]
 80083b2:	4613      	mov	r3, r2
 80083b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80083b6:	897b      	ldrh	r3, [r7, #10]
 80083b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80083bc:	7a7b      	ldrb	r3, [r7, #9]
 80083be:	041b      	lsls	r3, r3, #16
 80083c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80083c4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80083ca:	6a3b      	ldr	r3, [r7, #32]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083d2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	685a      	ldr	r2, [r3, #4]
 80083da:	6a3b      	ldr	r3, [r7, #32]
 80083dc:	0d5b      	lsrs	r3, r3, #21
 80083de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80083e2:	4b08      	ldr	r3, [pc, #32]	; (8008404 <I2C_TransferConfig+0x60>)
 80083e4:	430b      	orrs	r3, r1
 80083e6:	43db      	mvns	r3, r3
 80083e8:	ea02 0103 	and.w	r1, r2, r3
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	697a      	ldr	r2, [r7, #20]
 80083f2:	430a      	orrs	r2, r1
 80083f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80083f6:	bf00      	nop
 80083f8:	371c      	adds	r7, #28
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	03ff63ff 	.word	0x03ff63ff

08008408 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b20      	cmp	r3, #32
 800841c:	d138      	bne.n	8008490 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008424:	2b01      	cmp	r3, #1
 8008426:	d101      	bne.n	800842c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008428:	2302      	movs	r3, #2
 800842a:	e032      	b.n	8008492 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2224      	movs	r2, #36	; 0x24
 8008438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f022 0201 	bic.w	r2, r2, #1
 800844a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800845a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	6819      	ldr	r1, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	430a      	orrs	r2, r1
 800846a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f042 0201 	orr.w	r2, r2, #1
 800847a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2220      	movs	r2, #32
 8008480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	e000      	b.n	8008492 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008490:	2302      	movs	r3, #2
  }
}
 8008492:	4618      	mov	r0, r3
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr

0800849e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800849e:	b480      	push	{r7}
 80084a0:	b085      	sub	sp, #20
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
 80084a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b20      	cmp	r3, #32
 80084b2:	d139      	bne.n	8008528 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d101      	bne.n	80084c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80084be:	2302      	movs	r3, #2
 80084c0:	e033      	b.n	800852a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2224      	movs	r2, #36	; 0x24
 80084ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f022 0201 	bic.w	r2, r2, #1
 80084e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80084f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	021b      	lsls	r3, r3, #8
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f042 0201 	orr.w	r2, r2, #1
 8008512:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2220      	movs	r2, #32
 8008518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008524:	2300      	movs	r3, #0
 8008526:	e000      	b.n	800852a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008528:	2302      	movs	r3, #2
  }
}
 800852a:	4618      	mov	r0, r3
 800852c:	3714      	adds	r7, #20
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
	...

08008538 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	460b      	mov	r3, r1
 8008542:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8008544:	4b18      	ldr	r3, [pc, #96]	; (80085a8 <HAL_PWR_EnterSTOPMode+0x70>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f023 0201 	bic.w	r2, r3, #1
 800854c:	4916      	ldr	r1, [pc, #88]	; (80085a8 <HAL_PWR_EnterSTOPMode+0x70>)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4313      	orrs	r3, r2
 8008552:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8008554:	4b14      	ldr	r3, [pc, #80]	; (80085a8 <HAL_PWR_EnterSTOPMode+0x70>)
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	4a13      	ldr	r2, [pc, #76]	; (80085a8 <HAL_PWR_EnterSTOPMode+0x70>)
 800855a:	f023 0305 	bic.w	r3, r3, #5
 800855e:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8008560:	4b11      	ldr	r3, [pc, #68]	; (80085a8 <HAL_PWR_EnterSTOPMode+0x70>)
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	4a10      	ldr	r2, [pc, #64]	; (80085a8 <HAL_PWR_EnterSTOPMode+0x70>)
 8008566:	f023 0302 	bic.w	r3, r3, #2
 800856a:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800856c:	4b0f      	ldr	r3, [pc, #60]	; (80085ac <HAL_PWR_EnterSTOPMode+0x74>)
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	4a0e      	ldr	r2, [pc, #56]	; (80085ac <HAL_PWR_EnterSTOPMode+0x74>)
 8008572:	f043 0304 	orr.w	r3, r3, #4
 8008576:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8008578:	f3bf 8f4f 	dsb	sy
}
 800857c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800857e:	f3bf 8f6f 	isb	sy
}
 8008582:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8008584:	78fb      	ldrb	r3, [r7, #3]
 8008586:	2b01      	cmp	r3, #1
 8008588:	d101      	bne.n	800858e <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800858a:	bf30      	wfi
 800858c:	e000      	b.n	8008590 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800858e:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008590:	4b06      	ldr	r3, [pc, #24]	; (80085ac <HAL_PWR_EnterSTOPMode+0x74>)
 8008592:	691b      	ldr	r3, [r3, #16]
 8008594:	4a05      	ldr	r2, [pc, #20]	; (80085ac <HAL_PWR_EnterSTOPMode+0x74>)
 8008596:	f023 0304 	bic.w	r3, r3, #4
 800859a:	6113      	str	r3, [r2, #16]
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr
 80085a8:	58024800 	.word	0x58024800
 80085ac:	e000ed00 	.word	0xe000ed00

080085b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80085b8:	4b19      	ldr	r3, [pc, #100]	; (8008620 <HAL_PWREx_ConfigSupply+0x70>)
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	f003 0304 	and.w	r3, r3, #4
 80085c0:	2b04      	cmp	r3, #4
 80085c2:	d00a      	beq.n	80085da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80085c4:	4b16      	ldr	r3, [pc, #88]	; (8008620 <HAL_PWREx_ConfigSupply+0x70>)
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	f003 0307 	and.w	r3, r3, #7
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d001      	beq.n	80085d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e01f      	b.n	8008616 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	e01d      	b.n	8008616 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80085da:	4b11      	ldr	r3, [pc, #68]	; (8008620 <HAL_PWREx_ConfigSupply+0x70>)
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	f023 0207 	bic.w	r2, r3, #7
 80085e2:	490f      	ldr	r1, [pc, #60]	; (8008620 <HAL_PWREx_ConfigSupply+0x70>)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80085ea:	f7fa f99f 	bl	800292c <HAL_GetTick>
 80085ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80085f0:	e009      	b.n	8008606 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80085f2:	f7fa f99b 	bl	800292c <HAL_GetTick>
 80085f6:	4602      	mov	r2, r0
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008600:	d901      	bls.n	8008606 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e007      	b.n	8008616 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008606:	4b06      	ldr	r3, [pc, #24]	; (8008620 <HAL_PWREx_ConfigSupply+0x70>)
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800860e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008612:	d1ee      	bne.n	80085f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	58024800 	.word	0x58024800

08008624 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b08c      	sub	sp, #48	; 0x30
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d102      	bne.n	8008638 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	f000 bc1d 	b.w	8008e72 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 0301 	and.w	r3, r3, #1
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 8087 	beq.w	8008754 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008646:	4b99      	ldr	r3, [pc, #612]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800864e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008650:	4b96      	ldr	r3, [pc, #600]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 8008652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008654:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008658:	2b10      	cmp	r3, #16
 800865a:	d007      	beq.n	800866c <HAL_RCC_OscConfig+0x48>
 800865c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865e:	2b18      	cmp	r3, #24
 8008660:	d110      	bne.n	8008684 <HAL_RCC_OscConfig+0x60>
 8008662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008664:	f003 0303 	and.w	r3, r3, #3
 8008668:	2b02      	cmp	r3, #2
 800866a:	d10b      	bne.n	8008684 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800866c:	4b8f      	ldr	r3, [pc, #572]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008674:	2b00      	cmp	r3, #0
 8008676:	d06c      	beq.n	8008752 <HAL_RCC_OscConfig+0x12e>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d168      	bne.n	8008752 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e3f6      	b.n	8008e72 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800868c:	d106      	bne.n	800869c <HAL_RCC_OscConfig+0x78>
 800868e:	4b87      	ldr	r3, [pc, #540]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a86      	ldr	r2, [pc, #536]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 8008694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008698:	6013      	str	r3, [r2, #0]
 800869a:	e02e      	b.n	80086fa <HAL_RCC_OscConfig+0xd6>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10c      	bne.n	80086be <HAL_RCC_OscConfig+0x9a>
 80086a4:	4b81      	ldr	r3, [pc, #516]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a80      	ldr	r2, [pc, #512]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 80086aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086ae:	6013      	str	r3, [r2, #0]
 80086b0:	4b7e      	ldr	r3, [pc, #504]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a7d      	ldr	r2, [pc, #500]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 80086b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086ba:	6013      	str	r3, [r2, #0]
 80086bc:	e01d      	b.n	80086fa <HAL_RCC_OscConfig+0xd6>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086c6:	d10c      	bne.n	80086e2 <HAL_RCC_OscConfig+0xbe>
 80086c8:	4b78      	ldr	r3, [pc, #480]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a77      	ldr	r2, [pc, #476]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 80086ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086d2:	6013      	str	r3, [r2, #0]
 80086d4:	4b75      	ldr	r3, [pc, #468]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a74      	ldr	r2, [pc, #464]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 80086da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086de:	6013      	str	r3, [r2, #0]
 80086e0:	e00b      	b.n	80086fa <HAL_RCC_OscConfig+0xd6>
 80086e2:	4b72      	ldr	r3, [pc, #456]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a71      	ldr	r2, [pc, #452]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 80086e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086ec:	6013      	str	r3, [r2, #0]
 80086ee:	4b6f      	ldr	r3, [pc, #444]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a6e      	ldr	r2, [pc, #440]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 80086f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d013      	beq.n	800872a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008702:	f7fa f913 	bl	800292c <HAL_GetTick>
 8008706:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008708:	e008      	b.n	800871c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800870a:	f7fa f90f 	bl	800292c <HAL_GetTick>
 800870e:	4602      	mov	r2, r0
 8008710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	2b64      	cmp	r3, #100	; 0x64
 8008716:	d901      	bls.n	800871c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008718:	2303      	movs	r3, #3
 800871a:	e3aa      	b.n	8008e72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800871c:	4b63      	ldr	r3, [pc, #396]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d0f0      	beq.n	800870a <HAL_RCC_OscConfig+0xe6>
 8008728:	e014      	b.n	8008754 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800872a:	f7fa f8ff 	bl	800292c <HAL_GetTick>
 800872e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008730:	e008      	b.n	8008744 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008732:	f7fa f8fb 	bl	800292c <HAL_GetTick>
 8008736:	4602      	mov	r2, r0
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	2b64      	cmp	r3, #100	; 0x64
 800873e:	d901      	bls.n	8008744 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e396      	b.n	8008e72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008744:	4b59      	ldr	r3, [pc, #356]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1f0      	bne.n	8008732 <HAL_RCC_OscConfig+0x10e>
 8008750:	e000      	b.n	8008754 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008752:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 0302 	and.w	r3, r3, #2
 800875c:	2b00      	cmp	r3, #0
 800875e:	f000 80cb 	beq.w	80088f8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008762:	4b52      	ldr	r3, [pc, #328]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800876a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800876c:	4b4f      	ldr	r3, [pc, #316]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 800876e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008770:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008772:	6a3b      	ldr	r3, [r7, #32]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d007      	beq.n	8008788 <HAL_RCC_OscConfig+0x164>
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	2b18      	cmp	r3, #24
 800877c:	d156      	bne.n	800882c <HAL_RCC_OscConfig+0x208>
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	f003 0303 	and.w	r3, r3, #3
 8008784:	2b00      	cmp	r3, #0
 8008786:	d151      	bne.n	800882c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008788:	4b48      	ldr	r3, [pc, #288]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 0304 	and.w	r3, r3, #4
 8008790:	2b00      	cmp	r3, #0
 8008792:	d005      	beq.n	80087a0 <HAL_RCC_OscConfig+0x17c>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d101      	bne.n	80087a0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	e368      	b.n	8008e72 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80087a0:	4b42      	ldr	r3, [pc, #264]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f023 0219 	bic.w	r2, r3, #25
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	493f      	ldr	r1, [pc, #252]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 80087ae:	4313      	orrs	r3, r2
 80087b0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80087b2:	f7fa f8bb 	bl	800292c <HAL_GetTick>
 80087b6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087b8:	e008      	b.n	80087cc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087ba:	f7fa f8b7 	bl	800292c <HAL_GetTick>
 80087be:	4602      	mov	r2, r0
 80087c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c2:	1ad3      	subs	r3, r2, r3
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d901      	bls.n	80087cc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80087c8:	2303      	movs	r3, #3
 80087ca:	e352      	b.n	8008e72 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087cc:	4b37      	ldr	r3, [pc, #220]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f003 0304 	and.w	r3, r3, #4
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d0f0      	beq.n	80087ba <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087d8:	f7fa f8e8 	bl	80029ac <HAL_GetREVID>
 80087dc:	4603      	mov	r3, r0
 80087de:	f241 0203 	movw	r2, #4099	; 0x1003
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d817      	bhi.n	8008816 <HAL_RCC_OscConfig+0x1f2>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	2b40      	cmp	r3, #64	; 0x40
 80087ec:	d108      	bne.n	8008800 <HAL_RCC_OscConfig+0x1dc>
 80087ee:	4b2f      	ldr	r3, [pc, #188]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80087f6:	4a2d      	ldr	r2, [pc, #180]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 80087f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087fc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087fe:	e07b      	b.n	80088f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008800:	4b2a      	ldr	r3, [pc, #168]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	031b      	lsls	r3, r3, #12
 800880e:	4927      	ldr	r1, [pc, #156]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 8008810:	4313      	orrs	r3, r2
 8008812:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008814:	e070      	b.n	80088f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008816:	4b25      	ldr	r3, [pc, #148]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	061b      	lsls	r3, r3, #24
 8008824:	4921      	ldr	r1, [pc, #132]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 8008826:	4313      	orrs	r3, r2
 8008828:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800882a:	e065      	b.n	80088f8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d048      	beq.n	80088c6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008834:	4b1d      	ldr	r3, [pc, #116]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f023 0219 	bic.w	r2, r3, #25
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	491a      	ldr	r1, [pc, #104]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 8008842:	4313      	orrs	r3, r2
 8008844:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008846:	f7fa f871 	bl	800292c <HAL_GetTick>
 800884a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800884c:	e008      	b.n	8008860 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800884e:	f7fa f86d 	bl	800292c <HAL_GetTick>
 8008852:	4602      	mov	r2, r0
 8008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	2b02      	cmp	r3, #2
 800885a:	d901      	bls.n	8008860 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800885c:	2303      	movs	r3, #3
 800885e:	e308      	b.n	8008e72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008860:	4b12      	ldr	r3, [pc, #72]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 0304 	and.w	r3, r3, #4
 8008868:	2b00      	cmp	r3, #0
 800886a:	d0f0      	beq.n	800884e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800886c:	f7fa f89e 	bl	80029ac <HAL_GetREVID>
 8008870:	4603      	mov	r3, r0
 8008872:	f241 0203 	movw	r2, #4099	; 0x1003
 8008876:	4293      	cmp	r3, r2
 8008878:	d81a      	bhi.n	80088b0 <HAL_RCC_OscConfig+0x28c>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	2b40      	cmp	r3, #64	; 0x40
 8008880:	d108      	bne.n	8008894 <HAL_RCC_OscConfig+0x270>
 8008882:	4b0a      	ldr	r3, [pc, #40]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800888a:	4a08      	ldr	r2, [pc, #32]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 800888c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008890:	6053      	str	r3, [r2, #4]
 8008892:	e031      	b.n	80088f8 <HAL_RCC_OscConfig+0x2d4>
 8008894:	4b05      	ldr	r3, [pc, #20]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	691b      	ldr	r3, [r3, #16]
 80088a0:	031b      	lsls	r3, r3, #12
 80088a2:	4902      	ldr	r1, [pc, #8]	; (80088ac <HAL_RCC_OscConfig+0x288>)
 80088a4:	4313      	orrs	r3, r2
 80088a6:	604b      	str	r3, [r1, #4]
 80088a8:	e026      	b.n	80088f8 <HAL_RCC_OscConfig+0x2d4>
 80088aa:	bf00      	nop
 80088ac:	58024400 	.word	0x58024400
 80088b0:	4b9a      	ldr	r3, [pc, #616]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	061b      	lsls	r3, r3, #24
 80088be:	4997      	ldr	r1, [pc, #604]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 80088c0:	4313      	orrs	r3, r2
 80088c2:	604b      	str	r3, [r1, #4]
 80088c4:	e018      	b.n	80088f8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088c6:	4b95      	ldr	r3, [pc, #596]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a94      	ldr	r2, [pc, #592]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 80088cc:	f023 0301 	bic.w	r3, r3, #1
 80088d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088d2:	f7fa f82b 	bl	800292c <HAL_GetTick>
 80088d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80088d8:	e008      	b.n	80088ec <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088da:	f7fa f827 	bl	800292c <HAL_GetTick>
 80088de:	4602      	mov	r2, r0
 80088e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d901      	bls.n	80088ec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80088e8:	2303      	movs	r3, #3
 80088ea:	e2c2      	b.n	8008e72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80088ec:	4b8b      	ldr	r3, [pc, #556]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0304 	and.w	r3, r3, #4
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d1f0      	bne.n	80088da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 0310 	and.w	r3, r3, #16
 8008900:	2b00      	cmp	r3, #0
 8008902:	f000 80a9 	beq.w	8008a58 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008906:	4b85      	ldr	r3, [pc, #532]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800890e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008910:	4b82      	ldr	r3, [pc, #520]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 8008912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008914:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	2b08      	cmp	r3, #8
 800891a:	d007      	beq.n	800892c <HAL_RCC_OscConfig+0x308>
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	2b18      	cmp	r3, #24
 8008920:	d13a      	bne.n	8008998 <HAL_RCC_OscConfig+0x374>
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	f003 0303 	and.w	r3, r3, #3
 8008928:	2b01      	cmp	r3, #1
 800892a:	d135      	bne.n	8008998 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800892c:	4b7b      	ldr	r3, [pc, #492]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008934:	2b00      	cmp	r3, #0
 8008936:	d005      	beq.n	8008944 <HAL_RCC_OscConfig+0x320>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	69db      	ldr	r3, [r3, #28]
 800893c:	2b80      	cmp	r3, #128	; 0x80
 800893e:	d001      	beq.n	8008944 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	e296      	b.n	8008e72 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008944:	f7fa f832 	bl	80029ac <HAL_GetREVID>
 8008948:	4603      	mov	r3, r0
 800894a:	f241 0203 	movw	r2, #4099	; 0x1003
 800894e:	4293      	cmp	r3, r2
 8008950:	d817      	bhi.n	8008982 <HAL_RCC_OscConfig+0x35e>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a1b      	ldr	r3, [r3, #32]
 8008956:	2b20      	cmp	r3, #32
 8008958:	d108      	bne.n	800896c <HAL_RCC_OscConfig+0x348>
 800895a:	4b70      	ldr	r3, [pc, #448]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008962:	4a6e      	ldr	r2, [pc, #440]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 8008964:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008968:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800896a:	e075      	b.n	8008a58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800896c:	4b6b      	ldr	r3, [pc, #428]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a1b      	ldr	r3, [r3, #32]
 8008978:	069b      	lsls	r3, r3, #26
 800897a:	4968      	ldr	r1, [pc, #416]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 800897c:	4313      	orrs	r3, r2
 800897e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008980:	e06a      	b.n	8008a58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008982:	4b66      	ldr	r3, [pc, #408]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a1b      	ldr	r3, [r3, #32]
 800898e:	061b      	lsls	r3, r3, #24
 8008990:	4962      	ldr	r1, [pc, #392]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 8008992:	4313      	orrs	r3, r2
 8008994:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008996:	e05f      	b.n	8008a58 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	69db      	ldr	r3, [r3, #28]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d042      	beq.n	8008a26 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80089a0:	4b5e      	ldr	r3, [pc, #376]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a5d      	ldr	r2, [pc, #372]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 80089a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ac:	f7f9 ffbe 	bl	800292c <HAL_GetTick>
 80089b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80089b2:	e008      	b.n	80089c6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80089b4:	f7f9 ffba 	bl	800292c <HAL_GetTick>
 80089b8:	4602      	mov	r2, r0
 80089ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d901      	bls.n	80089c6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e255      	b.n	8008e72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80089c6:	4b55      	ldr	r3, [pc, #340]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d0f0      	beq.n	80089b4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089d2:	f7f9 ffeb 	bl	80029ac <HAL_GetREVID>
 80089d6:	4603      	mov	r3, r0
 80089d8:	f241 0203 	movw	r2, #4099	; 0x1003
 80089dc:	4293      	cmp	r3, r2
 80089de:	d817      	bhi.n	8008a10 <HAL_RCC_OscConfig+0x3ec>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a1b      	ldr	r3, [r3, #32]
 80089e4:	2b20      	cmp	r3, #32
 80089e6:	d108      	bne.n	80089fa <HAL_RCC_OscConfig+0x3d6>
 80089e8:	4b4c      	ldr	r3, [pc, #304]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80089f0:	4a4a      	ldr	r2, [pc, #296]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 80089f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089f6:	6053      	str	r3, [r2, #4]
 80089f8:	e02e      	b.n	8008a58 <HAL_RCC_OscConfig+0x434>
 80089fa:	4b48      	ldr	r3, [pc, #288]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	069b      	lsls	r3, r3, #26
 8008a08:	4944      	ldr	r1, [pc, #272]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	604b      	str	r3, [r1, #4]
 8008a0e:	e023      	b.n	8008a58 <HAL_RCC_OscConfig+0x434>
 8008a10:	4b42      	ldr	r3, [pc, #264]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6a1b      	ldr	r3, [r3, #32]
 8008a1c:	061b      	lsls	r3, r3, #24
 8008a1e:	493f      	ldr	r1, [pc, #252]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 8008a20:	4313      	orrs	r3, r2
 8008a22:	60cb      	str	r3, [r1, #12]
 8008a24:	e018      	b.n	8008a58 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008a26:	4b3d      	ldr	r3, [pc, #244]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a3c      	ldr	r2, [pc, #240]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 8008a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a32:	f7f9 ff7b 	bl	800292c <HAL_GetTick>
 8008a36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a38:	e008      	b.n	8008a4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008a3a:	f7f9 ff77 	bl	800292c <HAL_GetTick>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	d901      	bls.n	8008a4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	e212      	b.n	8008e72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a4c:	4b33      	ldr	r3, [pc, #204]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1f0      	bne.n	8008a3a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 0308 	and.w	r3, r3, #8
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d036      	beq.n	8008ad2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	695b      	ldr	r3, [r3, #20]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d019      	beq.n	8008aa0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a6c:	4b2b      	ldr	r3, [pc, #172]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 8008a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a70:	4a2a      	ldr	r2, [pc, #168]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 8008a72:	f043 0301 	orr.w	r3, r3, #1
 8008a76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a78:	f7f9 ff58 	bl	800292c <HAL_GetTick>
 8008a7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a7e:	e008      	b.n	8008a92 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a80:	f7f9 ff54 	bl	800292c <HAL_GetTick>
 8008a84:	4602      	mov	r2, r0
 8008a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d901      	bls.n	8008a92 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	e1ef      	b.n	8008e72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a92:	4b22      	ldr	r3, [pc, #136]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 8008a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a96:	f003 0302 	and.w	r3, r3, #2
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d0f0      	beq.n	8008a80 <HAL_RCC_OscConfig+0x45c>
 8008a9e:	e018      	b.n	8008ad2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008aa0:	4b1e      	ldr	r3, [pc, #120]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 8008aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aa4:	4a1d      	ldr	r2, [pc, #116]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 8008aa6:	f023 0301 	bic.w	r3, r3, #1
 8008aaa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aac:	f7f9 ff3e 	bl	800292c <HAL_GetTick>
 8008ab0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008ab2:	e008      	b.n	8008ac6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ab4:	f7f9 ff3a 	bl	800292c <HAL_GetTick>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d901      	bls.n	8008ac6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e1d5      	b.n	8008e72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008ac6:	4b15      	ldr	r3, [pc, #84]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 8008ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aca:	f003 0302 	and.w	r3, r3, #2
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1f0      	bne.n	8008ab4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 0320 	and.w	r3, r3, #32
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d039      	beq.n	8008b52 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	699b      	ldr	r3, [r3, #24]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d01c      	beq.n	8008b20 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008ae6:	4b0d      	ldr	r3, [pc, #52]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a0c      	ldr	r2, [pc, #48]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 8008aec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008af0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008af2:	f7f9 ff1b 	bl	800292c <HAL_GetTick>
 8008af6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008af8:	e008      	b.n	8008b0c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008afa:	f7f9 ff17 	bl	800292c <HAL_GetTick>
 8008afe:	4602      	mov	r2, r0
 8008b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	d901      	bls.n	8008b0c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e1b2      	b.n	8008e72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008b0c:	4b03      	ldr	r3, [pc, #12]	; (8008b1c <HAL_RCC_OscConfig+0x4f8>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d0f0      	beq.n	8008afa <HAL_RCC_OscConfig+0x4d6>
 8008b18:	e01b      	b.n	8008b52 <HAL_RCC_OscConfig+0x52e>
 8008b1a:	bf00      	nop
 8008b1c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008b20:	4b9b      	ldr	r3, [pc, #620]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a9a      	ldr	r2, [pc, #616]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008b26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b2a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008b2c:	f7f9 fefe 	bl	800292c <HAL_GetTick>
 8008b30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b32:	e008      	b.n	8008b46 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008b34:	f7f9 fefa 	bl	800292c <HAL_GetTick>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	d901      	bls.n	8008b46 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e195      	b.n	8008e72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b46:	4b92      	ldr	r3, [pc, #584]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1f0      	bne.n	8008b34 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 0304 	and.w	r3, r3, #4
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f000 8081 	beq.w	8008c62 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008b60:	4b8c      	ldr	r3, [pc, #560]	; (8008d94 <HAL_RCC_OscConfig+0x770>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a8b      	ldr	r2, [pc, #556]	; (8008d94 <HAL_RCC_OscConfig+0x770>)
 8008b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b6c:	f7f9 fede 	bl	800292c <HAL_GetTick>
 8008b70:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b72:	e008      	b.n	8008b86 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008b74:	f7f9 feda 	bl	800292c <HAL_GetTick>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7c:	1ad3      	subs	r3, r2, r3
 8008b7e:	2b64      	cmp	r3, #100	; 0x64
 8008b80:	d901      	bls.n	8008b86 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e175      	b.n	8008e72 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b86:	4b83      	ldr	r3, [pc, #524]	; (8008d94 <HAL_RCC_OscConfig+0x770>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d0f0      	beq.n	8008b74 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d106      	bne.n	8008ba8 <HAL_RCC_OscConfig+0x584>
 8008b9a:	4b7d      	ldr	r3, [pc, #500]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b9e:	4a7c      	ldr	r2, [pc, #496]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008ba0:	f043 0301 	orr.w	r3, r3, #1
 8008ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8008ba6:	e02d      	b.n	8008c04 <HAL_RCC_OscConfig+0x5e0>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d10c      	bne.n	8008bca <HAL_RCC_OscConfig+0x5a6>
 8008bb0:	4b77      	ldr	r3, [pc, #476]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb4:	4a76      	ldr	r2, [pc, #472]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008bb6:	f023 0301 	bic.w	r3, r3, #1
 8008bba:	6713      	str	r3, [r2, #112]	; 0x70
 8008bbc:	4b74      	ldr	r3, [pc, #464]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bc0:	4a73      	ldr	r2, [pc, #460]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008bc2:	f023 0304 	bic.w	r3, r3, #4
 8008bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8008bc8:	e01c      	b.n	8008c04 <HAL_RCC_OscConfig+0x5e0>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	2b05      	cmp	r3, #5
 8008bd0:	d10c      	bne.n	8008bec <HAL_RCC_OscConfig+0x5c8>
 8008bd2:	4b6f      	ldr	r3, [pc, #444]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bd6:	4a6e      	ldr	r2, [pc, #440]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008bd8:	f043 0304 	orr.w	r3, r3, #4
 8008bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8008bde:	4b6c      	ldr	r3, [pc, #432]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008be2:	4a6b      	ldr	r2, [pc, #428]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008be4:	f043 0301 	orr.w	r3, r3, #1
 8008be8:	6713      	str	r3, [r2, #112]	; 0x70
 8008bea:	e00b      	b.n	8008c04 <HAL_RCC_OscConfig+0x5e0>
 8008bec:	4b68      	ldr	r3, [pc, #416]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf0:	4a67      	ldr	r2, [pc, #412]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008bf2:	f023 0301 	bic.w	r3, r3, #1
 8008bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8008bf8:	4b65      	ldr	r3, [pc, #404]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bfc:	4a64      	ldr	r2, [pc, #400]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008bfe:	f023 0304 	bic.w	r3, r3, #4
 8008c02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d015      	beq.n	8008c38 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c0c:	f7f9 fe8e 	bl	800292c <HAL_GetTick>
 8008c10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c12:	e00a      	b.n	8008c2a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c14:	f7f9 fe8a 	bl	800292c <HAL_GetTick>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d901      	bls.n	8008c2a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008c26:	2303      	movs	r3, #3
 8008c28:	e123      	b.n	8008e72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c2a:	4b59      	ldr	r3, [pc, #356]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c2e:	f003 0302 	and.w	r3, r3, #2
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d0ee      	beq.n	8008c14 <HAL_RCC_OscConfig+0x5f0>
 8008c36:	e014      	b.n	8008c62 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c38:	f7f9 fe78 	bl	800292c <HAL_GetTick>
 8008c3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c3e:	e00a      	b.n	8008c56 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c40:	f7f9 fe74 	bl	800292c <HAL_GetTick>
 8008c44:	4602      	mov	r2, r0
 8008c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c48:	1ad3      	subs	r3, r2, r3
 8008c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d901      	bls.n	8008c56 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008c52:	2303      	movs	r3, #3
 8008c54:	e10d      	b.n	8008e72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c56:	4b4e      	ldr	r3, [pc, #312]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c5a:	f003 0302 	and.w	r3, r3, #2
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1ee      	bne.n	8008c40 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	f000 8102 	beq.w	8008e70 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008c6c:	4b48      	ldr	r3, [pc, #288]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008c6e:	691b      	ldr	r3, [r3, #16]
 8008c70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c74:	2b18      	cmp	r3, #24
 8008c76:	f000 80bd 	beq.w	8008df4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	f040 809e 	bne.w	8008dc0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c84:	4b42      	ldr	r3, [pc, #264]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a41      	ldr	r2, [pc, #260]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c90:	f7f9 fe4c 	bl	800292c <HAL_GetTick>
 8008c94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c96:	e008      	b.n	8008caa <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c98:	f7f9 fe48 	bl	800292c <HAL_GetTick>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d901      	bls.n	8008caa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	e0e3      	b.n	8008e72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008caa:	4b39      	ldr	r3, [pc, #228]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1f0      	bne.n	8008c98 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008cb6:	4b36      	ldr	r3, [pc, #216]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008cb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cba:	4b37      	ldr	r3, [pc, #220]	; (8008d98 <HAL_RCC_OscConfig+0x774>)
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008cc6:	0112      	lsls	r2, r2, #4
 8008cc8:	430a      	orrs	r2, r1
 8008cca:	4931      	ldr	r1, [pc, #196]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	628b      	str	r3, [r1, #40]	; 0x28
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	025b      	lsls	r3, r3, #9
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	431a      	orrs	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cea:	3b01      	subs	r3, #1
 8008cec:	041b      	lsls	r3, r3, #16
 8008cee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008cf2:	431a      	orrs	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	061b      	lsls	r3, r3, #24
 8008cfc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008d00:	4923      	ldr	r1, [pc, #140]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008d02:	4313      	orrs	r3, r2
 8008d04:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008d06:	4b22      	ldr	r3, [pc, #136]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0a:	4a21      	ldr	r2, [pc, #132]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008d0c:	f023 0301 	bic.w	r3, r3, #1
 8008d10:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008d12:	4b1f      	ldr	r3, [pc, #124]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d16:	4b21      	ldr	r3, [pc, #132]	; (8008d9c <HAL_RCC_OscConfig+0x778>)
 8008d18:	4013      	ands	r3, r2
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008d1e:	00d2      	lsls	r2, r2, #3
 8008d20:	491b      	ldr	r1, [pc, #108]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008d22:	4313      	orrs	r3, r2
 8008d24:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008d26:	4b1a      	ldr	r3, [pc, #104]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2a:	f023 020c 	bic.w	r2, r3, #12
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d32:	4917      	ldr	r1, [pc, #92]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008d34:	4313      	orrs	r3, r2
 8008d36:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008d38:	4b15      	ldr	r3, [pc, #84]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3c:	f023 0202 	bic.w	r2, r3, #2
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d44:	4912      	ldr	r1, [pc, #72]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008d46:	4313      	orrs	r3, r2
 8008d48:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008d4a:	4b11      	ldr	r3, [pc, #68]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4e:	4a10      	ldr	r2, [pc, #64]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d56:	4b0e      	ldr	r3, [pc, #56]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5a:	4a0d      	ldr	r2, [pc, #52]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008d62:	4b0b      	ldr	r3, [pc, #44]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d66:	4a0a      	ldr	r2, [pc, #40]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008d6e:	4b08      	ldr	r3, [pc, #32]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d72:	4a07      	ldr	r2, [pc, #28]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008d74:	f043 0301 	orr.w	r3, r3, #1
 8008d78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d7a:	4b05      	ldr	r3, [pc, #20]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a04      	ldr	r2, [pc, #16]	; (8008d90 <HAL_RCC_OscConfig+0x76c>)
 8008d80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d86:	f7f9 fdd1 	bl	800292c <HAL_GetTick>
 8008d8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d8c:	e011      	b.n	8008db2 <HAL_RCC_OscConfig+0x78e>
 8008d8e:	bf00      	nop
 8008d90:	58024400 	.word	0x58024400
 8008d94:	58024800 	.word	0x58024800
 8008d98:	fffffc0c 	.word	0xfffffc0c
 8008d9c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008da0:	f7f9 fdc4 	bl	800292c <HAL_GetTick>
 8008da4:	4602      	mov	r2, r0
 8008da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d901      	bls.n	8008db2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008dae:	2303      	movs	r3, #3
 8008db0:	e05f      	b.n	8008e72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008db2:	4b32      	ldr	r3, [pc, #200]	; (8008e7c <HAL_RCC_OscConfig+0x858>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d0f0      	beq.n	8008da0 <HAL_RCC_OscConfig+0x77c>
 8008dbe:	e057      	b.n	8008e70 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dc0:	4b2e      	ldr	r3, [pc, #184]	; (8008e7c <HAL_RCC_OscConfig+0x858>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a2d      	ldr	r2, [pc, #180]	; (8008e7c <HAL_RCC_OscConfig+0x858>)
 8008dc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dcc:	f7f9 fdae 	bl	800292c <HAL_GetTick>
 8008dd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008dd2:	e008      	b.n	8008de6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008dd4:	f7f9 fdaa 	bl	800292c <HAL_GetTick>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ddc:	1ad3      	subs	r3, r2, r3
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	d901      	bls.n	8008de6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008de2:	2303      	movs	r3, #3
 8008de4:	e045      	b.n	8008e72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008de6:	4b25      	ldr	r3, [pc, #148]	; (8008e7c <HAL_RCC_OscConfig+0x858>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1f0      	bne.n	8008dd4 <HAL_RCC_OscConfig+0x7b0>
 8008df2:	e03d      	b.n	8008e70 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008df4:	4b21      	ldr	r3, [pc, #132]	; (8008e7c <HAL_RCC_OscConfig+0x858>)
 8008df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008dfa:	4b20      	ldr	r3, [pc, #128]	; (8008e7c <HAL_RCC_OscConfig+0x858>)
 8008dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dfe:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d031      	beq.n	8008e6c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	f003 0203 	and.w	r2, r3, #3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d12a      	bne.n	8008e6c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	091b      	lsrs	r3, r3, #4
 8008e1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d122      	bne.n	8008e6c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e30:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d11a      	bne.n	8008e6c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	0a5b      	lsrs	r3, r3, #9
 8008e3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e42:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d111      	bne.n	8008e6c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	0c1b      	lsrs	r3, r3, #16
 8008e4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e54:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d108      	bne.n	8008e6c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	0e1b      	lsrs	r3, r3, #24
 8008e5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e66:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d001      	beq.n	8008e70 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e000      	b.n	8008e72 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3730      	adds	r7, #48	; 0x30
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	58024400 	.word	0x58024400

08008e80 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b086      	sub	sp, #24
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d101      	bne.n	8008e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	e19c      	b.n	80091ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008e94:	4b8a      	ldr	r3, [pc, #552]	; (80090c0 <HAL_RCC_ClockConfig+0x240>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 030f 	and.w	r3, r3, #15
 8008e9c:	683a      	ldr	r2, [r7, #0]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d910      	bls.n	8008ec4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ea2:	4b87      	ldr	r3, [pc, #540]	; (80090c0 <HAL_RCC_ClockConfig+0x240>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f023 020f 	bic.w	r2, r3, #15
 8008eaa:	4985      	ldr	r1, [pc, #532]	; (80090c0 <HAL_RCC_ClockConfig+0x240>)
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008eb2:	4b83      	ldr	r3, [pc, #524]	; (80090c0 <HAL_RCC_ClockConfig+0x240>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f003 030f 	and.w	r3, r3, #15
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d001      	beq.n	8008ec4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e184      	b.n	80091ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 0304 	and.w	r3, r3, #4
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d010      	beq.n	8008ef2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	691a      	ldr	r2, [r3, #16]
 8008ed4:	4b7b      	ldr	r3, [pc, #492]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d908      	bls.n	8008ef2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008ee0:	4b78      	ldr	r3, [pc, #480]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	4975      	ldr	r1, [pc, #468]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 0308 	and.w	r3, r3, #8
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d010      	beq.n	8008f20 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	695a      	ldr	r2, [r3, #20]
 8008f02:	4b70      	ldr	r3, [pc, #448]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 8008f04:	69db      	ldr	r3, [r3, #28]
 8008f06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d908      	bls.n	8008f20 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008f0e:	4b6d      	ldr	r3, [pc, #436]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 8008f10:	69db      	ldr	r3, [r3, #28]
 8008f12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	695b      	ldr	r3, [r3, #20]
 8008f1a:	496a      	ldr	r1, [pc, #424]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f003 0310 	and.w	r3, r3, #16
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d010      	beq.n	8008f4e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	699a      	ldr	r2, [r3, #24]
 8008f30:	4b64      	ldr	r3, [pc, #400]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 8008f32:	69db      	ldr	r3, [r3, #28]
 8008f34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d908      	bls.n	8008f4e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008f3c:	4b61      	ldr	r3, [pc, #388]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 8008f3e:	69db      	ldr	r3, [r3, #28]
 8008f40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	699b      	ldr	r3, [r3, #24]
 8008f48:	495e      	ldr	r1, [pc, #376]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f003 0320 	and.w	r3, r3, #32
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d010      	beq.n	8008f7c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	69da      	ldr	r2, [r3, #28]
 8008f5e:	4b59      	ldr	r3, [pc, #356]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 8008f60:	6a1b      	ldr	r3, [r3, #32]
 8008f62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d908      	bls.n	8008f7c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008f6a:	4b56      	ldr	r3, [pc, #344]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	69db      	ldr	r3, [r3, #28]
 8008f76:	4953      	ldr	r1, [pc, #332]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 0302 	and.w	r3, r3, #2
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d010      	beq.n	8008faa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	68da      	ldr	r2, [r3, #12]
 8008f8c:	4b4d      	ldr	r3, [pc, #308]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	f003 030f 	and.w	r3, r3, #15
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d908      	bls.n	8008faa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f98:	4b4a      	ldr	r3, [pc, #296]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	f023 020f 	bic.w	r2, r3, #15
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	4947      	ldr	r1, [pc, #284]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 0301 	and.w	r3, r3, #1
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d055      	beq.n	8009062 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008fb6:	4b43      	ldr	r3, [pc, #268]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 8008fb8:	699b      	ldr	r3, [r3, #24]
 8008fba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	4940      	ldr	r1, [pc, #256]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d107      	bne.n	8008fe0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008fd0:	4b3c      	ldr	r3, [pc, #240]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d121      	bne.n	8009020 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	e0f6      	b.n	80091ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	2b03      	cmp	r3, #3
 8008fe6:	d107      	bne.n	8008ff8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008fe8:	4b36      	ldr	r3, [pc, #216]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d115      	bne.n	8009020 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e0ea      	b.n	80091ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d107      	bne.n	8009010 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009000:	4b30      	ldr	r3, [pc, #192]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009008:	2b00      	cmp	r3, #0
 800900a:	d109      	bne.n	8009020 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	e0de      	b.n	80091ce <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009010:	4b2c      	ldr	r3, [pc, #176]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0304 	and.w	r3, r3, #4
 8009018:	2b00      	cmp	r3, #0
 800901a:	d101      	bne.n	8009020 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	e0d6      	b.n	80091ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009020:	4b28      	ldr	r3, [pc, #160]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	f023 0207 	bic.w	r2, r3, #7
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	4925      	ldr	r1, [pc, #148]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 800902e:	4313      	orrs	r3, r2
 8009030:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009032:	f7f9 fc7b 	bl	800292c <HAL_GetTick>
 8009036:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009038:	e00a      	b.n	8009050 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800903a:	f7f9 fc77 	bl	800292c <HAL_GetTick>
 800903e:	4602      	mov	r2, r0
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	f241 3288 	movw	r2, #5000	; 0x1388
 8009048:	4293      	cmp	r3, r2
 800904a:	d901      	bls.n	8009050 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800904c:	2303      	movs	r3, #3
 800904e:	e0be      	b.n	80091ce <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009050:	4b1c      	ldr	r3, [pc, #112]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	00db      	lsls	r3, r3, #3
 800905e:	429a      	cmp	r2, r3
 8009060:	d1eb      	bne.n	800903a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 0302 	and.w	r3, r3, #2
 800906a:	2b00      	cmp	r3, #0
 800906c:	d010      	beq.n	8009090 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	68da      	ldr	r2, [r3, #12]
 8009072:	4b14      	ldr	r3, [pc, #80]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 8009074:	699b      	ldr	r3, [r3, #24]
 8009076:	f003 030f 	and.w	r3, r3, #15
 800907a:	429a      	cmp	r2, r3
 800907c:	d208      	bcs.n	8009090 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800907e:	4b11      	ldr	r3, [pc, #68]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	f023 020f 	bic.w	r2, r3, #15
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	490e      	ldr	r1, [pc, #56]	; (80090c4 <HAL_RCC_ClockConfig+0x244>)
 800908c:	4313      	orrs	r3, r2
 800908e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009090:	4b0b      	ldr	r3, [pc, #44]	; (80090c0 <HAL_RCC_ClockConfig+0x240>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 030f 	and.w	r3, r3, #15
 8009098:	683a      	ldr	r2, [r7, #0]
 800909a:	429a      	cmp	r2, r3
 800909c:	d214      	bcs.n	80090c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800909e:	4b08      	ldr	r3, [pc, #32]	; (80090c0 <HAL_RCC_ClockConfig+0x240>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f023 020f 	bic.w	r2, r3, #15
 80090a6:	4906      	ldr	r1, [pc, #24]	; (80090c0 <HAL_RCC_ClockConfig+0x240>)
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090ae:	4b04      	ldr	r3, [pc, #16]	; (80090c0 <HAL_RCC_ClockConfig+0x240>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f003 030f 	and.w	r3, r3, #15
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d005      	beq.n	80090c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	e086      	b.n	80091ce <HAL_RCC_ClockConfig+0x34e>
 80090c0:	52002000 	.word	0x52002000
 80090c4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 0304 	and.w	r3, r3, #4
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d010      	beq.n	80090f6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	691a      	ldr	r2, [r3, #16]
 80090d8:	4b3f      	ldr	r3, [pc, #252]	; (80091d8 <HAL_RCC_ClockConfig+0x358>)
 80090da:	699b      	ldr	r3, [r3, #24]
 80090dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d208      	bcs.n	80090f6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80090e4:	4b3c      	ldr	r3, [pc, #240]	; (80091d8 <HAL_RCC_ClockConfig+0x358>)
 80090e6:	699b      	ldr	r3, [r3, #24]
 80090e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	4939      	ldr	r1, [pc, #228]	; (80091d8 <HAL_RCC_ClockConfig+0x358>)
 80090f2:	4313      	orrs	r3, r2
 80090f4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 0308 	and.w	r3, r3, #8
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d010      	beq.n	8009124 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	695a      	ldr	r2, [r3, #20]
 8009106:	4b34      	ldr	r3, [pc, #208]	; (80091d8 <HAL_RCC_ClockConfig+0x358>)
 8009108:	69db      	ldr	r3, [r3, #28]
 800910a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800910e:	429a      	cmp	r2, r3
 8009110:	d208      	bcs.n	8009124 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009112:	4b31      	ldr	r3, [pc, #196]	; (80091d8 <HAL_RCC_ClockConfig+0x358>)
 8009114:	69db      	ldr	r3, [r3, #28]
 8009116:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	695b      	ldr	r3, [r3, #20]
 800911e:	492e      	ldr	r1, [pc, #184]	; (80091d8 <HAL_RCC_ClockConfig+0x358>)
 8009120:	4313      	orrs	r3, r2
 8009122:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 0310 	and.w	r3, r3, #16
 800912c:	2b00      	cmp	r3, #0
 800912e:	d010      	beq.n	8009152 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	699a      	ldr	r2, [r3, #24]
 8009134:	4b28      	ldr	r3, [pc, #160]	; (80091d8 <HAL_RCC_ClockConfig+0x358>)
 8009136:	69db      	ldr	r3, [r3, #28]
 8009138:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800913c:	429a      	cmp	r2, r3
 800913e:	d208      	bcs.n	8009152 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009140:	4b25      	ldr	r3, [pc, #148]	; (80091d8 <HAL_RCC_ClockConfig+0x358>)
 8009142:	69db      	ldr	r3, [r3, #28]
 8009144:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	4922      	ldr	r1, [pc, #136]	; (80091d8 <HAL_RCC_ClockConfig+0x358>)
 800914e:	4313      	orrs	r3, r2
 8009150:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f003 0320 	and.w	r3, r3, #32
 800915a:	2b00      	cmp	r3, #0
 800915c:	d010      	beq.n	8009180 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	69da      	ldr	r2, [r3, #28]
 8009162:	4b1d      	ldr	r3, [pc, #116]	; (80091d8 <HAL_RCC_ClockConfig+0x358>)
 8009164:	6a1b      	ldr	r3, [r3, #32]
 8009166:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800916a:	429a      	cmp	r2, r3
 800916c:	d208      	bcs.n	8009180 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800916e:	4b1a      	ldr	r3, [pc, #104]	; (80091d8 <HAL_RCC_ClockConfig+0x358>)
 8009170:	6a1b      	ldr	r3, [r3, #32]
 8009172:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	69db      	ldr	r3, [r3, #28]
 800917a:	4917      	ldr	r1, [pc, #92]	; (80091d8 <HAL_RCC_ClockConfig+0x358>)
 800917c:	4313      	orrs	r3, r2
 800917e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009180:	f000 f834 	bl	80091ec <HAL_RCC_GetSysClockFreq>
 8009184:	4602      	mov	r2, r0
 8009186:	4b14      	ldr	r3, [pc, #80]	; (80091d8 <HAL_RCC_ClockConfig+0x358>)
 8009188:	699b      	ldr	r3, [r3, #24]
 800918a:	0a1b      	lsrs	r3, r3, #8
 800918c:	f003 030f 	and.w	r3, r3, #15
 8009190:	4912      	ldr	r1, [pc, #72]	; (80091dc <HAL_RCC_ClockConfig+0x35c>)
 8009192:	5ccb      	ldrb	r3, [r1, r3]
 8009194:	f003 031f 	and.w	r3, r3, #31
 8009198:	fa22 f303 	lsr.w	r3, r2, r3
 800919c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800919e:	4b0e      	ldr	r3, [pc, #56]	; (80091d8 <HAL_RCC_ClockConfig+0x358>)
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	f003 030f 	and.w	r3, r3, #15
 80091a6:	4a0d      	ldr	r2, [pc, #52]	; (80091dc <HAL_RCC_ClockConfig+0x35c>)
 80091a8:	5cd3      	ldrb	r3, [r2, r3]
 80091aa:	f003 031f 	and.w	r3, r3, #31
 80091ae:	693a      	ldr	r2, [r7, #16]
 80091b0:	fa22 f303 	lsr.w	r3, r2, r3
 80091b4:	4a0a      	ldr	r2, [pc, #40]	; (80091e0 <HAL_RCC_ClockConfig+0x360>)
 80091b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80091b8:	4a0a      	ldr	r2, [pc, #40]	; (80091e4 <HAL_RCC_ClockConfig+0x364>)
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80091be:	4b0a      	ldr	r3, [pc, #40]	; (80091e8 <HAL_RCC_ClockConfig+0x368>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7f9 fb68 	bl	8002898 <HAL_InitTick>
 80091c8:	4603      	mov	r3, r0
 80091ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3718      	adds	r7, #24
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	58024400 	.word	0x58024400
 80091dc:	0800fe68 	.word	0x0800fe68
 80091e0:	24000024 	.word	0x24000024
 80091e4:	24000020 	.word	0x24000020
 80091e8:	24000028 	.word	0x24000028

080091ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b089      	sub	sp, #36	; 0x24
 80091f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80091f2:	4bb3      	ldr	r3, [pc, #716]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091fa:	2b18      	cmp	r3, #24
 80091fc:	f200 8155 	bhi.w	80094aa <HAL_RCC_GetSysClockFreq+0x2be>
 8009200:	a201      	add	r2, pc, #4	; (adr r2, 8009208 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009206:	bf00      	nop
 8009208:	0800926d 	.word	0x0800926d
 800920c:	080094ab 	.word	0x080094ab
 8009210:	080094ab 	.word	0x080094ab
 8009214:	080094ab 	.word	0x080094ab
 8009218:	080094ab 	.word	0x080094ab
 800921c:	080094ab 	.word	0x080094ab
 8009220:	080094ab 	.word	0x080094ab
 8009224:	080094ab 	.word	0x080094ab
 8009228:	08009293 	.word	0x08009293
 800922c:	080094ab 	.word	0x080094ab
 8009230:	080094ab 	.word	0x080094ab
 8009234:	080094ab 	.word	0x080094ab
 8009238:	080094ab 	.word	0x080094ab
 800923c:	080094ab 	.word	0x080094ab
 8009240:	080094ab 	.word	0x080094ab
 8009244:	080094ab 	.word	0x080094ab
 8009248:	08009299 	.word	0x08009299
 800924c:	080094ab 	.word	0x080094ab
 8009250:	080094ab 	.word	0x080094ab
 8009254:	080094ab 	.word	0x080094ab
 8009258:	080094ab 	.word	0x080094ab
 800925c:	080094ab 	.word	0x080094ab
 8009260:	080094ab 	.word	0x080094ab
 8009264:	080094ab 	.word	0x080094ab
 8009268:	0800929f 	.word	0x0800929f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800926c:	4b94      	ldr	r3, [pc, #592]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 0320 	and.w	r3, r3, #32
 8009274:	2b00      	cmp	r3, #0
 8009276:	d009      	beq.n	800928c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009278:	4b91      	ldr	r3, [pc, #580]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	08db      	lsrs	r3, r3, #3
 800927e:	f003 0303 	and.w	r3, r3, #3
 8009282:	4a90      	ldr	r2, [pc, #576]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009284:	fa22 f303 	lsr.w	r3, r2, r3
 8009288:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800928a:	e111      	b.n	80094b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800928c:	4b8d      	ldr	r3, [pc, #564]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800928e:	61bb      	str	r3, [r7, #24]
    break;
 8009290:	e10e      	b.n	80094b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009292:	4b8d      	ldr	r3, [pc, #564]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009294:	61bb      	str	r3, [r7, #24]
    break;
 8009296:	e10b      	b.n	80094b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009298:	4b8c      	ldr	r3, [pc, #560]	; (80094cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800929a:	61bb      	str	r3, [r7, #24]
    break;
 800929c:	e108      	b.n	80094b0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800929e:	4b88      	ldr	r3, [pc, #544]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a2:	f003 0303 	and.w	r3, r3, #3
 80092a6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80092a8:	4b85      	ldr	r3, [pc, #532]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ac:	091b      	lsrs	r3, r3, #4
 80092ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092b2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80092b4:	4b82      	ldr	r3, [pc, #520]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b8:	f003 0301 	and.w	r3, r3, #1
 80092bc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80092be:	4b80      	ldr	r3, [pc, #512]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c2:	08db      	lsrs	r3, r3, #3
 80092c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	fb02 f303 	mul.w	r3, r2, r3
 80092ce:	ee07 3a90 	vmov	s15, r3
 80092d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f000 80e1 	beq.w	80094a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	f000 8083 	beq.w	80093f0 <HAL_RCC_GetSysClockFreq+0x204>
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	f200 80a1 	bhi.w	8009434 <HAL_RCC_GetSysClockFreq+0x248>
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d003      	beq.n	8009300 <HAL_RCC_GetSysClockFreq+0x114>
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d056      	beq.n	80093ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80092fe:	e099      	b.n	8009434 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009300:	4b6f      	ldr	r3, [pc, #444]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f003 0320 	and.w	r3, r3, #32
 8009308:	2b00      	cmp	r3, #0
 800930a:	d02d      	beq.n	8009368 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800930c:	4b6c      	ldr	r3, [pc, #432]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	08db      	lsrs	r3, r3, #3
 8009312:	f003 0303 	and.w	r3, r3, #3
 8009316:	4a6b      	ldr	r2, [pc, #428]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009318:	fa22 f303 	lsr.w	r3, r2, r3
 800931c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	ee07 3a90 	vmov	s15, r3
 8009324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	ee07 3a90 	vmov	s15, r3
 800932e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009336:	4b62      	ldr	r3, [pc, #392]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800933a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800933e:	ee07 3a90 	vmov	s15, r3
 8009342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009346:	ed97 6a02 	vldr	s12, [r7, #8]
 800934a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80094d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800934e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800935a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800935e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009362:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009366:	e087      	b.n	8009478 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	ee07 3a90 	vmov	s15, r3
 800936e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009372:	eddf 6a58 	vldr	s13, [pc, #352]	; 80094d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800937a:	4b51      	ldr	r3, [pc, #324]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800937c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800937e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009382:	ee07 3a90 	vmov	s15, r3
 8009386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800938a:	ed97 6a02 	vldr	s12, [r7, #8]
 800938e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80094d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800939a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800939e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093aa:	e065      	b.n	8009478 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	ee07 3a90 	vmov	s15, r3
 80093b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80094d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80093ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093be:	4b40      	ldr	r3, [pc, #256]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093c6:	ee07 3a90 	vmov	s15, r3
 80093ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80093d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80094d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80093d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093ee:	e043      	b.n	8009478 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	ee07 3a90 	vmov	s15, r3
 80093f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 80094dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80093fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009402:	4b2f      	ldr	r3, [pc, #188]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800940a:	ee07 3a90 	vmov	s15, r3
 800940e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009412:	ed97 6a02 	vldr	s12, [r7, #8]
 8009416:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80094d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800941a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800941e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800942a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800942e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009432:	e021      	b.n	8009478 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	ee07 3a90 	vmov	s15, r3
 800943a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800943e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80094d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009446:	4b1e      	ldr	r3, [pc, #120]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800944e:	ee07 3a90 	vmov	s15, r3
 8009452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009456:	ed97 6a02 	vldr	s12, [r7, #8]
 800945a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80094d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800945e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800946a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800946e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009472:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009476:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009478:	4b11      	ldr	r3, [pc, #68]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800947a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800947c:	0a5b      	lsrs	r3, r3, #9
 800947e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009482:	3301      	adds	r3, #1
 8009484:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	ee07 3a90 	vmov	s15, r3
 800948c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009490:	edd7 6a07 	vldr	s13, [r7, #28]
 8009494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800949c:	ee17 3a90 	vmov	r3, s15
 80094a0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80094a2:	e005      	b.n	80094b0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80094a4:	2300      	movs	r3, #0
 80094a6:	61bb      	str	r3, [r7, #24]
    break;
 80094a8:	e002      	b.n	80094b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80094aa:	4b07      	ldr	r3, [pc, #28]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80094ac:	61bb      	str	r3, [r7, #24]
    break;
 80094ae:	bf00      	nop
  }

  return sysclockfreq;
 80094b0:	69bb      	ldr	r3, [r7, #24]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3724      	adds	r7, #36	; 0x24
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	58024400 	.word	0x58024400
 80094c4:	03d09000 	.word	0x03d09000
 80094c8:	003d0900 	.word	0x003d0900
 80094cc:	017d7840 	.word	0x017d7840
 80094d0:	46000000 	.word	0x46000000
 80094d4:	4c742400 	.word	0x4c742400
 80094d8:	4a742400 	.word	0x4a742400
 80094dc:	4bbebc20 	.word	0x4bbebc20

080094e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80094e6:	f7ff fe81 	bl	80091ec <HAL_RCC_GetSysClockFreq>
 80094ea:	4602      	mov	r2, r0
 80094ec:	4b10      	ldr	r3, [pc, #64]	; (8009530 <HAL_RCC_GetHCLKFreq+0x50>)
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	0a1b      	lsrs	r3, r3, #8
 80094f2:	f003 030f 	and.w	r3, r3, #15
 80094f6:	490f      	ldr	r1, [pc, #60]	; (8009534 <HAL_RCC_GetHCLKFreq+0x54>)
 80094f8:	5ccb      	ldrb	r3, [r1, r3]
 80094fa:	f003 031f 	and.w	r3, r3, #31
 80094fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009502:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009504:	4b0a      	ldr	r3, [pc, #40]	; (8009530 <HAL_RCC_GetHCLKFreq+0x50>)
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	f003 030f 	and.w	r3, r3, #15
 800950c:	4a09      	ldr	r2, [pc, #36]	; (8009534 <HAL_RCC_GetHCLKFreq+0x54>)
 800950e:	5cd3      	ldrb	r3, [r2, r3]
 8009510:	f003 031f 	and.w	r3, r3, #31
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	fa22 f303 	lsr.w	r3, r2, r3
 800951a:	4a07      	ldr	r2, [pc, #28]	; (8009538 <HAL_RCC_GetHCLKFreq+0x58>)
 800951c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800951e:	4a07      	ldr	r2, [pc, #28]	; (800953c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009524:	4b04      	ldr	r3, [pc, #16]	; (8009538 <HAL_RCC_GetHCLKFreq+0x58>)
 8009526:	681b      	ldr	r3, [r3, #0]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	58024400 	.word	0x58024400
 8009534:	0800fe68 	.word	0x0800fe68
 8009538:	24000024 	.word	0x24000024
 800953c:	24000020 	.word	0x24000020

08009540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009544:	f7ff ffcc 	bl	80094e0 <HAL_RCC_GetHCLKFreq>
 8009548:	4602      	mov	r2, r0
 800954a:	4b06      	ldr	r3, [pc, #24]	; (8009564 <HAL_RCC_GetPCLK1Freq+0x24>)
 800954c:	69db      	ldr	r3, [r3, #28]
 800954e:	091b      	lsrs	r3, r3, #4
 8009550:	f003 0307 	and.w	r3, r3, #7
 8009554:	4904      	ldr	r1, [pc, #16]	; (8009568 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009556:	5ccb      	ldrb	r3, [r1, r3]
 8009558:	f003 031f 	and.w	r3, r3, #31
 800955c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009560:	4618      	mov	r0, r3
 8009562:	bd80      	pop	{r7, pc}
 8009564:	58024400 	.word	0x58024400
 8009568:	0800fe68 	.word	0x0800fe68

0800956c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009570:	f7ff ffb6 	bl	80094e0 <HAL_RCC_GetHCLKFreq>
 8009574:	4602      	mov	r2, r0
 8009576:	4b06      	ldr	r3, [pc, #24]	; (8009590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009578:	69db      	ldr	r3, [r3, #28]
 800957a:	0a1b      	lsrs	r3, r3, #8
 800957c:	f003 0307 	and.w	r3, r3, #7
 8009580:	4904      	ldr	r1, [pc, #16]	; (8009594 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009582:	5ccb      	ldrb	r3, [r1, r3]
 8009584:	f003 031f 	and.w	r3, r3, #31
 8009588:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800958c:	4618      	mov	r0, r3
 800958e:	bd80      	pop	{r7, pc}
 8009590:	58024400 	.word	0x58024400
 8009594:	0800fe68 	.word	0x0800fe68

08009598 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b086      	sub	sp, #24
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80095a0:	2300      	movs	r3, #0
 80095a2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80095a4:	2300      	movs	r3, #0
 80095a6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d03f      	beq.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80095bc:	d02a      	beq.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80095be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80095c2:	d824      	bhi.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80095c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095c8:	d018      	beq.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80095ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095ce:	d81e      	bhi.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d003      	beq.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80095d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095d8:	d007      	beq.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80095da:	e018      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095dc:	4ba3      	ldr	r3, [pc, #652]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80095de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e0:	4aa2      	ldr	r2, [pc, #648]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80095e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80095e8:	e015      	b.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	3304      	adds	r3, #4
 80095ee:	2102      	movs	r1, #2
 80095f0:	4618      	mov	r0, r3
 80095f2:	f001 fff9 	bl	800b5e8 <RCCEx_PLL2_Config>
 80095f6:	4603      	mov	r3, r0
 80095f8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80095fa:	e00c      	b.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	3324      	adds	r3, #36	; 0x24
 8009600:	2102      	movs	r1, #2
 8009602:	4618      	mov	r0, r3
 8009604:	f002 f8a2 	bl	800b74c <RCCEx_PLL3_Config>
 8009608:	4603      	mov	r3, r0
 800960a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800960c:	e003      	b.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	75fb      	strb	r3, [r7, #23]
      break;
 8009612:	e000      	b.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009616:	7dfb      	ldrb	r3, [r7, #23]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d109      	bne.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800961c:	4b93      	ldr	r3, [pc, #588]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800961e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009620:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009628:	4990      	ldr	r1, [pc, #576]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800962a:	4313      	orrs	r3, r2
 800962c:	650b      	str	r3, [r1, #80]	; 0x50
 800962e:	e001      	b.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009630:	7dfb      	ldrb	r3, [r7, #23]
 8009632:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800963c:	2b00      	cmp	r3, #0
 800963e:	d03d      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009644:	2b04      	cmp	r3, #4
 8009646:	d826      	bhi.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009648:	a201      	add	r2, pc, #4	; (adr r2, 8009650 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800964a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800964e:	bf00      	nop
 8009650:	08009665 	.word	0x08009665
 8009654:	08009673 	.word	0x08009673
 8009658:	08009685 	.word	0x08009685
 800965c:	0800969d 	.word	0x0800969d
 8009660:	0800969d 	.word	0x0800969d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009664:	4b81      	ldr	r3, [pc, #516]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009668:	4a80      	ldr	r2, [pc, #512]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800966a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800966e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009670:	e015      	b.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	3304      	adds	r3, #4
 8009676:	2100      	movs	r1, #0
 8009678:	4618      	mov	r0, r3
 800967a:	f001 ffb5 	bl	800b5e8 <RCCEx_PLL2_Config>
 800967e:	4603      	mov	r3, r0
 8009680:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009682:	e00c      	b.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	3324      	adds	r3, #36	; 0x24
 8009688:	2100      	movs	r1, #0
 800968a:	4618      	mov	r0, r3
 800968c:	f002 f85e 	bl	800b74c <RCCEx_PLL3_Config>
 8009690:	4603      	mov	r3, r0
 8009692:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009694:	e003      	b.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	75fb      	strb	r3, [r7, #23]
      break;
 800969a:	e000      	b.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800969c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800969e:	7dfb      	ldrb	r3, [r7, #23]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d109      	bne.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80096a4:	4b71      	ldr	r3, [pc, #452]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80096a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096a8:	f023 0207 	bic.w	r2, r3, #7
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096b0:	496e      	ldr	r1, [pc, #440]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80096b2:	4313      	orrs	r3, r2
 80096b4:	650b      	str	r3, [r1, #80]	; 0x50
 80096b6:	e001      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096b8:	7dfb      	ldrb	r3, [r7, #23]
 80096ba:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d042      	beq.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096d0:	d02b      	beq.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80096d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096d6:	d825      	bhi.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80096d8:	2bc0      	cmp	r3, #192	; 0xc0
 80096da:	d028      	beq.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80096dc:	2bc0      	cmp	r3, #192	; 0xc0
 80096de:	d821      	bhi.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80096e0:	2b80      	cmp	r3, #128	; 0x80
 80096e2:	d016      	beq.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80096e4:	2b80      	cmp	r3, #128	; 0x80
 80096e6:	d81d      	bhi.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d002      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80096ec:	2b40      	cmp	r3, #64	; 0x40
 80096ee:	d007      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80096f0:	e018      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096f2:	4b5e      	ldr	r3, [pc, #376]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80096f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f6:	4a5d      	ldr	r2, [pc, #372]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80096f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80096fe:	e017      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	3304      	adds	r3, #4
 8009704:	2100      	movs	r1, #0
 8009706:	4618      	mov	r0, r3
 8009708:	f001 ff6e 	bl	800b5e8 <RCCEx_PLL2_Config>
 800970c:	4603      	mov	r3, r0
 800970e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009710:	e00e      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	3324      	adds	r3, #36	; 0x24
 8009716:	2100      	movs	r1, #0
 8009718:	4618      	mov	r0, r3
 800971a:	f002 f817 	bl	800b74c <RCCEx_PLL3_Config>
 800971e:	4603      	mov	r3, r0
 8009720:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009722:	e005      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	75fb      	strb	r3, [r7, #23]
      break;
 8009728:	e002      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800972a:	bf00      	nop
 800972c:	e000      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800972e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009730:	7dfb      	ldrb	r3, [r7, #23]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d109      	bne.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009736:	4b4d      	ldr	r3, [pc, #308]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800973a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009742:	494a      	ldr	r1, [pc, #296]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009744:	4313      	orrs	r3, r2
 8009746:	650b      	str	r3, [r1, #80]	; 0x50
 8009748:	e001      	b.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800974a:	7dfb      	ldrb	r3, [r7, #23]
 800974c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009756:	2b00      	cmp	r3, #0
 8009758:	d049      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009760:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009764:	d030      	beq.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009766:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800976a:	d82a      	bhi.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800976c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009770:	d02c      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009772:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009776:	d824      	bhi.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009778:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800977c:	d018      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800977e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009782:	d81e      	bhi.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009784:	2b00      	cmp	r3, #0
 8009786:	d003      	beq.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009788:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800978c:	d007      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800978e:	e018      	b.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009790:	4b36      	ldr	r3, [pc, #216]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009794:	4a35      	ldr	r2, [pc, #212]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800979a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800979c:	e017      	b.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	3304      	adds	r3, #4
 80097a2:	2100      	movs	r1, #0
 80097a4:	4618      	mov	r0, r3
 80097a6:	f001 ff1f 	bl	800b5e8 <RCCEx_PLL2_Config>
 80097aa:	4603      	mov	r3, r0
 80097ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80097ae:	e00e      	b.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	3324      	adds	r3, #36	; 0x24
 80097b4:	2100      	movs	r1, #0
 80097b6:	4618      	mov	r0, r3
 80097b8:	f001 ffc8 	bl	800b74c <RCCEx_PLL3_Config>
 80097bc:	4603      	mov	r3, r0
 80097be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80097c0:	e005      	b.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	75fb      	strb	r3, [r7, #23]
      break;
 80097c6:	e002      	b.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80097c8:	bf00      	nop
 80097ca:	e000      	b.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80097cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097ce:	7dfb      	ldrb	r3, [r7, #23]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10a      	bne.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80097d4:	4b25      	ldr	r3, [pc, #148]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097d8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80097e2:	4922      	ldr	r1, [pc, #136]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097e4:	4313      	orrs	r3, r2
 80097e6:	658b      	str	r3, [r1, #88]	; 0x58
 80097e8:	e001      	b.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ea:	7dfb      	ldrb	r3, [r7, #23]
 80097ec:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d04b      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009800:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009804:	d030      	beq.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009806:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800980a:	d82a      	bhi.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800980c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009810:	d02e      	beq.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8009812:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009816:	d824      	bhi.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009818:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800981c:	d018      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800981e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009822:	d81e      	bhi.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009824:	2b00      	cmp	r3, #0
 8009826:	d003      	beq.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800982c:	d007      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800982e:	e018      	b.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009830:	4b0e      	ldr	r3, [pc, #56]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009834:	4a0d      	ldr	r2, [pc, #52]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800983a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800983c:	e019      	b.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	3304      	adds	r3, #4
 8009842:	2100      	movs	r1, #0
 8009844:	4618      	mov	r0, r3
 8009846:	f001 fecf 	bl	800b5e8 <RCCEx_PLL2_Config>
 800984a:	4603      	mov	r3, r0
 800984c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800984e:	e010      	b.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	3324      	adds	r3, #36	; 0x24
 8009854:	2100      	movs	r1, #0
 8009856:	4618      	mov	r0, r3
 8009858:	f001 ff78 	bl	800b74c <RCCEx_PLL3_Config>
 800985c:	4603      	mov	r3, r0
 800985e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009860:	e007      	b.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	75fb      	strb	r3, [r7, #23]
      break;
 8009866:	e004      	b.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8009868:	bf00      	nop
 800986a:	e002      	b.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800986c:	58024400 	.word	0x58024400
      break;
 8009870:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009872:	7dfb      	ldrb	r3, [r7, #23]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10a      	bne.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009878:	4b99      	ldr	r3, [pc, #612]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800987a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800987c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009886:	4996      	ldr	r1, [pc, #600]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009888:	4313      	orrs	r3, r2
 800988a:	658b      	str	r3, [r1, #88]	; 0x58
 800988c:	e001      	b.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800988e:	7dfb      	ldrb	r3, [r7, #23]
 8009890:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d032      	beq.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098a2:	2b30      	cmp	r3, #48	; 0x30
 80098a4:	d01c      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80098a6:	2b30      	cmp	r3, #48	; 0x30
 80098a8:	d817      	bhi.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x342>
 80098aa:	2b20      	cmp	r3, #32
 80098ac:	d00c      	beq.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80098ae:	2b20      	cmp	r3, #32
 80098b0:	d813      	bhi.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x342>
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d016      	beq.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80098b6:	2b10      	cmp	r3, #16
 80098b8:	d10f      	bne.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098ba:	4b89      	ldr	r3, [pc, #548]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80098bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098be:	4a88      	ldr	r2, [pc, #544]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80098c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80098c6:	e00e      	b.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	3304      	adds	r3, #4
 80098cc:	2102      	movs	r1, #2
 80098ce:	4618      	mov	r0, r3
 80098d0:	f001 fe8a 	bl	800b5e8 <RCCEx_PLL2_Config>
 80098d4:	4603      	mov	r3, r0
 80098d6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80098d8:	e005      	b.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	75fb      	strb	r3, [r7, #23]
      break;
 80098de:	e002      	b.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80098e0:	bf00      	nop
 80098e2:	e000      	b.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80098e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098e6:	7dfb      	ldrb	r3, [r7, #23]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d109      	bne.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80098ec:	4b7c      	ldr	r3, [pc, #496]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80098ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098f8:	4979      	ldr	r1, [pc, #484]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80098fa:	4313      	orrs	r3, r2
 80098fc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80098fe:	e001      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009900:	7dfb      	ldrb	r3, [r7, #23]
 8009902:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800990c:	2b00      	cmp	r3, #0
 800990e:	d047      	beq.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009914:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009918:	d030      	beq.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800991a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800991e:	d82a      	bhi.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009920:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009924:	d02c      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009926:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800992a:	d824      	bhi.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800992c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009930:	d018      	beq.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8009932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009936:	d81e      	bhi.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009938:	2b00      	cmp	r3, #0
 800993a:	d003      	beq.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800993c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009940:	d007      	beq.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8009942:	e018      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009944:	4b66      	ldr	r3, [pc, #408]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009948:	4a65      	ldr	r2, [pc, #404]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800994a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800994e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009950:	e017      	b.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	3304      	adds	r3, #4
 8009956:	2100      	movs	r1, #0
 8009958:	4618      	mov	r0, r3
 800995a:	f001 fe45 	bl	800b5e8 <RCCEx_PLL2_Config>
 800995e:	4603      	mov	r3, r0
 8009960:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009962:	e00e      	b.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	3324      	adds	r3, #36	; 0x24
 8009968:	2100      	movs	r1, #0
 800996a:	4618      	mov	r0, r3
 800996c:	f001 feee 	bl	800b74c <RCCEx_PLL3_Config>
 8009970:	4603      	mov	r3, r0
 8009972:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009974:	e005      	b.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	75fb      	strb	r3, [r7, #23]
      break;
 800997a:	e002      	b.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800997c:	bf00      	nop
 800997e:	e000      	b.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009980:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009982:	7dfb      	ldrb	r3, [r7, #23]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d109      	bne.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009988:	4b55      	ldr	r3, [pc, #340]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800998a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800998c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009994:	4952      	ldr	r1, [pc, #328]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009996:	4313      	orrs	r3, r2
 8009998:	650b      	str	r3, [r1, #80]	; 0x50
 800999a:	e001      	b.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800999c:	7dfb      	ldrb	r3, [r7, #23]
 800999e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d049      	beq.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80099b4:	d02e      	beq.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80099b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80099ba:	d828      	bhi.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80099bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80099c0:	d02a      	beq.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80099c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80099c6:	d822      	bhi.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80099c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80099cc:	d026      	beq.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x484>
 80099ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80099d2:	d81c      	bhi.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80099d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099d8:	d010      	beq.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x464>
 80099da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099de:	d816      	bhi.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d01d      	beq.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80099e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099e8:	d111      	bne.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	3304      	adds	r3, #4
 80099ee:	2101      	movs	r1, #1
 80099f0:	4618      	mov	r0, r3
 80099f2:	f001 fdf9 	bl	800b5e8 <RCCEx_PLL2_Config>
 80099f6:	4603      	mov	r3, r0
 80099f8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80099fa:	e012      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	3324      	adds	r3, #36	; 0x24
 8009a00:	2101      	movs	r1, #1
 8009a02:	4618      	mov	r0, r3
 8009a04:	f001 fea2 	bl	800b74c <RCCEx_PLL3_Config>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009a0c:	e009      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	75fb      	strb	r3, [r7, #23]
      break;
 8009a12:	e006      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009a14:	bf00      	nop
 8009a16:	e004      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009a18:	bf00      	nop
 8009a1a:	e002      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009a1c:	bf00      	nop
 8009a1e:	e000      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009a20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a22:	7dfb      	ldrb	r3, [r7, #23]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d109      	bne.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009a28:	4b2d      	ldr	r3, [pc, #180]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a2c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a34:	492a      	ldr	r1, [pc, #168]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a36:	4313      	orrs	r3, r2
 8009a38:	650b      	str	r3, [r1, #80]	; 0x50
 8009a3a:	e001      	b.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a3c:	7dfb      	ldrb	r3, [r7, #23]
 8009a3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d04d      	beq.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009a52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a56:	d02e      	beq.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8009a58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a5c:	d828      	bhi.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a62:	d02a      	beq.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a68:	d822      	bhi.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009a6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009a6e:	d026      	beq.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009a70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009a74:	d81c      	bhi.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009a76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a7a:	d010      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a80:	d816      	bhi.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d01d      	beq.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009a86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a8a:	d111      	bne.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	3304      	adds	r3, #4
 8009a90:	2101      	movs	r1, #1
 8009a92:	4618      	mov	r0, r3
 8009a94:	f001 fda8 	bl	800b5e8 <RCCEx_PLL2_Config>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009a9c:	e012      	b.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	3324      	adds	r3, #36	; 0x24
 8009aa2:	2101      	movs	r1, #1
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f001 fe51 	bl	800b74c <RCCEx_PLL3_Config>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009aae:	e009      	b.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ab4:	e006      	b.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009ab6:	bf00      	nop
 8009ab8:	e004      	b.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009aba:	bf00      	nop
 8009abc:	e002      	b.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009abe:	bf00      	nop
 8009ac0:	e000      	b.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009ac2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ac4:	7dfb      	ldrb	r3, [r7, #23]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d10c      	bne.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009aca:	4b05      	ldr	r3, [pc, #20]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ace:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009ad8:	4901      	ldr	r1, [pc, #4]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009ada:	4313      	orrs	r3, r2
 8009adc:	658b      	str	r3, [r1, #88]	; 0x58
 8009ade:	e003      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009ae0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ae4:	7dfb      	ldrb	r3, [r7, #23]
 8009ae6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d02f      	beq.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009afc:	d00e      	beq.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8009afe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b02:	d814      	bhi.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d015      	beq.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8009b08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b0c:	d10f      	bne.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b0e:	4baf      	ldr	r3, [pc, #700]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b12:	4aae      	ldr	r2, [pc, #696]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009b1a:	e00c      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	3304      	adds	r3, #4
 8009b20:	2101      	movs	r1, #1
 8009b22:	4618      	mov	r0, r3
 8009b24:	f001 fd60 	bl	800b5e8 <RCCEx_PLL2_Config>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009b2c:	e003      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	75fb      	strb	r3, [r7, #23]
      break;
 8009b32:	e000      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8009b34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b36:	7dfb      	ldrb	r3, [r7, #23]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d109      	bne.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009b3c:	4ba3      	ldr	r3, [pc, #652]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b48:	49a0      	ldr	r1, [pc, #640]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	650b      	str	r3, [r1, #80]	; 0x50
 8009b4e:	e001      	b.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b50:	7dfb      	ldrb	r3, [r7, #23]
 8009b52:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d032      	beq.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b64:	2b03      	cmp	r3, #3
 8009b66:	d81b      	bhi.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009b68:	a201      	add	r2, pc, #4	; (adr r2, 8009b70 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8009b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b6e:	bf00      	nop
 8009b70:	08009ba7 	.word	0x08009ba7
 8009b74:	08009b81 	.word	0x08009b81
 8009b78:	08009b8f 	.word	0x08009b8f
 8009b7c:	08009ba7 	.word	0x08009ba7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b80:	4b92      	ldr	r3, [pc, #584]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b84:	4a91      	ldr	r2, [pc, #580]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009b8c:	e00c      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	3304      	adds	r3, #4
 8009b92:	2102      	movs	r1, #2
 8009b94:	4618      	mov	r0, r3
 8009b96:	f001 fd27 	bl	800b5e8 <RCCEx_PLL2_Config>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009b9e:	e003      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ba4:	e000      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009ba6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ba8:	7dfb      	ldrb	r3, [r7, #23]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d109      	bne.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009bae:	4b87      	ldr	r3, [pc, #540]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bb2:	f023 0203 	bic.w	r2, r3, #3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bba:	4984      	ldr	r1, [pc, #528]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009bc0:	e001      	b.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bc2:	7dfb      	ldrb	r3, [r7, #23]
 8009bc4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	f000 8086 	beq.w	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009bd4:	4b7e      	ldr	r3, [pc, #504]	; (8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a7d      	ldr	r2, [pc, #500]	; (8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009be0:	f7f8 fea4 	bl	800292c <HAL_GetTick>
 8009be4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009be6:	e009      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009be8:	f7f8 fea0 	bl	800292c <HAL_GetTick>
 8009bec:	4602      	mov	r2, r0
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	1ad3      	subs	r3, r2, r3
 8009bf2:	2b64      	cmp	r3, #100	; 0x64
 8009bf4:	d902      	bls.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009bf6:	2303      	movs	r3, #3
 8009bf8:	75fb      	strb	r3, [r7, #23]
        break;
 8009bfa:	e005      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bfc:	4b74      	ldr	r3, [pc, #464]	; (8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d0ef      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009c08:	7dfb      	ldrb	r3, [r7, #23]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d166      	bne.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009c0e:	4b6f      	ldr	r3, [pc, #444]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c18:	4053      	eors	r3, r2
 8009c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d013      	beq.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009c22:	4b6a      	ldr	r3, [pc, #424]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c2a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009c2c:	4b67      	ldr	r3, [pc, #412]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c30:	4a66      	ldr	r2, [pc, #408]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c36:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009c38:	4b64      	ldr	r3, [pc, #400]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c3c:	4a63      	ldr	r2, [pc, #396]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c42:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009c44:	4a61      	ldr	r2, [pc, #388]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c54:	d115      	bne.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c56:	f7f8 fe69 	bl	800292c <HAL_GetTick>
 8009c5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c5c:	e00b      	b.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c5e:	f7f8 fe65 	bl	800292c <HAL_GetTick>
 8009c62:	4602      	mov	r2, r0
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d902      	bls.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009c70:	2303      	movs	r3, #3
 8009c72:	75fb      	strb	r3, [r7, #23]
            break;
 8009c74:	e005      	b.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c76:	4b55      	ldr	r3, [pc, #340]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c7a:	f003 0302 	and.w	r3, r3, #2
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d0ed      	beq.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009c82:	7dfb      	ldrb	r3, [r7, #23]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d126      	bne.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c96:	d10d      	bne.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009c98:	4b4c      	ldr	r3, [pc, #304]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ca6:	0919      	lsrs	r1, r3, #4
 8009ca8:	4b4a      	ldr	r3, [pc, #296]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8009caa:	400b      	ands	r3, r1
 8009cac:	4947      	ldr	r1, [pc, #284]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	610b      	str	r3, [r1, #16]
 8009cb2:	e005      	b.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009cb4:	4b45      	ldr	r3, [pc, #276]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009cb6:	691b      	ldr	r3, [r3, #16]
 8009cb8:	4a44      	ldr	r2, [pc, #272]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009cba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009cbe:	6113      	str	r3, [r2, #16]
 8009cc0:	4b42      	ldr	r3, [pc, #264]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009cc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009cce:	493f      	ldr	r1, [pc, #252]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	670b      	str	r3, [r1, #112]	; 0x70
 8009cd4:	e004      	b.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009cd6:	7dfb      	ldrb	r3, [r7, #23]
 8009cd8:	75bb      	strb	r3, [r7, #22]
 8009cda:	e001      	b.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cdc:	7dfb      	ldrb	r3, [r7, #23]
 8009cde:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f003 0301 	and.w	r3, r3, #1
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f000 8085 	beq.w	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009cf2:	2b28      	cmp	r3, #40	; 0x28
 8009cf4:	d866      	bhi.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009cf6:	a201      	add	r2, pc, #4	; (adr r2, 8009cfc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cfc:	08009dd9 	.word	0x08009dd9
 8009d00:	08009dc5 	.word	0x08009dc5
 8009d04:	08009dc5 	.word	0x08009dc5
 8009d08:	08009dc5 	.word	0x08009dc5
 8009d0c:	08009dc5 	.word	0x08009dc5
 8009d10:	08009dc5 	.word	0x08009dc5
 8009d14:	08009dc5 	.word	0x08009dc5
 8009d18:	08009dc5 	.word	0x08009dc5
 8009d1c:	08009da1 	.word	0x08009da1
 8009d20:	08009dc5 	.word	0x08009dc5
 8009d24:	08009dc5 	.word	0x08009dc5
 8009d28:	08009dc5 	.word	0x08009dc5
 8009d2c:	08009dc5 	.word	0x08009dc5
 8009d30:	08009dc5 	.word	0x08009dc5
 8009d34:	08009dc5 	.word	0x08009dc5
 8009d38:	08009dc5 	.word	0x08009dc5
 8009d3c:	08009db3 	.word	0x08009db3
 8009d40:	08009dc5 	.word	0x08009dc5
 8009d44:	08009dc5 	.word	0x08009dc5
 8009d48:	08009dc5 	.word	0x08009dc5
 8009d4c:	08009dc5 	.word	0x08009dc5
 8009d50:	08009dc5 	.word	0x08009dc5
 8009d54:	08009dc5 	.word	0x08009dc5
 8009d58:	08009dc5 	.word	0x08009dc5
 8009d5c:	08009dd9 	.word	0x08009dd9
 8009d60:	08009dc5 	.word	0x08009dc5
 8009d64:	08009dc5 	.word	0x08009dc5
 8009d68:	08009dc5 	.word	0x08009dc5
 8009d6c:	08009dc5 	.word	0x08009dc5
 8009d70:	08009dc5 	.word	0x08009dc5
 8009d74:	08009dc5 	.word	0x08009dc5
 8009d78:	08009dc5 	.word	0x08009dc5
 8009d7c:	08009dd9 	.word	0x08009dd9
 8009d80:	08009dc5 	.word	0x08009dc5
 8009d84:	08009dc5 	.word	0x08009dc5
 8009d88:	08009dc5 	.word	0x08009dc5
 8009d8c:	08009dc5 	.word	0x08009dc5
 8009d90:	08009dc5 	.word	0x08009dc5
 8009d94:	08009dc5 	.word	0x08009dc5
 8009d98:	08009dc5 	.word	0x08009dc5
 8009d9c:	08009dd9 	.word	0x08009dd9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	3304      	adds	r3, #4
 8009da4:	2101      	movs	r1, #1
 8009da6:	4618      	mov	r0, r3
 8009da8:	f001 fc1e 	bl	800b5e8 <RCCEx_PLL2_Config>
 8009dac:	4603      	mov	r3, r0
 8009dae:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009db0:	e013      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	3324      	adds	r3, #36	; 0x24
 8009db6:	2101      	movs	r1, #1
 8009db8:	4618      	mov	r0, r3
 8009dba:	f001 fcc7 	bl	800b74c <RCCEx_PLL3_Config>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009dc2:	e00a      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8009dc8:	e007      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009dca:	bf00      	nop
 8009dcc:	58024400 	.word	0x58024400
 8009dd0:	58024800 	.word	0x58024800
 8009dd4:	00ffffcf 	.word	0x00ffffcf
      break;
 8009dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dda:	7dfb      	ldrb	r3, [r7, #23]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d109      	bne.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009de0:	4b96      	ldr	r3, [pc, #600]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009de4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dec:	4993      	ldr	r1, [pc, #588]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009dee:	4313      	orrs	r3, r2
 8009df0:	654b      	str	r3, [r1, #84]	; 0x54
 8009df2:	e001      	b.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009df4:	7dfb      	ldrb	r3, [r7, #23]
 8009df6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f003 0302 	and.w	r3, r3, #2
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d038      	beq.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e08:	2b05      	cmp	r3, #5
 8009e0a:	d821      	bhi.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009e0c:	a201      	add	r2, pc, #4	; (adr r2, 8009e14 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e12:	bf00      	nop
 8009e14:	08009e57 	.word	0x08009e57
 8009e18:	08009e2d 	.word	0x08009e2d
 8009e1c:	08009e3f 	.word	0x08009e3f
 8009e20:	08009e57 	.word	0x08009e57
 8009e24:	08009e57 	.word	0x08009e57
 8009e28:	08009e57 	.word	0x08009e57
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	3304      	adds	r3, #4
 8009e30:	2101      	movs	r1, #1
 8009e32:	4618      	mov	r0, r3
 8009e34:	f001 fbd8 	bl	800b5e8 <RCCEx_PLL2_Config>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009e3c:	e00c      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	3324      	adds	r3, #36	; 0x24
 8009e42:	2101      	movs	r1, #1
 8009e44:	4618      	mov	r0, r3
 8009e46:	f001 fc81 	bl	800b74c <RCCEx_PLL3_Config>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009e4e:	e003      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e50:	2301      	movs	r3, #1
 8009e52:	75fb      	strb	r3, [r7, #23]
      break;
 8009e54:	e000      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009e56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e58:	7dfb      	ldrb	r3, [r7, #23]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d109      	bne.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009e5e:	4b77      	ldr	r3, [pc, #476]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e62:	f023 0207 	bic.w	r2, r3, #7
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e6a:	4974      	ldr	r1, [pc, #464]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	654b      	str	r3, [r1, #84]	; 0x54
 8009e70:	e001      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e72:	7dfb      	ldrb	r3, [r7, #23]
 8009e74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f003 0304 	and.w	r3, r3, #4
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d03a      	beq.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e88:	2b05      	cmp	r3, #5
 8009e8a:	d821      	bhi.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009e8c:	a201      	add	r2, pc, #4	; (adr r2, 8009e94 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e92:	bf00      	nop
 8009e94:	08009ed7 	.word	0x08009ed7
 8009e98:	08009ead 	.word	0x08009ead
 8009e9c:	08009ebf 	.word	0x08009ebf
 8009ea0:	08009ed7 	.word	0x08009ed7
 8009ea4:	08009ed7 	.word	0x08009ed7
 8009ea8:	08009ed7 	.word	0x08009ed7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	3304      	adds	r3, #4
 8009eb0:	2101      	movs	r1, #1
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f001 fb98 	bl	800b5e8 <RCCEx_PLL2_Config>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009ebc:	e00c      	b.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	3324      	adds	r3, #36	; 0x24
 8009ec2:	2101      	movs	r1, #1
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f001 fc41 	bl	800b74c <RCCEx_PLL3_Config>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009ece:	e003      	b.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ed4:	e000      	b.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009ed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ed8:	7dfb      	ldrb	r3, [r7, #23]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d10a      	bne.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009ede:	4b57      	ldr	r3, [pc, #348]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ee2:	f023 0207 	bic.w	r2, r3, #7
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eec:	4953      	ldr	r1, [pc, #332]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	658b      	str	r3, [r1, #88]	; 0x58
 8009ef2:	e001      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ef4:	7dfb      	ldrb	r3, [r7, #23]
 8009ef6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f003 0320 	and.w	r3, r3, #32
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d04b      	beq.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f0e:	d02e      	beq.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f14:	d828      	bhi.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f1a:	d02a      	beq.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f20:	d822      	bhi.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009f22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f26:	d026      	beq.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009f28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f2c:	d81c      	bhi.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009f2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f32:	d010      	beq.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f38:	d816      	bhi.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d01d      	beq.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009f3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f42:	d111      	bne.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	3304      	adds	r3, #4
 8009f48:	2100      	movs	r1, #0
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f001 fb4c 	bl	800b5e8 <RCCEx_PLL2_Config>
 8009f50:	4603      	mov	r3, r0
 8009f52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009f54:	e012      	b.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	3324      	adds	r3, #36	; 0x24
 8009f5a:	2102      	movs	r1, #2
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f001 fbf5 	bl	800b74c <RCCEx_PLL3_Config>
 8009f62:	4603      	mov	r3, r0
 8009f64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009f66:	e009      	b.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8009f6c:	e006      	b.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009f6e:	bf00      	nop
 8009f70:	e004      	b.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009f72:	bf00      	nop
 8009f74:	e002      	b.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009f76:	bf00      	nop
 8009f78:	e000      	b.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009f7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f7c:	7dfb      	ldrb	r3, [r7, #23]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d10a      	bne.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009f82:	4b2e      	ldr	r3, [pc, #184]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f86:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f90:	492a      	ldr	r1, [pc, #168]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009f92:	4313      	orrs	r3, r2
 8009f94:	654b      	str	r3, [r1, #84]	; 0x54
 8009f96:	e001      	b.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f98:	7dfb      	ldrb	r3, [r7, #23]
 8009f9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d04d      	beq.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009fae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009fb2:	d02e      	beq.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009fb4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009fb8:	d828      	bhi.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fbe:	d02a      	beq.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fc4:	d822      	bhi.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009fc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009fca:	d026      	beq.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009fcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009fd0:	d81c      	bhi.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009fd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fd6:	d010      	beq.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fdc:	d816      	bhi.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d01d      	beq.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fe6:	d111      	bne.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	3304      	adds	r3, #4
 8009fec:	2100      	movs	r1, #0
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f001 fafa 	bl	800b5e8 <RCCEx_PLL2_Config>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009ff8:	e012      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	3324      	adds	r3, #36	; 0x24
 8009ffe:	2102      	movs	r1, #2
 800a000:	4618      	mov	r0, r3
 800a002:	f001 fba3 	bl	800b74c <RCCEx_PLL3_Config>
 800a006:	4603      	mov	r3, r0
 800a008:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a00a:	e009      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a00c:	2301      	movs	r3, #1
 800a00e:	75fb      	strb	r3, [r7, #23]
      break;
 800a010:	e006      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a012:	bf00      	nop
 800a014:	e004      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a016:	bf00      	nop
 800a018:	e002      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a01a:	bf00      	nop
 800a01c:	e000      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a01e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a020:	7dfb      	ldrb	r3, [r7, #23]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d10c      	bne.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a026:	4b05      	ldr	r3, [pc, #20]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a02a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a034:	4901      	ldr	r1, [pc, #4]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a036:	4313      	orrs	r3, r2
 800a038:	658b      	str	r3, [r1, #88]	; 0x58
 800a03a:	e003      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800a03c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a040:	7dfb      	ldrb	r3, [r7, #23]
 800a042:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d04b      	beq.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a056:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a05a:	d02e      	beq.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a05c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a060:	d828      	bhi.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a066:	d02a      	beq.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a06c:	d822      	bhi.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a06e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a072:	d026      	beq.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800a074:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a078:	d81c      	bhi.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a07a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a07e:	d010      	beq.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800a080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a084:	d816      	bhi.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a086:	2b00      	cmp	r3, #0
 800a088:	d01d      	beq.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800a08a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a08e:	d111      	bne.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	3304      	adds	r3, #4
 800a094:	2100      	movs	r1, #0
 800a096:	4618      	mov	r0, r3
 800a098:	f001 faa6 	bl	800b5e8 <RCCEx_PLL2_Config>
 800a09c:	4603      	mov	r3, r0
 800a09e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a0a0:	e012      	b.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	3324      	adds	r3, #36	; 0x24
 800a0a6:	2102      	movs	r1, #2
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f001 fb4f 	bl	800b74c <RCCEx_PLL3_Config>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a0b2:	e009      	b.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	75fb      	strb	r3, [r7, #23]
      break;
 800a0b8:	e006      	b.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a0ba:	bf00      	nop
 800a0bc:	e004      	b.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a0be:	bf00      	nop
 800a0c0:	e002      	b.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a0c2:	bf00      	nop
 800a0c4:	e000      	b.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a0c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0c8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d10a      	bne.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a0ce:	4b9d      	ldr	r3, [pc, #628]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a0d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a0dc:	4999      	ldr	r1, [pc, #612]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	658b      	str	r3, [r1, #88]	; 0x58
 800a0e2:	e001      	b.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0e4:	7dfb      	ldrb	r3, [r7, #23]
 800a0e6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f003 0308 	and.w	r3, r3, #8
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d01a      	beq.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0fe:	d10a      	bne.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	3324      	adds	r3, #36	; 0x24
 800a104:	2102      	movs	r1, #2
 800a106:	4618      	mov	r0, r3
 800a108:	f001 fb20 	bl	800b74c <RCCEx_PLL3_Config>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d001      	beq.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a116:	4b8b      	ldr	r3, [pc, #556]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a11a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a124:	4987      	ldr	r1, [pc, #540]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a126:	4313      	orrs	r3, r2
 800a128:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f003 0310 	and.w	r3, r3, #16
 800a132:	2b00      	cmp	r3, #0
 800a134:	d01a      	beq.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a13c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a140:	d10a      	bne.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	3324      	adds	r3, #36	; 0x24
 800a146:	2102      	movs	r1, #2
 800a148:	4618      	mov	r0, r3
 800a14a:	f001 faff 	bl	800b74c <RCCEx_PLL3_Config>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d001      	beq.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800a154:	2301      	movs	r3, #1
 800a156:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a158:	4b7a      	ldr	r3, [pc, #488]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a15a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a15c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a166:	4977      	ldr	r1, [pc, #476]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a168:	4313      	orrs	r3, r2
 800a16a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a174:	2b00      	cmp	r3, #0
 800a176:	d034      	beq.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a17e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a182:	d01d      	beq.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800a184:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a188:	d817      	bhi.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d003      	beq.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a18e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a192:	d009      	beq.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800a194:	e011      	b.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	3304      	adds	r3, #4
 800a19a:	2100      	movs	r1, #0
 800a19c:	4618      	mov	r0, r3
 800a19e:	f001 fa23 	bl	800b5e8 <RCCEx_PLL2_Config>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a1a6:	e00c      	b.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	3324      	adds	r3, #36	; 0x24
 800a1ac:	2102      	movs	r1, #2
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f001 facc 	bl	800b74c <RCCEx_PLL3_Config>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a1b8:	e003      	b.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	75fb      	strb	r3, [r7, #23]
      break;
 800a1be:	e000      	b.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800a1c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1c2:	7dfb      	ldrb	r3, [r7, #23]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d10a      	bne.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a1c8:	4b5e      	ldr	r3, [pc, #376]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a1ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a1d6:	495b      	ldr	r1, [pc, #364]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	658b      	str	r3, [r1, #88]	; 0x58
 800a1dc:	e001      	b.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1de:	7dfb      	ldrb	r3, [r7, #23]
 800a1e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d033      	beq.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a1f8:	d01c      	beq.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800a1fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a1fe:	d816      	bhi.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800a200:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a204:	d003      	beq.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800a206:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a20a:	d007      	beq.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800a20c:	e00f      	b.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a20e:	4b4d      	ldr	r3, [pc, #308]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a212:	4a4c      	ldr	r2, [pc, #304]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a218:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a21a:	e00c      	b.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	3324      	adds	r3, #36	; 0x24
 800a220:	2101      	movs	r1, #1
 800a222:	4618      	mov	r0, r3
 800a224:	f001 fa92 	bl	800b74c <RCCEx_PLL3_Config>
 800a228:	4603      	mov	r3, r0
 800a22a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a22c:	e003      	b.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	75fb      	strb	r3, [r7, #23]
      break;
 800a232:	e000      	b.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800a234:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a236:	7dfb      	ldrb	r3, [r7, #23]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d10a      	bne.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a23c:	4b41      	ldr	r3, [pc, #260]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a23e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a240:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a24a:	493e      	ldr	r1, [pc, #248]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a24c:	4313      	orrs	r3, r2
 800a24e:	654b      	str	r3, [r1, #84]	; 0x54
 800a250:	e001      	b.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a252:	7dfb      	ldrb	r3, [r7, #23]
 800a254:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d029      	beq.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a266:	2b00      	cmp	r3, #0
 800a268:	d003      	beq.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800a26a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a26e:	d007      	beq.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800a270:	e00f      	b.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a272:	4b34      	ldr	r3, [pc, #208]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a276:	4a33      	ldr	r2, [pc, #204]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a27c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a27e:	e00b      	b.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	3304      	adds	r3, #4
 800a284:	2102      	movs	r1, #2
 800a286:	4618      	mov	r0, r3
 800a288:	f001 f9ae 	bl	800b5e8 <RCCEx_PLL2_Config>
 800a28c:	4603      	mov	r3, r0
 800a28e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a290:	e002      	b.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	75fb      	strb	r3, [r7, #23]
      break;
 800a296:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a298:	7dfb      	ldrb	r3, [r7, #23]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d109      	bne.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a29e:	4b29      	ldr	r3, [pc, #164]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a2a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2aa:	4926      	ldr	r1, [pc, #152]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a2b0:	e001      	b.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2b2:	7dfb      	ldrb	r3, [r7, #23]
 800a2b4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00a      	beq.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	3324      	adds	r3, #36	; 0x24
 800a2c6:	2102      	movs	r1, #2
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f001 fa3f 	bl	800b74c <RCCEx_PLL3_Config>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d001      	beq.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d033      	beq.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2ec:	d017      	beq.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a2ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2f2:	d811      	bhi.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a2f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2f8:	d013      	beq.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a2fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2fe:	d80b      	bhi.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a300:	2b00      	cmp	r3, #0
 800a302:	d010      	beq.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800a304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a308:	d106      	bne.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a30a:	4b0e      	ldr	r3, [pc, #56]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a30e:	4a0d      	ldr	r2, [pc, #52]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a314:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a316:	e007      	b.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	75fb      	strb	r3, [r7, #23]
      break;
 800a31c:	e004      	b.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a31e:	bf00      	nop
 800a320:	e002      	b.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a322:	bf00      	nop
 800a324:	e000      	b.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a326:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a328:	7dfb      	ldrb	r3, [r7, #23]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d10c      	bne.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a32e:	4b05      	ldr	r3, [pc, #20]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a332:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a33a:	4902      	ldr	r1, [pc, #8]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a33c:	4313      	orrs	r3, r2
 800a33e:	654b      	str	r3, [r1, #84]	; 0x54
 800a340:	e004      	b.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800a342:	bf00      	nop
 800a344:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a348:	7dfb      	ldrb	r3, [r7, #23]
 800a34a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a354:	2b00      	cmp	r3, #0
 800a356:	d008      	beq.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a358:	4b31      	ldr	r3, [pc, #196]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a35a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a35c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a364:	492e      	ldr	r1, [pc, #184]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a366:	4313      	orrs	r3, r2
 800a368:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a372:	2b00      	cmp	r3, #0
 800a374:	d009      	beq.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a376:	4b2a      	ldr	r3, [pc, #168]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a384:	4926      	ldr	r1, [pc, #152]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a386:	4313      	orrs	r3, r2
 800a388:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a392:	2b00      	cmp	r3, #0
 800a394:	d008      	beq.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a396:	4b22      	ldr	r3, [pc, #136]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a39a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3a2:	491f      	ldr	r1, [pc, #124]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d00d      	beq.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a3b4:	4b1a      	ldr	r3, [pc, #104]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	4a19      	ldr	r2, [pc, #100]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a3ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a3be:	6113      	str	r3, [r2, #16]
 800a3c0:	4b17      	ldr	r3, [pc, #92]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a3c2:	691a      	ldr	r2, [r3, #16]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a3ca:	4915      	ldr	r1, [pc, #84]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	da08      	bge.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a3d8:	4b11      	ldr	r3, [pc, #68]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a3da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3dc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3e4:	490e      	ldr	r1, [pc, #56]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d009      	beq.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a3f6:	4b0a      	ldr	r3, [pc, #40]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a3f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a404:	4906      	ldr	r1, [pc, #24]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a406:	4313      	orrs	r3, r2
 800a408:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a40a:	7dbb      	ldrb	r3, [r7, #22]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d101      	bne.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800a410:	2300      	movs	r3, #0
 800a412:	e000      	b.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800a414:	2301      	movs	r3, #1
}
 800a416:	4618      	mov	r0, r3
 800a418:	3718      	adds	r7, #24
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	58024400 	.word	0x58024400

0800a424 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b090      	sub	sp, #64	; 0x40
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a432:	f040 8095 	bne.w	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a436:	4b97      	ldr	r3, [pc, #604]	; (800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a43a:	f003 0307 	and.w	r3, r3, #7
 800a43e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a442:	2b04      	cmp	r3, #4
 800a444:	f200 8088 	bhi.w	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a448:	a201      	add	r2, pc, #4	; (adr r2, 800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a44a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44e:	bf00      	nop
 800a450:	0800a465 	.word	0x0800a465
 800a454:	0800a48d 	.word	0x0800a48d
 800a458:	0800a4b5 	.word	0x0800a4b5
 800a45c:	0800a551 	.word	0x0800a551
 800a460:	0800a4dd 	.word	0x0800a4dd
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a464:	4b8b      	ldr	r3, [pc, #556]	; (800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a46c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a470:	d108      	bne.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a476:	4618      	mov	r0, r3
 800a478:	f000 ff64 	bl	800b344 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a480:	f000 bc94 	b.w	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a484:	2300      	movs	r3, #0
 800a486:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a488:	f000 bc90 	b.w	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a48c:	4b81      	ldr	r3, [pc, #516]	; (800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a494:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a498:	d108      	bne.n	800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a49a:	f107 0318 	add.w	r3, r7, #24
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f000 fca8 	bl	800adf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4a4:	69bb      	ldr	r3, [r7, #24]
 800a4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a4a8:	f000 bc80 	b.w	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4b0:	f000 bc7c 	b.w	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4b4:	4b77      	ldr	r3, [pc, #476]	; (800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4c0:	d108      	bne.n	800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4c2:	f107 030c 	add.w	r3, r7, #12
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f000 fde8 	bl	800b09c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a4d0:	f000 bc6c 	b.w	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4d8:	f000 bc68 	b.w	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a4dc:	4b6d      	ldr	r3, [pc, #436]	; (800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a4de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a4e4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4e6:	4b6b      	ldr	r3, [pc, #428]	; (800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f003 0304 	and.w	r3, r3, #4
 800a4ee:	2b04      	cmp	r3, #4
 800a4f0:	d10c      	bne.n	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a4f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d109      	bne.n	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a4f8:	4b66      	ldr	r3, [pc, #408]	; (800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	08db      	lsrs	r3, r3, #3
 800a4fe:	f003 0303 	and.w	r3, r3, #3
 800a502:	4a65      	ldr	r2, [pc, #404]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a504:	fa22 f303 	lsr.w	r3, r2, r3
 800a508:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a50a:	e01f      	b.n	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a50c:	4b61      	ldr	r3, [pc, #388]	; (800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a518:	d106      	bne.n	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a51a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a51c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a520:	d102      	bne.n	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a522:	4b5e      	ldr	r3, [pc, #376]	; (800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a524:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a526:	e011      	b.n	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a528:	4b5a      	ldr	r3, [pc, #360]	; (800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a530:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a534:	d106      	bne.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a538:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a53c:	d102      	bne.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a53e:	4b58      	ldr	r3, [pc, #352]	; (800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a540:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a542:	e003      	b.n	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a544:	2300      	movs	r3, #0
 800a546:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a548:	f000 bc30 	b.w	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a54c:	f000 bc2e 	b.w	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a550:	4b54      	ldr	r3, [pc, #336]	; (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a552:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a554:	f000 bc2a 	b.w	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a558:	2300      	movs	r3, #0
 800a55a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a55c:	f000 bc26 	b.w	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a566:	f040 809f 	bne.w	800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a56a:	4b4a      	ldr	r3, [pc, #296]	; (800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a56c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a56e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a572:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a57a:	d04d      	beq.n	800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a582:	f200 8084 	bhi.w	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a588:	2bc0      	cmp	r3, #192	; 0xc0
 800a58a:	d07d      	beq.n	800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58e:	2bc0      	cmp	r3, #192	; 0xc0
 800a590:	d87d      	bhi.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a594:	2b80      	cmp	r3, #128	; 0x80
 800a596:	d02d      	beq.n	800a5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59a:	2b80      	cmp	r3, #128	; 0x80
 800a59c:	d877      	bhi.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d003      	beq.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a6:	2b40      	cmp	r3, #64	; 0x40
 800a5a8:	d012      	beq.n	800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a5aa:	e070      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5ac:	4b39      	ldr	r3, [pc, #228]	; (800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5b8:	d107      	bne.n	800a5ca <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f000 fec0 	bl	800b344 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5c8:	e3f0      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5ce:	e3ed      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5d0:	4b30      	ldr	r3, [pc, #192]	; (800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5dc:	d107      	bne.n	800a5ee <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5de:	f107 0318 	add.w	r3, r7, #24
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f000 fc06 	bl	800adf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5ec:	e3de      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5f2:	e3db      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5f4:	4b27      	ldr	r3, [pc, #156]	; (800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a600:	d107      	bne.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a602:	f107 030c 	add.w	r3, r7, #12
 800a606:	4618      	mov	r0, r3
 800a608:	f000 fd48 	bl	800b09c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a610:	e3cc      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a612:	2300      	movs	r3, #0
 800a614:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a616:	e3c9      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a618:	4b1e      	ldr	r3, [pc, #120]	; (800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a61a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a61c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a620:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a622:	4b1c      	ldr	r3, [pc, #112]	; (800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f003 0304 	and.w	r3, r3, #4
 800a62a:	2b04      	cmp	r3, #4
 800a62c:	d10c      	bne.n	800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a630:	2b00      	cmp	r3, #0
 800a632:	d109      	bne.n	800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a634:	4b17      	ldr	r3, [pc, #92]	; (800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	08db      	lsrs	r3, r3, #3
 800a63a:	f003 0303 	and.w	r3, r3, #3
 800a63e:	4a16      	ldr	r2, [pc, #88]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a640:	fa22 f303 	lsr.w	r3, r2, r3
 800a644:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a646:	e01e      	b.n	800a686 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a648:	4b12      	ldr	r3, [pc, #72]	; (800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a654:	d106      	bne.n	800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a658:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a65c:	d102      	bne.n	800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a65e:	4b0f      	ldr	r3, [pc, #60]	; (800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a660:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a662:	e010      	b.n	800a686 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a664:	4b0b      	ldr	r3, [pc, #44]	; (800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a66c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a670:	d106      	bne.n	800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a678:	d102      	bne.n	800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a67a:	4b09      	ldr	r3, [pc, #36]	; (800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a67c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a67e:	e002      	b.n	800a686 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a680:	2300      	movs	r3, #0
 800a682:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a684:	e392      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a686:	e391      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a688:	4b06      	ldr	r3, [pc, #24]	; (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a68a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a68c:	e38e      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a68e:	2300      	movs	r3, #0
 800a690:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a692:	e38b      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a694:	58024400 	.word	0x58024400
 800a698:	03d09000 	.word	0x03d09000
 800a69c:	003d0900 	.word	0x003d0900
 800a6a0:	017d7840 	.word	0x017d7840
 800a6a4:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6ae:	f040 809c 	bne.w	800a7ea <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a6b2:	4b9d      	ldr	r3, [pc, #628]	; (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a6b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6b6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a6ba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a6c2:	d054      	beq.n	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800a6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a6ca:	f200 808b 	bhi.w	800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a6d4:	f000 8083 	beq.w	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800a6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a6de:	f200 8081 	bhi.w	800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a6e8:	d02f      	beq.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800a6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a6f0:	d878      	bhi.n	800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d004      	beq.n	800a702 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800a6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6fe:	d012      	beq.n	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800a700:	e070      	b.n	800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a702:	4b89      	ldr	r3, [pc, #548]	; (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a70a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a70e:	d107      	bne.n	800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a714:	4618      	mov	r0, r3
 800a716:	f000 fe15 	bl	800b344 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a71e:	e345      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a720:	2300      	movs	r3, #0
 800a722:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a724:	e342      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a726:	4b80      	ldr	r3, [pc, #512]	; (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a72e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a732:	d107      	bne.n	800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a734:	f107 0318 	add.w	r3, r7, #24
 800a738:	4618      	mov	r0, r3
 800a73a:	f000 fb5b 	bl	800adf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a742:	e333      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a744:	2300      	movs	r3, #0
 800a746:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a748:	e330      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a74a:	4b77      	ldr	r3, [pc, #476]	; (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a752:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a756:	d107      	bne.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a758:	f107 030c 	add.w	r3, r7, #12
 800a75c:	4618      	mov	r0, r3
 800a75e:	f000 fc9d 	bl	800b09c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a766:	e321      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a768:	2300      	movs	r3, #0
 800a76a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a76c:	e31e      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a76e:	4b6e      	ldr	r3, [pc, #440]	; (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a772:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a776:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a778:	4b6b      	ldr	r3, [pc, #428]	; (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f003 0304 	and.w	r3, r3, #4
 800a780:	2b04      	cmp	r3, #4
 800a782:	d10c      	bne.n	800a79e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800a784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a786:	2b00      	cmp	r3, #0
 800a788:	d109      	bne.n	800a79e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a78a:	4b67      	ldr	r3, [pc, #412]	; (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	08db      	lsrs	r3, r3, #3
 800a790:	f003 0303 	and.w	r3, r3, #3
 800a794:	4a65      	ldr	r2, [pc, #404]	; (800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a796:	fa22 f303 	lsr.w	r3, r2, r3
 800a79a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a79c:	e01e      	b.n	800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a79e:	4b62      	ldr	r3, [pc, #392]	; (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7aa:	d106      	bne.n	800a7ba <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a7ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7b2:	d102      	bne.n	800a7ba <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a7b4:	4b5e      	ldr	r3, [pc, #376]	; (800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a7b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7b8:	e010      	b.n	800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a7ba:	4b5b      	ldr	r3, [pc, #364]	; (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7c6:	d106      	bne.n	800a7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a7c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7ce:	d102      	bne.n	800a7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a7d0:	4b58      	ldr	r3, [pc, #352]	; (800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a7d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7d4:	e002      	b.n	800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a7da:	e2e7      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a7dc:	e2e6      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a7de:	4b56      	ldr	r3, [pc, #344]	; (800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7e2:	e2e3      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7e8:	e2e0      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7f0:	f040 80a7 	bne.w	800a942 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a7f4:	4b4c      	ldr	r3, [pc, #304]	; (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a7f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7f8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a7fc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a800:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a804:	d055      	beq.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a808:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a80c:	f200 8096 	bhi.w	800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a812:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a816:	f000 8084 	beq.w	800a922 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a820:	f200 808c 	bhi.w	800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a826:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a82a:	d030      	beq.n	800a88e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a832:	f200 8083 	bhi.w	800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d004      	beq.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a842:	d012      	beq.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a844:	e07a      	b.n	800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a846:	4b38      	ldr	r3, [pc, #224]	; (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a84e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a852:	d107      	bne.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a858:	4618      	mov	r0, r3
 800a85a:	f000 fd73 	bl	800b344 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a860:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a862:	e2a3      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a864:	2300      	movs	r3, #0
 800a866:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a868:	e2a0      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a86a:	4b2f      	ldr	r3, [pc, #188]	; (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a872:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a876:	d107      	bne.n	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a878:	f107 0318 	add.w	r3, r7, #24
 800a87c:	4618      	mov	r0, r3
 800a87e:	f000 fab9 	bl	800adf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a886:	e291      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a888:	2300      	movs	r3, #0
 800a88a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a88c:	e28e      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a88e:	4b26      	ldr	r3, [pc, #152]	; (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a896:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a89a:	d107      	bne.n	800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a89c:	f107 030c 	add.w	r3, r7, #12
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f000 fbfb 	bl	800b09c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a8aa:	e27f      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8b0:	e27c      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a8b2:	4b1d      	ldr	r3, [pc, #116]	; (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a8ba:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8bc:	4b1a      	ldr	r3, [pc, #104]	; (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f003 0304 	and.w	r3, r3, #4
 800a8c4:	2b04      	cmp	r3, #4
 800a8c6:	d10c      	bne.n	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d109      	bne.n	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a8ce:	4b16      	ldr	r3, [pc, #88]	; (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	08db      	lsrs	r3, r3, #3
 800a8d4:	f003 0303 	and.w	r3, r3, #3
 800a8d8:	4a14      	ldr	r2, [pc, #80]	; (800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a8da:	fa22 f303 	lsr.w	r3, r2, r3
 800a8de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8e0:	e01e      	b.n	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8e2:	4b11      	ldr	r3, [pc, #68]	; (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8ee:	d106      	bne.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a8f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8f6:	d102      	bne.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a8f8:	4b0d      	ldr	r3, [pc, #52]	; (800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8fc:	e010      	b.n	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8fe:	4b0a      	ldr	r3, [pc, #40]	; (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a906:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a90a:	d106      	bne.n	800a91a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800a90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a90e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a912:	d102      	bne.n	800a91a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a914:	4b07      	ldr	r3, [pc, #28]	; (800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a916:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a918:	e002      	b.n	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a91a:	2300      	movs	r3, #0
 800a91c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a91e:	e245      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a920:	e244      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a922:	4b05      	ldr	r3, [pc, #20]	; (800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a924:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a926:	e241      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a928:	58024400 	.word	0x58024400
 800a92c:	03d09000 	.word	0x03d09000
 800a930:	003d0900 	.word	0x003d0900
 800a934:	017d7840 	.word	0x017d7840
 800a938:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800a93c:	2300      	movs	r3, #0
 800a93e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a940:	e234      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a948:	f040 809c 	bne.w	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a94c:	4b9b      	ldr	r3, [pc, #620]	; (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a94e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a950:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a954:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a958:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a95c:	d054      	beq.n	800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800a95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a960:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a964:	f200 808b 	bhi.w	800aa7e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a96e:	f000 8083 	beq.w	800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800a972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a974:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a978:	f200 8081 	bhi.w	800aa7e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a97e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a982:	d02f      	beq.n	800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800a984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a98a:	d878      	bhi.n	800aa7e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d004      	beq.n	800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800a992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a998:	d012      	beq.n	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800a99a:	e070      	b.n	800aa7e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a99c:	4b87      	ldr	r3, [pc, #540]	; (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9a8:	d107      	bne.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f000 fcc8 	bl	800b344 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a9b8:	e1f8      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9be:	e1f5      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9c0:	4b7e      	ldr	r3, [pc, #504]	; (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9cc:	d107      	bne.n	800a9de <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9ce:	f107 0318 	add.w	r3, r7, #24
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f000 fa0e 	bl	800adf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a9d8:	69bb      	ldr	r3, [r7, #24]
 800a9da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a9dc:	e1e6      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9e2:	e1e3      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9e4:	4b75      	ldr	r3, [pc, #468]	; (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9f0:	d107      	bne.n	800aa02 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9f2:	f107 030c 	add.w	r3, r7, #12
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f000 fb50 	bl	800b09c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aa00:	e1d4      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aa02:	2300      	movs	r3, #0
 800aa04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa06:	e1d1      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800aa08:	4b6c      	ldr	r3, [pc, #432]	; (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa10:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa12:	4b6a      	ldr	r3, [pc, #424]	; (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f003 0304 	and.w	r3, r3, #4
 800aa1a:	2b04      	cmp	r3, #4
 800aa1c:	d10c      	bne.n	800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800aa1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d109      	bne.n	800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa24:	4b65      	ldr	r3, [pc, #404]	; (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	08db      	lsrs	r3, r3, #3
 800aa2a:	f003 0303 	and.w	r3, r3, #3
 800aa2e:	4a64      	ldr	r2, [pc, #400]	; (800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800aa30:	fa22 f303 	lsr.w	r3, r2, r3
 800aa34:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa36:	e01e      	b.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa38:	4b60      	ldr	r3, [pc, #384]	; (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa44:	d106      	bne.n	800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800aa46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa4c:	d102      	bne.n	800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800aa4e:	4b5d      	ldr	r3, [pc, #372]	; (800abc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800aa50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa52:	e010      	b.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa54:	4b59      	ldr	r3, [pc, #356]	; (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa60:	d106      	bne.n	800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800aa62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa68:	d102      	bne.n	800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aa6a:	4b57      	ldr	r3, [pc, #348]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800aa6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa6e:	e002      	b.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800aa70:	2300      	movs	r3, #0
 800aa72:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800aa74:	e19a      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800aa76:	e199      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800aa78:	4b54      	ldr	r3, [pc, #336]	; (800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa7c:	e196      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa82:	e193      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800aa8a:	d173      	bne.n	800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800aa8c:	4b4b      	ldr	r3, [pc, #300]	; (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aa94:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aa96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa9c:	d02f      	beq.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800aa9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aaa4:	d863      	bhi.n	800ab6e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800aaa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d004      	beq.n	800aab6 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800aaac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aab2:	d012      	beq.n	800aada <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800aab4:	e05b      	b.n	800ab6e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aab6:	4b41      	ldr	r3, [pc, #260]	; (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aabe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aac2:	d107      	bne.n	800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aac4:	f107 0318 	add.w	r3, r7, #24
 800aac8:	4618      	mov	r0, r3
 800aaca:	f000 f993 	bl	800adf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aad2:	e16b      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aad4:	2300      	movs	r3, #0
 800aad6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aad8:	e168      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aada:	4b38      	ldr	r3, [pc, #224]	; (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aae2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aae6:	d107      	bne.n	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aae8:	f107 030c 	add.w	r3, r7, #12
 800aaec:	4618      	mov	r0, r3
 800aaee:	f000 fad5 	bl	800b09c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aaf6:	e159      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aafc:	e156      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800aafe:	4b2f      	ldr	r3, [pc, #188]	; (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab06:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab08:	4b2c      	ldr	r3, [pc, #176]	; (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f003 0304 	and.w	r3, r3, #4
 800ab10:	2b04      	cmp	r3, #4
 800ab12:	d10c      	bne.n	800ab2e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800ab14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d109      	bne.n	800ab2e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab1a:	4b28      	ldr	r3, [pc, #160]	; (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	08db      	lsrs	r3, r3, #3
 800ab20:	f003 0303 	and.w	r3, r3, #3
 800ab24:	4a26      	ldr	r2, [pc, #152]	; (800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800ab26:	fa22 f303 	lsr.w	r3, r2, r3
 800ab2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab2c:	e01e      	b.n	800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab2e:	4b23      	ldr	r3, [pc, #140]	; (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab3a:	d106      	bne.n	800ab4a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800ab3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab42:	d102      	bne.n	800ab4a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ab44:	4b1f      	ldr	r3, [pc, #124]	; (800abc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800ab46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab48:	e010      	b.n	800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab4a:	4b1c      	ldr	r3, [pc, #112]	; (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab56:	d106      	bne.n	800ab66 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800ab58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab5e:	d102      	bne.n	800ab66 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ab60:	4b19      	ldr	r3, [pc, #100]	; (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800ab62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab64:	e002      	b.n	800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ab66:	2300      	movs	r3, #0
 800ab68:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ab6a:	e11f      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ab6c:	e11e      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab72:	e11b      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab7a:	d13e      	bne.n	800abfa <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800ab7c:	4b0f      	ldr	r3, [pc, #60]	; (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab84:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ab86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d004      	beq.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800ab8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab92:	d01d      	beq.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800ab94:	e02e      	b.n	800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab96:	4b09      	ldr	r3, [pc, #36]	; (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aba2:	d107      	bne.n	800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aba8:	4618      	mov	r0, r3
 800abaa:	f000 fbcb 	bl	800b344 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800abae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800abb2:	e0fb      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800abb4:	2300      	movs	r3, #0
 800abb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abb8:	e0f8      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800abba:	bf00      	nop
 800abbc:	58024400 	.word	0x58024400
 800abc0:	03d09000 	.word	0x03d09000
 800abc4:	003d0900 	.word	0x003d0900
 800abc8:	017d7840 	.word	0x017d7840
 800abcc:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abd0:	4b79      	ldr	r3, [pc, #484]	; (800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abdc:	d107      	bne.n	800abee <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abde:	f107 0318 	add.w	r3, r7, #24
 800abe2:	4618      	mov	r0, r3
 800abe4:	f000 f906 	bl	800adf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800abe8:	6a3b      	ldr	r3, [r7, #32]
 800abea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800abec:	e0de      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800abee:	2300      	movs	r3, #0
 800abf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abf2:	e0db      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800abf4:	2300      	movs	r3, #0
 800abf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abf8:	e0d8      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac00:	f040 8085 	bne.w	800ad0e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800ac04:	4b6c      	ldr	r3, [pc, #432]	; (800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac08:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ac0c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ac0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac14:	d06b      	beq.n	800acee <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800ac16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac1c:	d874      	bhi.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ac1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac24:	d056      	beq.n	800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800ac26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac2c:	d86c      	bhi.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ac2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ac34:	d03b      	beq.n	800acae <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800ac36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ac3c:	d864      	bhi.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ac3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac44:	d021      	beq.n	800ac8a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800ac46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac4c:	d85c      	bhi.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ac4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d004      	beq.n	800ac5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ac54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac5a:	d004      	beq.n	800ac66 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800ac5c:	e054      	b.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ac5e:	f000 f8b3 	bl	800adc8 <HAL_RCCEx_GetD3PCLK1Freq>
 800ac62:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800ac64:	e0a2      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac66:	4b54      	ldr	r3, [pc, #336]	; (800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac72:	d107      	bne.n	800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac74:	f107 0318 	add.w	r3, r7, #24
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f000 f8bb 	bl	800adf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ac7e:	69fb      	ldr	r3, [r7, #28]
 800ac80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ac82:	e093      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ac84:	2300      	movs	r3, #0
 800ac86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac88:	e090      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac8a:	4b4b      	ldr	r3, [pc, #300]	; (800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac96:	d107      	bne.n	800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac98:	f107 030c 	add.w	r3, r7, #12
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f000 f9fd 	bl	800b09c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aca6:	e081      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aca8:	2300      	movs	r3, #0
 800acaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acac:	e07e      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800acae:	4b42      	ldr	r3, [pc, #264]	; (800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f003 0304 	and.w	r3, r3, #4
 800acb6:	2b04      	cmp	r3, #4
 800acb8:	d109      	bne.n	800acce <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800acba:	4b3f      	ldr	r3, [pc, #252]	; (800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	08db      	lsrs	r3, r3, #3
 800acc0:	f003 0303 	and.w	r3, r3, #3
 800acc4:	4a3d      	ldr	r2, [pc, #244]	; (800adbc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800acc6:	fa22 f303 	lsr.w	r3, r2, r3
 800acca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800accc:	e06e      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800acce:	2300      	movs	r3, #0
 800acd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acd2:	e06b      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800acd4:	4b38      	ldr	r3, [pc, #224]	; (800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ace0:	d102      	bne.n	800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800ace2:	4b37      	ldr	r3, [pc, #220]	; (800adc0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ace4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ace6:	e061      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ace8:	2300      	movs	r3, #0
 800acea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acec:	e05e      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800acee:	4b32      	ldr	r3, [pc, #200]	; (800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acfa:	d102      	bne.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800acfc:	4b31      	ldr	r3, [pc, #196]	; (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800acfe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad00:	e054      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ad02:	2300      	movs	r3, #0
 800ad04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad06:	e051      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad0c:	e04e      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad14:	d148      	bne.n	800ada8 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800ad16:	4b28      	ldr	r3, [pc, #160]	; (800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ad1e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ad20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad26:	d02a      	beq.n	800ad7e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800ad28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad2e:	d838      	bhi.n	800ada2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800ad30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d004      	beq.n	800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800ad36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad3c:	d00d      	beq.n	800ad5a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800ad3e:	e030      	b.n	800ada2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad40:	4b1d      	ldr	r3, [pc, #116]	; (800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad4c:	d102      	bne.n	800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800ad4e:	4b1d      	ldr	r3, [pc, #116]	; (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ad50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad52:	e02b      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ad54:	2300      	movs	r3, #0
 800ad56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad58:	e028      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad5a:	4b17      	ldr	r3, [pc, #92]	; (800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad66:	d107      	bne.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f000 fae9 	bl	800b344 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad76:	e019      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad7c:	e016      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad7e:	4b0e      	ldr	r3, [pc, #56]	; (800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad8a:	d107      	bne.n	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad8c:	f107 0318 	add.w	r3, r7, #24
 800ad90:	4618      	mov	r0, r3
 800ad92:	f000 f82f 	bl	800adf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad96:	69fb      	ldr	r3, [r7, #28]
 800ad98:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad9a:	e007      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ada0:	e004      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800ada2:	2300      	movs	r3, #0
 800ada4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ada6:	e001      	b.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800ada8:	2300      	movs	r3, #0
 800adaa:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800adac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3740      	adds	r7, #64	; 0x40
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	58024400 	.word	0x58024400
 800adbc:	03d09000 	.word	0x03d09000
 800adc0:	003d0900 	.word	0x003d0900
 800adc4:	017d7840 	.word	0x017d7840

0800adc8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800adcc:	f7fe fb88 	bl	80094e0 <HAL_RCC_GetHCLKFreq>
 800add0:	4602      	mov	r2, r0
 800add2:	4b06      	ldr	r3, [pc, #24]	; (800adec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800add4:	6a1b      	ldr	r3, [r3, #32]
 800add6:	091b      	lsrs	r3, r3, #4
 800add8:	f003 0307 	and.w	r3, r3, #7
 800addc:	4904      	ldr	r1, [pc, #16]	; (800adf0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800adde:	5ccb      	ldrb	r3, [r1, r3]
 800ade0:	f003 031f 	and.w	r3, r3, #31
 800ade4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ade8:	4618      	mov	r0, r3
 800adea:	bd80      	pop	{r7, pc}
 800adec:	58024400 	.word	0x58024400
 800adf0:	0800fe68 	.word	0x0800fe68

0800adf4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b089      	sub	sp, #36	; 0x24
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800adfc:	4ba1      	ldr	r3, [pc, #644]	; (800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae00:	f003 0303 	and.w	r3, r3, #3
 800ae04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ae06:	4b9f      	ldr	r3, [pc, #636]	; (800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae0a:	0b1b      	lsrs	r3, r3, #12
 800ae0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ae12:	4b9c      	ldr	r3, [pc, #624]	; (800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae16:	091b      	lsrs	r3, r3, #4
 800ae18:	f003 0301 	and.w	r3, r3, #1
 800ae1c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ae1e:	4b99      	ldr	r3, [pc, #612]	; (800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae22:	08db      	lsrs	r3, r3, #3
 800ae24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae28:	693a      	ldr	r2, [r7, #16]
 800ae2a:	fb02 f303 	mul.w	r3, r2, r3
 800ae2e:	ee07 3a90 	vmov	s15, r3
 800ae32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f000 8111 	beq.w	800b064 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ae42:	69bb      	ldr	r3, [r7, #24]
 800ae44:	2b02      	cmp	r3, #2
 800ae46:	f000 8083 	beq.w	800af50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	2b02      	cmp	r3, #2
 800ae4e:	f200 80a1 	bhi.w	800af94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ae52:	69bb      	ldr	r3, [r7, #24]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d003      	beq.n	800ae60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ae58:	69bb      	ldr	r3, [r7, #24]
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d056      	beq.n	800af0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ae5e:	e099      	b.n	800af94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae60:	4b88      	ldr	r3, [pc, #544]	; (800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f003 0320 	and.w	r3, r3, #32
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d02d      	beq.n	800aec8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae6c:	4b85      	ldr	r3, [pc, #532]	; (800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	08db      	lsrs	r3, r3, #3
 800ae72:	f003 0303 	and.w	r3, r3, #3
 800ae76:	4a84      	ldr	r2, [pc, #528]	; (800b088 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ae78:	fa22 f303 	lsr.w	r3, r2, r3
 800ae7c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	ee07 3a90 	vmov	s15, r3
 800ae84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	ee07 3a90 	vmov	s15, r3
 800ae8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae96:	4b7b      	ldr	r3, [pc, #492]	; (800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae9e:	ee07 3a90 	vmov	s15, r3
 800aea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aea6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeaa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b08c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aeae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aec2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aec6:	e087      	b.n	800afd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	ee07 3a90 	vmov	s15, r3
 800aece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aed2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b090 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeda:	4b6a      	ldr	r3, [pc, #424]	; (800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aee2:	ee07 3a90 	vmov	s15, r3
 800aee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeea:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b08c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aefa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aefe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af0a:	e065      	b.n	800afd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	ee07 3a90 	vmov	s15, r3
 800af12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b094 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af1e:	4b59      	ldr	r3, [pc, #356]	; (800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af26:	ee07 3a90 	vmov	s15, r3
 800af2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af32:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b08c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af4e:	e043      	b.n	800afd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	ee07 3a90 	vmov	s15, r3
 800af56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b098 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800af5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af62:	4b48      	ldr	r3, [pc, #288]	; (800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af6a:	ee07 3a90 	vmov	s15, r3
 800af6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af72:	ed97 6a03 	vldr	s12, [r7, #12]
 800af76:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b08c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af92:	e021      	b.n	800afd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	ee07 3a90 	vmov	s15, r3
 800af9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b094 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800afa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afa6:	4b37      	ldr	r3, [pc, #220]	; (800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afae:	ee07 3a90 	vmov	s15, r3
 800afb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800afba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b08c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afd6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800afd8:	4b2a      	ldr	r3, [pc, #168]	; (800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afdc:	0a5b      	lsrs	r3, r3, #9
 800afde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afe2:	ee07 3a90 	vmov	s15, r3
 800afe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aff2:	edd7 6a07 	vldr	s13, [r7, #28]
 800aff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800affa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800affe:	ee17 2a90 	vmov	r2, s15
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b006:	4b1f      	ldr	r3, [pc, #124]	; (800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b00a:	0c1b      	lsrs	r3, r3, #16
 800b00c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b010:	ee07 3a90 	vmov	s15, r3
 800b014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b018:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b01c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b020:	edd7 6a07 	vldr	s13, [r7, #28]
 800b024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b02c:	ee17 2a90 	vmov	r2, s15
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b034:	4b13      	ldr	r3, [pc, #76]	; (800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b038:	0e1b      	lsrs	r3, r3, #24
 800b03a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b03e:	ee07 3a90 	vmov	s15, r3
 800b042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b046:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b04a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b04e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b05a:	ee17 2a90 	vmov	r2, s15
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b062:	e008      	b.n	800b076 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2200      	movs	r2, #0
 800b068:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	609a      	str	r2, [r3, #8]
}
 800b076:	bf00      	nop
 800b078:	3724      	adds	r7, #36	; 0x24
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr
 800b082:	bf00      	nop
 800b084:	58024400 	.word	0x58024400
 800b088:	03d09000 	.word	0x03d09000
 800b08c:	46000000 	.word	0x46000000
 800b090:	4c742400 	.word	0x4c742400
 800b094:	4a742400 	.word	0x4a742400
 800b098:	4bbebc20 	.word	0x4bbebc20

0800b09c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b089      	sub	sp, #36	; 0x24
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b0a4:	4ba1      	ldr	r3, [pc, #644]	; (800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0a8:	f003 0303 	and.w	r3, r3, #3
 800b0ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b0ae:	4b9f      	ldr	r3, [pc, #636]	; (800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0b2:	0d1b      	lsrs	r3, r3, #20
 800b0b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b0ba:	4b9c      	ldr	r3, [pc, #624]	; (800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0be:	0a1b      	lsrs	r3, r3, #8
 800b0c0:	f003 0301 	and.w	r3, r3, #1
 800b0c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b0c6:	4b99      	ldr	r3, [pc, #612]	; (800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0ca:	08db      	lsrs	r3, r3, #3
 800b0cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0d0:	693a      	ldr	r2, [r7, #16]
 800b0d2:	fb02 f303 	mul.w	r3, r2, r3
 800b0d6:	ee07 3a90 	vmov	s15, r3
 800b0da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	f000 8111 	beq.w	800b30c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	2b02      	cmp	r3, #2
 800b0ee:	f000 8083 	beq.w	800b1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b0f2:	69bb      	ldr	r3, [r7, #24]
 800b0f4:	2b02      	cmp	r3, #2
 800b0f6:	f200 80a1 	bhi.w	800b23c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b0fa:	69bb      	ldr	r3, [r7, #24]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d003      	beq.n	800b108 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b100:	69bb      	ldr	r3, [r7, #24]
 800b102:	2b01      	cmp	r3, #1
 800b104:	d056      	beq.n	800b1b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b106:	e099      	b.n	800b23c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b108:	4b88      	ldr	r3, [pc, #544]	; (800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f003 0320 	and.w	r3, r3, #32
 800b110:	2b00      	cmp	r3, #0
 800b112:	d02d      	beq.n	800b170 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b114:	4b85      	ldr	r3, [pc, #532]	; (800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	08db      	lsrs	r3, r3, #3
 800b11a:	f003 0303 	and.w	r3, r3, #3
 800b11e:	4a84      	ldr	r2, [pc, #528]	; (800b330 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b120:	fa22 f303 	lsr.w	r3, r2, r3
 800b124:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	ee07 3a90 	vmov	s15, r3
 800b12c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	ee07 3a90 	vmov	s15, r3
 800b136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b13a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b13e:	4b7b      	ldr	r3, [pc, #492]	; (800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b146:	ee07 3a90 	vmov	s15, r3
 800b14a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b14e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b152:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b15a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b15e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b16a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b16e:	e087      	b.n	800b280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	ee07 3a90 	vmov	s15, r3
 800b176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b17a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b338 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b17e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b182:	4b6a      	ldr	r3, [pc, #424]	; (800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b18a:	ee07 3a90 	vmov	s15, r3
 800b18e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b192:	ed97 6a03 	vldr	s12, [r7, #12]
 800b196:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b19a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b19e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1b2:	e065      	b.n	800b280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	ee07 3a90 	vmov	s15, r3
 800b1ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b33c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b1c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1c6:	4b59      	ldr	r3, [pc, #356]	; (800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1ce:	ee07 3a90 	vmov	s15, r3
 800b1d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1da:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1f6:	e043      	b.n	800b280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	ee07 3a90 	vmov	s15, r3
 800b1fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b202:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b340 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b20a:	4b48      	ldr	r3, [pc, #288]	; (800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b20e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b212:	ee07 3a90 	vmov	s15, r3
 800b216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b21a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b21e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b22a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b22e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b232:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b236:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b23a:	e021      	b.n	800b280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	ee07 3a90 	vmov	s15, r3
 800b242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b246:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b33c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b24a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b24e:	4b37      	ldr	r3, [pc, #220]	; (800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b256:	ee07 3a90 	vmov	s15, r3
 800b25a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b25e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b262:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b26a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b26e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b27a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b27e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b280:	4b2a      	ldr	r3, [pc, #168]	; (800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b284:	0a5b      	lsrs	r3, r3, #9
 800b286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b28a:	ee07 3a90 	vmov	s15, r3
 800b28e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b292:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b296:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b29a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b29e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2a6:	ee17 2a90 	vmov	r2, s15
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b2ae:	4b1f      	ldr	r3, [pc, #124]	; (800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b2:	0c1b      	lsrs	r3, r3, #16
 800b2b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2b8:	ee07 3a90 	vmov	s15, r3
 800b2bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2d4:	ee17 2a90 	vmov	r2, s15
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b2dc:	4b13      	ldr	r3, [pc, #76]	; (800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e0:	0e1b      	lsrs	r3, r3, #24
 800b2e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2e6:	ee07 3a90 	vmov	s15, r3
 800b2ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b302:	ee17 2a90 	vmov	r2, s15
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b30a:	e008      	b.n	800b31e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2200      	movs	r2, #0
 800b316:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2200      	movs	r2, #0
 800b31c:	609a      	str	r2, [r3, #8]
}
 800b31e:	bf00      	nop
 800b320:	3724      	adds	r7, #36	; 0x24
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop
 800b32c:	58024400 	.word	0x58024400
 800b330:	03d09000 	.word	0x03d09000
 800b334:	46000000 	.word	0x46000000
 800b338:	4c742400 	.word	0x4c742400
 800b33c:	4a742400 	.word	0x4a742400
 800b340:	4bbebc20 	.word	0x4bbebc20

0800b344 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b344:	b480      	push	{r7}
 800b346:	b089      	sub	sp, #36	; 0x24
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b34c:	4ba0      	ldr	r3, [pc, #640]	; (800b5d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b350:	f003 0303 	and.w	r3, r3, #3
 800b354:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b356:	4b9e      	ldr	r3, [pc, #632]	; (800b5d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b35a:	091b      	lsrs	r3, r3, #4
 800b35c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b360:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b362:	4b9b      	ldr	r3, [pc, #620]	; (800b5d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b366:	f003 0301 	and.w	r3, r3, #1
 800b36a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b36c:	4b98      	ldr	r3, [pc, #608]	; (800b5d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b36e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b370:	08db      	lsrs	r3, r3, #3
 800b372:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b376:	693a      	ldr	r2, [r7, #16]
 800b378:	fb02 f303 	mul.w	r3, r2, r3
 800b37c:	ee07 3a90 	vmov	s15, r3
 800b380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b384:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	f000 8111 	beq.w	800b5b2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	2b02      	cmp	r3, #2
 800b394:	f000 8083 	beq.w	800b49e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	2b02      	cmp	r3, #2
 800b39c:	f200 80a1 	bhi.w	800b4e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b3a0:	69bb      	ldr	r3, [r7, #24]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d003      	beq.n	800b3ae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d056      	beq.n	800b45a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b3ac:	e099      	b.n	800b4e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3ae:	4b88      	ldr	r3, [pc, #544]	; (800b5d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f003 0320 	and.w	r3, r3, #32
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d02d      	beq.n	800b416 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b3ba:	4b85      	ldr	r3, [pc, #532]	; (800b5d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	08db      	lsrs	r3, r3, #3
 800b3c0:	f003 0303 	and.w	r3, r3, #3
 800b3c4:	4a83      	ldr	r2, [pc, #524]	; (800b5d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b3c6:	fa22 f303 	lsr.w	r3, r2, r3
 800b3ca:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	ee07 3a90 	vmov	s15, r3
 800b3d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	ee07 3a90 	vmov	s15, r3
 800b3dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3e4:	4b7a      	ldr	r3, [pc, #488]	; (800b5d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ec:	ee07 3a90 	vmov	s15, r3
 800b3f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3f8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b5d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b3fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b400:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b404:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b408:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b40c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b410:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b414:	e087      	b.n	800b526 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	ee07 3a90 	vmov	s15, r3
 800b41c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b420:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b5dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b424:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b428:	4b69      	ldr	r3, [pc, #420]	; (800b5d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b42a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b42c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b430:	ee07 3a90 	vmov	s15, r3
 800b434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b438:	ed97 6a03 	vldr	s12, [r7, #12]
 800b43c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b5d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b440:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b444:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b448:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b44c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b450:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b454:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b458:	e065      	b.n	800b526 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	ee07 3a90 	vmov	s15, r3
 800b460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b464:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b468:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b46c:	4b58      	ldr	r3, [pc, #352]	; (800b5d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b46e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b474:	ee07 3a90 	vmov	s15, r3
 800b478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b47c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b480:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b5d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b484:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b488:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b48c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b490:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b494:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b498:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b49c:	e043      	b.n	800b526 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	ee07 3a90 	vmov	s15, r3
 800b4a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4a8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b5e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b4ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4b0:	4b47      	ldr	r3, [pc, #284]	; (800b5d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4b8:	ee07 3a90 	vmov	s15, r3
 800b4bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4c4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b5d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b4c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b4e0:	e021      	b.n	800b526 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	ee07 3a90 	vmov	s15, r3
 800b4e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ec:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b5dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b4f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4f4:	4b36      	ldr	r3, [pc, #216]	; (800b5d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4fc:	ee07 3a90 	vmov	s15, r3
 800b500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b504:	ed97 6a03 	vldr	s12, [r7, #12]
 800b508:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b5d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b50c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b510:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b514:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b518:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b51c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b520:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b524:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b526:	4b2a      	ldr	r3, [pc, #168]	; (800b5d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b52a:	0a5b      	lsrs	r3, r3, #9
 800b52c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b530:	ee07 3a90 	vmov	s15, r3
 800b534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b538:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b53c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b540:	edd7 6a07 	vldr	s13, [r7, #28]
 800b544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b54c:	ee17 2a90 	vmov	r2, s15
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b554:	4b1e      	ldr	r3, [pc, #120]	; (800b5d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b558:	0c1b      	lsrs	r3, r3, #16
 800b55a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b55e:	ee07 3a90 	vmov	s15, r3
 800b562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b566:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b56a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b56e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b57a:	ee17 2a90 	vmov	r2, s15
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b582:	4b13      	ldr	r3, [pc, #76]	; (800b5d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b586:	0e1b      	lsrs	r3, r3, #24
 800b588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b58c:	ee07 3a90 	vmov	s15, r3
 800b590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b594:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b598:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b59c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5a8:	ee17 2a90 	vmov	r2, s15
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b5b0:	e008      	b.n	800b5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	609a      	str	r2, [r3, #8]
}
 800b5c4:	bf00      	nop
 800b5c6:	3724      	adds	r7, #36	; 0x24
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr
 800b5d0:	58024400 	.word	0x58024400
 800b5d4:	03d09000 	.word	0x03d09000
 800b5d8:	46000000 	.word	0x46000000
 800b5dc:	4c742400 	.word	0x4c742400
 800b5e0:	4a742400 	.word	0x4a742400
 800b5e4:	4bbebc20 	.word	0x4bbebc20

0800b5e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b5f6:	4b53      	ldr	r3, [pc, #332]	; (800b744 <RCCEx_PLL2_Config+0x15c>)
 800b5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5fa:	f003 0303 	and.w	r3, r3, #3
 800b5fe:	2b03      	cmp	r3, #3
 800b600:	d101      	bne.n	800b606 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b602:	2301      	movs	r3, #1
 800b604:	e099      	b.n	800b73a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b606:	4b4f      	ldr	r3, [pc, #316]	; (800b744 <RCCEx_PLL2_Config+0x15c>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a4e      	ldr	r2, [pc, #312]	; (800b744 <RCCEx_PLL2_Config+0x15c>)
 800b60c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b612:	f7f7 f98b 	bl	800292c <HAL_GetTick>
 800b616:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b618:	e008      	b.n	800b62c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b61a:	f7f7 f987 	bl	800292c <HAL_GetTick>
 800b61e:	4602      	mov	r2, r0
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	1ad3      	subs	r3, r2, r3
 800b624:	2b02      	cmp	r3, #2
 800b626:	d901      	bls.n	800b62c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b628:	2303      	movs	r3, #3
 800b62a:	e086      	b.n	800b73a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b62c:	4b45      	ldr	r3, [pc, #276]	; (800b744 <RCCEx_PLL2_Config+0x15c>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b634:	2b00      	cmp	r3, #0
 800b636:	d1f0      	bne.n	800b61a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b638:	4b42      	ldr	r3, [pc, #264]	; (800b744 <RCCEx_PLL2_Config+0x15c>)
 800b63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b63c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	031b      	lsls	r3, r3, #12
 800b646:	493f      	ldr	r1, [pc, #252]	; (800b744 <RCCEx_PLL2_Config+0x15c>)
 800b648:	4313      	orrs	r3, r2
 800b64a:	628b      	str	r3, [r1, #40]	; 0x28
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	3b01      	subs	r3, #1
 800b652:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	689b      	ldr	r3, [r3, #8]
 800b65a:	3b01      	subs	r3, #1
 800b65c:	025b      	lsls	r3, r3, #9
 800b65e:	b29b      	uxth	r3, r3
 800b660:	431a      	orrs	r2, r3
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	3b01      	subs	r3, #1
 800b668:	041b      	lsls	r3, r3, #16
 800b66a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b66e:	431a      	orrs	r2, r3
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	691b      	ldr	r3, [r3, #16]
 800b674:	3b01      	subs	r3, #1
 800b676:	061b      	lsls	r3, r3, #24
 800b678:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b67c:	4931      	ldr	r1, [pc, #196]	; (800b744 <RCCEx_PLL2_Config+0x15c>)
 800b67e:	4313      	orrs	r3, r2
 800b680:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b682:	4b30      	ldr	r3, [pc, #192]	; (800b744 <RCCEx_PLL2_Config+0x15c>)
 800b684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b686:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	695b      	ldr	r3, [r3, #20]
 800b68e:	492d      	ldr	r1, [pc, #180]	; (800b744 <RCCEx_PLL2_Config+0x15c>)
 800b690:	4313      	orrs	r3, r2
 800b692:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b694:	4b2b      	ldr	r3, [pc, #172]	; (800b744 <RCCEx_PLL2_Config+0x15c>)
 800b696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b698:	f023 0220 	bic.w	r2, r3, #32
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	699b      	ldr	r3, [r3, #24]
 800b6a0:	4928      	ldr	r1, [pc, #160]	; (800b744 <RCCEx_PLL2_Config+0x15c>)
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b6a6:	4b27      	ldr	r3, [pc, #156]	; (800b744 <RCCEx_PLL2_Config+0x15c>)
 800b6a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6aa:	4a26      	ldr	r2, [pc, #152]	; (800b744 <RCCEx_PLL2_Config+0x15c>)
 800b6ac:	f023 0310 	bic.w	r3, r3, #16
 800b6b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b6b2:	4b24      	ldr	r3, [pc, #144]	; (800b744 <RCCEx_PLL2_Config+0x15c>)
 800b6b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b6b6:	4b24      	ldr	r3, [pc, #144]	; (800b748 <RCCEx_PLL2_Config+0x160>)
 800b6b8:	4013      	ands	r3, r2
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	69d2      	ldr	r2, [r2, #28]
 800b6be:	00d2      	lsls	r2, r2, #3
 800b6c0:	4920      	ldr	r1, [pc, #128]	; (800b744 <RCCEx_PLL2_Config+0x15c>)
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b6c6:	4b1f      	ldr	r3, [pc, #124]	; (800b744 <RCCEx_PLL2_Config+0x15c>)
 800b6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ca:	4a1e      	ldr	r2, [pc, #120]	; (800b744 <RCCEx_PLL2_Config+0x15c>)
 800b6cc:	f043 0310 	orr.w	r3, r3, #16
 800b6d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d106      	bne.n	800b6e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b6d8:	4b1a      	ldr	r3, [pc, #104]	; (800b744 <RCCEx_PLL2_Config+0x15c>)
 800b6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6dc:	4a19      	ldr	r2, [pc, #100]	; (800b744 <RCCEx_PLL2_Config+0x15c>)
 800b6de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b6e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b6e4:	e00f      	b.n	800b706 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d106      	bne.n	800b6fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b6ec:	4b15      	ldr	r3, [pc, #84]	; (800b744 <RCCEx_PLL2_Config+0x15c>)
 800b6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f0:	4a14      	ldr	r2, [pc, #80]	; (800b744 <RCCEx_PLL2_Config+0x15c>)
 800b6f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b6f8:	e005      	b.n	800b706 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b6fa:	4b12      	ldr	r3, [pc, #72]	; (800b744 <RCCEx_PLL2_Config+0x15c>)
 800b6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6fe:	4a11      	ldr	r2, [pc, #68]	; (800b744 <RCCEx_PLL2_Config+0x15c>)
 800b700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b704:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b706:	4b0f      	ldr	r3, [pc, #60]	; (800b744 <RCCEx_PLL2_Config+0x15c>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a0e      	ldr	r2, [pc, #56]	; (800b744 <RCCEx_PLL2_Config+0x15c>)
 800b70c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b712:	f7f7 f90b 	bl	800292c <HAL_GetTick>
 800b716:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b718:	e008      	b.n	800b72c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b71a:	f7f7 f907 	bl	800292c <HAL_GetTick>
 800b71e:	4602      	mov	r2, r0
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	1ad3      	subs	r3, r2, r3
 800b724:	2b02      	cmp	r3, #2
 800b726:	d901      	bls.n	800b72c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b728:	2303      	movs	r3, #3
 800b72a:	e006      	b.n	800b73a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b72c:	4b05      	ldr	r3, [pc, #20]	; (800b744 <RCCEx_PLL2_Config+0x15c>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b734:	2b00      	cmp	r3, #0
 800b736:	d0f0      	beq.n	800b71a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b738:	7bfb      	ldrb	r3, [r7, #15]
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3710      	adds	r7, #16
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	58024400 	.word	0x58024400
 800b748:	ffff0007 	.word	0xffff0007

0800b74c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b756:	2300      	movs	r3, #0
 800b758:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b75a:	4b53      	ldr	r3, [pc, #332]	; (800b8a8 <RCCEx_PLL3_Config+0x15c>)
 800b75c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b75e:	f003 0303 	and.w	r3, r3, #3
 800b762:	2b03      	cmp	r3, #3
 800b764:	d101      	bne.n	800b76a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	e099      	b.n	800b89e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b76a:	4b4f      	ldr	r3, [pc, #316]	; (800b8a8 <RCCEx_PLL3_Config+0x15c>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a4e      	ldr	r2, [pc, #312]	; (800b8a8 <RCCEx_PLL3_Config+0x15c>)
 800b770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b774:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b776:	f7f7 f8d9 	bl	800292c <HAL_GetTick>
 800b77a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b77c:	e008      	b.n	800b790 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b77e:	f7f7 f8d5 	bl	800292c <HAL_GetTick>
 800b782:	4602      	mov	r2, r0
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	1ad3      	subs	r3, r2, r3
 800b788:	2b02      	cmp	r3, #2
 800b78a:	d901      	bls.n	800b790 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b78c:	2303      	movs	r3, #3
 800b78e:	e086      	b.n	800b89e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b790:	4b45      	ldr	r3, [pc, #276]	; (800b8a8 <RCCEx_PLL3_Config+0x15c>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d1f0      	bne.n	800b77e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b79c:	4b42      	ldr	r3, [pc, #264]	; (800b8a8 <RCCEx_PLL3_Config+0x15c>)
 800b79e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	051b      	lsls	r3, r3, #20
 800b7aa:	493f      	ldr	r1, [pc, #252]	; (800b8a8 <RCCEx_PLL3_Config+0x15c>)
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	628b      	str	r3, [r1, #40]	; 0x28
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	3b01      	subs	r3, #1
 800b7b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	689b      	ldr	r3, [r3, #8]
 800b7be:	3b01      	subs	r3, #1
 800b7c0:	025b      	lsls	r3, r3, #9
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	431a      	orrs	r2, r3
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	68db      	ldr	r3, [r3, #12]
 800b7ca:	3b01      	subs	r3, #1
 800b7cc:	041b      	lsls	r3, r3, #16
 800b7ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b7d2:	431a      	orrs	r2, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	691b      	ldr	r3, [r3, #16]
 800b7d8:	3b01      	subs	r3, #1
 800b7da:	061b      	lsls	r3, r3, #24
 800b7dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b7e0:	4931      	ldr	r1, [pc, #196]	; (800b8a8 <RCCEx_PLL3_Config+0x15c>)
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b7e6:	4b30      	ldr	r3, [pc, #192]	; (800b8a8 <RCCEx_PLL3_Config+0x15c>)
 800b7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	695b      	ldr	r3, [r3, #20]
 800b7f2:	492d      	ldr	r1, [pc, #180]	; (800b8a8 <RCCEx_PLL3_Config+0x15c>)
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b7f8:	4b2b      	ldr	r3, [pc, #172]	; (800b8a8 <RCCEx_PLL3_Config+0x15c>)
 800b7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	699b      	ldr	r3, [r3, #24]
 800b804:	4928      	ldr	r1, [pc, #160]	; (800b8a8 <RCCEx_PLL3_Config+0x15c>)
 800b806:	4313      	orrs	r3, r2
 800b808:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b80a:	4b27      	ldr	r3, [pc, #156]	; (800b8a8 <RCCEx_PLL3_Config+0x15c>)
 800b80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b80e:	4a26      	ldr	r2, [pc, #152]	; (800b8a8 <RCCEx_PLL3_Config+0x15c>)
 800b810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b814:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b816:	4b24      	ldr	r3, [pc, #144]	; (800b8a8 <RCCEx_PLL3_Config+0x15c>)
 800b818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b81a:	4b24      	ldr	r3, [pc, #144]	; (800b8ac <RCCEx_PLL3_Config+0x160>)
 800b81c:	4013      	ands	r3, r2
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	69d2      	ldr	r2, [r2, #28]
 800b822:	00d2      	lsls	r2, r2, #3
 800b824:	4920      	ldr	r1, [pc, #128]	; (800b8a8 <RCCEx_PLL3_Config+0x15c>)
 800b826:	4313      	orrs	r3, r2
 800b828:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b82a:	4b1f      	ldr	r3, [pc, #124]	; (800b8a8 <RCCEx_PLL3_Config+0x15c>)
 800b82c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b82e:	4a1e      	ldr	r2, [pc, #120]	; (800b8a8 <RCCEx_PLL3_Config+0x15c>)
 800b830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b834:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d106      	bne.n	800b84a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b83c:	4b1a      	ldr	r3, [pc, #104]	; (800b8a8 <RCCEx_PLL3_Config+0x15c>)
 800b83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b840:	4a19      	ldr	r2, [pc, #100]	; (800b8a8 <RCCEx_PLL3_Config+0x15c>)
 800b842:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b846:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b848:	e00f      	b.n	800b86a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d106      	bne.n	800b85e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b850:	4b15      	ldr	r3, [pc, #84]	; (800b8a8 <RCCEx_PLL3_Config+0x15c>)
 800b852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b854:	4a14      	ldr	r2, [pc, #80]	; (800b8a8 <RCCEx_PLL3_Config+0x15c>)
 800b856:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b85a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b85c:	e005      	b.n	800b86a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b85e:	4b12      	ldr	r3, [pc, #72]	; (800b8a8 <RCCEx_PLL3_Config+0x15c>)
 800b860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b862:	4a11      	ldr	r2, [pc, #68]	; (800b8a8 <RCCEx_PLL3_Config+0x15c>)
 800b864:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b868:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b86a:	4b0f      	ldr	r3, [pc, #60]	; (800b8a8 <RCCEx_PLL3_Config+0x15c>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a0e      	ldr	r2, [pc, #56]	; (800b8a8 <RCCEx_PLL3_Config+0x15c>)
 800b870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b874:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b876:	f7f7 f859 	bl	800292c <HAL_GetTick>
 800b87a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b87c:	e008      	b.n	800b890 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b87e:	f7f7 f855 	bl	800292c <HAL_GetTick>
 800b882:	4602      	mov	r2, r0
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	1ad3      	subs	r3, r2, r3
 800b888:	2b02      	cmp	r3, #2
 800b88a:	d901      	bls.n	800b890 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b88c:	2303      	movs	r3, #3
 800b88e:	e006      	b.n	800b89e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b890:	4b05      	ldr	r3, [pc, #20]	; (800b8a8 <RCCEx_PLL3_Config+0x15c>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d0f0      	beq.n	800b87e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3710      	adds	r7, #16
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	58024400 	.word	0x58024400
 800b8ac:	ffff0007 	.word	0xffff0007

0800b8b0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d101      	bne.n	800b8c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	e0f1      	b.n	800baa6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4a78      	ldr	r2, [pc, #480]	; (800bab0 <HAL_SPI_Init+0x200>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d00f      	beq.n	800b8f2 <HAL_SPI_Init+0x42>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a77      	ldr	r2, [pc, #476]	; (800bab4 <HAL_SPI_Init+0x204>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d00a      	beq.n	800b8f2 <HAL_SPI_Init+0x42>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4a75      	ldr	r2, [pc, #468]	; (800bab8 <HAL_SPI_Init+0x208>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d005      	beq.n	800b8f2 <HAL_SPI_Init+0x42>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	68db      	ldr	r3, [r3, #12]
 800b8ea:	2b0f      	cmp	r3, #15
 800b8ec:	d901      	bls.n	800b8f2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e0d9      	b.n	800baa6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 fd74 	bl	800c3e0 <SPI_GetPacketSize>
 800b8f8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	4a6c      	ldr	r2, [pc, #432]	; (800bab0 <HAL_SPI_Init+0x200>)
 800b900:	4293      	cmp	r3, r2
 800b902:	d00c      	beq.n	800b91e <HAL_SPI_Init+0x6e>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	4a6a      	ldr	r2, [pc, #424]	; (800bab4 <HAL_SPI_Init+0x204>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d007      	beq.n	800b91e <HAL_SPI_Init+0x6e>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	4a69      	ldr	r2, [pc, #420]	; (800bab8 <HAL_SPI_Init+0x208>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d002      	beq.n	800b91e <HAL_SPI_Init+0x6e>
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2b08      	cmp	r3, #8
 800b91c:	d811      	bhi.n	800b942 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b922:	4a63      	ldr	r2, [pc, #396]	; (800bab0 <HAL_SPI_Init+0x200>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d009      	beq.n	800b93c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a61      	ldr	r2, [pc, #388]	; (800bab4 <HAL_SPI_Init+0x204>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d004      	beq.n	800b93c <HAL_SPI_Init+0x8c>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a60      	ldr	r2, [pc, #384]	; (800bab8 <HAL_SPI_Init+0x208>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d104      	bne.n	800b946 <HAL_SPI_Init+0x96>
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2b10      	cmp	r3, #16
 800b940:	d901      	bls.n	800b946 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b942:	2301      	movs	r3, #1
 800b944:	e0af      	b.n	800baa6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d106      	bne.n	800b960 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f7f6 fc54 	bl	8002208 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2202      	movs	r2, #2
 800b964:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	681a      	ldr	r2, [r3, #0]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f022 0201 	bic.w	r2, r2, #1
 800b976:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b982:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	699b      	ldr	r3, [r3, #24]
 800b988:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b98c:	d119      	bne.n	800b9c2 <HAL_SPI_Init+0x112>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b996:	d103      	bne.n	800b9a0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d008      	beq.n	800b9b2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d10c      	bne.n	800b9c2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b9ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9b0:	d107      	bne.n	800b9c2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b9c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	69da      	ldr	r2, [r3, #28]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ca:	431a      	orrs	r2, r3
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	431a      	orrs	r2, r3
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9d4:	ea42 0103 	orr.w	r1, r2, r3
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	68da      	ldr	r2, [r3, #12]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	430a      	orrs	r2, r1
 800b9e2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ec:	431a      	orrs	r2, r3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9f2:	431a      	orrs	r2, r3
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	699b      	ldr	r3, [r3, #24]
 800b9f8:	431a      	orrs	r2, r3
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	691b      	ldr	r3, [r3, #16]
 800b9fe:	431a      	orrs	r2, r3
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	695b      	ldr	r3, [r3, #20]
 800ba04:	431a      	orrs	r2, r3
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6a1b      	ldr	r3, [r3, #32]
 800ba0a:	431a      	orrs	r2, r3
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	431a      	orrs	r2, r3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba16:	431a      	orrs	r2, r3
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	431a      	orrs	r2, r3
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba22:	ea42 0103 	orr.w	r1, r2, r3
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	430a      	orrs	r2, r1
 800ba30:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d113      	bne.n	800ba62 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	689b      	ldr	r3, [r3, #8]
 800ba40:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba4c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	689b      	ldr	r3, [r3, #8]
 800ba54:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ba60:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f022 0201 	bic.w	r2, r2, #1
 800ba70:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d00a      	beq.n	800ba94 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	430a      	orrs	r2, r1
 800ba92:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2200      	movs	r2, #0
 800ba98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800baa4:	2300      	movs	r3, #0
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	40013000 	.word	0x40013000
 800bab4:	40003800 	.word	0x40003800
 800bab8:	40003c00 	.word	0x40003c00

0800babc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b08a      	sub	sp, #40	; 0x28
 800bac0:	af02      	add	r7, sp, #8
 800bac2:	60f8      	str	r0, [r7, #12]
 800bac4:	60b9      	str	r1, [r7, #8]
 800bac6:	603b      	str	r3, [r7, #0]
 800bac8:	4613      	mov	r3, r2
 800baca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bacc:	2300      	movs	r3, #0
 800bace:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	3330      	adds	r3, #48	; 0x30
 800bad6:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bae0:	d112      	bne.n	800bb08 <HAL_SPI_Receive+0x4c>
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	689b      	ldr	r3, [r3, #8]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d10e      	bne.n	800bb08 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2204      	movs	r2, #4
 800baee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800baf2:	88fa      	ldrh	r2, [r7, #6]
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	9300      	str	r3, [sp, #0]
 800baf8:	4613      	mov	r3, r2
 800bafa:	68ba      	ldr	r2, [r7, #8]
 800bafc:	68b9      	ldr	r1, [r7, #8]
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	f000 f978 	bl	800bdf4 <HAL_SPI_TransmitReceive>
 800bb04:	4603      	mov	r3, r0
 800bb06:	e16f      	b.n	800bde8 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	d101      	bne.n	800bb16 <HAL_SPI_Receive+0x5a>
 800bb12:	2302      	movs	r3, #2
 800bb14:	e168      	b.n	800bde8 <HAL_SPI_Receive+0x32c>
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2201      	movs	r2, #1
 800bb1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bb1e:	f7f6 ff05 	bl	800292c <HAL_GetTick>
 800bb22:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	d007      	beq.n	800bb40 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800bb30:	2302      	movs	r3, #2
 800bb32:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2200      	movs	r2, #0
 800bb38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bb3c:	7ffb      	ldrb	r3, [r7, #31]
 800bb3e:	e153      	b.n	800bde8 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d002      	beq.n	800bb4c <HAL_SPI_Receive+0x90>
 800bb46:	88fb      	ldrh	r3, [r7, #6]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d107      	bne.n	800bb5c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2200      	movs	r2, #0
 800bb54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bb58:	7ffb      	ldrb	r3, [r7, #31]
 800bb5a:	e145      	b.n	800bde8 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2204      	movs	r2, #4
 800bb60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2200      	movs	r2, #0
 800bb68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	68ba      	ldr	r2, [r7, #8]
 800bb70:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	88fa      	ldrh	r2, [r7, #6]
 800bb76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	88fa      	ldrh	r2, [r7, #6]
 800bb7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2200      	movs	r2, #0
 800bb86:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2200      	movs	r2, #0
 800bb94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2200      	movs	r2, #0
 800bba2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	689b      	ldr	r3, [r3, #8]
 800bba8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800bbac:	d107      	bne.n	800bbbe <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bbbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	685a      	ldr	r2, [r3, #4]
 800bbc4:	4b8a      	ldr	r3, [pc, #552]	; (800bdf0 <HAL_SPI_Receive+0x334>)
 800bbc6:	4013      	ands	r3, r2
 800bbc8:	88f9      	ldrh	r1, [r7, #6]
 800bbca:	68fa      	ldr	r2, [r7, #12]
 800bbcc:	6812      	ldr	r2, [r2, #0]
 800bbce:	430b      	orrs	r3, r1
 800bbd0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	681a      	ldr	r2, [r3, #0]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f042 0201 	orr.w	r2, r2, #1
 800bbe0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bbea:	d107      	bne.n	800bbfc <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbfa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	2b0f      	cmp	r3, #15
 800bc02:	d948      	bls.n	800bc96 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bc04:	e040      	b.n	800bc88 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	695a      	ldr	r2, [r3, #20]
 800bc0c:	f248 0308 	movw	r3, #32776	; 0x8008
 800bc10:	4013      	ands	r3, r2
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d014      	beq.n	800bc40 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bc20:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc26:	1d1a      	adds	r2, r3, #4
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	3b01      	subs	r3, #1
 800bc36:	b29a      	uxth	r2, r3
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bc3e:	e023      	b.n	800bc88 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc40:	f7f6 fe74 	bl	800292c <HAL_GetTick>
 800bc44:	4602      	mov	r2, r0
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	1ad3      	subs	r3, r2, r3
 800bc4a:	683a      	ldr	r2, [r7, #0]
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d803      	bhi.n	800bc58 <HAL_SPI_Receive+0x19c>
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc56:	d102      	bne.n	800bc5e <HAL_SPI_Receive+0x1a2>
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d114      	bne.n	800bc88 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bc5e:	68f8      	ldr	r0, [r7, #12]
 800bc60:	f000 faf0 	bl	800c244 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bc84:	2303      	movs	r3, #3
 800bc86:	e0af      	b.n	800bde8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d1b8      	bne.n	800bc06 <HAL_SPI_Receive+0x14a>
 800bc94:	e095      	b.n	800bdc2 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	68db      	ldr	r3, [r3, #12]
 800bc9a:	2b07      	cmp	r3, #7
 800bc9c:	f240 808b 	bls.w	800bdb6 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bca0:	e03f      	b.n	800bd22 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	695b      	ldr	r3, [r3, #20]
 800bca8:	f003 0301 	and.w	r3, r3, #1
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d114      	bne.n	800bcda <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcb4:	69ba      	ldr	r2, [r7, #24]
 800bcb6:	8812      	ldrh	r2, [r2, #0]
 800bcb8:	b292      	uxth	r2, r2
 800bcba:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcc0:	1c9a      	adds	r2, r3, #2
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	b29a      	uxth	r2, r3
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bcd8:	e023      	b.n	800bd22 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bcda:	f7f6 fe27 	bl	800292c <HAL_GetTick>
 800bcde:	4602      	mov	r2, r0
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	1ad3      	subs	r3, r2, r3
 800bce4:	683a      	ldr	r2, [r7, #0]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d803      	bhi.n	800bcf2 <HAL_SPI_Receive+0x236>
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcf0:	d102      	bne.n	800bcf8 <HAL_SPI_Receive+0x23c>
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d114      	bne.n	800bd22 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bcf8:	68f8      	ldr	r0, [r7, #12]
 800bcfa:	f000 faa3 	bl	800c244 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2200      	movs	r2, #0
 800bd02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2201      	movs	r2, #1
 800bd1a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bd1e:	2303      	movs	r3, #3
 800bd20:	e062      	b.n	800bde8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd28:	b29b      	uxth	r3, r3
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d1b9      	bne.n	800bca2 <HAL_SPI_Receive+0x1e6>
 800bd2e:	e048      	b.n	800bdc2 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	695b      	ldr	r3, [r3, #20]
 800bd36:	f003 0301 	and.w	r3, r3, #1
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	d117      	bne.n	800bd6e <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd4a:	7812      	ldrb	r2, [r2, #0]
 800bd4c:	b2d2      	uxtb	r2, r2
 800bd4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd54:	1c5a      	adds	r2, r3, #1
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	3b01      	subs	r3, #1
 800bd64:	b29a      	uxth	r2, r3
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bd6c:	e023      	b.n	800bdb6 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd6e:	f7f6 fddd 	bl	800292c <HAL_GetTick>
 800bd72:	4602      	mov	r2, r0
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	1ad3      	subs	r3, r2, r3
 800bd78:	683a      	ldr	r2, [r7, #0]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d803      	bhi.n	800bd86 <HAL_SPI_Receive+0x2ca>
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd84:	d102      	bne.n	800bd8c <HAL_SPI_Receive+0x2d0>
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d114      	bne.n	800bdb6 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bd8c:	68f8      	ldr	r0, [r7, #12]
 800bd8e:	f000 fa59 	bl	800c244 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2200      	movs	r2, #0
 800bd96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bda0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2201      	movs	r2, #1
 800bdae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bdb2:	2303      	movs	r3, #3
 800bdb4:	e018      	b.n	800bde8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d1b6      	bne.n	800bd30 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bdc2:	68f8      	ldr	r0, [r7, #12]
 800bdc4:	f000 fa3e 	bl	800c244 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d001      	beq.n	800bde6 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800bde2:	2301      	movs	r3, #1
 800bde4:	e000      	b.n	800bde8 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800bde6:	7ffb      	ldrb	r3, [r7, #31]
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3720      	adds	r7, #32
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	ffff0000 	.word	0xffff0000

0800bdf4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b08e      	sub	sp, #56	; 0x38
 800bdf8:	af02      	add	r7, sp, #8
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	607a      	str	r2, [r7, #4]
 800be00:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800be02:	2300      	movs	r3, #0
 800be04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	3320      	adds	r3, #32
 800be0e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	3330      	adds	r3, #48	; 0x30
 800be16:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d101      	bne.n	800be26 <HAL_SPI_TransmitReceive+0x32>
 800be22:	2302      	movs	r3, #2
 800be24:	e209      	b.n	800c23a <HAL_SPI_TransmitReceive+0x446>
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2201      	movs	r2, #1
 800be2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800be2e:	f7f6 fd7d 	bl	800292c <HAL_GetTick>
 800be32:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800be34:	887b      	ldrh	r3, [r7, #2]
 800be36:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800be38:	887b      	ldrh	r3, [r7, #2]
 800be3a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800be42:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800be4a:	7efb      	ldrb	r3, [r7, #27]
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d014      	beq.n	800be7a <HAL_SPI_TransmitReceive+0x86>
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800be56:	d106      	bne.n	800be66 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d102      	bne.n	800be66 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800be60:	7efb      	ldrb	r3, [r7, #27]
 800be62:	2b04      	cmp	r3, #4
 800be64:	d009      	beq.n	800be7a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800be66:	2302      	movs	r3, #2
 800be68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2200      	movs	r2, #0
 800be70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800be74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be78:	e1df      	b.n	800c23a <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d005      	beq.n	800be8c <HAL_SPI_TransmitReceive+0x98>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d002      	beq.n	800be8c <HAL_SPI_TransmitReceive+0x98>
 800be86:	887b      	ldrh	r3, [r7, #2]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d109      	bne.n	800bea0 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800be8c:	2301      	movs	r3, #1
 800be8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2200      	movs	r2, #0
 800be96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800be9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be9e:	e1cc      	b.n	800c23a <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	2b04      	cmp	r3, #4
 800beaa:	d003      	beq.n	800beb4 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2205      	movs	r2, #5
 800beb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2200      	movs	r2, #0
 800beb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	887a      	ldrh	r2, [r7, #2]
 800bec6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	887a      	ldrh	r2, [r7, #2]
 800bece:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	68ba      	ldr	r2, [r7, #8]
 800bed6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	887a      	ldrh	r2, [r7, #2]
 800bedc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	887a      	ldrh	r2, [r7, #2]
 800bee4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2200      	movs	r2, #0
 800beec:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2200      	movs	r2, #0
 800bef2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	685a      	ldr	r2, [r3, #4]
 800befa:	4b82      	ldr	r3, [pc, #520]	; (800c104 <HAL_SPI_TransmitReceive+0x310>)
 800befc:	4013      	ands	r3, r2
 800befe:	8879      	ldrh	r1, [r7, #2]
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	6812      	ldr	r2, [r2, #0]
 800bf04:	430b      	orrs	r3, r1
 800bf06:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	681a      	ldr	r2, [r3, #0]
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f042 0201 	orr.w	r2, r2, #1
 800bf16:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf20:	d107      	bne.n	800bf32 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	68db      	ldr	r3, [r3, #12]
 800bf36:	2b0f      	cmp	r3, #15
 800bf38:	d970      	bls.n	800c01c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bf3a:	e068      	b.n	800c00e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	695b      	ldr	r3, [r3, #20]
 800bf42:	f003 0302 	and.w	r3, r3, #2
 800bf46:	2b02      	cmp	r3, #2
 800bf48:	d11a      	bne.n	800bf80 <HAL_SPI_TransmitReceive+0x18c>
 800bf4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d017      	beq.n	800bf80 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	6812      	ldr	r2, [r2, #0]
 800bf5a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf60:	1d1a      	adds	r2, r3, #4
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	3b01      	subs	r3, #1
 800bf70:	b29a      	uxth	r2, r3
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	695a      	ldr	r2, [r3, #20]
 800bf86:	f248 0308 	movw	r3, #32776	; 0x8008
 800bf8a:	4013      	ands	r3, r2
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d01a      	beq.n	800bfc6 <HAL_SPI_TransmitReceive+0x1d2>
 800bf90:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d017      	beq.n	800bfc6 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf9e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bfa0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bfa6:	1d1a      	adds	r2, r3, #4
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	3b01      	subs	r3, #1
 800bfb6:	b29a      	uxth	r2, r3
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bfc4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bfc6:	f7f6 fcb1 	bl	800292c <HAL_GetTick>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d803      	bhi.n	800bfde <HAL_SPI_TransmitReceive+0x1ea>
 800bfd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfdc:	d102      	bne.n	800bfe4 <HAL_SPI_TransmitReceive+0x1f0>
 800bfde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d114      	bne.n	800c00e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bfe4:	68f8      	ldr	r0, [r7, #12]
 800bfe6:	f000 f92d 	bl	800c244 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2200      	movs	r2, #0
 800bfee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bff8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2201      	movs	r2, #1
 800c006:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c00a:	2303      	movs	r3, #3
 800c00c:	e115      	b.n	800c23a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c00e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c010:	2b00      	cmp	r3, #0
 800c012:	d193      	bne.n	800bf3c <HAL_SPI_TransmitReceive+0x148>
 800c014:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c016:	2b00      	cmp	r3, #0
 800c018:	d190      	bne.n	800bf3c <HAL_SPI_TransmitReceive+0x148>
 800c01a:	e0e7      	b.n	800c1ec <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	68db      	ldr	r3, [r3, #12]
 800c020:	2b07      	cmp	r3, #7
 800c022:	f240 80dd 	bls.w	800c1e0 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c026:	e066      	b.n	800c0f6 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	695b      	ldr	r3, [r3, #20]
 800c02e:	f003 0302 	and.w	r3, r3, #2
 800c032:	2b02      	cmp	r3, #2
 800c034:	d119      	bne.n	800c06a <HAL_SPI_TransmitReceive+0x276>
 800c036:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d016      	beq.n	800c06a <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c040:	881a      	ldrh	r2, [r3, #0]
 800c042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c044:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c04a:	1c9a      	adds	r2, r3, #2
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c056:	b29b      	uxth	r3, r3
 800c058:	3b01      	subs	r3, #1
 800c05a:	b29a      	uxth	r2, r3
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c068:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	695b      	ldr	r3, [r3, #20]
 800c070:	f003 0301 	and.w	r3, r3, #1
 800c074:	2b01      	cmp	r3, #1
 800c076:	d11a      	bne.n	800c0ae <HAL_SPI_TransmitReceive+0x2ba>
 800c078:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d017      	beq.n	800c0ae <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c082:	6a3a      	ldr	r2, [r7, #32]
 800c084:	8812      	ldrh	r2, [r2, #0]
 800c086:	b292      	uxth	r2, r2
 800c088:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c08e:	1c9a      	adds	r2, r3, #2
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	3b01      	subs	r3, #1
 800c09e:	b29a      	uxth	r2, r3
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c0ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0ae:	f7f6 fc3d 	bl	800292c <HAL_GetTick>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	69fb      	ldr	r3, [r7, #28]
 800c0b6:	1ad3      	subs	r3, r2, r3
 800c0b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d803      	bhi.n	800c0c6 <HAL_SPI_TransmitReceive+0x2d2>
 800c0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0c4:	d102      	bne.n	800c0cc <HAL_SPI_TransmitReceive+0x2d8>
 800c0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d114      	bne.n	800c0f6 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c0cc:	68f8      	ldr	r0, [r7, #12]
 800c0ce:	f000 f8b9 	bl	800c244 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c0f2:	2303      	movs	r3, #3
 800c0f4:	e0a1      	b.n	800c23a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c0f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d195      	bne.n	800c028 <HAL_SPI_TransmitReceive+0x234>
 800c0fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d192      	bne.n	800c028 <HAL_SPI_TransmitReceive+0x234>
 800c102:	e073      	b.n	800c1ec <HAL_SPI_TransmitReceive+0x3f8>
 800c104:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	695b      	ldr	r3, [r3, #20]
 800c10e:	f003 0302 	and.w	r3, r3, #2
 800c112:	2b02      	cmp	r3, #2
 800c114:	d11b      	bne.n	800c14e <HAL_SPI_TransmitReceive+0x35a>
 800c116:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d018      	beq.n	800c14e <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	3320      	adds	r3, #32
 800c126:	7812      	ldrb	r2, [r2, #0]
 800c128:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c12e:	1c5a      	adds	r2, r3, #1
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	3b01      	subs	r3, #1
 800c13e:	b29a      	uxth	r2, r3
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c14c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	695b      	ldr	r3, [r3, #20]
 800c154:	f003 0301 	and.w	r3, r3, #1
 800c158:	2b01      	cmp	r3, #1
 800c15a:	d11d      	bne.n	800c198 <HAL_SPI_TransmitReceive+0x3a4>
 800c15c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d01a      	beq.n	800c198 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c16e:	7812      	ldrb	r2, [r2, #0]
 800c170:	b2d2      	uxtb	r2, r2
 800c172:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c178:	1c5a      	adds	r2, r3, #1
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c184:	b29b      	uxth	r3, r3
 800c186:	3b01      	subs	r3, #1
 800c188:	b29a      	uxth	r2, r3
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c196:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c198:	f7f6 fbc8 	bl	800292c <HAL_GetTick>
 800c19c:	4602      	mov	r2, r0
 800c19e:	69fb      	ldr	r3, [r7, #28]
 800c1a0:	1ad3      	subs	r3, r2, r3
 800c1a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d803      	bhi.n	800c1b0 <HAL_SPI_TransmitReceive+0x3bc>
 800c1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1ae:	d102      	bne.n	800c1b6 <HAL_SPI_TransmitReceive+0x3c2>
 800c1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d114      	bne.n	800c1e0 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c1b6:	68f8      	ldr	r0, [r7, #12]
 800c1b8:	f000 f844 	bl	800c244 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c1dc:	2303      	movs	r3, #3
 800c1de:	e02c      	b.n	800c23a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c1e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d190      	bne.n	800c108 <HAL_SPI_TransmitReceive+0x314>
 800c1e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d18d      	bne.n	800c108 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ee:	9300      	str	r3, [sp, #0]
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	2108      	movs	r1, #8
 800c1f6:	68f8      	ldr	r0, [r7, #12]
 800c1f8:	f000 f8c4 	bl	800c384 <SPI_WaitOnFlagUntilTimeout>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d007      	beq.n	800c212 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c208:	f043 0220 	orr.w	r2, r3, #32
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c212:	68f8      	ldr	r0, [r7, #12]
 800c214:	f000 f816 	bl	800c244 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2200      	movs	r2, #0
 800c21c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2201      	movs	r2, #1
 800c224:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d001      	beq.n	800c236 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800c232:	2301      	movs	r3, #1
 800c234:	e001      	b.n	800c23a <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800c236:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3730      	adds	r7, #48	; 0x30
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop

0800c244 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c244:	b480      	push	{r7}
 800c246:	b085      	sub	sp, #20
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	695b      	ldr	r3, [r3, #20]
 800c252:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	699a      	ldr	r2, [r3, #24]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f042 0208 	orr.w	r2, r2, #8
 800c262:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	699a      	ldr	r2, [r3, #24]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f042 0210 	orr.w	r2, r2, #16
 800c272:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	681a      	ldr	r2, [r3, #0]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f022 0201 	bic.w	r2, r2, #1
 800c282:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	6919      	ldr	r1, [r3, #16]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681a      	ldr	r2, [r3, #0]
 800c28e:	4b3c      	ldr	r3, [pc, #240]	; (800c380 <SPI_CloseTransfer+0x13c>)
 800c290:	400b      	ands	r3, r1
 800c292:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	689a      	ldr	r2, [r3, #8]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c2a2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c2aa:	b2db      	uxtb	r3, r3
 800c2ac:	2b04      	cmp	r3, #4
 800c2ae:	d014      	beq.n	800c2da <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f003 0320 	and.w	r3, r3, #32
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d00f      	beq.n	800c2da <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	699a      	ldr	r2, [r3, #24]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f042 0220 	orr.w	r2, r2, #32
 800c2d8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c2e0:	b2db      	uxtb	r3, r3
 800c2e2:	2b03      	cmp	r3, #3
 800c2e4:	d014      	beq.n	800c310 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d00f      	beq.n	800c310 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2f6:	f043 0204 	orr.w	r2, r3, #4
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	699a      	ldr	r2, [r3, #24]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c30e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c316:	2b00      	cmp	r3, #0
 800c318:	d00f      	beq.n	800c33a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c320:	f043 0201 	orr.w	r2, r3, #1
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	699a      	ldr	r2, [r3, #24]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c338:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00f      	beq.n	800c364 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c34a:	f043 0208 	orr.w	r2, r3, #8
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	699a      	ldr	r2, [r3, #24]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c362:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2200      	movs	r2, #0
 800c368:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2200      	movs	r2, #0
 800c370:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c374:	bf00      	nop
 800c376:	3714      	adds	r7, #20
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr
 800c380:	fffffc90 	.word	0xfffffc90

0800c384 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b084      	sub	sp, #16
 800c388:	af00      	add	r7, sp, #0
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	603b      	str	r3, [r7, #0]
 800c390:	4613      	mov	r3, r2
 800c392:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c394:	e010      	b.n	800c3b8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c396:	f7f6 fac9 	bl	800292c <HAL_GetTick>
 800c39a:	4602      	mov	r2, r0
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	1ad3      	subs	r3, r2, r3
 800c3a0:	69ba      	ldr	r2, [r7, #24]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d803      	bhi.n	800c3ae <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c3a6:	69bb      	ldr	r3, [r7, #24]
 800c3a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3ac:	d102      	bne.n	800c3b4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c3ae:	69bb      	ldr	r3, [r7, #24]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d101      	bne.n	800c3b8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c3b4:	2303      	movs	r3, #3
 800c3b6:	e00f      	b.n	800c3d8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	695a      	ldr	r2, [r3, #20]
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	4013      	ands	r3, r2
 800c3c2:	68ba      	ldr	r2, [r7, #8]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	bf0c      	ite	eq
 800c3c8:	2301      	moveq	r3, #1
 800c3ca:	2300      	movne	r3, #0
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	79fb      	ldrb	r3, [r7, #7]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d0df      	beq.n	800c396 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c3d6:	2300      	movs	r3, #0
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3710      	adds	r7, #16
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b085      	sub	sp, #20
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3ec:	095b      	lsrs	r3, r3, #5
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	68db      	ldr	r3, [r3, #12]
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	3307      	adds	r3, #7
 800c3fe:	08db      	lsrs	r3, r3, #3
 800c400:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	68fa      	ldr	r2, [r7, #12]
 800c406:	fb02 f303 	mul.w	r3, r2, r3
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3714      	adds	r7, #20
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr
	...

0800c418 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c422:	2300      	movs	r3, #0
 800c424:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d109      	bne.n	800c440 <HAL_TIM_OC_Start_IT+0x28>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c432:	b2db      	uxtb	r3, r3
 800c434:	2b01      	cmp	r3, #1
 800c436:	bf14      	ite	ne
 800c438:	2301      	movne	r3, #1
 800c43a:	2300      	moveq	r3, #0
 800c43c:	b2db      	uxtb	r3, r3
 800c43e:	e03c      	b.n	800c4ba <HAL_TIM_OC_Start_IT+0xa2>
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	2b04      	cmp	r3, #4
 800c444:	d109      	bne.n	800c45a <HAL_TIM_OC_Start_IT+0x42>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	2b01      	cmp	r3, #1
 800c450:	bf14      	ite	ne
 800c452:	2301      	movne	r3, #1
 800c454:	2300      	moveq	r3, #0
 800c456:	b2db      	uxtb	r3, r3
 800c458:	e02f      	b.n	800c4ba <HAL_TIM_OC_Start_IT+0xa2>
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	2b08      	cmp	r3, #8
 800c45e:	d109      	bne.n	800c474 <HAL_TIM_OC_Start_IT+0x5c>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c466:	b2db      	uxtb	r3, r3
 800c468:	2b01      	cmp	r3, #1
 800c46a:	bf14      	ite	ne
 800c46c:	2301      	movne	r3, #1
 800c46e:	2300      	moveq	r3, #0
 800c470:	b2db      	uxtb	r3, r3
 800c472:	e022      	b.n	800c4ba <HAL_TIM_OC_Start_IT+0xa2>
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	2b0c      	cmp	r3, #12
 800c478:	d109      	bne.n	800c48e <HAL_TIM_OC_Start_IT+0x76>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c480:	b2db      	uxtb	r3, r3
 800c482:	2b01      	cmp	r3, #1
 800c484:	bf14      	ite	ne
 800c486:	2301      	movne	r3, #1
 800c488:	2300      	moveq	r3, #0
 800c48a:	b2db      	uxtb	r3, r3
 800c48c:	e015      	b.n	800c4ba <HAL_TIM_OC_Start_IT+0xa2>
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	2b10      	cmp	r3, #16
 800c492:	d109      	bne.n	800c4a8 <HAL_TIM_OC_Start_IT+0x90>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c49a:	b2db      	uxtb	r3, r3
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	bf14      	ite	ne
 800c4a0:	2301      	movne	r3, #1
 800c4a2:	2300      	moveq	r3, #0
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	e008      	b.n	800c4ba <HAL_TIM_OC_Start_IT+0xa2>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	bf14      	ite	ne
 800c4b4:	2301      	movne	r3, #1
 800c4b6:	2300      	moveq	r3, #0
 800c4b8:	b2db      	uxtb	r3, r3
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d001      	beq.n	800c4c2 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c4be:	2301      	movs	r3, #1
 800c4c0:	e0ec      	b.n	800c69c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d104      	bne.n	800c4d2 <HAL_TIM_OC_Start_IT+0xba>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2202      	movs	r2, #2
 800c4cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c4d0:	e023      	b.n	800c51a <HAL_TIM_OC_Start_IT+0x102>
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	2b04      	cmp	r3, #4
 800c4d6:	d104      	bne.n	800c4e2 <HAL_TIM_OC_Start_IT+0xca>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2202      	movs	r2, #2
 800c4dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c4e0:	e01b      	b.n	800c51a <HAL_TIM_OC_Start_IT+0x102>
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	2b08      	cmp	r3, #8
 800c4e6:	d104      	bne.n	800c4f2 <HAL_TIM_OC_Start_IT+0xda>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2202      	movs	r2, #2
 800c4ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c4f0:	e013      	b.n	800c51a <HAL_TIM_OC_Start_IT+0x102>
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	2b0c      	cmp	r3, #12
 800c4f6:	d104      	bne.n	800c502 <HAL_TIM_OC_Start_IT+0xea>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2202      	movs	r2, #2
 800c4fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c500:	e00b      	b.n	800c51a <HAL_TIM_OC_Start_IT+0x102>
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	2b10      	cmp	r3, #16
 800c506:	d104      	bne.n	800c512 <HAL_TIM_OC_Start_IT+0xfa>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2202      	movs	r2, #2
 800c50c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c510:	e003      	b.n	800c51a <HAL_TIM_OC_Start_IT+0x102>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2202      	movs	r2, #2
 800c516:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	2b0c      	cmp	r3, #12
 800c51e:	d841      	bhi.n	800c5a4 <HAL_TIM_OC_Start_IT+0x18c>
 800c520:	a201      	add	r2, pc, #4	; (adr r2, 800c528 <HAL_TIM_OC_Start_IT+0x110>)
 800c522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c526:	bf00      	nop
 800c528:	0800c55d 	.word	0x0800c55d
 800c52c:	0800c5a5 	.word	0x0800c5a5
 800c530:	0800c5a5 	.word	0x0800c5a5
 800c534:	0800c5a5 	.word	0x0800c5a5
 800c538:	0800c56f 	.word	0x0800c56f
 800c53c:	0800c5a5 	.word	0x0800c5a5
 800c540:	0800c5a5 	.word	0x0800c5a5
 800c544:	0800c5a5 	.word	0x0800c5a5
 800c548:	0800c581 	.word	0x0800c581
 800c54c:	0800c5a5 	.word	0x0800c5a5
 800c550:	0800c5a5 	.word	0x0800c5a5
 800c554:	0800c5a5 	.word	0x0800c5a5
 800c558:	0800c593 	.word	0x0800c593
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	68da      	ldr	r2, [r3, #12]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f042 0202 	orr.w	r2, r2, #2
 800c56a:	60da      	str	r2, [r3, #12]
      break;
 800c56c:	e01d      	b.n	800c5aa <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	68da      	ldr	r2, [r3, #12]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f042 0204 	orr.w	r2, r2, #4
 800c57c:	60da      	str	r2, [r3, #12]
      break;
 800c57e:	e014      	b.n	800c5aa <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	68da      	ldr	r2, [r3, #12]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f042 0208 	orr.w	r2, r2, #8
 800c58e:	60da      	str	r2, [r3, #12]
      break;
 800c590:	e00b      	b.n	800c5aa <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	68da      	ldr	r2, [r3, #12]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f042 0210 	orr.w	r2, r2, #16
 800c5a0:	60da      	str	r2, [r3, #12]
      break;
 800c5a2:	e002      	b.n	800c5aa <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	73fb      	strb	r3, [r7, #15]
      break;
 800c5a8:	bf00      	nop
  }

  if (status == HAL_OK)
 800c5aa:	7bfb      	ldrb	r3, [r7, #15]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d174      	bne.n	800c69a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	6839      	ldr	r1, [r7, #0]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f000 fea9 	bl	800d310 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4a38      	ldr	r2, [pc, #224]	; (800c6a4 <HAL_TIM_OC_Start_IT+0x28c>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d013      	beq.n	800c5f0 <HAL_TIM_OC_Start_IT+0x1d8>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4a36      	ldr	r2, [pc, #216]	; (800c6a8 <HAL_TIM_OC_Start_IT+0x290>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d00e      	beq.n	800c5f0 <HAL_TIM_OC_Start_IT+0x1d8>
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	4a35      	ldr	r2, [pc, #212]	; (800c6ac <HAL_TIM_OC_Start_IT+0x294>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d009      	beq.n	800c5f0 <HAL_TIM_OC_Start_IT+0x1d8>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a33      	ldr	r2, [pc, #204]	; (800c6b0 <HAL_TIM_OC_Start_IT+0x298>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d004      	beq.n	800c5f0 <HAL_TIM_OC_Start_IT+0x1d8>
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4a32      	ldr	r2, [pc, #200]	; (800c6b4 <HAL_TIM_OC_Start_IT+0x29c>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d101      	bne.n	800c5f4 <HAL_TIM_OC_Start_IT+0x1dc>
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	e000      	b.n	800c5f6 <HAL_TIM_OC_Start_IT+0x1de>
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d007      	beq.n	800c60a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c608:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4a25      	ldr	r2, [pc, #148]	; (800c6a4 <HAL_TIM_OC_Start_IT+0x28c>)
 800c610:	4293      	cmp	r3, r2
 800c612:	d022      	beq.n	800c65a <HAL_TIM_OC_Start_IT+0x242>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c61c:	d01d      	beq.n	800c65a <HAL_TIM_OC_Start_IT+0x242>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4a25      	ldr	r2, [pc, #148]	; (800c6b8 <HAL_TIM_OC_Start_IT+0x2a0>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d018      	beq.n	800c65a <HAL_TIM_OC_Start_IT+0x242>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4a23      	ldr	r2, [pc, #140]	; (800c6bc <HAL_TIM_OC_Start_IT+0x2a4>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d013      	beq.n	800c65a <HAL_TIM_OC_Start_IT+0x242>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4a22      	ldr	r2, [pc, #136]	; (800c6c0 <HAL_TIM_OC_Start_IT+0x2a8>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d00e      	beq.n	800c65a <HAL_TIM_OC_Start_IT+0x242>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	4a19      	ldr	r2, [pc, #100]	; (800c6a8 <HAL_TIM_OC_Start_IT+0x290>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d009      	beq.n	800c65a <HAL_TIM_OC_Start_IT+0x242>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4a1e      	ldr	r2, [pc, #120]	; (800c6c4 <HAL_TIM_OC_Start_IT+0x2ac>)
 800c64c:	4293      	cmp	r3, r2
 800c64e:	d004      	beq.n	800c65a <HAL_TIM_OC_Start_IT+0x242>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4a15      	ldr	r2, [pc, #84]	; (800c6ac <HAL_TIM_OC_Start_IT+0x294>)
 800c656:	4293      	cmp	r3, r2
 800c658:	d115      	bne.n	800c686 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	689a      	ldr	r2, [r3, #8]
 800c660:	4b19      	ldr	r3, [pc, #100]	; (800c6c8 <HAL_TIM_OC_Start_IT+0x2b0>)
 800c662:	4013      	ands	r3, r2
 800c664:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	2b06      	cmp	r3, #6
 800c66a:	d015      	beq.n	800c698 <HAL_TIM_OC_Start_IT+0x280>
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c672:	d011      	beq.n	800c698 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	681a      	ldr	r2, [r3, #0]
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f042 0201 	orr.w	r2, r2, #1
 800c682:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c684:	e008      	b.n	800c698 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	681a      	ldr	r2, [r3, #0]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f042 0201 	orr.w	r2, r2, #1
 800c694:	601a      	str	r2, [r3, #0]
 800c696:	e000      	b.n	800c69a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c698:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c69a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3710      	adds	r7, #16
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	40010000 	.word	0x40010000
 800c6a8:	40010400 	.word	0x40010400
 800c6ac:	40014000 	.word	0x40014000
 800c6b0:	40014400 	.word	0x40014400
 800c6b4:	40014800 	.word	0x40014800
 800c6b8:	40000400 	.word	0x40000400
 800c6bc:	40000800 	.word	0x40000800
 800c6c0:	40000c00 	.word	0x40000c00
 800c6c4:	40001800 	.word	0x40001800
 800c6c8:	00010007 	.word	0x00010007

0800c6cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d101      	bne.n	800c6de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c6da:	2301      	movs	r3, #1
 800c6dc:	e049      	b.n	800c772 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d106      	bne.n	800c6f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f7f5 fe38 	bl	8002368 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2202      	movs	r2, #2
 800c6fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681a      	ldr	r2, [r3, #0]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	3304      	adds	r3, #4
 800c708:	4619      	mov	r1, r3
 800c70a:	4610      	mov	r0, r2
 800c70c:	f000 fa90 	bl	800cc30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2201      	movs	r2, #1
 800c714:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2201      	movs	r2, #1
 800c71c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2201      	movs	r2, #1
 800c724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2201      	movs	r2, #1
 800c72c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2201      	movs	r2, #1
 800c734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2201      	movs	r2, #1
 800c73c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2201      	movs	r2, #1
 800c744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2201      	movs	r2, #1
 800c74c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2201      	movs	r2, #1
 800c754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2201      	movs	r2, #1
 800c75c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2201      	movs	r2, #1
 800c764:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2201      	movs	r2, #1
 800c76c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c770:	2300      	movs	r3, #0
}
 800c772:	4618      	mov	r0, r3
 800c774:	3708      	adds	r7, #8
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}

0800c77a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c77a:	b580      	push	{r7, lr}
 800c77c:	b082      	sub	sp, #8
 800c77e:	af00      	add	r7, sp, #0
 800c780:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	691b      	ldr	r3, [r3, #16]
 800c788:	f003 0302 	and.w	r3, r3, #2
 800c78c:	2b02      	cmp	r3, #2
 800c78e:	d122      	bne.n	800c7d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	68db      	ldr	r3, [r3, #12]
 800c796:	f003 0302 	and.w	r3, r3, #2
 800c79a:	2b02      	cmp	r3, #2
 800c79c:	d11b      	bne.n	800c7d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f06f 0202 	mvn.w	r2, #2
 800c7a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	699b      	ldr	r3, [r3, #24]
 800c7b4:	f003 0303 	and.w	r3, r3, #3
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d003      	beq.n	800c7c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 fa19 	bl	800cbf4 <HAL_TIM_IC_CaptureCallback>
 800c7c2:	e005      	b.n	800c7d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f7f3 ff1f 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f000 fa1c 	bl	800cc08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	691b      	ldr	r3, [r3, #16]
 800c7dc:	f003 0304 	and.w	r3, r3, #4
 800c7e0:	2b04      	cmp	r3, #4
 800c7e2:	d122      	bne.n	800c82a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	68db      	ldr	r3, [r3, #12]
 800c7ea:	f003 0304 	and.w	r3, r3, #4
 800c7ee:	2b04      	cmp	r3, #4
 800c7f0:	d11b      	bne.n	800c82a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f06f 0204 	mvn.w	r2, #4
 800c7fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2202      	movs	r2, #2
 800c800:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	699b      	ldr	r3, [r3, #24]
 800c808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d003      	beq.n	800c818 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f000 f9ef 	bl	800cbf4 <HAL_TIM_IC_CaptureCallback>
 800c816:	e005      	b.n	800c824 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f7f3 fef5 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 f9f2 	bl	800cc08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2200      	movs	r2, #0
 800c828:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	691b      	ldr	r3, [r3, #16]
 800c830:	f003 0308 	and.w	r3, r3, #8
 800c834:	2b08      	cmp	r3, #8
 800c836:	d122      	bne.n	800c87e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	68db      	ldr	r3, [r3, #12]
 800c83e:	f003 0308 	and.w	r3, r3, #8
 800c842:	2b08      	cmp	r3, #8
 800c844:	d11b      	bne.n	800c87e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f06f 0208 	mvn.w	r2, #8
 800c84e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2204      	movs	r2, #4
 800c854:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	69db      	ldr	r3, [r3, #28]
 800c85c:	f003 0303 	and.w	r3, r3, #3
 800c860:	2b00      	cmp	r3, #0
 800c862:	d003      	beq.n	800c86c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 f9c5 	bl	800cbf4 <HAL_TIM_IC_CaptureCallback>
 800c86a:	e005      	b.n	800c878 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f7f3 fecb 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 f9c8 	bl	800cc08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2200      	movs	r2, #0
 800c87c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	691b      	ldr	r3, [r3, #16]
 800c884:	f003 0310 	and.w	r3, r3, #16
 800c888:	2b10      	cmp	r3, #16
 800c88a:	d122      	bne.n	800c8d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	68db      	ldr	r3, [r3, #12]
 800c892:	f003 0310 	and.w	r3, r3, #16
 800c896:	2b10      	cmp	r3, #16
 800c898:	d11b      	bne.n	800c8d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f06f 0210 	mvn.w	r2, #16
 800c8a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2208      	movs	r2, #8
 800c8a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	69db      	ldr	r3, [r3, #28]
 800c8b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d003      	beq.n	800c8c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 f99b 	bl	800cbf4 <HAL_TIM_IC_CaptureCallback>
 800c8be:	e005      	b.n	800c8cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f7f3 fea1 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 f99e 	bl	800cc08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	691b      	ldr	r3, [r3, #16]
 800c8d8:	f003 0301 	and.w	r3, r3, #1
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d10e      	bne.n	800c8fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	68db      	ldr	r3, [r3, #12]
 800c8e6:	f003 0301 	and.w	r3, r3, #1
 800c8ea:	2b01      	cmp	r3, #1
 800c8ec:	d107      	bne.n	800c8fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f06f 0201 	mvn.w	r2, #1
 800c8f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 f971 	bl	800cbe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	691b      	ldr	r3, [r3, #16]
 800c904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c908:	2b80      	cmp	r3, #128	; 0x80
 800c90a:	d10e      	bne.n	800c92a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	68db      	ldr	r3, [r3, #12]
 800c912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c916:	2b80      	cmp	r3, #128	; 0x80
 800c918:	d107      	bne.n	800c92a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f000 fe2f 	bl	800d588 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	691b      	ldr	r3, [r3, #16]
 800c930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c938:	d10e      	bne.n	800c958 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	68db      	ldr	r3, [r3, #12]
 800c940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c944:	2b80      	cmp	r3, #128	; 0x80
 800c946:	d107      	bne.n	800c958 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 fe22 	bl	800d59c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	691b      	ldr	r3, [r3, #16]
 800c95e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c962:	2b40      	cmp	r3, #64	; 0x40
 800c964:	d10e      	bne.n	800c984 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	68db      	ldr	r3, [r3, #12]
 800c96c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c970:	2b40      	cmp	r3, #64	; 0x40
 800c972:	d107      	bne.n	800c984 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c97c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f000 f94c 	bl	800cc1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	691b      	ldr	r3, [r3, #16]
 800c98a:	f003 0320 	and.w	r3, r3, #32
 800c98e:	2b20      	cmp	r3, #32
 800c990:	d10e      	bne.n	800c9b0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	68db      	ldr	r3, [r3, #12]
 800c998:	f003 0320 	and.w	r3, r3, #32
 800c99c:	2b20      	cmp	r3, #32
 800c99e:	d107      	bne.n	800c9b0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f06f 0220 	mvn.w	r2, #32
 800c9a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 fde2 	bl	800d574 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c9b0:	bf00      	nop
 800c9b2:	3708      	adds	r7, #8
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b086      	sub	sp, #24
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	60b9      	str	r1, [r7, #8]
 800c9c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9ce:	2b01      	cmp	r3, #1
 800c9d0:	d101      	bne.n	800c9d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c9d2:	2302      	movs	r3, #2
 800c9d4:	e0ff      	b.n	800cbd6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2201      	movs	r2, #1
 800c9da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2b14      	cmp	r3, #20
 800c9e2:	f200 80f0 	bhi.w	800cbc6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c9e6:	a201      	add	r2, pc, #4	; (adr r2, 800c9ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9ec:	0800ca41 	.word	0x0800ca41
 800c9f0:	0800cbc7 	.word	0x0800cbc7
 800c9f4:	0800cbc7 	.word	0x0800cbc7
 800c9f8:	0800cbc7 	.word	0x0800cbc7
 800c9fc:	0800ca81 	.word	0x0800ca81
 800ca00:	0800cbc7 	.word	0x0800cbc7
 800ca04:	0800cbc7 	.word	0x0800cbc7
 800ca08:	0800cbc7 	.word	0x0800cbc7
 800ca0c:	0800cac3 	.word	0x0800cac3
 800ca10:	0800cbc7 	.word	0x0800cbc7
 800ca14:	0800cbc7 	.word	0x0800cbc7
 800ca18:	0800cbc7 	.word	0x0800cbc7
 800ca1c:	0800cb03 	.word	0x0800cb03
 800ca20:	0800cbc7 	.word	0x0800cbc7
 800ca24:	0800cbc7 	.word	0x0800cbc7
 800ca28:	0800cbc7 	.word	0x0800cbc7
 800ca2c:	0800cb45 	.word	0x0800cb45
 800ca30:	0800cbc7 	.word	0x0800cbc7
 800ca34:	0800cbc7 	.word	0x0800cbc7
 800ca38:	0800cbc7 	.word	0x0800cbc7
 800ca3c:	0800cb85 	.word	0x0800cb85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	68b9      	ldr	r1, [r7, #8]
 800ca46:	4618      	mov	r0, r3
 800ca48:	f000 f98c 	bl	800cd64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	699a      	ldr	r2, [r3, #24]
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f042 0208 	orr.w	r2, r2, #8
 800ca5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	699a      	ldr	r2, [r3, #24]
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f022 0204 	bic.w	r2, r2, #4
 800ca6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	6999      	ldr	r1, [r3, #24]
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	691a      	ldr	r2, [r3, #16]
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	430a      	orrs	r2, r1
 800ca7c:	619a      	str	r2, [r3, #24]
      break;
 800ca7e:	e0a5      	b.n	800cbcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	68b9      	ldr	r1, [r7, #8]
 800ca86:	4618      	mov	r0, r3
 800ca88:	f000 f9fc 	bl	800ce84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	699a      	ldr	r2, [r3, #24]
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	699a      	ldr	r2, [r3, #24]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800caaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	6999      	ldr	r1, [r3, #24]
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	691b      	ldr	r3, [r3, #16]
 800cab6:	021a      	lsls	r2, r3, #8
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	430a      	orrs	r2, r1
 800cabe:	619a      	str	r2, [r3, #24]
      break;
 800cac0:	e084      	b.n	800cbcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	68b9      	ldr	r1, [r7, #8]
 800cac8:	4618      	mov	r0, r3
 800caca:	f000 fa65 	bl	800cf98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	69da      	ldr	r2, [r3, #28]
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f042 0208 	orr.w	r2, r2, #8
 800cadc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	69da      	ldr	r2, [r3, #28]
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f022 0204 	bic.w	r2, r2, #4
 800caec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	69d9      	ldr	r1, [r3, #28]
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	691a      	ldr	r2, [r3, #16]
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	430a      	orrs	r2, r1
 800cafe:	61da      	str	r2, [r3, #28]
      break;
 800cb00:	e064      	b.n	800cbcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	68b9      	ldr	r1, [r7, #8]
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f000 facd 	bl	800d0a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	69da      	ldr	r2, [r3, #28]
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	69da      	ldr	r2, [r3, #28]
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	69d9      	ldr	r1, [r3, #28]
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	691b      	ldr	r3, [r3, #16]
 800cb38:	021a      	lsls	r2, r3, #8
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	430a      	orrs	r2, r1
 800cb40:	61da      	str	r2, [r3, #28]
      break;
 800cb42:	e043      	b.n	800cbcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	68b9      	ldr	r1, [r7, #8]
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f000 fb16 	bl	800d17c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f042 0208 	orr.w	r2, r2, #8
 800cb5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f022 0204 	bic.w	r2, r2, #4
 800cb6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	691a      	ldr	r2, [r3, #16]
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	430a      	orrs	r2, r1
 800cb80:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cb82:	e023      	b.n	800cbcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	68b9      	ldr	r1, [r7, #8]
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f000 fb5a 	bl	800d244 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cbae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	691b      	ldr	r3, [r3, #16]
 800cbba:	021a      	lsls	r2, r3, #8
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	430a      	orrs	r2, r1
 800cbc2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cbc4:	e002      	b.n	800cbcc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	75fb      	strb	r3, [r7, #23]
      break;
 800cbca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cbd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3718      	adds	r7, #24
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop

0800cbe0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b083      	sub	sp, #12
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cbe8:	bf00      	nop
 800cbea:	370c      	adds	r7, #12
 800cbec:	46bd      	mov	sp, r7
 800cbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf2:	4770      	bx	lr

0800cbf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b083      	sub	sp, #12
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cbfc:	bf00      	nop
 800cbfe:	370c      	adds	r7, #12
 800cc00:	46bd      	mov	sp, r7
 800cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc06:	4770      	bx	lr

0800cc08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b083      	sub	sp, #12
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cc10:	bf00      	nop
 800cc12:	370c      	adds	r7, #12
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr

0800cc1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b083      	sub	sp, #12
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cc24:	bf00      	nop
 800cc26:	370c      	adds	r7, #12
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr

0800cc30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b085      	sub	sp, #20
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	4a40      	ldr	r2, [pc, #256]	; (800cd44 <TIM_Base_SetConfig+0x114>)
 800cc44:	4293      	cmp	r3, r2
 800cc46:	d013      	beq.n	800cc70 <TIM_Base_SetConfig+0x40>
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc4e:	d00f      	beq.n	800cc70 <TIM_Base_SetConfig+0x40>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	4a3d      	ldr	r2, [pc, #244]	; (800cd48 <TIM_Base_SetConfig+0x118>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d00b      	beq.n	800cc70 <TIM_Base_SetConfig+0x40>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	4a3c      	ldr	r2, [pc, #240]	; (800cd4c <TIM_Base_SetConfig+0x11c>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d007      	beq.n	800cc70 <TIM_Base_SetConfig+0x40>
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	4a3b      	ldr	r2, [pc, #236]	; (800cd50 <TIM_Base_SetConfig+0x120>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d003      	beq.n	800cc70 <TIM_Base_SetConfig+0x40>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	4a3a      	ldr	r2, [pc, #232]	; (800cd54 <TIM_Base_SetConfig+0x124>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d108      	bne.n	800cc82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	68fa      	ldr	r2, [r7, #12]
 800cc7e:	4313      	orrs	r3, r2
 800cc80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	4a2f      	ldr	r2, [pc, #188]	; (800cd44 <TIM_Base_SetConfig+0x114>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d01f      	beq.n	800ccca <TIM_Base_SetConfig+0x9a>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc90:	d01b      	beq.n	800ccca <TIM_Base_SetConfig+0x9a>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	4a2c      	ldr	r2, [pc, #176]	; (800cd48 <TIM_Base_SetConfig+0x118>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d017      	beq.n	800ccca <TIM_Base_SetConfig+0x9a>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	4a2b      	ldr	r2, [pc, #172]	; (800cd4c <TIM_Base_SetConfig+0x11c>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d013      	beq.n	800ccca <TIM_Base_SetConfig+0x9a>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	4a2a      	ldr	r2, [pc, #168]	; (800cd50 <TIM_Base_SetConfig+0x120>)
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d00f      	beq.n	800ccca <TIM_Base_SetConfig+0x9a>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	4a29      	ldr	r2, [pc, #164]	; (800cd54 <TIM_Base_SetConfig+0x124>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d00b      	beq.n	800ccca <TIM_Base_SetConfig+0x9a>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	4a28      	ldr	r2, [pc, #160]	; (800cd58 <TIM_Base_SetConfig+0x128>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d007      	beq.n	800ccca <TIM_Base_SetConfig+0x9a>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	4a27      	ldr	r2, [pc, #156]	; (800cd5c <TIM_Base_SetConfig+0x12c>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d003      	beq.n	800ccca <TIM_Base_SetConfig+0x9a>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	4a26      	ldr	r2, [pc, #152]	; (800cd60 <TIM_Base_SetConfig+0x130>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d108      	bne.n	800ccdc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ccd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	68db      	ldr	r3, [r3, #12]
 800ccd6:	68fa      	ldr	r2, [r7, #12]
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	695b      	ldr	r3, [r3, #20]
 800cce6:	4313      	orrs	r3, r2
 800cce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	68fa      	ldr	r2, [r7, #12]
 800ccee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	689a      	ldr	r2, [r3, #8]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	681a      	ldr	r2, [r3, #0]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	4a10      	ldr	r2, [pc, #64]	; (800cd44 <TIM_Base_SetConfig+0x114>)
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d00f      	beq.n	800cd28 <TIM_Base_SetConfig+0xf8>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	4a12      	ldr	r2, [pc, #72]	; (800cd54 <TIM_Base_SetConfig+0x124>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d00b      	beq.n	800cd28 <TIM_Base_SetConfig+0xf8>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	4a11      	ldr	r2, [pc, #68]	; (800cd58 <TIM_Base_SetConfig+0x128>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d007      	beq.n	800cd28 <TIM_Base_SetConfig+0xf8>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	4a10      	ldr	r2, [pc, #64]	; (800cd5c <TIM_Base_SetConfig+0x12c>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d003      	beq.n	800cd28 <TIM_Base_SetConfig+0xf8>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	4a0f      	ldr	r2, [pc, #60]	; (800cd60 <TIM_Base_SetConfig+0x130>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d103      	bne.n	800cd30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	691a      	ldr	r2, [r3, #16]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2201      	movs	r2, #1
 800cd34:	615a      	str	r2, [r3, #20]
}
 800cd36:	bf00      	nop
 800cd38:	3714      	adds	r7, #20
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr
 800cd42:	bf00      	nop
 800cd44:	40010000 	.word	0x40010000
 800cd48:	40000400 	.word	0x40000400
 800cd4c:	40000800 	.word	0x40000800
 800cd50:	40000c00 	.word	0x40000c00
 800cd54:	40010400 	.word	0x40010400
 800cd58:	40014000 	.word	0x40014000
 800cd5c:	40014400 	.word	0x40014400
 800cd60:	40014800 	.word	0x40014800

0800cd64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd64:	b480      	push	{r7}
 800cd66:	b087      	sub	sp, #28
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
 800cd6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6a1b      	ldr	r3, [r3, #32]
 800cd72:	f023 0201 	bic.w	r2, r3, #1
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6a1b      	ldr	r3, [r3, #32]
 800cd7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	699b      	ldr	r3, [r3, #24]
 800cd8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cd8c:	68fa      	ldr	r2, [r7, #12]
 800cd8e:	4b37      	ldr	r3, [pc, #220]	; (800ce6c <TIM_OC1_SetConfig+0x108>)
 800cd90:	4013      	ands	r3, r2
 800cd92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f023 0303 	bic.w	r3, r3, #3
 800cd9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	68fa      	ldr	r2, [r7, #12]
 800cda2:	4313      	orrs	r3, r2
 800cda4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	f023 0302 	bic.w	r3, r3, #2
 800cdac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	689b      	ldr	r3, [r3, #8]
 800cdb2:	697a      	ldr	r2, [r7, #20]
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	4a2d      	ldr	r2, [pc, #180]	; (800ce70 <TIM_OC1_SetConfig+0x10c>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d00f      	beq.n	800cde0 <TIM_OC1_SetConfig+0x7c>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	4a2c      	ldr	r2, [pc, #176]	; (800ce74 <TIM_OC1_SetConfig+0x110>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d00b      	beq.n	800cde0 <TIM_OC1_SetConfig+0x7c>
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	4a2b      	ldr	r2, [pc, #172]	; (800ce78 <TIM_OC1_SetConfig+0x114>)
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d007      	beq.n	800cde0 <TIM_OC1_SetConfig+0x7c>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	4a2a      	ldr	r2, [pc, #168]	; (800ce7c <TIM_OC1_SetConfig+0x118>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d003      	beq.n	800cde0 <TIM_OC1_SetConfig+0x7c>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	4a29      	ldr	r2, [pc, #164]	; (800ce80 <TIM_OC1_SetConfig+0x11c>)
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d10c      	bne.n	800cdfa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	f023 0308 	bic.w	r3, r3, #8
 800cde6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	68db      	ldr	r3, [r3, #12]
 800cdec:	697a      	ldr	r2, [r7, #20]
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	f023 0304 	bic.w	r3, r3, #4
 800cdf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	4a1c      	ldr	r2, [pc, #112]	; (800ce70 <TIM_OC1_SetConfig+0x10c>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d00f      	beq.n	800ce22 <TIM_OC1_SetConfig+0xbe>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	4a1b      	ldr	r2, [pc, #108]	; (800ce74 <TIM_OC1_SetConfig+0x110>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d00b      	beq.n	800ce22 <TIM_OC1_SetConfig+0xbe>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	4a1a      	ldr	r2, [pc, #104]	; (800ce78 <TIM_OC1_SetConfig+0x114>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d007      	beq.n	800ce22 <TIM_OC1_SetConfig+0xbe>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	4a19      	ldr	r2, [pc, #100]	; (800ce7c <TIM_OC1_SetConfig+0x118>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d003      	beq.n	800ce22 <TIM_OC1_SetConfig+0xbe>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	4a18      	ldr	r2, [pc, #96]	; (800ce80 <TIM_OC1_SetConfig+0x11c>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d111      	bne.n	800ce46 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ce30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	695b      	ldr	r3, [r3, #20]
 800ce36:	693a      	ldr	r2, [r7, #16]
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	699b      	ldr	r3, [r3, #24]
 800ce40:	693a      	ldr	r2, [r7, #16]
 800ce42:	4313      	orrs	r3, r2
 800ce44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	693a      	ldr	r2, [r7, #16]
 800ce4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	68fa      	ldr	r2, [r7, #12]
 800ce50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	685a      	ldr	r2, [r3, #4]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	697a      	ldr	r2, [r7, #20]
 800ce5e:	621a      	str	r2, [r3, #32]
}
 800ce60:	bf00      	nop
 800ce62:	371c      	adds	r7, #28
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr
 800ce6c:	fffeff8f 	.word	0xfffeff8f
 800ce70:	40010000 	.word	0x40010000
 800ce74:	40010400 	.word	0x40010400
 800ce78:	40014000 	.word	0x40014000
 800ce7c:	40014400 	.word	0x40014400
 800ce80:	40014800 	.word	0x40014800

0800ce84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b087      	sub	sp, #28
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6a1b      	ldr	r3, [r3, #32]
 800ce92:	f023 0210 	bic.w	r2, r3, #16
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6a1b      	ldr	r3, [r3, #32]
 800ce9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	685b      	ldr	r3, [r3, #4]
 800cea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	699b      	ldr	r3, [r3, #24]
 800ceaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ceac:	68fa      	ldr	r2, [r7, #12]
 800ceae:	4b34      	ldr	r3, [pc, #208]	; (800cf80 <TIM_OC2_SetConfig+0xfc>)
 800ceb0:	4013      	ands	r3, r2
 800ceb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ceba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	021b      	lsls	r3, r3, #8
 800cec2:	68fa      	ldr	r2, [r7, #12]
 800cec4:	4313      	orrs	r3, r2
 800cec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	f023 0320 	bic.w	r3, r3, #32
 800cece:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	689b      	ldr	r3, [r3, #8]
 800ced4:	011b      	lsls	r3, r3, #4
 800ced6:	697a      	ldr	r2, [r7, #20]
 800ced8:	4313      	orrs	r3, r2
 800ceda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	4a29      	ldr	r2, [pc, #164]	; (800cf84 <TIM_OC2_SetConfig+0x100>)
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d003      	beq.n	800ceec <TIM_OC2_SetConfig+0x68>
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	4a28      	ldr	r2, [pc, #160]	; (800cf88 <TIM_OC2_SetConfig+0x104>)
 800cee8:	4293      	cmp	r3, r2
 800ceea:	d10d      	bne.n	800cf08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cef2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	68db      	ldr	r3, [r3, #12]
 800cef8:	011b      	lsls	r3, r3, #4
 800cefa:	697a      	ldr	r2, [r7, #20]
 800cefc:	4313      	orrs	r3, r2
 800cefe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	4a1e      	ldr	r2, [pc, #120]	; (800cf84 <TIM_OC2_SetConfig+0x100>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d00f      	beq.n	800cf30 <TIM_OC2_SetConfig+0xac>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	4a1d      	ldr	r2, [pc, #116]	; (800cf88 <TIM_OC2_SetConfig+0x104>)
 800cf14:	4293      	cmp	r3, r2
 800cf16:	d00b      	beq.n	800cf30 <TIM_OC2_SetConfig+0xac>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	4a1c      	ldr	r2, [pc, #112]	; (800cf8c <TIM_OC2_SetConfig+0x108>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d007      	beq.n	800cf30 <TIM_OC2_SetConfig+0xac>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	4a1b      	ldr	r2, [pc, #108]	; (800cf90 <TIM_OC2_SetConfig+0x10c>)
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d003      	beq.n	800cf30 <TIM_OC2_SetConfig+0xac>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	4a1a      	ldr	r2, [pc, #104]	; (800cf94 <TIM_OC2_SetConfig+0x110>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d113      	bne.n	800cf58 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cf36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cf3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	695b      	ldr	r3, [r3, #20]
 800cf44:	009b      	lsls	r3, r3, #2
 800cf46:	693a      	ldr	r2, [r7, #16]
 800cf48:	4313      	orrs	r3, r2
 800cf4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	699b      	ldr	r3, [r3, #24]
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	693a      	ldr	r2, [r7, #16]
 800cf54:	4313      	orrs	r3, r2
 800cf56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	693a      	ldr	r2, [r7, #16]
 800cf5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	68fa      	ldr	r2, [r7, #12]
 800cf62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	685a      	ldr	r2, [r3, #4]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	697a      	ldr	r2, [r7, #20]
 800cf70:	621a      	str	r2, [r3, #32]
}
 800cf72:	bf00      	nop
 800cf74:	371c      	adds	r7, #28
 800cf76:	46bd      	mov	sp, r7
 800cf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7c:	4770      	bx	lr
 800cf7e:	bf00      	nop
 800cf80:	feff8fff 	.word	0xfeff8fff
 800cf84:	40010000 	.word	0x40010000
 800cf88:	40010400 	.word	0x40010400
 800cf8c:	40014000 	.word	0x40014000
 800cf90:	40014400 	.word	0x40014400
 800cf94:	40014800 	.word	0x40014800

0800cf98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b087      	sub	sp, #28
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6a1b      	ldr	r3, [r3, #32]
 800cfa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6a1b      	ldr	r3, [r3, #32]
 800cfb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	685b      	ldr	r3, [r3, #4]
 800cfb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	69db      	ldr	r3, [r3, #28]
 800cfbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cfc0:	68fa      	ldr	r2, [r7, #12]
 800cfc2:	4b33      	ldr	r3, [pc, #204]	; (800d090 <TIM_OC3_SetConfig+0xf8>)
 800cfc4:	4013      	ands	r3, r2
 800cfc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f023 0303 	bic.w	r3, r3, #3
 800cfce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	68fa      	ldr	r2, [r7, #12]
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cfe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	689b      	ldr	r3, [r3, #8]
 800cfe6:	021b      	lsls	r3, r3, #8
 800cfe8:	697a      	ldr	r2, [r7, #20]
 800cfea:	4313      	orrs	r3, r2
 800cfec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	4a28      	ldr	r2, [pc, #160]	; (800d094 <TIM_OC3_SetConfig+0xfc>)
 800cff2:	4293      	cmp	r3, r2
 800cff4:	d003      	beq.n	800cffe <TIM_OC3_SetConfig+0x66>
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	4a27      	ldr	r2, [pc, #156]	; (800d098 <TIM_OC3_SetConfig+0x100>)
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d10d      	bne.n	800d01a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d004:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	68db      	ldr	r3, [r3, #12]
 800d00a:	021b      	lsls	r3, r3, #8
 800d00c:	697a      	ldr	r2, [r7, #20]
 800d00e:	4313      	orrs	r3, r2
 800d010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	4a1d      	ldr	r2, [pc, #116]	; (800d094 <TIM_OC3_SetConfig+0xfc>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	d00f      	beq.n	800d042 <TIM_OC3_SetConfig+0xaa>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	4a1c      	ldr	r2, [pc, #112]	; (800d098 <TIM_OC3_SetConfig+0x100>)
 800d026:	4293      	cmp	r3, r2
 800d028:	d00b      	beq.n	800d042 <TIM_OC3_SetConfig+0xaa>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	4a1b      	ldr	r2, [pc, #108]	; (800d09c <TIM_OC3_SetConfig+0x104>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d007      	beq.n	800d042 <TIM_OC3_SetConfig+0xaa>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	4a1a      	ldr	r2, [pc, #104]	; (800d0a0 <TIM_OC3_SetConfig+0x108>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d003      	beq.n	800d042 <TIM_OC3_SetConfig+0xaa>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	4a19      	ldr	r2, [pc, #100]	; (800d0a4 <TIM_OC3_SetConfig+0x10c>)
 800d03e:	4293      	cmp	r3, r2
 800d040:	d113      	bne.n	800d06a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d048:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d050:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	695b      	ldr	r3, [r3, #20]
 800d056:	011b      	lsls	r3, r3, #4
 800d058:	693a      	ldr	r2, [r7, #16]
 800d05a:	4313      	orrs	r3, r2
 800d05c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	699b      	ldr	r3, [r3, #24]
 800d062:	011b      	lsls	r3, r3, #4
 800d064:	693a      	ldr	r2, [r7, #16]
 800d066:	4313      	orrs	r3, r2
 800d068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	693a      	ldr	r2, [r7, #16]
 800d06e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	68fa      	ldr	r2, [r7, #12]
 800d074:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	685a      	ldr	r2, [r3, #4]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	697a      	ldr	r2, [r7, #20]
 800d082:	621a      	str	r2, [r3, #32]
}
 800d084:	bf00      	nop
 800d086:	371c      	adds	r7, #28
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr
 800d090:	fffeff8f 	.word	0xfffeff8f
 800d094:	40010000 	.word	0x40010000
 800d098:	40010400 	.word	0x40010400
 800d09c:	40014000 	.word	0x40014000
 800d0a0:	40014400 	.word	0x40014400
 800d0a4:	40014800 	.word	0x40014800

0800d0a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b087      	sub	sp, #28
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6a1b      	ldr	r3, [r3, #32]
 800d0b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6a1b      	ldr	r3, [r3, #32]
 800d0c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	685b      	ldr	r3, [r3, #4]
 800d0c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	69db      	ldr	r3, [r3, #28]
 800d0ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d0d0:	68fa      	ldr	r2, [r7, #12]
 800d0d2:	4b24      	ldr	r3, [pc, #144]	; (800d164 <TIM_OC4_SetConfig+0xbc>)
 800d0d4:	4013      	ands	r3, r2
 800d0d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d0de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	021b      	lsls	r3, r3, #8
 800d0e6:	68fa      	ldr	r2, [r7, #12]
 800d0e8:	4313      	orrs	r3, r2
 800d0ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d0f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	689b      	ldr	r3, [r3, #8]
 800d0f8:	031b      	lsls	r3, r3, #12
 800d0fa:	693a      	ldr	r2, [r7, #16]
 800d0fc:	4313      	orrs	r3, r2
 800d0fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	4a19      	ldr	r2, [pc, #100]	; (800d168 <TIM_OC4_SetConfig+0xc0>)
 800d104:	4293      	cmp	r3, r2
 800d106:	d00f      	beq.n	800d128 <TIM_OC4_SetConfig+0x80>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	4a18      	ldr	r2, [pc, #96]	; (800d16c <TIM_OC4_SetConfig+0xc4>)
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d00b      	beq.n	800d128 <TIM_OC4_SetConfig+0x80>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	4a17      	ldr	r2, [pc, #92]	; (800d170 <TIM_OC4_SetConfig+0xc8>)
 800d114:	4293      	cmp	r3, r2
 800d116:	d007      	beq.n	800d128 <TIM_OC4_SetConfig+0x80>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	4a16      	ldr	r2, [pc, #88]	; (800d174 <TIM_OC4_SetConfig+0xcc>)
 800d11c:	4293      	cmp	r3, r2
 800d11e:	d003      	beq.n	800d128 <TIM_OC4_SetConfig+0x80>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	4a15      	ldr	r2, [pc, #84]	; (800d178 <TIM_OC4_SetConfig+0xd0>)
 800d124:	4293      	cmp	r3, r2
 800d126:	d109      	bne.n	800d13c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d12e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	695b      	ldr	r3, [r3, #20]
 800d134:	019b      	lsls	r3, r3, #6
 800d136:	697a      	ldr	r2, [r7, #20]
 800d138:	4313      	orrs	r3, r2
 800d13a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	697a      	ldr	r2, [r7, #20]
 800d140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	68fa      	ldr	r2, [r7, #12]
 800d146:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	685a      	ldr	r2, [r3, #4]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	693a      	ldr	r2, [r7, #16]
 800d154:	621a      	str	r2, [r3, #32]
}
 800d156:	bf00      	nop
 800d158:	371c      	adds	r7, #28
 800d15a:	46bd      	mov	sp, r7
 800d15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d160:	4770      	bx	lr
 800d162:	bf00      	nop
 800d164:	feff8fff 	.word	0xfeff8fff
 800d168:	40010000 	.word	0x40010000
 800d16c:	40010400 	.word	0x40010400
 800d170:	40014000 	.word	0x40014000
 800d174:	40014400 	.word	0x40014400
 800d178:	40014800 	.word	0x40014800

0800d17c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b087      	sub	sp, #28
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6a1b      	ldr	r3, [r3, #32]
 800d18a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6a1b      	ldr	r3, [r3, #32]
 800d196:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d1a4:	68fa      	ldr	r2, [r7, #12]
 800d1a6:	4b21      	ldr	r3, [pc, #132]	; (800d22c <TIM_OC5_SetConfig+0xb0>)
 800d1a8:	4013      	ands	r3, r2
 800d1aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	68fa      	ldr	r2, [r7, #12]
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d1bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	689b      	ldr	r3, [r3, #8]
 800d1c2:	041b      	lsls	r3, r3, #16
 800d1c4:	693a      	ldr	r2, [r7, #16]
 800d1c6:	4313      	orrs	r3, r2
 800d1c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	4a18      	ldr	r2, [pc, #96]	; (800d230 <TIM_OC5_SetConfig+0xb4>)
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d00f      	beq.n	800d1f2 <TIM_OC5_SetConfig+0x76>
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	4a17      	ldr	r2, [pc, #92]	; (800d234 <TIM_OC5_SetConfig+0xb8>)
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d00b      	beq.n	800d1f2 <TIM_OC5_SetConfig+0x76>
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	4a16      	ldr	r2, [pc, #88]	; (800d238 <TIM_OC5_SetConfig+0xbc>)
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d007      	beq.n	800d1f2 <TIM_OC5_SetConfig+0x76>
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	4a15      	ldr	r2, [pc, #84]	; (800d23c <TIM_OC5_SetConfig+0xc0>)
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	d003      	beq.n	800d1f2 <TIM_OC5_SetConfig+0x76>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	4a14      	ldr	r2, [pc, #80]	; (800d240 <TIM_OC5_SetConfig+0xc4>)
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d109      	bne.n	800d206 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d1f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	695b      	ldr	r3, [r3, #20]
 800d1fe:	021b      	lsls	r3, r3, #8
 800d200:	697a      	ldr	r2, [r7, #20]
 800d202:	4313      	orrs	r3, r2
 800d204:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	697a      	ldr	r2, [r7, #20]
 800d20a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	68fa      	ldr	r2, [r7, #12]
 800d210:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	685a      	ldr	r2, [r3, #4]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	693a      	ldr	r2, [r7, #16]
 800d21e:	621a      	str	r2, [r3, #32]
}
 800d220:	bf00      	nop
 800d222:	371c      	adds	r7, #28
 800d224:	46bd      	mov	sp, r7
 800d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22a:	4770      	bx	lr
 800d22c:	fffeff8f 	.word	0xfffeff8f
 800d230:	40010000 	.word	0x40010000
 800d234:	40010400 	.word	0x40010400
 800d238:	40014000 	.word	0x40014000
 800d23c:	40014400 	.word	0x40014400
 800d240:	40014800 	.word	0x40014800

0800d244 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d244:	b480      	push	{r7}
 800d246:	b087      	sub	sp, #28
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6a1b      	ldr	r3, [r3, #32]
 800d252:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6a1b      	ldr	r3, [r3, #32]
 800d25e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d26a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d26c:	68fa      	ldr	r2, [r7, #12]
 800d26e:	4b22      	ldr	r3, [pc, #136]	; (800d2f8 <TIM_OC6_SetConfig+0xb4>)
 800d270:	4013      	ands	r3, r2
 800d272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	021b      	lsls	r3, r3, #8
 800d27a:	68fa      	ldr	r2, [r7, #12]
 800d27c:	4313      	orrs	r3, r2
 800d27e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d286:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	689b      	ldr	r3, [r3, #8]
 800d28c:	051b      	lsls	r3, r3, #20
 800d28e:	693a      	ldr	r2, [r7, #16]
 800d290:	4313      	orrs	r3, r2
 800d292:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	4a19      	ldr	r2, [pc, #100]	; (800d2fc <TIM_OC6_SetConfig+0xb8>)
 800d298:	4293      	cmp	r3, r2
 800d29a:	d00f      	beq.n	800d2bc <TIM_OC6_SetConfig+0x78>
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	4a18      	ldr	r2, [pc, #96]	; (800d300 <TIM_OC6_SetConfig+0xbc>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d00b      	beq.n	800d2bc <TIM_OC6_SetConfig+0x78>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	4a17      	ldr	r2, [pc, #92]	; (800d304 <TIM_OC6_SetConfig+0xc0>)
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d007      	beq.n	800d2bc <TIM_OC6_SetConfig+0x78>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	4a16      	ldr	r2, [pc, #88]	; (800d308 <TIM_OC6_SetConfig+0xc4>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d003      	beq.n	800d2bc <TIM_OC6_SetConfig+0x78>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	4a15      	ldr	r2, [pc, #84]	; (800d30c <TIM_OC6_SetConfig+0xc8>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d109      	bne.n	800d2d0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d2c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	695b      	ldr	r3, [r3, #20]
 800d2c8:	029b      	lsls	r3, r3, #10
 800d2ca:	697a      	ldr	r2, [r7, #20]
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	697a      	ldr	r2, [r7, #20]
 800d2d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	68fa      	ldr	r2, [r7, #12]
 800d2da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	685a      	ldr	r2, [r3, #4]
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	693a      	ldr	r2, [r7, #16]
 800d2e8:	621a      	str	r2, [r3, #32]
}
 800d2ea:	bf00      	nop
 800d2ec:	371c      	adds	r7, #28
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f4:	4770      	bx	lr
 800d2f6:	bf00      	nop
 800d2f8:	feff8fff 	.word	0xfeff8fff
 800d2fc:	40010000 	.word	0x40010000
 800d300:	40010400 	.word	0x40010400
 800d304:	40014000 	.word	0x40014000
 800d308:	40014400 	.word	0x40014400
 800d30c:	40014800 	.word	0x40014800

0800d310 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d310:	b480      	push	{r7}
 800d312:	b087      	sub	sp, #28
 800d314:	af00      	add	r7, sp, #0
 800d316:	60f8      	str	r0, [r7, #12]
 800d318:	60b9      	str	r1, [r7, #8]
 800d31a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	f003 031f 	and.w	r3, r3, #31
 800d322:	2201      	movs	r2, #1
 800d324:	fa02 f303 	lsl.w	r3, r2, r3
 800d328:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	6a1a      	ldr	r2, [r3, #32]
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	43db      	mvns	r3, r3
 800d332:	401a      	ands	r2, r3
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	6a1a      	ldr	r2, [r3, #32]
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	f003 031f 	and.w	r3, r3, #31
 800d342:	6879      	ldr	r1, [r7, #4]
 800d344:	fa01 f303 	lsl.w	r3, r1, r3
 800d348:	431a      	orrs	r2, r3
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	621a      	str	r2, [r3, #32]
}
 800d34e:	bf00      	nop
 800d350:	371c      	adds	r7, #28
 800d352:	46bd      	mov	sp, r7
 800d354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d358:	4770      	bx	lr
	...

0800d35c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b085      	sub	sp, #20
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d36c:	2b01      	cmp	r3, #1
 800d36e:	d101      	bne.n	800d374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d370:	2302      	movs	r3, #2
 800d372:	e06d      	b.n	800d450 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2201      	movs	r2, #1
 800d378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2202      	movs	r2, #2
 800d380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	689b      	ldr	r3, [r3, #8]
 800d392:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4a30      	ldr	r2, [pc, #192]	; (800d45c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d004      	beq.n	800d3a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	4a2f      	ldr	r2, [pc, #188]	; (800d460 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	d108      	bne.n	800d3ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d3ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	685b      	ldr	r3, [r3, #4]
 800d3b4:	68fa      	ldr	r2, [r7, #12]
 800d3b6:	4313      	orrs	r3, r2
 800d3b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	68fa      	ldr	r2, [r7, #12]
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	68fa      	ldr	r2, [r7, #12]
 800d3d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4a20      	ldr	r2, [pc, #128]	; (800d45c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	d022      	beq.n	800d424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3e6:	d01d      	beq.n	800d424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4a1d      	ldr	r2, [pc, #116]	; (800d464 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d018      	beq.n	800d424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	4a1c      	ldr	r2, [pc, #112]	; (800d468 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	d013      	beq.n	800d424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	4a1a      	ldr	r2, [pc, #104]	; (800d46c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d402:	4293      	cmp	r3, r2
 800d404:	d00e      	beq.n	800d424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4a15      	ldr	r2, [pc, #84]	; (800d460 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d009      	beq.n	800d424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4a16      	ldr	r2, [pc, #88]	; (800d470 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d004      	beq.n	800d424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	4a15      	ldr	r2, [pc, #84]	; (800d474 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d420:	4293      	cmp	r3, r2
 800d422:	d10c      	bne.n	800d43e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d42a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	689b      	ldr	r3, [r3, #8]
 800d430:	68ba      	ldr	r2, [r7, #8]
 800d432:	4313      	orrs	r3, r2
 800d434:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	68ba      	ldr	r2, [r7, #8]
 800d43c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2201      	movs	r2, #1
 800d442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2200      	movs	r2, #0
 800d44a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d44e:	2300      	movs	r3, #0
}
 800d450:	4618      	mov	r0, r3
 800d452:	3714      	adds	r7, #20
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr
 800d45c:	40010000 	.word	0x40010000
 800d460:	40010400 	.word	0x40010400
 800d464:	40000400 	.word	0x40000400
 800d468:	40000800 	.word	0x40000800
 800d46c:	40000c00 	.word	0x40000c00
 800d470:	40001800 	.word	0x40001800
 800d474:	40014000 	.word	0x40014000

0800d478 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d478:	b480      	push	{r7}
 800d47a:	b085      	sub	sp, #20
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d482:	2300      	movs	r3, #0
 800d484:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d48c:	2b01      	cmp	r3, #1
 800d48e:	d101      	bne.n	800d494 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d490:	2302      	movs	r3, #2
 800d492:	e065      	b.n	800d560 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2201      	movs	r2, #1
 800d498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	68db      	ldr	r3, [r3, #12]
 800d4a6:	4313      	orrs	r3, r2
 800d4a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	689b      	ldr	r3, [r3, #8]
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	4313      	orrs	r3, r2
 800d4c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4313      	orrs	r3, r2
 800d4d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	691b      	ldr	r3, [r3, #16]
 800d4de:	4313      	orrs	r3, r2
 800d4e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	695b      	ldr	r3, [r3, #20]
 800d4ec:	4313      	orrs	r3, r2
 800d4ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4fa:	4313      	orrs	r3, r2
 800d4fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	699b      	ldr	r3, [r3, #24]
 800d508:	041b      	lsls	r3, r3, #16
 800d50a:	4313      	orrs	r3, r2
 800d50c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	4a16      	ldr	r2, [pc, #88]	; (800d56c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d514:	4293      	cmp	r3, r2
 800d516:	d004      	beq.n	800d522 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4a14      	ldr	r2, [pc, #80]	; (800d570 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d115      	bne.n	800d54e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d52c:	051b      	lsls	r3, r3, #20
 800d52e:	4313      	orrs	r3, r2
 800d530:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	69db      	ldr	r3, [r3, #28]
 800d53c:	4313      	orrs	r3, r2
 800d53e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	6a1b      	ldr	r3, [r3, #32]
 800d54a:	4313      	orrs	r3, r2
 800d54c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	68fa      	ldr	r2, [r7, #12]
 800d554:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2200      	movs	r2, #0
 800d55a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d55e:	2300      	movs	r3, #0
}
 800d560:	4618      	mov	r0, r3
 800d562:	3714      	adds	r7, #20
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr
 800d56c:	40010000 	.word	0x40010000
 800d570:	40010400 	.word	0x40010400

0800d574 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d574:	b480      	push	{r7}
 800d576:	b083      	sub	sp, #12
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d57c:	bf00      	nop
 800d57e:	370c      	adds	r7, #12
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr

0800d588 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d588:	b480      	push	{r7}
 800d58a:	b083      	sub	sp, #12
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d590:	bf00      	nop
 800d592:	370c      	adds	r7, #12
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr

0800d59c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b083      	sub	sp, #12
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d5a4:	bf00      	nop
 800d5a6:	370c      	adds	r7, #12
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ae:	4770      	bx	lr

0800d5b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b082      	sub	sp, #8
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d101      	bne.n	800d5c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d5be:	2301      	movs	r3, #1
 800d5c0:	e042      	b.n	800d648 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d106      	bne.n	800d5da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f7f4 ff89 	bl	80024ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2224      	movs	r2, #36	; 0x24
 800d5de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f022 0201 	bic.w	r2, r2, #1
 800d5f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f000 fcd6 	bl	800dfa4 <UART_SetConfig>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	2b01      	cmp	r3, #1
 800d5fc:	d101      	bne.n	800d602 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d5fe:	2301      	movs	r3, #1
 800d600:	e022      	b.n	800d648 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d606:	2b00      	cmp	r3, #0
 800d608:	d002      	beq.n	800d610 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f001 fa32 	bl	800ea74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	685a      	ldr	r2, [r3, #4]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d61e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	689a      	ldr	r2, [r3, #8]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d62e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	681a      	ldr	r2, [r3, #0]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f042 0201 	orr.w	r2, r2, #1
 800d63e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f001 fab9 	bl	800ebb8 <UART_CheckIdleState>
 800d646:	4603      	mov	r3, r0
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3708      	adds	r7, #8
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b08a      	sub	sp, #40	; 0x28
 800d654:	af02      	add	r7, sp, #8
 800d656:	60f8      	str	r0, [r7, #12]
 800d658:	60b9      	str	r1, [r7, #8]
 800d65a:	603b      	str	r3, [r7, #0]
 800d65c:	4613      	mov	r3, r2
 800d65e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d666:	2b20      	cmp	r3, #32
 800d668:	f040 8083 	bne.w	800d772 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d002      	beq.n	800d678 <HAL_UART_Transmit+0x28>
 800d672:	88fb      	ldrh	r3, [r7, #6]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d101      	bne.n	800d67c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d678:	2301      	movs	r3, #1
 800d67a:	e07b      	b.n	800d774 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d682:	2b01      	cmp	r3, #1
 800d684:	d101      	bne.n	800d68a <HAL_UART_Transmit+0x3a>
 800d686:	2302      	movs	r3, #2
 800d688:	e074      	b.n	800d774 <HAL_UART_Transmit+0x124>
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2201      	movs	r2, #1
 800d68e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	2200      	movs	r2, #0
 800d696:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	2221      	movs	r2, #33	; 0x21
 800d69e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d6a2:	f7f5 f943 	bl	800292c <HAL_GetTick>
 800d6a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	88fa      	ldrh	r2, [r7, #6]
 800d6ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	88fa      	ldrh	r2, [r7, #6]
 800d6b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	689b      	ldr	r3, [r3, #8]
 800d6bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6c0:	d108      	bne.n	800d6d4 <HAL_UART_Transmit+0x84>
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	691b      	ldr	r3, [r3, #16]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d104      	bne.n	800d6d4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	61bb      	str	r3, [r7, #24]
 800d6d2:	e003      	b.n	800d6dc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d6e4:	e02c      	b.n	800d740 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	9300      	str	r3, [sp, #0]
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	2180      	movs	r1, #128	; 0x80
 800d6f0:	68f8      	ldr	r0, [r7, #12]
 800d6f2:	f001 faac 	bl	800ec4e <UART_WaitOnFlagUntilTimeout>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d001      	beq.n	800d700 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d6fc:	2303      	movs	r3, #3
 800d6fe:	e039      	b.n	800d774 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d700:	69fb      	ldr	r3, [r7, #28]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d10b      	bne.n	800d71e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d706:	69bb      	ldr	r3, [r7, #24]
 800d708:	881b      	ldrh	r3, [r3, #0]
 800d70a:	461a      	mov	r2, r3
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d714:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d716:	69bb      	ldr	r3, [r7, #24]
 800d718:	3302      	adds	r3, #2
 800d71a:	61bb      	str	r3, [r7, #24]
 800d71c:	e007      	b.n	800d72e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d71e:	69fb      	ldr	r3, [r7, #28]
 800d720:	781a      	ldrb	r2, [r3, #0]
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d728:	69fb      	ldr	r3, [r7, #28]
 800d72a:	3301      	adds	r3, #1
 800d72c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d734:	b29b      	uxth	r3, r3
 800d736:	3b01      	subs	r3, #1
 800d738:	b29a      	uxth	r2, r3
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d746:	b29b      	uxth	r3, r3
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d1cc      	bne.n	800d6e6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	9300      	str	r3, [sp, #0]
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	2200      	movs	r2, #0
 800d754:	2140      	movs	r1, #64	; 0x40
 800d756:	68f8      	ldr	r0, [r7, #12]
 800d758:	f001 fa79 	bl	800ec4e <UART_WaitOnFlagUntilTimeout>
 800d75c:	4603      	mov	r3, r0
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d001      	beq.n	800d766 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d762:	2303      	movs	r3, #3
 800d764:	e006      	b.n	800d774 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2220      	movs	r2, #32
 800d76a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d76e:	2300      	movs	r3, #0
 800d770:	e000      	b.n	800d774 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d772:	2302      	movs	r3, #2
  }
}
 800d774:	4618      	mov	r0, r3
 800d776:	3720      	adds	r7, #32
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b08a      	sub	sp, #40	; 0x28
 800d780:	af00      	add	r7, sp, #0
 800d782:	60f8      	str	r0, [r7, #12]
 800d784:	60b9      	str	r1, [r7, #8]
 800d786:	4613      	mov	r3, r2
 800d788:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d790:	2b20      	cmp	r3, #32
 800d792:	d142      	bne.n	800d81a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d002      	beq.n	800d7a0 <HAL_UART_Receive_IT+0x24>
 800d79a:	88fb      	ldrh	r3, [r7, #6]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d101      	bne.n	800d7a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	e03b      	b.n	800d81c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d7aa:	2b01      	cmp	r3, #1
 800d7ac:	d101      	bne.n	800d7b2 <HAL_UART_Receive_IT+0x36>
 800d7ae:	2302      	movs	r3, #2
 800d7b0:	e034      	b.n	800d81c <HAL_UART_Receive_IT+0xa0>
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	4a17      	ldr	r2, [pc, #92]	; (800d824 <HAL_UART_Receive_IT+0xa8>)
 800d7c6:	4293      	cmp	r3, r2
 800d7c8:	d01f      	beq.n	800d80a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d018      	beq.n	800d80a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	e853 3f00 	ldrex	r3, [r3]
 800d7e4:	613b      	str	r3, [r7, #16]
   return(result);
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d7ec:	627b      	str	r3, [r7, #36]	; 0x24
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f6:	623b      	str	r3, [r7, #32]
 800d7f8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7fa:	69f9      	ldr	r1, [r7, #28]
 800d7fc:	6a3a      	ldr	r2, [r7, #32]
 800d7fe:	e841 2300 	strex	r3, r2, [r1]
 800d802:	61bb      	str	r3, [r7, #24]
   return(result);
 800d804:	69bb      	ldr	r3, [r7, #24]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d1e6      	bne.n	800d7d8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d80a:	88fb      	ldrh	r3, [r7, #6]
 800d80c:	461a      	mov	r2, r3
 800d80e:	68b9      	ldr	r1, [r7, #8]
 800d810:	68f8      	ldr	r0, [r7, #12]
 800d812:	f001 fae5 	bl	800ede0 <UART_Start_Receive_IT>
 800d816:	4603      	mov	r3, r0
 800d818:	e000      	b.n	800d81c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d81a:	2302      	movs	r3, #2
  }
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3728      	adds	r7, #40	; 0x28
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}
 800d824:	58000c00 	.word	0x58000c00

0800d828 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b0ba      	sub	sp, #232	; 0xe8
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	69db      	ldr	r3, [r3, #28]
 800d836:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	689b      	ldr	r3, [r3, #8]
 800d84a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d84e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d852:	f640 030f 	movw	r3, #2063	; 0x80f
 800d856:	4013      	ands	r3, r2
 800d858:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d85c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d860:	2b00      	cmp	r3, #0
 800d862:	d11b      	bne.n	800d89c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d868:	f003 0320 	and.w	r3, r3, #32
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d015      	beq.n	800d89c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d874:	f003 0320 	and.w	r3, r3, #32
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d105      	bne.n	800d888 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d87c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d884:	2b00      	cmp	r3, #0
 800d886:	d009      	beq.n	800d89c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	f000 835a 	beq.w	800df46 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	4798      	blx	r3
      }
      return;
 800d89a:	e354      	b.n	800df46 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d89c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	f000 811f 	beq.w	800dae4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d8a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d8aa:	4b8b      	ldr	r3, [pc, #556]	; (800dad8 <HAL_UART_IRQHandler+0x2b0>)
 800d8ac:	4013      	ands	r3, r2
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d106      	bne.n	800d8c0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d8b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d8b6:	4b89      	ldr	r3, [pc, #548]	; (800dadc <HAL_UART_IRQHandler+0x2b4>)
 800d8b8:	4013      	ands	r3, r2
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	f000 8112 	beq.w	800dae4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d8c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8c4:	f003 0301 	and.w	r3, r3, #1
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d011      	beq.n	800d8f0 <HAL_UART_IRQHandler+0xc8>
 800d8cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d00b      	beq.n	800d8f0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	2201      	movs	r2, #1
 800d8de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8e6:	f043 0201 	orr.w	r2, r3, #1
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d8f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8f4:	f003 0302 	and.w	r3, r3, #2
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d011      	beq.n	800d920 <HAL_UART_IRQHandler+0xf8>
 800d8fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d900:	f003 0301 	and.w	r3, r3, #1
 800d904:	2b00      	cmp	r3, #0
 800d906:	d00b      	beq.n	800d920 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	2202      	movs	r2, #2
 800d90e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d916:	f043 0204 	orr.w	r2, r3, #4
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d924:	f003 0304 	and.w	r3, r3, #4
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d011      	beq.n	800d950 <HAL_UART_IRQHandler+0x128>
 800d92c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d930:	f003 0301 	and.w	r3, r3, #1
 800d934:	2b00      	cmp	r3, #0
 800d936:	d00b      	beq.n	800d950 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	2204      	movs	r2, #4
 800d93e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d946:	f043 0202 	orr.w	r2, r3, #2
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d954:	f003 0308 	and.w	r3, r3, #8
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d017      	beq.n	800d98c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d95c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d960:	f003 0320 	and.w	r3, r3, #32
 800d964:	2b00      	cmp	r3, #0
 800d966:	d105      	bne.n	800d974 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d968:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d96c:	4b5a      	ldr	r3, [pc, #360]	; (800dad8 <HAL_UART_IRQHandler+0x2b0>)
 800d96e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d970:	2b00      	cmp	r3, #0
 800d972:	d00b      	beq.n	800d98c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	2208      	movs	r2, #8
 800d97a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d982:	f043 0208 	orr.w	r2, r3, #8
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d98c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d994:	2b00      	cmp	r3, #0
 800d996:	d012      	beq.n	800d9be <HAL_UART_IRQHandler+0x196>
 800d998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d99c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d00c      	beq.n	800d9be <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d9ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d9b4:	f043 0220 	orr.w	r2, r3, #32
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	f000 82c0 	beq.w	800df4a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d9ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9ce:	f003 0320 	and.w	r3, r3, #32
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d013      	beq.n	800d9fe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d9d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9da:	f003 0320 	and.w	r3, r3, #32
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d105      	bne.n	800d9ee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d9e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d9e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d007      	beq.n	800d9fe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d003      	beq.n	800d9fe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	689b      	ldr	r3, [r3, #8]
 800da0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da12:	2b40      	cmp	r3, #64	; 0x40
 800da14:	d005      	beq.n	800da22 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800da16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800da1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d04f      	beq.n	800dac2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f001 fb06 	bl	800f034 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	689b      	ldr	r3, [r3, #8]
 800da2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da32:	2b40      	cmp	r3, #64	; 0x40
 800da34:	d141      	bne.n	800daba <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	3308      	adds	r3, #8
 800da3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800da44:	e853 3f00 	ldrex	r3, [r3]
 800da48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800da4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800da50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	3308      	adds	r3, #8
 800da5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800da62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800da66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800da6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800da72:	e841 2300 	strex	r3, r2, [r1]
 800da76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800da7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d1d9      	bne.n	800da36 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da86:	2b00      	cmp	r3, #0
 800da88:	d013      	beq.n	800dab2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da8e:	4a14      	ldr	r2, [pc, #80]	; (800dae0 <HAL_UART_IRQHandler+0x2b8>)
 800da90:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da96:	4618      	mov	r0, r3
 800da98:	f7f8 f88a 	bl	8005bb0 <HAL_DMA_Abort_IT>
 800da9c:	4603      	mov	r3, r0
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d017      	beq.n	800dad2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800daa8:	687a      	ldr	r2, [r7, #4]
 800daaa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800daac:	4610      	mov	r0, r2
 800daae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dab0:	e00f      	b.n	800dad2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f000 fa60 	bl	800df78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dab8:	e00b      	b.n	800dad2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f000 fa5c 	bl	800df78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dac0:	e007      	b.n	800dad2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f000 fa58 	bl	800df78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2200      	movs	r2, #0
 800dacc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800dad0:	e23b      	b.n	800df4a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dad2:	bf00      	nop
    return;
 800dad4:	e239      	b.n	800df4a <HAL_UART_IRQHandler+0x722>
 800dad6:	bf00      	nop
 800dad8:	10000001 	.word	0x10000001
 800dadc:	04000120 	.word	0x04000120
 800dae0:	0800f101 	.word	0x0800f101

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dae8:	2b01      	cmp	r3, #1
 800daea:	f040 81ce 	bne.w	800de8a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800daee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800daf2:	f003 0310 	and.w	r3, r3, #16
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	f000 81c7 	beq.w	800de8a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dafc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db00:	f003 0310 	and.w	r3, r3, #16
 800db04:	2b00      	cmp	r3, #0
 800db06:	f000 81c0 	beq.w	800de8a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	2210      	movs	r2, #16
 800db10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	689b      	ldr	r3, [r3, #8]
 800db18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db1c:	2b40      	cmp	r3, #64	; 0x40
 800db1e:	f040 813b 	bne.w	800dd98 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	4a8b      	ldr	r2, [pc, #556]	; (800dd58 <HAL_UART_IRQHandler+0x530>)
 800db2a:	4293      	cmp	r3, r2
 800db2c:	d059      	beq.n	800dbe2 <HAL_UART_IRQHandler+0x3ba>
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	4a89      	ldr	r2, [pc, #548]	; (800dd5c <HAL_UART_IRQHandler+0x534>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d053      	beq.n	800dbe2 <HAL_UART_IRQHandler+0x3ba>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	4a87      	ldr	r2, [pc, #540]	; (800dd60 <HAL_UART_IRQHandler+0x538>)
 800db42:	4293      	cmp	r3, r2
 800db44:	d04d      	beq.n	800dbe2 <HAL_UART_IRQHandler+0x3ba>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	4a85      	ldr	r2, [pc, #532]	; (800dd64 <HAL_UART_IRQHandler+0x53c>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	d047      	beq.n	800dbe2 <HAL_UART_IRQHandler+0x3ba>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	4a83      	ldr	r2, [pc, #524]	; (800dd68 <HAL_UART_IRQHandler+0x540>)
 800db5a:	4293      	cmp	r3, r2
 800db5c:	d041      	beq.n	800dbe2 <HAL_UART_IRQHandler+0x3ba>
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4a81      	ldr	r2, [pc, #516]	; (800dd6c <HAL_UART_IRQHandler+0x544>)
 800db66:	4293      	cmp	r3, r2
 800db68:	d03b      	beq.n	800dbe2 <HAL_UART_IRQHandler+0x3ba>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	4a7f      	ldr	r2, [pc, #508]	; (800dd70 <HAL_UART_IRQHandler+0x548>)
 800db72:	4293      	cmp	r3, r2
 800db74:	d035      	beq.n	800dbe2 <HAL_UART_IRQHandler+0x3ba>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	4a7d      	ldr	r2, [pc, #500]	; (800dd74 <HAL_UART_IRQHandler+0x54c>)
 800db7e:	4293      	cmp	r3, r2
 800db80:	d02f      	beq.n	800dbe2 <HAL_UART_IRQHandler+0x3ba>
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	4a7b      	ldr	r2, [pc, #492]	; (800dd78 <HAL_UART_IRQHandler+0x550>)
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d029      	beq.n	800dbe2 <HAL_UART_IRQHandler+0x3ba>
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	4a79      	ldr	r2, [pc, #484]	; (800dd7c <HAL_UART_IRQHandler+0x554>)
 800db96:	4293      	cmp	r3, r2
 800db98:	d023      	beq.n	800dbe2 <HAL_UART_IRQHandler+0x3ba>
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	4a77      	ldr	r2, [pc, #476]	; (800dd80 <HAL_UART_IRQHandler+0x558>)
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d01d      	beq.n	800dbe2 <HAL_UART_IRQHandler+0x3ba>
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4a75      	ldr	r2, [pc, #468]	; (800dd84 <HAL_UART_IRQHandler+0x55c>)
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	d017      	beq.n	800dbe2 <HAL_UART_IRQHandler+0x3ba>
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	4a73      	ldr	r2, [pc, #460]	; (800dd88 <HAL_UART_IRQHandler+0x560>)
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d011      	beq.n	800dbe2 <HAL_UART_IRQHandler+0x3ba>
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	4a71      	ldr	r2, [pc, #452]	; (800dd8c <HAL_UART_IRQHandler+0x564>)
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	d00b      	beq.n	800dbe2 <HAL_UART_IRQHandler+0x3ba>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	4a6f      	ldr	r2, [pc, #444]	; (800dd90 <HAL_UART_IRQHandler+0x568>)
 800dbd2:	4293      	cmp	r3, r2
 800dbd4:	d005      	beq.n	800dbe2 <HAL_UART_IRQHandler+0x3ba>
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4a6d      	ldr	r2, [pc, #436]	; (800dd94 <HAL_UART_IRQHandler+0x56c>)
 800dbde:	4293      	cmp	r3, r2
 800dbe0:	d105      	bne.n	800dbee <HAL_UART_IRQHandler+0x3c6>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	685b      	ldr	r3, [r3, #4]
 800dbea:	b29b      	uxth	r3, r3
 800dbec:	e004      	b.n	800dbf8 <HAL_UART_IRQHandler+0x3d0>
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	685b      	ldr	r3, [r3, #4]
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dbfc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	f000 81a4 	beq.w	800df4e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dc0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dc10:	429a      	cmp	r2, r3
 800dc12:	f080 819c 	bcs.w	800df4e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dc1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc24:	69db      	ldr	r3, [r3, #28]
 800dc26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc2a:	f000 8086 	beq.w	800dd3a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dc3a:	e853 3f00 	ldrex	r3, [r3]
 800dc3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800dc42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dc46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	461a      	mov	r2, r3
 800dc54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dc58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dc5c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc60:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dc64:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dc68:	e841 2300 	strex	r3, r2, [r1]
 800dc6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dc70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d1da      	bne.n	800dc2e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	3308      	adds	r3, #8
 800dc7e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dc82:	e853 3f00 	ldrex	r3, [r3]
 800dc86:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dc88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dc8a:	f023 0301 	bic.w	r3, r3, #1
 800dc8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	3308      	adds	r3, #8
 800dc98:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dc9c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800dca0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dca2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dca4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dca8:	e841 2300 	strex	r3, r2, [r1]
 800dcac:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dcae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d1e1      	bne.n	800dc78 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	3308      	adds	r3, #8
 800dcba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dcbe:	e853 3f00 	ldrex	r3, [r3]
 800dcc2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dcc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dcca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	3308      	adds	r3, #8
 800dcd4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dcd8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dcda:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcdc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dcde:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dce0:	e841 2300 	strex	r3, r2, [r1]
 800dce4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dce6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d1e3      	bne.n	800dcb4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2220      	movs	r2, #32
 800dcf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd02:	e853 3f00 	ldrex	r3, [r3]
 800dd06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dd08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd0a:	f023 0310 	bic.w	r3, r3, #16
 800dd0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	461a      	mov	r2, r3
 800dd18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dd1c:	65bb      	str	r3, [r7, #88]	; 0x58
 800dd1e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dd22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dd24:	e841 2300 	strex	r3, r2, [r1]
 800dd28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dd2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d1e4      	bne.n	800dcfa <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7f7 fc1d 	bl	8005574 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd46:	b29b      	uxth	r3, r3
 800dd48:	1ad3      	subs	r3, r2, r3
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	4619      	mov	r1, r3
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f000 f91c 	bl	800df8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dd54:	e0fb      	b.n	800df4e <HAL_UART_IRQHandler+0x726>
 800dd56:	bf00      	nop
 800dd58:	40020010 	.word	0x40020010
 800dd5c:	40020028 	.word	0x40020028
 800dd60:	40020040 	.word	0x40020040
 800dd64:	40020058 	.word	0x40020058
 800dd68:	40020070 	.word	0x40020070
 800dd6c:	40020088 	.word	0x40020088
 800dd70:	400200a0 	.word	0x400200a0
 800dd74:	400200b8 	.word	0x400200b8
 800dd78:	40020410 	.word	0x40020410
 800dd7c:	40020428 	.word	0x40020428
 800dd80:	40020440 	.word	0x40020440
 800dd84:	40020458 	.word	0x40020458
 800dd88:	40020470 	.word	0x40020470
 800dd8c:	40020488 	.word	0x40020488
 800dd90:	400204a0 	.word	0x400204a0
 800dd94:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dda4:	b29b      	uxth	r3, r3
 800dda6:	1ad3      	subs	r3, r2, r3
 800dda8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	f000 80cc 	beq.w	800df52 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800ddba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	f000 80c7 	beq.w	800df52 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddcc:	e853 3f00 	ldrex	r3, [r3]
 800ddd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ddd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ddd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	461a      	mov	r2, r3
 800dde2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dde6:	647b      	str	r3, [r7, #68]	; 0x44
 800dde8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ddec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ddee:	e841 2300 	strex	r3, r2, [r1]
 800ddf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ddf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d1e4      	bne.n	800ddc4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	3308      	adds	r3, #8
 800de00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de04:	e853 3f00 	ldrex	r3, [r3]
 800de08:	623b      	str	r3, [r7, #32]
   return(result);
 800de0a:	6a3a      	ldr	r2, [r7, #32]
 800de0c:	4b54      	ldr	r3, [pc, #336]	; (800df60 <HAL_UART_IRQHandler+0x738>)
 800de0e:	4013      	ands	r3, r2
 800de10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	3308      	adds	r3, #8
 800de1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800de1e:	633a      	str	r2, [r7, #48]	; 0x30
 800de20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de26:	e841 2300 	strex	r3, r2, [r1]
 800de2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800de2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d1e3      	bne.n	800ddfa <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2220      	movs	r2, #32
 800de36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2200      	movs	r2, #0
 800de3e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2200      	movs	r2, #0
 800de44:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	e853 3f00 	ldrex	r3, [r3]
 800de52:	60fb      	str	r3, [r7, #12]
   return(result);
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	f023 0310 	bic.w	r3, r3, #16
 800de5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	461a      	mov	r2, r3
 800de64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800de68:	61fb      	str	r3, [r7, #28]
 800de6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de6c:	69b9      	ldr	r1, [r7, #24]
 800de6e:	69fa      	ldr	r2, [r7, #28]
 800de70:	e841 2300 	strex	r3, r2, [r1]
 800de74:	617b      	str	r3, [r7, #20]
   return(result);
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d1e4      	bne.n	800de46 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800de7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800de80:	4619      	mov	r1, r3
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f000 f882 	bl	800df8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800de88:	e063      	b.n	800df52 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800de8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800de92:	2b00      	cmp	r3, #0
 800de94:	d00e      	beq.n	800deb4 <HAL_UART_IRQHandler+0x68c>
 800de96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d008      	beq.n	800deb4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800deaa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f001 fdc5 	bl	800fa3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800deb2:	e051      	b.n	800df58 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800deb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800deb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800debc:	2b00      	cmp	r3, #0
 800debe:	d014      	beq.n	800deea <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d105      	bne.n	800ded8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800decc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ded0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d008      	beq.n	800deea <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d03a      	beq.n	800df56 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	4798      	blx	r3
    }
    return;
 800dee8:	e035      	b.n	800df56 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800deea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800deee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800def2:	2b00      	cmp	r3, #0
 800def4:	d009      	beq.n	800df0a <HAL_UART_IRQHandler+0x6e2>
 800def6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800defa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800defe:	2b00      	cmp	r3, #0
 800df00:	d003      	beq.n	800df0a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f001 f912 	bl	800f12c <UART_EndTransmit_IT>
    return;
 800df08:	e026      	b.n	800df58 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800df0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df12:	2b00      	cmp	r3, #0
 800df14:	d009      	beq.n	800df2a <HAL_UART_IRQHandler+0x702>
 800df16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d003      	beq.n	800df2a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f001 fd9e 	bl	800fa64 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800df28:	e016      	b.n	800df58 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800df2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800df32:	2b00      	cmp	r3, #0
 800df34:	d010      	beq.n	800df58 <HAL_UART_IRQHandler+0x730>
 800df36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	da0c      	bge.n	800df58 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f001 fd86 	bl	800fa50 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800df44:	e008      	b.n	800df58 <HAL_UART_IRQHandler+0x730>
      return;
 800df46:	bf00      	nop
 800df48:	e006      	b.n	800df58 <HAL_UART_IRQHandler+0x730>
    return;
 800df4a:	bf00      	nop
 800df4c:	e004      	b.n	800df58 <HAL_UART_IRQHandler+0x730>
      return;
 800df4e:	bf00      	nop
 800df50:	e002      	b.n	800df58 <HAL_UART_IRQHandler+0x730>
      return;
 800df52:	bf00      	nop
 800df54:	e000      	b.n	800df58 <HAL_UART_IRQHandler+0x730>
    return;
 800df56:	bf00      	nop
  }
}
 800df58:	37e8      	adds	r7, #232	; 0xe8
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}
 800df5e:	bf00      	nop
 800df60:	effffffe 	.word	0xeffffffe

0800df64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800df64:	b480      	push	{r7}
 800df66:	b083      	sub	sp, #12
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800df6c:	bf00      	nop
 800df6e:	370c      	adds	r7, #12
 800df70:	46bd      	mov	sp, r7
 800df72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df76:	4770      	bx	lr

0800df78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800df78:	b480      	push	{r7}
 800df7a:	b083      	sub	sp, #12
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800df80:	bf00      	nop
 800df82:	370c      	adds	r7, #12
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr

0800df8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800df8c:	b480      	push	{r7}
 800df8e:	b083      	sub	sp, #12
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
 800df94:	460b      	mov	r3, r1
 800df96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800df98:	bf00      	nop
 800df9a:	370c      	adds	r7, #12
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr

0800dfa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dfa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dfa8:	b092      	sub	sp, #72	; 0x48
 800dfaa:	af00      	add	r7, sp, #0
 800dfac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	689a      	ldr	r2, [r3, #8]
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	691b      	ldr	r3, [r3, #16]
 800dfbc:	431a      	orrs	r2, r3
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	695b      	ldr	r3, [r3, #20]
 800dfc2:	431a      	orrs	r2, r3
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	69db      	ldr	r3, [r3, #28]
 800dfc8:	4313      	orrs	r3, r2
 800dfca:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dfcc:	697b      	ldr	r3, [r7, #20]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	681a      	ldr	r2, [r3, #0]
 800dfd2:	4bbe      	ldr	r3, [pc, #760]	; (800e2cc <UART_SetConfig+0x328>)
 800dfd4:	4013      	ands	r3, r2
 800dfd6:	697a      	ldr	r2, [r7, #20]
 800dfd8:	6812      	ldr	r2, [r2, #0]
 800dfda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dfdc:	430b      	orrs	r3, r1
 800dfde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dfe0:	697b      	ldr	r3, [r7, #20]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	68da      	ldr	r2, [r3, #12]
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	430a      	orrs	r2, r1
 800dff4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	699b      	ldr	r3, [r3, #24]
 800dffa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	4ab3      	ldr	r2, [pc, #716]	; (800e2d0 <UART_SetConfig+0x32c>)
 800e002:	4293      	cmp	r3, r2
 800e004:	d004      	beq.n	800e010 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	6a1b      	ldr	r3, [r3, #32]
 800e00a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e00c:	4313      	orrs	r3, r2
 800e00e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	689a      	ldr	r2, [r3, #8]
 800e016:	4baf      	ldr	r3, [pc, #700]	; (800e2d4 <UART_SetConfig+0x330>)
 800e018:	4013      	ands	r3, r2
 800e01a:	697a      	ldr	r2, [r7, #20]
 800e01c:	6812      	ldr	r2, [r2, #0]
 800e01e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e020:	430b      	orrs	r3, r1
 800e022:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e024:	697b      	ldr	r3, [r7, #20]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e02a:	f023 010f 	bic.w	r1, r3, #15
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	430a      	orrs	r2, r1
 800e038:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	4aa6      	ldr	r2, [pc, #664]	; (800e2d8 <UART_SetConfig+0x334>)
 800e040:	4293      	cmp	r3, r2
 800e042:	d177      	bne.n	800e134 <UART_SetConfig+0x190>
 800e044:	4ba5      	ldr	r3, [pc, #660]	; (800e2dc <UART_SetConfig+0x338>)
 800e046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e048:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e04c:	2b28      	cmp	r3, #40	; 0x28
 800e04e:	d86d      	bhi.n	800e12c <UART_SetConfig+0x188>
 800e050:	a201      	add	r2, pc, #4	; (adr r2, 800e058 <UART_SetConfig+0xb4>)
 800e052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e056:	bf00      	nop
 800e058:	0800e0fd 	.word	0x0800e0fd
 800e05c:	0800e12d 	.word	0x0800e12d
 800e060:	0800e12d 	.word	0x0800e12d
 800e064:	0800e12d 	.word	0x0800e12d
 800e068:	0800e12d 	.word	0x0800e12d
 800e06c:	0800e12d 	.word	0x0800e12d
 800e070:	0800e12d 	.word	0x0800e12d
 800e074:	0800e12d 	.word	0x0800e12d
 800e078:	0800e105 	.word	0x0800e105
 800e07c:	0800e12d 	.word	0x0800e12d
 800e080:	0800e12d 	.word	0x0800e12d
 800e084:	0800e12d 	.word	0x0800e12d
 800e088:	0800e12d 	.word	0x0800e12d
 800e08c:	0800e12d 	.word	0x0800e12d
 800e090:	0800e12d 	.word	0x0800e12d
 800e094:	0800e12d 	.word	0x0800e12d
 800e098:	0800e10d 	.word	0x0800e10d
 800e09c:	0800e12d 	.word	0x0800e12d
 800e0a0:	0800e12d 	.word	0x0800e12d
 800e0a4:	0800e12d 	.word	0x0800e12d
 800e0a8:	0800e12d 	.word	0x0800e12d
 800e0ac:	0800e12d 	.word	0x0800e12d
 800e0b0:	0800e12d 	.word	0x0800e12d
 800e0b4:	0800e12d 	.word	0x0800e12d
 800e0b8:	0800e115 	.word	0x0800e115
 800e0bc:	0800e12d 	.word	0x0800e12d
 800e0c0:	0800e12d 	.word	0x0800e12d
 800e0c4:	0800e12d 	.word	0x0800e12d
 800e0c8:	0800e12d 	.word	0x0800e12d
 800e0cc:	0800e12d 	.word	0x0800e12d
 800e0d0:	0800e12d 	.word	0x0800e12d
 800e0d4:	0800e12d 	.word	0x0800e12d
 800e0d8:	0800e11d 	.word	0x0800e11d
 800e0dc:	0800e12d 	.word	0x0800e12d
 800e0e0:	0800e12d 	.word	0x0800e12d
 800e0e4:	0800e12d 	.word	0x0800e12d
 800e0e8:	0800e12d 	.word	0x0800e12d
 800e0ec:	0800e12d 	.word	0x0800e12d
 800e0f0:	0800e12d 	.word	0x0800e12d
 800e0f4:	0800e12d 	.word	0x0800e12d
 800e0f8:	0800e125 	.word	0x0800e125
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e102:	e222      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e104:	2304      	movs	r3, #4
 800e106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e10a:	e21e      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e10c:	2308      	movs	r3, #8
 800e10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e112:	e21a      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e114:	2310      	movs	r3, #16
 800e116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e11a:	e216      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e11c:	2320      	movs	r3, #32
 800e11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e122:	e212      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e124:	2340      	movs	r3, #64	; 0x40
 800e126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e12a:	e20e      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e12c:	2380      	movs	r3, #128	; 0x80
 800e12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e132:	e20a      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4a69      	ldr	r2, [pc, #420]	; (800e2e0 <UART_SetConfig+0x33c>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d130      	bne.n	800e1a0 <UART_SetConfig+0x1fc>
 800e13e:	4b67      	ldr	r3, [pc, #412]	; (800e2dc <UART_SetConfig+0x338>)
 800e140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e142:	f003 0307 	and.w	r3, r3, #7
 800e146:	2b05      	cmp	r3, #5
 800e148:	d826      	bhi.n	800e198 <UART_SetConfig+0x1f4>
 800e14a:	a201      	add	r2, pc, #4	; (adr r2, 800e150 <UART_SetConfig+0x1ac>)
 800e14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e150:	0800e169 	.word	0x0800e169
 800e154:	0800e171 	.word	0x0800e171
 800e158:	0800e179 	.word	0x0800e179
 800e15c:	0800e181 	.word	0x0800e181
 800e160:	0800e189 	.word	0x0800e189
 800e164:	0800e191 	.word	0x0800e191
 800e168:	2300      	movs	r3, #0
 800e16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e16e:	e1ec      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e170:	2304      	movs	r3, #4
 800e172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e176:	e1e8      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e178:	2308      	movs	r3, #8
 800e17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e17e:	e1e4      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e180:	2310      	movs	r3, #16
 800e182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e186:	e1e0      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e188:	2320      	movs	r3, #32
 800e18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e18e:	e1dc      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e190:	2340      	movs	r3, #64	; 0x40
 800e192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e196:	e1d8      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e198:	2380      	movs	r3, #128	; 0x80
 800e19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e19e:	e1d4      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	4a4f      	ldr	r2, [pc, #316]	; (800e2e4 <UART_SetConfig+0x340>)
 800e1a6:	4293      	cmp	r3, r2
 800e1a8:	d130      	bne.n	800e20c <UART_SetConfig+0x268>
 800e1aa:	4b4c      	ldr	r3, [pc, #304]	; (800e2dc <UART_SetConfig+0x338>)
 800e1ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1ae:	f003 0307 	and.w	r3, r3, #7
 800e1b2:	2b05      	cmp	r3, #5
 800e1b4:	d826      	bhi.n	800e204 <UART_SetConfig+0x260>
 800e1b6:	a201      	add	r2, pc, #4	; (adr r2, 800e1bc <UART_SetConfig+0x218>)
 800e1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1bc:	0800e1d5 	.word	0x0800e1d5
 800e1c0:	0800e1dd 	.word	0x0800e1dd
 800e1c4:	0800e1e5 	.word	0x0800e1e5
 800e1c8:	0800e1ed 	.word	0x0800e1ed
 800e1cc:	0800e1f5 	.word	0x0800e1f5
 800e1d0:	0800e1fd 	.word	0x0800e1fd
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1da:	e1b6      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e1dc:	2304      	movs	r3, #4
 800e1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1e2:	e1b2      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e1e4:	2308      	movs	r3, #8
 800e1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ea:	e1ae      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e1ec:	2310      	movs	r3, #16
 800e1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1f2:	e1aa      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e1f4:	2320      	movs	r3, #32
 800e1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1fa:	e1a6      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e1fc:	2340      	movs	r3, #64	; 0x40
 800e1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e202:	e1a2      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e204:	2380      	movs	r3, #128	; 0x80
 800e206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e20a:	e19e      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	4a35      	ldr	r2, [pc, #212]	; (800e2e8 <UART_SetConfig+0x344>)
 800e212:	4293      	cmp	r3, r2
 800e214:	d130      	bne.n	800e278 <UART_SetConfig+0x2d4>
 800e216:	4b31      	ldr	r3, [pc, #196]	; (800e2dc <UART_SetConfig+0x338>)
 800e218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e21a:	f003 0307 	and.w	r3, r3, #7
 800e21e:	2b05      	cmp	r3, #5
 800e220:	d826      	bhi.n	800e270 <UART_SetConfig+0x2cc>
 800e222:	a201      	add	r2, pc, #4	; (adr r2, 800e228 <UART_SetConfig+0x284>)
 800e224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e228:	0800e241 	.word	0x0800e241
 800e22c:	0800e249 	.word	0x0800e249
 800e230:	0800e251 	.word	0x0800e251
 800e234:	0800e259 	.word	0x0800e259
 800e238:	0800e261 	.word	0x0800e261
 800e23c:	0800e269 	.word	0x0800e269
 800e240:	2300      	movs	r3, #0
 800e242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e246:	e180      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e248:	2304      	movs	r3, #4
 800e24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e24e:	e17c      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e250:	2308      	movs	r3, #8
 800e252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e256:	e178      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e258:	2310      	movs	r3, #16
 800e25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e25e:	e174      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e260:	2320      	movs	r3, #32
 800e262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e266:	e170      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e268:	2340      	movs	r3, #64	; 0x40
 800e26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e26e:	e16c      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e270:	2380      	movs	r3, #128	; 0x80
 800e272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e276:	e168      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	4a1b      	ldr	r2, [pc, #108]	; (800e2ec <UART_SetConfig+0x348>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	d142      	bne.n	800e308 <UART_SetConfig+0x364>
 800e282:	4b16      	ldr	r3, [pc, #88]	; (800e2dc <UART_SetConfig+0x338>)
 800e284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e286:	f003 0307 	and.w	r3, r3, #7
 800e28a:	2b05      	cmp	r3, #5
 800e28c:	d838      	bhi.n	800e300 <UART_SetConfig+0x35c>
 800e28e:	a201      	add	r2, pc, #4	; (adr r2, 800e294 <UART_SetConfig+0x2f0>)
 800e290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e294:	0800e2ad 	.word	0x0800e2ad
 800e298:	0800e2b5 	.word	0x0800e2b5
 800e29c:	0800e2bd 	.word	0x0800e2bd
 800e2a0:	0800e2c5 	.word	0x0800e2c5
 800e2a4:	0800e2f1 	.word	0x0800e2f1
 800e2a8:	0800e2f9 	.word	0x0800e2f9
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2b2:	e14a      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e2b4:	2304      	movs	r3, #4
 800e2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ba:	e146      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e2bc:	2308      	movs	r3, #8
 800e2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2c2:	e142      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e2c4:	2310      	movs	r3, #16
 800e2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ca:	e13e      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e2cc:	cfff69f3 	.word	0xcfff69f3
 800e2d0:	58000c00 	.word	0x58000c00
 800e2d4:	11fff4ff 	.word	0x11fff4ff
 800e2d8:	40011000 	.word	0x40011000
 800e2dc:	58024400 	.word	0x58024400
 800e2e0:	40004400 	.word	0x40004400
 800e2e4:	40004800 	.word	0x40004800
 800e2e8:	40004c00 	.word	0x40004c00
 800e2ec:	40005000 	.word	0x40005000
 800e2f0:	2320      	movs	r3, #32
 800e2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2f6:	e128      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e2f8:	2340      	movs	r3, #64	; 0x40
 800e2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2fe:	e124      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e300:	2380      	movs	r3, #128	; 0x80
 800e302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e306:	e120      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	4acb      	ldr	r2, [pc, #812]	; (800e63c <UART_SetConfig+0x698>)
 800e30e:	4293      	cmp	r3, r2
 800e310:	d176      	bne.n	800e400 <UART_SetConfig+0x45c>
 800e312:	4bcb      	ldr	r3, [pc, #812]	; (800e640 <UART_SetConfig+0x69c>)
 800e314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e316:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e31a:	2b28      	cmp	r3, #40	; 0x28
 800e31c:	d86c      	bhi.n	800e3f8 <UART_SetConfig+0x454>
 800e31e:	a201      	add	r2, pc, #4	; (adr r2, 800e324 <UART_SetConfig+0x380>)
 800e320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e324:	0800e3c9 	.word	0x0800e3c9
 800e328:	0800e3f9 	.word	0x0800e3f9
 800e32c:	0800e3f9 	.word	0x0800e3f9
 800e330:	0800e3f9 	.word	0x0800e3f9
 800e334:	0800e3f9 	.word	0x0800e3f9
 800e338:	0800e3f9 	.word	0x0800e3f9
 800e33c:	0800e3f9 	.word	0x0800e3f9
 800e340:	0800e3f9 	.word	0x0800e3f9
 800e344:	0800e3d1 	.word	0x0800e3d1
 800e348:	0800e3f9 	.word	0x0800e3f9
 800e34c:	0800e3f9 	.word	0x0800e3f9
 800e350:	0800e3f9 	.word	0x0800e3f9
 800e354:	0800e3f9 	.word	0x0800e3f9
 800e358:	0800e3f9 	.word	0x0800e3f9
 800e35c:	0800e3f9 	.word	0x0800e3f9
 800e360:	0800e3f9 	.word	0x0800e3f9
 800e364:	0800e3d9 	.word	0x0800e3d9
 800e368:	0800e3f9 	.word	0x0800e3f9
 800e36c:	0800e3f9 	.word	0x0800e3f9
 800e370:	0800e3f9 	.word	0x0800e3f9
 800e374:	0800e3f9 	.word	0x0800e3f9
 800e378:	0800e3f9 	.word	0x0800e3f9
 800e37c:	0800e3f9 	.word	0x0800e3f9
 800e380:	0800e3f9 	.word	0x0800e3f9
 800e384:	0800e3e1 	.word	0x0800e3e1
 800e388:	0800e3f9 	.word	0x0800e3f9
 800e38c:	0800e3f9 	.word	0x0800e3f9
 800e390:	0800e3f9 	.word	0x0800e3f9
 800e394:	0800e3f9 	.word	0x0800e3f9
 800e398:	0800e3f9 	.word	0x0800e3f9
 800e39c:	0800e3f9 	.word	0x0800e3f9
 800e3a0:	0800e3f9 	.word	0x0800e3f9
 800e3a4:	0800e3e9 	.word	0x0800e3e9
 800e3a8:	0800e3f9 	.word	0x0800e3f9
 800e3ac:	0800e3f9 	.word	0x0800e3f9
 800e3b0:	0800e3f9 	.word	0x0800e3f9
 800e3b4:	0800e3f9 	.word	0x0800e3f9
 800e3b8:	0800e3f9 	.word	0x0800e3f9
 800e3bc:	0800e3f9 	.word	0x0800e3f9
 800e3c0:	0800e3f9 	.word	0x0800e3f9
 800e3c4:	0800e3f1 	.word	0x0800e3f1
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ce:	e0bc      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e3d0:	2304      	movs	r3, #4
 800e3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3d6:	e0b8      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e3d8:	2308      	movs	r3, #8
 800e3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3de:	e0b4      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e3e0:	2310      	movs	r3, #16
 800e3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3e6:	e0b0      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e3e8:	2320      	movs	r3, #32
 800e3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ee:	e0ac      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e3f0:	2340      	movs	r3, #64	; 0x40
 800e3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3f6:	e0a8      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e3f8:	2380      	movs	r3, #128	; 0x80
 800e3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3fe:	e0a4      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e400:	697b      	ldr	r3, [r7, #20]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	4a8f      	ldr	r2, [pc, #572]	; (800e644 <UART_SetConfig+0x6a0>)
 800e406:	4293      	cmp	r3, r2
 800e408:	d130      	bne.n	800e46c <UART_SetConfig+0x4c8>
 800e40a:	4b8d      	ldr	r3, [pc, #564]	; (800e640 <UART_SetConfig+0x69c>)
 800e40c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e40e:	f003 0307 	and.w	r3, r3, #7
 800e412:	2b05      	cmp	r3, #5
 800e414:	d826      	bhi.n	800e464 <UART_SetConfig+0x4c0>
 800e416:	a201      	add	r2, pc, #4	; (adr r2, 800e41c <UART_SetConfig+0x478>)
 800e418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e41c:	0800e435 	.word	0x0800e435
 800e420:	0800e43d 	.word	0x0800e43d
 800e424:	0800e445 	.word	0x0800e445
 800e428:	0800e44d 	.word	0x0800e44d
 800e42c:	0800e455 	.word	0x0800e455
 800e430:	0800e45d 	.word	0x0800e45d
 800e434:	2300      	movs	r3, #0
 800e436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e43a:	e086      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e43c:	2304      	movs	r3, #4
 800e43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e442:	e082      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e444:	2308      	movs	r3, #8
 800e446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e44a:	e07e      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e44c:	2310      	movs	r3, #16
 800e44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e452:	e07a      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e454:	2320      	movs	r3, #32
 800e456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e45a:	e076      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e45c:	2340      	movs	r3, #64	; 0x40
 800e45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e462:	e072      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e464:	2380      	movs	r3, #128	; 0x80
 800e466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e46a:	e06e      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e46c:	697b      	ldr	r3, [r7, #20]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	4a75      	ldr	r2, [pc, #468]	; (800e648 <UART_SetConfig+0x6a4>)
 800e472:	4293      	cmp	r3, r2
 800e474:	d130      	bne.n	800e4d8 <UART_SetConfig+0x534>
 800e476:	4b72      	ldr	r3, [pc, #456]	; (800e640 <UART_SetConfig+0x69c>)
 800e478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e47a:	f003 0307 	and.w	r3, r3, #7
 800e47e:	2b05      	cmp	r3, #5
 800e480:	d826      	bhi.n	800e4d0 <UART_SetConfig+0x52c>
 800e482:	a201      	add	r2, pc, #4	; (adr r2, 800e488 <UART_SetConfig+0x4e4>)
 800e484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e488:	0800e4a1 	.word	0x0800e4a1
 800e48c:	0800e4a9 	.word	0x0800e4a9
 800e490:	0800e4b1 	.word	0x0800e4b1
 800e494:	0800e4b9 	.word	0x0800e4b9
 800e498:	0800e4c1 	.word	0x0800e4c1
 800e49c:	0800e4c9 	.word	0x0800e4c9
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4a6:	e050      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e4a8:	2304      	movs	r3, #4
 800e4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ae:	e04c      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e4b0:	2308      	movs	r3, #8
 800e4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4b6:	e048      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e4b8:	2310      	movs	r3, #16
 800e4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4be:	e044      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e4c0:	2320      	movs	r3, #32
 800e4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4c6:	e040      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e4c8:	2340      	movs	r3, #64	; 0x40
 800e4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ce:	e03c      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e4d0:	2380      	movs	r3, #128	; 0x80
 800e4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4d6:	e038      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	4a5b      	ldr	r2, [pc, #364]	; (800e64c <UART_SetConfig+0x6a8>)
 800e4de:	4293      	cmp	r3, r2
 800e4e0:	d130      	bne.n	800e544 <UART_SetConfig+0x5a0>
 800e4e2:	4b57      	ldr	r3, [pc, #348]	; (800e640 <UART_SetConfig+0x69c>)
 800e4e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4e6:	f003 0307 	and.w	r3, r3, #7
 800e4ea:	2b05      	cmp	r3, #5
 800e4ec:	d826      	bhi.n	800e53c <UART_SetConfig+0x598>
 800e4ee:	a201      	add	r2, pc, #4	; (adr r2, 800e4f4 <UART_SetConfig+0x550>)
 800e4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4f4:	0800e50d 	.word	0x0800e50d
 800e4f8:	0800e515 	.word	0x0800e515
 800e4fc:	0800e51d 	.word	0x0800e51d
 800e500:	0800e525 	.word	0x0800e525
 800e504:	0800e52d 	.word	0x0800e52d
 800e508:	0800e535 	.word	0x0800e535
 800e50c:	2302      	movs	r3, #2
 800e50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e512:	e01a      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e514:	2304      	movs	r3, #4
 800e516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e51a:	e016      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e51c:	2308      	movs	r3, #8
 800e51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e522:	e012      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e524:	2310      	movs	r3, #16
 800e526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e52a:	e00e      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e52c:	2320      	movs	r3, #32
 800e52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e532:	e00a      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e534:	2340      	movs	r3, #64	; 0x40
 800e536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e53a:	e006      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e53c:	2380      	movs	r3, #128	; 0x80
 800e53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e542:	e002      	b.n	800e54a <UART_SetConfig+0x5a6>
 800e544:	2380      	movs	r3, #128	; 0x80
 800e546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	4a3f      	ldr	r2, [pc, #252]	; (800e64c <UART_SetConfig+0x6a8>)
 800e550:	4293      	cmp	r3, r2
 800e552:	f040 80f8 	bne.w	800e746 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e556:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e55a:	2b20      	cmp	r3, #32
 800e55c:	dc46      	bgt.n	800e5ec <UART_SetConfig+0x648>
 800e55e:	2b02      	cmp	r3, #2
 800e560:	f2c0 8082 	blt.w	800e668 <UART_SetConfig+0x6c4>
 800e564:	3b02      	subs	r3, #2
 800e566:	2b1e      	cmp	r3, #30
 800e568:	d87e      	bhi.n	800e668 <UART_SetConfig+0x6c4>
 800e56a:	a201      	add	r2, pc, #4	; (adr r2, 800e570 <UART_SetConfig+0x5cc>)
 800e56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e570:	0800e5f3 	.word	0x0800e5f3
 800e574:	0800e669 	.word	0x0800e669
 800e578:	0800e5fb 	.word	0x0800e5fb
 800e57c:	0800e669 	.word	0x0800e669
 800e580:	0800e669 	.word	0x0800e669
 800e584:	0800e669 	.word	0x0800e669
 800e588:	0800e60b 	.word	0x0800e60b
 800e58c:	0800e669 	.word	0x0800e669
 800e590:	0800e669 	.word	0x0800e669
 800e594:	0800e669 	.word	0x0800e669
 800e598:	0800e669 	.word	0x0800e669
 800e59c:	0800e669 	.word	0x0800e669
 800e5a0:	0800e669 	.word	0x0800e669
 800e5a4:	0800e669 	.word	0x0800e669
 800e5a8:	0800e61b 	.word	0x0800e61b
 800e5ac:	0800e669 	.word	0x0800e669
 800e5b0:	0800e669 	.word	0x0800e669
 800e5b4:	0800e669 	.word	0x0800e669
 800e5b8:	0800e669 	.word	0x0800e669
 800e5bc:	0800e669 	.word	0x0800e669
 800e5c0:	0800e669 	.word	0x0800e669
 800e5c4:	0800e669 	.word	0x0800e669
 800e5c8:	0800e669 	.word	0x0800e669
 800e5cc:	0800e669 	.word	0x0800e669
 800e5d0:	0800e669 	.word	0x0800e669
 800e5d4:	0800e669 	.word	0x0800e669
 800e5d8:	0800e669 	.word	0x0800e669
 800e5dc:	0800e669 	.word	0x0800e669
 800e5e0:	0800e669 	.word	0x0800e669
 800e5e4:	0800e669 	.word	0x0800e669
 800e5e8:	0800e65b 	.word	0x0800e65b
 800e5ec:	2b40      	cmp	r3, #64	; 0x40
 800e5ee:	d037      	beq.n	800e660 <UART_SetConfig+0x6bc>
 800e5f0:	e03a      	b.n	800e668 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e5f2:	f7fc fbe9 	bl	800adc8 <HAL_RCCEx_GetD3PCLK1Freq>
 800e5f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e5f8:	e03c      	b.n	800e674 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e5fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e5fe:	4618      	mov	r0, r3
 800e600:	f7fc fbf8 	bl	800adf4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e608:	e034      	b.n	800e674 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e60a:	f107 0318 	add.w	r3, r7, #24
 800e60e:	4618      	mov	r0, r3
 800e610:	f7fc fd44 	bl	800b09c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e614:	69fb      	ldr	r3, [r7, #28]
 800e616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e618:	e02c      	b.n	800e674 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e61a:	4b09      	ldr	r3, [pc, #36]	; (800e640 <UART_SetConfig+0x69c>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f003 0320 	and.w	r3, r3, #32
 800e622:	2b00      	cmp	r3, #0
 800e624:	d016      	beq.n	800e654 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e626:	4b06      	ldr	r3, [pc, #24]	; (800e640 <UART_SetConfig+0x69c>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	08db      	lsrs	r3, r3, #3
 800e62c:	f003 0303 	and.w	r3, r3, #3
 800e630:	4a07      	ldr	r2, [pc, #28]	; (800e650 <UART_SetConfig+0x6ac>)
 800e632:	fa22 f303 	lsr.w	r3, r2, r3
 800e636:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e638:	e01c      	b.n	800e674 <UART_SetConfig+0x6d0>
 800e63a:	bf00      	nop
 800e63c:	40011400 	.word	0x40011400
 800e640:	58024400 	.word	0x58024400
 800e644:	40007800 	.word	0x40007800
 800e648:	40007c00 	.word	0x40007c00
 800e64c:	58000c00 	.word	0x58000c00
 800e650:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e654:	4b9d      	ldr	r3, [pc, #628]	; (800e8cc <UART_SetConfig+0x928>)
 800e656:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e658:	e00c      	b.n	800e674 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e65a:	4b9d      	ldr	r3, [pc, #628]	; (800e8d0 <UART_SetConfig+0x92c>)
 800e65c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e65e:	e009      	b.n	800e674 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e660:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e664:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e666:	e005      	b.n	800e674 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e668:	2300      	movs	r3, #0
 800e66a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e66c:	2301      	movs	r3, #1
 800e66e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e672:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e676:	2b00      	cmp	r3, #0
 800e678:	f000 81de 	beq.w	800ea38 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e680:	4a94      	ldr	r2, [pc, #592]	; (800e8d4 <UART_SetConfig+0x930>)
 800e682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e686:	461a      	mov	r2, r3
 800e688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e68a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e68e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	685a      	ldr	r2, [r3, #4]
 800e694:	4613      	mov	r3, r2
 800e696:	005b      	lsls	r3, r3, #1
 800e698:	4413      	add	r3, r2
 800e69a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d305      	bcc.n	800e6ac <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	685b      	ldr	r3, [r3, #4]
 800e6a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e6a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d903      	bls.n	800e6b4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e6b2:	e1c1      	b.n	800ea38 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e6b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	60bb      	str	r3, [r7, #8]
 800e6ba:	60fa      	str	r2, [r7, #12]
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6c0:	4a84      	ldr	r2, [pc, #528]	; (800e8d4 <UART_SetConfig+0x930>)
 800e6c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e6c6:	b29b      	uxth	r3, r3
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	603b      	str	r3, [r7, #0]
 800e6cc:	607a      	str	r2, [r7, #4]
 800e6ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e6d6:	f7f1 fdff 	bl	80002d8 <__aeabi_uldivmod>
 800e6da:	4602      	mov	r2, r0
 800e6dc:	460b      	mov	r3, r1
 800e6de:	4610      	mov	r0, r2
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	f04f 0200 	mov.w	r2, #0
 800e6e6:	f04f 0300 	mov.w	r3, #0
 800e6ea:	020b      	lsls	r3, r1, #8
 800e6ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e6f0:	0202      	lsls	r2, r0, #8
 800e6f2:	6979      	ldr	r1, [r7, #20]
 800e6f4:	6849      	ldr	r1, [r1, #4]
 800e6f6:	0849      	lsrs	r1, r1, #1
 800e6f8:	2000      	movs	r0, #0
 800e6fa:	460c      	mov	r4, r1
 800e6fc:	4605      	mov	r5, r0
 800e6fe:	eb12 0804 	adds.w	r8, r2, r4
 800e702:	eb43 0905 	adc.w	r9, r3, r5
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	685b      	ldr	r3, [r3, #4]
 800e70a:	2200      	movs	r2, #0
 800e70c:	469a      	mov	sl, r3
 800e70e:	4693      	mov	fp, r2
 800e710:	4652      	mov	r2, sl
 800e712:	465b      	mov	r3, fp
 800e714:	4640      	mov	r0, r8
 800e716:	4649      	mov	r1, r9
 800e718:	f7f1 fdde 	bl	80002d8 <__aeabi_uldivmod>
 800e71c:	4602      	mov	r2, r0
 800e71e:	460b      	mov	r3, r1
 800e720:	4613      	mov	r3, r2
 800e722:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e726:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e72a:	d308      	bcc.n	800e73e <UART_SetConfig+0x79a>
 800e72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e72e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e732:	d204      	bcs.n	800e73e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e73a:	60da      	str	r2, [r3, #12]
 800e73c:	e17c      	b.n	800ea38 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e73e:	2301      	movs	r3, #1
 800e740:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e744:	e178      	b.n	800ea38 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	69db      	ldr	r3, [r3, #28]
 800e74a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e74e:	f040 80c5 	bne.w	800e8dc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e752:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e756:	2b20      	cmp	r3, #32
 800e758:	dc48      	bgt.n	800e7ec <UART_SetConfig+0x848>
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	db7b      	blt.n	800e856 <UART_SetConfig+0x8b2>
 800e75e:	2b20      	cmp	r3, #32
 800e760:	d879      	bhi.n	800e856 <UART_SetConfig+0x8b2>
 800e762:	a201      	add	r2, pc, #4	; (adr r2, 800e768 <UART_SetConfig+0x7c4>)
 800e764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e768:	0800e7f3 	.word	0x0800e7f3
 800e76c:	0800e7fb 	.word	0x0800e7fb
 800e770:	0800e857 	.word	0x0800e857
 800e774:	0800e857 	.word	0x0800e857
 800e778:	0800e803 	.word	0x0800e803
 800e77c:	0800e857 	.word	0x0800e857
 800e780:	0800e857 	.word	0x0800e857
 800e784:	0800e857 	.word	0x0800e857
 800e788:	0800e813 	.word	0x0800e813
 800e78c:	0800e857 	.word	0x0800e857
 800e790:	0800e857 	.word	0x0800e857
 800e794:	0800e857 	.word	0x0800e857
 800e798:	0800e857 	.word	0x0800e857
 800e79c:	0800e857 	.word	0x0800e857
 800e7a0:	0800e857 	.word	0x0800e857
 800e7a4:	0800e857 	.word	0x0800e857
 800e7a8:	0800e823 	.word	0x0800e823
 800e7ac:	0800e857 	.word	0x0800e857
 800e7b0:	0800e857 	.word	0x0800e857
 800e7b4:	0800e857 	.word	0x0800e857
 800e7b8:	0800e857 	.word	0x0800e857
 800e7bc:	0800e857 	.word	0x0800e857
 800e7c0:	0800e857 	.word	0x0800e857
 800e7c4:	0800e857 	.word	0x0800e857
 800e7c8:	0800e857 	.word	0x0800e857
 800e7cc:	0800e857 	.word	0x0800e857
 800e7d0:	0800e857 	.word	0x0800e857
 800e7d4:	0800e857 	.word	0x0800e857
 800e7d8:	0800e857 	.word	0x0800e857
 800e7dc:	0800e857 	.word	0x0800e857
 800e7e0:	0800e857 	.word	0x0800e857
 800e7e4:	0800e857 	.word	0x0800e857
 800e7e8:	0800e849 	.word	0x0800e849
 800e7ec:	2b40      	cmp	r3, #64	; 0x40
 800e7ee:	d02e      	beq.n	800e84e <UART_SetConfig+0x8aa>
 800e7f0:	e031      	b.n	800e856 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e7f2:	f7fa fea5 	bl	8009540 <HAL_RCC_GetPCLK1Freq>
 800e7f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e7f8:	e033      	b.n	800e862 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e7fa:	f7fa feb7 	bl	800956c <HAL_RCC_GetPCLK2Freq>
 800e7fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e800:	e02f      	b.n	800e862 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e806:	4618      	mov	r0, r3
 800e808:	f7fc faf4 	bl	800adf4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e80e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e810:	e027      	b.n	800e862 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e812:	f107 0318 	add.w	r3, r7, #24
 800e816:	4618      	mov	r0, r3
 800e818:	f7fc fc40 	bl	800b09c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e81c:	69fb      	ldr	r3, [r7, #28]
 800e81e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e820:	e01f      	b.n	800e862 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e822:	4b2d      	ldr	r3, [pc, #180]	; (800e8d8 <UART_SetConfig+0x934>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	f003 0320 	and.w	r3, r3, #32
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d009      	beq.n	800e842 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e82e:	4b2a      	ldr	r3, [pc, #168]	; (800e8d8 <UART_SetConfig+0x934>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	08db      	lsrs	r3, r3, #3
 800e834:	f003 0303 	and.w	r3, r3, #3
 800e838:	4a24      	ldr	r2, [pc, #144]	; (800e8cc <UART_SetConfig+0x928>)
 800e83a:	fa22 f303 	lsr.w	r3, r2, r3
 800e83e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e840:	e00f      	b.n	800e862 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e842:	4b22      	ldr	r3, [pc, #136]	; (800e8cc <UART_SetConfig+0x928>)
 800e844:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e846:	e00c      	b.n	800e862 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e848:	4b21      	ldr	r3, [pc, #132]	; (800e8d0 <UART_SetConfig+0x92c>)
 800e84a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e84c:	e009      	b.n	800e862 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e84e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e854:	e005      	b.n	800e862 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e856:	2300      	movs	r3, #0
 800e858:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e85a:	2301      	movs	r3, #1
 800e85c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e860:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e864:	2b00      	cmp	r3, #0
 800e866:	f000 80e7 	beq.w	800ea38 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e86a:	697b      	ldr	r3, [r7, #20]
 800e86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e86e:	4a19      	ldr	r2, [pc, #100]	; (800e8d4 <UART_SetConfig+0x930>)
 800e870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e874:	461a      	mov	r2, r3
 800e876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e878:	fbb3 f3f2 	udiv	r3, r3, r2
 800e87c:	005a      	lsls	r2, r3, #1
 800e87e:	697b      	ldr	r3, [r7, #20]
 800e880:	685b      	ldr	r3, [r3, #4]
 800e882:	085b      	lsrs	r3, r3, #1
 800e884:	441a      	add	r2, r3
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	685b      	ldr	r3, [r3, #4]
 800e88a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e88e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e892:	2b0f      	cmp	r3, #15
 800e894:	d916      	bls.n	800e8c4 <UART_SetConfig+0x920>
 800e896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e89c:	d212      	bcs.n	800e8c4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a0:	b29b      	uxth	r3, r3
 800e8a2:	f023 030f 	bic.w	r3, r3, #15
 800e8a6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8aa:	085b      	lsrs	r3, r3, #1
 800e8ac:	b29b      	uxth	r3, r3
 800e8ae:	f003 0307 	and.w	r3, r3, #7
 800e8b2:	b29a      	uxth	r2, r3
 800e8b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e8b6:	4313      	orrs	r3, r2
 800e8b8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e8c0:	60da      	str	r2, [r3, #12]
 800e8c2:	e0b9      	b.n	800ea38 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e8c4:	2301      	movs	r3, #1
 800e8c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e8ca:	e0b5      	b.n	800ea38 <UART_SetConfig+0xa94>
 800e8cc:	03d09000 	.word	0x03d09000
 800e8d0:	003d0900 	.word	0x003d0900
 800e8d4:	0800fe80 	.word	0x0800fe80
 800e8d8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e8dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e8e0:	2b20      	cmp	r3, #32
 800e8e2:	dc49      	bgt.n	800e978 <UART_SetConfig+0x9d4>
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	db7c      	blt.n	800e9e2 <UART_SetConfig+0xa3e>
 800e8e8:	2b20      	cmp	r3, #32
 800e8ea:	d87a      	bhi.n	800e9e2 <UART_SetConfig+0xa3e>
 800e8ec:	a201      	add	r2, pc, #4	; (adr r2, 800e8f4 <UART_SetConfig+0x950>)
 800e8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8f2:	bf00      	nop
 800e8f4:	0800e97f 	.word	0x0800e97f
 800e8f8:	0800e987 	.word	0x0800e987
 800e8fc:	0800e9e3 	.word	0x0800e9e3
 800e900:	0800e9e3 	.word	0x0800e9e3
 800e904:	0800e98f 	.word	0x0800e98f
 800e908:	0800e9e3 	.word	0x0800e9e3
 800e90c:	0800e9e3 	.word	0x0800e9e3
 800e910:	0800e9e3 	.word	0x0800e9e3
 800e914:	0800e99f 	.word	0x0800e99f
 800e918:	0800e9e3 	.word	0x0800e9e3
 800e91c:	0800e9e3 	.word	0x0800e9e3
 800e920:	0800e9e3 	.word	0x0800e9e3
 800e924:	0800e9e3 	.word	0x0800e9e3
 800e928:	0800e9e3 	.word	0x0800e9e3
 800e92c:	0800e9e3 	.word	0x0800e9e3
 800e930:	0800e9e3 	.word	0x0800e9e3
 800e934:	0800e9af 	.word	0x0800e9af
 800e938:	0800e9e3 	.word	0x0800e9e3
 800e93c:	0800e9e3 	.word	0x0800e9e3
 800e940:	0800e9e3 	.word	0x0800e9e3
 800e944:	0800e9e3 	.word	0x0800e9e3
 800e948:	0800e9e3 	.word	0x0800e9e3
 800e94c:	0800e9e3 	.word	0x0800e9e3
 800e950:	0800e9e3 	.word	0x0800e9e3
 800e954:	0800e9e3 	.word	0x0800e9e3
 800e958:	0800e9e3 	.word	0x0800e9e3
 800e95c:	0800e9e3 	.word	0x0800e9e3
 800e960:	0800e9e3 	.word	0x0800e9e3
 800e964:	0800e9e3 	.word	0x0800e9e3
 800e968:	0800e9e3 	.word	0x0800e9e3
 800e96c:	0800e9e3 	.word	0x0800e9e3
 800e970:	0800e9e3 	.word	0x0800e9e3
 800e974:	0800e9d5 	.word	0x0800e9d5
 800e978:	2b40      	cmp	r3, #64	; 0x40
 800e97a:	d02e      	beq.n	800e9da <UART_SetConfig+0xa36>
 800e97c:	e031      	b.n	800e9e2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e97e:	f7fa fddf 	bl	8009540 <HAL_RCC_GetPCLK1Freq>
 800e982:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e984:	e033      	b.n	800e9ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e986:	f7fa fdf1 	bl	800956c <HAL_RCC_GetPCLK2Freq>
 800e98a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e98c:	e02f      	b.n	800e9ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e98e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e992:	4618      	mov	r0, r3
 800e994:	f7fc fa2e 	bl	800adf4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e99a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e99c:	e027      	b.n	800e9ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e99e:	f107 0318 	add.w	r3, r7, #24
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f7fc fb7a 	bl	800b09c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e9a8:	69fb      	ldr	r3, [r7, #28]
 800e9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9ac:	e01f      	b.n	800e9ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e9ae:	4b2d      	ldr	r3, [pc, #180]	; (800ea64 <UART_SetConfig+0xac0>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f003 0320 	and.w	r3, r3, #32
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d009      	beq.n	800e9ce <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e9ba:	4b2a      	ldr	r3, [pc, #168]	; (800ea64 <UART_SetConfig+0xac0>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	08db      	lsrs	r3, r3, #3
 800e9c0:	f003 0303 	and.w	r3, r3, #3
 800e9c4:	4a28      	ldr	r2, [pc, #160]	; (800ea68 <UART_SetConfig+0xac4>)
 800e9c6:	fa22 f303 	lsr.w	r3, r2, r3
 800e9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e9cc:	e00f      	b.n	800e9ee <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e9ce:	4b26      	ldr	r3, [pc, #152]	; (800ea68 <UART_SetConfig+0xac4>)
 800e9d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9d2:	e00c      	b.n	800e9ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e9d4:	4b25      	ldr	r3, [pc, #148]	; (800ea6c <UART_SetConfig+0xac8>)
 800e9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9d8:	e009      	b.n	800e9ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e9da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e9de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9e0:	e005      	b.n	800e9ee <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e9ec:	bf00      	nop
    }

    if (pclk != 0U)
 800e9ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d021      	beq.n	800ea38 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f8:	4a1d      	ldr	r2, [pc, #116]	; (800ea70 <UART_SetConfig+0xacc>)
 800e9fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e9fe:	461a      	mov	r2, r3
 800ea00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea02:	fbb3 f2f2 	udiv	r2, r3, r2
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	685b      	ldr	r3, [r3, #4]
 800ea0a:	085b      	lsrs	r3, r3, #1
 800ea0c:	441a      	add	r2, r3
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	685b      	ldr	r3, [r3, #4]
 800ea12:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea16:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ea18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea1a:	2b0f      	cmp	r3, #15
 800ea1c:	d909      	bls.n	800ea32 <UART_SetConfig+0xa8e>
 800ea1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea24:	d205      	bcs.n	800ea32 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ea26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea28:	b29a      	uxth	r2, r3
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	60da      	str	r2, [r3, #12]
 800ea30:	e002      	b.n	800ea38 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ea32:	2301      	movs	r3, #1
 800ea34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	2201      	movs	r2, #1
 800ea3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	2201      	movs	r2, #1
 800ea44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	2200      	movs	r2, #0
 800ea52:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ea54:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3748      	adds	r7, #72	; 0x48
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ea62:	bf00      	nop
 800ea64:	58024400 	.word	0x58024400
 800ea68:	03d09000 	.word	0x03d09000
 800ea6c:	003d0900 	.word	0x003d0900
 800ea70:	0800fe80 	.word	0x0800fe80

0800ea74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ea74:	b480      	push	{r7}
 800ea76:	b083      	sub	sp, #12
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea80:	f003 0301 	and.w	r3, r3, #1
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d00a      	beq.n	800ea9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	685b      	ldr	r3, [r3, #4]
 800ea8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	430a      	orrs	r2, r1
 800ea9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaa2:	f003 0302 	and.w	r3, r3, #2
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d00a      	beq.n	800eac0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	685b      	ldr	r3, [r3, #4]
 800eab0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	430a      	orrs	r2, r1
 800eabe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eac4:	f003 0304 	and.w	r3, r3, #4
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d00a      	beq.n	800eae2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	430a      	orrs	r2, r1
 800eae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eae6:	f003 0308 	and.w	r3, r3, #8
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d00a      	beq.n	800eb04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	685b      	ldr	r3, [r3, #4]
 800eaf4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	430a      	orrs	r2, r1
 800eb02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb08:	f003 0310 	and.w	r3, r3, #16
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d00a      	beq.n	800eb26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	689b      	ldr	r3, [r3, #8]
 800eb16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	430a      	orrs	r2, r1
 800eb24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb2a:	f003 0320 	and.w	r3, r3, #32
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d00a      	beq.n	800eb48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	689b      	ldr	r3, [r3, #8]
 800eb38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	430a      	orrs	r2, r1
 800eb46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d01a      	beq.n	800eb8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	685b      	ldr	r3, [r3, #4]
 800eb5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	430a      	orrs	r2, r1
 800eb68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb72:	d10a      	bne.n	800eb8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	685b      	ldr	r3, [r3, #4]
 800eb7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	430a      	orrs	r2, r1
 800eb88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d00a      	beq.n	800ebac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	685b      	ldr	r3, [r3, #4]
 800eb9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	430a      	orrs	r2, r1
 800ebaa:	605a      	str	r2, [r3, #4]
  }
}
 800ebac:	bf00      	nop
 800ebae:	370c      	adds	r7, #12
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb6:	4770      	bx	lr

0800ebb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b086      	sub	sp, #24
 800ebbc:	af02      	add	r7, sp, #8
 800ebbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ebc8:	f7f3 feb0 	bl	800292c <HAL_GetTick>
 800ebcc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	f003 0308 	and.w	r3, r3, #8
 800ebd8:	2b08      	cmp	r3, #8
 800ebda:	d10e      	bne.n	800ebfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ebdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ebe0:	9300      	str	r3, [sp, #0]
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f000 f82f 	bl	800ec4e <UART_WaitOnFlagUntilTimeout>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d001      	beq.n	800ebfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ebf6:	2303      	movs	r3, #3
 800ebf8:	e025      	b.n	800ec46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	f003 0304 	and.w	r3, r3, #4
 800ec04:	2b04      	cmp	r3, #4
 800ec06:	d10e      	bne.n	800ec26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ec08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ec0c:	9300      	str	r3, [sp, #0]
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	2200      	movs	r2, #0
 800ec12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ec16:	6878      	ldr	r0, [r7, #4]
 800ec18:	f000 f819 	bl	800ec4e <UART_WaitOnFlagUntilTimeout>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d001      	beq.n	800ec26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ec22:	2303      	movs	r3, #3
 800ec24:	e00f      	b.n	800ec46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2220      	movs	r2, #32
 800ec2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2220      	movs	r2, #32
 800ec32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ec44:	2300      	movs	r3, #0
}
 800ec46:	4618      	mov	r0, r3
 800ec48:	3710      	adds	r7, #16
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}

0800ec4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ec4e:	b580      	push	{r7, lr}
 800ec50:	b09c      	sub	sp, #112	; 0x70
 800ec52:	af00      	add	r7, sp, #0
 800ec54:	60f8      	str	r0, [r7, #12]
 800ec56:	60b9      	str	r1, [r7, #8]
 800ec58:	603b      	str	r3, [r7, #0]
 800ec5a:	4613      	mov	r3, r2
 800ec5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ec5e:	e0a9      	b.n	800edb4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ec60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ec62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec66:	f000 80a5 	beq.w	800edb4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ec6a:	f7f3 fe5f 	bl	800292c <HAL_GetTick>
 800ec6e:	4602      	mov	r2, r0
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	1ad3      	subs	r3, r2, r3
 800ec74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d302      	bcc.n	800ec80 <UART_WaitOnFlagUntilTimeout+0x32>
 800ec7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d140      	bne.n	800ed02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec88:	e853 3f00 	ldrex	r3, [r3]
 800ec8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ec8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ec94:	667b      	str	r3, [r7, #100]	; 0x64
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	461a      	mov	r2, r3
 800ec9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eca0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eca2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eca4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800eca6:	e841 2300 	strex	r3, r2, [r1]
 800ecaa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ecac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d1e6      	bne.n	800ec80 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	3308      	adds	r3, #8
 800ecb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecbc:	e853 3f00 	ldrex	r3, [r3]
 800ecc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ecc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecc4:	f023 0301 	bic.w	r3, r3, #1
 800ecc8:	663b      	str	r3, [r7, #96]	; 0x60
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	3308      	adds	r3, #8
 800ecd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ecd2:	64ba      	str	r2, [r7, #72]	; 0x48
 800ecd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ecd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ecda:	e841 2300 	strex	r3, r2, [r1]
 800ecde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ece0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d1e5      	bne.n	800ecb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	2220      	movs	r2, #32
 800ecea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	2220      	movs	r2, #32
 800ecf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ecfe:	2303      	movs	r3, #3
 800ed00:	e069      	b.n	800edd6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	f003 0304 	and.w	r3, r3, #4
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d051      	beq.n	800edb4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	69db      	ldr	r3, [r3, #28]
 800ed16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ed1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed1e:	d149      	bne.n	800edb4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ed28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed32:	e853 3f00 	ldrex	r3, [r3]
 800ed36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ed38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ed3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	461a      	mov	r2, r3
 800ed46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed48:	637b      	str	r3, [r7, #52]	; 0x34
 800ed4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ed4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed50:	e841 2300 	strex	r3, r2, [r1]
 800ed54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ed56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d1e6      	bne.n	800ed2a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	3308      	adds	r3, #8
 800ed62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	e853 3f00 	ldrex	r3, [r3]
 800ed6a:	613b      	str	r3, [r7, #16]
   return(result);
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	f023 0301 	bic.w	r3, r3, #1
 800ed72:	66bb      	str	r3, [r7, #104]	; 0x68
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	3308      	adds	r3, #8
 800ed7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ed7c:	623a      	str	r2, [r7, #32]
 800ed7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed80:	69f9      	ldr	r1, [r7, #28]
 800ed82:	6a3a      	ldr	r2, [r7, #32]
 800ed84:	e841 2300 	strex	r3, r2, [r1]
 800ed88:	61bb      	str	r3, [r7, #24]
   return(result);
 800ed8a:	69bb      	ldr	r3, [r7, #24]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d1e5      	bne.n	800ed5c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	2220      	movs	r2, #32
 800ed94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2220      	movs	r2, #32
 800ed9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	2220      	movs	r2, #32
 800eda4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	2200      	movs	r2, #0
 800edac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800edb0:	2303      	movs	r3, #3
 800edb2:	e010      	b.n	800edd6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	69da      	ldr	r2, [r3, #28]
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	4013      	ands	r3, r2
 800edbe:	68ba      	ldr	r2, [r7, #8]
 800edc0:	429a      	cmp	r2, r3
 800edc2:	bf0c      	ite	eq
 800edc4:	2301      	moveq	r3, #1
 800edc6:	2300      	movne	r3, #0
 800edc8:	b2db      	uxtb	r3, r3
 800edca:	461a      	mov	r2, r3
 800edcc:	79fb      	ldrb	r3, [r7, #7]
 800edce:	429a      	cmp	r2, r3
 800edd0:	f43f af46 	beq.w	800ec60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800edd4:	2300      	movs	r3, #0
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3770      	adds	r7, #112	; 0x70
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}
	...

0800ede0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b0a3      	sub	sp, #140	; 0x8c
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	60f8      	str	r0, [r7, #12]
 800ede8:	60b9      	str	r1, [r7, #8]
 800edea:	4613      	mov	r3, r2
 800edec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	68ba      	ldr	r2, [r7, #8]
 800edf2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	88fa      	ldrh	r2, [r7, #6]
 800edf8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	88fa      	ldrh	r2, [r7, #6]
 800ee00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	2200      	movs	r2, #0
 800ee08:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	689b      	ldr	r3, [r3, #8]
 800ee0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee12:	d10e      	bne.n	800ee32 <UART_Start_Receive_IT+0x52>
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	691b      	ldr	r3, [r3, #16]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d105      	bne.n	800ee28 <UART_Start_Receive_IT+0x48>
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ee22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ee26:	e02d      	b.n	800ee84 <UART_Start_Receive_IT+0xa4>
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	22ff      	movs	r2, #255	; 0xff
 800ee2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ee30:	e028      	b.n	800ee84 <UART_Start_Receive_IT+0xa4>
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	689b      	ldr	r3, [r3, #8]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d10d      	bne.n	800ee56 <UART_Start_Receive_IT+0x76>
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	691b      	ldr	r3, [r3, #16]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d104      	bne.n	800ee4c <UART_Start_Receive_IT+0x6c>
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	22ff      	movs	r2, #255	; 0xff
 800ee46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ee4a:	e01b      	b.n	800ee84 <UART_Start_Receive_IT+0xa4>
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	227f      	movs	r2, #127	; 0x7f
 800ee50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ee54:	e016      	b.n	800ee84 <UART_Start_Receive_IT+0xa4>
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	689b      	ldr	r3, [r3, #8]
 800ee5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ee5e:	d10d      	bne.n	800ee7c <UART_Start_Receive_IT+0x9c>
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	691b      	ldr	r3, [r3, #16]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d104      	bne.n	800ee72 <UART_Start_Receive_IT+0x92>
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	227f      	movs	r2, #127	; 0x7f
 800ee6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ee70:	e008      	b.n	800ee84 <UART_Start_Receive_IT+0xa4>
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	223f      	movs	r2, #63	; 0x3f
 800ee76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ee7a:	e003      	b.n	800ee84 <UART_Start_Receive_IT+0xa4>
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	2200      	movs	r2, #0
 800ee88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	2222      	movs	r2, #34	; 0x22
 800ee90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	3308      	adds	r3, #8
 800ee9a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee9e:	e853 3f00 	ldrex	r3, [r3]
 800eea2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800eea4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eea6:	f043 0301 	orr.w	r3, r3, #1
 800eeaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	3308      	adds	r3, #8
 800eeb4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800eeb8:	673a      	str	r2, [r7, #112]	; 0x70
 800eeba:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eebc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800eebe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800eec0:	e841 2300 	strex	r3, r2, [r1]
 800eec4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800eec6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d1e3      	bne.n	800ee94 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eed4:	d153      	bne.n	800ef7e <UART_Start_Receive_IT+0x19e>
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800eedc:	88fa      	ldrh	r2, [r7, #6]
 800eede:	429a      	cmp	r2, r3
 800eee0:	d34d      	bcc.n	800ef7e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	689b      	ldr	r3, [r3, #8]
 800eee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eeea:	d107      	bne.n	800eefc <UART_Start_Receive_IT+0x11c>
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	691b      	ldr	r3, [r3, #16]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d103      	bne.n	800eefc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	4a4b      	ldr	r2, [pc, #300]	; (800f024 <UART_Start_Receive_IT+0x244>)
 800eef8:	671a      	str	r2, [r3, #112]	; 0x70
 800eefa:	e002      	b.n	800ef02 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	4a4a      	ldr	r2, [pc, #296]	; (800f028 <UART_Start_Receive_IT+0x248>)
 800ef00:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	2200      	movs	r2, #0
 800ef06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	691b      	ldr	r3, [r3, #16]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d01a      	beq.n	800ef48 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef1a:	e853 3f00 	ldrex	r3, [r3]
 800ef1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ef20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ef26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	461a      	mov	r2, r3
 800ef30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ef34:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ef36:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef38:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ef3a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ef3c:	e841 2300 	strex	r3, r2, [r1]
 800ef40:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ef42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d1e4      	bne.n	800ef12 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	3308      	adds	r3, #8
 800ef4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef52:	e853 3f00 	ldrex	r3, [r3]
 800ef56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ef58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	3308      	adds	r3, #8
 800ef66:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ef68:	64ba      	str	r2, [r7, #72]	; 0x48
 800ef6a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef6c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef70:	e841 2300 	strex	r3, r2, [r1]
 800ef74:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ef76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d1e5      	bne.n	800ef48 <UART_Start_Receive_IT+0x168>
 800ef7c:	e04a      	b.n	800f014 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	689b      	ldr	r3, [r3, #8]
 800ef82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef86:	d107      	bne.n	800ef98 <UART_Start_Receive_IT+0x1b8>
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	691b      	ldr	r3, [r3, #16]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d103      	bne.n	800ef98 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	4a26      	ldr	r2, [pc, #152]	; (800f02c <UART_Start_Receive_IT+0x24c>)
 800ef94:	671a      	str	r2, [r3, #112]	; 0x70
 800ef96:	e002      	b.n	800ef9e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	4a25      	ldr	r2, [pc, #148]	; (800f030 <UART_Start_Receive_IT+0x250>)
 800ef9c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	2200      	movs	r2, #0
 800efa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	691b      	ldr	r3, [r3, #16]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d019      	beq.n	800efe2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efb6:	e853 3f00 	ldrex	r3, [r3]
 800efba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800efbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efbe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800efc2:	677b      	str	r3, [r7, #116]	; 0x74
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	461a      	mov	r2, r3
 800efca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800efcc:	637b      	str	r3, [r7, #52]	; 0x34
 800efce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800efd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800efd4:	e841 2300 	strex	r3, r2, [r1]
 800efd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800efda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d1e6      	bne.n	800efae <UART_Start_Receive_IT+0x1ce>
 800efe0:	e018      	b.n	800f014 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	e853 3f00 	ldrex	r3, [r3]
 800efee:	613b      	str	r3, [r7, #16]
   return(result);
 800eff0:	693b      	ldr	r3, [r7, #16]
 800eff2:	f043 0320 	orr.w	r3, r3, #32
 800eff6:	67bb      	str	r3, [r7, #120]	; 0x78
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	461a      	mov	r2, r3
 800effe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f000:	623b      	str	r3, [r7, #32]
 800f002:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f004:	69f9      	ldr	r1, [r7, #28]
 800f006:	6a3a      	ldr	r2, [r7, #32]
 800f008:	e841 2300 	strex	r3, r2, [r1]
 800f00c:	61bb      	str	r3, [r7, #24]
   return(result);
 800f00e:	69bb      	ldr	r3, [r7, #24]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d1e6      	bne.n	800efe2 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800f014:	2300      	movs	r3, #0
}
 800f016:	4618      	mov	r0, r3
 800f018:	378c      	adds	r7, #140	; 0x8c
 800f01a:	46bd      	mov	sp, r7
 800f01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f020:	4770      	bx	lr
 800f022:	bf00      	nop
 800f024:	0800f73d 	.word	0x0800f73d
 800f028:	0800f445 	.word	0x0800f445
 800f02c:	0800f2e3 	.word	0x0800f2e3
 800f030:	0800f183 	.word	0x0800f183

0800f034 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f034:	b480      	push	{r7}
 800f036:	b095      	sub	sp, #84	; 0x54
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f044:	e853 3f00 	ldrex	r3, [r3]
 800f048:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f04c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f050:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	461a      	mov	r2, r3
 800f058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f05a:	643b      	str	r3, [r7, #64]	; 0x40
 800f05c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f05e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f060:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f062:	e841 2300 	strex	r3, r2, [r1]
 800f066:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d1e6      	bne.n	800f03c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	3308      	adds	r3, #8
 800f074:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f076:	6a3b      	ldr	r3, [r7, #32]
 800f078:	e853 3f00 	ldrex	r3, [r3]
 800f07c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f07e:	69fa      	ldr	r2, [r7, #28]
 800f080:	4b1e      	ldr	r3, [pc, #120]	; (800f0fc <UART_EndRxTransfer+0xc8>)
 800f082:	4013      	ands	r3, r2
 800f084:	64bb      	str	r3, [r7, #72]	; 0x48
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	3308      	adds	r3, #8
 800f08c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f08e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f090:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f092:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f096:	e841 2300 	strex	r3, r2, [r1]
 800f09a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d1e5      	bne.n	800f06e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0a6:	2b01      	cmp	r3, #1
 800f0a8:	d118      	bne.n	800f0dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	e853 3f00 	ldrex	r3, [r3]
 800f0b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	f023 0310 	bic.w	r3, r3, #16
 800f0be:	647b      	str	r3, [r7, #68]	; 0x44
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	461a      	mov	r2, r3
 800f0c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0c8:	61bb      	str	r3, [r7, #24]
 800f0ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0cc:	6979      	ldr	r1, [r7, #20]
 800f0ce:	69ba      	ldr	r2, [r7, #24]
 800f0d0:	e841 2300 	strex	r3, r2, [r1]
 800f0d4:	613b      	str	r3, [r7, #16]
   return(result);
 800f0d6:	693b      	ldr	r3, [r7, #16]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d1e6      	bne.n	800f0aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2220      	movs	r2, #32
 800f0e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f0f0:	bf00      	nop
 800f0f2:	3754      	adds	r7, #84	; 0x54
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fa:	4770      	bx	lr
 800f0fc:	effffffe 	.word	0xeffffffe

0800f100 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b084      	sub	sp, #16
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f10c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	2200      	movs	r2, #0
 800f112:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	2200      	movs	r2, #0
 800f11a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f11e:	68f8      	ldr	r0, [r7, #12]
 800f120:	f7fe ff2a 	bl	800df78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f124:	bf00      	nop
 800f126:	3710      	adds	r7, #16
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b088      	sub	sp, #32
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	e853 3f00 	ldrex	r3, [r3]
 800f140:	60bb      	str	r3, [r7, #8]
   return(result);
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f148:	61fb      	str	r3, [r7, #28]
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	461a      	mov	r2, r3
 800f150:	69fb      	ldr	r3, [r7, #28]
 800f152:	61bb      	str	r3, [r7, #24]
 800f154:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f156:	6979      	ldr	r1, [r7, #20]
 800f158:	69ba      	ldr	r2, [r7, #24]
 800f15a:	e841 2300 	strex	r3, r2, [r1]
 800f15e:	613b      	str	r3, [r7, #16]
   return(result);
 800f160:	693b      	ldr	r3, [r7, #16]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d1e6      	bne.n	800f134 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2220      	movs	r2, #32
 800f16a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2200      	movs	r2, #0
 800f172:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f7fe fef5 	bl	800df64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f17a:	bf00      	nop
 800f17c:	3720      	adds	r7, #32
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}

0800f182 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f182:	b580      	push	{r7, lr}
 800f184:	b096      	sub	sp, #88	; 0x58
 800f186:	af00      	add	r7, sp, #0
 800f188:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f190:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f19a:	2b22      	cmp	r3, #34	; 0x22
 800f19c:	f040 8095 	bne.w	800f2ca <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1a6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f1aa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f1ae:	b2d9      	uxtb	r1, r3
 800f1b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f1b4:	b2da      	uxtb	r2, r3
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1ba:	400a      	ands	r2, r1
 800f1bc:	b2d2      	uxtb	r2, r2
 800f1be:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1c4:	1c5a      	adds	r2, r3, #1
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f1d0:	b29b      	uxth	r3, r3
 800f1d2:	3b01      	subs	r3, #1
 800f1d4:	b29a      	uxth	r2, r3
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f1e2:	b29b      	uxth	r3, r3
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d178      	bne.n	800f2da <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f0:	e853 3f00 	ldrex	r3, [r3]
 800f1f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f1fc:	653b      	str	r3, [r7, #80]	; 0x50
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	461a      	mov	r2, r3
 800f204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f206:	647b      	str	r3, [r7, #68]	; 0x44
 800f208:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f20a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f20c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f20e:	e841 2300 	strex	r3, r2, [r1]
 800f212:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f216:	2b00      	cmp	r3, #0
 800f218:	d1e6      	bne.n	800f1e8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	3308      	adds	r3, #8
 800f220:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f224:	e853 3f00 	ldrex	r3, [r3]
 800f228:	623b      	str	r3, [r7, #32]
   return(result);
 800f22a:	6a3b      	ldr	r3, [r7, #32]
 800f22c:	f023 0301 	bic.w	r3, r3, #1
 800f230:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	3308      	adds	r3, #8
 800f238:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f23a:	633a      	str	r2, [r7, #48]	; 0x30
 800f23c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f23e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f242:	e841 2300 	strex	r3, r2, [r1]
 800f246:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d1e5      	bne.n	800f21a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2220      	movs	r2, #32
 800f252:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2200      	movs	r2, #0
 800f25a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f260:	2b01      	cmp	r3, #1
 800f262:	d12e      	bne.n	800f2c2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2200      	movs	r2, #0
 800f268:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	e853 3f00 	ldrex	r3, [r3]
 800f276:	60fb      	str	r3, [r7, #12]
   return(result);
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	f023 0310 	bic.w	r3, r3, #16
 800f27e:	64bb      	str	r3, [r7, #72]	; 0x48
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	461a      	mov	r2, r3
 800f286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f288:	61fb      	str	r3, [r7, #28]
 800f28a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f28c:	69b9      	ldr	r1, [r7, #24]
 800f28e:	69fa      	ldr	r2, [r7, #28]
 800f290:	e841 2300 	strex	r3, r2, [r1]
 800f294:	617b      	str	r3, [r7, #20]
   return(result);
 800f296:	697b      	ldr	r3, [r7, #20]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d1e6      	bne.n	800f26a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	69db      	ldr	r3, [r3, #28]
 800f2a2:	f003 0310 	and.w	r3, r3, #16
 800f2a6:	2b10      	cmp	r3, #16
 800f2a8:	d103      	bne.n	800f2b2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	2210      	movs	r2, #16
 800f2b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f2b8:	4619      	mov	r1, r3
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f7fe fe66 	bl	800df8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f2c0:	e00b      	b.n	800f2da <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f7f1 fd1e 	bl	8000d04 <HAL_UART_RxCpltCallback>
}
 800f2c8:	e007      	b.n	800f2da <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	699a      	ldr	r2, [r3, #24]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	f042 0208 	orr.w	r2, r2, #8
 800f2d8:	619a      	str	r2, [r3, #24]
}
 800f2da:	bf00      	nop
 800f2dc:	3758      	adds	r7, #88	; 0x58
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}

0800f2e2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f2e2:	b580      	push	{r7, lr}
 800f2e4:	b096      	sub	sp, #88	; 0x58
 800f2e6:	af00      	add	r7, sp, #0
 800f2e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f2f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f2fa:	2b22      	cmp	r3, #34	; 0x22
 800f2fc:	f040 8095 	bne.w	800f42a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f306:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f30e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f310:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f314:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f318:	4013      	ands	r3, r2
 800f31a:	b29a      	uxth	r2, r3
 800f31c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f31e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f324:	1c9a      	adds	r2, r3, #2
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f330:	b29b      	uxth	r3, r3
 800f332:	3b01      	subs	r3, #1
 800f334:	b29a      	uxth	r2, r3
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f342:	b29b      	uxth	r3, r3
 800f344:	2b00      	cmp	r3, #0
 800f346:	d178      	bne.n	800f43a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f34e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f350:	e853 3f00 	ldrex	r3, [r3]
 800f354:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f358:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f35c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	461a      	mov	r2, r3
 800f364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f366:	643b      	str	r3, [r7, #64]	; 0x40
 800f368:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f36a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f36c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f36e:	e841 2300 	strex	r3, r2, [r1]
 800f372:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f376:	2b00      	cmp	r3, #0
 800f378:	d1e6      	bne.n	800f348 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	3308      	adds	r3, #8
 800f380:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f382:	6a3b      	ldr	r3, [r7, #32]
 800f384:	e853 3f00 	ldrex	r3, [r3]
 800f388:	61fb      	str	r3, [r7, #28]
   return(result);
 800f38a:	69fb      	ldr	r3, [r7, #28]
 800f38c:	f023 0301 	bic.w	r3, r3, #1
 800f390:	64bb      	str	r3, [r7, #72]	; 0x48
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	3308      	adds	r3, #8
 800f398:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f39a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f39c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f39e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f3a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3a2:	e841 2300 	strex	r3, r2, [r1]
 800f3a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d1e5      	bne.n	800f37a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2220      	movs	r2, #32
 800f3b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d12e      	bne.n	800f422 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	e853 3f00 	ldrex	r3, [r3]
 800f3d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	f023 0310 	bic.w	r3, r3, #16
 800f3de:	647b      	str	r3, [r7, #68]	; 0x44
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	461a      	mov	r2, r3
 800f3e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3e8:	61bb      	str	r3, [r7, #24]
 800f3ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3ec:	6979      	ldr	r1, [r7, #20]
 800f3ee:	69ba      	ldr	r2, [r7, #24]
 800f3f0:	e841 2300 	strex	r3, r2, [r1]
 800f3f4:	613b      	str	r3, [r7, #16]
   return(result);
 800f3f6:	693b      	ldr	r3, [r7, #16]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d1e6      	bne.n	800f3ca <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	69db      	ldr	r3, [r3, #28]
 800f402:	f003 0310 	and.w	r3, r3, #16
 800f406:	2b10      	cmp	r3, #16
 800f408:	d103      	bne.n	800f412 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	2210      	movs	r2, #16
 800f410:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f418:	4619      	mov	r1, r3
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f7fe fdb6 	bl	800df8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f420:	e00b      	b.n	800f43a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f7f1 fc6e 	bl	8000d04 <HAL_UART_RxCpltCallback>
}
 800f428:	e007      	b.n	800f43a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	699a      	ldr	r2, [r3, #24]
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	f042 0208 	orr.w	r2, r2, #8
 800f438:	619a      	str	r2, [r3, #24]
}
 800f43a:	bf00      	nop
 800f43c:	3758      	adds	r7, #88	; 0x58
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}
	...

0800f444 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b0a6      	sub	sp, #152	; 0x98
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f452:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	69db      	ldr	r3, [r3, #28]
 800f45c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	689b      	ldr	r3, [r3, #8]
 800f470:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f47a:	2b22      	cmp	r3, #34	; 0x22
 800f47c:	f040 814d 	bne.w	800f71a <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f486:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f48a:	e0f4      	b.n	800f676 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f492:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f496:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800f49a:	b2d9      	uxtb	r1, r3
 800f49c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800f4a0:	b2da      	uxtb	r2, r3
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f4a6:	400a      	ands	r2, r1
 800f4a8:	b2d2      	uxtb	r2, r2
 800f4aa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f4b0:	1c5a      	adds	r2, r3, #1
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f4bc:	b29b      	uxth	r3, r3
 800f4be:	3b01      	subs	r3, #1
 800f4c0:	b29a      	uxth	r2, r3
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	69db      	ldr	r3, [r3, #28]
 800f4ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f4d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f4d6:	f003 0307 	and.w	r3, r3, #7
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d053      	beq.n	800f586 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f4de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f4e2:	f003 0301 	and.w	r3, r3, #1
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d011      	beq.n	800f50e <UART_RxISR_8BIT_FIFOEN+0xca>
 800f4ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f4ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d00b      	beq.n	800f50e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	2201      	movs	r2, #1
 800f4fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f504:	f043 0201 	orr.w	r2, r3, #1
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f50e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f512:	f003 0302 	and.w	r3, r3, #2
 800f516:	2b00      	cmp	r3, #0
 800f518:	d011      	beq.n	800f53e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f51a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f51e:	f003 0301 	and.w	r3, r3, #1
 800f522:	2b00      	cmp	r3, #0
 800f524:	d00b      	beq.n	800f53e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	2202      	movs	r2, #2
 800f52c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f534:	f043 0204 	orr.w	r2, r3, #4
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f53e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f542:	f003 0304 	and.w	r3, r3, #4
 800f546:	2b00      	cmp	r3, #0
 800f548:	d011      	beq.n	800f56e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f54a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f54e:	f003 0301 	and.w	r3, r3, #1
 800f552:	2b00      	cmp	r3, #0
 800f554:	d00b      	beq.n	800f56e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	2204      	movs	r2, #4
 800f55c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f564:	f043 0202 	orr.w	r2, r3, #2
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f574:	2b00      	cmp	r3, #0
 800f576:	d006      	beq.n	800f586 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f7fe fcfd 	bl	800df78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2200      	movs	r2, #0
 800f582:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f58c:	b29b      	uxth	r3, r3
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d171      	bne.n	800f676 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f598:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f59a:	e853 3f00 	ldrex	r3, [r3]
 800f59e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f5a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f5a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f5a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	461a      	mov	r2, r3
 800f5b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f5b4:	66bb      	str	r3, [r7, #104]	; 0x68
 800f5b6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5b8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f5ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f5bc:	e841 2300 	strex	r3, r2, [r1]
 800f5c0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f5c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d1e4      	bne.n	800f592 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	3308      	adds	r3, #8
 800f5ce:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5d2:	e853 3f00 	ldrex	r3, [r3]
 800f5d6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f5d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f5da:	4b56      	ldr	r3, [pc, #344]	; (800f734 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800f5dc:	4013      	ands	r3, r2
 800f5de:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	3308      	adds	r3, #8
 800f5e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f5e8:	657a      	str	r2, [r7, #84]	; 0x54
 800f5ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f5ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f5f0:	e841 2300 	strex	r3, r2, [r1]
 800f5f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f5f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d1e5      	bne.n	800f5c8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2220      	movs	r2, #32
 800f600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2200      	movs	r2, #0
 800f608:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f60e:	2b01      	cmp	r3, #1
 800f610:	d12e      	bne.n	800f670 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	2200      	movs	r2, #0
 800f616:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f620:	e853 3f00 	ldrex	r3, [r3]
 800f624:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f628:	f023 0310 	bic.w	r3, r3, #16
 800f62c:	67bb      	str	r3, [r7, #120]	; 0x78
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	461a      	mov	r2, r3
 800f634:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f636:	643b      	str	r3, [r7, #64]	; 0x40
 800f638:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f63a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f63c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f63e:	e841 2300 	strex	r3, r2, [r1]
 800f642:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f646:	2b00      	cmp	r3, #0
 800f648:	d1e6      	bne.n	800f618 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	69db      	ldr	r3, [r3, #28]
 800f650:	f003 0310 	and.w	r3, r3, #16
 800f654:	2b10      	cmp	r3, #16
 800f656:	d103      	bne.n	800f660 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	2210      	movs	r2, #16
 800f65e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f666:	4619      	mov	r1, r3
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f7fe fc8f 	bl	800df8c <HAL_UARTEx_RxEventCallback>
 800f66e:	e002      	b.n	800f676 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f7f1 fb47 	bl	8000d04 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f676:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d006      	beq.n	800f68c <UART_RxISR_8BIT_FIFOEN+0x248>
 800f67e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f682:	f003 0320 	and.w	r3, r3, #32
 800f686:	2b00      	cmp	r3, #0
 800f688:	f47f af00 	bne.w	800f48c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f692:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f696:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d045      	beq.n	800f72a <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f6a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d23e      	bcs.n	800f72a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	3308      	adds	r3, #8
 800f6b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6b4:	6a3b      	ldr	r3, [r7, #32]
 800f6b6:	e853 3f00 	ldrex	r3, [r3]
 800f6ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800f6bc:	69fb      	ldr	r3, [r7, #28]
 800f6be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f6c2:	673b      	str	r3, [r7, #112]	; 0x70
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	3308      	adds	r3, #8
 800f6ca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f6cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f6ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f6d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6d4:	e841 2300 	strex	r3, r2, [r1]
 800f6d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d1e5      	bne.n	800f6ac <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	4a15      	ldr	r2, [pc, #84]	; (800f738 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800f6e4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	e853 3f00 	ldrex	r3, [r3]
 800f6f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	f043 0320 	orr.w	r3, r3, #32
 800f6fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	461a      	mov	r2, r3
 800f702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f704:	61bb      	str	r3, [r7, #24]
 800f706:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f708:	6979      	ldr	r1, [r7, #20]
 800f70a:	69ba      	ldr	r2, [r7, #24]
 800f70c:	e841 2300 	strex	r3, r2, [r1]
 800f710:	613b      	str	r3, [r7, #16]
   return(result);
 800f712:	693b      	ldr	r3, [r7, #16]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d1e6      	bne.n	800f6e6 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f718:	e007      	b.n	800f72a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	699a      	ldr	r2, [r3, #24]
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	f042 0208 	orr.w	r2, r2, #8
 800f728:	619a      	str	r2, [r3, #24]
}
 800f72a:	bf00      	nop
 800f72c:	3798      	adds	r7, #152	; 0x98
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}
 800f732:	bf00      	nop
 800f734:	effffffe 	.word	0xeffffffe
 800f738:	0800f183 	.word	0x0800f183

0800f73c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b0a8      	sub	sp, #160	; 0xa0
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f74a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	69db      	ldr	r3, [r3, #28]
 800f754:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	689b      	ldr	r3, [r3, #8]
 800f768:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f772:	2b22      	cmp	r3, #34	; 0x22
 800f774:	f040 8151 	bne.w	800fa1a <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f77e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f782:	e0f8      	b.n	800f976 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f78a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f792:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800f796:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800f79a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800f79e:	4013      	ands	r3, r2
 800f7a0:	b29a      	uxth	r2, r3
 800f7a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f7a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7ac:	1c9a      	adds	r2, r3, #2
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f7b8:	b29b      	uxth	r3, r3
 800f7ba:	3b01      	subs	r3, #1
 800f7bc:	b29a      	uxth	r2, r3
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	69db      	ldr	r3, [r3, #28]
 800f7ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f7ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f7d2:	f003 0307 	and.w	r3, r3, #7
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d053      	beq.n	800f882 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f7da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f7de:	f003 0301 	and.w	r3, r3, #1
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d011      	beq.n	800f80a <UART_RxISR_16BIT_FIFOEN+0xce>
 800f7e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f7ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d00b      	beq.n	800f80a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	2201      	movs	r2, #1
 800f7f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f800:	f043 0201 	orr.w	r2, r3, #1
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f80a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f80e:	f003 0302 	and.w	r3, r3, #2
 800f812:	2b00      	cmp	r3, #0
 800f814:	d011      	beq.n	800f83a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f816:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f81a:	f003 0301 	and.w	r3, r3, #1
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d00b      	beq.n	800f83a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	2202      	movs	r2, #2
 800f828:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f830:	f043 0204 	orr.w	r2, r3, #4
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f83a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f83e:	f003 0304 	and.w	r3, r3, #4
 800f842:	2b00      	cmp	r3, #0
 800f844:	d011      	beq.n	800f86a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f846:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f84a:	f003 0301 	and.w	r3, r3, #1
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d00b      	beq.n	800f86a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	2204      	movs	r2, #4
 800f858:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f860:	f043 0202 	orr.w	r2, r3, #2
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f870:	2b00      	cmp	r3, #0
 800f872:	d006      	beq.n	800f882 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f874:	6878      	ldr	r0, [r7, #4]
 800f876:	f7fe fb7f 	bl	800df78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2200      	movs	r2, #0
 800f87e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f888:	b29b      	uxth	r3, r3
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d173      	bne.n	800f976 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f894:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f896:	e853 3f00 	ldrex	r3, [r3]
 800f89a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f89c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f89e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f8a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	461a      	mov	r2, r3
 800f8ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f8b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f8b2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f8b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f8b8:	e841 2300 	strex	r3, r2, [r1]
 800f8bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f8be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d1e4      	bne.n	800f88e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	3308      	adds	r3, #8
 800f8ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8ce:	e853 3f00 	ldrex	r3, [r3]
 800f8d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f8d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f8d6:	4b57      	ldr	r3, [pc, #348]	; (800fa34 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800f8d8:	4013      	ands	r3, r2
 800f8da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	3308      	adds	r3, #8
 800f8e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f8e8:	65ba      	str	r2, [r7, #88]	; 0x58
 800f8ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f8ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f8f0:	e841 2300 	strex	r3, r2, [r1]
 800f8f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f8f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d1e3      	bne.n	800f8c4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2220      	movs	r2, #32
 800f900:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2200      	movs	r2, #0
 800f908:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f90e:	2b01      	cmp	r3, #1
 800f910:	d12e      	bne.n	800f970 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2200      	movs	r2, #0
 800f916:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f920:	e853 3f00 	ldrex	r3, [r3]
 800f924:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f928:	f023 0310 	bic.w	r3, r3, #16
 800f92c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	461a      	mov	r2, r3
 800f934:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f936:	647b      	str	r3, [r7, #68]	; 0x44
 800f938:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f93a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f93c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f93e:	e841 2300 	strex	r3, r2, [r1]
 800f942:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f946:	2b00      	cmp	r3, #0
 800f948:	d1e6      	bne.n	800f918 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	69db      	ldr	r3, [r3, #28]
 800f950:	f003 0310 	and.w	r3, r3, #16
 800f954:	2b10      	cmp	r3, #16
 800f956:	d103      	bne.n	800f960 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	2210      	movs	r2, #16
 800f95e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f966:	4619      	mov	r1, r3
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	f7fe fb0f 	bl	800df8c <HAL_UARTEx_RxEventCallback>
 800f96e:	e002      	b.n	800f976 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f7f1 f9c7 	bl	8000d04 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f976:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d006      	beq.n	800f98c <UART_RxISR_16BIT_FIFOEN+0x250>
 800f97e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f982:	f003 0320 	and.w	r3, r3, #32
 800f986:	2b00      	cmp	r3, #0
 800f988:	f47f aefc 	bne.w	800f784 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f992:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f996:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d045      	beq.n	800fa2a <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f9a4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800f9a8:	429a      	cmp	r2, r3
 800f9aa:	d23e      	bcs.n	800fa2a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	3308      	adds	r3, #8
 800f9b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b6:	e853 3f00 	ldrex	r3, [r3]
 800f9ba:	623b      	str	r3, [r7, #32]
   return(result);
 800f9bc:	6a3b      	ldr	r3, [r7, #32]
 800f9be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f9c2:	677b      	str	r3, [r7, #116]	; 0x74
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	3308      	adds	r3, #8
 800f9ca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f9cc:	633a      	str	r2, [r7, #48]	; 0x30
 800f9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f9d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9d4:	e841 2300 	strex	r3, r2, [r1]
 800f9d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d1e5      	bne.n	800f9ac <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	4a15      	ldr	r2, [pc, #84]	; (800fa38 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800f9e4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9ec:	693b      	ldr	r3, [r7, #16]
 800f9ee:	e853 3f00 	ldrex	r3, [r3]
 800f9f2:	60fb      	str	r3, [r7, #12]
   return(result);
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	f043 0320 	orr.w	r3, r3, #32
 800f9fa:	673b      	str	r3, [r7, #112]	; 0x70
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	461a      	mov	r2, r3
 800fa02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa04:	61fb      	str	r3, [r7, #28]
 800fa06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa08:	69b9      	ldr	r1, [r7, #24]
 800fa0a:	69fa      	ldr	r2, [r7, #28]
 800fa0c:	e841 2300 	strex	r3, r2, [r1]
 800fa10:	617b      	str	r3, [r7, #20]
   return(result);
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d1e6      	bne.n	800f9e6 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fa18:	e007      	b.n	800fa2a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	699a      	ldr	r2, [r3, #24]
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	f042 0208 	orr.w	r2, r2, #8
 800fa28:	619a      	str	r2, [r3, #24]
}
 800fa2a:	bf00      	nop
 800fa2c:	37a0      	adds	r7, #160	; 0xa0
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}
 800fa32:	bf00      	nop
 800fa34:	effffffe 	.word	0xeffffffe
 800fa38:	0800f2e3 	.word	0x0800f2e3

0800fa3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	b083      	sub	sp, #12
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fa44:	bf00      	nop
 800fa46:	370c      	adds	r7, #12
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4e:	4770      	bx	lr

0800fa50 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fa50:	b480      	push	{r7}
 800fa52:	b083      	sub	sp, #12
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fa58:	bf00      	nop
 800fa5a:	370c      	adds	r7, #12
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa62:	4770      	bx	lr

0800fa64 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fa64:	b480      	push	{r7}
 800fa66:	b083      	sub	sp, #12
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fa6c:	bf00      	nop
 800fa6e:	370c      	adds	r7, #12
 800fa70:	46bd      	mov	sp, r7
 800fa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa76:	4770      	bx	lr

0800fa78 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b088      	sub	sp, #32
 800fa7c:	af02      	add	r7, sp, #8
 800fa7e:	60f8      	str	r0, [r7, #12]
 800fa80:	1d3b      	adds	r3, r7, #4
 800fa82:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800fa86:	2300      	movs	r3, #0
 800fa88:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fa90:	2b01      	cmp	r3, #1
 800fa92:	d101      	bne.n	800fa98 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800fa94:	2302      	movs	r3, #2
 800fa96:	e046      	b.n	800fb26 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	2201      	movs	r2, #1
 800fa9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	2224      	movs	r2, #36	; 0x24
 800faa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	681a      	ldr	r2, [r3, #0]
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	f022 0201 	bic.w	r2, r2, #1
 800fab6:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	689b      	ldr	r3, [r3, #8]
 800fabe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800fac2:	687a      	ldr	r2, [r7, #4]
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	430a      	orrs	r2, r1
 800faca:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d105      	bne.n	800fade <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800fad2:	1d3b      	adds	r3, r7, #4
 800fad4:	e893 0006 	ldmia.w	r3, {r1, r2}
 800fad8:	68f8      	ldr	r0, [r7, #12]
 800fada:	f000 f910 	bl	800fcfe <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	681a      	ldr	r2, [r3, #0]
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	f042 0201 	orr.w	r2, r2, #1
 800faec:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800faee:	f7f2 ff1d 	bl	800292c <HAL_GetTick>
 800faf2:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800faf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800faf8:	9300      	str	r3, [sp, #0]
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	2200      	movs	r2, #0
 800fafe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fb02:	68f8      	ldr	r0, [r7, #12]
 800fb04:	f7ff f8a3 	bl	800ec4e <UART_WaitOnFlagUntilTimeout>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d002      	beq.n	800fb14 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800fb0e:	2303      	movs	r3, #3
 800fb10:	75fb      	strb	r3, [r7, #23]
 800fb12:	e003      	b.n	800fb1c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	2220      	movs	r2, #32
 800fb18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	2200      	movs	r2, #0
 800fb20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800fb24:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb26:	4618      	mov	r0, r3
 800fb28:	3718      	adds	r7, #24
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}

0800fb2e <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800fb2e:	b480      	push	{r7}
 800fb30:	b089      	sub	sp, #36	; 0x24
 800fb32:	af00      	add	r7, sp, #0
 800fb34:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fb3c:	2b01      	cmp	r3, #1
 800fb3e:	d101      	bne.n	800fb44 <HAL_UARTEx_EnableStopMode+0x16>
 800fb40:	2302      	movs	r3, #2
 800fb42:	e021      	b.n	800fb88 <HAL_UARTEx_EnableStopMode+0x5a>
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2201      	movs	r2, #1
 800fb48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	e853 3f00 	ldrex	r3, [r3]
 800fb58:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb5a:	68bb      	ldr	r3, [r7, #8]
 800fb5c:	f043 0302 	orr.w	r3, r3, #2
 800fb60:	61fb      	str	r3, [r7, #28]
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	461a      	mov	r2, r3
 800fb68:	69fb      	ldr	r3, [r7, #28]
 800fb6a:	61bb      	str	r3, [r7, #24]
 800fb6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb6e:	6979      	ldr	r1, [r7, #20]
 800fb70:	69ba      	ldr	r2, [r7, #24]
 800fb72:	e841 2300 	strex	r3, r2, [r1]
 800fb76:	613b      	str	r3, [r7, #16]
   return(result);
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d1e6      	bne.n	800fb4c <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2200      	movs	r2, #0
 800fb82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fb86:	2300      	movs	r3, #0
}
 800fb88:	4618      	mov	r0, r3
 800fb8a:	3724      	adds	r7, #36	; 0x24
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb92:	4770      	bx	lr

0800fb94 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fb94:	b480      	push	{r7}
 800fb96:	b085      	sub	sp, #20
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fba2:	2b01      	cmp	r3, #1
 800fba4:	d101      	bne.n	800fbaa <HAL_UARTEx_DisableFifoMode+0x16>
 800fba6:	2302      	movs	r3, #2
 800fba8:	e027      	b.n	800fbfa <HAL_UARTEx_DisableFifoMode+0x66>
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2201      	movs	r2, #1
 800fbae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	2224      	movs	r2, #36	; 0x24
 800fbb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	681a      	ldr	r2, [r3, #0]
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	f022 0201 	bic.w	r2, r2, #1
 800fbd0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fbd8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2200      	movs	r2, #0
 800fbde:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	68fa      	ldr	r2, [r7, #12]
 800fbe6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2220      	movs	r2, #32
 800fbec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fbf8:	2300      	movs	r3, #0
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	3714      	adds	r7, #20
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc04:	4770      	bx	lr

0800fc06 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc06:	b580      	push	{r7, lr}
 800fc08:	b084      	sub	sp, #16
 800fc0a:	af00      	add	r7, sp, #0
 800fc0c:	6078      	str	r0, [r7, #4]
 800fc0e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fc16:	2b01      	cmp	r3, #1
 800fc18:	d101      	bne.n	800fc1e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fc1a:	2302      	movs	r3, #2
 800fc1c:	e02d      	b.n	800fc7a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	2201      	movs	r2, #1
 800fc22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2224      	movs	r2, #36	; 0x24
 800fc2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	681a      	ldr	r2, [r3, #0]
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	f022 0201 	bic.w	r2, r2, #1
 800fc44:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	689b      	ldr	r3, [r3, #8]
 800fc4c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	683a      	ldr	r2, [r7, #0]
 800fc56:	430a      	orrs	r2, r1
 800fc58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fc5a:	6878      	ldr	r0, [r7, #4]
 800fc5c:	f000 f872 	bl	800fd44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	68fa      	ldr	r2, [r7, #12]
 800fc66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2220      	movs	r2, #32
 800fc6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2200      	movs	r2, #0
 800fc74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fc78:	2300      	movs	r3, #0
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	3710      	adds	r7, #16
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}

0800fc82 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc82:	b580      	push	{r7, lr}
 800fc84:	b084      	sub	sp, #16
 800fc86:	af00      	add	r7, sp, #0
 800fc88:	6078      	str	r0, [r7, #4]
 800fc8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fc92:	2b01      	cmp	r3, #1
 800fc94:	d101      	bne.n	800fc9a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fc96:	2302      	movs	r3, #2
 800fc98:	e02d      	b.n	800fcf6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	2201      	movs	r2, #1
 800fc9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2224      	movs	r2, #36	; 0x24
 800fca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	681a      	ldr	r2, [r3, #0]
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	f022 0201 	bic.w	r2, r2, #1
 800fcc0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	689b      	ldr	r3, [r3, #8]
 800fcc8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	683a      	ldr	r2, [r7, #0]
 800fcd2:	430a      	orrs	r2, r1
 800fcd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f000 f834 	bl	800fd44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	68fa      	ldr	r2, [r7, #12]
 800fce2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2220      	movs	r2, #32
 800fce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2200      	movs	r2, #0
 800fcf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fcf4:	2300      	movs	r3, #0
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	3710      	adds	r7, #16
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}

0800fcfe <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800fcfe:	b480      	push	{r7}
 800fd00:	b085      	sub	sp, #20
 800fd02:	af00      	add	r7, sp, #0
 800fd04:	60f8      	str	r0, [r7, #12]
 800fd06:	1d3b      	adds	r3, r7, #4
 800fd08:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	685b      	ldr	r3, [r3, #4]
 800fd12:	f023 0210 	bic.w	r2, r3, #16
 800fd16:	893b      	ldrh	r3, [r7, #8]
 800fd18:	4619      	mov	r1, r3
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	430a      	orrs	r2, r1
 800fd20:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	685b      	ldr	r3, [r3, #4]
 800fd28:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800fd2c:	7abb      	ldrb	r3, [r7, #10]
 800fd2e:	061a      	lsls	r2, r3, #24
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	430a      	orrs	r2, r1
 800fd36:	605a      	str	r2, [r3, #4]
}
 800fd38:	bf00      	nop
 800fd3a:	3714      	adds	r7, #20
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd42:	4770      	bx	lr

0800fd44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fd44:	b480      	push	{r7}
 800fd46:	b085      	sub	sp, #20
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d108      	bne.n	800fd66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	2201      	movs	r2, #1
 800fd58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2201      	movs	r2, #1
 800fd60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fd64:	e031      	b.n	800fdca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fd66:	2310      	movs	r3, #16
 800fd68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fd6a:	2310      	movs	r3, #16
 800fd6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	689b      	ldr	r3, [r3, #8]
 800fd74:	0e5b      	lsrs	r3, r3, #25
 800fd76:	b2db      	uxtb	r3, r3
 800fd78:	f003 0307 	and.w	r3, r3, #7
 800fd7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	689b      	ldr	r3, [r3, #8]
 800fd84:	0f5b      	lsrs	r3, r3, #29
 800fd86:	b2db      	uxtb	r3, r3
 800fd88:	f003 0307 	and.w	r3, r3, #7
 800fd8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd8e:	7bbb      	ldrb	r3, [r7, #14]
 800fd90:	7b3a      	ldrb	r2, [r7, #12]
 800fd92:	4911      	ldr	r1, [pc, #68]	; (800fdd8 <UARTEx_SetNbDataToProcess+0x94>)
 800fd94:	5c8a      	ldrb	r2, [r1, r2]
 800fd96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fd9a:	7b3a      	ldrb	r2, [r7, #12]
 800fd9c:	490f      	ldr	r1, [pc, #60]	; (800fddc <UARTEx_SetNbDataToProcess+0x98>)
 800fd9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fda0:	fb93 f3f2 	sdiv	r3, r3, r2
 800fda4:	b29a      	uxth	r2, r3
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fdac:	7bfb      	ldrb	r3, [r7, #15]
 800fdae:	7b7a      	ldrb	r2, [r7, #13]
 800fdb0:	4909      	ldr	r1, [pc, #36]	; (800fdd8 <UARTEx_SetNbDataToProcess+0x94>)
 800fdb2:	5c8a      	ldrb	r2, [r1, r2]
 800fdb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fdb8:	7b7a      	ldrb	r2, [r7, #13]
 800fdba:	4908      	ldr	r1, [pc, #32]	; (800fddc <UARTEx_SetNbDataToProcess+0x98>)
 800fdbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fdbe:	fb93 f3f2 	sdiv	r3, r3, r2
 800fdc2:	b29a      	uxth	r2, r3
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fdca:	bf00      	nop
 800fdcc:	3714      	adds	r7, #20
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd4:	4770      	bx	lr
 800fdd6:	bf00      	nop
 800fdd8:	0800fe98 	.word	0x0800fe98
 800fddc:	0800fea0 	.word	0x0800fea0

0800fde0 <__libc_init_array>:
 800fde0:	b570      	push	{r4, r5, r6, lr}
 800fde2:	4d0d      	ldr	r5, [pc, #52]	; (800fe18 <__libc_init_array+0x38>)
 800fde4:	4c0d      	ldr	r4, [pc, #52]	; (800fe1c <__libc_init_array+0x3c>)
 800fde6:	1b64      	subs	r4, r4, r5
 800fde8:	10a4      	asrs	r4, r4, #2
 800fdea:	2600      	movs	r6, #0
 800fdec:	42a6      	cmp	r6, r4
 800fdee:	d109      	bne.n	800fe04 <__libc_init_array+0x24>
 800fdf0:	4d0b      	ldr	r5, [pc, #44]	; (800fe20 <__libc_init_array+0x40>)
 800fdf2:	4c0c      	ldr	r4, [pc, #48]	; (800fe24 <__libc_init_array+0x44>)
 800fdf4:	f000 f820 	bl	800fe38 <_init>
 800fdf8:	1b64      	subs	r4, r4, r5
 800fdfa:	10a4      	asrs	r4, r4, #2
 800fdfc:	2600      	movs	r6, #0
 800fdfe:	42a6      	cmp	r6, r4
 800fe00:	d105      	bne.n	800fe0e <__libc_init_array+0x2e>
 800fe02:	bd70      	pop	{r4, r5, r6, pc}
 800fe04:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe08:	4798      	blx	r3
 800fe0a:	3601      	adds	r6, #1
 800fe0c:	e7ee      	b.n	800fdec <__libc_init_array+0xc>
 800fe0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe12:	4798      	blx	r3
 800fe14:	3601      	adds	r6, #1
 800fe16:	e7f2      	b.n	800fdfe <__libc_init_array+0x1e>
 800fe18:	0800feb0 	.word	0x0800feb0
 800fe1c:	0800feb0 	.word	0x0800feb0
 800fe20:	0800feb0 	.word	0x0800feb0
 800fe24:	0800feb4 	.word	0x0800feb4

0800fe28 <memset>:
 800fe28:	4402      	add	r2, r0
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	4293      	cmp	r3, r2
 800fe2e:	d100      	bne.n	800fe32 <memset+0xa>
 800fe30:	4770      	bx	lr
 800fe32:	f803 1b01 	strb.w	r1, [r3], #1
 800fe36:	e7f9      	b.n	800fe2c <memset+0x4>

0800fe38 <_init>:
 800fe38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe3a:	bf00      	nop
 800fe3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe3e:	bc08      	pop	{r3}
 800fe40:	469e      	mov	lr, r3
 800fe42:	4770      	bx	lr

0800fe44 <_fini>:
 800fe44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe46:	bf00      	nop
 800fe48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe4a:	bc08      	pop	{r3}
 800fe4c:	469e      	mov	lr, r3
 800fe4e:	4770      	bx	lr
