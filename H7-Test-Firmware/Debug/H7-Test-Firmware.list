
H7-Test-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb74  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800ee0c  0800ee0c  0001ee0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ee64  0800ee64  0001ee64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ee6c  0800ee6c  0001ee6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ee70  0800ee70  0001ee70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000034  24000000  0800ee74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004f4  24000040  0800eea8  00020040  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24000534  0800eea8  00020534  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 10 .debug_info   000233cf  00000000  00000000  00020062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000035cb  00000000  00000000  00043431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ad0  00000000  00000000  00046a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001998  00000000  00000000  000484d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ada1  00000000  00000000  00049e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023853  00000000  00000000  00084c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017fee0  00000000  00000000  000a845c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022833c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000074f4  00000000  00000000  0022838c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800edf4 	.word	0x0800edf4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	0800edf4 	.word	0x0800edf4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ee:	4904      	ldr	r1, [pc, #16]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x28>)
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f6:	f3bf 8f4f 	dsb	sy
}
 80005fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <__NVIC_SystemReset+0x20>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	05fa0004 	.word	0x05fa0004

08000608 <HAL_TIM_OC_DelayElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b090      	sub	sp, #64	; 0x40
 800060c:	af02      	add	r7, sp, #8
 800060e:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4aac      	ldr	r2, [pc, #688]	; (80008c4 <HAL_TIM_OC_DelayElapsedCallback+0x2bc>)
 8000614:	4293      	cmp	r3, r2
 8000616:	f040 82d7 	bne.w	8000bc8 <HAL_TIM_OC_DelayElapsedCallback+0x5c0>
  {
    if (1)
    { // check pin state
      if (ERPA_ON)
 800061a:	4bab      	ldr	r3, [pc, #684]	; (80008c8 <HAL_TIM_OC_DelayElapsedCallback+0x2c0>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	f000 8084 	beq.w	800072c <HAL_TIM_OC_DelayElapsedCallback+0x124>
         */

        /* Write to SPI (begin transfer?) */


		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) { 	//check pin state
 8000624:	bf00      	nop
 8000626:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800062a:	48a8      	ldr	r0, [pc, #672]	; (80008cc <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 800062c:	f006 fe14 	bl	8007258 <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1f7      	bne.n	8000626 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		 * Steps DAC
		 * +/- 0.5v Every 100ms
		*/

		/* Write to SPI (begin transfer?) */
		HAL_SPI_Receive(&hspi2,(uint8_t *)spi2RxBuffer, 1, 1);
 8000636:	2301      	movs	r3, #1
 8000638:	2201      	movs	r2, #1
 800063a:	49a5      	ldr	r1, [pc, #660]	; (80008d0 <HAL_TIM_OC_DelayElapsedCallback+0x2c8>)
 800063c:	48a5      	ldr	r0, [pc, #660]	; (80008d4 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 800063e:	f00a fe89 	bl	800b354 <HAL_SPI_Receive>
		uint8_t SPI2_LSB = ((spi2RxBuffer[0] & 0xFF00) >> 8);
 8000642:	2300      	movs	r3, #0
 8000644:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		uint8_t SPI2_MSB = (spi2RxBuffer[1] & 0xFF);
 8000648:	4ba1      	ldr	r3, [pc, #644]	; (80008d0 <HAL_TIM_OC_DelayElapsedCallback+0x2c8>)
 800064a:	785b      	ldrb	r3, [r3, #1]
 800064c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		hspi2.Instance->CR1 |= 1<<10; // THIS IS NEEDED TO STOP SPI2_SCK FROM GENERATING CLOCK PULSES
 8000650:	4ba0      	ldr	r3, [pc, #640]	; (80008d4 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4b9f      	ldr	r3, [pc, #636]	; (80008d4 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800065e:	601a      	str	r2, [r3, #0]

		DAC1->DHR12R1 = DAC_OUT[step];
 8000660:	4b9d      	ldr	r3, [pc, #628]	; (80008d8 <HAL_TIM_OC_DelayElapsedCallback+0x2d0>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	4a9d      	ldr	r2, [pc, #628]	; (80008dc <HAL_TIM_OC_DelayElapsedCallback+0x2d4>)
 8000668:	4b9d      	ldr	r3, [pc, #628]	; (80008e0 <HAL_TIM_OC_DelayElapsedCallback+0x2d8>)
 800066a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800066e:	6093      	str	r3, [r2, #8]
//			 ADC_CONVERTED_DATA_BUFFER_SIZE
//		) != HAL_OK) {
//		     Error_Handler();
//		}

		uint16_t PF11 = aADCxConvertedData[0]; 			// ENDmon -- non responsive
 8000670:	4b9c      	ldr	r3, [pc, #624]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x2dc>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	857b      	strh	r3, [r7, #42]	; 0x2a
		uint16_t PA6 = aADCxConvertedData[1]; 			// SWPmon
 8000676:	4b9b      	ldr	r3, [pc, #620]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x2dc>)
 8000678:	885b      	ldrh	r3, [r3, #2]
 800067a:	853b      	strh	r3, [r7, #40]	; 0x28
		uint16_t PC4 = aADCxConvertedData[13]; 			// TEMP1 -- non responsive
 800067c:	4b99      	ldr	r3, [pc, #612]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x2dc>)
 800067e:	8b5b      	ldrh	r3, [r3, #26]
 8000680:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t PB1 = aADCxConvertedData[14];			// TEMP2 -- non responsive
 8000682:	4b98      	ldr	r3, [pc, #608]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x2dc>)
 8000684:	8b9b      	ldrh	r3, [r3, #28]
 8000686:	84bb      	strh	r3, [r7, #36]	; 0x24

		erpa_buf[0] = erpa_sync;                  		// ERPA SYNC 0xAA MSB
 8000688:	22aa      	movs	r2, #170	; 0xaa
 800068a:	4b97      	ldr	r3, [pc, #604]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 800068c:	701a      	strb	r2, [r3, #0]
		erpa_buf[1] = erpa_sync;                  		// ERPA SYNC 0xAA LSB
 800068e:	22aa      	movs	r2, #170	; 0xaa
 8000690:	4b95      	ldr	r3, [pc, #596]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 8000692:	705a      	strb	r2, [r3, #1]
		erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 		// ERPA SEQ # MSB
 8000694:	4b95      	ldr	r3, [pc, #596]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x2e4>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	0a1b      	lsrs	r3, r3, #8
 800069a:	b29b      	uxth	r3, r3
 800069c:	b2da      	uxtb	r2, r3
 800069e:	4b92      	ldr	r3, [pc, #584]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 80006a0:	709a      	strb	r2, [r3, #2]
		erpa_buf[3] = (erpa_seq & 0xFF);          		// ERPA SEQ # MSB
 80006a2:	4b92      	ldr	r3, [pc, #584]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x2e4>)
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	4b8f      	ldr	r3, [pc, #572]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 80006aa:	70da      	strb	r2, [r3, #3]
		erpa_buf[4] = ((PF11 & 0xFF00) >> 8); 	  		// ENDmon MSB
 80006ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80006ae:	0a1b      	lsrs	r3, r3, #8
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	4b8c      	ldr	r3, [pc, #560]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 80006b6:	711a      	strb	r2, [r3, #4]
		erpa_buf[5] = (PF11 & 0xFF);               		// ENDmon LSB
 80006b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	4b8a      	ldr	r3, [pc, #552]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 80006be:	715a      	strb	r2, [r3, #5]
		erpa_buf[6] = ((PA6 & 0xFF00) >> 8);      		// SWP Monitored MSB
 80006c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80006c2:	0a1b      	lsrs	r3, r3, #8
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	4b87      	ldr	r3, [pc, #540]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 80006ca:	719a      	strb	r2, [r3, #6]
		erpa_buf[7] = (PA6 & 0xFF);               		// SWP Monitored LSB
 80006cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	4b85      	ldr	r3, [pc, #532]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 80006d2:	71da      	strb	r2, [r3, #7]
		erpa_buf[8] = ((PC4 & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 80006d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006d6:	0a1b      	lsrs	r3, r3, #8
 80006d8:	b29b      	uxth	r3, r3
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b82      	ldr	r3, [pc, #520]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 80006de:	721a      	strb	r2, [r3, #8]
		erpa_buf[9] = (PC4 & 0xFF);               		// TEMPURATURE 1 LSB
 80006e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	4b80      	ldr	r3, [pc, #512]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 80006e6:	725a      	strb	r2, [r3, #9]
		erpa_buf[10] = ((PB1 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 80006e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80006ea:	0a1b      	lsrs	r3, r3, #8
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b7d      	ldr	r3, [pc, #500]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 80006f2:	729a      	strb	r2, [r3, #10]
		erpa_buf[11] = (PB1 & 0xFF);                    // TEMPURATURE 2 LSB
 80006f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	4b7b      	ldr	r3, [pc, #492]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 80006fa:	72da      	strb	r2, [r3, #11]
		erpa_buf[12] = SPI2_MSB;					    // ERPA eADC MSB
 80006fc:	4a7a      	ldr	r2, [pc, #488]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 80006fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000702:	7313      	strb	r3, [r2, #12]
		erpa_buf[13] = SPI2_LSB;          				// ERPA eADC LSB
 8000704:	4a78      	ldr	r2, [pc, #480]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 8000706:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800070a:	7353      	strb	r3, [r2, #13]

		erpa_seq++;
 800070c:	4b77      	ldr	r3, [pc, #476]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x2e4>)
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	b29a      	uxth	r2, r3
 8000714:	4b75      	ldr	r3, [pc, #468]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x2e4>)
 8000716:	801a      	strh	r2, [r3, #0]
		if (ERPA_ON)
 8000718:	4b6b      	ldr	r3, [pc, #428]	; (80008c8 <HAL_TIM_OC_DelayElapsedCallback+0x2c0>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d005      	beq.n	800072c <HAL_TIM_OC_DelayElapsedCallback+0x124>
		{
		  HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 8000720:	2364      	movs	r3, #100	; 0x64
 8000722:	220e      	movs	r2, #14
 8000724:	4970      	ldr	r1, [pc, #448]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 8000726:	4872      	ldr	r0, [pc, #456]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 8000728:	f00c fbde 	bl	800cee8 <HAL_UART_Transmit>
		}
      }
      if (HK_ON)
 800072c:	4b71      	ldr	r3, [pc, #452]	; (80008f4 <HAL_TIM_OC_DelayElapsedCallback+0x2ec>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	f000 8295 	beq.w	8000c60 <HAL_TIM_OC_DelayElapsedCallback+0x658>
      {
        if (hk_counter == HK_CADENCE)
 8000736:	4b70      	ldr	r3, [pc, #448]	; (80008f8 <HAL_TIM_OC_DelayElapsedCallback+0x2f0>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2201      	movs	r2, #1
 800073c:	4293      	cmp	r3, r2
 800073e:	f040 8229 	bne.w	8000b94 <HAL_TIM_OC_DelayElapsedCallback+0x58c>
          int16_t output1;
          int16_t output2;
          int16_t output3;
          int16_t output4;

          buf[0] = REG_TEMP;
 8000742:	2300      	movs	r3, #0
 8000744:	723b      	strb	r3, [r7, #8]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_1, buf, 1,
 8000746:	2390      	movs	r3, #144	; 0x90
 8000748:	b299      	uxth	r1, r3
 800074a:	f107 0208 	add.w	r2, r7, #8
 800074e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	2301      	movs	r3, #1
 8000756:	4869      	ldr	r0, [pc, #420]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x2f4>)
 8000758:	f006 fe40 	bl	80073dc <HAL_I2C_Master_Transmit>
 800075c:	4603      	mov	r3, r0
 800075e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                        1000);
          if (ret != HAL_OK)
 8000762:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000766:	2b00      	cmp	r3, #0
 8000768:	d009      	beq.n	800077e <HAL_TIM_OC_DelayElapsedCallback+0x176>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	4a64      	ldr	r2, [pc, #400]	; (8000900 <HAL_TIM_OC_DelayElapsedCallback+0x2f8>)
 8000770:	ca07      	ldmia	r2, {r0, r1, r2}
 8000772:	c303      	stmia	r3!, {r0, r1}
 8000774:	801a      	strh	r2, [r3, #0]
 8000776:	3302      	adds	r3, #2
 8000778:	0c12      	lsrs	r2, r2, #16
 800077a:	701a      	strb	r2, [r3, #0]
 800077c:	e024      	b.n	80007c8 <HAL_TIM_OC_DelayElapsedCallback+0x1c0>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_1, buf, 2,
 800077e:	2390      	movs	r3, #144	; 0x90
 8000780:	b299      	uxth	r1, r3
 8000782:	f107 0208 	add.w	r2, r7, #8
 8000786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	2302      	movs	r3, #2
 800078e:	485b      	ldr	r0, [pc, #364]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x2f4>)
 8000790:	f006 ff18 	bl	80075c4 <HAL_I2C_Master_Receive>
 8000794:	4603      	mov	r3, r0
 8000796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                         1000);
            if (ret != HAL_OK)
 800079a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d009      	beq.n	80007b6 <HAL_TIM_OC_DelayElapsedCallback+0x1ae>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80007a2:	f107 0308 	add.w	r3, r7, #8
 80007a6:	4a57      	ldr	r2, [pc, #348]	; (8000904 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 80007a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80007aa:	c303      	stmia	r3!, {r0, r1}
 80007ac:	801a      	strh	r2, [r3, #0]
 80007ae:	3302      	adds	r3, #2
 80007b0:	0c12      	lsrs	r2, r2, #16
 80007b2:	701a      	strb	r2, [r3, #0]
 80007b4:	e008      	b.n	80007c8 <HAL_TIM_OC_DelayElapsedCallback+0x1c0>
            }
            else
            {
              output1 = (int16_t)(buf[0] << 8);
 80007b6:	7a3b      	ldrb	r3, [r7, #8]
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	86fb      	strh	r3, [r7, #54]	; 0x36
              output1 = (output1 | buf[1]) >> 3;
 80007bc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80007c0:	7a7a      	ldrb	r2, [r7, #9]
 80007c2:	4313      	orrs	r3, r2
 80007c4:	10db      	asrs	r3, r3, #3
 80007c6:	86fb      	strh	r3, [r7, #54]	; 0x36
            }
          }

          /* Tell ADT7410_2 that we want to read from the temperature register */
          buf[0] = REG_TEMP;
 80007c8:	2300      	movs	r3, #0
 80007ca:	723b      	strb	r3, [r7, #8]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_2, buf, 1,
 80007cc:	2394      	movs	r3, #148	; 0x94
 80007ce:	b299      	uxth	r1, r3
 80007d0:	f107 0208 	add.w	r2, r7, #8
 80007d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	2301      	movs	r3, #1
 80007dc:	4847      	ldr	r0, [pc, #284]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x2f4>)
 80007de:	f006 fdfd 	bl	80073dc <HAL_I2C_Master_Transmit>
 80007e2:	4603      	mov	r3, r0
 80007e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 80007e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d009      	beq.n	8000804 <HAL_TIM_OC_DelayElapsedCallback+0x1fc>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 80007f0:	f107 0308 	add.w	r3, r7, #8
 80007f4:	4a42      	ldr	r2, [pc, #264]	; (8000900 <HAL_TIM_OC_DelayElapsedCallback+0x2f8>)
 80007f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80007f8:	c303      	stmia	r3!, {r0, r1}
 80007fa:	801a      	strh	r2, [r3, #0]
 80007fc:	3302      	adds	r3, #2
 80007fe:	0c12      	lsrs	r2, r2, #16
 8000800:	701a      	strb	r2, [r3, #0]
 8000802:	e024      	b.n	800084e <HAL_TIM_OC_DelayElapsedCallback+0x246>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_2, buf, 2,
 8000804:	2394      	movs	r3, #148	; 0x94
 8000806:	b299      	uxth	r1, r3
 8000808:	f107 0208 	add.w	r2, r7, #8
 800080c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	2302      	movs	r3, #2
 8000814:	4839      	ldr	r0, [pc, #228]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x2f4>)
 8000816:	f006 fed5 	bl	80075c4 <HAL_I2C_Master_Receive>
 800081a:	4603      	mov	r3, r0
 800081c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                         1000);
            if (ret != HAL_OK)
 8000820:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000824:	2b00      	cmp	r3, #0
 8000826:	d009      	beq.n	800083c <HAL_TIM_OC_DelayElapsedCallback+0x234>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	4a35      	ldr	r2, [pc, #212]	; (8000904 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 800082e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000830:	c303      	stmia	r3!, {r0, r1}
 8000832:	801a      	strh	r2, [r3, #0]
 8000834:	3302      	adds	r3, #2
 8000836:	0c12      	lsrs	r2, r2, #16
 8000838:	701a      	strb	r2, [r3, #0]
 800083a:	e008      	b.n	800084e <HAL_TIM_OC_DelayElapsedCallback+0x246>
            }
            else
            {

              output2 = (int16_t)(buf[0] << 8);
 800083c:	7a3b      	ldrb	r3, [r7, #8]
 800083e:	021b      	lsls	r3, r3, #8
 8000840:	86bb      	strh	r3, [r7, #52]	; 0x34
              output2 = (output2 | buf[1]) >> 3;
 8000842:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8000846:	7a7a      	ldrb	r2, [r7, #9]
 8000848:	4313      	orrs	r3, r2
 800084a:	10db      	asrs	r3, r3, #3
 800084c:	86bb      	strh	r3, [r7, #52]	; 0x34
            }
          }
          // TEMP SENSOR 3
          buf[0] = REG_TEMP;
 800084e:	2300      	movs	r3, #0
 8000850:	723b      	strb	r3, [r7, #8]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_3, buf, 1,
 8000852:	2392      	movs	r3, #146	; 0x92
 8000854:	b299      	uxth	r1, r3
 8000856:	f107 0208 	add.w	r2, r7, #8
 800085a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085e:	9300      	str	r3, [sp, #0]
 8000860:	2301      	movs	r3, #1
 8000862:	4826      	ldr	r0, [pc, #152]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x2f4>)
 8000864:	f006 fdba 	bl	80073dc <HAL_I2C_Master_Transmit>
 8000868:	4603      	mov	r3, r0
 800086a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 800086e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000872:	2b00      	cmp	r3, #0
 8000874:	d009      	beq.n	800088a <HAL_TIM_OC_DelayElapsedCallback+0x282>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000876:	f107 0308 	add.w	r3, r7, #8
 800087a:	4a21      	ldr	r2, [pc, #132]	; (8000900 <HAL_TIM_OC_DelayElapsedCallback+0x2f8>)
 800087c:	ca07      	ldmia	r2, {r0, r1, r2}
 800087e:	c303      	stmia	r3!, {r0, r1}
 8000880:	801a      	strh	r2, [r3, #0]
 8000882:	3302      	adds	r3, #2
 8000884:	0c12      	lsrs	r2, r2, #16
 8000886:	701a      	strb	r2, [r3, #0]
 8000888:	e047      	b.n	800091a <HAL_TIM_OC_DelayElapsedCallback+0x312>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_3, buf, 2,
 800088a:	2392      	movs	r3, #146	; 0x92
 800088c:	b299      	uxth	r1, r3
 800088e:	f107 0208 	add.w	r2, r7, #8
 8000892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	2302      	movs	r3, #2
 800089a:	4818      	ldr	r0, [pc, #96]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x2f4>)
 800089c:	f006 fe92 	bl	80075c4 <HAL_I2C_Master_Receive>
 80008a0:	4603      	mov	r3, r0
 80008a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                         1000);
            if (ret != HAL_OK)
 80008a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d02c      	beq.n	8000908 <HAL_TIM_OC_DelayElapsedCallback+0x300>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	4a14      	ldr	r2, [pc, #80]	; (8000904 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 80008b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80008b6:	c303      	stmia	r3!, {r0, r1}
 80008b8:	801a      	strh	r2, [r3, #0]
 80008ba:	3302      	adds	r3, #2
 80008bc:	0c12      	lsrs	r2, r2, #16
 80008be:	701a      	strb	r2, [r3, #0]
 80008c0:	e02b      	b.n	800091a <HAL_TIM_OC_DelayElapsedCallback+0x312>
 80008c2:	bf00      	nop
 80008c4:	24000358 	.word	0x24000358
 80008c8:	24000021 	.word	0x24000021
 80008cc:	58020400 	.word	0x58020400
 80008d0:	240004e8 	.word	0x240004e8
 80008d4:	24000284 	.word	0x24000284
 80008d8:	240004e0 	.word	0x240004e0
 80008dc:	40007400 	.word	0x40007400
 80008e0:	24000000 	.word	0x24000000
 80008e4:	240004a0 	.word	0x240004a0
 80008e8:	240004ec 	.word	0x240004ec
 80008ec:	240004fa 	.word	0x240004fa
 80008f0:	240003a4 	.word	0x240003a4
 80008f4:	24000022 	.word	0x24000022
 80008f8:	2400052c 	.word	0x2400052c
 80008fc:	240001b0 	.word	0x240001b0
 8000900:	0800ee0c 	.word	0x0800ee0c
 8000904:	0800ee18 	.word	0x0800ee18
            }
            else
            {

              output3 = (int16_t)(buf[0] << 8);
 8000908:	7a3b      	ldrb	r3, [r7, #8]
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	867b      	strh	r3, [r7, #50]	; 0x32
              output3 = (output3 | buf[1]) >> 3;
 800090e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8000912:	7a7a      	ldrb	r2, [r7, #9]
 8000914:	4313      	orrs	r3, r2
 8000916:	10db      	asrs	r3, r3, #3
 8000918:	867b      	strh	r3, [r7, #50]	; 0x32
            }
          }
          /* TEMP SENSOR 4 */
          buf[0] = REG_TEMP;
 800091a:	2300      	movs	r3, #0
 800091c:	723b      	strb	r3, [r7, #8]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_4, buf, 1,
 800091e:	2396      	movs	r3, #150	; 0x96
 8000920:	b299      	uxth	r1, r3
 8000922:	f107 0208 	add.w	r2, r7, #8
 8000926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	2301      	movs	r3, #1
 800092e:	489c      	ldr	r0, [pc, #624]	; (8000ba0 <HAL_TIM_OC_DelayElapsedCallback+0x598>)
 8000930:	f006 fd54 	bl	80073dc <HAL_I2C_Master_Transmit>
 8000934:	4603      	mov	r3, r0
 8000936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 800093a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800093e:	2b00      	cmp	r3, #0
 8000940:	d009      	beq.n	8000956 <HAL_TIM_OC_DelayElapsedCallback+0x34e>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000942:	f107 0308 	add.w	r3, r7, #8
 8000946:	4a97      	ldr	r2, [pc, #604]	; (8000ba4 <HAL_TIM_OC_DelayElapsedCallback+0x59c>)
 8000948:	ca07      	ldmia	r2, {r0, r1, r2}
 800094a:	c303      	stmia	r3!, {r0, r1}
 800094c:	801a      	strh	r2, [r3, #0]
 800094e:	3302      	adds	r3, #2
 8000950:	0c12      	lsrs	r2, r2, #16
 8000952:	701a      	strb	r2, [r3, #0]
 8000954:	e024      	b.n	80009a0 <HAL_TIM_OC_DelayElapsedCallback+0x398>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_4, buf, 2,
 8000956:	2396      	movs	r3, #150	; 0x96
 8000958:	b299      	uxth	r1, r3
 800095a:	f107 0208 	add.w	r2, r7, #8
 800095e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2302      	movs	r3, #2
 8000966:	488e      	ldr	r0, [pc, #568]	; (8000ba0 <HAL_TIM_OC_DelayElapsedCallback+0x598>)
 8000968:	f006 fe2c 	bl	80075c4 <HAL_I2C_Master_Receive>
 800096c:	4603      	mov	r3, r0
 800096e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                         1000);
            if (ret != HAL_OK)
 8000972:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000976:	2b00      	cmp	r3, #0
 8000978:	d009      	beq.n	800098e <HAL_TIM_OC_DelayElapsedCallback+0x386>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	4a8a      	ldr	r2, [pc, #552]	; (8000ba8 <HAL_TIM_OC_DelayElapsedCallback+0x5a0>)
 8000980:	ca07      	ldmia	r2, {r0, r1, r2}
 8000982:	c303      	stmia	r3!, {r0, r1}
 8000984:	801a      	strh	r2, [r3, #0]
 8000986:	3302      	adds	r3, #2
 8000988:	0c12      	lsrs	r2, r2, #16
 800098a:	701a      	strb	r2, [r3, #0]
 800098c:	e008      	b.n	80009a0 <HAL_TIM_OC_DelayElapsedCallback+0x398>
            }
            else
            {

              output4 = (int16_t)(buf[0] << 8);
 800098e:	7a3b      	ldrb	r3, [r7, #8]
 8000990:	021b      	lsls	r3, r3, #8
 8000992:	863b      	strh	r3, [r7, #48]	; 0x30
              output4 = (output4 | buf[1]) >> 3;
 8000994:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8000998:	7a7a      	ldrb	r2, [r7, #9]
 800099a:	4313      	orrs	r3, r2
 800099c:	10db      	asrs	r3, r3, #3
 800099e:	863b      	strh	r3, [r7, #48]	; 0x30
//
//          uint16_t vrefint = aADCxConvertedData[0];
//          uint16_t vsense = aADCxConvertedData[1];


          HAL_ADC_Stop_DMA(&hadc1);
 80009a0:	4882      	ldr	r0, [pc, #520]	; (8000bac <HAL_TIM_OC_DelayElapsedCallback+0x5a4>)
 80009a2:	f002 fb63 	bl	800306c <HAL_ADC_Stop_DMA>
          if (HAL_ADC_Start_DMA(&hadc1,
 80009a6:	2220      	movs	r2, #32
 80009a8:	4981      	ldr	r1, [pc, #516]	; (8000bb0 <HAL_TIM_OC_DelayElapsedCallback+0x5a8>)
 80009aa:	4880      	ldr	r0, [pc, #512]	; (8000bac <HAL_TIM_OC_DelayElapsedCallback+0x5a4>)
 80009ac:	f002 fa9a 	bl	8002ee4 <HAL_ADC_Start_DMA>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <HAL_TIM_OC_DelayElapsedCallback+0x3b2>
          	(uint32_t *)aADCxConvertedData,
          	ADC_CONVERTED_DATA_BUFFER_SIZE)
        	!= HAL_OK) {
          	Error_Handler();
 80009b6:	f001 f943 	bl	8001c40 <Error_Handler>
          }

          uint16_t PF12 = aADCxConvertedData[2];		// BUSVmon -- sending as ENDMON
 80009ba:	4b7d      	ldr	r3, [pc, #500]	; (8000bb0 <HAL_TIM_OC_DelayElapsedCallback+0x5a8>)
 80009bc:	889b      	ldrh	r3, [r3, #4]
 80009be:	843b      	strh	r3, [r7, #32]
          uint16_t PA7 = aADCxConvertedData[3];			// BUSImon -- sending as n800vmon
 80009c0:	4b7b      	ldr	r3, [pc, #492]	; (8000bb0 <HAL_TIM_OC_DelayElapsedCallback+0x5a8>)
 80009c2:	88db      	ldrh	r3, [r3, #6]
 80009c4:	83fb      	strh	r3, [r7, #30]
          uint16_t PC5 = aADCxConvertedData[4];			// 2v5mon -- verified sending as TMP1 too
 80009c6:	4b7a      	ldr	r3, [pc, #488]	; (8000bb0 <HAL_TIM_OC_DelayElapsedCallback+0x5a8>)
 80009c8:	891b      	ldrh	r3, [r3, #8]
 80009ca:	83bb      	strh	r3, [r7, #28]
          uint16_t PB0 = aADCxConvertedData[5];			// 3v3mon -- verified sending as TMP2 too
 80009cc:	4b78      	ldr	r3, [pc, #480]	; (8000bb0 <HAL_TIM_OC_DelayElapsedCallback+0x5a8>)
 80009ce:	895b      	ldrh	r3, [r3, #10]
 80009d0:	837b      	strh	r3, [r7, #26]
          uint16_t PC0 = aADCxConvertedData[6];			// 5vmon -- verified
 80009d2:	4b77      	ldr	r3, [pc, #476]	; (8000bb0 <HAL_TIM_OC_DelayElapsedCallback+0x5a8>)
 80009d4:	899b      	ldrh	r3, [r3, #12]
 80009d6:	833b      	strh	r3, [r7, #24]
          uint16_t PC1 = aADCxConvertedData[7];			// n3v3mon -- verified sending as SWPMon too
 80009d8:	4b75      	ldr	r3, [pc, #468]	; (8000bb0 <HAL_TIM_OC_DelayElapsedCallback+0x5a8>)
 80009da:	89db      	ldrh	r3, [r3, #14]
 80009dc:	82fb      	strh	r3, [r7, #22]
          uint16_t PA2 = aADCxConvertedData[8];			// n5vmon -- verified
 80009de:	4b74      	ldr	r3, [pc, #464]	; (8000bb0 <HAL_TIM_OC_DelayElapsedCallback+0x5a8>)
 80009e0:	8a1b      	ldrh	r3, [r3, #16]
 80009e2:	82bb      	strh	r3, [r7, #20]
          uint16_t PA3 = aADCxConvertedData[9];			// 15vmon -- verified
 80009e4:	4b72      	ldr	r3, [pc, #456]	; (8000bb0 <HAL_TIM_OC_DelayElapsedCallback+0x5a8>)
 80009e6:	8a5b      	ldrh	r3, [r3, #18]
 80009e8:	827b      	strh	r3, [r7, #18]
          uint16_t PA0 = aADCxConvertedData[10];		// 5vrefmon -- verified
 80009ea:	4b71      	ldr	r3, [pc, #452]	; (8000bb0 <HAL_TIM_OC_DelayElapsedCallback+0x5a8>)
 80009ec:	8a9b      	ldrh	r3, [r3, #20]
 80009ee:	823b      	strh	r3, [r7, #16]
          uint16_t PA1 = aADCxConvertedData[11];		// n200vmon -- verified
 80009f0:	4b6f      	ldr	r3, [pc, #444]	; (8000bb0 <HAL_TIM_OC_DelayElapsedCallback+0x5a8>)
 80009f2:	8adb      	ldrh	r3, [r3, #22]
 80009f4:	81fb      	strh	r3, [r7, #14]
          uint16_t PA5 = aADCxConvertedData[12];		// n800vmon -- verified
 80009f6:	4b6e      	ldr	r3, [pc, #440]	; (8000bb0 <HAL_TIM_OC_DelayElapsedCallback+0x5a8>)
 80009f8:	8b1b      	ldrh	r3, [r3, #24]
 80009fa:	81bb      	strh	r3, [r7, #12]


          hk_buf[0] = hk_sync;                     		// HK SYNC 0xCC MSB					0 SYNC
 80009fc:	22cc      	movs	r2, #204	; 0xcc
 80009fe:	4b6d      	ldr	r3, [pc, #436]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000a00:	701a      	strb	r2, [r3, #0]
          hk_buf[1] = hk_sync;                     		// HK SYNC 0xCC LSB
 8000a02:	22cc      	movs	r2, #204	; 0xcc
 8000a04:	4b6b      	ldr	r3, [pc, #428]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000a06:	705a      	strb	r2, [r3, #1]
          hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    		// HK SEQ # MSB		1 SEQUENCE
 8000a08:	4b6b      	ldr	r3, [pc, #428]	; (8000bb8 <HAL_TIM_OC_DelayElapsedCallback+0x5b0>)
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	0a1b      	lsrs	r3, r3, #8
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b68      	ldr	r3, [pc, #416]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000a14:	709a      	strb	r2, [r3, #2]
          hk_buf[3] = (hk_seq & 0xFF);             		// HK SEQ # LSB
 8000a16:	4b68      	ldr	r3, [pc, #416]	; (8000bb8 <HAL_TIM_OC_DelayElapsedCallback+0x5b0>)
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	4b65      	ldr	r3, [pc, #404]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000a1e:	70da      	strb	r2, [r3, #3]
          hk_buf[4] = ((0 & 0xFF00) >> 8);
 8000a20:	4b64      	ldr	r3, [pc, #400]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	711a      	strb	r2, [r3, #4]
          hk_buf[5] = (0 & 0xFF);
 8000a26:	4b63      	ldr	r3, [pc, #396]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	715a      	strb	r2, [r3, #5]
          hk_buf[6] = ((0 & 0xFF00) >> 8);
 8000a2c:	4b61      	ldr	r3, [pc, #388]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	719a      	strb	r2, [r3, #6]
          hk_buf[7] = (0 & 0xFF);
 8000a32:	4b60      	ldr	r3, [pc, #384]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	71da      	strb	r2, [r3, #7]
          hk_buf[8] = ((output1 & 0xFF00) >> 8);
 8000a38:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000a3c:	121b      	asrs	r3, r3, #8
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	4b5c      	ldr	r3, [pc, #368]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000a42:	721a      	strb	r2, [r3, #8]
          hk_buf[9] = (output1 & 0xFF);
 8000a44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	4b5a      	ldr	r3, [pc, #360]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000a4a:	725a      	strb	r2, [r3, #9]
          hk_buf[10] = ((output2 & 0xFF00) >> 8);
 8000a4c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8000a50:	121b      	asrs	r3, r3, #8
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	4b57      	ldr	r3, [pc, #348]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000a56:	729a      	strb	r2, [r3, #10]
          hk_buf[11] = (output2 & 0xFF);
 8000a58:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	4b55      	ldr	r3, [pc, #340]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000a5e:	72da      	strb	r2, [r3, #11]
          hk_buf[12] = ((output3 & 0xFF00) >> 8);
 8000a60:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8000a64:	121b      	asrs	r3, r3, #8
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	4b52      	ldr	r3, [pc, #328]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000a6a:	731a      	strb	r2, [r3, #12]
          hk_buf[13] = (output3 & 0xFF);
 8000a6c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	4b50      	ldr	r3, [pc, #320]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000a72:	735a      	strb	r2, [r3, #13]
          hk_buf[14] = ((output4 & 0xFF00) >> 8);
 8000a74:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8000a78:	121b      	asrs	r3, r3, #8
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	4b4d      	ldr	r3, [pc, #308]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000a7e:	739a      	strb	r2, [r3, #14]
          hk_buf[15] = (output4 & 0xFF);
 8000a80:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b4b      	ldr	r3, [pc, #300]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000a86:	73da      	strb	r2, [r3, #15]
          hk_buf[16] = (PF12 & 0xFF);
 8000a88:	8c3b      	ldrh	r3, [r7, #32]
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	4b49      	ldr	r3, [pc, #292]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000a8e:	741a      	strb	r2, [r3, #16]
          hk_buf[17] = (PF12 & 0xFF);
 8000a90:	8c3b      	ldrh	r3, [r7, #32]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b47      	ldr	r3, [pc, #284]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000a96:	745a      	strb	r2, [r3, #17]
          hk_buf[18] = ((PA7 & 0xFF00) >> 8);
 8000a98:	8bfb      	ldrh	r3, [r7, #30]
 8000a9a:	0a1b      	lsrs	r3, r3, #8
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	4b44      	ldr	r3, [pc, #272]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000aa2:	749a      	strb	r2, [r3, #18]
          hk_buf[19] = (PA7 & 0xFF);
 8000aa4:	8bfb      	ldrh	r3, [r7, #30]
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	4b42      	ldr	r3, [pc, #264]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000aaa:	74da      	strb	r2, [r3, #19]
          hk_buf[20] = ((PC5 & 0xFF00) >> 8);
 8000aac:	8bbb      	ldrh	r3, [r7, #28]
 8000aae:	0a1b      	lsrs	r3, r3, #8
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	4b3f      	ldr	r3, [pc, #252]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000ab6:	751a      	strb	r2, [r3, #20]
          hk_buf[21] = (PC5 & 0xFF);
 8000ab8:	8bbb      	ldrh	r3, [r7, #28]
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	4b3d      	ldr	r3, [pc, #244]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000abe:	755a      	strb	r2, [r3, #21]
          hk_buf[22] = ((PB0 & 0xFF00) >> 8);
 8000ac0:	8b7b      	ldrh	r3, [r7, #26]
 8000ac2:	0a1b      	lsrs	r3, r3, #8
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	4b3a      	ldr	r3, [pc, #232]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000aca:	759a      	strb	r2, [r3, #22]
          hk_buf[23] = (PB0 & 0xFF);
 8000acc:	8b7b      	ldrh	r3, [r7, #26]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b38      	ldr	r3, [pc, #224]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000ad2:	75da      	strb	r2, [r3, #23]
          hk_buf[24] = ((PC0 & 0xFF00) >> 8);
 8000ad4:	8b3b      	ldrh	r3, [r7, #24]
 8000ad6:	0a1b      	lsrs	r3, r3, #8
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b35      	ldr	r3, [pc, #212]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000ade:	761a      	strb	r2, [r3, #24]
          hk_buf[25] = (PC0 & 0xFF);
 8000ae0:	8b3b      	ldrh	r3, [r7, #24]
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	4b33      	ldr	r3, [pc, #204]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000ae6:	765a      	strb	r2, [r3, #25]
          hk_buf[26] = ((PC1 & 0xFF00) >> 8);
 8000ae8:	8afb      	ldrh	r3, [r7, #22]
 8000aea:	0a1b      	lsrs	r3, r3, #8
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	4b30      	ldr	r3, [pc, #192]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000af2:	769a      	strb	r2, [r3, #26]
          hk_buf[27] = (PC1 & 0xFF);
 8000af4:	8afb      	ldrh	r3, [r7, #22]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	4b2e      	ldr	r3, [pc, #184]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000afa:	76da      	strb	r2, [r3, #27]
          hk_buf[28] = ((PA2 & 0xFF00) >> 8);
 8000afc:	8abb      	ldrh	r3, [r7, #20]
 8000afe:	0a1b      	lsrs	r3, r3, #8
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	4b2b      	ldr	r3, [pc, #172]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000b06:	771a      	strb	r2, [r3, #28]
          hk_buf[29] = (PA2 & 0xFF);
 8000b08:	8abb      	ldrh	r3, [r7, #20]
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	4b29      	ldr	r3, [pc, #164]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000b0e:	775a      	strb	r2, [r3, #29]
          hk_buf[30] = ((PA3 & 0xFF00) >> 8);
 8000b10:	8a7b      	ldrh	r3, [r7, #18]
 8000b12:	0a1b      	lsrs	r3, r3, #8
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000b1a:	779a      	strb	r2, [r3, #30]
          hk_buf[31] = (PA3 & 0xFF);
 8000b1c:	8a7b      	ldrh	r3, [r7, #18]
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	4b24      	ldr	r3, [pc, #144]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000b22:	77da      	strb	r2, [r3, #31]
          hk_buf[32] = ((PA0 & 0xFF00) >> 8);
 8000b24:	8a3b      	ldrh	r3, [r7, #16]
 8000b26:	0a1b      	lsrs	r3, r3, #8
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000b2e:	f883 2020 	strb.w	r2, [r3, #32]
          hk_buf[33] = (PA0 & 0xFF);
 8000b32:	8a3b      	ldrh	r3, [r7, #16]
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000b38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          hk_buf[34] = ((PA1 & 0xFF00) >> 8);
 8000b3c:	89fb      	ldrh	r3, [r7, #14]
 8000b3e:	0a1b      	lsrs	r3, r3, #8
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000b46:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
          hk_buf[35] = (PA1 & 0xFF);
 8000b4a:	89fb      	ldrh	r3, [r7, #14]
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000b50:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
          hk_buf[36] = ((PA5 & 0xFF00) >> 8);
 8000b54:	89bb      	ldrh	r3, [r7, #12]
 8000b56:	0a1b      	lsrs	r3, r3, #8
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          hk_buf[37] = (PA5 & 0xFF);
 8000b62:	89bb      	ldrh	r3, [r7, #12]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000b68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25


          if (HK_ON)
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <HAL_TIM_OC_DelayElapsedCallback+0x5b4>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d005      	beq.n	8000b80 <HAL_TIM_OC_DelayElapsedCallback+0x578>
          {
           HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000b74:	2364      	movs	r3, #100	; 0x64
 8000b76:	2226      	movs	r2, #38	; 0x26
 8000b78:	490e      	ldr	r1, [pc, #56]	; (8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x5ac>)
 8000b7a:	4811      	ldr	r0, [pc, #68]	; (8000bc0 <HAL_TIM_OC_DelayElapsedCallback+0x5b8>)
 8000b7c:	f00c f9b4 	bl	800cee8 <HAL_UART_Transmit>
          }
          hk_counter = 1;
 8000b80:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x5bc>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	601a      	str	r2, [r3, #0]
          hk_seq++;
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <HAL_TIM_OC_DelayElapsedCallback+0x5b0>)
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_TIM_OC_DelayElapsedCallback+0x5b0>)
 8000b90:	801a      	strh	r2, [r3, #0]
      }
    }
  }

  /* Timer 3 also called but doesn't need to do anything on IT */
}
 8000b92:	e065      	b.n	8000c60 <HAL_TIM_OC_DelayElapsedCallback+0x658>
          hk_counter++;
 8000b94:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x5bc>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x5bc>)
 8000b9c:	6013      	str	r3, [r2, #0]
}
 8000b9e:	e05f      	b.n	8000c60 <HAL_TIM_OC_DelayElapsedCallback+0x658>
 8000ba0:	240001b0 	.word	0x240001b0
 8000ba4:	0800ee0c 	.word	0x0800ee0c
 8000ba8:	0800ee18 	.word	0x0800ee18
 8000bac:	2400005c 	.word	0x2400005c
 8000bb0:	240004a0 	.word	0x240004a0
 8000bb4:	24000504 	.word	0x24000504
 8000bb8:	2400052a 	.word	0x2400052a
 8000bbc:	24000022 	.word	0x24000022
 8000bc0:	240003a4 	.word	0x240003a4
 8000bc4:	2400052c 	.word	0x2400052c
  else if (htim == &htim1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a27      	ldr	r2, [pc, #156]	; (8000c68 <HAL_TIM_OC_DelayElapsedCallback+0x660>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d147      	bne.n	8000c60 <HAL_TIM_OC_DelayElapsedCallback+0x658>
      if (PMT_ON)
 8000bd0:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <HAL_TIM_OC_DelayElapsedCallback+0x664>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d043      	beq.n	8000c60 <HAL_TIM_OC_DelayElapsedCallback+0x658>
    	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8000bd8:	bf00      	nop
 8000bda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bde:	4824      	ldr	r0, [pc, #144]	; (8000c70 <HAL_TIM_OC_DelayElapsedCallback+0x668>)
 8000be0:	f006 fb3a 	bl	8007258 <HAL_GPIO_ReadPin>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d1f7      	bne.n	8000bda <HAL_TIM_OC_DelayElapsedCallback+0x5d2>
  		HAL_SPI_Receive(&hspi1, (uint8_t *)spi1RxBuffer, 1, 1);
 8000bea:	2301      	movs	r3, #1
 8000bec:	2201      	movs	r2, #1
 8000bee:	4921      	ldr	r1, [pc, #132]	; (8000c74 <HAL_TIM_OC_DelayElapsedCallback+0x66c>)
 8000bf0:	4821      	ldr	r0, [pc, #132]	; (8000c78 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 8000bf2:	f00a fbaf 	bl	800b354 <HAL_SPI_Receive>
  		uint8_t SPI1_LSB = ((spi1RxBuffer[0] & 0xFF00) >> 8);
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  		uint8_t SPI1_MSB = (spi1RxBuffer[1] & 0xFF);
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <HAL_TIM_OC_DelayElapsedCallback+0x66c>)
 8000bfe:	785b      	ldrb	r3, [r3, #1]
 8000c00:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		hspi1.Instance->CR1 |= 1<<10; // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 8000c04:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c12:	601a      	str	r2, [r3, #0]
		pmt_buf[0] = pmt_sync;
 8000c14:	22bb      	movs	r2, #187	; 0xbb
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000c18:	701a      	strb	r2, [r3, #0]
		pmt_buf[1] = pmt_sync;
 8000c1a:	22bb      	movs	r2, #187	; 0xbb
 8000c1c:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000c1e:	705a      	strb	r2, [r3, #1]
		pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000c2c:	709a      	strb	r2, [r3, #2]
		pmt_buf[3] = (pmt_seq & 0xFF);
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000c36:	70da      	strb	r2, [r3, #3]
		pmt_buf[4] = SPI1_MSB;
 8000c38:	4a10      	ldr	r2, [pc, #64]	; (8000c7c <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000c3a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000c3e:	7113      	strb	r3, [r2, #4]
		pmt_buf[5] = SPI1_LSB;
 8000c40:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000c42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c46:	7153      	strb	r3, [r2, #5]
		pmt_seq++;
 8000c48:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000c52:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000c54:	2364      	movs	r3, #100	; 0x64
 8000c56:	2206      	movs	r2, #6
 8000c58:	4908      	ldr	r1, [pc, #32]	; (8000c7c <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000c5a:	480a      	ldr	r0, [pc, #40]	; (8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x67c>)
 8000c5c:	f00c f944 	bl	800cee8 <HAL_UART_Transmit>
}
 8000c60:	bf00      	nop
 8000c62:	3738      	adds	r7, #56	; 0x38
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	2400030c 	.word	0x2400030c
 8000c6c:	24000020 	.word	0x24000020
 8000c70:	58020000 	.word	0x58020000
 8000c74:	240004e4 	.word	0x240004e4
 8000c78:	240001fc 	.word	0x240001fc
 8000c7c:	240004fc 	.word	0x240004fc
 8000c80:	24000502 	.word	0x24000502
 8000c84:	240003a4 	.word	0x240003a4

08000c88 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]

  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000c90:	2201      	movs	r2, #1
 8000c92:	498e      	ldr	r1, [pc, #568]	; (8000ecc <HAL_UART_RxCpltCallback+0x244>)
 8000c94:	488e      	ldr	r0, [pc, #568]	; (8000ed0 <HAL_UART_RxCpltCallback+0x248>)
 8000c96:	f00c f9bd 	bl	800d014 <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000c9a:	4b8c      	ldr	r3, [pc, #560]	; (8000ecc <HAL_UART_RxCpltCallback+0x244>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	73fb      	strb	r3, [r7, #15]

  switch (key)
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	2b1c      	cmp	r3, #28
 8000ca4:	f200 810d 	bhi.w	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
 8000ca8:	a201      	add	r2, pc, #4	; (adr r2, 8000cb0 <HAL_UART_RxCpltCallback+0x28>)
 8000caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cae:	bf00      	nop
 8000cb0:	08000d8d 	.word	0x08000d8d
 8000cb4:	08000da9 	.word	0x08000da9
 8000cb8:	08000dc5 	.word	0x08000dc5
 8000cbc:	08000de5 	.word	0x08000de5
 8000cc0:	08000e05 	.word	0x08000e05
 8000cc4:	08000e21 	.word	0x08000e21
 8000cc8:	08000e41 	.word	0x08000e41
 8000ccc:	08000e61 	.word	0x08000e61
 8000cd0:	08000d41 	.word	0x08000d41
 8000cd4:	08000d4f 	.word	0x08000d4f
 8000cd8:	08000d33 	.word	0x08000d33
 8000cdc:	08000d25 	.word	0x08000d25
 8000ce0:	08000e7d 	.word	0x08000e7d
 8000ce4:	08000e8d 	.word	0x08000e8d
 8000ce8:	08000e9d 	.word	0x08000e9d
 8000cec:	08000ead 	.word	0x08000ead
 8000cf0:	08000e95 	.word	0x08000e95
 8000cf4:	08000ea5 	.word	0x08000ea5
 8000cf8:	08000eb5 	.word	0x08000eb5
 8000cfc:	08000d9b 	.word	0x08000d9b
 8000d00:	08000db7 	.word	0x08000db7
 8000d04:	08000dd5 	.word	0x08000dd5
 8000d08:	08000df5 	.word	0x08000df5
 8000d0c:	08000e13 	.word	0x08000e13
 8000d10:	08000e31 	.word	0x08000e31
 8000d14:	08000e51 	.word	0x08000e51
 8000d18:	08000e6f 	.word	0x08000e6f
 8000d1c:	08000d5d 	.word	0x08000d5d
 8000d20:	08000d75 	.word	0x08000d75
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000d24:	4b6b      	ldr	r3, [pc, #428]	; (8000ed4 <HAL_UART_RxCpltCallback+0x24c>)
 8000d26:	2140      	movs	r1, #64	; 0x40
 8000d28:	2201      	movs	r2, #1
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f006 faac 	bl	8007288 <HAL_GPIO_WritePin>
    break;
 8000d30:	e0c7      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000d32:	4b68      	ldr	r3, [pc, #416]	; (8000ed4 <HAL_UART_RxCpltCallback+0x24c>)
 8000d34:	2140      	movs	r1, #64	; 0x40
 8000d36:	2200      	movs	r2, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f006 faa5 	bl	8007288 <HAL_GPIO_WritePin>
    break;
 8000d3e:	e0c0      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
  }

  case 0x08:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 8000d40:	4b64      	ldr	r3, [pc, #400]	; (8000ed4 <HAL_UART_RxCpltCallback+0x24c>)
 8000d42:	2180      	movs	r1, #128	; 0x80
 8000d44:	2201      	movs	r2, #1
 8000d46:	4618      	mov	r0, r3
 8000d48:	f006 fa9e 	bl	8007288 <HAL_GPIO_WritePin>
    break;
 8000d4c:	e0b9      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x09:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 8000d4e:	4b61      	ldr	r3, [pc, #388]	; (8000ed4 <HAL_UART_RxCpltCallback+0x24c>)
 8000d50:	2180      	movs	r1, #128	; 0x80
 8000d52:	2200      	movs	r2, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f006 fa97 	bl	8007288 <HAL_GPIO_WritePin>
    break;
 8000d5a:	e0b2      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x1B:
  {
    if (step < 7)
 8000d5c:	4b5e      	ldr	r3, [pc, #376]	; (8000ed8 <HAL_UART_RxCpltCallback+0x250>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b06      	cmp	r3, #6
 8000d62:	f200 80ab 	bhi.w	8000ebc <HAL_UART_RxCpltCallback+0x234>
    {
      step++;
 8000d66:	4b5c      	ldr	r3, [pc, #368]	; (8000ed8 <HAL_UART_RxCpltCallback+0x250>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b5a      	ldr	r3, [pc, #360]	; (8000ed8 <HAL_UART_RxCpltCallback+0x250>)
 8000d70:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000d72:	e0a3      	b.n	8000ebc <HAL_UART_RxCpltCallback+0x234>
  }
  case 0x1C:
  {
    if (step > 0)
 8000d74:	4b58      	ldr	r3, [pc, #352]	; (8000ed8 <HAL_UART_RxCpltCallback+0x250>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f000 80a1 	beq.w	8000ec0 <HAL_UART_RxCpltCallback+0x238>
    {
      step--;
 8000d7e:	4b56      	ldr	r3, [pc, #344]	; (8000ed8 <HAL_UART_RxCpltCallback+0x250>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4b54      	ldr	r3, [pc, #336]	; (8000ed8 <HAL_UART_RxCpltCallback+0x250>)
 8000d88:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000d8a:	e099      	b.n	8000ec0 <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x00:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000d8c:	4b53      	ldr	r3, [pc, #332]	; (8000edc <HAL_UART_RxCpltCallback+0x254>)
 8000d8e:	2120      	movs	r1, #32
 8000d90:	2201      	movs	r2, #1
 8000d92:	4618      	mov	r0, r3
 8000d94:	f006 fa78 	bl	8007288 <HAL_GPIO_WritePin>
    break;
 8000d98:	e093      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x13:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000d9a:	4b50      	ldr	r3, [pc, #320]	; (8000edc <HAL_UART_RxCpltCallback+0x254>)
 8000d9c:	2120      	movs	r1, #32
 8000d9e:	2200      	movs	r2, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f006 fa71 	bl	8007288 <HAL_GPIO_WritePin>
    break;
 8000da6:	e08c      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x01:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000da8:	4b4c      	ldr	r3, [pc, #304]	; (8000edc <HAL_UART_RxCpltCallback+0x254>)
 8000daa:	2140      	movs	r1, #64	; 0x40
 8000dac:	2201      	movs	r2, #1
 8000dae:	4618      	mov	r0, r3
 8000db0:	f006 fa6a 	bl	8007288 <HAL_GPIO_WritePin>
    break;
 8000db4:	e085      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000db6:	4b49      	ldr	r3, [pc, #292]	; (8000edc <HAL_UART_RxCpltCallback+0x254>)
 8000db8:	2140      	movs	r1, #64	; 0x40
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f006 fa63 	bl	8007288 <HAL_GPIO_WritePin>
    break;
 8000dc2:	e07e      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000dc4:	4b46      	ldr	r3, [pc, #280]	; (8000ee0 <HAL_UART_RxCpltCallback+0x258>)
 8000dc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dca:	2201      	movs	r2, #1
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f006 fa5b 	bl	8007288 <HAL_GPIO_WritePin>
    break;
 8000dd2:	e076      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000dd4:	4b42      	ldr	r3, [pc, #264]	; (8000ee0 <HAL_UART_RxCpltCallback+0x258>)
 8000dd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dda:	2200      	movs	r2, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f006 fa53 	bl	8007288 <HAL_GPIO_WritePin>
    break;
 8000de2:	e06e      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000de4:	4b3e      	ldr	r3, [pc, #248]	; (8000ee0 <HAL_UART_RxCpltCallback+0x258>)
 8000de6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dea:	2201      	movs	r2, #1
 8000dec:	4618      	mov	r0, r3
 8000dee:	f006 fa4b 	bl	8007288 <HAL_GPIO_WritePin>
    break;
 8000df2:	e066      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000df4:	4b3a      	ldr	r3, [pc, #232]	; (8000ee0 <HAL_UART_RxCpltCallback+0x258>)
 8000df6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f006 fa43 	bl	8007288 <HAL_GPIO_WritePin>
    break;
 8000e02:	e05e      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000e04:	4b36      	ldr	r3, [pc, #216]	; (8000ee0 <HAL_UART_RxCpltCallback+0x258>)
 8000e06:	2180      	movs	r1, #128	; 0x80
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f006 fa3c 	bl	8007288 <HAL_GPIO_WritePin>
    break;
 8000e10:	e057      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000e12:	4b33      	ldr	r3, [pc, #204]	; (8000ee0 <HAL_UART_RxCpltCallback+0x258>)
 8000e14:	2180      	movs	r1, #128	; 0x80
 8000e16:	2200      	movs	r2, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f006 fa35 	bl	8007288 <HAL_GPIO_WritePin>
    break;
 8000e1e:	e050      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000e20:	4b2f      	ldr	r3, [pc, #188]	; (8000ee0 <HAL_UART_RxCpltCallback+0x258>)
 8000e22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e26:	2201      	movs	r2, #1
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f006 fa2d 	bl	8007288 <HAL_GPIO_WritePin>
    break;
 8000e2e:	e048      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000e30:	4b2b      	ldr	r3, [pc, #172]	; (8000ee0 <HAL_UART_RxCpltCallback+0x258>)
 8000e32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e36:	2200      	movs	r2, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f006 fa25 	bl	8007288 <HAL_GPIO_WritePin>
    break;
 8000e3e:	e040      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000e40:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <HAL_UART_RxCpltCallback+0x258>)
 8000e42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e46:	2201      	movs	r2, #1
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f006 fa1d 	bl	8007288 <HAL_GPIO_WritePin>
    break;
 8000e4e:	e038      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000e50:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <HAL_UART_RxCpltCallback+0x258>)
 8000e52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e56:	2200      	movs	r2, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f006 fa15 	bl	8007288 <HAL_GPIO_WritePin>
    break;
 8000e5e:	e030      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000e60:	4b1f      	ldr	r3, [pc, #124]	; (8000ee0 <HAL_UART_RxCpltCallback+0x258>)
 8000e62:	2140      	movs	r1, #64	; 0x40
 8000e64:	2201      	movs	r2, #1
 8000e66:	4618      	mov	r0, r3
 8000e68:	f006 fa0e 	bl	8007288 <HAL_GPIO_WritePin>
    break;
 8000e6c:	e029      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <HAL_UART_RxCpltCallback+0x258>)
 8000e70:	2140      	movs	r1, #64	; 0x40
 8000e72:	2200      	movs	r2, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f006 fa07 	bl	8007288 <HAL_GPIO_WritePin>
    break;
 8000e7a:	e022      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x0C:
  {
      HAL_SuspendTick();
 8000e7c:	f001 fc3c 	bl	80026f8 <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000e80:	2101      	movs	r1, #1
 8000e82:	2001      	movs	r0, #1
 8000e84:	f006 ffa4 	bl	8007dd0 <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8000e88:	f7ff fba8 	bl	80005dc <__NVIC_SystemReset>
      break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <HAL_UART_RxCpltCallback+0x25c>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	701a      	strb	r2, [r3, #0]
    break;
 8000e92:	e016      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x10:
  {
    PMT_ON = 0;
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <HAL_UART_RxCpltCallback+0x25c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
    break;
 8000e9a:	e012      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_UART_RxCpltCallback+0x260>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
    break;
 8000ea2:	e00e      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 8000ea4:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <HAL_UART_RxCpltCallback+0x260>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
    break;
 8000eaa:	e00a      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x0F:
  {
    HK_ON = 1;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <HAL_UART_RxCpltCallback+0x264>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	701a      	strb	r2, [r3, #0]
    break;
 8000eb2:	e006      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x12:
  {
    HK_ON = 0;
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <HAL_UART_RxCpltCallback+0x264>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
    break;
 8000eba:	e002      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
    break;
 8000ebc:	bf00      	nop
 8000ebe:	e000      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0x23a>
    break;
 8000ec0:	bf00      	nop
  }
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	24000434 	.word	0x24000434
 8000ed0:	240003a4 	.word	0x240003a4
 8000ed4:	58021400 	.word	0x58021400
 8000ed8:	240004e0 	.word	0x240004e0
 8000edc:	58020400 	.word	0x58020400
 8000ee0:	58020800 	.word	0x58020800
 8000ee4:	24000020 	.word	0x24000020
 8000ee8:	24000021 	.word	0x24000021
 8000eec:	24000022 	.word	0x24000022

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef4:	f001 fb4a 	bl	800258c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef8:	f000 f884 	bl	8001004 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000efc:	f000 f908 	bl	8001110 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f00:	f000 fd74 	bl	80019ec <MX_GPIO_Init>
  MX_DAC1_Init();
 8000f04:	f000 fafa 	bl	80014fc <MX_DAC1_Init>
  MX_TIM1_Init();
 8000f08:	f000 fc1a 	bl	8001740 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f0c:	f000 fca8 	bl	8001860 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000f10:	f000 fb26 	bl	8001560 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f14:	f000 fb64 	bl	80015e0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000f18:	f000 fbba 	bl	8001690 <MX_SPI2_Init>
  MX_DMA_Init();
 8000f1c:	f000 fd46 	bl	80019ac <MX_DMA_Init>
  MX_ADC1_Init();
 8000f20:	f000 f924 	bl	800116c <MX_ADC1_Init>
  MX_ADC3_Init();
 8000f24:	f000 fa88 	bl	8001438 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8000f28:	f000 fcf4 	bl	8001914 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	482d      	ldr	r0, [pc, #180]	; (8000fe4 <main+0xf4>)
 8000f30:	f003 fa69 	bl	8004406 <HAL_DAC_Start>

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8000f34:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000f38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000f3c:	482a      	ldr	r0, [pc, #168]	; (8000fe8 <main+0xf8>)
 8000f3e:	f002 ffef 	bl	8003f20 <HAL_ADCEx_Calibration_Start>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <main+0x5c>
  {
    /* Calibration Error */
    Error_Handler();
 8000f48:	f000 fe7a 	bl	8001c40 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8000f4c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000f50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000f54:	4825      	ldr	r0, [pc, #148]	; (8000fec <main+0xfc>)
 8000f56:	f002 ffe3 	bl	8003f20 <HAL_ADCEx_Calibration_Start>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <main+0x74>
  {
	/* Calibration Error */
	Error_Handler();
 8000f60:	f000 fe6e 	bl	8001c40 <Error_Handler>
  }

  /* Start Timers with OC & Interrupt */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000f64:	2100      	movs	r1, #0
 8000f66:	4822      	ldr	r0, [pc, #136]	; (8000ff0 <main+0x100>)
 8000f68:	f00a fea2 	bl	800bcb0 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000f6c:	210c      	movs	r1, #12
 8000f6e:	4821      	ldr	r0, [pc, #132]	; (8000ff4 <main+0x104>)
 8000f70:	f00a fe9e 	bl	800bcb0 <HAL_TIM_OC_Start_IT>

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8000f74:	bf00      	nop
 8000f76:	4b20      	ldr	r3, [pc, #128]	; (8000ff8 <main+0x108>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	69db      	ldr	r3, [r3, #28]
 8000f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f84:	d0f7      	beq.n	8000f76 <main+0x86>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8000f86:	bf00      	nop
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <main+0x108>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f96:	d1f7      	bne.n	8000f88 <main+0x98>

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8000f98:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <main+0x10c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <main+0x10c>)
 8000fa0:	2210      	movs	r2, #16
 8000fa2:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x5B; // send "["
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <main+0x10c>)
 8000fa6:	225b      	movs	r2, #91	; 0x5b
 8000fa8:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <main+0x10c>)
 8000fac:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000fb0:	4811      	ldr	r0, [pc, #68]	; (8000ff8 <main+0x108>)
 8000fb2:	f00d fd3f 	bl	800ea34 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <main+0xd0>
      Error_Handler();
 8000fbc:	f000 fe40 	bl	8001c40 <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8000fc0:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <main+0x108>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <main+0x108>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000fce:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 8000fd0:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <main+0x108>)
 8000fd2:	f00d fd8a 	bl	800eaea <HAL_UARTEx_EnableStopMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4909      	ldr	r1, [pc, #36]	; (8001000 <main+0x110>)
 8000fda:	4807      	ldr	r0, [pc, #28]	; (8000ff8 <main+0x108>)
 8000fdc:	f00c f81a 	bl	800d014 <HAL_UART_Receive_IT>
 8000fe0:	e7f9      	b.n	8000fd6 <main+0xe6>
 8000fe2:	bf00      	nop
 8000fe4:	2400019c 	.word	0x2400019c
 8000fe8:	2400005c 	.word	0x2400005c
 8000fec:	240000c0 	.word	0x240000c0
 8000ff0:	2400030c 	.word	0x2400030c
 8000ff4:	24000358 	.word	0x24000358
 8000ff8:	240003a4 	.word	0x240003a4
 8000ffc:	24000498 	.word	0x24000498
 8001000:	24000434 	.word	0x24000434

08001004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b09c      	sub	sp, #112	; 0x70
 8001008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100e:	224c      	movs	r2, #76	; 0x4c
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f00d fee6 	bl	800ede4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2220      	movs	r2, #32
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f00d fee0 	bl	800ede4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001024:	2002      	movs	r0, #2
 8001026:	f006 ff0f 	bl	8007e48 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800102a:	2300      	movs	r3, #0
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	4b35      	ldr	r3, [pc, #212]	; (8001104 <SystemClock_Config+0x100>)
 8001030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001032:	4a34      	ldr	r2, [pc, #208]	; (8001104 <SystemClock_Config+0x100>)
 8001034:	f023 0301 	bic.w	r3, r3, #1
 8001038:	62d3      	str	r3, [r2, #44]	; 0x2c
 800103a:	4b32      	ldr	r3, [pc, #200]	; (8001104 <SystemClock_Config+0x100>)
 800103c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	4b30      	ldr	r3, [pc, #192]	; (8001108 <SystemClock_Config+0x104>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800104c:	4a2e      	ldr	r2, [pc, #184]	; (8001108 <SystemClock_Config+0x104>)
 800104e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001052:	6193      	str	r3, [r2, #24]
 8001054:	4b2c      	ldr	r3, [pc, #176]	; (8001108 <SystemClock_Config+0x104>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001060:	bf00      	nop
 8001062:	4b29      	ldr	r3, [pc, #164]	; (8001108 <SystemClock_Config+0x104>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800106a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800106e:	d1f8      	bne.n	8001062 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001070:	4b26      	ldr	r3, [pc, #152]	; (800110c <SystemClock_Config+0x108>)
 8001072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001074:	4a25      	ldr	r2, [pc, #148]	; (800110c <SystemClock_Config+0x108>)
 8001076:	f023 0303 	bic.w	r3, r3, #3
 800107a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800107c:	2302      	movs	r3, #2
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001080:	2301      	movs	r3, #1
 8001082:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001084:	2340      	movs	r3, #64	; 0x40
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001088:	2302      	movs	r3, #2
 800108a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800108c:	2300      	movs	r3, #0
 800108e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001090:	2304      	movs	r3, #4
 8001092:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001094:	230c      	movs	r3, #12
 8001096:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001098:	2302      	movs	r3, #2
 800109a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800109c:	2302      	movs	r3, #2
 800109e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010a0:	2302      	movs	r3, #2
 80010a2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010a4:	230c      	movs	r3, #12
 80010a6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b4:	4618      	mov	r0, r3
 80010b6:	f006 ff01 	bl	8007ebc <HAL_RCC_OscConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010c0:	f000 fdbe 	bl	8001c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c4:	233f      	movs	r3, #63	; 0x3f
 80010c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c8:	2303      	movs	r3, #3
 80010ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 80010cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2101      	movs	r1, #1
 80010ea:	4618      	mov	r0, r3
 80010ec:	f007 fb14 	bl	8008718 <HAL_RCC_ClockConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80010f6:	f000 fda3 	bl	8001c40 <Error_Handler>
  }
}
 80010fa:	bf00      	nop
 80010fc:	3770      	adds	r7, #112	; 0x70
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	58000400 	.word	0x58000400
 8001108:	58024800 	.word	0x58024800
 800110c:	58024400 	.word	0x58024400

08001110 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b0b0      	sub	sp, #192	; 0xc0
 8001114:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	22bc      	movs	r2, #188	; 0xbc
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f00d fe61 	bl	800ede4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001122:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001126:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001128:	2304      	movs	r3, #4
 800112a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 800112c:	2309      	movs	r3, #9
 800112e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001130:	2304      	movs	r3, #4
 8001132:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001134:	2302      	movs	r3, #2
 8001136:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001138:	2302      	movs	r3, #2
 800113a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800113c:	23c0      	movs	r3, #192	; 0xc0
 800113e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001140:	2320      	movs	r3, #32
 8001142:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001144:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800114a:	2300      	movs	r3, #0
 800114c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	4618      	mov	r0, r3
 8001154:	f007 fe6c 	bl	8008e30 <HAL_RCCEx_PeriphCLKConfig>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 800115e:	f000 fd6f 	bl	8001c40 <Error_Handler>
  }
}
 8001162:	bf00      	nop
 8001164:	37c0      	adds	r7, #192	; 0xc0
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800117e:	463b      	mov	r3, r7
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
 800118c:	615a      	str	r2, [r3, #20]
 800118e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001190:	4b98      	ldr	r3, [pc, #608]	; (80013f4 <MX_ADC1_Init+0x288>)
 8001192:	4a99      	ldr	r2, [pc, #612]	; (80013f8 <MX_ADC1_Init+0x28c>)
 8001194:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001196:	4b97      	ldr	r3, [pc, #604]	; (80013f4 <MX_ADC1_Init+0x288>)
 8001198:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800119c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800119e:	4b95      	ldr	r3, [pc, #596]	; (80013f4 <MX_ADC1_Init+0x288>)
 80011a0:	2208      	movs	r2, #8
 80011a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011a4:	4b93      	ldr	r3, [pc, #588]	; (80013f4 <MX_ADC1_Init+0x288>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011aa:	4b92      	ldr	r3, [pc, #584]	; (80013f4 <MX_ADC1_Init+0x288>)
 80011ac:	2204      	movs	r2, #4
 80011ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011b0:	4b90      	ldr	r3, [pc, #576]	; (80013f4 <MX_ADC1_Init+0x288>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011b6:	4b8f      	ldr	r3, [pc, #572]	; (80013f4 <MX_ADC1_Init+0x288>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 15;
 80011bc:	4b8d      	ldr	r3, [pc, #564]	; (80013f4 <MX_ADC1_Init+0x288>)
 80011be:	220f      	movs	r2, #15
 80011c0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011c2:	4b8c      	ldr	r3, [pc, #560]	; (80013f4 <MX_ADC1_Init+0x288>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011c8:	4b8a      	ldr	r3, [pc, #552]	; (80013f4 <MX_ADC1_Init+0x288>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ce:	4b89      	ldr	r3, [pc, #548]	; (80013f4 <MX_ADC1_Init+0x288>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80011d4:	4b87      	ldr	r3, [pc, #540]	; (80013f4 <MX_ADC1_Init+0x288>)
 80011d6:	2203      	movs	r2, #3
 80011d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011da:	4b86      	ldr	r3, [pc, #536]	; (80013f4 <MX_ADC1_Init+0x288>)
 80011dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80011e2:	4b84      	ldr	r3, [pc, #528]	; (80013f4 <MX_ADC1_Init+0x288>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011e8:	4b82      	ldr	r3, [pc, #520]	; (80013f4 <MX_ADC1_Init+0x288>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011f0:	4880      	ldr	r0, [pc, #512]	; (80013f4 <MX_ADC1_Init+0x288>)
 80011f2:	f001 fcd5 	bl	8002ba0 <HAL_ADC_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80011fc:	f000 fd20 	bl	8001c40 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	4619      	mov	r1, r3
 800120a:	487a      	ldr	r0, [pc, #488]	; (80013f4 <MX_ADC1_Init+0x288>)
 800120c:	f002 feec 	bl	8003fe8 <HAL_ADCEx_MultiModeConfigChannel>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001216:	f000 fd13 	bl	8001c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800121a:	4b78      	ldr	r3, [pc, #480]	; (80013fc <MX_ADC1_Init+0x290>)
 800121c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800121e:	2306      	movs	r3, #6
 8001220:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001222:	2307      	movs	r3, #7
 8001224:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001226:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800122a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800122c:	2304      	movs	r3, #4
 800122e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	4619      	mov	r1, r3
 800123c:	486d      	ldr	r0, [pc, #436]	; (80013f4 <MX_ADC1_Init+0x288>)
 800123e:	f001 ff81 	bl	8003144 <HAL_ADC_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001248:	f000 fcfa 	bl	8001c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800124c:	4b6c      	ldr	r3, [pc, #432]	; (8001400 <MX_ADC1_Init+0x294>)
 800124e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001250:	230c      	movs	r3, #12
 8001252:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001254:	463b      	mov	r3, r7
 8001256:	4619      	mov	r1, r3
 8001258:	4866      	ldr	r0, [pc, #408]	; (80013f4 <MX_ADC1_Init+0x288>)
 800125a:	f001 ff73 	bl	8003144 <HAL_ADC_ConfigChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001264:	f000 fcec 	bl	8001c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001268:	4b66      	ldr	r3, [pc, #408]	; (8001404 <MX_ADC1_Init+0x298>)
 800126a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800126c:	2312      	movs	r3, #18
 800126e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	4619      	mov	r1, r3
 8001274:	485f      	ldr	r0, [pc, #380]	; (80013f4 <MX_ADC1_Init+0x288>)
 8001276:	f001 ff65 	bl	8003144 <HAL_ADC_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001280:	f000 fcde 	bl	8001c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001284:	4b60      	ldr	r3, [pc, #384]	; (8001408 <MX_ADC1_Init+0x29c>)
 8001286:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001288:	2318      	movs	r3, #24
 800128a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800128c:	463b      	mov	r3, r7
 800128e:	4619      	mov	r1, r3
 8001290:	4858      	ldr	r0, [pc, #352]	; (80013f4 <MX_ADC1_Init+0x288>)
 8001292:	f001 ff57 	bl	8003144 <HAL_ADC_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 800129c:	f000 fcd0 	bl	8001c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80012a0:	4b5a      	ldr	r3, [pc, #360]	; (800140c <MX_ADC1_Init+0x2a0>)
 80012a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80012a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012aa:	463b      	mov	r3, r7
 80012ac:	4619      	mov	r1, r3
 80012ae:	4851      	ldr	r0, [pc, #324]	; (80013f4 <MX_ADC1_Init+0x288>)
 80012b0:	f001 ff48 	bl	8003144 <HAL_ADC_ConfigChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80012ba:	f000 fcc1 	bl	8001c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80012be:	4b54      	ldr	r3, [pc, #336]	; (8001410 <MX_ADC1_Init+0x2a4>)
 80012c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80012c2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80012c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	4619      	mov	r1, r3
 80012cc:	4849      	ldr	r0, [pc, #292]	; (80013f4 <MX_ADC1_Init+0x288>)
 80012ce:	f001 ff39 	bl	8003144 <HAL_ADC_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80012d8:	f000 fcb2 	bl	8001c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012dc:	4b4d      	ldr	r3, [pc, #308]	; (8001414 <MX_ADC1_Init+0x2a8>)
 80012de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80012e0:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80012e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e6:	463b      	mov	r3, r7
 80012e8:	4619      	mov	r1, r3
 80012ea:	4842      	ldr	r0, [pc, #264]	; (80013f4 <MX_ADC1_Init+0x288>)
 80012ec:	f001 ff2a 	bl	8003144 <HAL_ADC_ConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80012f6:	f000 fca3 	bl	8001c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012fa:	4b47      	ldr	r3, [pc, #284]	; (8001418 <MX_ADC1_Init+0x2ac>)
 80012fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80012fe:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001302:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001304:	463b      	mov	r3, r7
 8001306:	4619      	mov	r1, r3
 8001308:	483a      	ldr	r0, [pc, #232]	; (80013f4 <MX_ADC1_Init+0x288>)
 800130a:	f001 ff1b 	bl	8003144 <HAL_ADC_ConfigChannel>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001314:	f000 fc94 	bl	8001c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001318:	4b40      	ldr	r3, [pc, #256]	; (800141c <MX_ADC1_Init+0x2b0>)
 800131a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800131c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001320:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001322:	463b      	mov	r3, r7
 8001324:	4619      	mov	r1, r3
 8001326:	4833      	ldr	r0, [pc, #204]	; (80013f4 <MX_ADC1_Init+0x288>)
 8001328:	f001 ff0c 	bl	8003144 <HAL_ADC_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001332:	f000 fc85 	bl	8001c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001336:	4b3a      	ldr	r3, [pc, #232]	; (8001420 <MX_ADC1_Init+0x2b4>)
 8001338:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800133a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800133e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001340:	463b      	mov	r3, r7
 8001342:	4619      	mov	r1, r3
 8001344:	482b      	ldr	r0, [pc, #172]	; (80013f4 <MX_ADC1_Init+0x288>)
 8001346:	f001 fefd 	bl	8003144 <HAL_ADC_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001350:	f000 fc76 	bl	8001c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001354:	4b33      	ldr	r3, [pc, #204]	; (8001424 <MX_ADC1_Init+0x2b8>)
 8001356:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001358:	f240 2306 	movw	r3, #518	; 0x206
 800135c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800135e:	463b      	mov	r3, r7
 8001360:	4619      	mov	r1, r3
 8001362:	4824      	ldr	r0, [pc, #144]	; (80013f4 <MX_ADC1_Init+0x288>)
 8001364:	f001 feee 	bl	8003144 <HAL_ADC_ConfigChannel>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 800136e:	f000 fc67 	bl	8001c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001372:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <MX_ADC1_Init+0x2bc>)
 8001374:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8001376:	f44f 7303 	mov.w	r3, #524	; 0x20c
 800137a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800137c:	463b      	mov	r3, r7
 800137e:	4619      	mov	r1, r3
 8001380:	481c      	ldr	r0, [pc, #112]	; (80013f4 <MX_ADC1_Init+0x288>)
 8001382:	f001 fedf 	bl	8003144 <HAL_ADC_ConfigChannel>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_ADC1_Init+0x224>
  {
    Error_Handler();
 800138c:	f000 fc58 	bl	8001c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001390:	4b26      	ldr	r3, [pc, #152]	; (800142c <MX_ADC1_Init+0x2c0>)
 8001392:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8001394:	f240 2312 	movw	r3, #530	; 0x212
 8001398:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139a:	463b      	mov	r3, r7
 800139c:	4619      	mov	r1, r3
 800139e:	4815      	ldr	r0, [pc, #84]	; (80013f4 <MX_ADC1_Init+0x288>)
 80013a0:	f001 fed0 	bl	8003144 <HAL_ADC_ConfigChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_ADC1_Init+0x242>
  {
    Error_Handler();
 80013aa:	f000 fc49 	bl	8001c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80013ae:	4b20      	ldr	r3, [pc, #128]	; (8001430 <MX_ADC1_Init+0x2c4>)
 80013b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 80013b2:	f44f 7306 	mov.w	r3, #536	; 0x218
 80013b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b8:	463b      	mov	r3, r7
 80013ba:	4619      	mov	r1, r3
 80013bc:	480d      	ldr	r0, [pc, #52]	; (80013f4 <MX_ADC1_Init+0x288>)
 80013be:	f001 fec1 	bl	8003144 <HAL_ADC_ConfigChannel>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_ADC1_Init+0x260>
  {
    Error_Handler();
 80013c8:	f000 fc3a 	bl	8001c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <MX_ADC1_Init+0x2c8>)
 80013ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 80013d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d6:	463b      	mov	r3, r7
 80013d8:	4619      	mov	r1, r3
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <MX_ADC1_Init+0x288>)
 80013dc:	f001 feb2 	bl	8003144 <HAL_ADC_ConfigChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_ADC1_Init+0x27e>
  {
    Error_Handler();
 80013e6:	f000 fc2b 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	3728      	adds	r7, #40	; 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2400005c 	.word	0x2400005c
 80013f8:	40022000 	.word	0x40022000
 80013fc:	08600004 	.word	0x08600004
 8001400:	0c900008 	.word	0x0c900008
 8001404:	10c00010 	.word	0x10c00010
 8001408:	14f00020 	.word	0x14f00020
 800140c:	19200040 	.word	0x19200040
 8001410:	1d500080 	.word	0x1d500080
 8001414:	21800100 	.word	0x21800100
 8001418:	25b00200 	.word	0x25b00200
 800141c:	2a000400 	.word	0x2a000400
 8001420:	2e300800 	.word	0x2e300800
 8001424:	3ac04000 	.word	0x3ac04000
 8001428:	3ef08000 	.word	0x3ef08000
 800142c:	43210000 	.word	0x43210000
 8001430:	47520000 	.word	0x47520000
 8001434:	4fb80000 	.word	0x4fb80000

08001438 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
 800144c:	615a      	str	r2, [r3, #20]
 800144e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001450:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <MX_ADC3_Init+0xb8>)
 8001452:	4a28      	ldr	r2, [pc, #160]	; (80014f4 <MX_ADC3_Init+0xbc>)
 8001454:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8001456:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <MX_ADC3_Init+0xb8>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800145c:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <MX_ADC3_Init+0xb8>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001462:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <MX_ADC3_Init+0xb8>)
 8001464:	2204      	movs	r2, #4
 8001466:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001468:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <MX_ADC3_Init+0xb8>)
 800146a:	2200      	movs	r2, #0
 800146c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <MX_ADC3_Init+0xb8>)
 8001470:	2200      	movs	r2, #0
 8001472:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8001474:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <MX_ADC3_Init+0xb8>)
 8001476:	2201      	movs	r2, #1
 8001478:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <MX_ADC3_Init+0xb8>)
 800147c:	2200      	movs	r2, #0
 800147e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001480:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <MX_ADC3_Init+0xb8>)
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001486:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <MX_ADC3_Init+0xb8>)
 8001488:	2200      	movs	r2, #0
 800148a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800148c:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <MX_ADC3_Init+0xb8>)
 800148e:	2200      	movs	r2, #0
 8001490:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001492:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <MX_ADC3_Init+0xb8>)
 8001494:	2200      	movs	r2, #0
 8001496:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001498:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <MX_ADC3_Init+0xb8>)
 800149a:	2200      	movs	r2, #0
 800149c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800149e:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <MX_ADC3_Init+0xb8>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80014a6:	4812      	ldr	r0, [pc, #72]	; (80014f0 <MX_ADC3_Init+0xb8>)
 80014a8:	f001 fb7a 	bl	8002ba0 <HAL_ADC_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 80014b2:	f000 fbc5 	bl	8001c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <MX_ADC3_Init+0xc0>)
 80014b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014ba:	2306      	movs	r3, #6
 80014bc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014c2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80014c6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014c8:	2304      	movs	r3, #4
 80014ca:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	4619      	mov	r1, r3
 80014d8:	4805      	ldr	r0, [pc, #20]	; (80014f0 <MX_ADC3_Init+0xb8>)
 80014da:	f001 fe33 	bl	8003144 <HAL_ADC_ConfigChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80014e4:	f000 fbac 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	3720      	adds	r7, #32
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	240000c0 	.word	0x240000c0
 80014f4:	58026000 	.word	0x58026000
 80014f8:	cfb80000 	.word	0xcfb80000

080014fc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2224      	movs	r2, #36	; 0x24
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f00d fc6b 	bl	800ede4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800150e:	4b12      	ldr	r3, [pc, #72]	; (8001558 <MX_DAC1_Init+0x5c>)
 8001510:	4a12      	ldr	r2, [pc, #72]	; (800155c <MX_DAC1_Init+0x60>)
 8001512:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001514:	4810      	ldr	r0, [pc, #64]	; (8001558 <MX_DAC1_Init+0x5c>)
 8001516:	f002 ff54 	bl	80043c2 <HAL_DAC_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001520:	f000 fb8e 	bl	8001c40 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001530:	2301      	movs	r3, #1
 8001532:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	2200      	movs	r2, #0
 800153c:	4619      	mov	r1, r3
 800153e:	4806      	ldr	r0, [pc, #24]	; (8001558 <MX_DAC1_Init+0x5c>)
 8001540:	f002 ffb4 	bl	80044ac <HAL_DAC_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800154a:	f000 fb79 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	3728      	adds	r7, #40	; 0x28
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2400019c 	.word	0x2400019c
 800155c:	40007400 	.word	0x40007400

08001560 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <MX_I2C1_Init+0x74>)
 8001566:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <MX_I2C1_Init+0x78>)
 8001568:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <MX_I2C1_Init+0x74>)
 800156c:	4a1b      	ldr	r2, [pc, #108]	; (80015dc <MX_I2C1_Init+0x7c>)
 800156e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001570:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <MX_I2C1_Init+0x74>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001576:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <MX_I2C1_Init+0x74>)
 8001578:	2201      	movs	r2, #1
 800157a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <MX_I2C1_Init+0x74>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001582:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <MX_I2C1_Init+0x74>)
 8001584:	2200      	movs	r2, #0
 8001586:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <MX_I2C1_Init+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_I2C1_Init+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <MX_I2C1_Init+0x74>)
 8001596:	2200      	movs	r2, #0
 8001598:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800159a:	480e      	ldr	r0, [pc, #56]	; (80015d4 <MX_I2C1_Init+0x74>)
 800159c:	f005 fe8e 	bl	80072bc <HAL_I2C_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015a6:	f000 fb4b 	bl	8001c40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015aa:	2100      	movs	r1, #0
 80015ac:	4809      	ldr	r0, [pc, #36]	; (80015d4 <MX_I2C1_Init+0x74>)
 80015ae:	f006 fb77 	bl	8007ca0 <HAL_I2CEx_ConfigAnalogFilter>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015b8:	f000 fb42 	bl	8001c40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015bc:	2100      	movs	r1, #0
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_I2C1_Init+0x74>)
 80015c0:	f006 fbb9 	bl	8007d36 <HAL_I2CEx_ConfigDigitalFilter>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015ca:	f000 fb39 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	240001b0 	.word	0x240001b0
 80015d8:	40005400 	.word	0x40005400
 80015dc:	20303e5d 	.word	0x20303e5d

080015e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015e4:	4b28      	ldr	r3, [pc, #160]	; (8001688 <MX_SPI1_Init+0xa8>)
 80015e6:	4a29      	ldr	r2, [pc, #164]	; (800168c <MX_SPI1_Init+0xac>)
 80015e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ea:	4b27      	ldr	r3, [pc, #156]	; (8001688 <MX_SPI1_Init+0xa8>)
 80015ec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80015f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80015f2:	4b25      	ldr	r3, [pc, #148]	; (8001688 <MX_SPI1_Init+0xa8>)
 80015f4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015f8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80015fa:	4b23      	ldr	r3, [pc, #140]	; (8001688 <MX_SPI1_Init+0xa8>)
 80015fc:	220f      	movs	r2, #15
 80015fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <MX_SPI1_Init+0xa8>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <MX_SPI1_Init+0xa8>)
 8001608:	2200      	movs	r2, #0
 800160a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <MX_SPI1_Init+0xa8>)
 800160e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001612:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001614:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <MX_SPI1_Init+0xa8>)
 8001616:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800161a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <MX_SPI1_Init+0xa8>)
 800161e:	2200      	movs	r2, #0
 8001620:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <MX_SPI1_Init+0xa8>)
 8001624:	2200      	movs	r2, #0
 8001626:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <MX_SPI1_Init+0xa8>)
 800162a:	2200      	movs	r2, #0
 800162c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800162e:	4b16      	ldr	r3, [pc, #88]	; (8001688 <MX_SPI1_Init+0xa8>)
 8001630:	2200      	movs	r2, #0
 8001632:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <MX_SPI1_Init+0xa8>)
 8001636:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800163a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <MX_SPI1_Init+0xa8>)
 800163e:	2200      	movs	r2, #0
 8001640:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <MX_SPI1_Init+0xa8>)
 8001644:	2200      	movs	r2, #0
 8001646:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <MX_SPI1_Init+0xa8>)
 800164a:	2200      	movs	r2, #0
 800164c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <MX_SPI1_Init+0xa8>)
 8001650:	2200      	movs	r2, #0
 8001652:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <MX_SPI1_Init+0xa8>)
 8001656:	2200      	movs	r2, #0
 8001658:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <MX_SPI1_Init+0xa8>)
 800165c:	2200      	movs	r2, #0
 800165e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_SPI1_Init+0xa8>)
 8001662:	2200      	movs	r2, #0
 8001664:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <MX_SPI1_Init+0xa8>)
 8001668:	2200      	movs	r2, #0
 800166a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_SPI1_Init+0xa8>)
 800166e:	2200      	movs	r2, #0
 8001670:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_SPI1_Init+0xa8>)
 8001674:	f009 fd68 	bl	800b148 <HAL_SPI_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800167e:	f000 fadf 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	240001fc 	.word	0x240001fc
 800168c:	40013000 	.word	0x40013000

08001690 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001694:	4b28      	ldr	r3, [pc, #160]	; (8001738 <MX_SPI2_Init+0xa8>)
 8001696:	4a29      	ldr	r2, [pc, #164]	; (800173c <MX_SPI2_Init+0xac>)
 8001698:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800169a:	4b27      	ldr	r3, [pc, #156]	; (8001738 <MX_SPI2_Init+0xa8>)
 800169c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80016a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80016a2:	4b25      	ldr	r3, [pc, #148]	; (8001738 <MX_SPI2_Init+0xa8>)
 80016a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016a8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80016aa:	4b23      	ldr	r3, [pc, #140]	; (8001738 <MX_SPI2_Init+0xa8>)
 80016ac:	220f      	movs	r2, #15
 80016ae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016b0:	4b21      	ldr	r3, [pc, #132]	; (8001738 <MX_SPI2_Init+0xa8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <MX_SPI2_Init+0xa8>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016bc:	4b1e      	ldr	r3, [pc, #120]	; (8001738 <MX_SPI2_Init+0xa8>)
 80016be:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016c2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80016c4:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <MX_SPI2_Init+0xa8>)
 80016c6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80016ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016cc:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <MX_SPI2_Init+0xa8>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016d2:	4b19      	ldr	r3, [pc, #100]	; (8001738 <MX_SPI2_Init+0xa8>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <MX_SPI2_Init+0xa8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80016de:	4b16      	ldr	r3, [pc, #88]	; (8001738 <MX_SPI2_Init+0xa8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <MX_SPI2_Init+0xa8>)
 80016e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ea:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <MX_SPI2_Init+0xa8>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <MX_SPI2_Init+0xa8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <MX_SPI2_Init+0xa8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <MX_SPI2_Init+0xa8>)
 8001700:	2200      	movs	r2, #0
 8001702:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <MX_SPI2_Init+0xa8>)
 8001706:	2200      	movs	r2, #0
 8001708:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <MX_SPI2_Init+0xa8>)
 800170c:	2200      	movs	r2, #0
 800170e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <MX_SPI2_Init+0xa8>)
 8001712:	2200      	movs	r2, #0
 8001714:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <MX_SPI2_Init+0xa8>)
 8001718:	2200      	movs	r2, #0
 800171a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <MX_SPI2_Init+0xa8>)
 800171e:	2200      	movs	r2, #0
 8001720:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <MX_SPI2_Init+0xa8>)
 8001724:	f009 fd10 	bl	800b148 <HAL_SPI_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800172e:	f000 fa87 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	24000284 	.word	0x24000284
 800173c:	40003800 	.word	0x40003800

08001740 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b096      	sub	sp, #88	; 0x58
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001746:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001752:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
 8001760:	611a      	str	r2, [r3, #16]
 8001762:	615a      	str	r2, [r3, #20]
 8001764:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	222c      	movs	r2, #44	; 0x2c
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f00d fb39 	bl	800ede4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001772:	4b39      	ldr	r3, [pc, #228]	; (8001858 <MX_TIM1_Init+0x118>)
 8001774:	4a39      	ldr	r2, [pc, #228]	; (800185c <MX_TIM1_Init+0x11c>)
 8001776:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 8001778:	4b37      	ldr	r3, [pc, #220]	; (8001858 <MX_TIM1_Init+0x118>)
 800177a:	2263      	movs	r2, #99	; 0x63
 800177c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177e:	4b36      	ldr	r3, [pc, #216]	; (8001858 <MX_TIM1_Init+0x118>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 48000 - 1;
 8001784:	4b34      	ldr	r3, [pc, #208]	; (8001858 <MX_TIM1_Init+0x118>)
 8001786:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 800178a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178c:	4b32      	ldr	r3, [pc, #200]	; (8001858 <MX_TIM1_Init+0x118>)
 800178e:	2200      	movs	r2, #0
 8001790:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001792:	4b31      	ldr	r3, [pc, #196]	; (8001858 <MX_TIM1_Init+0x118>)
 8001794:	2200      	movs	r2, #0
 8001796:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001798:	4b2f      	ldr	r3, [pc, #188]	; (8001858 <MX_TIM1_Init+0x118>)
 800179a:	2200      	movs	r2, #0
 800179c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800179e:	482e      	ldr	r0, [pc, #184]	; (8001858 <MX_TIM1_Init+0x118>)
 80017a0:	f00a fbe0 	bl	800bf64 <HAL_TIM_PWM_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80017aa:	f000 fa49 	bl	8001c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ae:	2300      	movs	r3, #0
 80017b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017be:	4619      	mov	r1, r3
 80017c0:	4825      	ldr	r0, [pc, #148]	; (8001858 <MX_TIM1_Init+0x118>)
 80017c2:	f00b fa17 	bl	800cbf4 <HAL_TIMEx_MasterConfigSynchronization>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80017cc:	f000 fa38 	bl	8001c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d0:	2360      	movs	r3, #96	; 0x60
 80017d2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480 -1;
 80017d4:	f240 13df 	movw	r3, #479	; 0x1df
 80017d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017da:	2300      	movs	r3, #0
 80017dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017de:	2300      	movs	r3, #0
 80017e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017e6:	2300      	movs	r3, #0
 80017e8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017f2:	2200      	movs	r2, #0
 80017f4:	4619      	mov	r1, r3
 80017f6:	4818      	ldr	r0, [pc, #96]	; (8001858 <MX_TIM1_Init+0x118>)
 80017f8:	f00a fd2a 	bl	800c250 <HAL_TIM_PWM_ConfigChannel>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001802:	f000 fa1d 	bl	8001c40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800181a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800181e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001828:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	4619      	mov	r1, r3
 800183a:	4807      	ldr	r0, [pc, #28]	; (8001858 <MX_TIM1_Init+0x118>)
 800183c:	f00b fa68 	bl	800cd10 <HAL_TIMEx_ConfigBreakDeadTime>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001846:	f000 f9fb 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800184a:	4803      	ldr	r0, [pc, #12]	; (8001858 <MX_TIM1_Init+0x118>)
 800184c:	f000 fcbc 	bl	80021c8 <HAL_TIM_MspPostInit>

}
 8001850:	bf00      	nop
 8001852:	3758      	adds	r7, #88	; 0x58
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	2400030c 	.word	0x2400030c
 800185c:	40010000 	.word	0x40010000

08001860 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001872:	463b      	mov	r3, r7
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
 8001880:	615a      	str	r2, [r3, #20]
 8001882:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001884:	4b22      	ldr	r3, [pc, #136]	; (8001910 <MX_TIM2_Init+0xb0>)
 8001886:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800188a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 -1;
 800188c:	4b20      	ldr	r3, [pc, #128]	; (8001910 <MX_TIM2_Init+0xb0>)
 800188e:	2263      	movs	r2, #99	; 0x63
 8001890:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001892:	4b1f      	ldr	r3, [pc, #124]	; (8001910 <MX_TIM2_Init+0xb0>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000 - 1;
 8001898:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <MX_TIM2_Init+0xb0>)
 800189a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800189e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a0:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <MX_TIM2_Init+0xb0>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a6:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <MX_TIM2_Init+0xb0>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018ac:	4818      	ldr	r0, [pc, #96]	; (8001910 <MX_TIM2_Init+0xb0>)
 80018ae:	f00a fb59 	bl	800bf64 <HAL_TIM_PWM_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80018b8:	f000 f9c2 	bl	8001c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018c4:	f107 031c 	add.w	r3, r7, #28
 80018c8:	4619      	mov	r1, r3
 80018ca:	4811      	ldr	r0, [pc, #68]	; (8001910 <MX_TIM2_Init+0xb0>)
 80018cc:	f00b f992 	bl	800cbf4 <HAL_TIMEx_MasterConfigSynchronization>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80018d6:	f000 f9b3 	bl	8001c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018da:	2360      	movs	r3, #96	; 0x60
 80018dc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 480 - 1;
 80018de:	f240 13df 	movw	r3, #479	; 0x1df
 80018e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018ec:	463b      	mov	r3, r7
 80018ee:	220c      	movs	r2, #12
 80018f0:	4619      	mov	r1, r3
 80018f2:	4807      	ldr	r0, [pc, #28]	; (8001910 <MX_TIM2_Init+0xb0>)
 80018f4:	f00a fcac 	bl	800c250 <HAL_TIM_PWM_ConfigChannel>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80018fe:	f000 f99f 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001902:	4803      	ldr	r0, [pc, #12]	; (8001910 <MX_TIM2_Init+0xb0>)
 8001904:	f000 fc60 	bl	80021c8 <HAL_TIM_MspPostInit>

}
 8001908:	bf00      	nop
 800190a:	3728      	adds	r7, #40	; 0x28
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	24000358 	.word	0x24000358

08001914 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001918:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <MX_USART1_UART_Init+0x90>)
 800191a:	4a23      	ldr	r2, [pc, #140]	; (80019a8 <MX_USART1_UART_Init+0x94>)
 800191c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800191e:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <MX_USART1_UART_Init+0x90>)
 8001920:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001924:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001926:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <MX_USART1_UART_Init+0x90>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800192c:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <MX_USART1_UART_Init+0x90>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001932:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <MX_USART1_UART_Init+0x90>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001938:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <MX_USART1_UART_Init+0x90>)
 800193a:	220c      	movs	r2, #12
 800193c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193e:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <MX_USART1_UART_Init+0x90>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001944:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <MX_USART1_UART_Init+0x90>)
 8001946:	2200      	movs	r2, #0
 8001948:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800194a:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <MX_USART1_UART_Init+0x90>)
 800194c:	2200      	movs	r2, #0
 800194e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001950:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <MX_USART1_UART_Init+0x90>)
 8001952:	2200      	movs	r2, #0
 8001954:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001956:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <MX_USART1_UART_Init+0x90>)
 8001958:	2200      	movs	r2, #0
 800195a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800195c:	4811      	ldr	r0, [pc, #68]	; (80019a4 <MX_USART1_UART_Init+0x90>)
 800195e:	f00b fa73 	bl	800ce48 <HAL_UART_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001968:	f000 f96a 	bl	8001c40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800196c:	2100      	movs	r1, #0
 800196e:	480d      	ldr	r0, [pc, #52]	; (80019a4 <MX_USART1_UART_Init+0x90>)
 8001970:	f00d f927 	bl	800ebc2 <HAL_UARTEx_SetTxFifoThreshold>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800197a:	f000 f961 	bl	8001c40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800197e:	2100      	movs	r1, #0
 8001980:	4808      	ldr	r0, [pc, #32]	; (80019a4 <MX_USART1_UART_Init+0x90>)
 8001982:	f00d f95c 	bl	800ec3e <HAL_UARTEx_SetRxFifoThreshold>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800198c:	f000 f958 	bl	8001c40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001990:	4804      	ldr	r0, [pc, #16]	; (80019a4 <MX_USART1_UART_Init+0x90>)
 8001992:	f00d f8dd 	bl	800eb50 <HAL_UARTEx_DisableFifoMode>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800199c:	f000 f950 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	240003a4 	.word	0x240003a4
 80019a8:	40011000 	.word	0x40011000

080019ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <MX_DMA_Init+0x3c>)
 80019b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019b8:	4a0b      	ldr	r2, [pc, #44]	; (80019e8 <MX_DMA_Init+0x3c>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_DMA_Init+0x3c>)
 80019c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2100      	movs	r1, #0
 80019d4:	200b      	movs	r0, #11
 80019d6:	f002 fcc0 	bl	800435a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80019da:	200b      	movs	r0, #11
 80019dc:	f002 fcd7 	bl	800438e <HAL_NVIC_EnableIRQ>

}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	58024400 	.word	0x58024400

080019ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08c      	sub	sp, #48	; 0x30
 80019f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	60da      	str	r2, [r3, #12]
 8001a00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a02:	4b54      	ldr	r3, [pc, #336]	; (8001b54 <MX_GPIO_Init+0x168>)
 8001a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a08:	4a52      	ldr	r2, [pc, #328]	; (8001b54 <MX_GPIO_Init+0x168>)
 8001a0a:	f043 0304 	orr.w	r3, r3, #4
 8001a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a12:	4b50      	ldr	r3, [pc, #320]	; (8001b54 <MX_GPIO_Init+0x168>)
 8001a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	61bb      	str	r3, [r7, #24]
 8001a1e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a20:	4b4c      	ldr	r3, [pc, #304]	; (8001b54 <MX_GPIO_Init+0x168>)
 8001a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a26:	4a4b      	ldr	r2, [pc, #300]	; (8001b54 <MX_GPIO_Init+0x168>)
 8001a28:	f043 0320 	orr.w	r3, r3, #32
 8001a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a30:	4b48      	ldr	r3, [pc, #288]	; (8001b54 <MX_GPIO_Init+0x168>)
 8001a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a36:	f003 0320 	and.w	r3, r3, #32
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a3e:	4b45      	ldr	r3, [pc, #276]	; (8001b54 <MX_GPIO_Init+0x168>)
 8001a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a44:	4a43      	ldr	r2, [pc, #268]	; (8001b54 <MX_GPIO_Init+0x168>)
 8001a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a4e:	4b41      	ldr	r3, [pc, #260]	; (8001b54 <MX_GPIO_Init+0x168>)
 8001a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5c:	4b3d      	ldr	r3, [pc, #244]	; (8001b54 <MX_GPIO_Init+0x168>)
 8001a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a62:	4a3c      	ldr	r2, [pc, #240]	; (8001b54 <MX_GPIO_Init+0x168>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a6c:	4b39      	ldr	r3, [pc, #228]	; (8001b54 <MX_GPIO_Init+0x168>)
 8001a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	4b36      	ldr	r3, [pc, #216]	; (8001b54 <MX_GPIO_Init+0x168>)
 8001a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a80:	4a34      	ldr	r2, [pc, #208]	; (8001b54 <MX_GPIO_Init+0x168>)
 8001a82:	f043 0302 	orr.w	r3, r3, #2
 8001a86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a8a:	4b32      	ldr	r3, [pc, #200]	; (8001b54 <MX_GPIO_Init+0x168>)
 8001a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a98:	4b2e      	ldr	r3, [pc, #184]	; (8001b54 <MX_GPIO_Init+0x168>)
 8001a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9e:	4a2d      	ldr	r2, [pc, #180]	; (8001b54 <MX_GPIO_Init+0x168>)
 8001aa0:	f043 0308 	orr.w	r3, r3, #8
 8001aa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aa8:	4b2a      	ldr	r3, [pc, #168]	; (8001b54 <MX_GPIO_Init+0x168>)
 8001aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	21c0      	movs	r1, #192	; 0xc0
 8001aba:	4827      	ldr	r0, [pc, #156]	; (8001b58 <MX_GPIO_Init+0x16c>)
 8001abc:	f005 fbe4 	bl	8007288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8001ac6:	4825      	ldr	r0, [pc, #148]	; (8001b5c <MX_GPIO_Init+0x170>)
 8001ac8:	f005 fbde 	bl	8007288 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001acc:	2200      	movs	r2, #0
 8001ace:	2160      	movs	r1, #96	; 0x60
 8001ad0:	4823      	ldr	r0, [pc, #140]	; (8001b60 <MX_GPIO_Init+0x174>)
 8001ad2:	f005 fbd9 	bl	8007288 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ad6:	23c0      	movs	r3, #192	; 0xc0
 8001ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ada:	2301      	movs	r3, #1
 8001adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ae6:	f107 031c 	add.w	r3, r7, #28
 8001aea:	4619      	mov	r1, r3
 8001aec:	481a      	ldr	r0, [pc, #104]	; (8001b58 <MX_GPIO_Init+0x16c>)
 8001aee:	f005 fa03 	bl	8006ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001af2:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001af6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af8:	2301      	movs	r3, #1
 8001afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4814      	ldr	r0, [pc, #80]	; (8001b5c <MX_GPIO_Init+0x170>)
 8001b0c:	f005 f9f4 	bl	8006ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001b10:	2360      	movs	r3, #96	; 0x60
 8001b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b20:	2307      	movs	r3, #7
 8001b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b24:	f107 031c 	add.w	r3, r7, #28
 8001b28:	4619      	mov	r1, r3
 8001b2a:	480e      	ldr	r0, [pc, #56]	; (8001b64 <MX_GPIO_Init+0x178>)
 8001b2c:	f005 f9e4 	bl	8006ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001b30:	2360      	movs	r3, #96	; 0x60
 8001b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b34:	2301      	movs	r3, #1
 8001b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b40:	f107 031c 	add.w	r3, r7, #28
 8001b44:	4619      	mov	r1, r3
 8001b46:	4806      	ldr	r0, [pc, #24]	; (8001b60 <MX_GPIO_Init+0x174>)
 8001b48:	f005 f9d6 	bl	8006ef8 <HAL_GPIO_Init>

}
 8001b4c:	bf00      	nop
 8001b4e:	3730      	adds	r7, #48	; 0x30
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	58024400 	.word	0x58024400
 8001b58:	58021400 	.word	0x58021400
 8001b5c:	58020800 	.word	0x58020800
 8001b60:	58020400 	.word	0x58020400
 8001b64:	58020c00 	.word	0x58020c00

08001b68 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	2320      	movs	r3, #32
 8001b76:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	dd1d      	ble.n	8001bba <HAL_ADC_ConvHalfCpltCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f003 021f 	and.w	r2, r3, #31
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	4413      	add	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b8e:	f3bf 8f4f 	dsb	sy
}
 8001b92:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001b94:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <HAL_ADC_ConvHalfCpltCallback+0x68>)
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	3320      	adds	r3, #32
 8001ba0:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	3b20      	subs	r3, #32
 8001ba6:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	dcf2      	bgt.n	8001b94 <HAL_ADC_ConvHalfCpltCallback+0x2c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001bae:	f3bf 8f4f 	dsb	sy
}
 8001bb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bb4:	f3bf 8f6f 	isb	sy
}
 8001bb8:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8001bba:	bf00      	nop
  /* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
  SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[0], ADC_CONVERTED_DATA_BUFFER_SIZE);
  HAL_ADC_Stop_DMA(hadc);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f001 fa55 	bl	800306c <HAL_ADC_Stop_DMA>

}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	240004a0 	.word	0x240004a0
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <HAL_ADC_ConvCpltCallback+0x64>)
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	2320      	movs	r3, #32
 8001be2:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	dd1d      	ble.n	8001c26 <HAL_ADC_ConvCpltCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	f003 021f 	and.w	r2, r3, #31
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bfa:	f3bf 8f4f 	dsb	sy
}
 8001bfe:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001c00:	4a0e      	ldr	r2, [pc, #56]	; (8001c3c <HAL_ADC_ConvCpltCallback+0x68>)
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	3320      	adds	r3, #32
 8001c0c:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	3b20      	subs	r3, #32
 8001c12:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	dcf2      	bgt.n	8001c00 <HAL_ADC_ConvCpltCallback+0x2c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c1a:	f3bf 8f4f 	dsb	sy
}
 8001c1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c20:	f3bf 8f6f 	isb	sy
}
 8001c24:	bf00      	nop
}
 8001c26:	bf00      	nop
   /* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
  SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[ADC_CONVERTED_DATA_BUFFER_SIZE/2], ADC_CONVERTED_DATA_BUFFER_SIZE);
  HAL_ADC_Stop_DMA(hadc);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f001 fa1f 	bl	800306c <HAL_ADC_Stop_DMA>

}
 8001c2e:	bf00      	nop
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	240004c0 	.word	0x240004c0
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c44:	b672      	cpsid	i
}
 8001c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <Error_Handler+0x8>
	...

08001c4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <HAL_MspInit+0x30>)
 8001c54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c58:	4a08      	ldr	r2, [pc, #32]	; (8001c7c <HAL_MspInit+0x30>)
 8001c5a:	f043 0302 	orr.w	r3, r3, #2
 8001c5e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_MspInit+0x30>)
 8001c64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	58024400 	.word	0x58024400

08001c80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08e      	sub	sp, #56	; 0x38
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a64      	ldr	r2, [pc, #400]	; (8001e30 <HAL_ADC_MspInit+0x1b0>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	f040 80ad 	bne.w	8001dfe <HAL_ADC_MspInit+0x17e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001ca4:	4b63      	ldr	r3, [pc, #396]	; (8001e34 <HAL_ADC_MspInit+0x1b4>)
 8001ca6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001caa:	4a62      	ldr	r2, [pc, #392]	; (8001e34 <HAL_ADC_MspInit+0x1b4>)
 8001cac:	f043 0320 	orr.w	r3, r3, #32
 8001cb0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001cb4:	4b5f      	ldr	r3, [pc, #380]	; (8001e34 <HAL_ADC_MspInit+0x1b4>)
 8001cb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cba:	f003 0320 	and.w	r3, r3, #32
 8001cbe:	623b      	str	r3, [r7, #32]
 8001cc0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc2:	4b5c      	ldr	r3, [pc, #368]	; (8001e34 <HAL_ADC_MspInit+0x1b4>)
 8001cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc8:	4a5a      	ldr	r2, [pc, #360]	; (8001e34 <HAL_ADC_MspInit+0x1b4>)
 8001cca:	f043 0304 	orr.w	r3, r3, #4
 8001cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd2:	4b58      	ldr	r3, [pc, #352]	; (8001e34 <HAL_ADC_MspInit+0x1b4>)
 8001cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	61fb      	str	r3, [r7, #28]
 8001cde:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce0:	4b54      	ldr	r3, [pc, #336]	; (8001e34 <HAL_ADC_MspInit+0x1b4>)
 8001ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce6:	4a53      	ldr	r2, [pc, #332]	; (8001e34 <HAL_ADC_MspInit+0x1b4>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf0:	4b50      	ldr	r3, [pc, #320]	; (8001e34 <HAL_ADC_MspInit+0x1b4>)
 8001cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	61bb      	str	r3, [r7, #24]
 8001cfc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfe:	4b4d      	ldr	r3, [pc, #308]	; (8001e34 <HAL_ADC_MspInit+0x1b4>)
 8001d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d04:	4a4b      	ldr	r2, [pc, #300]	; (8001e34 <HAL_ADC_MspInit+0x1b4>)
 8001d06:	f043 0302 	orr.w	r3, r3, #2
 8001d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d0e:	4b49      	ldr	r3, [pc, #292]	; (8001e34 <HAL_ADC_MspInit+0x1b4>)
 8001d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d1c:	4b45      	ldr	r3, [pc, #276]	; (8001e34 <HAL_ADC_MspInit+0x1b4>)
 8001d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d22:	4a44      	ldr	r2, [pc, #272]	; (8001e34 <HAL_ADC_MspInit+0x1b4>)
 8001d24:	f043 0320 	orr.w	r3, r3, #32
 8001d28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d2c:	4b41      	ldr	r3, [pc, #260]	; (8001e34 <HAL_ADC_MspInit+0x1b4>)
 8001d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d32:	f003 0320 	and.w	r3, r3, #32
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001d3a:	2333      	movs	r3, #51	; 0x33
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	483a      	ldr	r0, [pc, #232]	; (8001e38 <HAL_ADC_MspInit+0x1b8>)
 8001d4e:	f005 f8d3 	bl	8006ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001d52:	23ef      	movs	r3, #239	; 0xef
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d56:	2303      	movs	r3, #3
 8001d58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d62:	4619      	mov	r1, r3
 8001d64:	4835      	ldr	r0, [pc, #212]	; (8001e3c <HAL_ADC_MspInit+0x1bc>)
 8001d66:	f005 f8c7 	bl	8006ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4830      	ldr	r0, [pc, #192]	; (8001e40 <HAL_ADC_MspInit+0x1c0>)
 8001d7e:	f005 f8bb 	bl	8006ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d94:	4619      	mov	r1, r3
 8001d96:	482b      	ldr	r0, [pc, #172]	; (8001e44 <HAL_ADC_MspInit+0x1c4>)
 8001d98:	f005 f8ae 	bl	8006ef8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001d9c:	4b2a      	ldr	r3, [pc, #168]	; (8001e48 <HAL_ADC_MspInit+0x1c8>)
 8001d9e:	4a2b      	ldr	r2, [pc, #172]	; (8001e4c <HAL_ADC_MspInit+0x1cc>)
 8001da0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001da2:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <HAL_ADC_MspInit+0x1c8>)
 8001da4:	2209      	movs	r2, #9
 8001da6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001da8:	4b27      	ldr	r3, [pc, #156]	; (8001e48 <HAL_ADC_MspInit+0x1c8>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dae:	4b26      	ldr	r3, [pc, #152]	; (8001e48 <HAL_ADC_MspInit+0x1c8>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001db4:	4b24      	ldr	r3, [pc, #144]	; (8001e48 <HAL_ADC_MspInit+0x1c8>)
 8001db6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001dbc:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <HAL_ADC_MspInit+0x1c8>)
 8001dbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dc2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001dc4:	4b20      	ldr	r3, [pc, #128]	; (8001e48 <HAL_ADC_MspInit+0x1c8>)
 8001dc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dca:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001dcc:	4b1e      	ldr	r3, [pc, #120]	; (8001e48 <HAL_ADC_MspInit+0x1c8>)
 8001dce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dd2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001dd4:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <HAL_ADC_MspInit+0x1c8>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dda:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <HAL_ADC_MspInit+0x1c8>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001de0:	4819      	ldr	r0, [pc, #100]	; (8001e48 <HAL_ADC_MspInit+0x1c8>)
 8001de2:	f002 fc93 	bl	800470c <HAL_DMA_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <HAL_ADC_MspInit+0x170>
    {
      Error_Handler();
 8001dec:	f7ff ff28 	bl	8001c40 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a15      	ldr	r2, [pc, #84]	; (8001e48 <HAL_ADC_MspInit+0x1c8>)
 8001df4:	64da      	str	r2, [r3, #76]	; 0x4c
 8001df6:	4a14      	ldr	r2, [pc, #80]	; (8001e48 <HAL_ADC_MspInit+0x1c8>)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001dfc:	e013      	b.n	8001e26 <HAL_ADC_MspInit+0x1a6>
  else if(hadc->Instance==ADC3)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a13      	ldr	r2, [pc, #76]	; (8001e50 <HAL_ADC_MspInit+0x1d0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d10e      	bne.n	8001e26 <HAL_ADC_MspInit+0x1a6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001e08:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_ADC_MspInit+0x1b4>)
 8001e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e0e:	4a09      	ldr	r2, [pc, #36]	; (8001e34 <HAL_ADC_MspInit+0x1b4>)
 8001e10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_ADC_MspInit+0x1b4>)
 8001e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
}
 8001e26:	bf00      	nop
 8001e28:	3738      	adds	r7, #56	; 0x38
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40022000 	.word	0x40022000
 8001e34:	58024400 	.word	0x58024400
 8001e38:	58020800 	.word	0x58020800
 8001e3c:	58020000 	.word	0x58020000
 8001e40:	58020400 	.word	0x58020400
 8001e44:	58021400 	.word	0x58021400
 8001e48:	24000124 	.word	0x24000124
 8001e4c:	40020010 	.word	0x40020010
 8001e50:	58026000 	.word	0x58026000

08001e54 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	; 0x28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a18      	ldr	r2, [pc, #96]	; (8001ed4 <HAL_DAC_MspInit+0x80>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d129      	bne.n	8001eca <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001e76:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <HAL_DAC_MspInit+0x84>)
 8001e78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e7c:	4a16      	ldr	r2, [pc, #88]	; (8001ed8 <HAL_DAC_MspInit+0x84>)
 8001e7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e86:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <HAL_DAC_MspInit+0x84>)
 8001e88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e94:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <HAL_DAC_MspInit+0x84>)
 8001e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e9a:	4a0f      	ldr	r2, [pc, #60]	; (8001ed8 <HAL_DAC_MspInit+0x84>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <HAL_DAC_MspInit+0x84>)
 8001ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001eb2:	2310      	movs	r3, #16
 8001eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebe:	f107 0314 	add.w	r3, r7, #20
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4805      	ldr	r0, [pc, #20]	; (8001edc <HAL_DAC_MspInit+0x88>)
 8001ec6:	f005 f817 	bl	8006ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001eca:	bf00      	nop
 8001ecc:	3728      	adds	r7, #40	; 0x28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40007400 	.word	0x40007400
 8001ed8:	58024400 	.word	0x58024400
 8001edc:	58020000 	.word	0x58020000

08001ee0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b0b8      	sub	sp, #224	; 0xe0
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ef8:	f107 0310 	add.w	r3, r7, #16
 8001efc:	22bc      	movs	r2, #188	; 0xbc
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f00c ff6f 	bl	800ede4 <memset>
  if(hi2c->Instance==I2C1)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a25      	ldr	r2, [pc, #148]	; (8001fa0 <HAL_I2C_MspInit+0xc0>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d142      	bne.n	8001f96 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f10:	2308      	movs	r3, #8
 8001f12:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f1a:	f107 0310 	add.w	r3, r7, #16
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f006 ff86 	bl	8008e30 <HAL_RCCEx_PeriphCLKConfig>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001f2a:	f7ff fe89 	bl	8001c40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2e:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <HAL_I2C_MspInit+0xc4>)
 8001f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f34:	4a1b      	ldr	r2, [pc, #108]	; (8001fa4 <HAL_I2C_MspInit+0xc4>)
 8001f36:	f043 0302 	orr.w	r3, r3, #2
 8001f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f3e:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <HAL_I2C_MspInit+0xc4>)
 8001f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f54:	2312      	movs	r3, #18
 8001f56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f66:	2304      	movs	r3, #4
 8001f68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f70:	4619      	mov	r1, r3
 8001f72:	480d      	ldr	r0, [pc, #52]	; (8001fa8 <HAL_I2C_MspInit+0xc8>)
 8001f74:	f004 ffc0 	bl	8006ef8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f78:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <HAL_I2C_MspInit+0xc4>)
 8001f7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f7e:	4a09      	ldr	r2, [pc, #36]	; (8001fa4 <HAL_I2C_MspInit+0xc4>)
 8001f80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_I2C_MspInit+0xc4>)
 8001f8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f96:	bf00      	nop
 8001f98:	37e0      	adds	r7, #224	; 0xe0
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40005400 	.word	0x40005400
 8001fa4:	58024400 	.word	0x58024400
 8001fa8:	58020400 	.word	0x58020400

08001fac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b0ba      	sub	sp, #232	; 0xe8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fc4:	f107 0318 	add.w	r3, r7, #24
 8001fc8:	22bc      	movs	r2, #188	; 0xbc
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f00c ff09 	bl	800ede4 <memset>
  if(hspi->Instance==SPI1)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a49      	ldr	r2, [pc, #292]	; (80020fc <HAL_SPI_MspInit+0x150>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d142      	bne.n	8002062 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fe6:	f107 0318 	add.w	r3, r7, #24
 8001fea:	4618      	mov	r0, r3
 8001fec:	f006 ff20 	bl	8008e30 <HAL_RCCEx_PeriphCLKConfig>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001ff6:	f7ff fe23 	bl	8001c40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ffa:	4b41      	ldr	r3, [pc, #260]	; (8002100 <HAL_SPI_MspInit+0x154>)
 8001ffc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002000:	4a3f      	ldr	r2, [pc, #252]	; (8002100 <HAL_SPI_MspInit+0x154>)
 8002002:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002006:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800200a:	4b3d      	ldr	r3, [pc, #244]	; (8002100 <HAL_SPI_MspInit+0x154>)
 800200c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002018:	4b39      	ldr	r3, [pc, #228]	; (8002100 <HAL_SPI_MspInit+0x154>)
 800201a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800201e:	4a38      	ldr	r2, [pc, #224]	; (8002100 <HAL_SPI_MspInit+0x154>)
 8002020:	f043 0302 	orr.w	r3, r3, #2
 8002024:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002028:	4b35      	ldr	r3, [pc, #212]	; (8002100 <HAL_SPI_MspInit+0x154>)
 800202a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002036:	2318      	movs	r3, #24
 8002038:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	2302      	movs	r3, #2
 800203e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800204e:	2305      	movs	r3, #5
 8002050:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002054:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002058:	4619      	mov	r1, r3
 800205a:	482a      	ldr	r0, [pc, #168]	; (8002104 <HAL_SPI_MspInit+0x158>)
 800205c:	f004 ff4c 	bl	8006ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002060:	e047      	b.n	80020f2 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a28      	ldr	r2, [pc, #160]	; (8002108 <HAL_SPI_MspInit+0x15c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d142      	bne.n	80020f2 <HAL_SPI_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800206c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002070:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002072:	2300      	movs	r3, #0
 8002074:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002076:	f107 0318 	add.w	r3, r7, #24
 800207a:	4618      	mov	r0, r3
 800207c:	f006 fed8 	bl	8008e30 <HAL_RCCEx_PeriphCLKConfig>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_SPI_MspInit+0xde>
      Error_Handler();
 8002086:	f7ff fddb 	bl	8001c40 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800208a:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <HAL_SPI_MspInit+0x154>)
 800208c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002090:	4a1b      	ldr	r2, [pc, #108]	; (8002100 <HAL_SPI_MspInit+0x154>)
 8002092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002096:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_SPI_MspInit+0x154>)
 800209c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a8:	4b15      	ldr	r3, [pc, #84]	; (8002100 <HAL_SPI_MspInit+0x154>)
 80020aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ae:	4a14      	ldr	r2, [pc, #80]	; (8002100 <HAL_SPI_MspInit+0x154>)
 80020b0:	f043 0302 	orr.w	r3, r3, #2
 80020b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_SPI_MspInit+0x154>)
 80020ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80020c6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80020ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020e0:	2305      	movs	r3, #5
 80020e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020ea:	4619      	mov	r1, r3
 80020ec:	4805      	ldr	r0, [pc, #20]	; (8002104 <HAL_SPI_MspInit+0x158>)
 80020ee:	f004 ff03 	bl	8006ef8 <HAL_GPIO_Init>
}
 80020f2:	bf00      	nop
 80020f4:	37e8      	adds	r7, #232	; 0xe8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40013000 	.word	0x40013000
 8002100:	58024400 	.word	0x58024400
 8002104:	58020400 	.word	0x58020400
 8002108:	40003800 	.word	0x40003800

0800210c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a29      	ldr	r2, [pc, #164]	; (80021c0 <HAL_TIM_PWM_MspInit+0xb4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d12f      	bne.n	800217e <HAL_TIM_PWM_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800211e:	4b29      	ldr	r3, [pc, #164]	; (80021c4 <HAL_TIM_PWM_MspInit+0xb8>)
 8002120:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002124:	4a27      	ldr	r2, [pc, #156]	; (80021c4 <HAL_TIM_PWM_MspInit+0xb8>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800212e:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <HAL_TIM_PWM_MspInit+0xb8>)
 8002130:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800213c:	2200      	movs	r2, #0
 800213e:	2100      	movs	r1, #0
 8002140:	2018      	movs	r0, #24
 8002142:	f002 f90a 	bl	800435a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002146:	2018      	movs	r0, #24
 8002148:	f002 f921 	bl	800438e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800214c:	2200      	movs	r2, #0
 800214e:	2100      	movs	r1, #0
 8002150:	2019      	movs	r0, #25
 8002152:	f002 f902 	bl	800435a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002156:	2019      	movs	r0, #25
 8002158:	f002 f919 	bl	800438e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800215c:	2200      	movs	r2, #0
 800215e:	2100      	movs	r1, #0
 8002160:	201a      	movs	r0, #26
 8002162:	f002 f8fa 	bl	800435a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002166:	201a      	movs	r0, #26
 8002168:	f002 f911 	bl	800438e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800216c:	2200      	movs	r2, #0
 800216e:	2100      	movs	r1, #0
 8002170:	201b      	movs	r0, #27
 8002172:	f002 f8f2 	bl	800435a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002176:	201b      	movs	r0, #27
 8002178:	f002 f909 	bl	800438e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800217c:	e01b      	b.n	80021b6 <HAL_TIM_PWM_MspInit+0xaa>
  else if(htim_pwm->Instance==TIM2)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002186:	d116      	bne.n	80021b6 <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002188:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <HAL_TIM_PWM_MspInit+0xb8>)
 800218a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800218e:	4a0d      	ldr	r2, [pc, #52]	; (80021c4 <HAL_TIM_PWM_MspInit+0xb8>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002198:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <HAL_TIM_PWM_MspInit+0xb8>)
 800219a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2100      	movs	r1, #0
 80021aa:	201c      	movs	r0, #28
 80021ac:	f002 f8d5 	bl	800435a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021b0:	201c      	movs	r0, #28
 80021b2:	f002 f8ec 	bl	800438e <HAL_NVIC_EnableIRQ>
}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40010000 	.word	0x40010000
 80021c4:	58024400 	.word	0x58024400

080021c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08a      	sub	sp, #40	; 0x28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a26      	ldr	r2, [pc, #152]	; (8002280 <HAL_TIM_MspPostInit+0xb8>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d120      	bne.n	800222c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ea:	4b26      	ldr	r3, [pc, #152]	; (8002284 <HAL_TIM_MspPostInit+0xbc>)
 80021ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f0:	4a24      	ldr	r2, [pc, #144]	; (8002284 <HAL_TIM_MspPostInit+0xbc>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021fa:	4b22      	ldr	r3, [pc, #136]	; (8002284 <HAL_TIM_MspPostInit+0xbc>)
 80021fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002208:	f44f 7380 	mov.w	r3, #256	; 0x100
 800220c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002216:	2300      	movs	r3, #0
 8002218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800221a:	2301      	movs	r3, #1
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221e:	f107 0314 	add.w	r3, r7, #20
 8002222:	4619      	mov	r1, r3
 8002224:	4818      	ldr	r0, [pc, #96]	; (8002288 <HAL_TIM_MspPostInit+0xc0>)
 8002226:	f004 fe67 	bl	8006ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800222a:	e024      	b.n	8002276 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002234:	d11f      	bne.n	8002276 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002236:	4b13      	ldr	r3, [pc, #76]	; (8002284 <HAL_TIM_MspPostInit+0xbc>)
 8002238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800223c:	4a11      	ldr	r2, [pc, #68]	; (8002284 <HAL_TIM_MspPostInit+0xbc>)
 800223e:	f043 0302 	orr.w	r3, r3, #2
 8002242:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002246:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <HAL_TIM_MspPostInit+0xbc>)
 8002248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002254:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	2302      	movs	r3, #2
 800225c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002262:	2300      	movs	r3, #0
 8002264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002266:	2301      	movs	r3, #1
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226a:	f107 0314 	add.w	r3, r7, #20
 800226e:	4619      	mov	r1, r3
 8002270:	4806      	ldr	r0, [pc, #24]	; (800228c <HAL_TIM_MspPostInit+0xc4>)
 8002272:	f004 fe41 	bl	8006ef8 <HAL_GPIO_Init>
}
 8002276:	bf00      	nop
 8002278:	3728      	adds	r7, #40	; 0x28
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40010000 	.word	0x40010000
 8002284:	58024400 	.word	0x58024400
 8002288:	58020000 	.word	0x58020000
 800228c:	58020400 	.word	0x58020400

08002290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b0b8      	sub	sp, #224	; 0xe0
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022a8:	f107 0310 	add.w	r3, r7, #16
 80022ac:	22bc      	movs	r2, #188	; 0xbc
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f00c fd97 	bl	800ede4 <memset>
  if(huart->Instance==USART1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a25      	ldr	r2, [pc, #148]	; (8002350 <HAL_UART_MspInit+0xc0>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d142      	bne.n	8002346 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022c0:	2301      	movs	r3, #1
 80022c2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ca:	f107 0310 	add.w	r3, r7, #16
 80022ce:	4618      	mov	r0, r3
 80022d0:	f006 fdae 	bl	8008e30 <HAL_RCCEx_PeriphCLKConfig>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80022da:	f7ff fcb1 	bl	8001c40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022de:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <HAL_UART_MspInit+0xc4>)
 80022e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022e4:	4a1b      	ldr	r2, [pc, #108]	; (8002354 <HAL_UART_MspInit+0xc4>)
 80022e6:	f043 0310 	orr.w	r3, r3, #16
 80022ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022ee:	4b19      	ldr	r3, [pc, #100]	; (8002354 <HAL_UART_MspInit+0xc4>)
 80022f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fc:	4b15      	ldr	r3, [pc, #84]	; (8002354 <HAL_UART_MspInit+0xc4>)
 80022fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002302:	4a14      	ldr	r2, [pc, #80]	; (8002354 <HAL_UART_MspInit+0xc4>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800230c:	4b11      	ldr	r3, [pc, #68]	; (8002354 <HAL_UART_MspInit+0xc4>)
 800230e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800231a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800231e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232e:	2300      	movs	r3, #0
 8002330:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002334:	2307      	movs	r3, #7
 8002336:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800233e:	4619      	mov	r1, r3
 8002340:	4805      	ldr	r0, [pc, #20]	; (8002358 <HAL_UART_MspInit+0xc8>)
 8002342:	f004 fdd9 	bl	8006ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002346:	bf00      	nop
 8002348:	37e0      	adds	r7, #224	; 0xe0
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40011000 	.word	0x40011000
 8002354:	58024400 	.word	0x58024400
 8002358:	58020000 	.word	0x58020000

0800235c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002360:	e7fe      	b.n	8002360 <NMI_Handler+0x4>

08002362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002366:	e7fe      	b.n	8002366 <HardFault_Handler+0x4>

08002368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800236c:	e7fe      	b.n	800236c <MemManage_Handler+0x4>

0800236e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002372:	e7fe      	b.n	8002372 <BusFault_Handler+0x4>

08002374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002378:	e7fe      	b.n	8002378 <UsageFault_Handler+0x4>

0800237a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023a8:	f000 f962 	bl	8002670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023ac:	bf00      	nop
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023b4:	4802      	ldr	r0, [pc, #8]	; (80023c0 <DMA1_Stream0_IRQHandler+0x10>)
 80023b6:	f003 fa8d 	bl	80058d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	24000124 	.word	0x24000124

080023c4 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023c8:	4802      	ldr	r0, [pc, #8]	; (80023d4 <TIM1_BRK_IRQHandler+0x10>)
 80023ca:	f009 fe22 	bl	800c012 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	2400030c 	.word	0x2400030c

080023d8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023dc:	4802      	ldr	r0, [pc, #8]	; (80023e8 <TIM1_UP_IRQHandler+0x10>)
 80023de:	f009 fe18 	bl	800c012 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	2400030c 	.word	0x2400030c

080023ec <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023f0:	4802      	ldr	r0, [pc, #8]	; (80023fc <TIM1_TRG_COM_IRQHandler+0x10>)
 80023f2:	f009 fe0e 	bl	800c012 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	2400030c 	.word	0x2400030c

08002400 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002404:	4802      	ldr	r0, [pc, #8]	; (8002410 <TIM1_CC_IRQHandler+0x10>)
 8002406:	f009 fe04 	bl	800c012 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	2400030c 	.word	0x2400030c

08002414 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002418:	4802      	ldr	r0, [pc, #8]	; (8002424 <TIM2_IRQHandler+0x10>)
 800241a:	f009 fdfa 	bl	800c012 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	24000358 	.word	0x24000358

08002428 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800242c:	4b37      	ldr	r3, [pc, #220]	; (800250c <SystemInit+0xe4>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	4a36      	ldr	r2, [pc, #216]	; (800250c <SystemInit+0xe4>)
 8002434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800243c:	4b34      	ldr	r3, [pc, #208]	; (8002510 <SystemInit+0xe8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 030f 	and.w	r3, r3, #15
 8002444:	2b06      	cmp	r3, #6
 8002446:	d807      	bhi.n	8002458 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002448:	4b31      	ldr	r3, [pc, #196]	; (8002510 <SystemInit+0xe8>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f023 030f 	bic.w	r3, r3, #15
 8002450:	4a2f      	ldr	r2, [pc, #188]	; (8002510 <SystemInit+0xe8>)
 8002452:	f043 0307 	orr.w	r3, r3, #7
 8002456:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002458:	4b2e      	ldr	r3, [pc, #184]	; (8002514 <SystemInit+0xec>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a2d      	ldr	r2, [pc, #180]	; (8002514 <SystemInit+0xec>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002464:	4b2b      	ldr	r3, [pc, #172]	; (8002514 <SystemInit+0xec>)
 8002466:	2200      	movs	r2, #0
 8002468:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800246a:	4b2a      	ldr	r3, [pc, #168]	; (8002514 <SystemInit+0xec>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	4929      	ldr	r1, [pc, #164]	; (8002514 <SystemInit+0xec>)
 8002470:	4b29      	ldr	r3, [pc, #164]	; (8002518 <SystemInit+0xf0>)
 8002472:	4013      	ands	r3, r2
 8002474:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002476:	4b26      	ldr	r3, [pc, #152]	; (8002510 <SystemInit+0xe8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d007      	beq.n	8002492 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002482:	4b23      	ldr	r3, [pc, #140]	; (8002510 <SystemInit+0xe8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f023 030f 	bic.w	r3, r3, #15
 800248a:	4a21      	ldr	r2, [pc, #132]	; (8002510 <SystemInit+0xe8>)
 800248c:	f043 0307 	orr.w	r3, r3, #7
 8002490:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002492:	4b20      	ldr	r3, [pc, #128]	; (8002514 <SystemInit+0xec>)
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002498:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <SystemInit+0xec>)
 800249a:	2200      	movs	r2, #0
 800249c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800249e:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <SystemInit+0xec>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80024a4:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <SystemInit+0xec>)
 80024a6:	4a1d      	ldr	r2, [pc, #116]	; (800251c <SystemInit+0xf4>)
 80024a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80024aa:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <SystemInit+0xec>)
 80024ac:	4a1c      	ldr	r2, [pc, #112]	; (8002520 <SystemInit+0xf8>)
 80024ae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80024b0:	4b18      	ldr	r3, [pc, #96]	; (8002514 <SystemInit+0xec>)
 80024b2:	4a1c      	ldr	r2, [pc, #112]	; (8002524 <SystemInit+0xfc>)
 80024b4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80024b6:	4b17      	ldr	r3, [pc, #92]	; (8002514 <SystemInit+0xec>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80024bc:	4b15      	ldr	r3, [pc, #84]	; (8002514 <SystemInit+0xec>)
 80024be:	4a19      	ldr	r2, [pc, #100]	; (8002524 <SystemInit+0xfc>)
 80024c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80024c2:	4b14      	ldr	r3, [pc, #80]	; (8002514 <SystemInit+0xec>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <SystemInit+0xec>)
 80024ca:	4a16      	ldr	r2, [pc, #88]	; (8002524 <SystemInit+0xfc>)
 80024cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80024ce:	4b11      	ldr	r3, [pc, #68]	; (8002514 <SystemInit+0xec>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024d4:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <SystemInit+0xec>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0e      	ldr	r2, [pc, #56]	; (8002514 <SystemInit+0xec>)
 80024da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <SystemInit+0xec>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80024e6:	4b10      	ldr	r3, [pc, #64]	; (8002528 <SystemInit+0x100>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <SystemInit+0x104>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024f2:	d202      	bcs.n	80024fa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80024f4:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <SystemInit+0x108>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80024fa:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <SystemInit+0x10c>)
 80024fc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002500:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000ed00 	.word	0xe000ed00
 8002510:	52002000 	.word	0x52002000
 8002514:	58024400 	.word	0x58024400
 8002518:	eaf6ed7f 	.word	0xeaf6ed7f
 800251c:	02020200 	.word	0x02020200
 8002520:	01ff0000 	.word	0x01ff0000
 8002524:	01010280 	.word	0x01010280
 8002528:	5c001000 	.word	0x5c001000
 800252c:	ffff0000 	.word	0xffff0000
 8002530:	51008108 	.word	0x51008108
 8002534:	52004000 	.word	0x52004000

08002538 <Reset_Handler>:
 8002538:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002570 <LoopFillZerobss+0xe>
 800253c:	f7ff ff74 	bl	8002428 <SystemInit>
 8002540:	480c      	ldr	r0, [pc, #48]	; (8002574 <LoopFillZerobss+0x12>)
 8002542:	490d      	ldr	r1, [pc, #52]	; (8002578 <LoopFillZerobss+0x16>)
 8002544:	4a0d      	ldr	r2, [pc, #52]	; (800257c <LoopFillZerobss+0x1a>)
 8002546:	2300      	movs	r3, #0
 8002548:	e002      	b.n	8002550 <LoopCopyDataInit>

0800254a <CopyDataInit>:
 800254a:	58d4      	ldr	r4, [r2, r3]
 800254c:	50c4      	str	r4, [r0, r3]
 800254e:	3304      	adds	r3, #4

08002550 <LoopCopyDataInit>:
 8002550:	18c4      	adds	r4, r0, r3
 8002552:	428c      	cmp	r4, r1
 8002554:	d3f9      	bcc.n	800254a <CopyDataInit>
 8002556:	4a0a      	ldr	r2, [pc, #40]	; (8002580 <LoopFillZerobss+0x1e>)
 8002558:	4c0a      	ldr	r4, [pc, #40]	; (8002584 <LoopFillZerobss+0x22>)
 800255a:	2300      	movs	r3, #0
 800255c:	e001      	b.n	8002562 <LoopFillZerobss>

0800255e <FillZerobss>:
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	3204      	adds	r2, #4

08002562 <LoopFillZerobss>:
 8002562:	42a2      	cmp	r2, r4
 8002564:	d3fb      	bcc.n	800255e <FillZerobss>
 8002566:	f00c fc19 	bl	800ed9c <__libc_init_array>
 800256a:	f7fe fcc1 	bl	8000ef0 <main>
 800256e:	4770      	bx	lr
 8002570:	24080000 	.word	0x24080000
 8002574:	24000000 	.word	0x24000000
 8002578:	24000034 	.word	0x24000034
 800257c:	0800ee74 	.word	0x0800ee74
 8002580:	24000040 	.word	0x24000040
 8002584:	24000534 	.word	0x24000534

08002588 <ADC3_IRQHandler>:
 8002588:	e7fe      	b.n	8002588 <ADC3_IRQHandler>
	...

0800258c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002592:	2003      	movs	r0, #3
 8002594:	f001 fed6 	bl	8004344 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002598:	f006 fa74 	bl	8008a84 <HAL_RCC_GetSysClockFreq>
 800259c:	4602      	mov	r2, r0
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <HAL_Init+0x68>)
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	0a1b      	lsrs	r3, r3, #8
 80025a4:	f003 030f 	and.w	r3, r3, #15
 80025a8:	4913      	ldr	r1, [pc, #76]	; (80025f8 <HAL_Init+0x6c>)
 80025aa:	5ccb      	ldrb	r3, [r1, r3]
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	fa22 f303 	lsr.w	r3, r2, r3
 80025b4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025b6:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <HAL_Init+0x68>)
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	4a0e      	ldr	r2, [pc, #56]	; (80025f8 <HAL_Init+0x6c>)
 80025c0:	5cd3      	ldrb	r3, [r2, r3]
 80025c2:	f003 031f 	and.w	r3, r3, #31
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	fa22 f303 	lsr.w	r3, r2, r3
 80025cc:	4a0b      	ldr	r2, [pc, #44]	; (80025fc <HAL_Init+0x70>)
 80025ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025d0:	4a0b      	ldr	r2, [pc, #44]	; (8002600 <HAL_Init+0x74>)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025d6:	200f      	movs	r0, #15
 80025d8:	f000 f814 	bl	8002604 <HAL_InitTick>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e002      	b.n	80025ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80025e6:	f7ff fb31 	bl	8001c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	58024400 	.word	0x58024400
 80025f8:	0800ee24 	.word	0x0800ee24
 80025fc:	24000028 	.word	0x24000028
 8002600:	24000024 	.word	0x24000024

08002604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800260c:	4b15      	ldr	r3, [pc, #84]	; (8002664 <HAL_InitTick+0x60>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e021      	b.n	800265c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002618:	4b13      	ldr	r3, [pc, #76]	; (8002668 <HAL_InitTick+0x64>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <HAL_InitTick+0x60>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	4619      	mov	r1, r3
 8002622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002626:	fbb3 f3f1 	udiv	r3, r3, r1
 800262a:	fbb2 f3f3 	udiv	r3, r2, r3
 800262e:	4618      	mov	r0, r3
 8002630:	f001 febb 	bl	80043aa <HAL_SYSTICK_Config>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e00e      	b.n	800265c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b0f      	cmp	r3, #15
 8002642:	d80a      	bhi.n	800265a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002644:	2200      	movs	r2, #0
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800264c:	f001 fe85 	bl	800435a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002650:	4a06      	ldr	r2, [pc, #24]	; (800266c <HAL_InitTick+0x68>)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	e000      	b.n	800265c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
}
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	24000030 	.word	0x24000030
 8002668:	24000024 	.word	0x24000024
 800266c:	2400002c 	.word	0x2400002c

08002670 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_IncTick+0x20>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_IncTick+0x24>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4413      	add	r3, r2
 8002680:	4a04      	ldr	r2, [pc, #16]	; (8002694 <HAL_IncTick+0x24>)
 8002682:	6013      	str	r3, [r2, #0]
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	24000030 	.word	0x24000030
 8002694:	24000530 	.word	0x24000530

08002698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return uwTick;
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <HAL_GetTick+0x14>)
 800269e:	681b      	ldr	r3, [r3, #0]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	24000530 	.word	0x24000530

080026b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026b8:	f7ff ffee 	bl	8002698 <HAL_GetTick>
 80026bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026c8:	d005      	beq.n	80026d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <HAL_Delay+0x44>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4413      	add	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026d6:	bf00      	nop
 80026d8:	f7ff ffde 	bl	8002698 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d8f7      	bhi.n	80026d8 <HAL_Delay+0x28>
  {
  }
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	24000030 	.word	0x24000030

080026f8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <HAL_SuspendTick+0x1c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a04      	ldr	r2, [pc, #16]	; (8002714 <HAL_SuspendTick+0x1c>)
 8002702:	f023 0302 	bic.w	r3, r3, #2
 8002706:	6013      	str	r3, [r2, #0]
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000e010 	.word	0xe000e010

08002718 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <HAL_GetREVID+0x14>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	0c1b      	lsrs	r3, r3, #16
}
 8002722:	4618      	mov	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	5c001000 	.word	0x5c001000

08002730 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	609a      	str	r2, [r3, #8]
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	609a      	str	r2, [r3, #8]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	3360      	adds	r3, #96	; 0x60
 80027aa:	461a      	mov	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	430b      	orrs	r3, r1
 80027c6:	431a      	orrs	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80027cc:	bf00      	nop
 80027ce:	371c      	adds	r7, #28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	fa01 f303 	lsl.w	r3, r1, r3
 80027f8:	431a      	orrs	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	611a      	str	r2, [r3, #16]
}
 80027fe:	bf00      	nop
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800280a:	b480      	push	{r7}
 800280c:	b087      	sub	sp, #28
 800280e:	af00      	add	r7, sp, #0
 8002810:	60f8      	str	r0, [r7, #12]
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	3360      	adds	r3, #96	; 0x60
 800281a:	461a      	mov	r2, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	431a      	orrs	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	601a      	str	r2, [r3, #0]
  }
}
 8002834:	bf00      	nop
 8002836:	371c      	adds	r7, #28
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002866:	b480      	push	{r7}
 8002868:	b087      	sub	sp, #28
 800286a:	af00      	add	r7, sp, #0
 800286c:	60f8      	str	r0, [r7, #12]
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3330      	adds	r3, #48	; 0x30
 8002876:	461a      	mov	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	0a1b      	lsrs	r3, r3, #8
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	4413      	add	r3, r2
 8002884:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	211f      	movs	r1, #31
 8002892:	fa01 f303 	lsl.w	r3, r1, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	401a      	ands	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	0e9b      	lsrs	r3, r3, #26
 800289e:	f003 011f 	and.w	r1, r3, #31
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ac:	431a      	orrs	r2, r3
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028b2:	bf00      	nop
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f023 0203 	bic.w	r2, r3, #3
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	60da      	str	r2, [r3, #12]
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b087      	sub	sp, #28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	3314      	adds	r3, #20
 80028f4:	461a      	mov	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	0e5b      	lsrs	r3, r3, #25
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	4413      	add	r3, r2
 8002902:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	0d1b      	lsrs	r3, r3, #20
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	2107      	movs	r1, #7
 8002912:	fa01 f303 	lsl.w	r3, r1, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	401a      	ands	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	0d1b      	lsrs	r3, r3, #20
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	fa01 f303 	lsl.w	r3, r1, r3
 8002928:	431a      	orrs	r2, r3
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800292e:	bf00      	nop
 8002930:	371c      	adds	r7, #28
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002954:	43db      	mvns	r3, r3
 8002956:	401a      	ands	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f003 0318 	and.w	r3, r3, #24
 800295e:	4908      	ldr	r1, [pc, #32]	; (8002980 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002960:	40d9      	lsrs	r1, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	400b      	ands	r3, r1
 8002966:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800296a:	431a      	orrs	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002972:	bf00      	nop
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	000fffff 	.word	0x000fffff

08002984 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 031f 	and.w	r3, r3, #31
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80029ae:	4013      	ands	r3, r2
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6093      	str	r3, [r2, #8]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	5fffffc0 	.word	0x5fffffc0

080029c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029d8:	d101      	bne.n	80029de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <LL_ADC_EnableInternalRegulator+0x24>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	6fffffc0 	.word	0x6fffffc0

08002a14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a28:	d101      	bne.n	8002a2e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <LL_ADC_Enable+0x24>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	f043 0201 	orr.w	r2, r3, #1
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	7fffffc0 	.word	0x7fffffc0

08002a64 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <LL_ADC_Disable+0x24>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	f043 0202 	orr.w	r2, r3, #2
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	7fffffc0 	.word	0x7fffffc0

08002a8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <LL_ADC_IsEnabled+0x18>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <LL_ADC_IsEnabled+0x1a>
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d101      	bne.n	8002aca <LL_ADC_IsDisableOngoing+0x18>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <LL_ADC_IsDisableOngoing+0x1a>
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	4b05      	ldr	r3, [pc, #20]	; (8002afc <LL_ADC_REG_StartConversion+0x24>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	f043 0204 	orr.w	r2, r3, #4
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	7fffffc0 	.word	0x7fffffc0

08002b00 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <LL_ADC_REG_StopConversion+0x24>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	f043 0210 	orr.w	r2, r3, #16
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	7fffffc0 	.word	0x7fffffc0

08002b28 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d101      	bne.n	8002b40 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <LL_ADC_INJ_StopConversion+0x24>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	f043 0220 	orr.w	r2, r3, #32
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	7fffffc0 	.word	0x7fffffc0

08002b78 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d101      	bne.n	8002b90 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ba0:	b590      	push	{r4, r7, lr}
 8002ba2:	b089      	sub	sp, #36	; 0x24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e18f      	b.n	8002eda <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d109      	bne.n	8002bdc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7ff f859 	bl	8001c80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff feef 	bl	80029c4 <LL_ADC_IsDeepPowerDownEnabled>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d004      	beq.n	8002bf6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff fed5 	bl	80029a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff ff0a 	bl	8002a14 <LL_ADC_IsInternalRegulatorEnabled>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d114      	bne.n	8002c30 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff feee 	bl	80029ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c10:	4b87      	ldr	r3, [pc, #540]	; (8002e30 <HAL_ADC_Init+0x290>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	099b      	lsrs	r3, r3, #6
 8002c16:	4a87      	ldr	r2, [pc, #540]	; (8002e34 <HAL_ADC_Init+0x294>)
 8002c18:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1c:	099b      	lsrs	r3, r3, #6
 8002c1e:	3301      	adds	r3, #1
 8002c20:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c22:	e002      	b.n	8002c2a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f9      	bne.n	8002c24 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff feed 	bl	8002a14 <LL_ADC_IsInternalRegulatorEnabled>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10d      	bne.n	8002c5c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c44:	f043 0210 	orr.w	r2, r3, #16
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c50:	f043 0201 	orr.w	r2, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ff61 	bl	8002b28 <LL_ADC_REG_IsConversionOngoing>
 8002c66:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f040 8129 	bne.w	8002ec8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f040 8125 	bne.w	8002ec8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c82:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c86:	f043 0202 	orr.w	r2, r3, #2
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff fefa 	bl	8002a8c <LL_ADC_IsEnabled>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d136      	bne.n	8002d0c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a65      	ldr	r2, [pc, #404]	; (8002e38 <HAL_ADC_Init+0x298>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d004      	beq.n	8002cb2 <HAL_ADC_Init+0x112>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a63      	ldr	r2, [pc, #396]	; (8002e3c <HAL_ADC_Init+0x29c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d10e      	bne.n	8002cd0 <HAL_ADC_Init+0x130>
 8002cb2:	4861      	ldr	r0, [pc, #388]	; (8002e38 <HAL_ADC_Init+0x298>)
 8002cb4:	f7ff feea 	bl	8002a8c <LL_ADC_IsEnabled>
 8002cb8:	4604      	mov	r4, r0
 8002cba:	4860      	ldr	r0, [pc, #384]	; (8002e3c <HAL_ADC_Init+0x29c>)
 8002cbc:	f7ff fee6 	bl	8002a8c <LL_ADC_IsEnabled>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	4323      	orrs	r3, r4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf0c      	ite	eq
 8002cc8:	2301      	moveq	r3, #1
 8002cca:	2300      	movne	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	e008      	b.n	8002ce2 <HAL_ADC_Init+0x142>
 8002cd0:	485b      	ldr	r0, [pc, #364]	; (8002e40 <HAL_ADC_Init+0x2a0>)
 8002cd2:	f7ff fedb 	bl	8002a8c <LL_ADC_IsEnabled>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	bf0c      	ite	eq
 8002cdc:	2301      	moveq	r3, #1
 8002cde:	2300      	movne	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d012      	beq.n	8002d0c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a53      	ldr	r2, [pc, #332]	; (8002e38 <HAL_ADC_Init+0x298>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d004      	beq.n	8002cfa <HAL_ADC_Init+0x15a>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a51      	ldr	r2, [pc, #324]	; (8002e3c <HAL_ADC_Init+0x29c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d101      	bne.n	8002cfe <HAL_ADC_Init+0x15e>
 8002cfa:	4a52      	ldr	r2, [pc, #328]	; (8002e44 <HAL_ADC_Init+0x2a4>)
 8002cfc:	e000      	b.n	8002d00 <HAL_ADC_Init+0x160>
 8002cfe:	4a52      	ldr	r2, [pc, #328]	; (8002e48 <HAL_ADC_Init+0x2a8>)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	4619      	mov	r1, r3
 8002d06:	4610      	mov	r0, r2
 8002d08:	f7ff fd12 	bl	8002730 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002d0c:	f7ff fd04 	bl	8002718 <HAL_GetREVID>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d914      	bls.n	8002d44 <HAL_ADC_Init+0x1a4>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b10      	cmp	r3, #16
 8002d20:	d110      	bne.n	8002d44 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	7d5b      	ldrb	r3, [r3, #21]
 8002d26:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002d2c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002d32:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	7f1b      	ldrb	r3, [r3, #28]
 8002d38:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002d3a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002d3c:	f043 030c 	orr.w	r3, r3, #12
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	e00d      	b.n	8002d60 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	7d5b      	ldrb	r3, [r3, #21]
 8002d48:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002d4e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002d54:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	7f1b      	ldrb	r3, [r3, #28]
 8002d5a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	7f1b      	ldrb	r3, [r3, #28]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d106      	bne.n	8002d76 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	045b      	lsls	r3, r3, #17
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d009      	beq.n	8002d92 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	4b2c      	ldr	r3, [pc, #176]	; (8002e4c <HAL_ADC_Init+0x2ac>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	69b9      	ldr	r1, [r7, #24]
 8002da2:	430b      	orrs	r3, r1
 8002da4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff febc 	bl	8002b28 <LL_ADC_REG_IsConversionOngoing>
 8002db0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff fede 	bl	8002b78 <LL_ADC_INJ_IsConversionOngoing>
 8002dbc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d15f      	bne.n	8002e84 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d15c      	bne.n	8002e84 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	7d1b      	ldrb	r3, [r3, #20]
 8002dce:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	4b1c      	ldr	r3, [pc, #112]	; (8002e50 <HAL_ADC_Init+0x2b0>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6812      	ldr	r2, [r2, #0]
 8002de6:	69b9      	ldr	r1, [r7, #24]
 8002de8:	430b      	orrs	r3, r1
 8002dea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d130      	bne.n	8002e58 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	691a      	ldr	r2, [r3, #16]
 8002e02:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <HAL_ADC_Init+0x2b4>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e0a:	3a01      	subs	r2, #1
 8002e0c:	0411      	lsls	r1, r2, #16
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e12:	4311      	orrs	r1, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e18:	4311      	orrs	r1, r2
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	611a      	str	r2, [r3, #16]
 8002e2c:	e01c      	b.n	8002e68 <HAL_ADC_Init+0x2c8>
 8002e2e:	bf00      	nop
 8002e30:	24000024 	.word	0x24000024
 8002e34:	053e2d63 	.word	0x053e2d63
 8002e38:	40022000 	.word	0x40022000
 8002e3c:	40022100 	.word	0x40022100
 8002e40:	58026000 	.word	0x58026000
 8002e44:	40022300 	.word	0x40022300
 8002e48:	58026300 	.word	0x58026300
 8002e4c:	fff0c003 	.word	0xfff0c003
 8002e50:	ffffbffc 	.word	0xffffbffc
 8002e54:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0201 	bic.w	r2, r2, #1
 8002e66:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 feea 	bl	8003c58 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d10c      	bne.n	8002ea6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f023 010f 	bic.w	r1, r3, #15
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	1e5a      	subs	r2, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ea4:	e007      	b.n	8002eb6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 020f 	bic.w	r2, r2, #15
 8002eb4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	f023 0303 	bic.w	r3, r3, #3
 8002ebe:	f043 0201 	orr.w	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	655a      	str	r2, [r3, #84]	; 0x54
 8002ec6:	e007      	b.n	8002ed8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ecc:	f043 0210 	orr.w	r2, r3, #16
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ed8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3724      	adds	r7, #36	; 0x24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd90      	pop	{r4, r7, pc}
 8002ee2:	bf00      	nop

08002ee4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a55      	ldr	r2, [pc, #340]	; (800304c <HAL_ADC_Start_DMA+0x168>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d004      	beq.n	8002f04 <HAL_ADC_Start_DMA+0x20>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a54      	ldr	r2, [pc, #336]	; (8003050 <HAL_ADC_Start_DMA+0x16c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d101      	bne.n	8002f08 <HAL_ADC_Start_DMA+0x24>
 8002f04:	4b53      	ldr	r3, [pc, #332]	; (8003054 <HAL_ADC_Start_DMA+0x170>)
 8002f06:	e000      	b.n	8002f0a <HAL_ADC_Start_DMA+0x26>
 8002f08:	4b53      	ldr	r3, [pc, #332]	; (8003058 <HAL_ADC_Start_DMA+0x174>)
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fd3a 	bl	8002984 <LL_ADC_GetMultimode>
 8002f10:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff fe06 	bl	8002b28 <LL_ADC_REG_IsConversionOngoing>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f040 808c 	bne.w	800303c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_ADC_Start_DMA+0x4e>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e087      	b.n	8003042 <HAL_ADC_Start_DMA+0x15e>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	2b05      	cmp	r3, #5
 8002f44:	d002      	beq.n	8002f4c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	2b09      	cmp	r3, #9
 8002f4a:	d170      	bne.n	800302e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 fd05 	bl	800395c <ADC_Enable>
 8002f52:	4603      	mov	r3, r0
 8002f54:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002f56:	7dfb      	ldrb	r3, [r7, #23]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d163      	bne.n	8003024 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f60:	4b3e      	ldr	r3, [pc, #248]	; (800305c <HAL_ADC_Start_DMA+0x178>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a37      	ldr	r2, [pc, #220]	; (8003050 <HAL_ADC_Start_DMA+0x16c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d002      	beq.n	8002f7c <HAL_ADC_Start_DMA+0x98>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	e000      	b.n	8002f7e <HAL_ADC_Start_DMA+0x9a>
 8002f7c:	4b33      	ldr	r3, [pc, #204]	; (800304c <HAL_ADC_Start_DMA+0x168>)
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	6812      	ldr	r2, [r2, #0]
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d002      	beq.n	8002f8c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d105      	bne.n	8002f98 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f90:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d006      	beq.n	8002fb2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	f023 0206 	bic.w	r2, r3, #6
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	659a      	str	r2, [r3, #88]	; 0x58
 8002fb0:	e002      	b.n	8002fb8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fbc:	4a28      	ldr	r2, [pc, #160]	; (8003060 <HAL_ADC_Start_DMA+0x17c>)
 8002fbe:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc4:	4a27      	ldr	r2, [pc, #156]	; (8003064 <HAL_ADC_Start_DMA+0x180>)
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fcc:	4a26      	ldr	r2, [pc, #152]	; (8003068 <HAL_ADC_Start_DMA+0x184>)
 8002fce:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	221c      	movs	r2, #28
 8002fd6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0210 	orr.w	r2, r2, #16
 8002fee:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	f7ff fc5f 	bl	80028be <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	3340      	adds	r3, #64	; 0x40
 800300a:	4619      	mov	r1, r3
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f001 fed8 	bl	8004dc4 <HAL_DMA_Start_IT>
 8003014:	4603      	mov	r3, r0
 8003016:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff fd5b 	bl	8002ad8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003022:	e00d      	b.n	8003040 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800302c:	e008      	b.n	8003040 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800303a:	e001      	b.n	8003040 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800303c:	2302      	movs	r3, #2
 800303e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003040:	7dfb      	ldrb	r3, [r7, #23]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40022000 	.word	0x40022000
 8003050:	40022100 	.word	0x40022100
 8003054:	40022300 	.word	0x40022300
 8003058:	58026300 	.word	0x58026300
 800305c:	fffff0fe 	.word	0xfffff0fe
 8003060:	08003b2f 	.word	0x08003b2f
 8003064:	08003c07 	.word	0x08003c07
 8003068:	08003c23 	.word	0x08003c23

0800306c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_ADC_Stop_DMA+0x16>
 800307e:	2302      	movs	r3, #2
 8003080:	e04f      	b.n	8003122 <HAL_ADC_Stop_DMA+0xb6>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800308a:	2103      	movs	r1, #3
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fba9 	bl	80037e4 <ADC_ConversionStop>
 8003092:	4603      	mov	r3, r0
 8003094:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d13d      	bne.n	8003118 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0203 	bic.w	r2, r2, #3
 80030aa:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d10f      	bne.n	80030da <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030be:	4618      	mov	r0, r3
 80030c0:	f002 f8ea 	bl	8005298 <HAL_DMA_Abort>
 80030c4:	4603      	mov	r3, r0
 80030c6:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0210 	bic.w	r2, r2, #16
 80030e8:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d105      	bne.n	80030fc <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 fcbd 	bl	8003a70 <ADC_Disable>
 80030f6:	4603      	mov	r3, r0
 80030f8:	73fb      	strb	r3, [r7, #15]
 80030fa:	e002      	b.n	8003102 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fcb7 	bl	8003a70 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d107      	bne.n	8003118 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800310c:	4b07      	ldr	r3, [pc, #28]	; (800312c <HAL_ADC_Stop_DMA+0xc0>)
 800310e:	4013      	ands	r3, r2
 8003110:	f043 0201 	orr.w	r2, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003120:	7bfb      	ldrb	r3, [r7, #15]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	ffffeefe 	.word	0xffffeefe

08003130 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b0a1      	sub	sp, #132	; 0x84
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003154:	2300      	movs	r3, #0
 8003156:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	4a9d      	ldr	r2, [pc, #628]	; (80033d4 <HAL_ADC_ConfigChannel+0x290>)
 800315e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <HAL_ADC_ConfigChannel+0x2a>
 800316a:	2302      	movs	r3, #2
 800316c:	e321      	b.n	80037b2 <HAL_ADC_ConfigChannel+0x66e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fcd4 	bl	8002b28 <LL_ADC_REG_IsConversionOngoing>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	f040 8306 	bne.w	8003794 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003190:	2b00      	cmp	r3, #0
 8003192:	d108      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x62>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	0e9b      	lsrs	r3, r3, #26
 800319a:	f003 031f 	and.w	r3, r3, #31
 800319e:	2201      	movs	r2, #1
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	e016      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x90>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031ae:	fa93 f3a3 	rbit	r3, r3
 80031b2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031b6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80031b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80031be:	2320      	movs	r3, #32
 80031c0:	e003      	b.n	80031ca <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80031c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031c4:	fab3 f383 	clz	r3, r3
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	f003 031f 	and.w	r3, r3, #31
 80031ce:	2201      	movs	r2, #1
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6812      	ldr	r2, [r2, #0]
 80031d8:	69d1      	ldr	r1, [r2, #28]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6812      	ldr	r2, [r2, #0]
 80031de:	430b      	orrs	r3, r1
 80031e0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6818      	ldr	r0, [r3, #0]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	6859      	ldr	r1, [r3, #4]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	461a      	mov	r2, r3
 80031f0:	f7ff fb39 	bl	8002866 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fc95 	bl	8002b28 <LL_ADC_REG_IsConversionOngoing>
 80031fe:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff fcb7 	bl	8002b78 <LL_ADC_INJ_IsConversionOngoing>
 800320a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800320c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800320e:	2b00      	cmp	r3, #0
 8003210:	f040 80b3 	bne.w	800337a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003214:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003216:	2b00      	cmp	r3, #0
 8003218:	f040 80af 	bne.w	800337a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	6819      	ldr	r1, [r3, #0]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	461a      	mov	r2, r3
 800322a:	f7ff fb5b 	bl	80028e4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800322e:	4b6a      	ldr	r3, [pc, #424]	; (80033d8 <HAL_ADC_ConfigChannel+0x294>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003236:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800323a:	d10b      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x110>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	695a      	ldr	r2, [r3, #20]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	089b      	lsrs	r3, r3, #2
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	e01d      	b.n	8003290 <HAL_ADC_ConfigChannel+0x14c>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10b      	bne.n	800327a <HAL_ADC_ConfigChannel+0x136>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	695a      	ldr	r2, [r3, #20]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	089b      	lsrs	r3, r3, #2
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	e00a      	b.n	8003290 <HAL_ADC_ConfigChannel+0x14c>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	695a      	ldr	r2, [r3, #20]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	089b      	lsrs	r3, r3, #2
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2b04      	cmp	r3, #4
 8003298:	d027      	beq.n	80032ea <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6919      	ldr	r1, [r3, #16]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032a8:	f7ff fa76 	bl	8002798 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6818      	ldr	r0, [r3, #0]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	6919      	ldr	r1, [r3, #16]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	7e5b      	ldrb	r3, [r3, #25]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d102      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x17e>
 80032bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80032c0:	e000      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x180>
 80032c2:	2300      	movs	r3, #0
 80032c4:	461a      	mov	r2, r3
 80032c6:	f7ff faa0 	bl	800280a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	6919      	ldr	r1, [r3, #16]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	7e1b      	ldrb	r3, [r3, #24]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d102      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x19c>
 80032da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032de:	e000      	b.n	80032e2 <HAL_ADC_ConfigChannel+0x19e>
 80032e0:	2300      	movs	r3, #0
 80032e2:	461a      	mov	r2, r3
 80032e4:	f7ff fa78 	bl	80027d8 <LL_ADC_SetDataRightShift>
 80032e8:	e047      	b.n	800337a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	069b      	lsls	r3, r3, #26
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d107      	bne.n	800330e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800330c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003314:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	069b      	lsls	r3, r3, #26
 800331e:	429a      	cmp	r2, r3
 8003320:	d107      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003330:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003338:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	069b      	lsls	r3, r3, #26
 8003342:	429a      	cmp	r2, r3
 8003344:	d107      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003354:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800335c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	069b      	lsls	r3, r3, #26
 8003366:	429a      	cmp	r2, r3
 8003368:	d107      	bne.n	800337a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003378:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff fb84 	bl	8002a8c <LL_ADC_IsEnabled>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	f040 820d 	bne.w	80037a6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6818      	ldr	r0, [r3, #0]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	6819      	ldr	r1, [r3, #0]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	461a      	mov	r2, r3
 800339a:	f7ff facf 	bl	800293c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	4a0c      	ldr	r2, [pc, #48]	; (80033d4 <HAL_ADC_ConfigChannel+0x290>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	f040 8133 	bne.w	8003610 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d110      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x298>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	0e9b      	lsrs	r3, r3, #26
 80033c0:	3301      	adds	r3, #1
 80033c2:	f003 031f 	and.w	r3, r3, #31
 80033c6:	2b09      	cmp	r3, #9
 80033c8:	bf94      	ite	ls
 80033ca:	2301      	movls	r3, #1
 80033cc:	2300      	movhi	r3, #0
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	e01e      	b.n	8003410 <HAL_ADC_ConfigChannel+0x2cc>
 80033d2:	bf00      	nop
 80033d4:	47ff0000 	.word	0x47ff0000
 80033d8:	5c001000 	.word	0x5c001000
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033e4:	fa93 f3a3 	rbit	r3, r3
 80033e8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80033ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80033ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80033f4:	2320      	movs	r3, #32
 80033f6:	e003      	b.n	8003400 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80033f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033fa:	fab3 f383 	clz	r3, r3
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	3301      	adds	r3, #1
 8003402:	f003 031f 	and.w	r3, r3, #31
 8003406:	2b09      	cmp	r3, #9
 8003408:	bf94      	ite	ls
 800340a:	2301      	movls	r3, #1
 800340c:	2300      	movhi	r3, #0
 800340e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003410:	2b00      	cmp	r3, #0
 8003412:	d079      	beq.n	8003508 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800341c:	2b00      	cmp	r3, #0
 800341e:	d107      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x2ec>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	0e9b      	lsrs	r3, r3, #26
 8003426:	3301      	adds	r3, #1
 8003428:	069b      	lsls	r3, r3, #26
 800342a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800342e:	e015      	b.n	800345c <HAL_ADC_ConfigChannel+0x318>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003438:	fa93 f3a3 	rbit	r3, r3
 800343c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800343e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003440:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003448:	2320      	movs	r3, #32
 800344a:	e003      	b.n	8003454 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800344c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800344e:	fab3 f383 	clz	r3, r3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	3301      	adds	r3, #1
 8003456:	069b      	lsls	r3, r3, #26
 8003458:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003464:	2b00      	cmp	r3, #0
 8003466:	d109      	bne.n	800347c <HAL_ADC_ConfigChannel+0x338>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	0e9b      	lsrs	r3, r3, #26
 800346e:	3301      	adds	r3, #1
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	2101      	movs	r1, #1
 8003476:	fa01 f303 	lsl.w	r3, r1, r3
 800347a:	e017      	b.n	80034ac <HAL_ADC_ConfigChannel+0x368>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003484:	fa93 f3a3 	rbit	r3, r3
 8003488:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800348a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800348c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800348e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003494:	2320      	movs	r3, #32
 8003496:	e003      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800349a:	fab3 f383 	clz	r3, r3
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	3301      	adds	r3, #1
 80034a2:	f003 031f 	and.w	r3, r3, #31
 80034a6:	2101      	movs	r1, #1
 80034a8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ac:	ea42 0103 	orr.w	r1, r2, r3
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10a      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x38e>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	0e9b      	lsrs	r3, r3, #26
 80034c2:	3301      	adds	r3, #1
 80034c4:	f003 021f 	and.w	r2, r3, #31
 80034c8:	4613      	mov	r3, r2
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	4413      	add	r3, r2
 80034ce:	051b      	lsls	r3, r3, #20
 80034d0:	e018      	b.n	8003504 <HAL_ADC_ConfigChannel+0x3c0>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034da:	fa93 f3a3 	rbit	r3, r3
 80034de:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80034e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80034e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80034ea:	2320      	movs	r3, #32
 80034ec:	e003      	b.n	80034f6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80034ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f0:	fab3 f383 	clz	r3, r3
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	3301      	adds	r3, #1
 80034f8:	f003 021f 	and.w	r2, r3, #31
 80034fc:	4613      	mov	r3, r2
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	4413      	add	r3, r2
 8003502:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003504:	430b      	orrs	r3, r1
 8003506:	e07e      	b.n	8003606 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003510:	2b00      	cmp	r3, #0
 8003512:	d107      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x3e0>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	0e9b      	lsrs	r3, r3, #26
 800351a:	3301      	adds	r3, #1
 800351c:	069b      	lsls	r3, r3, #26
 800351e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003522:	e015      	b.n	8003550 <HAL_ADC_ConfigChannel+0x40c>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352c:	fa93 f3a3 	rbit	r3, r3
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800353c:	2320      	movs	r3, #32
 800353e:	e003      	b.n	8003548 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003542:	fab3 f383 	clz	r3, r3
 8003546:	b2db      	uxtb	r3, r3
 8003548:	3301      	adds	r3, #1
 800354a:	069b      	lsls	r3, r3, #26
 800354c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003558:	2b00      	cmp	r3, #0
 800355a:	d109      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x42c>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	0e9b      	lsrs	r3, r3, #26
 8003562:	3301      	adds	r3, #1
 8003564:	f003 031f 	and.w	r3, r3, #31
 8003568:	2101      	movs	r1, #1
 800356a:	fa01 f303 	lsl.w	r3, r1, r3
 800356e:	e017      	b.n	80035a0 <HAL_ADC_ConfigChannel+0x45c>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	fa93 f3a3 	rbit	r3, r3
 800357c:	61bb      	str	r3, [r7, #24]
  return result;
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003588:	2320      	movs	r3, #32
 800358a:	e003      	b.n	8003594 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	fab3 f383 	clz	r3, r3
 8003592:	b2db      	uxtb	r3, r3
 8003594:	3301      	adds	r3, #1
 8003596:	f003 031f 	and.w	r3, r3, #31
 800359a:	2101      	movs	r1, #1
 800359c:	fa01 f303 	lsl.w	r3, r1, r3
 80035a0:	ea42 0103 	orr.w	r1, r2, r3
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10d      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x488>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	0e9b      	lsrs	r3, r3, #26
 80035b6:	3301      	adds	r3, #1
 80035b8:	f003 021f 	and.w	r2, r3, #31
 80035bc:	4613      	mov	r3, r2
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	4413      	add	r3, r2
 80035c2:	3b1e      	subs	r3, #30
 80035c4:	051b      	lsls	r3, r3, #20
 80035c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035ca:	e01b      	b.n	8003604 <HAL_ADC_ConfigChannel+0x4c0>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	fa93 f3a3 	rbit	r3, r3
 80035d8:	60fb      	str	r3, [r7, #12]
  return result;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80035e4:	2320      	movs	r3, #32
 80035e6:	e003      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	fab3 f383 	clz	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	3301      	adds	r3, #1
 80035f2:	f003 021f 	and.w	r2, r3, #31
 80035f6:	4613      	mov	r3, r2
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	4413      	add	r3, r2
 80035fc:	3b1e      	subs	r3, #30
 80035fe:	051b      	lsls	r3, r3, #20
 8003600:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003604:	430b      	orrs	r3, r1
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	6892      	ldr	r2, [r2, #8]
 800360a:	4619      	mov	r1, r3
 800360c:	f7ff f96a 	bl	80028e4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	f280 80c6 	bge.w	80037a6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a67      	ldr	r2, [pc, #412]	; (80037bc <HAL_ADC_ConfigChannel+0x678>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d004      	beq.n	800362e <HAL_ADC_ConfigChannel+0x4ea>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a65      	ldr	r2, [pc, #404]	; (80037c0 <HAL_ADC_ConfigChannel+0x67c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d101      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x4ee>
 800362e:	4b65      	ldr	r3, [pc, #404]	; (80037c4 <HAL_ADC_ConfigChannel+0x680>)
 8003630:	e000      	b.n	8003634 <HAL_ADC_ConfigChannel+0x4f0>
 8003632:	4b65      	ldr	r3, [pc, #404]	; (80037c8 <HAL_ADC_ConfigChannel+0x684>)
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff f8a1 	bl	800277c <LL_ADC_GetCommonPathInternalCh>
 800363a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a5e      	ldr	r2, [pc, #376]	; (80037bc <HAL_ADC_ConfigChannel+0x678>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d004      	beq.n	8003650 <HAL_ADC_ConfigChannel+0x50c>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a5d      	ldr	r2, [pc, #372]	; (80037c0 <HAL_ADC_ConfigChannel+0x67c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d10e      	bne.n	800366e <HAL_ADC_ConfigChannel+0x52a>
 8003650:	485a      	ldr	r0, [pc, #360]	; (80037bc <HAL_ADC_ConfigChannel+0x678>)
 8003652:	f7ff fa1b 	bl	8002a8c <LL_ADC_IsEnabled>
 8003656:	4604      	mov	r4, r0
 8003658:	4859      	ldr	r0, [pc, #356]	; (80037c0 <HAL_ADC_ConfigChannel+0x67c>)
 800365a:	f7ff fa17 	bl	8002a8c <LL_ADC_IsEnabled>
 800365e:	4603      	mov	r3, r0
 8003660:	4323      	orrs	r3, r4
 8003662:	2b00      	cmp	r3, #0
 8003664:	bf0c      	ite	eq
 8003666:	2301      	moveq	r3, #1
 8003668:	2300      	movne	r3, #0
 800366a:	b2db      	uxtb	r3, r3
 800366c:	e008      	b.n	8003680 <HAL_ADC_ConfigChannel+0x53c>
 800366e:	4857      	ldr	r0, [pc, #348]	; (80037cc <HAL_ADC_ConfigChannel+0x688>)
 8003670:	f7ff fa0c 	bl	8002a8c <LL_ADC_IsEnabled>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	bf0c      	ite	eq
 800367a:	2301      	moveq	r3, #1
 800367c:	2300      	movne	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d07d      	beq.n	8003780 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a51      	ldr	r2, [pc, #324]	; (80037d0 <HAL_ADC_ConfigChannel+0x68c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d130      	bne.n	80036f0 <HAL_ADC_ConfigChannel+0x5ac>
 800368e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003690:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d12b      	bne.n	80036f0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a4b      	ldr	r2, [pc, #300]	; (80037cc <HAL_ADC_ConfigChannel+0x688>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	f040 8081 	bne.w	80037a6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a44      	ldr	r2, [pc, #272]	; (80037bc <HAL_ADC_ConfigChannel+0x678>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d004      	beq.n	80036b8 <HAL_ADC_ConfigChannel+0x574>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a43      	ldr	r2, [pc, #268]	; (80037c0 <HAL_ADC_ConfigChannel+0x67c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d101      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x578>
 80036b8:	4a42      	ldr	r2, [pc, #264]	; (80037c4 <HAL_ADC_ConfigChannel+0x680>)
 80036ba:	e000      	b.n	80036be <HAL_ADC_ConfigChannel+0x57a>
 80036bc:	4a42      	ldr	r2, [pc, #264]	; (80037c8 <HAL_ADC_ConfigChannel+0x684>)
 80036be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036c4:	4619      	mov	r1, r3
 80036c6:	4610      	mov	r0, r2
 80036c8:	f7ff f845 	bl	8002756 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036cc:	4b41      	ldr	r3, [pc, #260]	; (80037d4 <HAL_ADC_ConfigChannel+0x690>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	099b      	lsrs	r3, r3, #6
 80036d2:	4a41      	ldr	r2, [pc, #260]	; (80037d8 <HAL_ADC_ConfigChannel+0x694>)
 80036d4:	fba2 2303 	umull	r2, r3, r2, r3
 80036d8:	099b      	lsrs	r3, r3, #6
 80036da:	3301      	adds	r3, #1
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80036e0:	e002      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	3b01      	subs	r3, #1
 80036e6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f9      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036ee:	e05a      	b.n	80037a6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a39      	ldr	r2, [pc, #228]	; (80037dc <HAL_ADC_ConfigChannel+0x698>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d11e      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x5f4>
 80036fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d119      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a30      	ldr	r2, [pc, #192]	; (80037cc <HAL_ADC_ConfigChannel+0x688>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d14b      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a2a      	ldr	r2, [pc, #168]	; (80037bc <HAL_ADC_ConfigChannel+0x678>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d004      	beq.n	8003722 <HAL_ADC_ConfigChannel+0x5de>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a28      	ldr	r2, [pc, #160]	; (80037c0 <HAL_ADC_ConfigChannel+0x67c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d101      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x5e2>
 8003722:	4a28      	ldr	r2, [pc, #160]	; (80037c4 <HAL_ADC_ConfigChannel+0x680>)
 8003724:	e000      	b.n	8003728 <HAL_ADC_ConfigChannel+0x5e4>
 8003726:	4a28      	ldr	r2, [pc, #160]	; (80037c8 <HAL_ADC_ConfigChannel+0x684>)
 8003728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800372a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800372e:	4619      	mov	r1, r3
 8003730:	4610      	mov	r0, r2
 8003732:	f7ff f810 	bl	8002756 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003736:	e036      	b.n	80037a6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a28      	ldr	r2, [pc, #160]	; (80037e0 <HAL_ADC_ConfigChannel+0x69c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d131      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x662>
 8003742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003744:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d12c      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1e      	ldr	r2, [pc, #120]	; (80037cc <HAL_ADC_ConfigChannel+0x688>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d127      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a18      	ldr	r2, [pc, #96]	; (80037bc <HAL_ADC_ConfigChannel+0x678>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d004      	beq.n	800376a <HAL_ADC_ConfigChannel+0x626>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a16      	ldr	r2, [pc, #88]	; (80037c0 <HAL_ADC_ConfigChannel+0x67c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d101      	bne.n	800376e <HAL_ADC_ConfigChannel+0x62a>
 800376a:	4a16      	ldr	r2, [pc, #88]	; (80037c4 <HAL_ADC_ConfigChannel+0x680>)
 800376c:	e000      	b.n	8003770 <HAL_ADC_ConfigChannel+0x62c>
 800376e:	4a16      	ldr	r2, [pc, #88]	; (80037c8 <HAL_ADC_ConfigChannel+0x684>)
 8003770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003772:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003776:	4619      	mov	r1, r3
 8003778:	4610      	mov	r0, r2
 800377a:	f7fe ffec 	bl	8002756 <LL_ADC_SetCommonPathInternalCh>
 800377e:	e012      	b.n	80037a6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003784:	f043 0220 	orr.w	r2, r3, #32
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003792:	e008      	b.n	80037a6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003798:	f043 0220 	orr.w	r2, r3, #32
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80037ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3784      	adds	r7, #132	; 0x84
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd90      	pop	{r4, r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40022000 	.word	0x40022000
 80037c0:	40022100 	.word	0x40022100
 80037c4:	40022300 	.word	0x40022300
 80037c8:	58026300 	.word	0x58026300
 80037cc:	58026000 	.word	0x58026000
 80037d0:	cb840000 	.word	0xcb840000
 80037d4:	24000024 	.word	0x24000024
 80037d8:	053e2d63 	.word	0x053e2d63
 80037dc:	c7520000 	.word	0xc7520000
 80037e0:	cfb80000 	.word	0xcfb80000

080037e4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff f994 	bl	8002b28 <LL_ADC_REG_IsConversionOngoing>
 8003800:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff f9b6 	bl	8002b78 <LL_ADC_INJ_IsConversionOngoing>
 800380c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d103      	bne.n	800381c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 8098 	beq.w	800394c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d02a      	beq.n	8003880 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	7d5b      	ldrb	r3, [r3, #21]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d126      	bne.n	8003880 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	7d1b      	ldrb	r3, [r3, #20]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d122      	bne.n	8003880 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800383a:	2301      	movs	r3, #1
 800383c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800383e:	e014      	b.n	800386a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	4a45      	ldr	r2, [pc, #276]	; (8003958 <ADC_ConversionStop+0x174>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d90d      	bls.n	8003864 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384c:	f043 0210 	orr.w	r2, r3, #16
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003858:	f043 0201 	orr.w	r2, r3, #1
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e074      	b.n	800394e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	3301      	adds	r3, #1
 8003868:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003874:	2b40      	cmp	r3, #64	; 0x40
 8003876:	d1e3      	bne.n	8003840 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2240      	movs	r2, #64	; 0x40
 800387e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d014      	beq.n	80038b0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff f94c 	bl	8002b28 <LL_ADC_REG_IsConversionOngoing>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00c      	beq.n	80038b0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff f909 	bl	8002ab2 <LL_ADC_IsDisableOngoing>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d104      	bne.n	80038b0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff f928 	bl	8002b00 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d014      	beq.n	80038e0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff f95c 	bl	8002b78 <LL_ADC_INJ_IsConversionOngoing>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00c      	beq.n	80038e0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff f8f1 	bl	8002ab2 <LL_ADC_IsDisableOngoing>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d104      	bne.n	80038e0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff f938 	bl	8002b50 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d005      	beq.n	80038f2 <ADC_ConversionStop+0x10e>
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d105      	bne.n	80038f8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80038ec:	230c      	movs	r3, #12
 80038ee:	617b      	str	r3, [r7, #20]
        break;
 80038f0:	e005      	b.n	80038fe <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80038f2:	2308      	movs	r3, #8
 80038f4:	617b      	str	r3, [r7, #20]
        break;
 80038f6:	e002      	b.n	80038fe <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80038f8:	2304      	movs	r3, #4
 80038fa:	617b      	str	r3, [r7, #20]
        break;
 80038fc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80038fe:	f7fe fecb 	bl	8002698 <HAL_GetTick>
 8003902:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003904:	e01b      	b.n	800393e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003906:	f7fe fec7 	bl	8002698 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b05      	cmp	r3, #5
 8003912:	d914      	bls.n	800393e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	4013      	ands	r3, r2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00d      	beq.n	800393e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003926:	f043 0210 	orr.w	r2, r3, #16
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003932:	f043 0201 	orr.w	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e007      	b.n	800394e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	4013      	ands	r3, r2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1dc      	bne.n	8003906 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3720      	adds	r7, #32
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	000cdbff 	.word	0x000cdbff

0800395c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff f88f 	bl	8002a8c <LL_ADC_IsEnabled>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d16e      	bne.n	8003a52 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	4b38      	ldr	r3, [pc, #224]	; (8003a5c <ADC_Enable+0x100>)
 800397c:	4013      	ands	r3, r2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00d      	beq.n	800399e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003986:	f043 0210 	orr.w	r2, r3, #16
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003992:	f043 0201 	orr.w	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e05a      	b.n	8003a54 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff f84a 	bl	8002a3c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80039a8:	f7fe fe76 	bl	8002698 <HAL_GetTick>
 80039ac:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a2b      	ldr	r2, [pc, #172]	; (8003a60 <ADC_Enable+0x104>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d004      	beq.n	80039c2 <ADC_Enable+0x66>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a29      	ldr	r2, [pc, #164]	; (8003a64 <ADC_Enable+0x108>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d101      	bne.n	80039c6 <ADC_Enable+0x6a>
 80039c2:	4b29      	ldr	r3, [pc, #164]	; (8003a68 <ADC_Enable+0x10c>)
 80039c4:	e000      	b.n	80039c8 <ADC_Enable+0x6c>
 80039c6:	4b29      	ldr	r3, [pc, #164]	; (8003a6c <ADC_Enable+0x110>)
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fe ffdb 	bl	8002984 <LL_ADC_GetMultimode>
 80039ce:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a23      	ldr	r2, [pc, #140]	; (8003a64 <ADC_Enable+0x108>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d002      	beq.n	80039e0 <ADC_Enable+0x84>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	e000      	b.n	80039e2 <ADC_Enable+0x86>
 80039e0:	4b1f      	ldr	r3, [pc, #124]	; (8003a60 <ADC_Enable+0x104>)
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6812      	ldr	r2, [r2, #0]
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d02c      	beq.n	8003a44 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d130      	bne.n	8003a52 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039f0:	e028      	b.n	8003a44 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff f848 	bl	8002a8c <LL_ADC_IsEnabled>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d104      	bne.n	8003a0c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff f818 	bl	8002a3c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a0c:	f7fe fe44 	bl	8002698 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d914      	bls.n	8003a44 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d00d      	beq.n	8003a44 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2c:	f043 0210 	orr.w	r2, r3, #16
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a38:	f043 0201 	orr.w	r2, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e007      	b.n	8003a54 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d1cf      	bne.n	80039f2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	8000003f 	.word	0x8000003f
 8003a60:	40022000 	.word	0x40022000
 8003a64:	40022100 	.word	0x40022100
 8003a68:	40022300 	.word	0x40022300
 8003a6c:	58026300 	.word	0x58026300

08003a70 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff f818 	bl	8002ab2 <LL_ADC_IsDisableOngoing>
 8003a82:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fe ffff 	bl	8002a8c <LL_ADC_IsEnabled>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d047      	beq.n	8003b24 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d144      	bne.n	8003b24 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 030d 	and.w	r3, r3, #13
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d10c      	bne.n	8003ac2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fe ffd9 	bl	8002a64 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2203      	movs	r2, #3
 8003ab8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003aba:	f7fe fded 	bl	8002698 <HAL_GetTick>
 8003abe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ac0:	e029      	b.n	8003b16 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac6:	f043 0210 	orr.w	r2, r3, #16
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad2:	f043 0201 	orr.w	r2, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e023      	b.n	8003b26 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ade:	f7fe fddb 	bl	8002698 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d914      	bls.n	8003b16 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00d      	beq.n	8003b16 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afe:	f043 0210 	orr.w	r2, r3, #16
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0a:	f043 0201 	orr.w	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e007      	b.n	8003b26 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1dc      	bne.n	8003ade <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b084      	sub	sp, #16
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d14b      	bne.n	8003be0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d021      	beq.n	8003ba6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fe fe6a 	bl	8002840 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d032      	beq.n	8003bd8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d12b      	bne.n	8003bd8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d11f      	bne.n	8003bd8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9c:	f043 0201 	orr.w	r2, r3, #1
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	655a      	str	r2, [r3, #84]	; 0x54
 8003ba4:	e018      	b.n	8003bd8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d111      	bne.n	8003bd8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d105      	bne.n	8003bd8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd0:	f043 0201 	orr.w	r2, r3, #1
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f7fd fffb 	bl	8001bd4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003bde:	e00e      	b.n	8003bfe <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f7ff fa9f 	bl	8003130 <HAL_ADC_ErrorCallback>
}
 8003bf2:	e004      	b.n	8003bfe <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	4798      	blx	r3
}
 8003bfe:	bf00      	nop
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b084      	sub	sp, #16
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f7fd ffa7 	bl	8001b68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c1a:	bf00      	nop
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b084      	sub	sp, #16
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c40:	f043 0204 	orr.w	r2, r3, #4
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f7ff fa71 	bl	8003130 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c4e:	bf00      	nop
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a79      	ldr	r2, [pc, #484]	; (8003e4c <ADC_ConfigureBoostMode+0x1f4>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d004      	beq.n	8003c74 <ADC_ConfigureBoostMode+0x1c>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a78      	ldr	r2, [pc, #480]	; (8003e50 <ADC_ConfigureBoostMode+0x1f8>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d109      	bne.n	8003c88 <ADC_ConfigureBoostMode+0x30>
 8003c74:	4b77      	ldr	r3, [pc, #476]	; (8003e54 <ADC_ConfigureBoostMode+0x1fc>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	bf14      	ite	ne
 8003c80:	2301      	movne	r3, #1
 8003c82:	2300      	moveq	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	e008      	b.n	8003c9a <ADC_ConfigureBoostMode+0x42>
 8003c88:	4b73      	ldr	r3, [pc, #460]	; (8003e58 <ADC_ConfigureBoostMode+0x200>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	bf14      	ite	ne
 8003c94:	2301      	movne	r3, #1
 8003c96:	2300      	moveq	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d01c      	beq.n	8003cd8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003c9e:	f005 f86b 	bl	8008d78 <HAL_RCC_GetHCLKFreq>
 8003ca2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003cac:	d010      	beq.n	8003cd0 <ADC_ConfigureBoostMode+0x78>
 8003cae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003cb2:	d871      	bhi.n	8003d98 <ADC_ConfigureBoostMode+0x140>
 8003cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb8:	d002      	beq.n	8003cc0 <ADC_ConfigureBoostMode+0x68>
 8003cba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cbe:	d16b      	bne.n	8003d98 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	0c1b      	lsrs	r3, r3, #16
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ccc:	60fb      	str	r3, [r7, #12]
        break;
 8003cce:	e066      	b.n	8003d9e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	089b      	lsrs	r3, r3, #2
 8003cd4:	60fb      	str	r3, [r7, #12]
        break;
 8003cd6:	e062      	b.n	8003d9e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003cd8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003cdc:	f005 ffee 	bl	8009cbc <HAL_RCCEx_GetPeriphCLKFreq>
 8003ce0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003cea:	d051      	beq.n	8003d90 <ADC_ConfigureBoostMode+0x138>
 8003cec:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003cf0:	d854      	bhi.n	8003d9c <ADC_ConfigureBoostMode+0x144>
 8003cf2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003cf6:	d047      	beq.n	8003d88 <ADC_ConfigureBoostMode+0x130>
 8003cf8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003cfc:	d84e      	bhi.n	8003d9c <ADC_ConfigureBoostMode+0x144>
 8003cfe:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d02:	d03d      	beq.n	8003d80 <ADC_ConfigureBoostMode+0x128>
 8003d04:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d08:	d848      	bhi.n	8003d9c <ADC_ConfigureBoostMode+0x144>
 8003d0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d0e:	d033      	beq.n	8003d78 <ADC_ConfigureBoostMode+0x120>
 8003d10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d14:	d842      	bhi.n	8003d9c <ADC_ConfigureBoostMode+0x144>
 8003d16:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d1a:	d029      	beq.n	8003d70 <ADC_ConfigureBoostMode+0x118>
 8003d1c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d20:	d83c      	bhi.n	8003d9c <ADC_ConfigureBoostMode+0x144>
 8003d22:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d26:	d01a      	beq.n	8003d5e <ADC_ConfigureBoostMode+0x106>
 8003d28:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d2c:	d836      	bhi.n	8003d9c <ADC_ConfigureBoostMode+0x144>
 8003d2e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d32:	d014      	beq.n	8003d5e <ADC_ConfigureBoostMode+0x106>
 8003d34:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d38:	d830      	bhi.n	8003d9c <ADC_ConfigureBoostMode+0x144>
 8003d3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d3e:	d00e      	beq.n	8003d5e <ADC_ConfigureBoostMode+0x106>
 8003d40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d44:	d82a      	bhi.n	8003d9c <ADC_ConfigureBoostMode+0x144>
 8003d46:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d4a:	d008      	beq.n	8003d5e <ADC_ConfigureBoostMode+0x106>
 8003d4c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d50:	d824      	bhi.n	8003d9c <ADC_ConfigureBoostMode+0x144>
 8003d52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d56:	d002      	beq.n	8003d5e <ADC_ConfigureBoostMode+0x106>
 8003d58:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d5c:	d11e      	bne.n	8003d9c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	0c9b      	lsrs	r3, r3, #18
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6c:	60fb      	str	r3, [r7, #12]
        break;
 8003d6e:	e016      	b.n	8003d9e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	091b      	lsrs	r3, r3, #4
 8003d74:	60fb      	str	r3, [r7, #12]
        break;
 8003d76:	e012      	b.n	8003d9e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	095b      	lsrs	r3, r3, #5
 8003d7c:	60fb      	str	r3, [r7, #12]
        break;
 8003d7e:	e00e      	b.n	8003d9e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	099b      	lsrs	r3, r3, #6
 8003d84:	60fb      	str	r3, [r7, #12]
        break;
 8003d86:	e00a      	b.n	8003d9e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	09db      	lsrs	r3, r3, #7
 8003d8c:	60fb      	str	r3, [r7, #12]
        break;
 8003d8e:	e006      	b.n	8003d9e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	0a1b      	lsrs	r3, r3, #8
 8003d94:	60fb      	str	r3, [r7, #12]
        break;
 8003d96:	e002      	b.n	8003d9e <ADC_ConfigureBoostMode+0x146>
        break;
 8003d98:	bf00      	nop
 8003d9a:	e000      	b.n	8003d9e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003d9c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003d9e:	f7fe fcbb 	bl	8002718 <HAL_GetREVID>
 8003da2:	4603      	mov	r3, r0
 8003da4:	f241 0203 	movw	r2, #4099	; 0x1003
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d815      	bhi.n	8003dd8 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4a2b      	ldr	r2, [pc, #172]	; (8003e5c <ADC_ConfigureBoostMode+0x204>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d908      	bls.n	8003dc6 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dc2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003dc4:	e03e      	b.n	8003e44 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dd4:	609a      	str	r2, [r3, #8]
}
 8003dd6:	e035      	b.n	8003e44 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	085b      	lsrs	r3, r3, #1
 8003ddc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4a1f      	ldr	r2, [pc, #124]	; (8003e60 <ADC_ConfigureBoostMode+0x208>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d808      	bhi.n	8003df8 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003df4:	609a      	str	r2, [r3, #8]
}
 8003df6:	e025      	b.n	8003e44 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4a1a      	ldr	r2, [pc, #104]	; (8003e64 <ADC_ConfigureBoostMode+0x20c>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d80a      	bhi.n	8003e16 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e12:	609a      	str	r2, [r3, #8]
}
 8003e14:	e016      	b.n	8003e44 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4a13      	ldr	r2, [pc, #76]	; (8003e68 <ADC_ConfigureBoostMode+0x210>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d80a      	bhi.n	8003e34 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e30:	609a      	str	r2, [r3, #8]
}
 8003e32:	e007      	b.n	8003e44 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003e42:	609a      	str	r2, [r3, #8]
}
 8003e44:	bf00      	nop
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40022000 	.word	0x40022000
 8003e50:	40022100 	.word	0x40022100
 8003e54:	40022300 	.word	0x40022300
 8003e58:	58026300 	.word	0x58026300
 8003e5c:	01312d00 	.word	0x01312d00
 8003e60:	005f5e10 	.word	0x005f5e10
 8003e64:	00bebc20 	.word	0x00bebc20
 8003e68:	017d7840 	.word	0x017d7840

08003e6c <LL_ADC_IsEnabled>:
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <LL_ADC_IsEnabled+0x18>
 8003e80:	2301      	movs	r3, #1
 8003e82:	e000      	b.n	8003e86 <LL_ADC_IsEnabled+0x1a>
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
	...

08003e94 <LL_ADC_StartCalibration>:
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <LL_ADC_StartCalibration+0x38>)
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	609a      	str	r2, [r3, #8]
}
 8003ec0:	bf00      	nop
 8003ec2:	3714      	adds	r7, #20
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	3ffeffc0 	.word	0x3ffeffc0

08003ed0 <LL_ADC_IsCalibrationOnGoing>:
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ee4:	d101      	bne.n	8003eea <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d101      	bne.n	8003f10 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e000      	b.n	8003f12 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
	...

08003f20 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d101      	bne.n	8003f3e <HAL_ADCEx_Calibration_Start+0x1e>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	e04c      	b.n	8003fd8 <HAL_ADCEx_Calibration_Start+0xb8>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f7ff fd92 	bl	8003a70 <ADC_Disable>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003f50:	7dfb      	ldrb	r3, [r7, #23]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d135      	bne.n	8003fc2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f5a:	4b21      	ldr	r3, [pc, #132]	; (8003fe0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	f043 0202 	orr.w	r2, r3, #2
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	68b9      	ldr	r1, [r7, #8]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff ff90 	bl	8003e94 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f74:	e014      	b.n	8003fa0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	4a19      	ldr	r2, [pc, #100]	; (8003fe4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d30d      	bcc.n	8003fa0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f88:	f023 0312 	bic.w	r3, r3, #18
 8003f8c:	f043 0210 	orr.w	r2, r3, #16
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e01b      	b.n	8003fd8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff ff93 	bl	8003ed0 <LL_ADC_IsCalibrationOnGoing>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e2      	bne.n	8003f76 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb4:	f023 0303 	bic.w	r3, r3, #3
 8003fb8:	f043 0201 	orr.w	r2, r3, #1
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	655a      	str	r2, [r3, #84]	; 0x54
 8003fc0:	e005      	b.n	8003fce <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc6:	f043 0210 	orr.w	r2, r3, #16
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	ffffeefd 	.word	0xffffeefd
 8003fe4:	25c3f800 	.word	0x25c3f800

08003fe8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003fe8:	b590      	push	{r4, r7, lr}
 8003fea:	b09f      	sub	sp, #124	; 0x7c
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004002:	2302      	movs	r3, #2
 8004004:	e0be      	b.n	8004184 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800400e:	2300      	movs	r3, #0
 8004010:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004012:	2300      	movs	r3, #0
 8004014:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a5c      	ldr	r2, [pc, #368]	; (800418c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d102      	bne.n	8004026 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004020:	4b5b      	ldr	r3, [pc, #364]	; (8004190 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004022:	60bb      	str	r3, [r7, #8]
 8004024:	e001      	b.n	800402a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004026:	2300      	movs	r3, #0
 8004028:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10b      	bne.n	8004048 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004034:	f043 0220 	orr.w	r2, r3, #32
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e09d      	b.n	8004184 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff ff54 	bl	8003ef8 <LL_ADC_REG_IsConversionOngoing>
 8004050:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff ff4e 	bl	8003ef8 <LL_ADC_REG_IsConversionOngoing>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d17f      	bne.n	8004162 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004064:	2b00      	cmp	r3, #0
 8004066:	d17c      	bne.n	8004162 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a47      	ldr	r2, [pc, #284]	; (800418c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d004      	beq.n	800407c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a46      	ldr	r2, [pc, #280]	; (8004190 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d101      	bne.n	8004080 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800407c:	4b45      	ldr	r3, [pc, #276]	; (8004194 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800407e:	e000      	b.n	8004082 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004080:	4b45      	ldr	r3, [pc, #276]	; (8004198 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004082:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d039      	beq.n	8004100 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800408c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	431a      	orrs	r2, r3
 800409a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a3a      	ldr	r2, [pc, #232]	; (800418c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d004      	beq.n	80040b2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a38      	ldr	r2, [pc, #224]	; (8004190 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d10e      	bne.n	80040d0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80040b2:	4836      	ldr	r0, [pc, #216]	; (800418c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040b4:	f7ff feda 	bl	8003e6c <LL_ADC_IsEnabled>
 80040b8:	4604      	mov	r4, r0
 80040ba:	4835      	ldr	r0, [pc, #212]	; (8004190 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040bc:	f7ff fed6 	bl	8003e6c <LL_ADC_IsEnabled>
 80040c0:	4603      	mov	r3, r0
 80040c2:	4323      	orrs	r3, r4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	bf0c      	ite	eq
 80040c8:	2301      	moveq	r3, #1
 80040ca:	2300      	movne	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	e008      	b.n	80040e2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80040d0:	4832      	ldr	r0, [pc, #200]	; (800419c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80040d2:	f7ff fecb 	bl	8003e6c <LL_ADC_IsEnabled>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	bf0c      	ite	eq
 80040dc:	2301      	moveq	r3, #1
 80040de:	2300      	movne	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d047      	beq.n	8004176 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80040e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	4b2d      	ldr	r3, [pc, #180]	; (80041a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	6811      	ldr	r1, [r2, #0]
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	6892      	ldr	r2, [r2, #8]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	431a      	orrs	r2, r3
 80040fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040fe:	e03a      	b.n	8004176 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800410a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a1e      	ldr	r2, [pc, #120]	; (800418c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d004      	beq.n	8004120 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a1d      	ldr	r2, [pc, #116]	; (8004190 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d10e      	bne.n	800413e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004120:	481a      	ldr	r0, [pc, #104]	; (800418c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004122:	f7ff fea3 	bl	8003e6c <LL_ADC_IsEnabled>
 8004126:	4604      	mov	r4, r0
 8004128:	4819      	ldr	r0, [pc, #100]	; (8004190 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800412a:	f7ff fe9f 	bl	8003e6c <LL_ADC_IsEnabled>
 800412e:	4603      	mov	r3, r0
 8004130:	4323      	orrs	r3, r4
 8004132:	2b00      	cmp	r3, #0
 8004134:	bf0c      	ite	eq
 8004136:	2301      	moveq	r3, #1
 8004138:	2300      	movne	r3, #0
 800413a:	b2db      	uxtb	r3, r3
 800413c:	e008      	b.n	8004150 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800413e:	4817      	ldr	r0, [pc, #92]	; (800419c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004140:	f7ff fe94 	bl	8003e6c <LL_ADC_IsEnabled>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	bf0c      	ite	eq
 800414a:	2301      	moveq	r3, #1
 800414c:	2300      	movne	r3, #0
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d010      	beq.n	8004176 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800415a:	4013      	ands	r3, r2
 800415c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800415e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004160:	e009      	b.n	8004176 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004166:	f043 0220 	orr.w	r2, r3, #32
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004174:	e000      	b.n	8004178 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004176:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004180:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004184:	4618      	mov	r0, r3
 8004186:	377c      	adds	r7, #124	; 0x7c
 8004188:	46bd      	mov	sp, r7
 800418a:	bd90      	pop	{r4, r7, pc}
 800418c:	40022000 	.word	0x40022000
 8004190:	40022100 	.word	0x40022100
 8004194:	40022300 	.word	0x40022300
 8004198:	58026300 	.word	0x58026300
 800419c:	58026000 	.word	0x58026000
 80041a0:	fffff0e0 	.word	0xfffff0e0

080041a4 <__NVIC_SetPriorityGrouping>:
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041b4:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <__NVIC_SetPriorityGrouping+0x40>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041c0:	4013      	ands	r3, r2
 80041c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80041cc:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <__NVIC_SetPriorityGrouping+0x44>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041d2:	4a04      	ldr	r2, [pc, #16]	; (80041e4 <__NVIC_SetPriorityGrouping+0x40>)
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	60d3      	str	r3, [r2, #12]
}
 80041d8:	bf00      	nop
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	e000ed00 	.word	0xe000ed00
 80041e8:	05fa0000 	.word	0x05fa0000

080041ec <__NVIC_GetPriorityGrouping>:
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041f0:	4b04      	ldr	r3, [pc, #16]	; (8004204 <__NVIC_GetPriorityGrouping+0x18>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	0a1b      	lsrs	r3, r3, #8
 80041f6:	f003 0307 	and.w	r3, r3, #7
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	e000ed00 	.word	0xe000ed00

08004208 <__NVIC_EnableIRQ>:
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004216:	2b00      	cmp	r3, #0
 8004218:	db0b      	blt.n	8004232 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800421a:	88fb      	ldrh	r3, [r7, #6]
 800421c:	f003 021f 	and.w	r2, r3, #31
 8004220:	4907      	ldr	r1, [pc, #28]	; (8004240 <__NVIC_EnableIRQ+0x38>)
 8004222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	2001      	movs	r0, #1
 800422a:	fa00 f202 	lsl.w	r2, r0, r2
 800422e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	e000e100 	.word	0xe000e100

08004244 <__NVIC_SetPriority>:
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	4603      	mov	r3, r0
 800424c:	6039      	str	r1, [r7, #0]
 800424e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004250:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004254:	2b00      	cmp	r3, #0
 8004256:	db0a      	blt.n	800426e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	b2da      	uxtb	r2, r3
 800425c:	490c      	ldr	r1, [pc, #48]	; (8004290 <__NVIC_SetPriority+0x4c>)
 800425e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004262:	0112      	lsls	r2, r2, #4
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	440b      	add	r3, r1
 8004268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800426c:	e00a      	b.n	8004284 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	b2da      	uxtb	r2, r3
 8004272:	4908      	ldr	r1, [pc, #32]	; (8004294 <__NVIC_SetPriority+0x50>)
 8004274:	88fb      	ldrh	r3, [r7, #6]
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	3b04      	subs	r3, #4
 800427c:	0112      	lsls	r2, r2, #4
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	440b      	add	r3, r1
 8004282:	761a      	strb	r2, [r3, #24]
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	e000e100 	.word	0xe000e100
 8004294:	e000ed00 	.word	0xe000ed00

08004298 <NVIC_EncodePriority>:
{
 8004298:	b480      	push	{r7}
 800429a:	b089      	sub	sp, #36	; 0x24
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f1c3 0307 	rsb	r3, r3, #7
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	bf28      	it	cs
 80042b6:	2304      	movcs	r3, #4
 80042b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	3304      	adds	r3, #4
 80042be:	2b06      	cmp	r3, #6
 80042c0:	d902      	bls.n	80042c8 <NVIC_EncodePriority+0x30>
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	3b03      	subs	r3, #3
 80042c6:	e000      	b.n	80042ca <NVIC_EncodePriority+0x32>
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	43da      	mvns	r2, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	401a      	ands	r2, r3
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ea:	43d9      	mvns	r1, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f0:	4313      	orrs	r3, r2
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3724      	adds	r7, #36	; 0x24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
	...

08004300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3b01      	subs	r3, #1
 800430c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004310:	d301      	bcc.n	8004316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004312:	2301      	movs	r3, #1
 8004314:	e00f      	b.n	8004336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004316:	4a0a      	ldr	r2, [pc, #40]	; (8004340 <SysTick_Config+0x40>)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3b01      	subs	r3, #1
 800431c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800431e:	210f      	movs	r1, #15
 8004320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004324:	f7ff ff8e 	bl	8004244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <SysTick_Config+0x40>)
 800432a:	2200      	movs	r2, #0
 800432c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800432e:	4b04      	ldr	r3, [pc, #16]	; (8004340 <SysTick_Config+0x40>)
 8004330:	2207      	movs	r2, #7
 8004332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	e000e010 	.word	0xe000e010

08004344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff ff29 	bl	80041a4 <__NVIC_SetPriorityGrouping>
}
 8004352:	bf00      	nop
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b086      	sub	sp, #24
 800435e:	af00      	add	r7, sp, #0
 8004360:	4603      	mov	r3, r0
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	607a      	str	r2, [r7, #4]
 8004366:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004368:	f7ff ff40 	bl	80041ec <__NVIC_GetPriorityGrouping>
 800436c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	68b9      	ldr	r1, [r7, #8]
 8004372:	6978      	ldr	r0, [r7, #20]
 8004374:	f7ff ff90 	bl	8004298 <NVIC_EncodePriority>
 8004378:	4602      	mov	r2, r0
 800437a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800437e:	4611      	mov	r1, r2
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff ff5f 	bl	8004244 <__NVIC_SetPriority>
}
 8004386:	bf00      	nop
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
 8004394:	4603      	mov	r3, r0
 8004396:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004398:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff ff33 	bl	8004208 <__NVIC_EnableIRQ>
}
 80043a2:	bf00      	nop
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b082      	sub	sp, #8
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7ff ffa4 	bl	8004300 <SysTick_Config>
 80043b8:	4603      	mov	r3, r0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b082      	sub	sp, #8
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e014      	b.n	80043fe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	791b      	ldrb	r3, [r3, #4]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d105      	bne.n	80043ea <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7fd fd35 	bl	8001e54 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2202      	movs	r2, #2
 80043ee:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	795b      	ldrb	r3, [r3, #5]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_DAC_Start+0x16>
 8004418:	2302      	movs	r3, #2
 800441a:	e040      	b.n	800449e <HAL_DAC_Start+0x98>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2202      	movs	r2, #2
 8004426:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6819      	ldr	r1, [r3, #0]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	f003 0310 	and.w	r3, r3, #16
 8004434:	2201      	movs	r2, #1
 8004436:	409a      	lsls	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10f      	bne.n	8004466 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004450:	2b02      	cmp	r3, #2
 8004452:	d11d      	bne.n	8004490 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	605a      	str	r2, [r3, #4]
 8004464:	e014      	b.n	8004490 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	f003 0310 	and.w	r3, r3, #16
 8004476:	2102      	movs	r1, #2
 8004478:	fa01 f303 	lsl.w	r3, r1, r3
 800447c:	429a      	cmp	r2, r3
 800447e:	d107      	bne.n	8004490 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0202 	orr.w	r2, r2, #2
 800448e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
	...

080044ac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	795b      	ldrb	r3, [r3, #5]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d101      	bne.n	80044c4 <HAL_DAC_ConfigChannel+0x18>
 80044c0:	2302      	movs	r3, #2
 80044c2:	e11d      	b.n	8004700 <HAL_DAC_ConfigChannel+0x254>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2201      	movs	r2, #1
 80044c8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2202      	movs	r2, #2
 80044ce:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d174      	bne.n	80045c2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80044d8:	f7fe f8de 	bl	8002698 <HAL_GetTick>
 80044dc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d134      	bne.n	800454e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80044e4:	e011      	b.n	800450a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80044e6:	f7fe f8d7 	bl	8002698 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d90a      	bls.n	800450a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	f043 0208 	orr.w	r2, r3, #8
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2203      	movs	r2, #3
 8004504:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e0fa      	b.n	8004700 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004510:	4b7d      	ldr	r3, [pc, #500]	; (8004708 <HAL_DAC_ConfigChannel+0x25c>)
 8004512:	4013      	ands	r3, r2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1e6      	bne.n	80044e6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004518:	2001      	movs	r0, #1
 800451a:	f7fe f8c9 	bl	80026b0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	6992      	ldr	r2, [r2, #24]
 8004526:	641a      	str	r2, [r3, #64]	; 0x40
 8004528:	e01e      	b.n	8004568 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800452a:	f7fe f8b5 	bl	8002698 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b01      	cmp	r3, #1
 8004536:	d90a      	bls.n	800454e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	f043 0208 	orr.w	r2, r3, #8
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2203      	movs	r2, #3
 8004548:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e0d8      	b.n	8004700 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004554:	2b00      	cmp	r3, #0
 8004556:	dbe8      	blt.n	800452a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004558:	2001      	movs	r0, #1
 800455a:	f7fe f8a9 	bl	80026b0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	6992      	ldr	r2, [r2, #24]
 8004566:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f003 0310 	and.w	r3, r3, #16
 8004574:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004578:	fa01 f303 	lsl.w	r3, r1, r3
 800457c:	43db      	mvns	r3, r3
 800457e:	ea02 0103 	and.w	r1, r2, r3
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	69da      	ldr	r2, [r3, #28]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f003 0310 	and.w	r3, r3, #16
 800458c:	409a      	lsls	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	21ff      	movs	r1, #255	; 0xff
 80045a4:	fa01 f303 	lsl.w	r3, r1, r3
 80045a8:	43db      	mvns	r3, r3
 80045aa:	ea02 0103 	and.w	r1, r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	6a1a      	ldr	r2, [r3, #32]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f003 0310 	and.w	r3, r3, #16
 80045b8:	409a      	lsls	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d11d      	bne.n	8004606 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d0:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	221f      	movs	r2, #31
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	43db      	mvns	r3, r3
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	4013      	ands	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f003 0310 	and.w	r3, r3, #16
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f003 0310 	and.w	r3, r3, #16
 8004614:	2207      	movs	r2, #7
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	43db      	mvns	r3, r3
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	4013      	ands	r3, r2
 8004620:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d102      	bne.n	8004630 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800462a:	2300      	movs	r3, #0
 800462c:	61fb      	str	r3, [r7, #28]
 800462e:	e00f      	b.n	8004650 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d102      	bne.n	800463e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004638:	2301      	movs	r3, #1
 800463a:	61fb      	str	r3, [r7, #28]
 800463c:	e008      	b.n	8004650 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d102      	bne.n	800464c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004646:	2301      	movs	r3, #1
 8004648:	61fb      	str	r3, [r7, #28]
 800464a:	e001      	b.n	8004650 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800464c:	2300      	movs	r3, #0
 800464e:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	4313      	orrs	r3, r2
 800465a:	69fa      	ldr	r2, [r7, #28]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f003 0310 	and.w	r3, r3, #16
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	4313      	orrs	r3, r2
 8004670:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6819      	ldr	r1, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	43da      	mvns	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	400a      	ands	r2, r1
 8004696:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f003 0310 	and.w	r3, r3, #16
 80046a6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	43db      	mvns	r3, r3
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	4013      	ands	r3, r2
 80046b4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f003 0310 	and.w	r3, r3, #16
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6819      	ldr	r1, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f003 0310 	and.w	r3, r3, #16
 80046e2:	22c0      	movs	r2, #192	; 0xc0
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	43da      	mvns	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	400a      	ands	r2, r1
 80046f0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3720      	adds	r7, #32
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	20008000 	.word	0x20008000

0800470c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004714:	f7fd ffc0 	bl	8002698 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e316      	b.n	8004d52 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a66      	ldr	r2, [pc, #408]	; (80048c4 <HAL_DMA_Init+0x1b8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d04a      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a65      	ldr	r2, [pc, #404]	; (80048c8 <HAL_DMA_Init+0x1bc>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d045      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a63      	ldr	r2, [pc, #396]	; (80048cc <HAL_DMA_Init+0x1c0>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d040      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a62      	ldr	r2, [pc, #392]	; (80048d0 <HAL_DMA_Init+0x1c4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d03b      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a60      	ldr	r2, [pc, #384]	; (80048d4 <HAL_DMA_Init+0x1c8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d036      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a5f      	ldr	r2, [pc, #380]	; (80048d8 <HAL_DMA_Init+0x1cc>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d031      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a5d      	ldr	r2, [pc, #372]	; (80048dc <HAL_DMA_Init+0x1d0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d02c      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a5c      	ldr	r2, [pc, #368]	; (80048e0 <HAL_DMA_Init+0x1d4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d027      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a5a      	ldr	r2, [pc, #360]	; (80048e4 <HAL_DMA_Init+0x1d8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d022      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a59      	ldr	r2, [pc, #356]	; (80048e8 <HAL_DMA_Init+0x1dc>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d01d      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a57      	ldr	r2, [pc, #348]	; (80048ec <HAL_DMA_Init+0x1e0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d018      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a56      	ldr	r2, [pc, #344]	; (80048f0 <HAL_DMA_Init+0x1e4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d013      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a54      	ldr	r2, [pc, #336]	; (80048f4 <HAL_DMA_Init+0x1e8>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00e      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a53      	ldr	r2, [pc, #332]	; (80048f8 <HAL_DMA_Init+0x1ec>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d009      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a51      	ldr	r2, [pc, #324]	; (80048fc <HAL_DMA_Init+0x1f0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d004      	beq.n	80047c4 <HAL_DMA_Init+0xb8>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a50      	ldr	r2, [pc, #320]	; (8004900 <HAL_DMA_Init+0x1f4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d101      	bne.n	80047c8 <HAL_DMA_Init+0xbc>
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <HAL_DMA_Init+0xbe>
 80047c8:	2300      	movs	r3, #0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 813b 	beq.w	8004a46 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a37      	ldr	r2, [pc, #220]	; (80048c4 <HAL_DMA_Init+0x1b8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d04a      	beq.n	8004880 <HAL_DMA_Init+0x174>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a36      	ldr	r2, [pc, #216]	; (80048c8 <HAL_DMA_Init+0x1bc>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d045      	beq.n	8004880 <HAL_DMA_Init+0x174>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a34      	ldr	r2, [pc, #208]	; (80048cc <HAL_DMA_Init+0x1c0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d040      	beq.n	8004880 <HAL_DMA_Init+0x174>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a33      	ldr	r2, [pc, #204]	; (80048d0 <HAL_DMA_Init+0x1c4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d03b      	beq.n	8004880 <HAL_DMA_Init+0x174>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a31      	ldr	r2, [pc, #196]	; (80048d4 <HAL_DMA_Init+0x1c8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d036      	beq.n	8004880 <HAL_DMA_Init+0x174>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a30      	ldr	r2, [pc, #192]	; (80048d8 <HAL_DMA_Init+0x1cc>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d031      	beq.n	8004880 <HAL_DMA_Init+0x174>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a2e      	ldr	r2, [pc, #184]	; (80048dc <HAL_DMA_Init+0x1d0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d02c      	beq.n	8004880 <HAL_DMA_Init+0x174>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a2d      	ldr	r2, [pc, #180]	; (80048e0 <HAL_DMA_Init+0x1d4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d027      	beq.n	8004880 <HAL_DMA_Init+0x174>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a2b      	ldr	r2, [pc, #172]	; (80048e4 <HAL_DMA_Init+0x1d8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d022      	beq.n	8004880 <HAL_DMA_Init+0x174>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a2a      	ldr	r2, [pc, #168]	; (80048e8 <HAL_DMA_Init+0x1dc>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d01d      	beq.n	8004880 <HAL_DMA_Init+0x174>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a28      	ldr	r2, [pc, #160]	; (80048ec <HAL_DMA_Init+0x1e0>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d018      	beq.n	8004880 <HAL_DMA_Init+0x174>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a27      	ldr	r2, [pc, #156]	; (80048f0 <HAL_DMA_Init+0x1e4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d013      	beq.n	8004880 <HAL_DMA_Init+0x174>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a25      	ldr	r2, [pc, #148]	; (80048f4 <HAL_DMA_Init+0x1e8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00e      	beq.n	8004880 <HAL_DMA_Init+0x174>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a24      	ldr	r2, [pc, #144]	; (80048f8 <HAL_DMA_Init+0x1ec>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d009      	beq.n	8004880 <HAL_DMA_Init+0x174>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a22      	ldr	r2, [pc, #136]	; (80048fc <HAL_DMA_Init+0x1f0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d004      	beq.n	8004880 <HAL_DMA_Init+0x174>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a21      	ldr	r2, [pc, #132]	; (8004900 <HAL_DMA_Init+0x1f4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d108      	bne.n	8004892 <HAL_DMA_Init+0x186>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0201 	bic.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	e007      	b.n	80048a2 <HAL_DMA_Init+0x196>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0201 	bic.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80048a2:	e02f      	b.n	8004904 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048a4:	f7fd fef8 	bl	8002698 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b05      	cmp	r3, #5
 80048b0:	d928      	bls.n	8004904 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2220      	movs	r2, #32
 80048b6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2203      	movs	r2, #3
 80048bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e246      	b.n	8004d52 <HAL_DMA_Init+0x646>
 80048c4:	40020010 	.word	0x40020010
 80048c8:	40020028 	.word	0x40020028
 80048cc:	40020040 	.word	0x40020040
 80048d0:	40020058 	.word	0x40020058
 80048d4:	40020070 	.word	0x40020070
 80048d8:	40020088 	.word	0x40020088
 80048dc:	400200a0 	.word	0x400200a0
 80048e0:	400200b8 	.word	0x400200b8
 80048e4:	40020410 	.word	0x40020410
 80048e8:	40020428 	.word	0x40020428
 80048ec:	40020440 	.word	0x40020440
 80048f0:	40020458 	.word	0x40020458
 80048f4:	40020470 	.word	0x40020470
 80048f8:	40020488 	.word	0x40020488
 80048fc:	400204a0 	.word	0x400204a0
 8004900:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1c8      	bne.n	80048a4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4b83      	ldr	r3, [pc, #524]	; (8004b2c <HAL_DMA_Init+0x420>)
 800491e:	4013      	ands	r3, r2
 8004920:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800492a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004936:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004942:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	4313      	orrs	r3, r2
 800494e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	2b04      	cmp	r3, #4
 8004956:	d107      	bne.n	8004968 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004960:	4313      	orrs	r3, r2
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	4313      	orrs	r3, r2
 8004966:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004968:	4b71      	ldr	r3, [pc, #452]	; (8004b30 <HAL_DMA_Init+0x424>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	4b71      	ldr	r3, [pc, #452]	; (8004b34 <HAL_DMA_Init+0x428>)
 800496e:	4013      	ands	r3, r2
 8004970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004974:	d328      	bcc.n	80049c8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2b28      	cmp	r3, #40	; 0x28
 800497c:	d903      	bls.n	8004986 <HAL_DMA_Init+0x27a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b2e      	cmp	r3, #46	; 0x2e
 8004984:	d917      	bls.n	80049b6 <HAL_DMA_Init+0x2aa>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2b3e      	cmp	r3, #62	; 0x3e
 800498c:	d903      	bls.n	8004996 <HAL_DMA_Init+0x28a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b42      	cmp	r3, #66	; 0x42
 8004994:	d90f      	bls.n	80049b6 <HAL_DMA_Init+0x2aa>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b46      	cmp	r3, #70	; 0x46
 800499c:	d903      	bls.n	80049a6 <HAL_DMA_Init+0x29a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b48      	cmp	r3, #72	; 0x48
 80049a4:	d907      	bls.n	80049b6 <HAL_DMA_Init+0x2aa>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b4e      	cmp	r3, #78	; 0x4e
 80049ac:	d905      	bls.n	80049ba <HAL_DMA_Init+0x2ae>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2b52      	cmp	r3, #82	; 0x52
 80049b4:	d801      	bhi.n	80049ba <HAL_DMA_Init+0x2ae>
 80049b6:	2301      	movs	r3, #1
 80049b8:	e000      	b.n	80049bc <HAL_DMA_Init+0x2b0>
 80049ba:	2300      	movs	r3, #0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049c6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f023 0307 	bic.w	r3, r3, #7
 80049de:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d117      	bne.n	8004a22 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00e      	beq.n	8004a22 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f002 f8ed 	bl	8006be4 <DMA_CheckFifoParam>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d008      	beq.n	8004a22 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2240      	movs	r2, #64	; 0x40
 8004a14:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e197      	b.n	8004d52 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f002 f828 	bl	8006a80 <DMA_CalcBaseAndBitshift>
 8004a30:	4603      	mov	r3, r0
 8004a32:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a38:	f003 031f 	and.w	r3, r3, #31
 8004a3c:	223f      	movs	r2, #63	; 0x3f
 8004a3e:	409a      	lsls	r2, r3
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	609a      	str	r2, [r3, #8]
 8004a44:	e0cd      	b.n	8004be2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a3b      	ldr	r2, [pc, #236]	; (8004b38 <HAL_DMA_Init+0x42c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d022      	beq.n	8004a96 <HAL_DMA_Init+0x38a>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a39      	ldr	r2, [pc, #228]	; (8004b3c <HAL_DMA_Init+0x430>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d01d      	beq.n	8004a96 <HAL_DMA_Init+0x38a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a38      	ldr	r2, [pc, #224]	; (8004b40 <HAL_DMA_Init+0x434>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d018      	beq.n	8004a96 <HAL_DMA_Init+0x38a>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a36      	ldr	r2, [pc, #216]	; (8004b44 <HAL_DMA_Init+0x438>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d013      	beq.n	8004a96 <HAL_DMA_Init+0x38a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a35      	ldr	r2, [pc, #212]	; (8004b48 <HAL_DMA_Init+0x43c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d00e      	beq.n	8004a96 <HAL_DMA_Init+0x38a>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a33      	ldr	r2, [pc, #204]	; (8004b4c <HAL_DMA_Init+0x440>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d009      	beq.n	8004a96 <HAL_DMA_Init+0x38a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a32      	ldr	r2, [pc, #200]	; (8004b50 <HAL_DMA_Init+0x444>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d004      	beq.n	8004a96 <HAL_DMA_Init+0x38a>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a30      	ldr	r2, [pc, #192]	; (8004b54 <HAL_DMA_Init+0x448>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d101      	bne.n	8004a9a <HAL_DMA_Init+0x38e>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <HAL_DMA_Init+0x390>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 8097 	beq.w	8004bd0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a24      	ldr	r2, [pc, #144]	; (8004b38 <HAL_DMA_Init+0x42c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d021      	beq.n	8004af0 <HAL_DMA_Init+0x3e4>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a22      	ldr	r2, [pc, #136]	; (8004b3c <HAL_DMA_Init+0x430>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d01c      	beq.n	8004af0 <HAL_DMA_Init+0x3e4>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a21      	ldr	r2, [pc, #132]	; (8004b40 <HAL_DMA_Init+0x434>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d017      	beq.n	8004af0 <HAL_DMA_Init+0x3e4>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a1f      	ldr	r2, [pc, #124]	; (8004b44 <HAL_DMA_Init+0x438>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d012      	beq.n	8004af0 <HAL_DMA_Init+0x3e4>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a1e      	ldr	r2, [pc, #120]	; (8004b48 <HAL_DMA_Init+0x43c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00d      	beq.n	8004af0 <HAL_DMA_Init+0x3e4>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a1c      	ldr	r2, [pc, #112]	; (8004b4c <HAL_DMA_Init+0x440>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d008      	beq.n	8004af0 <HAL_DMA_Init+0x3e4>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a1b      	ldr	r2, [pc, #108]	; (8004b50 <HAL_DMA_Init+0x444>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d003      	beq.n	8004af0 <HAL_DMA_Init+0x3e4>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a19      	ldr	r2, [pc, #100]	; (8004b54 <HAL_DMA_Init+0x448>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2202      	movs	r2, #2
 8004af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4b12      	ldr	r3, [pc, #72]	; (8004b58 <HAL_DMA_Init+0x44c>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	2b40      	cmp	r3, #64	; 0x40
 8004b18:	d020      	beq.n	8004b5c <HAL_DMA_Init+0x450>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	2b80      	cmp	r3, #128	; 0x80
 8004b20:	d102      	bne.n	8004b28 <HAL_DMA_Init+0x41c>
 8004b22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b26:	e01a      	b.n	8004b5e <HAL_DMA_Init+0x452>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	e018      	b.n	8004b5e <HAL_DMA_Init+0x452>
 8004b2c:	fe10803f 	.word	0xfe10803f
 8004b30:	5c001000 	.word	0x5c001000
 8004b34:	ffff0000 	.word	0xffff0000
 8004b38:	58025408 	.word	0x58025408
 8004b3c:	5802541c 	.word	0x5802541c
 8004b40:	58025430 	.word	0x58025430
 8004b44:	58025444 	.word	0x58025444
 8004b48:	58025458 	.word	0x58025458
 8004b4c:	5802546c 	.word	0x5802546c
 8004b50:	58025480 	.word	0x58025480
 8004b54:	58025494 	.word	0x58025494
 8004b58:	fffe000f 	.word	0xfffe000f
 8004b5c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	68d2      	ldr	r2, [r2, #12]
 8004b62:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004b6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004b84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004b8c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	4b6e      	ldr	r3, [pc, #440]	; (8004d5c <HAL_DMA_Init+0x650>)
 8004ba4:	4413      	add	r3, r2
 8004ba6:	4a6e      	ldr	r2, [pc, #440]	; (8004d60 <HAL_DMA_Init+0x654>)
 8004ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bac:	091b      	lsrs	r3, r3, #4
 8004bae:	009a      	lsls	r2, r3, #2
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f001 ff63 	bl	8006a80 <DMA_CalcBaseAndBitshift>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc2:	f003 031f 	and.w	r3, r3, #31
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	409a      	lsls	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	605a      	str	r2, [r3, #4]
 8004bce:	e008      	b.n	8004be2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2240      	movs	r2, #64	; 0x40
 8004bd4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2203      	movs	r2, #3
 8004bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e0b7      	b.n	8004d52 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a5f      	ldr	r2, [pc, #380]	; (8004d64 <HAL_DMA_Init+0x658>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d072      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a5d      	ldr	r2, [pc, #372]	; (8004d68 <HAL_DMA_Init+0x65c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d06d      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a5c      	ldr	r2, [pc, #368]	; (8004d6c <HAL_DMA_Init+0x660>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d068      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a5a      	ldr	r2, [pc, #360]	; (8004d70 <HAL_DMA_Init+0x664>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d063      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a59      	ldr	r2, [pc, #356]	; (8004d74 <HAL_DMA_Init+0x668>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d05e      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a57      	ldr	r2, [pc, #348]	; (8004d78 <HAL_DMA_Init+0x66c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d059      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a56      	ldr	r2, [pc, #344]	; (8004d7c <HAL_DMA_Init+0x670>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d054      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a54      	ldr	r2, [pc, #336]	; (8004d80 <HAL_DMA_Init+0x674>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d04f      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a53      	ldr	r2, [pc, #332]	; (8004d84 <HAL_DMA_Init+0x678>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d04a      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a51      	ldr	r2, [pc, #324]	; (8004d88 <HAL_DMA_Init+0x67c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d045      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a50      	ldr	r2, [pc, #320]	; (8004d8c <HAL_DMA_Init+0x680>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d040      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a4e      	ldr	r2, [pc, #312]	; (8004d90 <HAL_DMA_Init+0x684>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d03b      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a4d      	ldr	r2, [pc, #308]	; (8004d94 <HAL_DMA_Init+0x688>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d036      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a4b      	ldr	r2, [pc, #300]	; (8004d98 <HAL_DMA_Init+0x68c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d031      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a4a      	ldr	r2, [pc, #296]	; (8004d9c <HAL_DMA_Init+0x690>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d02c      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a48      	ldr	r2, [pc, #288]	; (8004da0 <HAL_DMA_Init+0x694>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d027      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a47      	ldr	r2, [pc, #284]	; (8004da4 <HAL_DMA_Init+0x698>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d022      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a45      	ldr	r2, [pc, #276]	; (8004da8 <HAL_DMA_Init+0x69c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d01d      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a44      	ldr	r2, [pc, #272]	; (8004dac <HAL_DMA_Init+0x6a0>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d018      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a42      	ldr	r2, [pc, #264]	; (8004db0 <HAL_DMA_Init+0x6a4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d013      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a41      	ldr	r2, [pc, #260]	; (8004db4 <HAL_DMA_Init+0x6a8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d00e      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a3f      	ldr	r2, [pc, #252]	; (8004db8 <HAL_DMA_Init+0x6ac>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d009      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a3e      	ldr	r2, [pc, #248]	; (8004dbc <HAL_DMA_Init+0x6b0>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d004      	beq.n	8004cd2 <HAL_DMA_Init+0x5c6>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a3c      	ldr	r2, [pc, #240]	; (8004dc0 <HAL_DMA_Init+0x6b4>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d101      	bne.n	8004cd6 <HAL_DMA_Init+0x5ca>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <HAL_DMA_Init+0x5cc>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d032      	beq.n	8004d42 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f001 fffd 	bl	8006cdc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2b80      	cmp	r3, #128	; 0x80
 8004ce8:	d102      	bne.n	8004cf0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004d04:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d010      	beq.n	8004d30 <HAL_DMA_Init+0x624>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d80c      	bhi.n	8004d30 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f002 f87a 	bl	8006e10 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d2c:	605a      	str	r2, [r3, #4]
 8004d2e:	e008      	b.n	8004d42 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3718      	adds	r7, #24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	a7fdabf8 	.word	0xa7fdabf8
 8004d60:	cccccccd 	.word	0xcccccccd
 8004d64:	40020010 	.word	0x40020010
 8004d68:	40020028 	.word	0x40020028
 8004d6c:	40020040 	.word	0x40020040
 8004d70:	40020058 	.word	0x40020058
 8004d74:	40020070 	.word	0x40020070
 8004d78:	40020088 	.word	0x40020088
 8004d7c:	400200a0 	.word	0x400200a0
 8004d80:	400200b8 	.word	0x400200b8
 8004d84:	40020410 	.word	0x40020410
 8004d88:	40020428 	.word	0x40020428
 8004d8c:	40020440 	.word	0x40020440
 8004d90:	40020458 	.word	0x40020458
 8004d94:	40020470 	.word	0x40020470
 8004d98:	40020488 	.word	0x40020488
 8004d9c:	400204a0 	.word	0x400204a0
 8004da0:	400204b8 	.word	0x400204b8
 8004da4:	58025408 	.word	0x58025408
 8004da8:	5802541c 	.word	0x5802541c
 8004dac:	58025430 	.word	0x58025430
 8004db0:	58025444 	.word	0x58025444
 8004db4:	58025458 	.word	0x58025458
 8004db8:	5802546c 	.word	0x5802546c
 8004dbc:	58025480 	.word	0x58025480
 8004dc0:	58025494 	.word	0x58025494

08004dc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
 8004dd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e226      	b.n	800522e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_DMA_Start_IT+0x2a>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e21f      	b.n	800522e <HAL_DMA_Start_IT+0x46a>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	f040 820a 	bne.w	8005218 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a68      	ldr	r2, [pc, #416]	; (8004fb8 <HAL_DMA_Start_IT+0x1f4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d04a      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a66      	ldr	r2, [pc, #408]	; (8004fbc <HAL_DMA_Start_IT+0x1f8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d045      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a65      	ldr	r2, [pc, #404]	; (8004fc0 <HAL_DMA_Start_IT+0x1fc>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d040      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a63      	ldr	r2, [pc, #396]	; (8004fc4 <HAL_DMA_Start_IT+0x200>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d03b      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a62      	ldr	r2, [pc, #392]	; (8004fc8 <HAL_DMA_Start_IT+0x204>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d036      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a60      	ldr	r2, [pc, #384]	; (8004fcc <HAL_DMA_Start_IT+0x208>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d031      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a5f      	ldr	r2, [pc, #380]	; (8004fd0 <HAL_DMA_Start_IT+0x20c>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d02c      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a5d      	ldr	r2, [pc, #372]	; (8004fd4 <HAL_DMA_Start_IT+0x210>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d027      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a5c      	ldr	r2, [pc, #368]	; (8004fd8 <HAL_DMA_Start_IT+0x214>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d022      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a5a      	ldr	r2, [pc, #360]	; (8004fdc <HAL_DMA_Start_IT+0x218>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d01d      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a59      	ldr	r2, [pc, #356]	; (8004fe0 <HAL_DMA_Start_IT+0x21c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d018      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a57      	ldr	r2, [pc, #348]	; (8004fe4 <HAL_DMA_Start_IT+0x220>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d013      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a56      	ldr	r2, [pc, #344]	; (8004fe8 <HAL_DMA_Start_IT+0x224>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d00e      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a54      	ldr	r2, [pc, #336]	; (8004fec <HAL_DMA_Start_IT+0x228>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d009      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a53      	ldr	r2, [pc, #332]	; (8004ff0 <HAL_DMA_Start_IT+0x22c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d004      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xee>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a51      	ldr	r2, [pc, #324]	; (8004ff4 <HAL_DMA_Start_IT+0x230>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d108      	bne.n	8004ec4 <HAL_DMA_Start_IT+0x100>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0201 	bic.w	r2, r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	e007      	b.n	8004ed4 <HAL_DMA_Start_IT+0x110>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0201 	bic.w	r2, r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	68b9      	ldr	r1, [r7, #8]
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f001 fc24 	bl	8006728 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a34      	ldr	r2, [pc, #208]	; (8004fb8 <HAL_DMA_Start_IT+0x1f4>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d04a      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a33      	ldr	r2, [pc, #204]	; (8004fbc <HAL_DMA_Start_IT+0x1f8>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d045      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a31      	ldr	r2, [pc, #196]	; (8004fc0 <HAL_DMA_Start_IT+0x1fc>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d040      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a30      	ldr	r2, [pc, #192]	; (8004fc4 <HAL_DMA_Start_IT+0x200>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d03b      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a2e      	ldr	r2, [pc, #184]	; (8004fc8 <HAL_DMA_Start_IT+0x204>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d036      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a2d      	ldr	r2, [pc, #180]	; (8004fcc <HAL_DMA_Start_IT+0x208>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d031      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a2b      	ldr	r2, [pc, #172]	; (8004fd0 <HAL_DMA_Start_IT+0x20c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d02c      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a2a      	ldr	r2, [pc, #168]	; (8004fd4 <HAL_DMA_Start_IT+0x210>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d027      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a28      	ldr	r2, [pc, #160]	; (8004fd8 <HAL_DMA_Start_IT+0x214>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d022      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a27      	ldr	r2, [pc, #156]	; (8004fdc <HAL_DMA_Start_IT+0x218>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d01d      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a25      	ldr	r2, [pc, #148]	; (8004fe0 <HAL_DMA_Start_IT+0x21c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d018      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a24      	ldr	r2, [pc, #144]	; (8004fe4 <HAL_DMA_Start_IT+0x220>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d013      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a22      	ldr	r2, [pc, #136]	; (8004fe8 <HAL_DMA_Start_IT+0x224>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00e      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a21      	ldr	r2, [pc, #132]	; (8004fec <HAL_DMA_Start_IT+0x228>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d009      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a1f      	ldr	r2, [pc, #124]	; (8004ff0 <HAL_DMA_Start_IT+0x22c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d004      	beq.n	8004f80 <HAL_DMA_Start_IT+0x1bc>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a1e      	ldr	r2, [pc, #120]	; (8004ff4 <HAL_DMA_Start_IT+0x230>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d101      	bne.n	8004f84 <HAL_DMA_Start_IT+0x1c0>
 8004f80:	2301      	movs	r3, #1
 8004f82:	e000      	b.n	8004f86 <HAL_DMA_Start_IT+0x1c2>
 8004f84:	2300      	movs	r3, #0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d036      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f023 021e 	bic.w	r2, r3, #30
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0216 	orr.w	r2, r2, #22
 8004f9c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d03e      	beq.n	8005024 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0208 	orr.w	r2, r2, #8
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	e035      	b.n	8005024 <HAL_DMA_Start_IT+0x260>
 8004fb8:	40020010 	.word	0x40020010
 8004fbc:	40020028 	.word	0x40020028
 8004fc0:	40020040 	.word	0x40020040
 8004fc4:	40020058 	.word	0x40020058
 8004fc8:	40020070 	.word	0x40020070
 8004fcc:	40020088 	.word	0x40020088
 8004fd0:	400200a0 	.word	0x400200a0
 8004fd4:	400200b8 	.word	0x400200b8
 8004fd8:	40020410 	.word	0x40020410
 8004fdc:	40020428 	.word	0x40020428
 8004fe0:	40020440 	.word	0x40020440
 8004fe4:	40020458 	.word	0x40020458
 8004fe8:	40020470 	.word	0x40020470
 8004fec:	40020488 	.word	0x40020488
 8004ff0:	400204a0 	.word	0x400204a0
 8004ff4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f023 020e 	bic.w	r2, r3, #14
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 020a 	orr.w	r2, r2, #10
 800500a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	2b00      	cmp	r3, #0
 8005012:	d007      	beq.n	8005024 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0204 	orr.w	r2, r2, #4
 8005022:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a83      	ldr	r2, [pc, #524]	; (8005238 <HAL_DMA_Start_IT+0x474>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d072      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a82      	ldr	r2, [pc, #520]	; (800523c <HAL_DMA_Start_IT+0x478>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d06d      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a80      	ldr	r2, [pc, #512]	; (8005240 <HAL_DMA_Start_IT+0x47c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d068      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a7f      	ldr	r2, [pc, #508]	; (8005244 <HAL_DMA_Start_IT+0x480>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d063      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a7d      	ldr	r2, [pc, #500]	; (8005248 <HAL_DMA_Start_IT+0x484>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d05e      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a7c      	ldr	r2, [pc, #496]	; (800524c <HAL_DMA_Start_IT+0x488>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d059      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a7a      	ldr	r2, [pc, #488]	; (8005250 <HAL_DMA_Start_IT+0x48c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d054      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a79      	ldr	r2, [pc, #484]	; (8005254 <HAL_DMA_Start_IT+0x490>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d04f      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a77      	ldr	r2, [pc, #476]	; (8005258 <HAL_DMA_Start_IT+0x494>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d04a      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a76      	ldr	r2, [pc, #472]	; (800525c <HAL_DMA_Start_IT+0x498>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d045      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a74      	ldr	r2, [pc, #464]	; (8005260 <HAL_DMA_Start_IT+0x49c>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d040      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a73      	ldr	r2, [pc, #460]	; (8005264 <HAL_DMA_Start_IT+0x4a0>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d03b      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a71      	ldr	r2, [pc, #452]	; (8005268 <HAL_DMA_Start_IT+0x4a4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d036      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a70      	ldr	r2, [pc, #448]	; (800526c <HAL_DMA_Start_IT+0x4a8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d031      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a6e      	ldr	r2, [pc, #440]	; (8005270 <HAL_DMA_Start_IT+0x4ac>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d02c      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a6d      	ldr	r2, [pc, #436]	; (8005274 <HAL_DMA_Start_IT+0x4b0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d027      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a6b      	ldr	r2, [pc, #428]	; (8005278 <HAL_DMA_Start_IT+0x4b4>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d022      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a6a      	ldr	r2, [pc, #424]	; (800527c <HAL_DMA_Start_IT+0x4b8>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d01d      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a68      	ldr	r2, [pc, #416]	; (8005280 <HAL_DMA_Start_IT+0x4bc>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d018      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a67      	ldr	r2, [pc, #412]	; (8005284 <HAL_DMA_Start_IT+0x4c0>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d013      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a65      	ldr	r2, [pc, #404]	; (8005288 <HAL_DMA_Start_IT+0x4c4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00e      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a64      	ldr	r2, [pc, #400]	; (800528c <HAL_DMA_Start_IT+0x4c8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d009      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a62      	ldr	r2, [pc, #392]	; (8005290 <HAL_DMA_Start_IT+0x4cc>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d004      	beq.n	8005114 <HAL_DMA_Start_IT+0x350>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a61      	ldr	r2, [pc, #388]	; (8005294 <HAL_DMA_Start_IT+0x4d0>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d101      	bne.n	8005118 <HAL_DMA_Start_IT+0x354>
 8005114:	2301      	movs	r3, #1
 8005116:	e000      	b.n	800511a <HAL_DMA_Start_IT+0x356>
 8005118:	2300      	movs	r3, #0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d01a      	beq.n	8005154 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d007      	beq.n	800513c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005136:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800513a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005140:	2b00      	cmp	r3, #0
 8005142:	d007      	beq.n	8005154 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800514e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005152:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a37      	ldr	r2, [pc, #220]	; (8005238 <HAL_DMA_Start_IT+0x474>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d04a      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a36      	ldr	r2, [pc, #216]	; (800523c <HAL_DMA_Start_IT+0x478>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d045      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a34      	ldr	r2, [pc, #208]	; (8005240 <HAL_DMA_Start_IT+0x47c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d040      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a33      	ldr	r2, [pc, #204]	; (8005244 <HAL_DMA_Start_IT+0x480>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d03b      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a31      	ldr	r2, [pc, #196]	; (8005248 <HAL_DMA_Start_IT+0x484>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d036      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a30      	ldr	r2, [pc, #192]	; (800524c <HAL_DMA_Start_IT+0x488>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d031      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a2e      	ldr	r2, [pc, #184]	; (8005250 <HAL_DMA_Start_IT+0x48c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d02c      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a2d      	ldr	r2, [pc, #180]	; (8005254 <HAL_DMA_Start_IT+0x490>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d027      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a2b      	ldr	r2, [pc, #172]	; (8005258 <HAL_DMA_Start_IT+0x494>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d022      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a2a      	ldr	r2, [pc, #168]	; (800525c <HAL_DMA_Start_IT+0x498>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d01d      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a28      	ldr	r2, [pc, #160]	; (8005260 <HAL_DMA_Start_IT+0x49c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d018      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a27      	ldr	r2, [pc, #156]	; (8005264 <HAL_DMA_Start_IT+0x4a0>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d013      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a25      	ldr	r2, [pc, #148]	; (8005268 <HAL_DMA_Start_IT+0x4a4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d00e      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a24      	ldr	r2, [pc, #144]	; (800526c <HAL_DMA_Start_IT+0x4a8>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d009      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a22      	ldr	r2, [pc, #136]	; (8005270 <HAL_DMA_Start_IT+0x4ac>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d004      	beq.n	80051f4 <HAL_DMA_Start_IT+0x430>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a21      	ldr	r2, [pc, #132]	; (8005274 <HAL_DMA_Start_IT+0x4b0>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d108      	bne.n	8005206 <HAL_DMA_Start_IT+0x442>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0201 	orr.w	r2, r2, #1
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	e012      	b.n	800522c <HAL_DMA_Start_IT+0x468>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f042 0201 	orr.w	r2, r2, #1
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	e009      	b.n	800522c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800521e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800522c:	7dfb      	ldrb	r3, [r7, #23]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40020010 	.word	0x40020010
 800523c:	40020028 	.word	0x40020028
 8005240:	40020040 	.word	0x40020040
 8005244:	40020058 	.word	0x40020058
 8005248:	40020070 	.word	0x40020070
 800524c:	40020088 	.word	0x40020088
 8005250:	400200a0 	.word	0x400200a0
 8005254:	400200b8 	.word	0x400200b8
 8005258:	40020410 	.word	0x40020410
 800525c:	40020428 	.word	0x40020428
 8005260:	40020440 	.word	0x40020440
 8005264:	40020458 	.word	0x40020458
 8005268:	40020470 	.word	0x40020470
 800526c:	40020488 	.word	0x40020488
 8005270:	400204a0 	.word	0x400204a0
 8005274:	400204b8 	.word	0x400204b8
 8005278:	58025408 	.word	0x58025408
 800527c:	5802541c 	.word	0x5802541c
 8005280:	58025430 	.word	0x58025430
 8005284:	58025444 	.word	0x58025444
 8005288:	58025458 	.word	0x58025458
 800528c:	5802546c 	.word	0x5802546c
 8005290:	58025480 	.word	0x58025480
 8005294:	58025494 	.word	0x58025494

08005298 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80052a0:	f7fd f9fa 	bl	8002698 <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e2dc      	b.n	800586a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d008      	beq.n	80052ce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2280      	movs	r2, #128	; 0x80
 80052c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e2cd      	b.n	800586a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a76      	ldr	r2, [pc, #472]	; (80054ac <HAL_DMA_Abort+0x214>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d04a      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a74      	ldr	r2, [pc, #464]	; (80054b0 <HAL_DMA_Abort+0x218>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d045      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a73      	ldr	r2, [pc, #460]	; (80054b4 <HAL_DMA_Abort+0x21c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d040      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a71      	ldr	r2, [pc, #452]	; (80054b8 <HAL_DMA_Abort+0x220>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d03b      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a70      	ldr	r2, [pc, #448]	; (80054bc <HAL_DMA_Abort+0x224>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d036      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a6e      	ldr	r2, [pc, #440]	; (80054c0 <HAL_DMA_Abort+0x228>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d031      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a6d      	ldr	r2, [pc, #436]	; (80054c4 <HAL_DMA_Abort+0x22c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d02c      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a6b      	ldr	r2, [pc, #428]	; (80054c8 <HAL_DMA_Abort+0x230>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d027      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a6a      	ldr	r2, [pc, #424]	; (80054cc <HAL_DMA_Abort+0x234>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d022      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a68      	ldr	r2, [pc, #416]	; (80054d0 <HAL_DMA_Abort+0x238>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d01d      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a67      	ldr	r2, [pc, #412]	; (80054d4 <HAL_DMA_Abort+0x23c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d018      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a65      	ldr	r2, [pc, #404]	; (80054d8 <HAL_DMA_Abort+0x240>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d013      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a64      	ldr	r2, [pc, #400]	; (80054dc <HAL_DMA_Abort+0x244>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00e      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a62      	ldr	r2, [pc, #392]	; (80054e0 <HAL_DMA_Abort+0x248>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d009      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a61      	ldr	r2, [pc, #388]	; (80054e4 <HAL_DMA_Abort+0x24c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d004      	beq.n	800536e <HAL_DMA_Abort+0xd6>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a5f      	ldr	r2, [pc, #380]	; (80054e8 <HAL_DMA_Abort+0x250>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d101      	bne.n	8005372 <HAL_DMA_Abort+0xda>
 800536e:	2301      	movs	r3, #1
 8005370:	e000      	b.n	8005374 <HAL_DMA_Abort+0xdc>
 8005372:	2300      	movs	r3, #0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d013      	beq.n	80053a0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f022 021e 	bic.w	r2, r2, #30
 8005386:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695a      	ldr	r2, [r3, #20]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005396:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	e00a      	b.n	80053b6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 020e 	bic.w	r2, r2, #14
 80053ae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a3c      	ldr	r2, [pc, #240]	; (80054ac <HAL_DMA_Abort+0x214>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d072      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a3a      	ldr	r2, [pc, #232]	; (80054b0 <HAL_DMA_Abort+0x218>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d06d      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a39      	ldr	r2, [pc, #228]	; (80054b4 <HAL_DMA_Abort+0x21c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d068      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a37      	ldr	r2, [pc, #220]	; (80054b8 <HAL_DMA_Abort+0x220>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d063      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a36      	ldr	r2, [pc, #216]	; (80054bc <HAL_DMA_Abort+0x224>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d05e      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a34      	ldr	r2, [pc, #208]	; (80054c0 <HAL_DMA_Abort+0x228>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d059      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a33      	ldr	r2, [pc, #204]	; (80054c4 <HAL_DMA_Abort+0x22c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d054      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a31      	ldr	r2, [pc, #196]	; (80054c8 <HAL_DMA_Abort+0x230>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d04f      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a30      	ldr	r2, [pc, #192]	; (80054cc <HAL_DMA_Abort+0x234>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d04a      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a2e      	ldr	r2, [pc, #184]	; (80054d0 <HAL_DMA_Abort+0x238>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d045      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a2d      	ldr	r2, [pc, #180]	; (80054d4 <HAL_DMA_Abort+0x23c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d040      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a2b      	ldr	r2, [pc, #172]	; (80054d8 <HAL_DMA_Abort+0x240>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d03b      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a2a      	ldr	r2, [pc, #168]	; (80054dc <HAL_DMA_Abort+0x244>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d036      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a28      	ldr	r2, [pc, #160]	; (80054e0 <HAL_DMA_Abort+0x248>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d031      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a27      	ldr	r2, [pc, #156]	; (80054e4 <HAL_DMA_Abort+0x24c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d02c      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a25      	ldr	r2, [pc, #148]	; (80054e8 <HAL_DMA_Abort+0x250>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d027      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a24      	ldr	r2, [pc, #144]	; (80054ec <HAL_DMA_Abort+0x254>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d022      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a22      	ldr	r2, [pc, #136]	; (80054f0 <HAL_DMA_Abort+0x258>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d01d      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a21      	ldr	r2, [pc, #132]	; (80054f4 <HAL_DMA_Abort+0x25c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d018      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1f      	ldr	r2, [pc, #124]	; (80054f8 <HAL_DMA_Abort+0x260>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d013      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a1e      	ldr	r2, [pc, #120]	; (80054fc <HAL_DMA_Abort+0x264>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00e      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a1c      	ldr	r2, [pc, #112]	; (8005500 <HAL_DMA_Abort+0x268>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d009      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a1b      	ldr	r2, [pc, #108]	; (8005504 <HAL_DMA_Abort+0x26c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d004      	beq.n	80054a6 <HAL_DMA_Abort+0x20e>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a19      	ldr	r2, [pc, #100]	; (8005508 <HAL_DMA_Abort+0x270>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d132      	bne.n	800550c <HAL_DMA_Abort+0x274>
 80054a6:	2301      	movs	r3, #1
 80054a8:	e031      	b.n	800550e <HAL_DMA_Abort+0x276>
 80054aa:	bf00      	nop
 80054ac:	40020010 	.word	0x40020010
 80054b0:	40020028 	.word	0x40020028
 80054b4:	40020040 	.word	0x40020040
 80054b8:	40020058 	.word	0x40020058
 80054bc:	40020070 	.word	0x40020070
 80054c0:	40020088 	.word	0x40020088
 80054c4:	400200a0 	.word	0x400200a0
 80054c8:	400200b8 	.word	0x400200b8
 80054cc:	40020410 	.word	0x40020410
 80054d0:	40020428 	.word	0x40020428
 80054d4:	40020440 	.word	0x40020440
 80054d8:	40020458 	.word	0x40020458
 80054dc:	40020470 	.word	0x40020470
 80054e0:	40020488 	.word	0x40020488
 80054e4:	400204a0 	.word	0x400204a0
 80054e8:	400204b8 	.word	0x400204b8
 80054ec:	58025408 	.word	0x58025408
 80054f0:	5802541c 	.word	0x5802541c
 80054f4:	58025430 	.word	0x58025430
 80054f8:	58025444 	.word	0x58025444
 80054fc:	58025458 	.word	0x58025458
 8005500:	5802546c 	.word	0x5802546c
 8005504:	58025480 	.word	0x58025480
 8005508:	58025494 	.word	0x58025494
 800550c:	2300      	movs	r3, #0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d007      	beq.n	8005522 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800551c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005520:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a6d      	ldr	r2, [pc, #436]	; (80056dc <HAL_DMA_Abort+0x444>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d04a      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a6b      	ldr	r2, [pc, #428]	; (80056e0 <HAL_DMA_Abort+0x448>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d045      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a6a      	ldr	r2, [pc, #424]	; (80056e4 <HAL_DMA_Abort+0x44c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d040      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a68      	ldr	r2, [pc, #416]	; (80056e8 <HAL_DMA_Abort+0x450>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d03b      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a67      	ldr	r2, [pc, #412]	; (80056ec <HAL_DMA_Abort+0x454>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d036      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a65      	ldr	r2, [pc, #404]	; (80056f0 <HAL_DMA_Abort+0x458>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d031      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a64      	ldr	r2, [pc, #400]	; (80056f4 <HAL_DMA_Abort+0x45c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d02c      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a62      	ldr	r2, [pc, #392]	; (80056f8 <HAL_DMA_Abort+0x460>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d027      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a61      	ldr	r2, [pc, #388]	; (80056fc <HAL_DMA_Abort+0x464>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d022      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a5f      	ldr	r2, [pc, #380]	; (8005700 <HAL_DMA_Abort+0x468>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d01d      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a5e      	ldr	r2, [pc, #376]	; (8005704 <HAL_DMA_Abort+0x46c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d018      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a5c      	ldr	r2, [pc, #368]	; (8005708 <HAL_DMA_Abort+0x470>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d013      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a5b      	ldr	r2, [pc, #364]	; (800570c <HAL_DMA_Abort+0x474>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d00e      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a59      	ldr	r2, [pc, #356]	; (8005710 <HAL_DMA_Abort+0x478>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d009      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a58      	ldr	r2, [pc, #352]	; (8005714 <HAL_DMA_Abort+0x47c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d004      	beq.n	80055c2 <HAL_DMA_Abort+0x32a>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a56      	ldr	r2, [pc, #344]	; (8005718 <HAL_DMA_Abort+0x480>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d108      	bne.n	80055d4 <HAL_DMA_Abort+0x33c>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0201 	bic.w	r2, r2, #1
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	e007      	b.n	80055e4 <HAL_DMA_Abort+0x34c>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0201 	bic.w	r2, r2, #1
 80055e2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80055e4:	e013      	b.n	800560e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055e6:	f7fd f857 	bl	8002698 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b05      	cmp	r3, #5
 80055f2:	d90c      	bls.n	800560e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2220      	movs	r2, #32
 80055f8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2203      	movs	r2, #3
 80055fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e12d      	b.n	800586a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1e5      	bne.n	80055e6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a2f      	ldr	r2, [pc, #188]	; (80056dc <HAL_DMA_Abort+0x444>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d04a      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a2d      	ldr	r2, [pc, #180]	; (80056e0 <HAL_DMA_Abort+0x448>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d045      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a2c      	ldr	r2, [pc, #176]	; (80056e4 <HAL_DMA_Abort+0x44c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d040      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a2a      	ldr	r2, [pc, #168]	; (80056e8 <HAL_DMA_Abort+0x450>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d03b      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a29      	ldr	r2, [pc, #164]	; (80056ec <HAL_DMA_Abort+0x454>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d036      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a27      	ldr	r2, [pc, #156]	; (80056f0 <HAL_DMA_Abort+0x458>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d031      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a26      	ldr	r2, [pc, #152]	; (80056f4 <HAL_DMA_Abort+0x45c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d02c      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a24      	ldr	r2, [pc, #144]	; (80056f8 <HAL_DMA_Abort+0x460>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d027      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a23      	ldr	r2, [pc, #140]	; (80056fc <HAL_DMA_Abort+0x464>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d022      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a21      	ldr	r2, [pc, #132]	; (8005700 <HAL_DMA_Abort+0x468>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d01d      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a20      	ldr	r2, [pc, #128]	; (8005704 <HAL_DMA_Abort+0x46c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d018      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a1e      	ldr	r2, [pc, #120]	; (8005708 <HAL_DMA_Abort+0x470>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d013      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1d      	ldr	r2, [pc, #116]	; (800570c <HAL_DMA_Abort+0x474>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00e      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1b      	ldr	r2, [pc, #108]	; (8005710 <HAL_DMA_Abort+0x478>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d009      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a1a      	ldr	r2, [pc, #104]	; (8005714 <HAL_DMA_Abort+0x47c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d004      	beq.n	80056ba <HAL_DMA_Abort+0x422>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a18      	ldr	r2, [pc, #96]	; (8005718 <HAL_DMA_Abort+0x480>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d101      	bne.n	80056be <HAL_DMA_Abort+0x426>
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <HAL_DMA_Abort+0x428>
 80056be:	2300      	movs	r3, #0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d02b      	beq.n	800571c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ce:	f003 031f 	and.w	r3, r3, #31
 80056d2:	223f      	movs	r2, #63	; 0x3f
 80056d4:	409a      	lsls	r2, r3
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	609a      	str	r2, [r3, #8]
 80056da:	e02a      	b.n	8005732 <HAL_DMA_Abort+0x49a>
 80056dc:	40020010 	.word	0x40020010
 80056e0:	40020028 	.word	0x40020028
 80056e4:	40020040 	.word	0x40020040
 80056e8:	40020058 	.word	0x40020058
 80056ec:	40020070 	.word	0x40020070
 80056f0:	40020088 	.word	0x40020088
 80056f4:	400200a0 	.word	0x400200a0
 80056f8:	400200b8 	.word	0x400200b8
 80056fc:	40020410 	.word	0x40020410
 8005700:	40020428 	.word	0x40020428
 8005704:	40020440 	.word	0x40020440
 8005708:	40020458 	.word	0x40020458
 800570c:	40020470 	.word	0x40020470
 8005710:	40020488 	.word	0x40020488
 8005714:	400204a0 	.word	0x400204a0
 8005718:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005720:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005726:	f003 031f 	and.w	r3, r3, #31
 800572a:	2201      	movs	r2, #1
 800572c:	409a      	lsls	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a4f      	ldr	r2, [pc, #316]	; (8005874 <HAL_DMA_Abort+0x5dc>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d072      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a4d      	ldr	r2, [pc, #308]	; (8005878 <HAL_DMA_Abort+0x5e0>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d06d      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a4c      	ldr	r2, [pc, #304]	; (800587c <HAL_DMA_Abort+0x5e4>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d068      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a4a      	ldr	r2, [pc, #296]	; (8005880 <HAL_DMA_Abort+0x5e8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d063      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a49      	ldr	r2, [pc, #292]	; (8005884 <HAL_DMA_Abort+0x5ec>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d05e      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a47      	ldr	r2, [pc, #284]	; (8005888 <HAL_DMA_Abort+0x5f0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d059      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a46      	ldr	r2, [pc, #280]	; (800588c <HAL_DMA_Abort+0x5f4>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d054      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a44      	ldr	r2, [pc, #272]	; (8005890 <HAL_DMA_Abort+0x5f8>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d04f      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a43      	ldr	r2, [pc, #268]	; (8005894 <HAL_DMA_Abort+0x5fc>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d04a      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a41      	ldr	r2, [pc, #260]	; (8005898 <HAL_DMA_Abort+0x600>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d045      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a40      	ldr	r2, [pc, #256]	; (800589c <HAL_DMA_Abort+0x604>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d040      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a3e      	ldr	r2, [pc, #248]	; (80058a0 <HAL_DMA_Abort+0x608>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d03b      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a3d      	ldr	r2, [pc, #244]	; (80058a4 <HAL_DMA_Abort+0x60c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d036      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a3b      	ldr	r2, [pc, #236]	; (80058a8 <HAL_DMA_Abort+0x610>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d031      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a3a      	ldr	r2, [pc, #232]	; (80058ac <HAL_DMA_Abort+0x614>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d02c      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a38      	ldr	r2, [pc, #224]	; (80058b0 <HAL_DMA_Abort+0x618>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d027      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a37      	ldr	r2, [pc, #220]	; (80058b4 <HAL_DMA_Abort+0x61c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d022      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a35      	ldr	r2, [pc, #212]	; (80058b8 <HAL_DMA_Abort+0x620>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d01d      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a34      	ldr	r2, [pc, #208]	; (80058bc <HAL_DMA_Abort+0x624>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d018      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a32      	ldr	r2, [pc, #200]	; (80058c0 <HAL_DMA_Abort+0x628>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d013      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a31      	ldr	r2, [pc, #196]	; (80058c4 <HAL_DMA_Abort+0x62c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d00e      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a2f      	ldr	r2, [pc, #188]	; (80058c8 <HAL_DMA_Abort+0x630>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d009      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a2e      	ldr	r2, [pc, #184]	; (80058cc <HAL_DMA_Abort+0x634>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d004      	beq.n	8005822 <HAL_DMA_Abort+0x58a>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a2c      	ldr	r2, [pc, #176]	; (80058d0 <HAL_DMA_Abort+0x638>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d101      	bne.n	8005826 <HAL_DMA_Abort+0x58e>
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <HAL_DMA_Abort+0x590>
 8005826:	2300      	movs	r3, #0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d015      	beq.n	8005858 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005834:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00c      	beq.n	8005858 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005848:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800584c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005856:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	40020010 	.word	0x40020010
 8005878:	40020028 	.word	0x40020028
 800587c:	40020040 	.word	0x40020040
 8005880:	40020058 	.word	0x40020058
 8005884:	40020070 	.word	0x40020070
 8005888:	40020088 	.word	0x40020088
 800588c:	400200a0 	.word	0x400200a0
 8005890:	400200b8 	.word	0x400200b8
 8005894:	40020410 	.word	0x40020410
 8005898:	40020428 	.word	0x40020428
 800589c:	40020440 	.word	0x40020440
 80058a0:	40020458 	.word	0x40020458
 80058a4:	40020470 	.word	0x40020470
 80058a8:	40020488 	.word	0x40020488
 80058ac:	400204a0 	.word	0x400204a0
 80058b0:	400204b8 	.word	0x400204b8
 80058b4:	58025408 	.word	0x58025408
 80058b8:	5802541c 	.word	0x5802541c
 80058bc:	58025430 	.word	0x58025430
 80058c0:	58025444 	.word	0x58025444
 80058c4:	58025458 	.word	0x58025458
 80058c8:	5802546c 	.word	0x5802546c
 80058cc:	58025480 	.word	0x58025480
 80058d0:	58025494 	.word	0x58025494

080058d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b08a      	sub	sp, #40	; 0x28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80058e0:	4b67      	ldr	r3, [pc, #412]	; (8005a80 <HAL_DMA_IRQHandler+0x1ac>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a67      	ldr	r2, [pc, #412]	; (8005a84 <HAL_DMA_IRQHandler+0x1b0>)
 80058e6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ea:	0a9b      	lsrs	r3, r3, #10
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a5f      	ldr	r2, [pc, #380]	; (8005a88 <HAL_DMA_IRQHandler+0x1b4>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d04a      	beq.n	80059a6 <HAL_DMA_IRQHandler+0xd2>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a5d      	ldr	r2, [pc, #372]	; (8005a8c <HAL_DMA_IRQHandler+0x1b8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d045      	beq.n	80059a6 <HAL_DMA_IRQHandler+0xd2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a5c      	ldr	r2, [pc, #368]	; (8005a90 <HAL_DMA_IRQHandler+0x1bc>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d040      	beq.n	80059a6 <HAL_DMA_IRQHandler+0xd2>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a5a      	ldr	r2, [pc, #360]	; (8005a94 <HAL_DMA_IRQHandler+0x1c0>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d03b      	beq.n	80059a6 <HAL_DMA_IRQHandler+0xd2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a59      	ldr	r2, [pc, #356]	; (8005a98 <HAL_DMA_IRQHandler+0x1c4>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d036      	beq.n	80059a6 <HAL_DMA_IRQHandler+0xd2>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a57      	ldr	r2, [pc, #348]	; (8005a9c <HAL_DMA_IRQHandler+0x1c8>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d031      	beq.n	80059a6 <HAL_DMA_IRQHandler+0xd2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a56      	ldr	r2, [pc, #344]	; (8005aa0 <HAL_DMA_IRQHandler+0x1cc>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d02c      	beq.n	80059a6 <HAL_DMA_IRQHandler+0xd2>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a54      	ldr	r2, [pc, #336]	; (8005aa4 <HAL_DMA_IRQHandler+0x1d0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d027      	beq.n	80059a6 <HAL_DMA_IRQHandler+0xd2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a53      	ldr	r2, [pc, #332]	; (8005aa8 <HAL_DMA_IRQHandler+0x1d4>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d022      	beq.n	80059a6 <HAL_DMA_IRQHandler+0xd2>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a51      	ldr	r2, [pc, #324]	; (8005aac <HAL_DMA_IRQHandler+0x1d8>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d01d      	beq.n	80059a6 <HAL_DMA_IRQHandler+0xd2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a50      	ldr	r2, [pc, #320]	; (8005ab0 <HAL_DMA_IRQHandler+0x1dc>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d018      	beq.n	80059a6 <HAL_DMA_IRQHandler+0xd2>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a4e      	ldr	r2, [pc, #312]	; (8005ab4 <HAL_DMA_IRQHandler+0x1e0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d013      	beq.n	80059a6 <HAL_DMA_IRQHandler+0xd2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a4d      	ldr	r2, [pc, #308]	; (8005ab8 <HAL_DMA_IRQHandler+0x1e4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d00e      	beq.n	80059a6 <HAL_DMA_IRQHandler+0xd2>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a4b      	ldr	r2, [pc, #300]	; (8005abc <HAL_DMA_IRQHandler+0x1e8>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d009      	beq.n	80059a6 <HAL_DMA_IRQHandler+0xd2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a4a      	ldr	r2, [pc, #296]	; (8005ac0 <HAL_DMA_IRQHandler+0x1ec>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d004      	beq.n	80059a6 <HAL_DMA_IRQHandler+0xd2>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a48      	ldr	r2, [pc, #288]	; (8005ac4 <HAL_DMA_IRQHandler+0x1f0>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d101      	bne.n	80059aa <HAL_DMA_IRQHandler+0xd6>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <HAL_DMA_IRQHandler+0xd8>
 80059aa:	2300      	movs	r3, #0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 842b 	beq.w	8006208 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b6:	f003 031f 	and.w	r3, r3, #31
 80059ba:	2208      	movs	r2, #8
 80059bc:	409a      	lsls	r2, r3
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	4013      	ands	r3, r2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 80a2 	beq.w	8005b0c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a2e      	ldr	r2, [pc, #184]	; (8005a88 <HAL_DMA_IRQHandler+0x1b4>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d04a      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x194>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a2d      	ldr	r2, [pc, #180]	; (8005a8c <HAL_DMA_IRQHandler+0x1b8>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d045      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x194>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a2b      	ldr	r2, [pc, #172]	; (8005a90 <HAL_DMA_IRQHandler+0x1bc>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d040      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x194>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a2a      	ldr	r2, [pc, #168]	; (8005a94 <HAL_DMA_IRQHandler+0x1c0>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d03b      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x194>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a28      	ldr	r2, [pc, #160]	; (8005a98 <HAL_DMA_IRQHandler+0x1c4>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d036      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x194>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a27      	ldr	r2, [pc, #156]	; (8005a9c <HAL_DMA_IRQHandler+0x1c8>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d031      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x194>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a25      	ldr	r2, [pc, #148]	; (8005aa0 <HAL_DMA_IRQHandler+0x1cc>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d02c      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x194>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a24      	ldr	r2, [pc, #144]	; (8005aa4 <HAL_DMA_IRQHandler+0x1d0>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d027      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x194>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a22      	ldr	r2, [pc, #136]	; (8005aa8 <HAL_DMA_IRQHandler+0x1d4>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d022      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x194>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a21      	ldr	r2, [pc, #132]	; (8005aac <HAL_DMA_IRQHandler+0x1d8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d01d      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x194>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a1f      	ldr	r2, [pc, #124]	; (8005ab0 <HAL_DMA_IRQHandler+0x1dc>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d018      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x194>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a1e      	ldr	r2, [pc, #120]	; (8005ab4 <HAL_DMA_IRQHandler+0x1e0>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d013      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x194>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1c      	ldr	r2, [pc, #112]	; (8005ab8 <HAL_DMA_IRQHandler+0x1e4>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d00e      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x194>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a1b      	ldr	r2, [pc, #108]	; (8005abc <HAL_DMA_IRQHandler+0x1e8>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d009      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x194>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a19      	ldr	r2, [pc, #100]	; (8005ac0 <HAL_DMA_IRQHandler+0x1ec>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d004      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x194>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a18      	ldr	r2, [pc, #96]	; (8005ac4 <HAL_DMA_IRQHandler+0x1f0>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d12f      	bne.n	8005ac8 <HAL_DMA_IRQHandler+0x1f4>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0304 	and.w	r3, r3, #4
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	bf14      	ite	ne
 8005a76:	2301      	movne	r3, #1
 8005a78:	2300      	moveq	r3, #0
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	e02e      	b.n	8005adc <HAL_DMA_IRQHandler+0x208>
 8005a7e:	bf00      	nop
 8005a80:	24000024 	.word	0x24000024
 8005a84:	1b4e81b5 	.word	0x1b4e81b5
 8005a88:	40020010 	.word	0x40020010
 8005a8c:	40020028 	.word	0x40020028
 8005a90:	40020040 	.word	0x40020040
 8005a94:	40020058 	.word	0x40020058
 8005a98:	40020070 	.word	0x40020070
 8005a9c:	40020088 	.word	0x40020088
 8005aa0:	400200a0 	.word	0x400200a0
 8005aa4:	400200b8 	.word	0x400200b8
 8005aa8:	40020410 	.word	0x40020410
 8005aac:	40020428 	.word	0x40020428
 8005ab0:	40020440 	.word	0x40020440
 8005ab4:	40020458 	.word	0x40020458
 8005ab8:	40020470 	.word	0x40020470
 8005abc:	40020488 	.word	0x40020488
 8005ac0:	400204a0 	.word	0x400204a0
 8005ac4:	400204b8 	.word	0x400204b8
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0308 	and.w	r3, r3, #8
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	bf14      	ite	ne
 8005ad6:	2301      	movne	r3, #1
 8005ad8:	2300      	moveq	r3, #0
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d015      	beq.n	8005b0c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0204 	bic.w	r2, r2, #4
 8005aee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af4:	f003 031f 	and.w	r3, r3, #31
 8005af8:	2208      	movs	r2, #8
 8005afa:	409a      	lsls	r2, r3
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b04:	f043 0201 	orr.w	r2, r3, #1
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b10:	f003 031f 	and.w	r3, r3, #31
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	fa22 f303 	lsr.w	r3, r2, r3
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d06e      	beq.n	8005c00 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a69      	ldr	r2, [pc, #420]	; (8005ccc <HAL_DMA_IRQHandler+0x3f8>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d04a      	beq.n	8005bc2 <HAL_DMA_IRQHandler+0x2ee>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a67      	ldr	r2, [pc, #412]	; (8005cd0 <HAL_DMA_IRQHandler+0x3fc>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d045      	beq.n	8005bc2 <HAL_DMA_IRQHandler+0x2ee>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a66      	ldr	r2, [pc, #408]	; (8005cd4 <HAL_DMA_IRQHandler+0x400>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d040      	beq.n	8005bc2 <HAL_DMA_IRQHandler+0x2ee>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a64      	ldr	r2, [pc, #400]	; (8005cd8 <HAL_DMA_IRQHandler+0x404>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d03b      	beq.n	8005bc2 <HAL_DMA_IRQHandler+0x2ee>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a63      	ldr	r2, [pc, #396]	; (8005cdc <HAL_DMA_IRQHandler+0x408>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d036      	beq.n	8005bc2 <HAL_DMA_IRQHandler+0x2ee>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a61      	ldr	r2, [pc, #388]	; (8005ce0 <HAL_DMA_IRQHandler+0x40c>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d031      	beq.n	8005bc2 <HAL_DMA_IRQHandler+0x2ee>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a60      	ldr	r2, [pc, #384]	; (8005ce4 <HAL_DMA_IRQHandler+0x410>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d02c      	beq.n	8005bc2 <HAL_DMA_IRQHandler+0x2ee>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a5e      	ldr	r2, [pc, #376]	; (8005ce8 <HAL_DMA_IRQHandler+0x414>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d027      	beq.n	8005bc2 <HAL_DMA_IRQHandler+0x2ee>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a5d      	ldr	r2, [pc, #372]	; (8005cec <HAL_DMA_IRQHandler+0x418>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d022      	beq.n	8005bc2 <HAL_DMA_IRQHandler+0x2ee>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a5b      	ldr	r2, [pc, #364]	; (8005cf0 <HAL_DMA_IRQHandler+0x41c>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d01d      	beq.n	8005bc2 <HAL_DMA_IRQHandler+0x2ee>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a5a      	ldr	r2, [pc, #360]	; (8005cf4 <HAL_DMA_IRQHandler+0x420>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d018      	beq.n	8005bc2 <HAL_DMA_IRQHandler+0x2ee>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a58      	ldr	r2, [pc, #352]	; (8005cf8 <HAL_DMA_IRQHandler+0x424>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d013      	beq.n	8005bc2 <HAL_DMA_IRQHandler+0x2ee>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a57      	ldr	r2, [pc, #348]	; (8005cfc <HAL_DMA_IRQHandler+0x428>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d00e      	beq.n	8005bc2 <HAL_DMA_IRQHandler+0x2ee>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a55      	ldr	r2, [pc, #340]	; (8005d00 <HAL_DMA_IRQHandler+0x42c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d009      	beq.n	8005bc2 <HAL_DMA_IRQHandler+0x2ee>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a54      	ldr	r2, [pc, #336]	; (8005d04 <HAL_DMA_IRQHandler+0x430>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d004      	beq.n	8005bc2 <HAL_DMA_IRQHandler+0x2ee>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a52      	ldr	r2, [pc, #328]	; (8005d08 <HAL_DMA_IRQHandler+0x434>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d10a      	bne.n	8005bd8 <HAL_DMA_IRQHandler+0x304>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	bf14      	ite	ne
 8005bd0:	2301      	movne	r3, #1
 8005bd2:	2300      	moveq	r3, #0
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	e003      	b.n	8005be0 <HAL_DMA_IRQHandler+0x30c>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2300      	movs	r3, #0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00d      	beq.n	8005c00 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be8:	f003 031f 	and.w	r3, r3, #31
 8005bec:	2201      	movs	r2, #1
 8005bee:	409a      	lsls	r2, r3
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf8:	f043 0202 	orr.w	r2, r3, #2
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c04:	f003 031f 	and.w	r3, r3, #31
 8005c08:	2204      	movs	r2, #4
 8005c0a:	409a      	lsls	r2, r3
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 808f 	beq.w	8005d34 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a2c      	ldr	r2, [pc, #176]	; (8005ccc <HAL_DMA_IRQHandler+0x3f8>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d04a      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x3e2>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a2a      	ldr	r2, [pc, #168]	; (8005cd0 <HAL_DMA_IRQHandler+0x3fc>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d045      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x3e2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a29      	ldr	r2, [pc, #164]	; (8005cd4 <HAL_DMA_IRQHandler+0x400>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d040      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x3e2>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a27      	ldr	r2, [pc, #156]	; (8005cd8 <HAL_DMA_IRQHandler+0x404>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d03b      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x3e2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a26      	ldr	r2, [pc, #152]	; (8005cdc <HAL_DMA_IRQHandler+0x408>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d036      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x3e2>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a24      	ldr	r2, [pc, #144]	; (8005ce0 <HAL_DMA_IRQHandler+0x40c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d031      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x3e2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a23      	ldr	r2, [pc, #140]	; (8005ce4 <HAL_DMA_IRQHandler+0x410>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d02c      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x3e2>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a21      	ldr	r2, [pc, #132]	; (8005ce8 <HAL_DMA_IRQHandler+0x414>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d027      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x3e2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a20      	ldr	r2, [pc, #128]	; (8005cec <HAL_DMA_IRQHandler+0x418>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d022      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x3e2>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a1e      	ldr	r2, [pc, #120]	; (8005cf0 <HAL_DMA_IRQHandler+0x41c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d01d      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x3e2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a1d      	ldr	r2, [pc, #116]	; (8005cf4 <HAL_DMA_IRQHandler+0x420>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d018      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x3e2>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a1b      	ldr	r2, [pc, #108]	; (8005cf8 <HAL_DMA_IRQHandler+0x424>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d013      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x3e2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a1a      	ldr	r2, [pc, #104]	; (8005cfc <HAL_DMA_IRQHandler+0x428>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d00e      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x3e2>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a18      	ldr	r2, [pc, #96]	; (8005d00 <HAL_DMA_IRQHandler+0x42c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d009      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x3e2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a17      	ldr	r2, [pc, #92]	; (8005d04 <HAL_DMA_IRQHandler+0x430>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d004      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x3e2>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a15      	ldr	r2, [pc, #84]	; (8005d08 <HAL_DMA_IRQHandler+0x434>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d12a      	bne.n	8005d0c <HAL_DMA_IRQHandler+0x438>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	bf14      	ite	ne
 8005cc4:	2301      	movne	r3, #1
 8005cc6:	2300      	moveq	r3, #0
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	e023      	b.n	8005d14 <HAL_DMA_IRQHandler+0x440>
 8005ccc:	40020010 	.word	0x40020010
 8005cd0:	40020028 	.word	0x40020028
 8005cd4:	40020040 	.word	0x40020040
 8005cd8:	40020058 	.word	0x40020058
 8005cdc:	40020070 	.word	0x40020070
 8005ce0:	40020088 	.word	0x40020088
 8005ce4:	400200a0 	.word	0x400200a0
 8005ce8:	400200b8 	.word	0x400200b8
 8005cec:	40020410 	.word	0x40020410
 8005cf0:	40020428 	.word	0x40020428
 8005cf4:	40020440 	.word	0x40020440
 8005cf8:	40020458 	.word	0x40020458
 8005cfc:	40020470 	.word	0x40020470
 8005d00:	40020488 	.word	0x40020488
 8005d04:	400204a0 	.word	0x400204a0
 8005d08:	400204b8 	.word	0x400204b8
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2300      	movs	r3, #0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00d      	beq.n	8005d34 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d1c:	f003 031f 	and.w	r3, r3, #31
 8005d20:	2204      	movs	r2, #4
 8005d22:	409a      	lsls	r2, r3
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2c:	f043 0204 	orr.w	r2, r3, #4
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d38:	f003 031f 	and.w	r3, r3, #31
 8005d3c:	2210      	movs	r2, #16
 8005d3e:	409a      	lsls	r2, r3
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	4013      	ands	r3, r2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 80a6 	beq.w	8005e96 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a85      	ldr	r2, [pc, #532]	; (8005f64 <HAL_DMA_IRQHandler+0x690>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d04a      	beq.n	8005dea <HAL_DMA_IRQHandler+0x516>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a83      	ldr	r2, [pc, #524]	; (8005f68 <HAL_DMA_IRQHandler+0x694>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d045      	beq.n	8005dea <HAL_DMA_IRQHandler+0x516>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a82      	ldr	r2, [pc, #520]	; (8005f6c <HAL_DMA_IRQHandler+0x698>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d040      	beq.n	8005dea <HAL_DMA_IRQHandler+0x516>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a80      	ldr	r2, [pc, #512]	; (8005f70 <HAL_DMA_IRQHandler+0x69c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d03b      	beq.n	8005dea <HAL_DMA_IRQHandler+0x516>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a7f      	ldr	r2, [pc, #508]	; (8005f74 <HAL_DMA_IRQHandler+0x6a0>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d036      	beq.n	8005dea <HAL_DMA_IRQHandler+0x516>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a7d      	ldr	r2, [pc, #500]	; (8005f78 <HAL_DMA_IRQHandler+0x6a4>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d031      	beq.n	8005dea <HAL_DMA_IRQHandler+0x516>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a7c      	ldr	r2, [pc, #496]	; (8005f7c <HAL_DMA_IRQHandler+0x6a8>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d02c      	beq.n	8005dea <HAL_DMA_IRQHandler+0x516>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a7a      	ldr	r2, [pc, #488]	; (8005f80 <HAL_DMA_IRQHandler+0x6ac>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d027      	beq.n	8005dea <HAL_DMA_IRQHandler+0x516>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a79      	ldr	r2, [pc, #484]	; (8005f84 <HAL_DMA_IRQHandler+0x6b0>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d022      	beq.n	8005dea <HAL_DMA_IRQHandler+0x516>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a77      	ldr	r2, [pc, #476]	; (8005f88 <HAL_DMA_IRQHandler+0x6b4>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d01d      	beq.n	8005dea <HAL_DMA_IRQHandler+0x516>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a76      	ldr	r2, [pc, #472]	; (8005f8c <HAL_DMA_IRQHandler+0x6b8>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d018      	beq.n	8005dea <HAL_DMA_IRQHandler+0x516>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a74      	ldr	r2, [pc, #464]	; (8005f90 <HAL_DMA_IRQHandler+0x6bc>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d013      	beq.n	8005dea <HAL_DMA_IRQHandler+0x516>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a73      	ldr	r2, [pc, #460]	; (8005f94 <HAL_DMA_IRQHandler+0x6c0>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d00e      	beq.n	8005dea <HAL_DMA_IRQHandler+0x516>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a71      	ldr	r2, [pc, #452]	; (8005f98 <HAL_DMA_IRQHandler+0x6c4>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d009      	beq.n	8005dea <HAL_DMA_IRQHandler+0x516>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a70      	ldr	r2, [pc, #448]	; (8005f9c <HAL_DMA_IRQHandler+0x6c8>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d004      	beq.n	8005dea <HAL_DMA_IRQHandler+0x516>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a6e      	ldr	r2, [pc, #440]	; (8005fa0 <HAL_DMA_IRQHandler+0x6cc>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d10a      	bne.n	8005e00 <HAL_DMA_IRQHandler+0x52c>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0308 	and.w	r3, r3, #8
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	bf14      	ite	ne
 8005df8:	2301      	movne	r3, #1
 8005dfa:	2300      	moveq	r3, #0
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	e009      	b.n	8005e14 <HAL_DMA_IRQHandler+0x540>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0304 	and.w	r3, r3, #4
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	bf14      	ite	ne
 8005e0e:	2301      	movne	r3, #1
 8005e10:	2300      	moveq	r3, #0
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d03e      	beq.n	8005e96 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e1c:	f003 031f 	and.w	r3, r3, #31
 8005e20:	2210      	movs	r2, #16
 8005e22:	409a      	lsls	r2, r3
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d018      	beq.n	8005e68 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d108      	bne.n	8005e56 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d024      	beq.n	8005e96 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	4798      	blx	r3
 8005e54:	e01f      	b.n	8005e96 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d01b      	beq.n	8005e96 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	4798      	blx	r3
 8005e66:	e016      	b.n	8005e96 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d107      	bne.n	8005e86 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 0208 	bic.w	r2, r2, #8
 8005e84:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e9a:	f003 031f 	and.w	r3, r3, #31
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	409a      	lsls	r2, r3
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 8110 	beq.w	80060cc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a2c      	ldr	r2, [pc, #176]	; (8005f64 <HAL_DMA_IRQHandler+0x690>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d04a      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x678>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a2b      	ldr	r2, [pc, #172]	; (8005f68 <HAL_DMA_IRQHandler+0x694>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d045      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x678>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a29      	ldr	r2, [pc, #164]	; (8005f6c <HAL_DMA_IRQHandler+0x698>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d040      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x678>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a28      	ldr	r2, [pc, #160]	; (8005f70 <HAL_DMA_IRQHandler+0x69c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d03b      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x678>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a26      	ldr	r2, [pc, #152]	; (8005f74 <HAL_DMA_IRQHandler+0x6a0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d036      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x678>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a25      	ldr	r2, [pc, #148]	; (8005f78 <HAL_DMA_IRQHandler+0x6a4>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d031      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x678>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a23      	ldr	r2, [pc, #140]	; (8005f7c <HAL_DMA_IRQHandler+0x6a8>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d02c      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x678>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a22      	ldr	r2, [pc, #136]	; (8005f80 <HAL_DMA_IRQHandler+0x6ac>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d027      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x678>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a20      	ldr	r2, [pc, #128]	; (8005f84 <HAL_DMA_IRQHandler+0x6b0>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d022      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x678>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a1f      	ldr	r2, [pc, #124]	; (8005f88 <HAL_DMA_IRQHandler+0x6b4>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d01d      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x678>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a1d      	ldr	r2, [pc, #116]	; (8005f8c <HAL_DMA_IRQHandler+0x6b8>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d018      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x678>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a1c      	ldr	r2, [pc, #112]	; (8005f90 <HAL_DMA_IRQHandler+0x6bc>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d013      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x678>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a1a      	ldr	r2, [pc, #104]	; (8005f94 <HAL_DMA_IRQHandler+0x6c0>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d00e      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x678>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a19      	ldr	r2, [pc, #100]	; (8005f98 <HAL_DMA_IRQHandler+0x6c4>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d009      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x678>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a17      	ldr	r2, [pc, #92]	; (8005f9c <HAL_DMA_IRQHandler+0x6c8>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d004      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x678>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a16      	ldr	r2, [pc, #88]	; (8005fa0 <HAL_DMA_IRQHandler+0x6cc>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d12b      	bne.n	8005fa4 <HAL_DMA_IRQHandler+0x6d0>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0310 	and.w	r3, r3, #16
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	bf14      	ite	ne
 8005f5a:	2301      	movne	r3, #1
 8005f5c:	2300      	moveq	r3, #0
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	e02a      	b.n	8005fb8 <HAL_DMA_IRQHandler+0x6e4>
 8005f62:	bf00      	nop
 8005f64:	40020010 	.word	0x40020010
 8005f68:	40020028 	.word	0x40020028
 8005f6c:	40020040 	.word	0x40020040
 8005f70:	40020058 	.word	0x40020058
 8005f74:	40020070 	.word	0x40020070
 8005f78:	40020088 	.word	0x40020088
 8005f7c:	400200a0 	.word	0x400200a0
 8005f80:	400200b8 	.word	0x400200b8
 8005f84:	40020410 	.word	0x40020410
 8005f88:	40020428 	.word	0x40020428
 8005f8c:	40020440 	.word	0x40020440
 8005f90:	40020458 	.word	0x40020458
 8005f94:	40020470 	.word	0x40020470
 8005f98:	40020488 	.word	0x40020488
 8005f9c:	400204a0 	.word	0x400204a0
 8005fa0:	400204b8 	.word	0x400204b8
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	bf14      	ite	ne
 8005fb2:	2301      	movne	r3, #1
 8005fb4:	2300      	moveq	r3, #0
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 8087 	beq.w	80060cc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc2:	f003 031f 	and.w	r3, r3, #31
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	409a      	lsls	r2, r3
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b04      	cmp	r3, #4
 8005fd8:	d139      	bne.n	800604e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 0216 	bic.w	r2, r2, #22
 8005fe8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	695a      	ldr	r2, [r3, #20]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ff8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d103      	bne.n	800600a <HAL_DMA_IRQHandler+0x736>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006006:	2b00      	cmp	r3, #0
 8006008:	d007      	beq.n	800601a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 0208 	bic.w	r2, r2, #8
 8006018:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800601e:	f003 031f 	and.w	r3, r3, #31
 8006022:	223f      	movs	r2, #63	; 0x3f
 8006024:	409a      	lsls	r2, r3
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603e:	2b00      	cmp	r3, #0
 8006040:	f000 834a 	beq.w	80066d8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	4798      	blx	r3
          }
          return;
 800604c:	e344      	b.n	80066d8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d018      	beq.n	800608e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d108      	bne.n	800607c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606e:	2b00      	cmp	r3, #0
 8006070:	d02c      	beq.n	80060cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	4798      	blx	r3
 800607a:	e027      	b.n	80060cc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006080:	2b00      	cmp	r3, #0
 8006082:	d023      	beq.n	80060cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	4798      	blx	r3
 800608c:	e01e      	b.n	80060cc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10f      	bne.n	80060bc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 0210 	bic.w	r2, r2, #16
 80060aa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 8306 	beq.w	80066e2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f000 8088 	beq.w	80061f4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2204      	movs	r2, #4
 80060e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a7a      	ldr	r2, [pc, #488]	; (80062dc <HAL_DMA_IRQHandler+0xa08>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d04a      	beq.n	800618c <HAL_DMA_IRQHandler+0x8b8>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a79      	ldr	r2, [pc, #484]	; (80062e0 <HAL_DMA_IRQHandler+0xa0c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d045      	beq.n	800618c <HAL_DMA_IRQHandler+0x8b8>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a77      	ldr	r2, [pc, #476]	; (80062e4 <HAL_DMA_IRQHandler+0xa10>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d040      	beq.n	800618c <HAL_DMA_IRQHandler+0x8b8>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a76      	ldr	r2, [pc, #472]	; (80062e8 <HAL_DMA_IRQHandler+0xa14>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d03b      	beq.n	800618c <HAL_DMA_IRQHandler+0x8b8>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a74      	ldr	r2, [pc, #464]	; (80062ec <HAL_DMA_IRQHandler+0xa18>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d036      	beq.n	800618c <HAL_DMA_IRQHandler+0x8b8>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a73      	ldr	r2, [pc, #460]	; (80062f0 <HAL_DMA_IRQHandler+0xa1c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d031      	beq.n	800618c <HAL_DMA_IRQHandler+0x8b8>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a71      	ldr	r2, [pc, #452]	; (80062f4 <HAL_DMA_IRQHandler+0xa20>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d02c      	beq.n	800618c <HAL_DMA_IRQHandler+0x8b8>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a70      	ldr	r2, [pc, #448]	; (80062f8 <HAL_DMA_IRQHandler+0xa24>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d027      	beq.n	800618c <HAL_DMA_IRQHandler+0x8b8>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a6e      	ldr	r2, [pc, #440]	; (80062fc <HAL_DMA_IRQHandler+0xa28>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d022      	beq.n	800618c <HAL_DMA_IRQHandler+0x8b8>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a6d      	ldr	r2, [pc, #436]	; (8006300 <HAL_DMA_IRQHandler+0xa2c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d01d      	beq.n	800618c <HAL_DMA_IRQHandler+0x8b8>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a6b      	ldr	r2, [pc, #428]	; (8006304 <HAL_DMA_IRQHandler+0xa30>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d018      	beq.n	800618c <HAL_DMA_IRQHandler+0x8b8>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a6a      	ldr	r2, [pc, #424]	; (8006308 <HAL_DMA_IRQHandler+0xa34>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d013      	beq.n	800618c <HAL_DMA_IRQHandler+0x8b8>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a68      	ldr	r2, [pc, #416]	; (800630c <HAL_DMA_IRQHandler+0xa38>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00e      	beq.n	800618c <HAL_DMA_IRQHandler+0x8b8>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a67      	ldr	r2, [pc, #412]	; (8006310 <HAL_DMA_IRQHandler+0xa3c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d009      	beq.n	800618c <HAL_DMA_IRQHandler+0x8b8>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a65      	ldr	r2, [pc, #404]	; (8006314 <HAL_DMA_IRQHandler+0xa40>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d004      	beq.n	800618c <HAL_DMA_IRQHandler+0x8b8>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a64      	ldr	r2, [pc, #400]	; (8006318 <HAL_DMA_IRQHandler+0xa44>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d108      	bne.n	800619e <HAL_DMA_IRQHandler+0x8ca>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0201 	bic.w	r2, r2, #1
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	e007      	b.n	80061ae <HAL_DMA_IRQHandler+0x8da>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0201 	bic.w	r2, r2, #1
 80061ac:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	3301      	adds	r3, #1
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d307      	bcc.n	80061ca <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1f2      	bne.n	80061ae <HAL_DMA_IRQHandler+0x8da>
 80061c8:	e000      	b.n	80061cc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80061ca:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d004      	beq.n	80061e4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2203      	movs	r2, #3
 80061de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80061e2:	e003      	b.n	80061ec <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 8272 	beq.w	80066e2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	4798      	blx	r3
 8006206:	e26c      	b.n	80066e2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a43      	ldr	r2, [pc, #268]	; (800631c <HAL_DMA_IRQHandler+0xa48>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d022      	beq.n	8006258 <HAL_DMA_IRQHandler+0x984>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a42      	ldr	r2, [pc, #264]	; (8006320 <HAL_DMA_IRQHandler+0xa4c>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d01d      	beq.n	8006258 <HAL_DMA_IRQHandler+0x984>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a40      	ldr	r2, [pc, #256]	; (8006324 <HAL_DMA_IRQHandler+0xa50>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d018      	beq.n	8006258 <HAL_DMA_IRQHandler+0x984>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a3f      	ldr	r2, [pc, #252]	; (8006328 <HAL_DMA_IRQHandler+0xa54>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d013      	beq.n	8006258 <HAL_DMA_IRQHandler+0x984>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a3d      	ldr	r2, [pc, #244]	; (800632c <HAL_DMA_IRQHandler+0xa58>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d00e      	beq.n	8006258 <HAL_DMA_IRQHandler+0x984>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a3c      	ldr	r2, [pc, #240]	; (8006330 <HAL_DMA_IRQHandler+0xa5c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d009      	beq.n	8006258 <HAL_DMA_IRQHandler+0x984>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a3a      	ldr	r2, [pc, #232]	; (8006334 <HAL_DMA_IRQHandler+0xa60>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d004      	beq.n	8006258 <HAL_DMA_IRQHandler+0x984>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a39      	ldr	r2, [pc, #228]	; (8006338 <HAL_DMA_IRQHandler+0xa64>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d101      	bne.n	800625c <HAL_DMA_IRQHandler+0x988>
 8006258:	2301      	movs	r3, #1
 800625a:	e000      	b.n	800625e <HAL_DMA_IRQHandler+0x98a>
 800625c:	2300      	movs	r3, #0
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 823f 	beq.w	80066e2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006270:	f003 031f 	and.w	r3, r3, #31
 8006274:	2204      	movs	r2, #4
 8006276:	409a      	lsls	r2, r3
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	4013      	ands	r3, r2
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 80cd 	beq.w	800641c <HAL_DMA_IRQHandler+0xb48>
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f003 0304 	and.w	r3, r3, #4
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 80c7 	beq.w	800641c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006292:	f003 031f 	and.w	r3, r3, #31
 8006296:	2204      	movs	r2, #4
 8006298:	409a      	lsls	r2, r3
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d049      	beq.n	800633c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d109      	bne.n	80062c6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 8210 	beq.w	80066dc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062c4:	e20a      	b.n	80066dc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 8206 	beq.w	80066dc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062d8:	e200      	b.n	80066dc <HAL_DMA_IRQHandler+0xe08>
 80062da:	bf00      	nop
 80062dc:	40020010 	.word	0x40020010
 80062e0:	40020028 	.word	0x40020028
 80062e4:	40020040 	.word	0x40020040
 80062e8:	40020058 	.word	0x40020058
 80062ec:	40020070 	.word	0x40020070
 80062f0:	40020088 	.word	0x40020088
 80062f4:	400200a0 	.word	0x400200a0
 80062f8:	400200b8 	.word	0x400200b8
 80062fc:	40020410 	.word	0x40020410
 8006300:	40020428 	.word	0x40020428
 8006304:	40020440 	.word	0x40020440
 8006308:	40020458 	.word	0x40020458
 800630c:	40020470 	.word	0x40020470
 8006310:	40020488 	.word	0x40020488
 8006314:	400204a0 	.word	0x400204a0
 8006318:	400204b8 	.word	0x400204b8
 800631c:	58025408 	.word	0x58025408
 8006320:	5802541c 	.word	0x5802541c
 8006324:	58025430 	.word	0x58025430
 8006328:	58025444 	.word	0x58025444
 800632c:	58025458 	.word	0x58025458
 8006330:	5802546c 	.word	0x5802546c
 8006334:	58025480 	.word	0x58025480
 8006338:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f003 0320 	and.w	r3, r3, #32
 8006342:	2b00      	cmp	r3, #0
 8006344:	d160      	bne.n	8006408 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a7f      	ldr	r2, [pc, #508]	; (8006548 <HAL_DMA_IRQHandler+0xc74>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d04a      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xb12>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a7d      	ldr	r2, [pc, #500]	; (800654c <HAL_DMA_IRQHandler+0xc78>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d045      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xb12>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a7c      	ldr	r2, [pc, #496]	; (8006550 <HAL_DMA_IRQHandler+0xc7c>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d040      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xb12>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a7a      	ldr	r2, [pc, #488]	; (8006554 <HAL_DMA_IRQHandler+0xc80>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d03b      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xb12>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a79      	ldr	r2, [pc, #484]	; (8006558 <HAL_DMA_IRQHandler+0xc84>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d036      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xb12>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a77      	ldr	r2, [pc, #476]	; (800655c <HAL_DMA_IRQHandler+0xc88>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d031      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xb12>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a76      	ldr	r2, [pc, #472]	; (8006560 <HAL_DMA_IRQHandler+0xc8c>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d02c      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xb12>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a74      	ldr	r2, [pc, #464]	; (8006564 <HAL_DMA_IRQHandler+0xc90>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d027      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xb12>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a73      	ldr	r2, [pc, #460]	; (8006568 <HAL_DMA_IRQHandler+0xc94>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d022      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xb12>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a71      	ldr	r2, [pc, #452]	; (800656c <HAL_DMA_IRQHandler+0xc98>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d01d      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xb12>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a70      	ldr	r2, [pc, #448]	; (8006570 <HAL_DMA_IRQHandler+0xc9c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d018      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xb12>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a6e      	ldr	r2, [pc, #440]	; (8006574 <HAL_DMA_IRQHandler+0xca0>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d013      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xb12>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a6d      	ldr	r2, [pc, #436]	; (8006578 <HAL_DMA_IRQHandler+0xca4>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d00e      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xb12>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a6b      	ldr	r2, [pc, #428]	; (800657c <HAL_DMA_IRQHandler+0xca8>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d009      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xb12>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a6a      	ldr	r2, [pc, #424]	; (8006580 <HAL_DMA_IRQHandler+0xcac>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d004      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xb12>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a68      	ldr	r2, [pc, #416]	; (8006584 <HAL_DMA_IRQHandler+0xcb0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d108      	bne.n	80063f8 <HAL_DMA_IRQHandler+0xb24>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 0208 	bic.w	r2, r2, #8
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	e007      	b.n	8006408 <HAL_DMA_IRQHandler+0xb34>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 0204 	bic.w	r2, r2, #4
 8006406:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 8165 	beq.w	80066dc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800641a:	e15f      	b.n	80066dc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006420:	f003 031f 	and.w	r3, r3, #31
 8006424:	2202      	movs	r2, #2
 8006426:	409a      	lsls	r2, r3
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	4013      	ands	r3, r2
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 80c5 	beq.w	80065bc <HAL_DMA_IRQHandler+0xce8>
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f003 0302 	and.w	r3, r3, #2
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 80bf 	beq.w	80065bc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006442:	f003 031f 	and.w	r3, r3, #31
 8006446:	2202      	movs	r2, #2
 8006448:	409a      	lsls	r2, r3
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d018      	beq.n	800648a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d109      	bne.n	8006476 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 813a 	beq.w	80066e0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006474:	e134      	b.n	80066e0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 8130 	beq.w	80066e0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006488:	e12a      	b.n	80066e0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	f003 0320 	and.w	r3, r3, #32
 8006490:	2b00      	cmp	r3, #0
 8006492:	f040 8089 	bne.w	80065a8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a2b      	ldr	r2, [pc, #172]	; (8006548 <HAL_DMA_IRQHandler+0xc74>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d04a      	beq.n	8006536 <HAL_DMA_IRQHandler+0xc62>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a29      	ldr	r2, [pc, #164]	; (800654c <HAL_DMA_IRQHandler+0xc78>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d045      	beq.n	8006536 <HAL_DMA_IRQHandler+0xc62>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a28      	ldr	r2, [pc, #160]	; (8006550 <HAL_DMA_IRQHandler+0xc7c>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d040      	beq.n	8006536 <HAL_DMA_IRQHandler+0xc62>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a26      	ldr	r2, [pc, #152]	; (8006554 <HAL_DMA_IRQHandler+0xc80>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d03b      	beq.n	8006536 <HAL_DMA_IRQHandler+0xc62>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a25      	ldr	r2, [pc, #148]	; (8006558 <HAL_DMA_IRQHandler+0xc84>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d036      	beq.n	8006536 <HAL_DMA_IRQHandler+0xc62>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a23      	ldr	r2, [pc, #140]	; (800655c <HAL_DMA_IRQHandler+0xc88>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d031      	beq.n	8006536 <HAL_DMA_IRQHandler+0xc62>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a22      	ldr	r2, [pc, #136]	; (8006560 <HAL_DMA_IRQHandler+0xc8c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d02c      	beq.n	8006536 <HAL_DMA_IRQHandler+0xc62>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a20      	ldr	r2, [pc, #128]	; (8006564 <HAL_DMA_IRQHandler+0xc90>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d027      	beq.n	8006536 <HAL_DMA_IRQHandler+0xc62>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a1f      	ldr	r2, [pc, #124]	; (8006568 <HAL_DMA_IRQHandler+0xc94>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d022      	beq.n	8006536 <HAL_DMA_IRQHandler+0xc62>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a1d      	ldr	r2, [pc, #116]	; (800656c <HAL_DMA_IRQHandler+0xc98>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d01d      	beq.n	8006536 <HAL_DMA_IRQHandler+0xc62>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a1c      	ldr	r2, [pc, #112]	; (8006570 <HAL_DMA_IRQHandler+0xc9c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d018      	beq.n	8006536 <HAL_DMA_IRQHandler+0xc62>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a1a      	ldr	r2, [pc, #104]	; (8006574 <HAL_DMA_IRQHandler+0xca0>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d013      	beq.n	8006536 <HAL_DMA_IRQHandler+0xc62>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a19      	ldr	r2, [pc, #100]	; (8006578 <HAL_DMA_IRQHandler+0xca4>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00e      	beq.n	8006536 <HAL_DMA_IRQHandler+0xc62>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a17      	ldr	r2, [pc, #92]	; (800657c <HAL_DMA_IRQHandler+0xca8>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d009      	beq.n	8006536 <HAL_DMA_IRQHandler+0xc62>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a16      	ldr	r2, [pc, #88]	; (8006580 <HAL_DMA_IRQHandler+0xcac>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d004      	beq.n	8006536 <HAL_DMA_IRQHandler+0xc62>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a14      	ldr	r2, [pc, #80]	; (8006584 <HAL_DMA_IRQHandler+0xcb0>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d128      	bne.n	8006588 <HAL_DMA_IRQHandler+0xcb4>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0214 	bic.w	r2, r2, #20
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	e027      	b.n	8006598 <HAL_DMA_IRQHandler+0xcc4>
 8006548:	40020010 	.word	0x40020010
 800654c:	40020028 	.word	0x40020028
 8006550:	40020040 	.word	0x40020040
 8006554:	40020058 	.word	0x40020058
 8006558:	40020070 	.word	0x40020070
 800655c:	40020088 	.word	0x40020088
 8006560:	400200a0 	.word	0x400200a0
 8006564:	400200b8 	.word	0x400200b8
 8006568:	40020410 	.word	0x40020410
 800656c:	40020428 	.word	0x40020428
 8006570:	40020440 	.word	0x40020440
 8006574:	40020458 	.word	0x40020458
 8006578:	40020470 	.word	0x40020470
 800657c:	40020488 	.word	0x40020488
 8006580:	400204a0 	.word	0x400204a0
 8006584:	400204b8 	.word	0x400204b8
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f022 020a 	bic.w	r2, r2, #10
 8006596:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 8097 	beq.w	80066e0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065ba:	e091      	b.n	80066e0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c0:	f003 031f 	and.w	r3, r3, #31
 80065c4:	2208      	movs	r2, #8
 80065c6:	409a      	lsls	r2, r3
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	4013      	ands	r3, r2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 8088 	beq.w	80066e2 <HAL_DMA_IRQHandler+0xe0e>
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f003 0308 	and.w	r3, r3, #8
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 8082 	beq.w	80066e2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a41      	ldr	r2, [pc, #260]	; (80066e8 <HAL_DMA_IRQHandler+0xe14>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d04a      	beq.n	800667e <HAL_DMA_IRQHandler+0xdaa>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a3f      	ldr	r2, [pc, #252]	; (80066ec <HAL_DMA_IRQHandler+0xe18>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d045      	beq.n	800667e <HAL_DMA_IRQHandler+0xdaa>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a3e      	ldr	r2, [pc, #248]	; (80066f0 <HAL_DMA_IRQHandler+0xe1c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d040      	beq.n	800667e <HAL_DMA_IRQHandler+0xdaa>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a3c      	ldr	r2, [pc, #240]	; (80066f4 <HAL_DMA_IRQHandler+0xe20>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d03b      	beq.n	800667e <HAL_DMA_IRQHandler+0xdaa>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a3b      	ldr	r2, [pc, #236]	; (80066f8 <HAL_DMA_IRQHandler+0xe24>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d036      	beq.n	800667e <HAL_DMA_IRQHandler+0xdaa>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a39      	ldr	r2, [pc, #228]	; (80066fc <HAL_DMA_IRQHandler+0xe28>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d031      	beq.n	800667e <HAL_DMA_IRQHandler+0xdaa>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a38      	ldr	r2, [pc, #224]	; (8006700 <HAL_DMA_IRQHandler+0xe2c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d02c      	beq.n	800667e <HAL_DMA_IRQHandler+0xdaa>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a36      	ldr	r2, [pc, #216]	; (8006704 <HAL_DMA_IRQHandler+0xe30>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d027      	beq.n	800667e <HAL_DMA_IRQHandler+0xdaa>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a35      	ldr	r2, [pc, #212]	; (8006708 <HAL_DMA_IRQHandler+0xe34>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d022      	beq.n	800667e <HAL_DMA_IRQHandler+0xdaa>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a33      	ldr	r2, [pc, #204]	; (800670c <HAL_DMA_IRQHandler+0xe38>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d01d      	beq.n	800667e <HAL_DMA_IRQHandler+0xdaa>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a32      	ldr	r2, [pc, #200]	; (8006710 <HAL_DMA_IRQHandler+0xe3c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d018      	beq.n	800667e <HAL_DMA_IRQHandler+0xdaa>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a30      	ldr	r2, [pc, #192]	; (8006714 <HAL_DMA_IRQHandler+0xe40>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d013      	beq.n	800667e <HAL_DMA_IRQHandler+0xdaa>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a2f      	ldr	r2, [pc, #188]	; (8006718 <HAL_DMA_IRQHandler+0xe44>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d00e      	beq.n	800667e <HAL_DMA_IRQHandler+0xdaa>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a2d      	ldr	r2, [pc, #180]	; (800671c <HAL_DMA_IRQHandler+0xe48>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d009      	beq.n	800667e <HAL_DMA_IRQHandler+0xdaa>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a2c      	ldr	r2, [pc, #176]	; (8006720 <HAL_DMA_IRQHandler+0xe4c>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d004      	beq.n	800667e <HAL_DMA_IRQHandler+0xdaa>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a2a      	ldr	r2, [pc, #168]	; (8006724 <HAL_DMA_IRQHandler+0xe50>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d108      	bne.n	8006690 <HAL_DMA_IRQHandler+0xdbc>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 021c 	bic.w	r2, r2, #28
 800668c:	601a      	str	r2, [r3, #0]
 800668e:	e007      	b.n	80066a0 <HAL_DMA_IRQHandler+0xdcc>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 020e 	bic.w	r2, r2, #14
 800669e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066a4:	f003 031f 	and.w	r3, r3, #31
 80066a8:	2201      	movs	r2, #1
 80066aa:	409a      	lsls	r2, r3
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d009      	beq.n	80066e2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	4798      	blx	r3
 80066d6:	e004      	b.n	80066e2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80066d8:	bf00      	nop
 80066da:	e002      	b.n	80066e2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066dc:	bf00      	nop
 80066de:	e000      	b.n	80066e2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066e0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80066e2:	3728      	adds	r7, #40	; 0x28
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	40020010 	.word	0x40020010
 80066ec:	40020028 	.word	0x40020028
 80066f0:	40020040 	.word	0x40020040
 80066f4:	40020058 	.word	0x40020058
 80066f8:	40020070 	.word	0x40020070
 80066fc:	40020088 	.word	0x40020088
 8006700:	400200a0 	.word	0x400200a0
 8006704:	400200b8 	.word	0x400200b8
 8006708:	40020410 	.word	0x40020410
 800670c:	40020428 	.word	0x40020428
 8006710:	40020440 	.word	0x40020440
 8006714:	40020458 	.word	0x40020458
 8006718:	40020470 	.word	0x40020470
 800671c:	40020488 	.word	0x40020488
 8006720:	400204a0 	.word	0x400204a0
 8006724:	400204b8 	.word	0x400204b8

08006728 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
 8006734:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800673a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006740:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a7f      	ldr	r2, [pc, #508]	; (8006944 <DMA_SetConfig+0x21c>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d072      	beq.n	8006832 <DMA_SetConfig+0x10a>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a7d      	ldr	r2, [pc, #500]	; (8006948 <DMA_SetConfig+0x220>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d06d      	beq.n	8006832 <DMA_SetConfig+0x10a>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a7c      	ldr	r2, [pc, #496]	; (800694c <DMA_SetConfig+0x224>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d068      	beq.n	8006832 <DMA_SetConfig+0x10a>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a7a      	ldr	r2, [pc, #488]	; (8006950 <DMA_SetConfig+0x228>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d063      	beq.n	8006832 <DMA_SetConfig+0x10a>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a79      	ldr	r2, [pc, #484]	; (8006954 <DMA_SetConfig+0x22c>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d05e      	beq.n	8006832 <DMA_SetConfig+0x10a>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a77      	ldr	r2, [pc, #476]	; (8006958 <DMA_SetConfig+0x230>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d059      	beq.n	8006832 <DMA_SetConfig+0x10a>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a76      	ldr	r2, [pc, #472]	; (800695c <DMA_SetConfig+0x234>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d054      	beq.n	8006832 <DMA_SetConfig+0x10a>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a74      	ldr	r2, [pc, #464]	; (8006960 <DMA_SetConfig+0x238>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d04f      	beq.n	8006832 <DMA_SetConfig+0x10a>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a73      	ldr	r2, [pc, #460]	; (8006964 <DMA_SetConfig+0x23c>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d04a      	beq.n	8006832 <DMA_SetConfig+0x10a>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a71      	ldr	r2, [pc, #452]	; (8006968 <DMA_SetConfig+0x240>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d045      	beq.n	8006832 <DMA_SetConfig+0x10a>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a70      	ldr	r2, [pc, #448]	; (800696c <DMA_SetConfig+0x244>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d040      	beq.n	8006832 <DMA_SetConfig+0x10a>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a6e      	ldr	r2, [pc, #440]	; (8006970 <DMA_SetConfig+0x248>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d03b      	beq.n	8006832 <DMA_SetConfig+0x10a>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a6d      	ldr	r2, [pc, #436]	; (8006974 <DMA_SetConfig+0x24c>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d036      	beq.n	8006832 <DMA_SetConfig+0x10a>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a6b      	ldr	r2, [pc, #428]	; (8006978 <DMA_SetConfig+0x250>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d031      	beq.n	8006832 <DMA_SetConfig+0x10a>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a6a      	ldr	r2, [pc, #424]	; (800697c <DMA_SetConfig+0x254>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d02c      	beq.n	8006832 <DMA_SetConfig+0x10a>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a68      	ldr	r2, [pc, #416]	; (8006980 <DMA_SetConfig+0x258>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d027      	beq.n	8006832 <DMA_SetConfig+0x10a>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a67      	ldr	r2, [pc, #412]	; (8006984 <DMA_SetConfig+0x25c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d022      	beq.n	8006832 <DMA_SetConfig+0x10a>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a65      	ldr	r2, [pc, #404]	; (8006988 <DMA_SetConfig+0x260>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d01d      	beq.n	8006832 <DMA_SetConfig+0x10a>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a64      	ldr	r2, [pc, #400]	; (800698c <DMA_SetConfig+0x264>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d018      	beq.n	8006832 <DMA_SetConfig+0x10a>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a62      	ldr	r2, [pc, #392]	; (8006990 <DMA_SetConfig+0x268>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d013      	beq.n	8006832 <DMA_SetConfig+0x10a>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a61      	ldr	r2, [pc, #388]	; (8006994 <DMA_SetConfig+0x26c>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d00e      	beq.n	8006832 <DMA_SetConfig+0x10a>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a5f      	ldr	r2, [pc, #380]	; (8006998 <DMA_SetConfig+0x270>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d009      	beq.n	8006832 <DMA_SetConfig+0x10a>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a5e      	ldr	r2, [pc, #376]	; (800699c <DMA_SetConfig+0x274>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d004      	beq.n	8006832 <DMA_SetConfig+0x10a>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a5c      	ldr	r2, [pc, #368]	; (80069a0 <DMA_SetConfig+0x278>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d101      	bne.n	8006836 <DMA_SetConfig+0x10e>
 8006832:	2301      	movs	r3, #1
 8006834:	e000      	b.n	8006838 <DMA_SetConfig+0x110>
 8006836:	2300      	movs	r3, #0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00d      	beq.n	8006858 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006844:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800684a:	2b00      	cmp	r3, #0
 800684c:	d004      	beq.n	8006858 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006856:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a39      	ldr	r2, [pc, #228]	; (8006944 <DMA_SetConfig+0x21c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d04a      	beq.n	80068f8 <DMA_SetConfig+0x1d0>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a38      	ldr	r2, [pc, #224]	; (8006948 <DMA_SetConfig+0x220>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d045      	beq.n	80068f8 <DMA_SetConfig+0x1d0>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a36      	ldr	r2, [pc, #216]	; (800694c <DMA_SetConfig+0x224>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d040      	beq.n	80068f8 <DMA_SetConfig+0x1d0>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a35      	ldr	r2, [pc, #212]	; (8006950 <DMA_SetConfig+0x228>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d03b      	beq.n	80068f8 <DMA_SetConfig+0x1d0>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a33      	ldr	r2, [pc, #204]	; (8006954 <DMA_SetConfig+0x22c>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d036      	beq.n	80068f8 <DMA_SetConfig+0x1d0>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a32      	ldr	r2, [pc, #200]	; (8006958 <DMA_SetConfig+0x230>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d031      	beq.n	80068f8 <DMA_SetConfig+0x1d0>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a30      	ldr	r2, [pc, #192]	; (800695c <DMA_SetConfig+0x234>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d02c      	beq.n	80068f8 <DMA_SetConfig+0x1d0>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a2f      	ldr	r2, [pc, #188]	; (8006960 <DMA_SetConfig+0x238>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d027      	beq.n	80068f8 <DMA_SetConfig+0x1d0>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a2d      	ldr	r2, [pc, #180]	; (8006964 <DMA_SetConfig+0x23c>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d022      	beq.n	80068f8 <DMA_SetConfig+0x1d0>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a2c      	ldr	r2, [pc, #176]	; (8006968 <DMA_SetConfig+0x240>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d01d      	beq.n	80068f8 <DMA_SetConfig+0x1d0>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a2a      	ldr	r2, [pc, #168]	; (800696c <DMA_SetConfig+0x244>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d018      	beq.n	80068f8 <DMA_SetConfig+0x1d0>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a29      	ldr	r2, [pc, #164]	; (8006970 <DMA_SetConfig+0x248>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d013      	beq.n	80068f8 <DMA_SetConfig+0x1d0>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a27      	ldr	r2, [pc, #156]	; (8006974 <DMA_SetConfig+0x24c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d00e      	beq.n	80068f8 <DMA_SetConfig+0x1d0>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a26      	ldr	r2, [pc, #152]	; (8006978 <DMA_SetConfig+0x250>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d009      	beq.n	80068f8 <DMA_SetConfig+0x1d0>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a24      	ldr	r2, [pc, #144]	; (800697c <DMA_SetConfig+0x254>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d004      	beq.n	80068f8 <DMA_SetConfig+0x1d0>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a23      	ldr	r2, [pc, #140]	; (8006980 <DMA_SetConfig+0x258>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d101      	bne.n	80068fc <DMA_SetConfig+0x1d4>
 80068f8:	2301      	movs	r3, #1
 80068fa:	e000      	b.n	80068fe <DMA_SetConfig+0x1d6>
 80068fc:	2300      	movs	r3, #0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d059      	beq.n	80069b6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006906:	f003 031f 	and.w	r3, r3, #31
 800690a:	223f      	movs	r2, #63	; 0x3f
 800690c:	409a      	lsls	r2, r3
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006920:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	683a      	ldr	r2, [r7, #0]
 8006928:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	2b40      	cmp	r3, #64	; 0x40
 8006930:	d138      	bne.n	80069a4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006942:	e086      	b.n	8006a52 <DMA_SetConfig+0x32a>
 8006944:	40020010 	.word	0x40020010
 8006948:	40020028 	.word	0x40020028
 800694c:	40020040 	.word	0x40020040
 8006950:	40020058 	.word	0x40020058
 8006954:	40020070 	.word	0x40020070
 8006958:	40020088 	.word	0x40020088
 800695c:	400200a0 	.word	0x400200a0
 8006960:	400200b8 	.word	0x400200b8
 8006964:	40020410 	.word	0x40020410
 8006968:	40020428 	.word	0x40020428
 800696c:	40020440 	.word	0x40020440
 8006970:	40020458 	.word	0x40020458
 8006974:	40020470 	.word	0x40020470
 8006978:	40020488 	.word	0x40020488
 800697c:	400204a0 	.word	0x400204a0
 8006980:	400204b8 	.word	0x400204b8
 8006984:	58025408 	.word	0x58025408
 8006988:	5802541c 	.word	0x5802541c
 800698c:	58025430 	.word	0x58025430
 8006990:	58025444 	.word	0x58025444
 8006994:	58025458 	.word	0x58025458
 8006998:	5802546c 	.word	0x5802546c
 800699c:	58025480 	.word	0x58025480
 80069a0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	60da      	str	r2, [r3, #12]
}
 80069b4:	e04d      	b.n	8006a52 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a29      	ldr	r2, [pc, #164]	; (8006a60 <DMA_SetConfig+0x338>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d022      	beq.n	8006a06 <DMA_SetConfig+0x2de>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a27      	ldr	r2, [pc, #156]	; (8006a64 <DMA_SetConfig+0x33c>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d01d      	beq.n	8006a06 <DMA_SetConfig+0x2de>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a26      	ldr	r2, [pc, #152]	; (8006a68 <DMA_SetConfig+0x340>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d018      	beq.n	8006a06 <DMA_SetConfig+0x2de>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a24      	ldr	r2, [pc, #144]	; (8006a6c <DMA_SetConfig+0x344>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d013      	beq.n	8006a06 <DMA_SetConfig+0x2de>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a23      	ldr	r2, [pc, #140]	; (8006a70 <DMA_SetConfig+0x348>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d00e      	beq.n	8006a06 <DMA_SetConfig+0x2de>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a21      	ldr	r2, [pc, #132]	; (8006a74 <DMA_SetConfig+0x34c>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d009      	beq.n	8006a06 <DMA_SetConfig+0x2de>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a20      	ldr	r2, [pc, #128]	; (8006a78 <DMA_SetConfig+0x350>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d004      	beq.n	8006a06 <DMA_SetConfig+0x2de>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a1e      	ldr	r2, [pc, #120]	; (8006a7c <DMA_SetConfig+0x354>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d101      	bne.n	8006a0a <DMA_SetConfig+0x2e2>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e000      	b.n	8006a0c <DMA_SetConfig+0x2e4>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d020      	beq.n	8006a52 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a14:	f003 031f 	and.w	r3, r3, #31
 8006a18:	2201      	movs	r2, #1
 8006a1a:	409a      	lsls	r2, r3
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	683a      	ldr	r2, [r7, #0]
 8006a26:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	2b40      	cmp	r3, #64	; 0x40
 8006a2e:	d108      	bne.n	8006a42 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	60da      	str	r2, [r3, #12]
}
 8006a40:	e007      	b.n	8006a52 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	60da      	str	r2, [r3, #12]
}
 8006a52:	bf00      	nop
 8006a54:	371c      	adds	r7, #28
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	58025408 	.word	0x58025408
 8006a64:	5802541c 	.word	0x5802541c
 8006a68:	58025430 	.word	0x58025430
 8006a6c:	58025444 	.word	0x58025444
 8006a70:	58025458 	.word	0x58025458
 8006a74:	5802546c 	.word	0x5802546c
 8006a78:	58025480 	.word	0x58025480
 8006a7c:	58025494 	.word	0x58025494

08006a80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a42      	ldr	r2, [pc, #264]	; (8006b98 <DMA_CalcBaseAndBitshift+0x118>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d04a      	beq.n	8006b28 <DMA_CalcBaseAndBitshift+0xa8>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a41      	ldr	r2, [pc, #260]	; (8006b9c <DMA_CalcBaseAndBitshift+0x11c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d045      	beq.n	8006b28 <DMA_CalcBaseAndBitshift+0xa8>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a3f      	ldr	r2, [pc, #252]	; (8006ba0 <DMA_CalcBaseAndBitshift+0x120>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d040      	beq.n	8006b28 <DMA_CalcBaseAndBitshift+0xa8>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a3e      	ldr	r2, [pc, #248]	; (8006ba4 <DMA_CalcBaseAndBitshift+0x124>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d03b      	beq.n	8006b28 <DMA_CalcBaseAndBitshift+0xa8>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a3c      	ldr	r2, [pc, #240]	; (8006ba8 <DMA_CalcBaseAndBitshift+0x128>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d036      	beq.n	8006b28 <DMA_CalcBaseAndBitshift+0xa8>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a3b      	ldr	r2, [pc, #236]	; (8006bac <DMA_CalcBaseAndBitshift+0x12c>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d031      	beq.n	8006b28 <DMA_CalcBaseAndBitshift+0xa8>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a39      	ldr	r2, [pc, #228]	; (8006bb0 <DMA_CalcBaseAndBitshift+0x130>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d02c      	beq.n	8006b28 <DMA_CalcBaseAndBitshift+0xa8>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a38      	ldr	r2, [pc, #224]	; (8006bb4 <DMA_CalcBaseAndBitshift+0x134>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d027      	beq.n	8006b28 <DMA_CalcBaseAndBitshift+0xa8>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a36      	ldr	r2, [pc, #216]	; (8006bb8 <DMA_CalcBaseAndBitshift+0x138>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d022      	beq.n	8006b28 <DMA_CalcBaseAndBitshift+0xa8>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a35      	ldr	r2, [pc, #212]	; (8006bbc <DMA_CalcBaseAndBitshift+0x13c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d01d      	beq.n	8006b28 <DMA_CalcBaseAndBitshift+0xa8>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a33      	ldr	r2, [pc, #204]	; (8006bc0 <DMA_CalcBaseAndBitshift+0x140>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d018      	beq.n	8006b28 <DMA_CalcBaseAndBitshift+0xa8>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a32      	ldr	r2, [pc, #200]	; (8006bc4 <DMA_CalcBaseAndBitshift+0x144>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d013      	beq.n	8006b28 <DMA_CalcBaseAndBitshift+0xa8>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a30      	ldr	r2, [pc, #192]	; (8006bc8 <DMA_CalcBaseAndBitshift+0x148>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d00e      	beq.n	8006b28 <DMA_CalcBaseAndBitshift+0xa8>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a2f      	ldr	r2, [pc, #188]	; (8006bcc <DMA_CalcBaseAndBitshift+0x14c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d009      	beq.n	8006b28 <DMA_CalcBaseAndBitshift+0xa8>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a2d      	ldr	r2, [pc, #180]	; (8006bd0 <DMA_CalcBaseAndBitshift+0x150>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d004      	beq.n	8006b28 <DMA_CalcBaseAndBitshift+0xa8>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a2c      	ldr	r2, [pc, #176]	; (8006bd4 <DMA_CalcBaseAndBitshift+0x154>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d101      	bne.n	8006b2c <DMA_CalcBaseAndBitshift+0xac>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e000      	b.n	8006b2e <DMA_CalcBaseAndBitshift+0xae>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d024      	beq.n	8006b7c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	3b10      	subs	r3, #16
 8006b3a:	4a27      	ldr	r2, [pc, #156]	; (8006bd8 <DMA_CalcBaseAndBitshift+0x158>)
 8006b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b40:	091b      	lsrs	r3, r3, #4
 8006b42:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	4a24      	ldr	r2, [pc, #144]	; (8006bdc <DMA_CalcBaseAndBitshift+0x15c>)
 8006b4c:	5cd3      	ldrb	r3, [r2, r3]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d908      	bls.n	8006b6c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	4b1f      	ldr	r3, [pc, #124]	; (8006be0 <DMA_CalcBaseAndBitshift+0x160>)
 8006b62:	4013      	ands	r3, r2
 8006b64:	1d1a      	adds	r2, r3, #4
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	659a      	str	r2, [r3, #88]	; 0x58
 8006b6a:	e00d      	b.n	8006b88 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	461a      	mov	r2, r3
 8006b72:	4b1b      	ldr	r3, [pc, #108]	; (8006be0 <DMA_CalcBaseAndBitshift+0x160>)
 8006b74:	4013      	ands	r3, r2
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	6593      	str	r3, [r2, #88]	; 0x58
 8006b7a:	e005      	b.n	8006b88 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	40020010 	.word	0x40020010
 8006b9c:	40020028 	.word	0x40020028
 8006ba0:	40020040 	.word	0x40020040
 8006ba4:	40020058 	.word	0x40020058
 8006ba8:	40020070 	.word	0x40020070
 8006bac:	40020088 	.word	0x40020088
 8006bb0:	400200a0 	.word	0x400200a0
 8006bb4:	400200b8 	.word	0x400200b8
 8006bb8:	40020410 	.word	0x40020410
 8006bbc:	40020428 	.word	0x40020428
 8006bc0:	40020440 	.word	0x40020440
 8006bc4:	40020458 	.word	0x40020458
 8006bc8:	40020470 	.word	0x40020470
 8006bcc:	40020488 	.word	0x40020488
 8006bd0:	400204a0 	.word	0x400204a0
 8006bd4:	400204b8 	.word	0x400204b8
 8006bd8:	aaaaaaab 	.word	0xaaaaaaab
 8006bdc:	0800ee34 	.word	0x0800ee34
 8006be0:	fffffc00 	.word	0xfffffc00

08006be4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d120      	bne.n	8006c3a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfc:	2b03      	cmp	r3, #3
 8006bfe:	d858      	bhi.n	8006cb2 <DMA_CheckFifoParam+0xce>
 8006c00:	a201      	add	r2, pc, #4	; (adr r2, 8006c08 <DMA_CheckFifoParam+0x24>)
 8006c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c06:	bf00      	nop
 8006c08:	08006c19 	.word	0x08006c19
 8006c0c:	08006c2b 	.word	0x08006c2b
 8006c10:	08006c19 	.word	0x08006c19
 8006c14:	08006cb3 	.word	0x08006cb3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d048      	beq.n	8006cb6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c28:	e045      	b.n	8006cb6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006c32:	d142      	bne.n	8006cba <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c38:	e03f      	b.n	8006cba <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c42:	d123      	bne.n	8006c8c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	d838      	bhi.n	8006cbe <DMA_CheckFifoParam+0xda>
 8006c4c:	a201      	add	r2, pc, #4	; (adr r2, 8006c54 <DMA_CheckFifoParam+0x70>)
 8006c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c52:	bf00      	nop
 8006c54:	08006c65 	.word	0x08006c65
 8006c58:	08006c6b 	.word	0x08006c6b
 8006c5c:	08006c65 	.word	0x08006c65
 8006c60:	08006c7d 	.word	0x08006c7d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	73fb      	strb	r3, [r7, #15]
        break;
 8006c68:	e030      	b.n	8006ccc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d025      	beq.n	8006cc2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c7a:	e022      	b.n	8006cc2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006c84:	d11f      	bne.n	8006cc6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c8a:	e01c      	b.n	8006cc6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d902      	bls.n	8006c9a <DMA_CheckFifoParam+0xb6>
 8006c94:	2b03      	cmp	r3, #3
 8006c96:	d003      	beq.n	8006ca0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006c98:	e018      	b.n	8006ccc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	73fb      	strb	r3, [r7, #15]
        break;
 8006c9e:	e015      	b.n	8006ccc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00e      	beq.n	8006cca <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	73fb      	strb	r3, [r7, #15]
    break;
 8006cb0:	e00b      	b.n	8006cca <DMA_CheckFifoParam+0xe6>
        break;
 8006cb2:	bf00      	nop
 8006cb4:	e00a      	b.n	8006ccc <DMA_CheckFifoParam+0xe8>
        break;
 8006cb6:	bf00      	nop
 8006cb8:	e008      	b.n	8006ccc <DMA_CheckFifoParam+0xe8>
        break;
 8006cba:	bf00      	nop
 8006cbc:	e006      	b.n	8006ccc <DMA_CheckFifoParam+0xe8>
        break;
 8006cbe:	bf00      	nop
 8006cc0:	e004      	b.n	8006ccc <DMA_CheckFifoParam+0xe8>
        break;
 8006cc2:	bf00      	nop
 8006cc4:	e002      	b.n	8006ccc <DMA_CheckFifoParam+0xe8>
        break;
 8006cc6:	bf00      	nop
 8006cc8:	e000      	b.n	8006ccc <DMA_CheckFifoParam+0xe8>
    break;
 8006cca:	bf00      	nop
    }
  }

  return status;
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop

08006cdc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a38      	ldr	r2, [pc, #224]	; (8006dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d022      	beq.n	8006d3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a36      	ldr	r2, [pc, #216]	; (8006dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d01d      	beq.n	8006d3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a35      	ldr	r2, [pc, #212]	; (8006dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d018      	beq.n	8006d3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a33      	ldr	r2, [pc, #204]	; (8006ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d013      	beq.n	8006d3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a32      	ldr	r2, [pc, #200]	; (8006de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d00e      	beq.n	8006d3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a30      	ldr	r2, [pc, #192]	; (8006de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d009      	beq.n	8006d3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a2f      	ldr	r2, [pc, #188]	; (8006de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d004      	beq.n	8006d3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a2d      	ldr	r2, [pc, #180]	; (8006dec <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d101      	bne.n	8006d3e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e000      	b.n	8006d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d01a      	beq.n	8006d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	3b08      	subs	r3, #8
 8006d4c:	4a28      	ldr	r2, [pc, #160]	; (8006df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d52:	091b      	lsrs	r3, r3, #4
 8006d54:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	4b26      	ldr	r3, [pc, #152]	; (8006df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006d5a:	4413      	add	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	461a      	mov	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a24      	ldr	r2, [pc, #144]	; (8006df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006d68:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f003 031f 	and.w	r3, r3, #31
 8006d70:	2201      	movs	r2, #1
 8006d72:	409a      	lsls	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006d78:	e024      	b.n	8006dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	3b10      	subs	r3, #16
 8006d82:	4a1e      	ldr	r2, [pc, #120]	; (8006dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006d84:	fba2 2303 	umull	r2, r3, r2, r3
 8006d88:	091b      	lsrs	r3, r3, #4
 8006d8a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	4a1c      	ldr	r2, [pc, #112]	; (8006e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d806      	bhi.n	8006da2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	4a1b      	ldr	r2, [pc, #108]	; (8006e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d902      	bls.n	8006da2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	3308      	adds	r3, #8
 8006da0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	4b18      	ldr	r3, [pc, #96]	; (8006e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006da6:	4413      	add	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	461a      	mov	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a16      	ldr	r2, [pc, #88]	; (8006e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006db4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f003 031f 	and.w	r3, r3, #31
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	409a      	lsls	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006dc4:	bf00      	nop
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	58025408 	.word	0x58025408
 8006dd4:	5802541c 	.word	0x5802541c
 8006dd8:	58025430 	.word	0x58025430
 8006ddc:	58025444 	.word	0x58025444
 8006de0:	58025458 	.word	0x58025458
 8006de4:	5802546c 	.word	0x5802546c
 8006de8:	58025480 	.word	0x58025480
 8006dec:	58025494 	.word	0x58025494
 8006df0:	cccccccd 	.word	0xcccccccd
 8006df4:	16009600 	.word	0x16009600
 8006df8:	58025880 	.word	0x58025880
 8006dfc:	aaaaaaab 	.word	0xaaaaaaab
 8006e00:	400204b8 	.word	0x400204b8
 8006e04:	4002040f 	.word	0x4002040f
 8006e08:	10008200 	.word	0x10008200
 8006e0c:	40020880 	.word	0x40020880

08006e10 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d04a      	beq.n	8006ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d847      	bhi.n	8006ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a25      	ldr	r2, [pc, #148]	; (8006ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d022      	beq.n	8006e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a24      	ldr	r2, [pc, #144]	; (8006ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d01d      	beq.n	8006e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a22      	ldr	r2, [pc, #136]	; (8006ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d018      	beq.n	8006e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a21      	ldr	r2, [pc, #132]	; (8006ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d013      	beq.n	8006e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a1f      	ldr	r2, [pc, #124]	; (8006ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d00e      	beq.n	8006e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a1e      	ldr	r2, [pc, #120]	; (8006edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d009      	beq.n	8006e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a1c      	ldr	r2, [pc, #112]	; (8006ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d004      	beq.n	8006e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a1b      	ldr	r2, [pc, #108]	; (8006ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d101      	bne.n	8006e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e000      	b.n	8006e82 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006e80:	2300      	movs	r3, #0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00a      	beq.n	8006e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	4b17      	ldr	r3, [pc, #92]	; (8006ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006e8a:	4413      	add	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	461a      	mov	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a15      	ldr	r2, [pc, #84]	; (8006eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006e98:	671a      	str	r2, [r3, #112]	; 0x70
 8006e9a:	e009      	b.n	8006eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	4b14      	ldr	r3, [pc, #80]	; (8006ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006ea0:	4413      	add	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a11      	ldr	r2, [pc, #68]	; (8006ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006eae:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	409a      	lsls	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006ebc:	bf00      	nop
 8006ebe:	3714      	adds	r7, #20
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr
 8006ec8:	58025408 	.word	0x58025408
 8006ecc:	5802541c 	.word	0x5802541c
 8006ed0:	58025430 	.word	0x58025430
 8006ed4:	58025444 	.word	0x58025444
 8006ed8:	58025458 	.word	0x58025458
 8006edc:	5802546c 	.word	0x5802546c
 8006ee0:	58025480 	.word	0x58025480
 8006ee4:	58025494 	.word	0x58025494
 8006ee8:	1600963f 	.word	0x1600963f
 8006eec:	58025940 	.word	0x58025940
 8006ef0:	1000823f 	.word	0x1000823f
 8006ef4:	40020940 	.word	0x40020940

08006ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b089      	sub	sp, #36	; 0x24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006f02:	2300      	movs	r3, #0
 8006f04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006f06:	4b89      	ldr	r3, [pc, #548]	; (800712c <HAL_GPIO_Init+0x234>)
 8006f08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006f0a:	e194      	b.n	8007236 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	2101      	movs	r1, #1
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	fa01 f303 	lsl.w	r3, r1, r3
 8006f18:	4013      	ands	r3, r2
 8006f1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f000 8186 	beq.w	8007230 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f003 0303 	and.w	r3, r3, #3
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d005      	beq.n	8006f3c <HAL_GPIO_Init+0x44>
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f003 0303 	and.w	r3, r3, #3
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d130      	bne.n	8006f9e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	2203      	movs	r2, #3
 8006f48:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4c:	43db      	mvns	r3, r3
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	4013      	ands	r3, r2
 8006f52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	68da      	ldr	r2, [r3, #12]
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	005b      	lsls	r3, r3, #1
 8006f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f60:	69ba      	ldr	r2, [r7, #24]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f72:	2201      	movs	r2, #1
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7a:	43db      	mvns	r3, r3
 8006f7c:	69ba      	ldr	r2, [r7, #24]
 8006f7e:	4013      	ands	r3, r2
 8006f80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	091b      	lsrs	r3, r3, #4
 8006f88:	f003 0201 	and.w	r2, r3, #1
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f003 0303 	and.w	r3, r3, #3
 8006fa6:	2b03      	cmp	r3, #3
 8006fa8:	d017      	beq.n	8006fda <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	005b      	lsls	r3, r3, #1
 8006fb4:	2203      	movs	r2, #3
 8006fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fba:	43db      	mvns	r3, r3
 8006fbc:	69ba      	ldr	r2, [r7, #24]
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	689a      	ldr	r2, [r3, #8]
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	fa02 f303 	lsl.w	r3, r2, r3
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	69ba      	ldr	r2, [r7, #24]
 8006fd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f003 0303 	and.w	r3, r3, #3
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d123      	bne.n	800702e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	08da      	lsrs	r2, r3, #3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	3208      	adds	r2, #8
 8006fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	f003 0307 	and.w	r3, r3, #7
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	220f      	movs	r2, #15
 8006ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8007002:	43db      	mvns	r3, r3
 8007004:	69ba      	ldr	r2, [r7, #24]
 8007006:	4013      	ands	r3, r2
 8007008:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	691a      	ldr	r2, [r3, #16]
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	f003 0307 	and.w	r3, r3, #7
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	fa02 f303 	lsl.w	r3, r2, r3
 800701a:	69ba      	ldr	r2, [r7, #24]
 800701c:	4313      	orrs	r3, r2
 800701e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	08da      	lsrs	r2, r3, #3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	3208      	adds	r2, #8
 8007028:	69b9      	ldr	r1, [r7, #24]
 800702a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	005b      	lsls	r3, r3, #1
 8007038:	2203      	movs	r2, #3
 800703a:	fa02 f303 	lsl.w	r3, r2, r3
 800703e:	43db      	mvns	r3, r3
 8007040:	69ba      	ldr	r2, [r7, #24]
 8007042:	4013      	ands	r3, r2
 8007044:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f003 0203 	and.w	r2, r3, #3
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	005b      	lsls	r3, r3, #1
 8007052:	fa02 f303 	lsl.w	r3, r2, r3
 8007056:	69ba      	ldr	r2, [r7, #24]
 8007058:	4313      	orrs	r3, r2
 800705a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 80e0 	beq.w	8007230 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007070:	4b2f      	ldr	r3, [pc, #188]	; (8007130 <HAL_GPIO_Init+0x238>)
 8007072:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007076:	4a2e      	ldr	r2, [pc, #184]	; (8007130 <HAL_GPIO_Init+0x238>)
 8007078:	f043 0302 	orr.w	r3, r3, #2
 800707c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007080:	4b2b      	ldr	r3, [pc, #172]	; (8007130 <HAL_GPIO_Init+0x238>)
 8007082:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	60fb      	str	r3, [r7, #12]
 800708c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800708e:	4a29      	ldr	r2, [pc, #164]	; (8007134 <HAL_GPIO_Init+0x23c>)
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	089b      	lsrs	r3, r3, #2
 8007094:	3302      	adds	r3, #2
 8007096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800709a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	f003 0303 	and.w	r3, r3, #3
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	220f      	movs	r2, #15
 80070a6:	fa02 f303 	lsl.w	r3, r2, r3
 80070aa:	43db      	mvns	r3, r3
 80070ac:	69ba      	ldr	r2, [r7, #24]
 80070ae:	4013      	ands	r3, r2
 80070b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a20      	ldr	r2, [pc, #128]	; (8007138 <HAL_GPIO_Init+0x240>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d052      	beq.n	8007160 <HAL_GPIO_Init+0x268>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a1f      	ldr	r2, [pc, #124]	; (800713c <HAL_GPIO_Init+0x244>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d031      	beq.n	8007126 <HAL_GPIO_Init+0x22e>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a1e      	ldr	r2, [pc, #120]	; (8007140 <HAL_GPIO_Init+0x248>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d02b      	beq.n	8007122 <HAL_GPIO_Init+0x22a>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a1d      	ldr	r2, [pc, #116]	; (8007144 <HAL_GPIO_Init+0x24c>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d025      	beq.n	800711e <HAL_GPIO_Init+0x226>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a1c      	ldr	r2, [pc, #112]	; (8007148 <HAL_GPIO_Init+0x250>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d01f      	beq.n	800711a <HAL_GPIO_Init+0x222>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a1b      	ldr	r2, [pc, #108]	; (800714c <HAL_GPIO_Init+0x254>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d019      	beq.n	8007116 <HAL_GPIO_Init+0x21e>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a1a      	ldr	r2, [pc, #104]	; (8007150 <HAL_GPIO_Init+0x258>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d013      	beq.n	8007112 <HAL_GPIO_Init+0x21a>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a19      	ldr	r2, [pc, #100]	; (8007154 <HAL_GPIO_Init+0x25c>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d00d      	beq.n	800710e <HAL_GPIO_Init+0x216>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a18      	ldr	r2, [pc, #96]	; (8007158 <HAL_GPIO_Init+0x260>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d007      	beq.n	800710a <HAL_GPIO_Init+0x212>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a17      	ldr	r2, [pc, #92]	; (800715c <HAL_GPIO_Init+0x264>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d101      	bne.n	8007106 <HAL_GPIO_Init+0x20e>
 8007102:	2309      	movs	r3, #9
 8007104:	e02d      	b.n	8007162 <HAL_GPIO_Init+0x26a>
 8007106:	230a      	movs	r3, #10
 8007108:	e02b      	b.n	8007162 <HAL_GPIO_Init+0x26a>
 800710a:	2308      	movs	r3, #8
 800710c:	e029      	b.n	8007162 <HAL_GPIO_Init+0x26a>
 800710e:	2307      	movs	r3, #7
 8007110:	e027      	b.n	8007162 <HAL_GPIO_Init+0x26a>
 8007112:	2306      	movs	r3, #6
 8007114:	e025      	b.n	8007162 <HAL_GPIO_Init+0x26a>
 8007116:	2305      	movs	r3, #5
 8007118:	e023      	b.n	8007162 <HAL_GPIO_Init+0x26a>
 800711a:	2304      	movs	r3, #4
 800711c:	e021      	b.n	8007162 <HAL_GPIO_Init+0x26a>
 800711e:	2303      	movs	r3, #3
 8007120:	e01f      	b.n	8007162 <HAL_GPIO_Init+0x26a>
 8007122:	2302      	movs	r3, #2
 8007124:	e01d      	b.n	8007162 <HAL_GPIO_Init+0x26a>
 8007126:	2301      	movs	r3, #1
 8007128:	e01b      	b.n	8007162 <HAL_GPIO_Init+0x26a>
 800712a:	bf00      	nop
 800712c:	58000080 	.word	0x58000080
 8007130:	58024400 	.word	0x58024400
 8007134:	58000400 	.word	0x58000400
 8007138:	58020000 	.word	0x58020000
 800713c:	58020400 	.word	0x58020400
 8007140:	58020800 	.word	0x58020800
 8007144:	58020c00 	.word	0x58020c00
 8007148:	58021000 	.word	0x58021000
 800714c:	58021400 	.word	0x58021400
 8007150:	58021800 	.word	0x58021800
 8007154:	58021c00 	.word	0x58021c00
 8007158:	58022000 	.word	0x58022000
 800715c:	58022400 	.word	0x58022400
 8007160:	2300      	movs	r3, #0
 8007162:	69fa      	ldr	r2, [r7, #28]
 8007164:	f002 0203 	and.w	r2, r2, #3
 8007168:	0092      	lsls	r2, r2, #2
 800716a:	4093      	lsls	r3, r2
 800716c:	69ba      	ldr	r2, [r7, #24]
 800716e:	4313      	orrs	r3, r2
 8007170:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007172:	4938      	ldr	r1, [pc, #224]	; (8007254 <HAL_GPIO_Init+0x35c>)
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	089b      	lsrs	r3, r3, #2
 8007178:	3302      	adds	r3, #2
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	43db      	mvns	r3, r3
 800718c:	69ba      	ldr	r2, [r7, #24]
 800718e:	4013      	ands	r3, r2
 8007190:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d003      	beq.n	80071a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800719e:	69ba      	ldr	r2, [r7, #24]
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80071a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80071ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	43db      	mvns	r3, r3
 80071ba:	69ba      	ldr	r2, [r7, #24]
 80071bc:	4013      	ands	r3, r2
 80071be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d003      	beq.n	80071d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80071d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	43db      	mvns	r3, r3
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	4013      	ands	r3, r2
 80071ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d003      	beq.n	8007200 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80071f8:	69ba      	ldr	r2, [r7, #24]
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	43db      	mvns	r3, r3
 8007210:	69ba      	ldr	r2, [r7, #24]
 8007212:	4013      	ands	r3, r2
 8007214:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d003      	beq.n	800722a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	4313      	orrs	r3, r2
 8007228:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	3301      	adds	r3, #1
 8007234:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	fa22 f303 	lsr.w	r3, r2, r3
 8007240:	2b00      	cmp	r3, #0
 8007242:	f47f ae63 	bne.w	8006f0c <HAL_GPIO_Init+0x14>
  }
}
 8007246:	bf00      	nop
 8007248:	bf00      	nop
 800724a:	3724      	adds	r7, #36	; 0x24
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	58000400 	.word	0x58000400

08007258 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	460b      	mov	r3, r1
 8007262:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	691a      	ldr	r2, [r3, #16]
 8007268:	887b      	ldrh	r3, [r7, #2]
 800726a:	4013      	ands	r3, r2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d002      	beq.n	8007276 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007270:	2301      	movs	r3, #1
 8007272:	73fb      	strb	r3, [r7, #15]
 8007274:	e001      	b.n	800727a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007276:	2300      	movs	r3, #0
 8007278:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800727a:	7bfb      	ldrb	r3, [r7, #15]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	460b      	mov	r3, r1
 8007292:	807b      	strh	r3, [r7, #2]
 8007294:	4613      	mov	r3, r2
 8007296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007298:	787b      	ldrb	r3, [r7, #1]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800729e:	887a      	ldrh	r2, [r7, #2]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80072a4:	e003      	b.n	80072ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80072a6:	887b      	ldrh	r3, [r7, #2]
 80072a8:	041a      	lsls	r2, r3, #16
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	619a      	str	r2, [r3, #24]
}
 80072ae:	bf00      	nop
 80072b0:	370c      	adds	r7, #12
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
	...

080072bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e07f      	b.n	80073ce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d106      	bne.n	80072e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7fa fdfc 	bl	8001ee0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2224      	movs	r2, #36	; 0x24
 80072ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f022 0201 	bic.w	r2, r2, #1
 80072fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800730c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	689a      	ldr	r2, [r3, #8]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800731c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d107      	bne.n	8007336 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	689a      	ldr	r2, [r3, #8]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007332:	609a      	str	r2, [r3, #8]
 8007334:	e006      	b.n	8007344 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	689a      	ldr	r2, [r3, #8]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007342:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	2b02      	cmp	r3, #2
 800734a:	d104      	bne.n	8007356 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007354:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6859      	ldr	r1, [r3, #4]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	4b1d      	ldr	r3, [pc, #116]	; (80073d8 <HAL_I2C_Init+0x11c>)
 8007362:	430b      	orrs	r3, r1
 8007364:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68da      	ldr	r2, [r3, #12]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007374:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	691a      	ldr	r2, [r3, #16]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	430a      	orrs	r2, r1
 800738e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	69d9      	ldr	r1, [r3, #28]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a1a      	ldr	r2, [r3, #32]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	430a      	orrs	r2, r1
 800739e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f042 0201 	orr.w	r2, r2, #1
 80073ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2220      	movs	r2, #32
 80073ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	02008000 	.word	0x02008000

080073dc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b088      	sub	sp, #32
 80073e0:	af02      	add	r7, sp, #8
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	607a      	str	r2, [r7, #4]
 80073e6:	461a      	mov	r2, r3
 80073e8:	460b      	mov	r3, r1
 80073ea:	817b      	strh	r3, [r7, #10]
 80073ec:	4613      	mov	r3, r2
 80073ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b20      	cmp	r3, #32
 80073fa:	f040 80da 	bne.w	80075b2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007404:	2b01      	cmp	r3, #1
 8007406:	d101      	bne.n	800740c <HAL_I2C_Master_Transmit+0x30>
 8007408:	2302      	movs	r3, #2
 800740a:	e0d3      	b.n	80075b4 <HAL_I2C_Master_Transmit+0x1d8>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007414:	f7fb f940 	bl	8002698 <HAL_GetTick>
 8007418:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	2319      	movs	r3, #25
 8007420:	2201      	movs	r2, #1
 8007422:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f000 f9e6 	bl	80077f8 <I2C_WaitOnFlagUntilTimeout>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e0be      	b.n	80075b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2221      	movs	r2, #33	; 0x21
 800743a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2210      	movs	r2, #16
 8007442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	893a      	ldrh	r2, [r7, #8]
 8007456:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007462:	b29b      	uxth	r3, r3
 8007464:	2bff      	cmp	r3, #255	; 0xff
 8007466:	d90e      	bls.n	8007486 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	22ff      	movs	r2, #255	; 0xff
 800746c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007472:	b2da      	uxtb	r2, r3
 8007474:	8979      	ldrh	r1, [r7, #10]
 8007476:	4b51      	ldr	r3, [pc, #324]	; (80075bc <HAL_I2C_Master_Transmit+0x1e0>)
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f000 fbdc 	bl	8007c3c <I2C_TransferConfig>
 8007484:	e06c      	b.n	8007560 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800748a:	b29a      	uxth	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007494:	b2da      	uxtb	r2, r3
 8007496:	8979      	ldrh	r1, [r7, #10]
 8007498:	4b48      	ldr	r3, [pc, #288]	; (80075bc <HAL_I2C_Master_Transmit+0x1e0>)
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f000 fbcb 	bl	8007c3c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80074a6:	e05b      	b.n	8007560 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	6a39      	ldr	r1, [r7, #32]
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f000 f9e3 	bl	8007878 <I2C_WaitOnTXISFlagUntilTimeout>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e07b      	b.n	80075b4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	781a      	ldrb	r2, [r3, #0]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074cc:	1c5a      	adds	r2, r3, #1
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	3b01      	subs	r3, #1
 80074da:	b29a      	uxth	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074e4:	3b01      	subs	r3, #1
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d034      	beq.n	8007560 <HAL_I2C_Master_Transmit+0x184>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d130      	bne.n	8007560 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	2200      	movs	r2, #0
 8007506:	2180      	movs	r1, #128	; 0x80
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f000 f975 	bl	80077f8 <I2C_WaitOnFlagUntilTimeout>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d001      	beq.n	8007518 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e04d      	b.n	80075b4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800751c:	b29b      	uxth	r3, r3
 800751e:	2bff      	cmp	r3, #255	; 0xff
 8007520:	d90e      	bls.n	8007540 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	22ff      	movs	r2, #255	; 0xff
 8007526:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800752c:	b2da      	uxtb	r2, r3
 800752e:	8979      	ldrh	r1, [r7, #10]
 8007530:	2300      	movs	r3, #0
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f000 fb7f 	bl	8007c3c <I2C_TransferConfig>
 800753e:	e00f      	b.n	8007560 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007544:	b29a      	uxth	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800754e:	b2da      	uxtb	r2, r3
 8007550:	8979      	ldrh	r1, [r7, #10]
 8007552:	2300      	movs	r3, #0
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f000 fb6e 	bl	8007c3c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007564:	b29b      	uxth	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d19e      	bne.n	80074a8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	6a39      	ldr	r1, [r7, #32]
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f000 f9c2 	bl	80078f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e01a      	b.n	80075b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2220      	movs	r2, #32
 8007584:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6859      	ldr	r1, [r3, #4]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	4b0b      	ldr	r3, [pc, #44]	; (80075c0 <HAL_I2C_Master_Transmit+0x1e4>)
 8007592:	400b      	ands	r3, r1
 8007594:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2220      	movs	r2, #32
 800759a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	e000      	b.n	80075b4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80075b2:	2302      	movs	r3, #2
  }
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3718      	adds	r7, #24
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	80002000 	.word	0x80002000
 80075c0:	fe00e800 	.word	0xfe00e800

080075c4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b088      	sub	sp, #32
 80075c8:	af02      	add	r7, sp, #8
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	607a      	str	r2, [r7, #4]
 80075ce:	461a      	mov	r2, r3
 80075d0:	460b      	mov	r3, r1
 80075d2:	817b      	strh	r3, [r7, #10]
 80075d4:	4613      	mov	r3, r2
 80075d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b20      	cmp	r3, #32
 80075e2:	f040 80db 	bne.w	800779c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d101      	bne.n	80075f4 <HAL_I2C_Master_Receive+0x30>
 80075f0:	2302      	movs	r3, #2
 80075f2:	e0d4      	b.n	800779e <HAL_I2C_Master_Receive+0x1da>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80075fc:	f7fb f84c 	bl	8002698 <HAL_GetTick>
 8007600:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	2319      	movs	r3, #25
 8007608:	2201      	movs	r2, #1
 800760a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f000 f8f2 	bl	80077f8 <I2C_WaitOnFlagUntilTimeout>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d001      	beq.n	800761e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e0bf      	b.n	800779e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2222      	movs	r2, #34	; 0x22
 8007622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2210      	movs	r2, #16
 800762a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	893a      	ldrh	r2, [r7, #8]
 800763e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800764a:	b29b      	uxth	r3, r3
 800764c:	2bff      	cmp	r3, #255	; 0xff
 800764e:	d90e      	bls.n	800766e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	22ff      	movs	r2, #255	; 0xff
 8007654:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800765a:	b2da      	uxtb	r2, r3
 800765c:	8979      	ldrh	r1, [r7, #10]
 800765e:	4b52      	ldr	r3, [pc, #328]	; (80077a8 <HAL_I2C_Master_Receive+0x1e4>)
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f000 fae8 	bl	8007c3c <I2C_TransferConfig>
 800766c:	e06d      	b.n	800774a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007672:	b29a      	uxth	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800767c:	b2da      	uxtb	r2, r3
 800767e:	8979      	ldrh	r1, [r7, #10]
 8007680:	4b49      	ldr	r3, [pc, #292]	; (80077a8 <HAL_I2C_Master_Receive+0x1e4>)
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f000 fad7 	bl	8007c3c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800768e:	e05c      	b.n	800774a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	6a39      	ldr	r1, [r7, #32]
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 f96b 	bl	8007970 <I2C_WaitOnRXNEFlagUntilTimeout>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e07c      	b.n	800779e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ae:	b2d2      	uxtb	r2, r2
 80076b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b6:	1c5a      	adds	r2, r3, #1
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076c0:	3b01      	subs	r3, #1
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	3b01      	subs	r3, #1
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076da:	b29b      	uxth	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d034      	beq.n	800774a <HAL_I2C_Master_Receive+0x186>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d130      	bne.n	800774a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	6a3b      	ldr	r3, [r7, #32]
 80076ee:	2200      	movs	r2, #0
 80076f0:	2180      	movs	r1, #128	; 0x80
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 f880 	bl	80077f8 <I2C_WaitOnFlagUntilTimeout>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d001      	beq.n	8007702 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e04d      	b.n	800779e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007706:	b29b      	uxth	r3, r3
 8007708:	2bff      	cmp	r3, #255	; 0xff
 800770a:	d90e      	bls.n	800772a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	22ff      	movs	r2, #255	; 0xff
 8007710:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007716:	b2da      	uxtb	r2, r3
 8007718:	8979      	ldrh	r1, [r7, #10]
 800771a:	2300      	movs	r3, #0
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f000 fa8a 	bl	8007c3c <I2C_TransferConfig>
 8007728:	e00f      	b.n	800774a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800772e:	b29a      	uxth	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007738:	b2da      	uxtb	r2, r3
 800773a:	8979      	ldrh	r1, [r7, #10]
 800773c:	2300      	movs	r3, #0
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f000 fa79 	bl	8007c3c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800774e:	b29b      	uxth	r3, r3
 8007750:	2b00      	cmp	r3, #0
 8007752:	d19d      	bne.n	8007690 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	6a39      	ldr	r1, [r7, #32]
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 f8cd 	bl	80078f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e01a      	b.n	800779e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2220      	movs	r2, #32
 800776e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6859      	ldr	r1, [r3, #4]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	4b0c      	ldr	r3, [pc, #48]	; (80077ac <HAL_I2C_Master_Receive+0x1e8>)
 800777c:	400b      	ands	r3, r1
 800777e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2220      	movs	r2, #32
 8007784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007798:	2300      	movs	r3, #0
 800779a:	e000      	b.n	800779e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800779c:	2302      	movs	r3, #2
  }
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3718      	adds	r7, #24
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	80002400 	.word	0x80002400
 80077ac:	fe00e800 	.word	0xfe00e800

080077b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d103      	bne.n	80077ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2200      	movs	r2, #0
 80077cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d007      	beq.n	80077ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	699a      	ldr	r2, [r3, #24]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f042 0201 	orr.w	r2, r2, #1
 80077ea:	619a      	str	r2, [r3, #24]
  }
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	603b      	str	r3, [r7, #0]
 8007804:	4613      	mov	r3, r2
 8007806:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007808:	e022      	b.n	8007850 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007810:	d01e      	beq.n	8007850 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007812:	f7fa ff41 	bl	8002698 <HAL_GetTick>
 8007816:	4602      	mov	r2, r0
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	683a      	ldr	r2, [r7, #0]
 800781e:	429a      	cmp	r2, r3
 8007820:	d302      	bcc.n	8007828 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d113      	bne.n	8007850 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800782c:	f043 0220 	orr.w	r2, r3, #32
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2220      	movs	r2, #32
 8007838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	e00f      	b.n	8007870 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	699a      	ldr	r2, [r3, #24]
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	4013      	ands	r3, r2
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	429a      	cmp	r2, r3
 800785e:	bf0c      	ite	eq
 8007860:	2301      	moveq	r3, #1
 8007862:	2300      	movne	r3, #0
 8007864:	b2db      	uxtb	r3, r3
 8007866:	461a      	mov	r2, r3
 8007868:	79fb      	ldrb	r3, [r7, #7]
 800786a:	429a      	cmp	r2, r3
 800786c:	d0cd      	beq.n	800780a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007884:	e02c      	b.n	80078e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	68b9      	ldr	r1, [r7, #8]
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 f8ea 	bl	8007a64 <I2C_IsErrorOccurred>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e02a      	b.n	80078f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078a0:	d01e      	beq.n	80078e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078a2:	f7fa fef9 	bl	8002698 <HAL_GetTick>
 80078a6:	4602      	mov	r2, r0
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d302      	bcc.n	80078b8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d113      	bne.n	80078e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078bc:	f043 0220 	orr.w	r2, r3, #32
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2220      	movs	r2, #32
 80078c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e007      	b.n	80078f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	f003 0302 	and.w	r3, r3, #2
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d1cb      	bne.n	8007886 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007904:	e028      	b.n	8007958 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	68b9      	ldr	r1, [r7, #8]
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f000 f8aa 	bl	8007a64 <I2C_IsErrorOccurred>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d001      	beq.n	800791a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e026      	b.n	8007968 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800791a:	f7fa febd 	bl	8002698 <HAL_GetTick>
 800791e:	4602      	mov	r2, r0
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	429a      	cmp	r2, r3
 8007928:	d302      	bcc.n	8007930 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d113      	bne.n	8007958 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007934:	f043 0220 	orr.w	r2, r3, #32
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2220      	movs	r2, #32
 8007940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	e007      	b.n	8007968 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	f003 0320 	and.w	r3, r3, #32
 8007962:	2b20      	cmp	r3, #32
 8007964:	d1cf      	bne.n	8007906 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3710      	adds	r7, #16
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800797c:	e064      	b.n	8007a48 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	68b9      	ldr	r1, [r7, #8]
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 f86e 	bl	8007a64 <I2C_IsErrorOccurred>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e062      	b.n	8007a58 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	f003 0320 	and.w	r3, r3, #32
 800799c:	2b20      	cmp	r3, #32
 800799e:	d138      	bne.n	8007a12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	f003 0304 	and.w	r3, r3, #4
 80079aa:	2b04      	cmp	r3, #4
 80079ac:	d105      	bne.n	80079ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	e04e      	b.n	8007a58 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	f003 0310 	and.w	r3, r3, #16
 80079c4:	2b10      	cmp	r3, #16
 80079c6:	d107      	bne.n	80079d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2210      	movs	r2, #16
 80079ce:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2204      	movs	r2, #4
 80079d4:	645a      	str	r2, [r3, #68]	; 0x44
 80079d6:	e002      	b.n	80079de <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2220      	movs	r2, #32
 80079e4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	6859      	ldr	r1, [r3, #4]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	4b1b      	ldr	r3, [pc, #108]	; (8007a60 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80079f2:	400b      	ands	r3, r1
 80079f4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2220      	movs	r2, #32
 80079fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e022      	b.n	8007a58 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a12:	f7fa fe41 	bl	8002698 <HAL_GetTick>
 8007a16:	4602      	mov	r2, r0
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d302      	bcc.n	8007a28 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10f      	bne.n	8007a48 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a2c:	f043 0220 	orr.w	r2, r3, #32
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2220      	movs	r2, #32
 8007a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e007      	b.n	8007a58 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	f003 0304 	and.w	r3, r3, #4
 8007a52:	2b04      	cmp	r3, #4
 8007a54:	d193      	bne.n	800797e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	fe00e800 	.word	0xfe00e800

08007a64 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b08a      	sub	sp, #40	; 0x28
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a70:	2300      	movs	r3, #0
 8007a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	f003 0310 	and.w	r3, r3, #16
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d075      	beq.n	8007b7c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2210      	movs	r2, #16
 8007a96:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007a98:	e056      	b.n	8007b48 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007aa0:	d052      	beq.n	8007b48 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007aa2:	f7fa fdf9 	bl	8002698 <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d302      	bcc.n	8007ab8 <I2C_IsErrorOccurred+0x54>
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d147      	bne.n	8007b48 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ac2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007aca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	699b      	ldr	r3, [r3, #24]
 8007ad2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ada:	d12e      	bne.n	8007b3a <I2C_IsErrorOccurred+0xd6>
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ae2:	d02a      	beq.n	8007b3a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007ae4:	7cfb      	ldrb	r3, [r7, #19]
 8007ae6:	2b20      	cmp	r3, #32
 8007ae8:	d027      	beq.n	8007b3a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007af8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007afa:	f7fa fdcd 	bl	8002698 <HAL_GetTick>
 8007afe:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b00:	e01b      	b.n	8007b3a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007b02:	f7fa fdc9 	bl	8002698 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	2b19      	cmp	r3, #25
 8007b0e:	d914      	bls.n	8007b3a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b14:	f043 0220 	orr.w	r2, r3, #32
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2220      	movs	r2, #32
 8007b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	f003 0320 	and.w	r3, r3, #32
 8007b44:	2b20      	cmp	r3, #32
 8007b46:	d1dc      	bne.n	8007b02 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	f003 0320 	and.w	r3, r3, #32
 8007b52:	2b20      	cmp	r3, #32
 8007b54:	d003      	beq.n	8007b5e <I2C_IsErrorOccurred+0xfa>
 8007b56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d09d      	beq.n	8007a9a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d103      	bne.n	8007b6e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2220      	movs	r2, #32
 8007b6c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007b6e:	6a3b      	ldr	r3, [r7, #32]
 8007b70:	f043 0304 	orr.w	r3, r3, #4
 8007b74:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00b      	beq.n	8007ba6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	f043 0301 	orr.w	r3, r3, #1
 8007b94:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00b      	beq.n	8007bc8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007bb0:	6a3b      	ldr	r3, [r7, #32]
 8007bb2:	f043 0308 	orr.w	r3, r3, #8
 8007bb6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007bc0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00b      	beq.n	8007bea <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007bd2:	6a3b      	ldr	r3, [r7, #32]
 8007bd4:	f043 0302 	orr.w	r3, r3, #2
 8007bd8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007be2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007bea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d01c      	beq.n	8007c2c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f7ff fddc 	bl	80077b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6859      	ldr	r1, [r3, #4]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	4b0d      	ldr	r3, [pc, #52]	; (8007c38 <I2C_IsErrorOccurred+0x1d4>)
 8007c04:	400b      	ands	r3, r1
 8007c06:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c0c:	6a3b      	ldr	r3, [r7, #32]
 8007c0e:	431a      	orrs	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2220      	movs	r2, #32
 8007c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3728      	adds	r7, #40	; 0x28
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	fe00e800 	.word	0xfe00e800

08007c3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b087      	sub	sp, #28
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	607b      	str	r3, [r7, #4]
 8007c46:	460b      	mov	r3, r1
 8007c48:	817b      	strh	r3, [r7, #10]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c4e:	897b      	ldrh	r3, [r7, #10]
 8007c50:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007c54:	7a7b      	ldrb	r3, [r7, #9]
 8007c56:	041b      	lsls	r3, r3, #16
 8007c58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c5c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c62:	6a3b      	ldr	r3, [r7, #32]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c6a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	6a3b      	ldr	r3, [r7, #32]
 8007c74:	0d5b      	lsrs	r3, r3, #21
 8007c76:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007c7a:	4b08      	ldr	r3, [pc, #32]	; (8007c9c <I2C_TransferConfig+0x60>)
 8007c7c:	430b      	orrs	r3, r1
 8007c7e:	43db      	mvns	r3, r3
 8007c80:	ea02 0103 	and.w	r1, r2, r3
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	430a      	orrs	r2, r1
 8007c8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007c8e:	bf00      	nop
 8007c90:	371c      	adds	r7, #28
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	03ff63ff 	.word	0x03ff63ff

08007ca0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b20      	cmp	r3, #32
 8007cb4:	d138      	bne.n	8007d28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d101      	bne.n	8007cc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	e032      	b.n	8007d2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2224      	movs	r2, #36	; 0x24
 8007cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f022 0201 	bic.w	r2, r2, #1
 8007ce2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007cf2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6819      	ldr	r1, [r3, #0]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	683a      	ldr	r2, [r7, #0]
 8007d00:	430a      	orrs	r2, r1
 8007d02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f042 0201 	orr.w	r2, r2, #1
 8007d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2220      	movs	r2, #32
 8007d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	e000      	b.n	8007d2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d28:	2302      	movs	r3, #2
  }
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b085      	sub	sp, #20
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	2b20      	cmp	r3, #32
 8007d4a:	d139      	bne.n	8007dc0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d101      	bne.n	8007d5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007d56:	2302      	movs	r3, #2
 8007d58:	e033      	b.n	8007dc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2224      	movs	r2, #36	; 0x24
 8007d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f022 0201 	bic.w	r2, r2, #1
 8007d78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007d88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	021b      	lsls	r3, r3, #8
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f042 0201 	orr.w	r2, r2, #1
 8007daa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2220      	movs	r2, #32
 8007db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	e000      	b.n	8007dc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007dc0:	2302      	movs	r3, #2
  }
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3714      	adds	r7, #20
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
	...

08007dd0 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8007ddc:	4b18      	ldr	r3, [pc, #96]	; (8007e40 <HAL_PWR_EnterSTOPMode+0x70>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f023 0201 	bic.w	r2, r3, #1
 8007de4:	4916      	ldr	r1, [pc, #88]	; (8007e40 <HAL_PWR_EnterSTOPMode+0x70>)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8007dec:	4b14      	ldr	r3, [pc, #80]	; (8007e40 <HAL_PWR_EnterSTOPMode+0x70>)
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	4a13      	ldr	r2, [pc, #76]	; (8007e40 <HAL_PWR_EnterSTOPMode+0x70>)
 8007df2:	f023 0305 	bic.w	r3, r3, #5
 8007df6:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8007df8:	4b11      	ldr	r3, [pc, #68]	; (8007e40 <HAL_PWR_EnterSTOPMode+0x70>)
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	4a10      	ldr	r2, [pc, #64]	; (8007e40 <HAL_PWR_EnterSTOPMode+0x70>)
 8007dfe:	f023 0302 	bic.w	r3, r3, #2
 8007e02:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8007e04:	4b0f      	ldr	r3, [pc, #60]	; (8007e44 <HAL_PWR_EnterSTOPMode+0x74>)
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	4a0e      	ldr	r2, [pc, #56]	; (8007e44 <HAL_PWR_EnterSTOPMode+0x74>)
 8007e0a:	f043 0304 	orr.w	r3, r3, #4
 8007e0e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8007e10:	f3bf 8f4f 	dsb	sy
}
 8007e14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007e16:	f3bf 8f6f 	isb	sy
}
 8007e1a:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8007e1c:	78fb      	ldrb	r3, [r7, #3]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d101      	bne.n	8007e26 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8007e22:	bf30      	wfi
 8007e24:	e000      	b.n	8007e28 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8007e26:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8007e28:	4b06      	ldr	r3, [pc, #24]	; (8007e44 <HAL_PWR_EnterSTOPMode+0x74>)
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	4a05      	ldr	r2, [pc, #20]	; (8007e44 <HAL_PWR_EnterSTOPMode+0x74>)
 8007e2e:	f023 0304 	bic.w	r3, r3, #4
 8007e32:	6113      	str	r3, [r2, #16]
}
 8007e34:	bf00      	nop
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	58024800 	.word	0x58024800
 8007e44:	e000ed00 	.word	0xe000ed00

08007e48 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007e50:	4b19      	ldr	r3, [pc, #100]	; (8007eb8 <HAL_PWREx_ConfigSupply+0x70>)
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	f003 0304 	and.w	r3, r3, #4
 8007e58:	2b04      	cmp	r3, #4
 8007e5a:	d00a      	beq.n	8007e72 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007e5c:	4b16      	ldr	r3, [pc, #88]	; (8007eb8 <HAL_PWREx_ConfigSupply+0x70>)
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	f003 0307 	and.w	r3, r3, #7
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d001      	beq.n	8007e6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e01f      	b.n	8007eae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	e01d      	b.n	8007eae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007e72:	4b11      	ldr	r3, [pc, #68]	; (8007eb8 <HAL_PWREx_ConfigSupply+0x70>)
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	f023 0207 	bic.w	r2, r3, #7
 8007e7a:	490f      	ldr	r1, [pc, #60]	; (8007eb8 <HAL_PWREx_ConfigSupply+0x70>)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007e82:	f7fa fc09 	bl	8002698 <HAL_GetTick>
 8007e86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007e88:	e009      	b.n	8007e9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007e8a:	f7fa fc05 	bl	8002698 <HAL_GetTick>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e98:	d901      	bls.n	8007e9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e007      	b.n	8007eae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007e9e:	4b06      	ldr	r3, [pc, #24]	; (8007eb8 <HAL_PWREx_ConfigSupply+0x70>)
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eaa:	d1ee      	bne.n	8007e8a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	58024800 	.word	0x58024800

08007ebc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b08c      	sub	sp, #48	; 0x30
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d102      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	f000 bc1d 	b.w	800870a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f000 8087 	beq.w	8007fec <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ede:	4b99      	ldr	r3, [pc, #612]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ee8:	4b96      	ldr	r3, [pc, #600]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8007eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef0:	2b10      	cmp	r3, #16
 8007ef2:	d007      	beq.n	8007f04 <HAL_RCC_OscConfig+0x48>
 8007ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef6:	2b18      	cmp	r3, #24
 8007ef8:	d110      	bne.n	8007f1c <HAL_RCC_OscConfig+0x60>
 8007efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efc:	f003 0303 	and.w	r3, r3, #3
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d10b      	bne.n	8007f1c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f04:	4b8f      	ldr	r3, [pc, #572]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d06c      	beq.n	8007fea <HAL_RCC_OscConfig+0x12e>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d168      	bne.n	8007fea <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e3f6      	b.n	800870a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f24:	d106      	bne.n	8007f34 <HAL_RCC_OscConfig+0x78>
 8007f26:	4b87      	ldr	r3, [pc, #540]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a86      	ldr	r2, [pc, #536]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8007f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f30:	6013      	str	r3, [r2, #0]
 8007f32:	e02e      	b.n	8007f92 <HAL_RCC_OscConfig+0xd6>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10c      	bne.n	8007f56 <HAL_RCC_OscConfig+0x9a>
 8007f3c:	4b81      	ldr	r3, [pc, #516]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a80      	ldr	r2, [pc, #512]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8007f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f46:	6013      	str	r3, [r2, #0]
 8007f48:	4b7e      	ldr	r3, [pc, #504]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a7d      	ldr	r2, [pc, #500]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8007f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f52:	6013      	str	r3, [r2, #0]
 8007f54:	e01d      	b.n	8007f92 <HAL_RCC_OscConfig+0xd6>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f5e:	d10c      	bne.n	8007f7a <HAL_RCC_OscConfig+0xbe>
 8007f60:	4b78      	ldr	r3, [pc, #480]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a77      	ldr	r2, [pc, #476]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8007f66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f6a:	6013      	str	r3, [r2, #0]
 8007f6c:	4b75      	ldr	r3, [pc, #468]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a74      	ldr	r2, [pc, #464]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8007f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f76:	6013      	str	r3, [r2, #0]
 8007f78:	e00b      	b.n	8007f92 <HAL_RCC_OscConfig+0xd6>
 8007f7a:	4b72      	ldr	r3, [pc, #456]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a71      	ldr	r2, [pc, #452]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8007f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f84:	6013      	str	r3, [r2, #0]
 8007f86:	4b6f      	ldr	r3, [pc, #444]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a6e      	ldr	r2, [pc, #440]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8007f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f90:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d013      	beq.n	8007fc2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f9a:	f7fa fb7d 	bl	8002698 <HAL_GetTick>
 8007f9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007fa0:	e008      	b.n	8007fb4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007fa2:	f7fa fb79 	bl	8002698 <HAL_GetTick>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	2b64      	cmp	r3, #100	; 0x64
 8007fae:	d901      	bls.n	8007fb4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e3aa      	b.n	800870a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007fb4:	4b63      	ldr	r3, [pc, #396]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d0f0      	beq.n	8007fa2 <HAL_RCC_OscConfig+0xe6>
 8007fc0:	e014      	b.n	8007fec <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fc2:	f7fa fb69 	bl	8002698 <HAL_GetTick>
 8007fc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007fc8:	e008      	b.n	8007fdc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007fca:	f7fa fb65 	bl	8002698 <HAL_GetTick>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	2b64      	cmp	r3, #100	; 0x64
 8007fd6:	d901      	bls.n	8007fdc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e396      	b.n	800870a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007fdc:	4b59      	ldr	r3, [pc, #356]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d1f0      	bne.n	8007fca <HAL_RCC_OscConfig+0x10e>
 8007fe8:	e000      	b.n	8007fec <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0302 	and.w	r3, r3, #2
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f000 80cb 	beq.w	8008190 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ffa:	4b52      	ldr	r3, [pc, #328]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008002:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008004:	4b4f      	ldr	r3, [pc, #316]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8008006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008008:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800800a:	6a3b      	ldr	r3, [r7, #32]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d007      	beq.n	8008020 <HAL_RCC_OscConfig+0x164>
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	2b18      	cmp	r3, #24
 8008014:	d156      	bne.n	80080c4 <HAL_RCC_OscConfig+0x208>
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	f003 0303 	and.w	r3, r3, #3
 800801c:	2b00      	cmp	r3, #0
 800801e:	d151      	bne.n	80080c4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008020:	4b48      	ldr	r3, [pc, #288]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0304 	and.w	r3, r3, #4
 8008028:	2b00      	cmp	r3, #0
 800802a:	d005      	beq.n	8008038 <HAL_RCC_OscConfig+0x17c>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d101      	bne.n	8008038 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e368      	b.n	800870a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008038:	4b42      	ldr	r3, [pc, #264]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f023 0219 	bic.w	r2, r3, #25
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	493f      	ldr	r1, [pc, #252]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8008046:	4313      	orrs	r3, r2
 8008048:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800804a:	f7fa fb25 	bl	8002698 <HAL_GetTick>
 800804e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008050:	e008      	b.n	8008064 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008052:	f7fa fb21 	bl	8002698 <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	2b02      	cmp	r3, #2
 800805e:	d901      	bls.n	8008064 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e352      	b.n	800870a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008064:	4b37      	ldr	r3, [pc, #220]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 0304 	and.w	r3, r3, #4
 800806c:	2b00      	cmp	r3, #0
 800806e:	d0f0      	beq.n	8008052 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008070:	f7fa fb52 	bl	8002718 <HAL_GetREVID>
 8008074:	4603      	mov	r3, r0
 8008076:	f241 0203 	movw	r2, #4099	; 0x1003
 800807a:	4293      	cmp	r3, r2
 800807c:	d817      	bhi.n	80080ae <HAL_RCC_OscConfig+0x1f2>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	2b40      	cmp	r3, #64	; 0x40
 8008084:	d108      	bne.n	8008098 <HAL_RCC_OscConfig+0x1dc>
 8008086:	4b2f      	ldr	r3, [pc, #188]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800808e:	4a2d      	ldr	r2, [pc, #180]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8008090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008094:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008096:	e07b      	b.n	8008190 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008098:	4b2a      	ldr	r3, [pc, #168]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	031b      	lsls	r3, r3, #12
 80080a6:	4927      	ldr	r1, [pc, #156]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 80080a8:	4313      	orrs	r3, r2
 80080aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080ac:	e070      	b.n	8008190 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080ae:	4b25      	ldr	r3, [pc, #148]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	061b      	lsls	r3, r3, #24
 80080bc:	4921      	ldr	r1, [pc, #132]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 80080be:	4313      	orrs	r3, r2
 80080c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080c2:	e065      	b.n	8008190 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d048      	beq.n	800815e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80080cc:	4b1d      	ldr	r3, [pc, #116]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f023 0219 	bic.w	r2, r3, #25
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	491a      	ldr	r1, [pc, #104]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 80080da:	4313      	orrs	r3, r2
 80080dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080de:	f7fa fadb 	bl	8002698 <HAL_GetTick>
 80080e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080e4:	e008      	b.n	80080f8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080e6:	f7fa fad7 	bl	8002698 <HAL_GetTick>
 80080ea:	4602      	mov	r2, r0
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d901      	bls.n	80080f8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80080f4:	2303      	movs	r3, #3
 80080f6:	e308      	b.n	800870a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080f8:	4b12      	ldr	r3, [pc, #72]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0304 	and.w	r3, r3, #4
 8008100:	2b00      	cmp	r3, #0
 8008102:	d0f0      	beq.n	80080e6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008104:	f7fa fb08 	bl	8002718 <HAL_GetREVID>
 8008108:	4603      	mov	r3, r0
 800810a:	f241 0203 	movw	r2, #4099	; 0x1003
 800810e:	4293      	cmp	r3, r2
 8008110:	d81a      	bhi.n	8008148 <HAL_RCC_OscConfig+0x28c>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	2b40      	cmp	r3, #64	; 0x40
 8008118:	d108      	bne.n	800812c <HAL_RCC_OscConfig+0x270>
 800811a:	4b0a      	ldr	r3, [pc, #40]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008122:	4a08      	ldr	r2, [pc, #32]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 8008124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008128:	6053      	str	r3, [r2, #4]
 800812a:	e031      	b.n	8008190 <HAL_RCC_OscConfig+0x2d4>
 800812c:	4b05      	ldr	r3, [pc, #20]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	031b      	lsls	r3, r3, #12
 800813a:	4902      	ldr	r1, [pc, #8]	; (8008144 <HAL_RCC_OscConfig+0x288>)
 800813c:	4313      	orrs	r3, r2
 800813e:	604b      	str	r3, [r1, #4]
 8008140:	e026      	b.n	8008190 <HAL_RCC_OscConfig+0x2d4>
 8008142:	bf00      	nop
 8008144:	58024400 	.word	0x58024400
 8008148:	4b9a      	ldr	r3, [pc, #616]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	061b      	lsls	r3, r3, #24
 8008156:	4997      	ldr	r1, [pc, #604]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 8008158:	4313      	orrs	r3, r2
 800815a:	604b      	str	r3, [r1, #4]
 800815c:	e018      	b.n	8008190 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800815e:	4b95      	ldr	r3, [pc, #596]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a94      	ldr	r2, [pc, #592]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 8008164:	f023 0301 	bic.w	r3, r3, #1
 8008168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800816a:	f7fa fa95 	bl	8002698 <HAL_GetTick>
 800816e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008170:	e008      	b.n	8008184 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008172:	f7fa fa91 	bl	8002698 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	2b02      	cmp	r3, #2
 800817e:	d901      	bls.n	8008184 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e2c2      	b.n	800870a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008184:	4b8b      	ldr	r3, [pc, #556]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0304 	and.w	r3, r3, #4
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1f0      	bne.n	8008172 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0310 	and.w	r3, r3, #16
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 80a9 	beq.w	80082f0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800819e:	4b85      	ldr	r3, [pc, #532]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80081a8:	4b82      	ldr	r3, [pc, #520]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 80081aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	2b08      	cmp	r3, #8
 80081b2:	d007      	beq.n	80081c4 <HAL_RCC_OscConfig+0x308>
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	2b18      	cmp	r3, #24
 80081b8:	d13a      	bne.n	8008230 <HAL_RCC_OscConfig+0x374>
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f003 0303 	and.w	r3, r3, #3
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d135      	bne.n	8008230 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80081c4:	4b7b      	ldr	r3, [pc, #492]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d005      	beq.n	80081dc <HAL_RCC_OscConfig+0x320>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	69db      	ldr	r3, [r3, #28]
 80081d4:	2b80      	cmp	r3, #128	; 0x80
 80081d6:	d001      	beq.n	80081dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	e296      	b.n	800870a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80081dc:	f7fa fa9c 	bl	8002718 <HAL_GetREVID>
 80081e0:	4603      	mov	r3, r0
 80081e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d817      	bhi.n	800821a <HAL_RCC_OscConfig+0x35e>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6a1b      	ldr	r3, [r3, #32]
 80081ee:	2b20      	cmp	r3, #32
 80081f0:	d108      	bne.n	8008204 <HAL_RCC_OscConfig+0x348>
 80081f2:	4b70      	ldr	r3, [pc, #448]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80081fa:	4a6e      	ldr	r2, [pc, #440]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 80081fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008200:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008202:	e075      	b.n	80082f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008204:	4b6b      	ldr	r3, [pc, #428]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a1b      	ldr	r3, [r3, #32]
 8008210:	069b      	lsls	r3, r3, #26
 8008212:	4968      	ldr	r1, [pc, #416]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 8008214:	4313      	orrs	r3, r2
 8008216:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008218:	e06a      	b.n	80082f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800821a:	4b66      	ldr	r3, [pc, #408]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a1b      	ldr	r3, [r3, #32]
 8008226:	061b      	lsls	r3, r3, #24
 8008228:	4962      	ldr	r1, [pc, #392]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 800822a:	4313      	orrs	r3, r2
 800822c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800822e:	e05f      	b.n	80082f0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	69db      	ldr	r3, [r3, #28]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d042      	beq.n	80082be <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008238:	4b5e      	ldr	r3, [pc, #376]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a5d      	ldr	r2, [pc, #372]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 800823e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008244:	f7fa fa28 	bl	8002698 <HAL_GetTick>
 8008248:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800824a:	e008      	b.n	800825e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800824c:	f7fa fa24 	bl	8002698 <HAL_GetTick>
 8008250:	4602      	mov	r2, r0
 8008252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	2b02      	cmp	r3, #2
 8008258:	d901      	bls.n	800825e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	e255      	b.n	800870a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800825e:	4b55      	ldr	r3, [pc, #340]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008266:	2b00      	cmp	r3, #0
 8008268:	d0f0      	beq.n	800824c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800826a:	f7fa fa55 	bl	8002718 <HAL_GetREVID>
 800826e:	4603      	mov	r3, r0
 8008270:	f241 0203 	movw	r2, #4099	; 0x1003
 8008274:	4293      	cmp	r3, r2
 8008276:	d817      	bhi.n	80082a8 <HAL_RCC_OscConfig+0x3ec>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a1b      	ldr	r3, [r3, #32]
 800827c:	2b20      	cmp	r3, #32
 800827e:	d108      	bne.n	8008292 <HAL_RCC_OscConfig+0x3d6>
 8008280:	4b4c      	ldr	r3, [pc, #304]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008288:	4a4a      	ldr	r2, [pc, #296]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 800828a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800828e:	6053      	str	r3, [r2, #4]
 8008290:	e02e      	b.n	80082f0 <HAL_RCC_OscConfig+0x434>
 8008292:	4b48      	ldr	r3, [pc, #288]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	069b      	lsls	r3, r3, #26
 80082a0:	4944      	ldr	r1, [pc, #272]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	604b      	str	r3, [r1, #4]
 80082a6:	e023      	b.n	80082f0 <HAL_RCC_OscConfig+0x434>
 80082a8:	4b42      	ldr	r3, [pc, #264]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a1b      	ldr	r3, [r3, #32]
 80082b4:	061b      	lsls	r3, r3, #24
 80082b6:	493f      	ldr	r1, [pc, #252]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	60cb      	str	r3, [r1, #12]
 80082bc:	e018      	b.n	80082f0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80082be:	4b3d      	ldr	r3, [pc, #244]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a3c      	ldr	r2, [pc, #240]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 80082c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ca:	f7fa f9e5 	bl	8002698 <HAL_GetTick>
 80082ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80082d0:	e008      	b.n	80082e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80082d2:	f7fa f9e1 	bl	8002698 <HAL_GetTick>
 80082d6:	4602      	mov	r2, r0
 80082d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d901      	bls.n	80082e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e212      	b.n	800870a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80082e4:	4b33      	ldr	r3, [pc, #204]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1f0      	bne.n	80082d2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0308 	and.w	r3, r3, #8
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d036      	beq.n	800836a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d019      	beq.n	8008338 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008304:	4b2b      	ldr	r3, [pc, #172]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 8008306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008308:	4a2a      	ldr	r2, [pc, #168]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 800830a:	f043 0301 	orr.w	r3, r3, #1
 800830e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008310:	f7fa f9c2 	bl	8002698 <HAL_GetTick>
 8008314:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008316:	e008      	b.n	800832a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008318:	f7fa f9be 	bl	8002698 <HAL_GetTick>
 800831c:	4602      	mov	r2, r0
 800831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	2b02      	cmp	r3, #2
 8008324:	d901      	bls.n	800832a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008326:	2303      	movs	r3, #3
 8008328:	e1ef      	b.n	800870a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800832a:	4b22      	ldr	r3, [pc, #136]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 800832c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800832e:	f003 0302 	and.w	r3, r3, #2
 8008332:	2b00      	cmp	r3, #0
 8008334:	d0f0      	beq.n	8008318 <HAL_RCC_OscConfig+0x45c>
 8008336:	e018      	b.n	800836a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008338:	4b1e      	ldr	r3, [pc, #120]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 800833a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800833c:	4a1d      	ldr	r2, [pc, #116]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 800833e:	f023 0301 	bic.w	r3, r3, #1
 8008342:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008344:	f7fa f9a8 	bl	8002698 <HAL_GetTick>
 8008348:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800834a:	e008      	b.n	800835e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800834c:	f7fa f9a4 	bl	8002698 <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	2b02      	cmp	r3, #2
 8008358:	d901      	bls.n	800835e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800835a:	2303      	movs	r3, #3
 800835c:	e1d5      	b.n	800870a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800835e:	4b15      	ldr	r3, [pc, #84]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 8008360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008362:	f003 0302 	and.w	r3, r3, #2
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1f0      	bne.n	800834c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 0320 	and.w	r3, r3, #32
 8008372:	2b00      	cmp	r3, #0
 8008374:	d039      	beq.n	80083ea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	699b      	ldr	r3, [r3, #24]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d01c      	beq.n	80083b8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800837e:	4b0d      	ldr	r3, [pc, #52]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a0c      	ldr	r2, [pc, #48]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 8008384:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008388:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800838a:	f7fa f985 	bl	8002698 <HAL_GetTick>
 800838e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008390:	e008      	b.n	80083a4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008392:	f7fa f981 	bl	8002698 <HAL_GetTick>
 8008396:	4602      	mov	r2, r0
 8008398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839a:	1ad3      	subs	r3, r2, r3
 800839c:	2b02      	cmp	r3, #2
 800839e:	d901      	bls.n	80083a4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80083a0:	2303      	movs	r3, #3
 80083a2:	e1b2      	b.n	800870a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80083a4:	4b03      	ldr	r3, [pc, #12]	; (80083b4 <HAL_RCC_OscConfig+0x4f8>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d0f0      	beq.n	8008392 <HAL_RCC_OscConfig+0x4d6>
 80083b0:	e01b      	b.n	80083ea <HAL_RCC_OscConfig+0x52e>
 80083b2:	bf00      	nop
 80083b4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80083b8:	4b9b      	ldr	r3, [pc, #620]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a9a      	ldr	r2, [pc, #616]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 80083be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80083c4:	f7fa f968 	bl	8002698 <HAL_GetTick>
 80083c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80083ca:	e008      	b.n	80083de <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80083cc:	f7fa f964 	bl	8002698 <HAL_GetTick>
 80083d0:	4602      	mov	r2, r0
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d901      	bls.n	80083de <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e195      	b.n	800870a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80083de:	4b92      	ldr	r3, [pc, #584]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1f0      	bne.n	80083cc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0304 	and.w	r3, r3, #4
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f000 8081 	beq.w	80084fa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80083f8:	4b8c      	ldr	r3, [pc, #560]	; (800862c <HAL_RCC_OscConfig+0x770>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a8b      	ldr	r2, [pc, #556]	; (800862c <HAL_RCC_OscConfig+0x770>)
 80083fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008402:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008404:	f7fa f948 	bl	8002698 <HAL_GetTick>
 8008408:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800840a:	e008      	b.n	800841e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800840c:	f7fa f944 	bl	8002698 <HAL_GetTick>
 8008410:	4602      	mov	r2, r0
 8008412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	2b64      	cmp	r3, #100	; 0x64
 8008418:	d901      	bls.n	800841e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800841a:	2303      	movs	r3, #3
 800841c:	e175      	b.n	800870a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800841e:	4b83      	ldr	r3, [pc, #524]	; (800862c <HAL_RCC_OscConfig+0x770>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008426:	2b00      	cmp	r3, #0
 8008428:	d0f0      	beq.n	800840c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d106      	bne.n	8008440 <HAL_RCC_OscConfig+0x584>
 8008432:	4b7d      	ldr	r3, [pc, #500]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 8008434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008436:	4a7c      	ldr	r2, [pc, #496]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 8008438:	f043 0301 	orr.w	r3, r3, #1
 800843c:	6713      	str	r3, [r2, #112]	; 0x70
 800843e:	e02d      	b.n	800849c <HAL_RCC_OscConfig+0x5e0>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10c      	bne.n	8008462 <HAL_RCC_OscConfig+0x5a6>
 8008448:	4b77      	ldr	r3, [pc, #476]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 800844a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800844c:	4a76      	ldr	r2, [pc, #472]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 800844e:	f023 0301 	bic.w	r3, r3, #1
 8008452:	6713      	str	r3, [r2, #112]	; 0x70
 8008454:	4b74      	ldr	r3, [pc, #464]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 8008456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008458:	4a73      	ldr	r2, [pc, #460]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 800845a:	f023 0304 	bic.w	r3, r3, #4
 800845e:	6713      	str	r3, [r2, #112]	; 0x70
 8008460:	e01c      	b.n	800849c <HAL_RCC_OscConfig+0x5e0>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	2b05      	cmp	r3, #5
 8008468:	d10c      	bne.n	8008484 <HAL_RCC_OscConfig+0x5c8>
 800846a:	4b6f      	ldr	r3, [pc, #444]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 800846c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800846e:	4a6e      	ldr	r2, [pc, #440]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 8008470:	f043 0304 	orr.w	r3, r3, #4
 8008474:	6713      	str	r3, [r2, #112]	; 0x70
 8008476:	4b6c      	ldr	r3, [pc, #432]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 8008478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800847a:	4a6b      	ldr	r2, [pc, #428]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 800847c:	f043 0301 	orr.w	r3, r3, #1
 8008480:	6713      	str	r3, [r2, #112]	; 0x70
 8008482:	e00b      	b.n	800849c <HAL_RCC_OscConfig+0x5e0>
 8008484:	4b68      	ldr	r3, [pc, #416]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 8008486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008488:	4a67      	ldr	r2, [pc, #412]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 800848a:	f023 0301 	bic.w	r3, r3, #1
 800848e:	6713      	str	r3, [r2, #112]	; 0x70
 8008490:	4b65      	ldr	r3, [pc, #404]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 8008492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008494:	4a64      	ldr	r2, [pc, #400]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 8008496:	f023 0304 	bic.w	r3, r3, #4
 800849a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d015      	beq.n	80084d0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084a4:	f7fa f8f8 	bl	8002698 <HAL_GetTick>
 80084a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084aa:	e00a      	b.n	80084c2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084ac:	f7fa f8f4 	bl	8002698 <HAL_GetTick>
 80084b0:	4602      	mov	r2, r0
 80084b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d901      	bls.n	80084c2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e123      	b.n	800870a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084c2:	4b59      	ldr	r3, [pc, #356]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 80084c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c6:	f003 0302 	and.w	r3, r3, #2
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d0ee      	beq.n	80084ac <HAL_RCC_OscConfig+0x5f0>
 80084ce:	e014      	b.n	80084fa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084d0:	f7fa f8e2 	bl	8002698 <HAL_GetTick>
 80084d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80084d6:	e00a      	b.n	80084ee <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084d8:	f7fa f8de 	bl	8002698 <HAL_GetTick>
 80084dc:	4602      	mov	r2, r0
 80084de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d901      	bls.n	80084ee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80084ea:	2303      	movs	r3, #3
 80084ec:	e10d      	b.n	800870a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80084ee:	4b4e      	ldr	r3, [pc, #312]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 80084f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f2:	f003 0302 	and.w	r3, r3, #2
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1ee      	bne.n	80084d8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f000 8102 	beq.w	8008708 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008504:	4b48      	ldr	r3, [pc, #288]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800850c:	2b18      	cmp	r3, #24
 800850e:	f000 80bd 	beq.w	800868c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008516:	2b02      	cmp	r3, #2
 8008518:	f040 809e 	bne.w	8008658 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800851c:	4b42      	ldr	r3, [pc, #264]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a41      	ldr	r2, [pc, #260]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 8008522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008528:	f7fa f8b6 	bl	8002698 <HAL_GetTick>
 800852c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800852e:	e008      	b.n	8008542 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008530:	f7fa f8b2 	bl	8002698 <HAL_GetTick>
 8008534:	4602      	mov	r2, r0
 8008536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	2b02      	cmp	r3, #2
 800853c:	d901      	bls.n	8008542 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800853e:	2303      	movs	r3, #3
 8008540:	e0e3      	b.n	800870a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008542:	4b39      	ldr	r3, [pc, #228]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800854a:	2b00      	cmp	r3, #0
 800854c:	d1f0      	bne.n	8008530 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800854e:	4b36      	ldr	r3, [pc, #216]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 8008550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008552:	4b37      	ldr	r3, [pc, #220]	; (8008630 <HAL_RCC_OscConfig+0x774>)
 8008554:	4013      	ands	r3, r2
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800855e:	0112      	lsls	r2, r2, #4
 8008560:	430a      	orrs	r2, r1
 8008562:	4931      	ldr	r1, [pc, #196]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 8008564:	4313      	orrs	r3, r2
 8008566:	628b      	str	r3, [r1, #40]	; 0x28
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856c:	3b01      	subs	r3, #1
 800856e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008576:	3b01      	subs	r3, #1
 8008578:	025b      	lsls	r3, r3, #9
 800857a:	b29b      	uxth	r3, r3
 800857c:	431a      	orrs	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008582:	3b01      	subs	r3, #1
 8008584:	041b      	lsls	r3, r3, #16
 8008586:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800858a:	431a      	orrs	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008590:	3b01      	subs	r3, #1
 8008592:	061b      	lsls	r3, r3, #24
 8008594:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008598:	4923      	ldr	r1, [pc, #140]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 800859a:	4313      	orrs	r3, r2
 800859c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800859e:	4b22      	ldr	r3, [pc, #136]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 80085a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a2:	4a21      	ldr	r2, [pc, #132]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 80085a4:	f023 0301 	bic.w	r3, r3, #1
 80085a8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80085aa:	4b1f      	ldr	r3, [pc, #124]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 80085ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085ae:	4b21      	ldr	r3, [pc, #132]	; (8008634 <HAL_RCC_OscConfig+0x778>)
 80085b0:	4013      	ands	r3, r2
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80085b6:	00d2      	lsls	r2, r2, #3
 80085b8:	491b      	ldr	r1, [pc, #108]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 80085ba:	4313      	orrs	r3, r2
 80085bc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80085be:	4b1a      	ldr	r3, [pc, #104]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 80085c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c2:	f023 020c 	bic.w	r2, r3, #12
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ca:	4917      	ldr	r1, [pc, #92]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 80085cc:	4313      	orrs	r3, r2
 80085ce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80085d0:	4b15      	ldr	r3, [pc, #84]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 80085d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d4:	f023 0202 	bic.w	r2, r3, #2
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085dc:	4912      	ldr	r1, [pc, #72]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80085e2:	4b11      	ldr	r3, [pc, #68]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 80085e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e6:	4a10      	ldr	r2, [pc, #64]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 80085e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085ee:	4b0e      	ldr	r3, [pc, #56]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 80085f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f2:	4a0d      	ldr	r2, [pc, #52]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 80085f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80085fa:	4b0b      	ldr	r3, [pc, #44]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 80085fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fe:	4a0a      	ldr	r2, [pc, #40]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 8008600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008604:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008606:	4b08      	ldr	r3, [pc, #32]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 8008608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860a:	4a07      	ldr	r2, [pc, #28]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 800860c:	f043 0301 	orr.w	r3, r3, #1
 8008610:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008612:	4b05      	ldr	r3, [pc, #20]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a04      	ldr	r2, [pc, #16]	; (8008628 <HAL_RCC_OscConfig+0x76c>)
 8008618:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800861c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800861e:	f7fa f83b 	bl	8002698 <HAL_GetTick>
 8008622:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008624:	e011      	b.n	800864a <HAL_RCC_OscConfig+0x78e>
 8008626:	bf00      	nop
 8008628:	58024400 	.word	0x58024400
 800862c:	58024800 	.word	0x58024800
 8008630:	fffffc0c 	.word	0xfffffc0c
 8008634:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008638:	f7fa f82e 	bl	8002698 <HAL_GetTick>
 800863c:	4602      	mov	r2, r0
 800863e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	2b02      	cmp	r3, #2
 8008644:	d901      	bls.n	800864a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008646:	2303      	movs	r3, #3
 8008648:	e05f      	b.n	800870a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800864a:	4b32      	ldr	r3, [pc, #200]	; (8008714 <HAL_RCC_OscConfig+0x858>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008652:	2b00      	cmp	r3, #0
 8008654:	d0f0      	beq.n	8008638 <HAL_RCC_OscConfig+0x77c>
 8008656:	e057      	b.n	8008708 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008658:	4b2e      	ldr	r3, [pc, #184]	; (8008714 <HAL_RCC_OscConfig+0x858>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a2d      	ldr	r2, [pc, #180]	; (8008714 <HAL_RCC_OscConfig+0x858>)
 800865e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008664:	f7fa f818 	bl	8002698 <HAL_GetTick>
 8008668:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800866a:	e008      	b.n	800867e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800866c:	f7fa f814 	bl	8002698 <HAL_GetTick>
 8008670:	4602      	mov	r2, r0
 8008672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	2b02      	cmp	r3, #2
 8008678:	d901      	bls.n	800867e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800867a:	2303      	movs	r3, #3
 800867c:	e045      	b.n	800870a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800867e:	4b25      	ldr	r3, [pc, #148]	; (8008714 <HAL_RCC_OscConfig+0x858>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1f0      	bne.n	800866c <HAL_RCC_OscConfig+0x7b0>
 800868a:	e03d      	b.n	8008708 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800868c:	4b21      	ldr	r3, [pc, #132]	; (8008714 <HAL_RCC_OscConfig+0x858>)
 800868e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008690:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008692:	4b20      	ldr	r3, [pc, #128]	; (8008714 <HAL_RCC_OscConfig+0x858>)
 8008694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008696:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869c:	2b01      	cmp	r3, #1
 800869e:	d031      	beq.n	8008704 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	f003 0203 	and.w	r2, r3, #3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d12a      	bne.n	8008704 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	091b      	lsrs	r3, r3, #4
 80086b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d122      	bne.n	8008704 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d11a      	bne.n	8008704 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	0a5b      	lsrs	r3, r3, #9
 80086d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086da:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80086dc:	429a      	cmp	r2, r3
 80086de:	d111      	bne.n	8008704 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	0c1b      	lsrs	r3, r3, #16
 80086e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d108      	bne.n	8008704 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	0e1b      	lsrs	r3, r3, #24
 80086f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086fe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008700:	429a      	cmp	r2, r3
 8008702:	d001      	beq.n	8008708 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	e000      	b.n	800870a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3730      	adds	r7, #48	; 0x30
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	58024400 	.word	0x58024400

08008718 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b086      	sub	sp, #24
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d101      	bne.n	800872c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	e19c      	b.n	8008a66 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800872c:	4b8a      	ldr	r3, [pc, #552]	; (8008958 <HAL_RCC_ClockConfig+0x240>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 030f 	and.w	r3, r3, #15
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	429a      	cmp	r2, r3
 8008738:	d910      	bls.n	800875c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800873a:	4b87      	ldr	r3, [pc, #540]	; (8008958 <HAL_RCC_ClockConfig+0x240>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f023 020f 	bic.w	r2, r3, #15
 8008742:	4985      	ldr	r1, [pc, #532]	; (8008958 <HAL_RCC_ClockConfig+0x240>)
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	4313      	orrs	r3, r2
 8008748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800874a:	4b83      	ldr	r3, [pc, #524]	; (8008958 <HAL_RCC_ClockConfig+0x240>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 030f 	and.w	r3, r3, #15
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	429a      	cmp	r2, r3
 8008756:	d001      	beq.n	800875c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e184      	b.n	8008a66 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 0304 	and.w	r3, r3, #4
 8008764:	2b00      	cmp	r3, #0
 8008766:	d010      	beq.n	800878a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	691a      	ldr	r2, [r3, #16]
 800876c:	4b7b      	ldr	r3, [pc, #492]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008774:	429a      	cmp	r2, r3
 8008776:	d908      	bls.n	800878a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008778:	4b78      	ldr	r3, [pc, #480]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 800877a:	699b      	ldr	r3, [r3, #24]
 800877c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	4975      	ldr	r1, [pc, #468]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 8008786:	4313      	orrs	r3, r2
 8008788:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 0308 	and.w	r3, r3, #8
 8008792:	2b00      	cmp	r3, #0
 8008794:	d010      	beq.n	80087b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	695a      	ldr	r2, [r3, #20]
 800879a:	4b70      	ldr	r3, [pc, #448]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d908      	bls.n	80087b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80087a6:	4b6d      	ldr	r3, [pc, #436]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 80087a8:	69db      	ldr	r3, [r3, #28]
 80087aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	496a      	ldr	r1, [pc, #424]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 80087b4:	4313      	orrs	r3, r2
 80087b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 0310 	and.w	r3, r3, #16
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d010      	beq.n	80087e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	699a      	ldr	r2, [r3, #24]
 80087c8:	4b64      	ldr	r3, [pc, #400]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 80087ca:	69db      	ldr	r3, [r3, #28]
 80087cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d908      	bls.n	80087e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80087d4:	4b61      	ldr	r3, [pc, #388]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 80087d6:	69db      	ldr	r3, [r3, #28]
 80087d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	699b      	ldr	r3, [r3, #24]
 80087e0:	495e      	ldr	r1, [pc, #376]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 80087e2:	4313      	orrs	r3, r2
 80087e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 0320 	and.w	r3, r3, #32
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d010      	beq.n	8008814 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	69da      	ldr	r2, [r3, #28]
 80087f6:	4b59      	ldr	r3, [pc, #356]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 80087f8:	6a1b      	ldr	r3, [r3, #32]
 80087fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80087fe:	429a      	cmp	r2, r3
 8008800:	d908      	bls.n	8008814 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008802:	4b56      	ldr	r3, [pc, #344]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 8008804:	6a1b      	ldr	r3, [r3, #32]
 8008806:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	69db      	ldr	r3, [r3, #28]
 800880e:	4953      	ldr	r1, [pc, #332]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 8008810:	4313      	orrs	r3, r2
 8008812:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0302 	and.w	r3, r3, #2
 800881c:	2b00      	cmp	r3, #0
 800881e:	d010      	beq.n	8008842 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	68da      	ldr	r2, [r3, #12]
 8008824:	4b4d      	ldr	r3, [pc, #308]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	f003 030f 	and.w	r3, r3, #15
 800882c:	429a      	cmp	r2, r3
 800882e:	d908      	bls.n	8008842 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008830:	4b4a      	ldr	r3, [pc, #296]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	f023 020f 	bic.w	r2, r3, #15
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	4947      	ldr	r1, [pc, #284]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 800883e:	4313      	orrs	r3, r2
 8008840:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 0301 	and.w	r3, r3, #1
 800884a:	2b00      	cmp	r3, #0
 800884c:	d055      	beq.n	80088fa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800884e:	4b43      	ldr	r3, [pc, #268]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	4940      	ldr	r1, [pc, #256]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 800885c:	4313      	orrs	r3, r2
 800885e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	2b02      	cmp	r3, #2
 8008866:	d107      	bne.n	8008878 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008868:	4b3c      	ldr	r3, [pc, #240]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008870:	2b00      	cmp	r3, #0
 8008872:	d121      	bne.n	80088b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	e0f6      	b.n	8008a66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	2b03      	cmp	r3, #3
 800887e:	d107      	bne.n	8008890 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008880:	4b36      	ldr	r3, [pc, #216]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d115      	bne.n	80088b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	e0ea      	b.n	8008a66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d107      	bne.n	80088a8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008898:	4b30      	ldr	r3, [pc, #192]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d109      	bne.n	80088b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e0de      	b.n	8008a66 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088a8:	4b2c      	ldr	r3, [pc, #176]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 0304 	and.w	r3, r3, #4
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d101      	bne.n	80088b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	e0d6      	b.n	8008a66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80088b8:	4b28      	ldr	r3, [pc, #160]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	f023 0207 	bic.w	r2, r3, #7
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	4925      	ldr	r1, [pc, #148]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 80088c6:	4313      	orrs	r3, r2
 80088c8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088ca:	f7f9 fee5 	bl	8002698 <HAL_GetTick>
 80088ce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088d0:	e00a      	b.n	80088e8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088d2:	f7f9 fee1 	bl	8002698 <HAL_GetTick>
 80088d6:	4602      	mov	r2, r0
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d901      	bls.n	80088e8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80088e4:	2303      	movs	r3, #3
 80088e6:	e0be      	b.n	8008a66 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088e8:	4b1c      	ldr	r3, [pc, #112]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 80088ea:	691b      	ldr	r3, [r3, #16]
 80088ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	00db      	lsls	r3, r3, #3
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d1eb      	bne.n	80088d2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 0302 	and.w	r3, r3, #2
 8008902:	2b00      	cmp	r3, #0
 8008904:	d010      	beq.n	8008928 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	68da      	ldr	r2, [r3, #12]
 800890a:	4b14      	ldr	r3, [pc, #80]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	f003 030f 	and.w	r3, r3, #15
 8008912:	429a      	cmp	r2, r3
 8008914:	d208      	bcs.n	8008928 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008916:	4b11      	ldr	r3, [pc, #68]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	f023 020f 	bic.w	r2, r3, #15
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	490e      	ldr	r1, [pc, #56]	; (800895c <HAL_RCC_ClockConfig+0x244>)
 8008924:	4313      	orrs	r3, r2
 8008926:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008928:	4b0b      	ldr	r3, [pc, #44]	; (8008958 <HAL_RCC_ClockConfig+0x240>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 030f 	and.w	r3, r3, #15
 8008930:	683a      	ldr	r2, [r7, #0]
 8008932:	429a      	cmp	r2, r3
 8008934:	d214      	bcs.n	8008960 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008936:	4b08      	ldr	r3, [pc, #32]	; (8008958 <HAL_RCC_ClockConfig+0x240>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f023 020f 	bic.w	r2, r3, #15
 800893e:	4906      	ldr	r1, [pc, #24]	; (8008958 <HAL_RCC_ClockConfig+0x240>)
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	4313      	orrs	r3, r2
 8008944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008946:	4b04      	ldr	r3, [pc, #16]	; (8008958 <HAL_RCC_ClockConfig+0x240>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 030f 	and.w	r3, r3, #15
 800894e:	683a      	ldr	r2, [r7, #0]
 8008950:	429a      	cmp	r2, r3
 8008952:	d005      	beq.n	8008960 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	e086      	b.n	8008a66 <HAL_RCC_ClockConfig+0x34e>
 8008958:	52002000 	.word	0x52002000
 800895c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 0304 	and.w	r3, r3, #4
 8008968:	2b00      	cmp	r3, #0
 800896a:	d010      	beq.n	800898e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	691a      	ldr	r2, [r3, #16]
 8008970:	4b3f      	ldr	r3, [pc, #252]	; (8008a70 <HAL_RCC_ClockConfig+0x358>)
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008978:	429a      	cmp	r2, r3
 800897a:	d208      	bcs.n	800898e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800897c:	4b3c      	ldr	r3, [pc, #240]	; (8008a70 <HAL_RCC_ClockConfig+0x358>)
 800897e:	699b      	ldr	r3, [r3, #24]
 8008980:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	4939      	ldr	r1, [pc, #228]	; (8008a70 <HAL_RCC_ClockConfig+0x358>)
 800898a:	4313      	orrs	r3, r2
 800898c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 0308 	and.w	r3, r3, #8
 8008996:	2b00      	cmp	r3, #0
 8008998:	d010      	beq.n	80089bc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	695a      	ldr	r2, [r3, #20]
 800899e:	4b34      	ldr	r3, [pc, #208]	; (8008a70 <HAL_RCC_ClockConfig+0x358>)
 80089a0:	69db      	ldr	r3, [r3, #28]
 80089a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d208      	bcs.n	80089bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80089aa:	4b31      	ldr	r3, [pc, #196]	; (8008a70 <HAL_RCC_ClockConfig+0x358>)
 80089ac:	69db      	ldr	r3, [r3, #28]
 80089ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	492e      	ldr	r1, [pc, #184]	; (8008a70 <HAL_RCC_ClockConfig+0x358>)
 80089b8:	4313      	orrs	r3, r2
 80089ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 0310 	and.w	r3, r3, #16
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d010      	beq.n	80089ea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	699a      	ldr	r2, [r3, #24]
 80089cc:	4b28      	ldr	r3, [pc, #160]	; (8008a70 <HAL_RCC_ClockConfig+0x358>)
 80089ce:	69db      	ldr	r3, [r3, #28]
 80089d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d208      	bcs.n	80089ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80089d8:	4b25      	ldr	r3, [pc, #148]	; (8008a70 <HAL_RCC_ClockConfig+0x358>)
 80089da:	69db      	ldr	r3, [r3, #28]
 80089dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	4922      	ldr	r1, [pc, #136]	; (8008a70 <HAL_RCC_ClockConfig+0x358>)
 80089e6:	4313      	orrs	r3, r2
 80089e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 0320 	and.w	r3, r3, #32
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d010      	beq.n	8008a18 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	69da      	ldr	r2, [r3, #28]
 80089fa:	4b1d      	ldr	r3, [pc, #116]	; (8008a70 <HAL_RCC_ClockConfig+0x358>)
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d208      	bcs.n	8008a18 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008a06:	4b1a      	ldr	r3, [pc, #104]	; (8008a70 <HAL_RCC_ClockConfig+0x358>)
 8008a08:	6a1b      	ldr	r3, [r3, #32]
 8008a0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	69db      	ldr	r3, [r3, #28]
 8008a12:	4917      	ldr	r1, [pc, #92]	; (8008a70 <HAL_RCC_ClockConfig+0x358>)
 8008a14:	4313      	orrs	r3, r2
 8008a16:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008a18:	f000 f834 	bl	8008a84 <HAL_RCC_GetSysClockFreq>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	4b14      	ldr	r3, [pc, #80]	; (8008a70 <HAL_RCC_ClockConfig+0x358>)
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	0a1b      	lsrs	r3, r3, #8
 8008a24:	f003 030f 	and.w	r3, r3, #15
 8008a28:	4912      	ldr	r1, [pc, #72]	; (8008a74 <HAL_RCC_ClockConfig+0x35c>)
 8008a2a:	5ccb      	ldrb	r3, [r1, r3]
 8008a2c:	f003 031f 	and.w	r3, r3, #31
 8008a30:	fa22 f303 	lsr.w	r3, r2, r3
 8008a34:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a36:	4b0e      	ldr	r3, [pc, #56]	; (8008a70 <HAL_RCC_ClockConfig+0x358>)
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	f003 030f 	and.w	r3, r3, #15
 8008a3e:	4a0d      	ldr	r2, [pc, #52]	; (8008a74 <HAL_RCC_ClockConfig+0x35c>)
 8008a40:	5cd3      	ldrb	r3, [r2, r3]
 8008a42:	f003 031f 	and.w	r3, r3, #31
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	fa22 f303 	lsr.w	r3, r2, r3
 8008a4c:	4a0a      	ldr	r2, [pc, #40]	; (8008a78 <HAL_RCC_ClockConfig+0x360>)
 8008a4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008a50:	4a0a      	ldr	r2, [pc, #40]	; (8008a7c <HAL_RCC_ClockConfig+0x364>)
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008a56:	4b0a      	ldr	r3, [pc, #40]	; (8008a80 <HAL_RCC_ClockConfig+0x368>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7f9 fdd2 	bl	8002604 <HAL_InitTick>
 8008a60:	4603      	mov	r3, r0
 8008a62:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3718      	adds	r7, #24
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	58024400 	.word	0x58024400
 8008a74:	0800ee24 	.word	0x0800ee24
 8008a78:	24000028 	.word	0x24000028
 8008a7c:	24000024 	.word	0x24000024
 8008a80:	2400002c 	.word	0x2400002c

08008a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b089      	sub	sp, #36	; 0x24
 8008a88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a8a:	4bb3      	ldr	r3, [pc, #716]	; (8008d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a8c:	691b      	ldr	r3, [r3, #16]
 8008a8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a92:	2b18      	cmp	r3, #24
 8008a94:	f200 8155 	bhi.w	8008d42 <HAL_RCC_GetSysClockFreq+0x2be>
 8008a98:	a201      	add	r2, pc, #4	; (adr r2, 8008aa0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9e:	bf00      	nop
 8008aa0:	08008b05 	.word	0x08008b05
 8008aa4:	08008d43 	.word	0x08008d43
 8008aa8:	08008d43 	.word	0x08008d43
 8008aac:	08008d43 	.word	0x08008d43
 8008ab0:	08008d43 	.word	0x08008d43
 8008ab4:	08008d43 	.word	0x08008d43
 8008ab8:	08008d43 	.word	0x08008d43
 8008abc:	08008d43 	.word	0x08008d43
 8008ac0:	08008b2b 	.word	0x08008b2b
 8008ac4:	08008d43 	.word	0x08008d43
 8008ac8:	08008d43 	.word	0x08008d43
 8008acc:	08008d43 	.word	0x08008d43
 8008ad0:	08008d43 	.word	0x08008d43
 8008ad4:	08008d43 	.word	0x08008d43
 8008ad8:	08008d43 	.word	0x08008d43
 8008adc:	08008d43 	.word	0x08008d43
 8008ae0:	08008b31 	.word	0x08008b31
 8008ae4:	08008d43 	.word	0x08008d43
 8008ae8:	08008d43 	.word	0x08008d43
 8008aec:	08008d43 	.word	0x08008d43
 8008af0:	08008d43 	.word	0x08008d43
 8008af4:	08008d43 	.word	0x08008d43
 8008af8:	08008d43 	.word	0x08008d43
 8008afc:	08008d43 	.word	0x08008d43
 8008b00:	08008b37 	.word	0x08008b37
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b04:	4b94      	ldr	r3, [pc, #592]	; (8008d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0320 	and.w	r3, r3, #32
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d009      	beq.n	8008b24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b10:	4b91      	ldr	r3, [pc, #580]	; (8008d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	08db      	lsrs	r3, r3, #3
 8008b16:	f003 0303 	and.w	r3, r3, #3
 8008b1a:	4a90      	ldr	r2, [pc, #576]	; (8008d5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008b22:	e111      	b.n	8008d48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008b24:	4b8d      	ldr	r3, [pc, #564]	; (8008d5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b26:	61bb      	str	r3, [r7, #24]
    break;
 8008b28:	e10e      	b.n	8008d48 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008b2a:	4b8d      	ldr	r3, [pc, #564]	; (8008d60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008b2c:	61bb      	str	r3, [r7, #24]
    break;
 8008b2e:	e10b      	b.n	8008d48 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008b30:	4b8c      	ldr	r3, [pc, #560]	; (8008d64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008b32:	61bb      	str	r3, [r7, #24]
    break;
 8008b34:	e108      	b.n	8008d48 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b36:	4b88      	ldr	r3, [pc, #544]	; (8008d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3a:	f003 0303 	and.w	r3, r3, #3
 8008b3e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008b40:	4b85      	ldr	r3, [pc, #532]	; (8008d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b44:	091b      	lsrs	r3, r3, #4
 8008b46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b4a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008b4c:	4b82      	ldr	r3, [pc, #520]	; (8008d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008b56:	4b80      	ldr	r3, [pc, #512]	; (8008d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b5a:	08db      	lsrs	r3, r3, #3
 8008b5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	fb02 f303 	mul.w	r3, r2, r3
 8008b66:	ee07 3a90 	vmov	s15, r3
 8008b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b6e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f000 80e1 	beq.w	8008d3c <HAL_RCC_GetSysClockFreq+0x2b8>
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	f000 8083 	beq.w	8008c88 <HAL_RCC_GetSysClockFreq+0x204>
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	2b02      	cmp	r3, #2
 8008b86:	f200 80a1 	bhi.w	8008ccc <HAL_RCC_GetSysClockFreq+0x248>
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d003      	beq.n	8008b98 <HAL_RCC_GetSysClockFreq+0x114>
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d056      	beq.n	8008c44 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008b96:	e099      	b.n	8008ccc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b98:	4b6f      	ldr	r3, [pc, #444]	; (8008d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 0320 	and.w	r3, r3, #32
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d02d      	beq.n	8008c00 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ba4:	4b6c      	ldr	r3, [pc, #432]	; (8008d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	08db      	lsrs	r3, r3, #3
 8008baa:	f003 0303 	and.w	r3, r3, #3
 8008bae:	4a6b      	ldr	r2, [pc, #428]	; (8008d5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8008bb4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	ee07 3a90 	vmov	s15, r3
 8008bbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	ee07 3a90 	vmov	s15, r3
 8008bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bce:	4b62      	ldr	r3, [pc, #392]	; (8008d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bd6:	ee07 3a90 	vmov	s15, r3
 8008bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bde:	ed97 6a02 	vldr	s12, [r7, #8]
 8008be2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008d68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008bfe:	e087      	b.n	8008d10 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	ee07 3a90 	vmov	s15, r3
 8008c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c0a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008d6c <HAL_RCC_GetSysClockFreq+0x2e8>
 8008c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c12:	4b51      	ldr	r3, [pc, #324]	; (8008d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c1a:	ee07 3a90 	vmov	s15, r3
 8008c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c22:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c26:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008d68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c42:	e065      	b.n	8008d10 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	ee07 3a90 	vmov	s15, r3
 8008c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c4e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008d70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c56:	4b40      	ldr	r3, [pc, #256]	; (8008d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c5e:	ee07 3a90 	vmov	s15, r3
 8008c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c66:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c6a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008d68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c86:	e043      	b.n	8008d10 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	ee07 3a90 	vmov	s15, r3
 8008c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c92:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008d74 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c9a:	4b2f      	ldr	r3, [pc, #188]	; (8008d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca2:	ee07 3a90 	vmov	s15, r3
 8008ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008caa:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008d68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cca:	e021      	b.n	8008d10 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	ee07 3a90 	vmov	s15, r3
 8008cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cd6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008d70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cde:	4b1e      	ldr	r3, [pc, #120]	; (8008d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce6:	ee07 3a90 	vmov	s15, r3
 8008cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cee:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cf2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008d68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d0e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008d10:	4b11      	ldr	r3, [pc, #68]	; (8008d58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d14:	0a5b      	lsrs	r3, r3, #9
 8008d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	ee07 3a90 	vmov	s15, r3
 8008d24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d28:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d34:	ee17 3a90 	vmov	r3, s15
 8008d38:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008d3a:	e005      	b.n	8008d48 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	61bb      	str	r3, [r7, #24]
    break;
 8008d40:	e002      	b.n	8008d48 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008d42:	4b07      	ldr	r3, [pc, #28]	; (8008d60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008d44:	61bb      	str	r3, [r7, #24]
    break;
 8008d46:	bf00      	nop
  }

  return sysclockfreq;
 8008d48:	69bb      	ldr	r3, [r7, #24]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3724      	adds	r7, #36	; 0x24
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	58024400 	.word	0x58024400
 8008d5c:	03d09000 	.word	0x03d09000
 8008d60:	003d0900 	.word	0x003d0900
 8008d64:	017d7840 	.word	0x017d7840
 8008d68:	46000000 	.word	0x46000000
 8008d6c:	4c742400 	.word	0x4c742400
 8008d70:	4a742400 	.word	0x4a742400
 8008d74:	4bbebc20 	.word	0x4bbebc20

08008d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008d7e:	f7ff fe81 	bl	8008a84 <HAL_RCC_GetSysClockFreq>
 8008d82:	4602      	mov	r2, r0
 8008d84:	4b10      	ldr	r3, [pc, #64]	; (8008dc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8008d86:	699b      	ldr	r3, [r3, #24]
 8008d88:	0a1b      	lsrs	r3, r3, #8
 8008d8a:	f003 030f 	and.w	r3, r3, #15
 8008d8e:	490f      	ldr	r1, [pc, #60]	; (8008dcc <HAL_RCC_GetHCLKFreq+0x54>)
 8008d90:	5ccb      	ldrb	r3, [r1, r3]
 8008d92:	f003 031f 	and.w	r3, r3, #31
 8008d96:	fa22 f303 	lsr.w	r3, r2, r3
 8008d9a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d9c:	4b0a      	ldr	r3, [pc, #40]	; (8008dc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8008d9e:	699b      	ldr	r3, [r3, #24]
 8008da0:	f003 030f 	and.w	r3, r3, #15
 8008da4:	4a09      	ldr	r2, [pc, #36]	; (8008dcc <HAL_RCC_GetHCLKFreq+0x54>)
 8008da6:	5cd3      	ldrb	r3, [r2, r3]
 8008da8:	f003 031f 	and.w	r3, r3, #31
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	fa22 f303 	lsr.w	r3, r2, r3
 8008db2:	4a07      	ldr	r2, [pc, #28]	; (8008dd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8008db4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008db6:	4a07      	ldr	r2, [pc, #28]	; (8008dd4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008dbc:	4b04      	ldr	r3, [pc, #16]	; (8008dd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	58024400 	.word	0x58024400
 8008dcc:	0800ee24 	.word	0x0800ee24
 8008dd0:	24000028 	.word	0x24000028
 8008dd4:	24000024 	.word	0x24000024

08008dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008ddc:	f7ff ffcc 	bl	8008d78 <HAL_RCC_GetHCLKFreq>
 8008de0:	4602      	mov	r2, r0
 8008de2:	4b06      	ldr	r3, [pc, #24]	; (8008dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8008de4:	69db      	ldr	r3, [r3, #28]
 8008de6:	091b      	lsrs	r3, r3, #4
 8008de8:	f003 0307 	and.w	r3, r3, #7
 8008dec:	4904      	ldr	r1, [pc, #16]	; (8008e00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008dee:	5ccb      	ldrb	r3, [r1, r3]
 8008df0:	f003 031f 	and.w	r3, r3, #31
 8008df4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	58024400 	.word	0x58024400
 8008e00:	0800ee24 	.word	0x0800ee24

08008e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008e08:	f7ff ffb6 	bl	8008d78 <HAL_RCC_GetHCLKFreq>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	4b06      	ldr	r3, [pc, #24]	; (8008e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e10:	69db      	ldr	r3, [r3, #28]
 8008e12:	0a1b      	lsrs	r3, r3, #8
 8008e14:	f003 0307 	and.w	r3, r3, #7
 8008e18:	4904      	ldr	r1, [pc, #16]	; (8008e2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8008e1a:	5ccb      	ldrb	r3, [r1, r3]
 8008e1c:	f003 031f 	and.w	r3, r3, #31
 8008e20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	58024400 	.word	0x58024400
 8008e2c:	0800ee24 	.word	0x0800ee24

08008e30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b086      	sub	sp, #24
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008e38:	2300      	movs	r3, #0
 8008e3a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d03f      	beq.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e54:	d02a      	beq.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008e56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e5a:	d824      	bhi.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008e5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e60:	d018      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008e62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e66:	d81e      	bhi.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d003      	beq.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008e6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e70:	d007      	beq.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008e72:	e018      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e74:	4ba3      	ldr	r3, [pc, #652]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e78:	4aa2      	ldr	r2, [pc, #648]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008e7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008e80:	e015      	b.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	3304      	adds	r3, #4
 8008e86:	2102      	movs	r1, #2
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f001 fff9 	bl	800ae80 <RCCEx_PLL2_Config>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008e92:	e00c      	b.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	3324      	adds	r3, #36	; 0x24
 8008e98:	2102      	movs	r1, #2
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f002 f8a2 	bl	800afe4 <RCCEx_PLL3_Config>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008ea4:	e003      	b.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	75fb      	strb	r3, [r7, #23]
      break;
 8008eaa:	e000      	b.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008eae:	7dfb      	ldrb	r3, [r7, #23]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d109      	bne.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008eb4:	4b93      	ldr	r3, [pc, #588]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ec0:	4990      	ldr	r1, [pc, #576]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	650b      	str	r3, [r1, #80]	; 0x50
 8008ec6:	e001      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec8:	7dfb      	ldrb	r3, [r7, #23]
 8008eca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d03d      	beq.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008edc:	2b04      	cmp	r3, #4
 8008ede:	d826      	bhi.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008ee0:	a201      	add	r2, pc, #4	; (adr r2, 8008ee8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee6:	bf00      	nop
 8008ee8:	08008efd 	.word	0x08008efd
 8008eec:	08008f0b 	.word	0x08008f0b
 8008ef0:	08008f1d 	.word	0x08008f1d
 8008ef4:	08008f35 	.word	0x08008f35
 8008ef8:	08008f35 	.word	0x08008f35
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008efc:	4b81      	ldr	r3, [pc, #516]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f00:	4a80      	ldr	r2, [pc, #512]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f08:	e015      	b.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	3304      	adds	r3, #4
 8008f0e:	2100      	movs	r1, #0
 8008f10:	4618      	mov	r0, r3
 8008f12:	f001 ffb5 	bl	800ae80 <RCCEx_PLL2_Config>
 8008f16:	4603      	mov	r3, r0
 8008f18:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f1a:	e00c      	b.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	3324      	adds	r3, #36	; 0x24
 8008f20:	2100      	movs	r1, #0
 8008f22:	4618      	mov	r0, r3
 8008f24:	f002 f85e 	bl	800afe4 <RCCEx_PLL3_Config>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f2c:	e003      	b.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	75fb      	strb	r3, [r7, #23]
      break;
 8008f32:	e000      	b.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008f34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f36:	7dfb      	ldrb	r3, [r7, #23]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d109      	bne.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f3c:	4b71      	ldr	r3, [pc, #452]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f40:	f023 0207 	bic.w	r2, r3, #7
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f48:	496e      	ldr	r1, [pc, #440]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	650b      	str	r3, [r1, #80]	; 0x50
 8008f4e:	e001      	b.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f50:	7dfb      	ldrb	r3, [r7, #23]
 8008f52:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d042      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f68:	d02b      	beq.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f6e:	d825      	bhi.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008f70:	2bc0      	cmp	r3, #192	; 0xc0
 8008f72:	d028      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008f74:	2bc0      	cmp	r3, #192	; 0xc0
 8008f76:	d821      	bhi.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008f78:	2b80      	cmp	r3, #128	; 0x80
 8008f7a:	d016      	beq.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008f7c:	2b80      	cmp	r3, #128	; 0x80
 8008f7e:	d81d      	bhi.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d002      	beq.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008f84:	2b40      	cmp	r3, #64	; 0x40
 8008f86:	d007      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008f88:	e018      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f8a:	4b5e      	ldr	r3, [pc, #376]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8e:	4a5d      	ldr	r2, [pc, #372]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008f96:	e017      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	3304      	adds	r3, #4
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f001 ff6e 	bl	800ae80 <RCCEx_PLL2_Config>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008fa8:	e00e      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	3324      	adds	r3, #36	; 0x24
 8008fae:	2100      	movs	r1, #0
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f002 f817 	bl	800afe4 <RCCEx_PLL3_Config>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008fba:	e005      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8008fc0:	e002      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008fc2:	bf00      	nop
 8008fc4:	e000      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008fc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fc8:	7dfb      	ldrb	r3, [r7, #23]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d109      	bne.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008fce:	4b4d      	ldr	r3, [pc, #308]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fd2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fda:	494a      	ldr	r1, [pc, #296]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	650b      	str	r3, [r1, #80]	; 0x50
 8008fe0:	e001      	b.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fe2:	7dfb      	ldrb	r3, [r7, #23]
 8008fe4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d049      	beq.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008ff8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ffc:	d030      	beq.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008ffe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009002:	d82a      	bhi.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009004:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009008:	d02c      	beq.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800900a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800900e:	d824      	bhi.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009010:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009014:	d018      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009016:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800901a:	d81e      	bhi.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800901c:	2b00      	cmp	r3, #0
 800901e:	d003      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009020:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009024:	d007      	beq.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009026:	e018      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009028:	4b36      	ldr	r3, [pc, #216]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800902a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902c:	4a35      	ldr	r2, [pc, #212]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800902e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009032:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009034:	e017      	b.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	3304      	adds	r3, #4
 800903a:	2100      	movs	r1, #0
 800903c:	4618      	mov	r0, r3
 800903e:	f001 ff1f 	bl	800ae80 <RCCEx_PLL2_Config>
 8009042:	4603      	mov	r3, r0
 8009044:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009046:	e00e      	b.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	3324      	adds	r3, #36	; 0x24
 800904c:	2100      	movs	r1, #0
 800904e:	4618      	mov	r0, r3
 8009050:	f001 ffc8 	bl	800afe4 <RCCEx_PLL3_Config>
 8009054:	4603      	mov	r3, r0
 8009056:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009058:	e005      	b.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	75fb      	strb	r3, [r7, #23]
      break;
 800905e:	e002      	b.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009060:	bf00      	nop
 8009062:	e000      	b.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009064:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009066:	7dfb      	ldrb	r3, [r7, #23]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10a      	bne.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800906c:	4b25      	ldr	r3, [pc, #148]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800906e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009070:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800907a:	4922      	ldr	r1, [pc, #136]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800907c:	4313      	orrs	r3, r2
 800907e:	658b      	str	r3, [r1, #88]	; 0x58
 8009080:	e001      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009082:	7dfb      	ldrb	r3, [r7, #23]
 8009084:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800908e:	2b00      	cmp	r3, #0
 8009090:	d04b      	beq.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009098:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800909c:	d030      	beq.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800909e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80090a2:	d82a      	bhi.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80090a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80090a8:	d02e      	beq.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80090aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80090ae:	d824      	bhi.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80090b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090b4:	d018      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80090b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090ba:	d81e      	bhi.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d003      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80090c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80090c4:	d007      	beq.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80090c6:	e018      	b.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090c8:	4b0e      	ldr	r3, [pc, #56]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80090ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090cc:	4a0d      	ldr	r2, [pc, #52]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80090ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80090d4:	e019      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	3304      	adds	r3, #4
 80090da:	2100      	movs	r1, #0
 80090dc:	4618      	mov	r0, r3
 80090de:	f001 fecf 	bl	800ae80 <RCCEx_PLL2_Config>
 80090e2:	4603      	mov	r3, r0
 80090e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80090e6:	e010      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	3324      	adds	r3, #36	; 0x24
 80090ec:	2100      	movs	r1, #0
 80090ee:	4618      	mov	r0, r3
 80090f0:	f001 ff78 	bl	800afe4 <RCCEx_PLL3_Config>
 80090f4:	4603      	mov	r3, r0
 80090f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80090f8:	e007      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	75fb      	strb	r3, [r7, #23]
      break;
 80090fe:	e004      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8009100:	bf00      	nop
 8009102:	e002      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009104:	58024400 	.word	0x58024400
      break;
 8009108:	bf00      	nop
    }

    if(ret == HAL_OK)
 800910a:	7dfb      	ldrb	r3, [r7, #23]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10a      	bne.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009110:	4b99      	ldr	r3, [pc, #612]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009114:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800911e:	4996      	ldr	r1, [pc, #600]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009120:	4313      	orrs	r3, r2
 8009122:	658b      	str	r3, [r1, #88]	; 0x58
 8009124:	e001      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009126:	7dfb      	ldrb	r3, [r7, #23]
 8009128:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009132:	2b00      	cmp	r3, #0
 8009134:	d032      	beq.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800913a:	2b30      	cmp	r3, #48	; 0x30
 800913c:	d01c      	beq.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800913e:	2b30      	cmp	r3, #48	; 0x30
 8009140:	d817      	bhi.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009142:	2b20      	cmp	r3, #32
 8009144:	d00c      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8009146:	2b20      	cmp	r3, #32
 8009148:	d813      	bhi.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800914a:	2b00      	cmp	r3, #0
 800914c:	d016      	beq.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800914e:	2b10      	cmp	r3, #16
 8009150:	d10f      	bne.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009152:	4b89      	ldr	r3, [pc, #548]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009156:	4a88      	ldr	r2, [pc, #544]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800915c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800915e:	e00e      	b.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	3304      	adds	r3, #4
 8009164:	2102      	movs	r1, #2
 8009166:	4618      	mov	r0, r3
 8009168:	f001 fe8a 	bl	800ae80 <RCCEx_PLL2_Config>
 800916c:	4603      	mov	r3, r0
 800916e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009170:	e005      	b.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	75fb      	strb	r3, [r7, #23]
      break;
 8009176:	e002      	b.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009178:	bf00      	nop
 800917a:	e000      	b.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800917c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800917e:	7dfb      	ldrb	r3, [r7, #23]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d109      	bne.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009184:	4b7c      	ldr	r3, [pc, #496]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009188:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009190:	4979      	ldr	r1, [pc, #484]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009192:	4313      	orrs	r3, r2
 8009194:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009196:	e001      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009198:	7dfb      	ldrb	r3, [r7, #23]
 800919a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d047      	beq.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091b0:	d030      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80091b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091b6:	d82a      	bhi.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80091b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80091bc:	d02c      	beq.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80091be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80091c2:	d824      	bhi.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80091c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091c8:	d018      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80091ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091ce:	d81e      	bhi.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d003      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80091d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091d8:	d007      	beq.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80091da:	e018      	b.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091dc:	4b66      	ldr	r3, [pc, #408]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80091de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e0:	4a65      	ldr	r2, [pc, #404]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80091e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80091e8:	e017      	b.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	3304      	adds	r3, #4
 80091ee:	2100      	movs	r1, #0
 80091f0:	4618      	mov	r0, r3
 80091f2:	f001 fe45 	bl	800ae80 <RCCEx_PLL2_Config>
 80091f6:	4603      	mov	r3, r0
 80091f8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80091fa:	e00e      	b.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	3324      	adds	r3, #36	; 0x24
 8009200:	2100      	movs	r1, #0
 8009202:	4618      	mov	r0, r3
 8009204:	f001 feee 	bl	800afe4 <RCCEx_PLL3_Config>
 8009208:	4603      	mov	r3, r0
 800920a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800920c:	e005      	b.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	75fb      	strb	r3, [r7, #23]
      break;
 8009212:	e002      	b.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009214:	bf00      	nop
 8009216:	e000      	b.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009218:	bf00      	nop
    }

    if(ret == HAL_OK)
 800921a:	7dfb      	ldrb	r3, [r7, #23]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d109      	bne.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009220:	4b55      	ldr	r3, [pc, #340]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009224:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800922c:	4952      	ldr	r1, [pc, #328]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800922e:	4313      	orrs	r3, r2
 8009230:	650b      	str	r3, [r1, #80]	; 0x50
 8009232:	e001      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009234:	7dfb      	ldrb	r3, [r7, #23]
 8009236:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009240:	2b00      	cmp	r3, #0
 8009242:	d049      	beq.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800924c:	d02e      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800924e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009252:	d828      	bhi.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009254:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009258:	d02a      	beq.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800925a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800925e:	d822      	bhi.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009260:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009264:	d026      	beq.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8009266:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800926a:	d81c      	bhi.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800926c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009270:	d010      	beq.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009272:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009276:	d816      	bhi.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009278:	2b00      	cmp	r3, #0
 800927a:	d01d      	beq.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800927c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009280:	d111      	bne.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	3304      	adds	r3, #4
 8009286:	2101      	movs	r1, #1
 8009288:	4618      	mov	r0, r3
 800928a:	f001 fdf9 	bl	800ae80 <RCCEx_PLL2_Config>
 800928e:	4603      	mov	r3, r0
 8009290:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009292:	e012      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	3324      	adds	r3, #36	; 0x24
 8009298:	2101      	movs	r1, #1
 800929a:	4618      	mov	r0, r3
 800929c:	f001 fea2 	bl	800afe4 <RCCEx_PLL3_Config>
 80092a0:	4603      	mov	r3, r0
 80092a2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80092a4:	e009      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	75fb      	strb	r3, [r7, #23]
      break;
 80092aa:	e006      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80092ac:	bf00      	nop
 80092ae:	e004      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80092b0:	bf00      	nop
 80092b2:	e002      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80092b4:	bf00      	nop
 80092b6:	e000      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80092b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092ba:	7dfb      	ldrb	r3, [r7, #23]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d109      	bne.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80092c0:	4b2d      	ldr	r3, [pc, #180]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092c4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092cc:	492a      	ldr	r1, [pc, #168]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092ce:	4313      	orrs	r3, r2
 80092d0:	650b      	str	r3, [r1, #80]	; 0x50
 80092d2:	e001      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092d4:	7dfb      	ldrb	r3, [r7, #23]
 80092d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d04d      	beq.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80092ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092ee:	d02e      	beq.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80092f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092f4:	d828      	bhi.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80092f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092fa:	d02a      	beq.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80092fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009300:	d822      	bhi.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009302:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009306:	d026      	beq.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009308:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800930c:	d81c      	bhi.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800930e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009312:	d010      	beq.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009318:	d816      	bhi.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800931a:	2b00      	cmp	r3, #0
 800931c:	d01d      	beq.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800931e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009322:	d111      	bne.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	3304      	adds	r3, #4
 8009328:	2101      	movs	r1, #1
 800932a:	4618      	mov	r0, r3
 800932c:	f001 fda8 	bl	800ae80 <RCCEx_PLL2_Config>
 8009330:	4603      	mov	r3, r0
 8009332:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009334:	e012      	b.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	3324      	adds	r3, #36	; 0x24
 800933a:	2101      	movs	r1, #1
 800933c:	4618      	mov	r0, r3
 800933e:	f001 fe51 	bl	800afe4 <RCCEx_PLL3_Config>
 8009342:	4603      	mov	r3, r0
 8009344:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009346:	e009      	b.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	75fb      	strb	r3, [r7, #23]
      break;
 800934c:	e006      	b.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800934e:	bf00      	nop
 8009350:	e004      	b.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009352:	bf00      	nop
 8009354:	e002      	b.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009356:	bf00      	nop
 8009358:	e000      	b.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800935a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800935c:	7dfb      	ldrb	r3, [r7, #23]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d10c      	bne.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009362:	4b05      	ldr	r3, [pc, #20]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009366:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009370:	4901      	ldr	r1, [pc, #4]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009372:	4313      	orrs	r3, r2
 8009374:	658b      	str	r3, [r1, #88]	; 0x58
 8009376:	e003      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009378:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800937c:	7dfb      	ldrb	r3, [r7, #23]
 800937e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009388:	2b00      	cmp	r3, #0
 800938a:	d02f      	beq.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009394:	d00e      	beq.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8009396:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800939a:	d814      	bhi.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800939c:	2b00      	cmp	r3, #0
 800939e:	d015      	beq.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80093a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093a4:	d10f      	bne.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093a6:	4baf      	ldr	r3, [pc, #700]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80093a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093aa:	4aae      	ldr	r2, [pc, #696]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80093ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80093b2:	e00c      	b.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	3304      	adds	r3, #4
 80093b8:	2101      	movs	r1, #1
 80093ba:	4618      	mov	r0, r3
 80093bc:	f001 fd60 	bl	800ae80 <RCCEx_PLL2_Config>
 80093c0:	4603      	mov	r3, r0
 80093c2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80093c4:	e003      	b.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	75fb      	strb	r3, [r7, #23]
      break;
 80093ca:	e000      	b.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80093cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093ce:	7dfb      	ldrb	r3, [r7, #23]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d109      	bne.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80093d4:	4ba3      	ldr	r3, [pc, #652]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80093d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093e0:	49a0      	ldr	r1, [pc, #640]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80093e2:	4313      	orrs	r3, r2
 80093e4:	650b      	str	r3, [r1, #80]	; 0x50
 80093e6:	e001      	b.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093e8:	7dfb      	ldrb	r3, [r7, #23]
 80093ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d032      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093fc:	2b03      	cmp	r3, #3
 80093fe:	d81b      	bhi.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009400:	a201      	add	r2, pc, #4	; (adr r2, 8009408 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8009402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009406:	bf00      	nop
 8009408:	0800943f 	.word	0x0800943f
 800940c:	08009419 	.word	0x08009419
 8009410:	08009427 	.word	0x08009427
 8009414:	0800943f 	.word	0x0800943f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009418:	4b92      	ldr	r3, [pc, #584]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800941a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941c:	4a91      	ldr	r2, [pc, #580]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800941e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009422:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009424:	e00c      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	3304      	adds	r3, #4
 800942a:	2102      	movs	r1, #2
 800942c:	4618      	mov	r0, r3
 800942e:	f001 fd27 	bl	800ae80 <RCCEx_PLL2_Config>
 8009432:	4603      	mov	r3, r0
 8009434:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009436:	e003      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	75fb      	strb	r3, [r7, #23]
      break;
 800943c:	e000      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800943e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009440:	7dfb      	ldrb	r3, [r7, #23]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d109      	bne.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009446:	4b87      	ldr	r3, [pc, #540]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800944a:	f023 0203 	bic.w	r2, r3, #3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009452:	4984      	ldr	r1, [pc, #528]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009454:	4313      	orrs	r3, r2
 8009456:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009458:	e001      	b.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800945a:	7dfb      	ldrb	r3, [r7, #23]
 800945c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009466:	2b00      	cmp	r3, #0
 8009468:	f000 8086 	beq.w	8009578 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800946c:	4b7e      	ldr	r3, [pc, #504]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a7d      	ldr	r2, [pc, #500]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009476:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009478:	f7f9 f90e 	bl	8002698 <HAL_GetTick>
 800947c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800947e:	e009      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009480:	f7f9 f90a 	bl	8002698 <HAL_GetTick>
 8009484:	4602      	mov	r2, r0
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	1ad3      	subs	r3, r2, r3
 800948a:	2b64      	cmp	r3, #100	; 0x64
 800948c:	d902      	bls.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800948e:	2303      	movs	r3, #3
 8009490:	75fb      	strb	r3, [r7, #23]
        break;
 8009492:	e005      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009494:	4b74      	ldr	r3, [pc, #464]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800949c:	2b00      	cmp	r3, #0
 800949e:	d0ef      	beq.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80094a0:	7dfb      	ldrb	r3, [r7, #23]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d166      	bne.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80094a6:	4b6f      	ldr	r3, [pc, #444]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80094b0:	4053      	eors	r3, r2
 80094b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d013      	beq.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80094ba:	4b6a      	ldr	r3, [pc, #424]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094c2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80094c4:	4b67      	ldr	r3, [pc, #412]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094c8:	4a66      	ldr	r2, [pc, #408]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094ce:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80094d0:	4b64      	ldr	r3, [pc, #400]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094d4:	4a63      	ldr	r2, [pc, #396]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094da:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80094dc:	4a61      	ldr	r2, [pc, #388]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80094e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094ec:	d115      	bne.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094ee:	f7f9 f8d3 	bl	8002698 <HAL_GetTick>
 80094f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094f4:	e00b      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094f6:	f7f9 f8cf 	bl	8002698 <HAL_GetTick>
 80094fa:	4602      	mov	r2, r0
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	f241 3288 	movw	r2, #5000	; 0x1388
 8009504:	4293      	cmp	r3, r2
 8009506:	d902      	bls.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009508:	2303      	movs	r3, #3
 800950a:	75fb      	strb	r3, [r7, #23]
            break;
 800950c:	e005      	b.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800950e:	4b55      	ldr	r3, [pc, #340]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009512:	f003 0302 	and.w	r3, r3, #2
 8009516:	2b00      	cmp	r3, #0
 8009518:	d0ed      	beq.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800951a:	7dfb      	ldrb	r3, [r7, #23]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d126      	bne.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800952a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800952e:	d10d      	bne.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009530:	4b4c      	ldr	r3, [pc, #304]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800953e:	0919      	lsrs	r1, r3, #4
 8009540:	4b4a      	ldr	r3, [pc, #296]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8009542:	400b      	ands	r3, r1
 8009544:	4947      	ldr	r1, [pc, #284]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009546:	4313      	orrs	r3, r2
 8009548:	610b      	str	r3, [r1, #16]
 800954a:	e005      	b.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800954c:	4b45      	ldr	r3, [pc, #276]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800954e:	691b      	ldr	r3, [r3, #16]
 8009550:	4a44      	ldr	r2, [pc, #272]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009552:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009556:	6113      	str	r3, [r2, #16]
 8009558:	4b42      	ldr	r3, [pc, #264]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800955a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009566:	493f      	ldr	r1, [pc, #252]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009568:	4313      	orrs	r3, r2
 800956a:	670b      	str	r3, [r1, #112]	; 0x70
 800956c:	e004      	b.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800956e:	7dfb      	ldrb	r3, [r7, #23]
 8009570:	75bb      	strb	r3, [r7, #22]
 8009572:	e001      	b.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009574:	7dfb      	ldrb	r3, [r7, #23]
 8009576:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f003 0301 	and.w	r3, r3, #1
 8009580:	2b00      	cmp	r3, #0
 8009582:	f000 8085 	beq.w	8009690 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800958a:	2b28      	cmp	r3, #40	; 0x28
 800958c:	d866      	bhi.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800958e:	a201      	add	r2, pc, #4	; (adr r2, 8009594 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009594:	08009671 	.word	0x08009671
 8009598:	0800965d 	.word	0x0800965d
 800959c:	0800965d 	.word	0x0800965d
 80095a0:	0800965d 	.word	0x0800965d
 80095a4:	0800965d 	.word	0x0800965d
 80095a8:	0800965d 	.word	0x0800965d
 80095ac:	0800965d 	.word	0x0800965d
 80095b0:	0800965d 	.word	0x0800965d
 80095b4:	08009639 	.word	0x08009639
 80095b8:	0800965d 	.word	0x0800965d
 80095bc:	0800965d 	.word	0x0800965d
 80095c0:	0800965d 	.word	0x0800965d
 80095c4:	0800965d 	.word	0x0800965d
 80095c8:	0800965d 	.word	0x0800965d
 80095cc:	0800965d 	.word	0x0800965d
 80095d0:	0800965d 	.word	0x0800965d
 80095d4:	0800964b 	.word	0x0800964b
 80095d8:	0800965d 	.word	0x0800965d
 80095dc:	0800965d 	.word	0x0800965d
 80095e0:	0800965d 	.word	0x0800965d
 80095e4:	0800965d 	.word	0x0800965d
 80095e8:	0800965d 	.word	0x0800965d
 80095ec:	0800965d 	.word	0x0800965d
 80095f0:	0800965d 	.word	0x0800965d
 80095f4:	08009671 	.word	0x08009671
 80095f8:	0800965d 	.word	0x0800965d
 80095fc:	0800965d 	.word	0x0800965d
 8009600:	0800965d 	.word	0x0800965d
 8009604:	0800965d 	.word	0x0800965d
 8009608:	0800965d 	.word	0x0800965d
 800960c:	0800965d 	.word	0x0800965d
 8009610:	0800965d 	.word	0x0800965d
 8009614:	08009671 	.word	0x08009671
 8009618:	0800965d 	.word	0x0800965d
 800961c:	0800965d 	.word	0x0800965d
 8009620:	0800965d 	.word	0x0800965d
 8009624:	0800965d 	.word	0x0800965d
 8009628:	0800965d 	.word	0x0800965d
 800962c:	0800965d 	.word	0x0800965d
 8009630:	0800965d 	.word	0x0800965d
 8009634:	08009671 	.word	0x08009671
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	3304      	adds	r3, #4
 800963c:	2101      	movs	r1, #1
 800963e:	4618      	mov	r0, r3
 8009640:	f001 fc1e 	bl	800ae80 <RCCEx_PLL2_Config>
 8009644:	4603      	mov	r3, r0
 8009646:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009648:	e013      	b.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	3324      	adds	r3, #36	; 0x24
 800964e:	2101      	movs	r1, #1
 8009650:	4618      	mov	r0, r3
 8009652:	f001 fcc7 	bl	800afe4 <RCCEx_PLL3_Config>
 8009656:	4603      	mov	r3, r0
 8009658:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800965a:	e00a      	b.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	75fb      	strb	r3, [r7, #23]
      break;
 8009660:	e007      	b.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009662:	bf00      	nop
 8009664:	58024400 	.word	0x58024400
 8009668:	58024800 	.word	0x58024800
 800966c:	00ffffcf 	.word	0x00ffffcf
      break;
 8009670:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009672:	7dfb      	ldrb	r3, [r7, #23]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d109      	bne.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009678:	4b96      	ldr	r3, [pc, #600]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800967a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800967c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009684:	4993      	ldr	r1, [pc, #588]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009686:	4313      	orrs	r3, r2
 8009688:	654b      	str	r3, [r1, #84]	; 0x54
 800968a:	e001      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800968c:	7dfb      	ldrb	r3, [r7, #23]
 800968e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f003 0302 	and.w	r3, r3, #2
 8009698:	2b00      	cmp	r3, #0
 800969a:	d038      	beq.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096a0:	2b05      	cmp	r3, #5
 80096a2:	d821      	bhi.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80096a4:	a201      	add	r2, pc, #4	; (adr r2, 80096ac <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80096a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096aa:	bf00      	nop
 80096ac:	080096ef 	.word	0x080096ef
 80096b0:	080096c5 	.word	0x080096c5
 80096b4:	080096d7 	.word	0x080096d7
 80096b8:	080096ef 	.word	0x080096ef
 80096bc:	080096ef 	.word	0x080096ef
 80096c0:	080096ef 	.word	0x080096ef
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	3304      	adds	r3, #4
 80096c8:	2101      	movs	r1, #1
 80096ca:	4618      	mov	r0, r3
 80096cc:	f001 fbd8 	bl	800ae80 <RCCEx_PLL2_Config>
 80096d0:	4603      	mov	r3, r0
 80096d2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80096d4:	e00c      	b.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	3324      	adds	r3, #36	; 0x24
 80096da:	2101      	movs	r1, #1
 80096dc:	4618      	mov	r0, r3
 80096de:	f001 fc81 	bl	800afe4 <RCCEx_PLL3_Config>
 80096e2:	4603      	mov	r3, r0
 80096e4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80096e6:	e003      	b.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096e8:	2301      	movs	r3, #1
 80096ea:	75fb      	strb	r3, [r7, #23]
      break;
 80096ec:	e000      	b.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80096ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096f0:	7dfb      	ldrb	r3, [r7, #23]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d109      	bne.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80096f6:	4b77      	ldr	r3, [pc, #476]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80096f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096fa:	f023 0207 	bic.w	r2, r3, #7
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009702:	4974      	ldr	r1, [pc, #464]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009704:	4313      	orrs	r3, r2
 8009706:	654b      	str	r3, [r1, #84]	; 0x54
 8009708:	e001      	b.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800970a:	7dfb      	ldrb	r3, [r7, #23]
 800970c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f003 0304 	and.w	r3, r3, #4
 8009716:	2b00      	cmp	r3, #0
 8009718:	d03a      	beq.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009720:	2b05      	cmp	r3, #5
 8009722:	d821      	bhi.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009724:	a201      	add	r2, pc, #4	; (adr r2, 800972c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972a:	bf00      	nop
 800972c:	0800976f 	.word	0x0800976f
 8009730:	08009745 	.word	0x08009745
 8009734:	08009757 	.word	0x08009757
 8009738:	0800976f 	.word	0x0800976f
 800973c:	0800976f 	.word	0x0800976f
 8009740:	0800976f 	.word	0x0800976f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	3304      	adds	r3, #4
 8009748:	2101      	movs	r1, #1
 800974a:	4618      	mov	r0, r3
 800974c:	f001 fb98 	bl	800ae80 <RCCEx_PLL2_Config>
 8009750:	4603      	mov	r3, r0
 8009752:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009754:	e00c      	b.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	3324      	adds	r3, #36	; 0x24
 800975a:	2101      	movs	r1, #1
 800975c:	4618      	mov	r0, r3
 800975e:	f001 fc41 	bl	800afe4 <RCCEx_PLL3_Config>
 8009762:	4603      	mov	r3, r0
 8009764:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009766:	e003      	b.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	75fb      	strb	r3, [r7, #23]
      break;
 800976c:	e000      	b.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800976e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009770:	7dfb      	ldrb	r3, [r7, #23]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d10a      	bne.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009776:	4b57      	ldr	r3, [pc, #348]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800977a:	f023 0207 	bic.w	r2, r3, #7
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009784:	4953      	ldr	r1, [pc, #332]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009786:	4313      	orrs	r3, r2
 8009788:	658b      	str	r3, [r1, #88]	; 0x58
 800978a:	e001      	b.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800978c:	7dfb      	ldrb	r3, [r7, #23]
 800978e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f003 0320 	and.w	r3, r3, #32
 8009798:	2b00      	cmp	r3, #0
 800979a:	d04b      	beq.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097a6:	d02e      	beq.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80097a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097ac:	d828      	bhi.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80097ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097b2:	d02a      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80097b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097b8:	d822      	bhi.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80097ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097be:	d026      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80097c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097c4:	d81c      	bhi.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80097c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097ca:	d010      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80097cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097d0:	d816      	bhi.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d01d      	beq.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80097d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097da:	d111      	bne.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	3304      	adds	r3, #4
 80097e0:	2100      	movs	r1, #0
 80097e2:	4618      	mov	r0, r3
 80097e4:	f001 fb4c 	bl	800ae80 <RCCEx_PLL2_Config>
 80097e8:	4603      	mov	r3, r0
 80097ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80097ec:	e012      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	3324      	adds	r3, #36	; 0x24
 80097f2:	2102      	movs	r1, #2
 80097f4:	4618      	mov	r0, r3
 80097f6:	f001 fbf5 	bl	800afe4 <RCCEx_PLL3_Config>
 80097fa:	4603      	mov	r3, r0
 80097fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80097fe:	e009      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	75fb      	strb	r3, [r7, #23]
      break;
 8009804:	e006      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009806:	bf00      	nop
 8009808:	e004      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800980a:	bf00      	nop
 800980c:	e002      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800980e:	bf00      	nop
 8009810:	e000      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009814:	7dfb      	ldrb	r3, [r7, #23]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10a      	bne.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800981a:	4b2e      	ldr	r3, [pc, #184]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800981c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800981e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009828:	492a      	ldr	r1, [pc, #168]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800982a:	4313      	orrs	r3, r2
 800982c:	654b      	str	r3, [r1, #84]	; 0x54
 800982e:	e001      	b.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009830:	7dfb      	ldrb	r3, [r7, #23]
 8009832:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800983c:	2b00      	cmp	r3, #0
 800983e:	d04d      	beq.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009846:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800984a:	d02e      	beq.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800984c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009850:	d828      	bhi.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009856:	d02a      	beq.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800985c:	d822      	bhi.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800985e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009862:	d026      	beq.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009864:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009868:	d81c      	bhi.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800986a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800986e:	d010      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009874:	d816      	bhi.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009876:	2b00      	cmp	r3, #0
 8009878:	d01d      	beq.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800987a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800987e:	d111      	bne.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	3304      	adds	r3, #4
 8009884:	2100      	movs	r1, #0
 8009886:	4618      	mov	r0, r3
 8009888:	f001 fafa 	bl	800ae80 <RCCEx_PLL2_Config>
 800988c:	4603      	mov	r3, r0
 800988e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009890:	e012      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	3324      	adds	r3, #36	; 0x24
 8009896:	2102      	movs	r1, #2
 8009898:	4618      	mov	r0, r3
 800989a:	f001 fba3 	bl	800afe4 <RCCEx_PLL3_Config>
 800989e:	4603      	mov	r3, r0
 80098a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80098a2:	e009      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098a4:	2301      	movs	r3, #1
 80098a6:	75fb      	strb	r3, [r7, #23]
      break;
 80098a8:	e006      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80098aa:	bf00      	nop
 80098ac:	e004      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80098ae:	bf00      	nop
 80098b0:	e002      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80098b2:	bf00      	nop
 80098b4:	e000      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80098b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098b8:	7dfb      	ldrb	r3, [r7, #23]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10c      	bne.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80098be:	4b05      	ldr	r3, [pc, #20]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80098c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80098cc:	4901      	ldr	r1, [pc, #4]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80098ce:	4313      	orrs	r3, r2
 80098d0:	658b      	str	r3, [r1, #88]	; 0x58
 80098d2:	e003      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80098d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098d8:	7dfb      	ldrb	r3, [r7, #23]
 80098da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d04b      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80098ee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80098f2:	d02e      	beq.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80098f4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80098f8:	d828      	bhi.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80098fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098fe:	d02a      	beq.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009904:	d822      	bhi.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009906:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800990a:	d026      	beq.n	800995a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800990c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009910:	d81c      	bhi.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009912:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009916:	d010      	beq.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009918:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800991c:	d816      	bhi.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800991e:	2b00      	cmp	r3, #0
 8009920:	d01d      	beq.n	800995e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009926:	d111      	bne.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	3304      	adds	r3, #4
 800992c:	2100      	movs	r1, #0
 800992e:	4618      	mov	r0, r3
 8009930:	f001 faa6 	bl	800ae80 <RCCEx_PLL2_Config>
 8009934:	4603      	mov	r3, r0
 8009936:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009938:	e012      	b.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	3324      	adds	r3, #36	; 0x24
 800993e:	2102      	movs	r1, #2
 8009940:	4618      	mov	r0, r3
 8009942:	f001 fb4f 	bl	800afe4 <RCCEx_PLL3_Config>
 8009946:	4603      	mov	r3, r0
 8009948:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800994a:	e009      	b.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	75fb      	strb	r3, [r7, #23]
      break;
 8009950:	e006      	b.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009952:	bf00      	nop
 8009954:	e004      	b.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009956:	bf00      	nop
 8009958:	e002      	b.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800995a:	bf00      	nop
 800995c:	e000      	b.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800995e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009960:	7dfb      	ldrb	r3, [r7, #23]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d10a      	bne.n	800997c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009966:	4b9d      	ldr	r3, [pc, #628]	; (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800996a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009974:	4999      	ldr	r1, [pc, #612]	; (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009976:	4313      	orrs	r3, r2
 8009978:	658b      	str	r3, [r1, #88]	; 0x58
 800997a:	e001      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800997c:	7dfb      	ldrb	r3, [r7, #23]
 800997e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f003 0308 	and.w	r3, r3, #8
 8009988:	2b00      	cmp	r3, #0
 800998a:	d01a      	beq.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009996:	d10a      	bne.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	3324      	adds	r3, #36	; 0x24
 800999c:	2102      	movs	r1, #2
 800999e:	4618      	mov	r0, r3
 80099a0:	f001 fb20 	bl	800afe4 <RCCEx_PLL3_Config>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80099ae:	4b8b      	ldr	r3, [pc, #556]	; (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80099b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099bc:	4987      	ldr	r1, [pc, #540]	; (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80099be:	4313      	orrs	r3, r2
 80099c0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f003 0310 	and.w	r3, r3, #16
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d01a      	beq.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80099d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099d8:	d10a      	bne.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	3324      	adds	r3, #36	; 0x24
 80099de:	2102      	movs	r1, #2
 80099e0:	4618      	mov	r0, r3
 80099e2:	f001 faff 	bl	800afe4 <RCCEx_PLL3_Config>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d001      	beq.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80099f0:	4b7a      	ldr	r3, [pc, #488]	; (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80099f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80099fe:	4977      	ldr	r1, [pc, #476]	; (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a00:	4313      	orrs	r3, r2
 8009a02:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d034      	beq.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009a16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a1a:	d01d      	beq.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009a1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a20:	d817      	bhi.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d003      	beq.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a2a:	d009      	beq.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009a2c:	e011      	b.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	3304      	adds	r3, #4
 8009a32:	2100      	movs	r1, #0
 8009a34:	4618      	mov	r0, r3
 8009a36:	f001 fa23 	bl	800ae80 <RCCEx_PLL2_Config>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009a3e:	e00c      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	3324      	adds	r3, #36	; 0x24
 8009a44:	2102      	movs	r1, #2
 8009a46:	4618      	mov	r0, r3
 8009a48:	f001 facc 	bl	800afe4 <RCCEx_PLL3_Config>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009a50:	e003      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	75fb      	strb	r3, [r7, #23]
      break;
 8009a56:	e000      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009a58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a5a:	7dfb      	ldrb	r3, [r7, #23]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d10a      	bne.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009a60:	4b5e      	ldr	r3, [pc, #376]	; (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009a6e:	495b      	ldr	r1, [pc, #364]	; (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a70:	4313      	orrs	r3, r2
 8009a72:	658b      	str	r3, [r1, #88]	; 0x58
 8009a74:	e001      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a76:	7dfb      	ldrb	r3, [r7, #23]
 8009a78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d033      	beq.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009a90:	d01c      	beq.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8009a92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009a96:	d816      	bhi.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009a98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a9c:	d003      	beq.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009a9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009aa2:	d007      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009aa4:	e00f      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009aa6:	4b4d      	ldr	r3, [pc, #308]	; (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aaa:	4a4c      	ldr	r2, [pc, #304]	; (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009ab2:	e00c      	b.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	3324      	adds	r3, #36	; 0x24
 8009ab8:	2101      	movs	r1, #1
 8009aba:	4618      	mov	r0, r3
 8009abc:	f001 fa92 	bl	800afe4 <RCCEx_PLL3_Config>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009ac4:	e003      	b.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	75fb      	strb	r3, [r7, #23]
      break;
 8009aca:	e000      	b.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009acc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ace:	7dfb      	ldrb	r3, [r7, #23]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d10a      	bne.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009ad4:	4b41      	ldr	r3, [pc, #260]	; (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ad8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ae2:	493e      	ldr	r1, [pc, #248]	; (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	654b      	str	r3, [r1, #84]	; 0x54
 8009ae8:	e001      	b.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aea:	7dfb      	ldrb	r3, [r7, #23]
 8009aec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d029      	beq.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d003      	beq.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b06:	d007      	beq.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009b08:	e00f      	b.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b0a:	4b34      	ldr	r3, [pc, #208]	; (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b0e:	4a33      	ldr	r2, [pc, #204]	; (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009b16:	e00b      	b.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	3304      	adds	r3, #4
 8009b1c:	2102      	movs	r1, #2
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f001 f9ae 	bl	800ae80 <RCCEx_PLL2_Config>
 8009b24:	4603      	mov	r3, r0
 8009b26:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009b28:	e002      	b.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	75fb      	strb	r3, [r7, #23]
      break;
 8009b2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b30:	7dfb      	ldrb	r3, [r7, #23]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d109      	bne.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009b36:	4b29      	ldr	r3, [pc, #164]	; (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b42:	4926      	ldr	r1, [pc, #152]	; (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b44:	4313      	orrs	r3, r2
 8009b46:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009b48:	e001      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b4a:	7dfb      	ldrb	r3, [r7, #23]
 8009b4c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00a      	beq.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	3324      	adds	r3, #36	; 0x24
 8009b5e:	2102      	movs	r1, #2
 8009b60:	4618      	mov	r0, r3
 8009b62:	f001 fa3f 	bl	800afe4 <RCCEx_PLL3_Config>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d001      	beq.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d033      	beq.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b84:	d017      	beq.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009b86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b8a:	d811      	bhi.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b90:	d013      	beq.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009b92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b96:	d80b      	bhi.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d010      	beq.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8009b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ba0:	d106      	bne.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ba2:	4b0e      	ldr	r3, [pc, #56]	; (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba6:	4a0d      	ldr	r2, [pc, #52]	; (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009bae:	e007      	b.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8009bb4:	e004      	b.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009bb6:	bf00      	nop
 8009bb8:	e002      	b.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009bba:	bf00      	nop
 8009bbc:	e000      	b.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009bbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bc0:	7dfb      	ldrb	r3, [r7, #23]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d10c      	bne.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009bc6:	4b05      	ldr	r3, [pc, #20]	; (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bd2:	4902      	ldr	r1, [pc, #8]	; (8009bdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	654b      	str	r3, [r1, #84]	; 0x54
 8009bd8:	e004      	b.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8009bda:	bf00      	nop
 8009bdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009be0:	7dfb      	ldrb	r3, [r7, #23]
 8009be2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d008      	beq.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009bf0:	4b31      	ldr	r3, [pc, #196]	; (8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bf4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bfc:	492e      	ldr	r1, [pc, #184]	; (8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d009      	beq.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009c0e:	4b2a      	ldr	r3, [pc, #168]	; (8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009c1c:	4926      	ldr	r1, [pc, #152]	; (8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d008      	beq.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009c2e:	4b22      	ldr	r3, [pc, #136]	; (8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c32:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c3a:	491f      	ldr	r1, [pc, #124]	; (8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d00d      	beq.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009c4c:	4b1a      	ldr	r3, [pc, #104]	; (8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	4a19      	ldr	r2, [pc, #100]	; (8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009c56:	6113      	str	r3, [r2, #16]
 8009c58:	4b17      	ldr	r3, [pc, #92]	; (8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c5a:	691a      	ldr	r2, [r3, #16]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009c62:	4915      	ldr	r1, [pc, #84]	; (8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c64:	4313      	orrs	r3, r2
 8009c66:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	da08      	bge.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009c70:	4b11      	ldr	r3, [pc, #68]	; (8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c74:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c7c:	490e      	ldr	r1, [pc, #56]	; (8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d009      	beq.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009c8e:	4b0a      	ldr	r3, [pc, #40]	; (8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c9c:	4906      	ldr	r1, [pc, #24]	; (8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009ca2:	7dbb      	ldrb	r3, [r7, #22]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d101      	bne.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	e000      	b.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3718      	adds	r7, #24
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	58024400 	.word	0x58024400

08009cbc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b090      	sub	sp, #64	; 0x40
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cca:	f040 8095 	bne.w	8009df8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009cce:	4b97      	ldr	r3, [pc, #604]	; (8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cd2:	f003 0307 	and.w	r3, r3, #7
 8009cd6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cda:	2b04      	cmp	r3, #4
 8009cdc:	f200 8088 	bhi.w	8009df0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8009ce0:	a201      	add	r2, pc, #4	; (adr r2, 8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8009ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce6:	bf00      	nop
 8009ce8:	08009cfd 	.word	0x08009cfd
 8009cec:	08009d25 	.word	0x08009d25
 8009cf0:	08009d4d 	.word	0x08009d4d
 8009cf4:	08009de9 	.word	0x08009de9
 8009cf8:	08009d75 	.word	0x08009d75
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009cfc:	4b8b      	ldr	r3, [pc, #556]	; (8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d08:	d108      	bne.n	8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f000 ff64 	bl	800abdc <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009d18:	f000 bc94 	b.w	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d20:	f000 bc90 	b.w	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d24:	4b81      	ldr	r3, [pc, #516]	; (8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d30:	d108      	bne.n	8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d32:	f107 0318 	add.w	r3, r7, #24
 8009d36:	4618      	mov	r0, r3
 8009d38:	f000 fca8 	bl	800a68c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009d40:	f000 bc80 	b.w	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009d44:	2300      	movs	r3, #0
 8009d46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d48:	f000 bc7c 	b.w	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d4c:	4b77      	ldr	r3, [pc, #476]	; (8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d58:	d108      	bne.n	8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d5a:	f107 030c 	add.w	r3, r7, #12
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f000 fde8 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009d68:	f000 bc6c 	b.w	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d70:	f000 bc68 	b.w	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009d74:	4b6d      	ldr	r3, [pc, #436]	; (8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009d7c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d7e:	4b6b      	ldr	r3, [pc, #428]	; (8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f003 0304 	and.w	r3, r3, #4
 8009d86:	2b04      	cmp	r3, #4
 8009d88:	d10c      	bne.n	8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8009d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d109      	bne.n	8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d90:	4b66      	ldr	r3, [pc, #408]	; (8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	08db      	lsrs	r3, r3, #3
 8009d96:	f003 0303 	and.w	r3, r3, #3
 8009d9a:	4a65      	ldr	r2, [pc, #404]	; (8009f30 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009da0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009da2:	e01f      	b.n	8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009da4:	4b61      	ldr	r3, [pc, #388]	; (8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009db0:	d106      	bne.n	8009dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8009db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009db4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009db8:	d102      	bne.n	8009dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009dba:	4b5e      	ldr	r3, [pc, #376]	; (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009dbe:	e011      	b.n	8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009dc0:	4b5a      	ldr	r3, [pc, #360]	; (8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009dcc:	d106      	bne.n	8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8009dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dd4:	d102      	bne.n	8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009dd6:	4b58      	ldr	r3, [pc, #352]	; (8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009dda:	e003      	b.n	8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009de0:	f000 bc30 	b.w	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009de4:	f000 bc2e 	b.w	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009de8:	4b54      	ldr	r3, [pc, #336]	; (8009f3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009dea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009dec:	f000 bc2a 	b.w	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8009df0:	2300      	movs	r3, #0
 8009df2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009df4:	f000 bc26 	b.w	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dfe:	f040 809f 	bne.w	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009e02:	4b4a      	ldr	r3, [pc, #296]	; (8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e06:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009e0a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e12:	d04d      	beq.n	8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8009e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e1a:	f200 8084 	bhi.w	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e20:	2bc0      	cmp	r3, #192	; 0xc0
 8009e22:	d07d      	beq.n	8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8009e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e26:	2bc0      	cmp	r3, #192	; 0xc0
 8009e28:	d87d      	bhi.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2c:	2b80      	cmp	r3, #128	; 0x80
 8009e2e:	d02d      	beq.n	8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8009e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e32:	2b80      	cmp	r3, #128	; 0x80
 8009e34:	d877      	bhi.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d003      	beq.n	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8009e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3e:	2b40      	cmp	r3, #64	; 0x40
 8009e40:	d012      	beq.n	8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009e42:	e070      	b.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e44:	4b39      	ldr	r3, [pc, #228]	; (8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e50:	d107      	bne.n	8009e62 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e56:	4618      	mov	r0, r3
 8009e58:	f000 fec0 	bl	800abdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009e60:	e3f0      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009e62:	2300      	movs	r3, #0
 8009e64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e66:	e3ed      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e68:	4b30      	ldr	r3, [pc, #192]	; (8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e74:	d107      	bne.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e76:	f107 0318 	add.w	r3, r7, #24
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f000 fc06 	bl	800a68c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009e80:	69bb      	ldr	r3, [r7, #24]
 8009e82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009e84:	e3de      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009e86:	2300      	movs	r3, #0
 8009e88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e8a:	e3db      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e8c:	4b27      	ldr	r3, [pc, #156]	; (8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e98:	d107      	bne.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e9a:	f107 030c 	add.w	r3, r7, #12
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f000 fd48 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009ea8:	e3cc      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009eae:	e3c9      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009eb0:	4b1e      	ldr	r3, [pc, #120]	; (8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009eb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009eb8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009eba:	4b1c      	ldr	r3, [pc, #112]	; (8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f003 0304 	and.w	r3, r3, #4
 8009ec2:	2b04      	cmp	r3, #4
 8009ec4:	d10c      	bne.n	8009ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8009ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d109      	bne.n	8009ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ecc:	4b17      	ldr	r3, [pc, #92]	; (8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	08db      	lsrs	r3, r3, #3
 8009ed2:	f003 0303 	and.w	r3, r3, #3
 8009ed6:	4a16      	ldr	r2, [pc, #88]	; (8009f30 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8009edc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ede:	e01e      	b.n	8009f1e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ee0:	4b12      	ldr	r3, [pc, #72]	; (8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eec:	d106      	bne.n	8009efc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8009eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ef4:	d102      	bne.n	8009efc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009ef6:	4b0f      	ldr	r3, [pc, #60]	; (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009efa:	e010      	b.n	8009f1e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009efc:	4b0b      	ldr	r3, [pc, #44]	; (8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f08:	d106      	bne.n	8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8009f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f10:	d102      	bne.n	8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009f12:	4b09      	ldr	r3, [pc, #36]	; (8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009f14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f16:	e002      	b.n	8009f1e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009f1c:	e392      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009f1e:	e391      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009f20:	4b06      	ldr	r3, [pc, #24]	; (8009f3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009f22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f24:	e38e      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8009f26:	2300      	movs	r3, #0
 8009f28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f2a:	e38b      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009f2c:	58024400 	.word	0x58024400
 8009f30:	03d09000 	.word	0x03d09000
 8009f34:	003d0900 	.word	0x003d0900
 8009f38:	017d7840 	.word	0x017d7840
 8009f3c:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f46:	f040 809c 	bne.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009f4a:	4b9d      	ldr	r3, [pc, #628]	; (800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f4e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009f52:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009f5a:	d054      	beq.n	800a006 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8009f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009f62:	f200 808b 	bhi.w	800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8009f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f68:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009f6c:	f000 8083 	beq.w	800a076 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8009f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f72:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009f76:	f200 8081 	bhi.w	800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8009f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f80:	d02f      	beq.n	8009fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8009f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f88:	d878      	bhi.n	800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8009f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d004      	beq.n	8009f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8009f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f96:	d012      	beq.n	8009fbe <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8009f98:	e070      	b.n	800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f9a:	4b89      	ldr	r3, [pc, #548]	; (800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fa2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fa6:	d107      	bne.n	8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fac:	4618      	mov	r0, r3
 8009fae:	f000 fe15 	bl	800abdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009fb6:	e345      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fbc:	e342      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009fbe:	4b80      	ldr	r3, [pc, #512]	; (800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009fca:	d107      	bne.n	8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fcc:	f107 0318 	add.w	r3, r7, #24
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f000 fb5b 	bl	800a68c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009fda:	e333      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fe0:	e330      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009fe2:	4b77      	ldr	r3, [pc, #476]	; (800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fee:	d107      	bne.n	800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ff0:	f107 030c 	add.w	r3, r7, #12
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f000 fc9d 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009ffe:	e321      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a000:	2300      	movs	r3, #0
 800a002:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a004:	e31e      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a006:	4b6e      	ldr	r3, [pc, #440]	; (800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a00a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a00e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a010:	4b6b      	ldr	r3, [pc, #428]	; (800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f003 0304 	and.w	r3, r3, #4
 800a018:	2b04      	cmp	r3, #4
 800a01a:	d10c      	bne.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800a01c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d109      	bne.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a022:	4b67      	ldr	r3, [pc, #412]	; (800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	08db      	lsrs	r3, r3, #3
 800a028:	f003 0303 	and.w	r3, r3, #3
 800a02c:	4a65      	ldr	r2, [pc, #404]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a02e:	fa22 f303 	lsr.w	r3, r2, r3
 800a032:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a034:	e01e      	b.n	800a074 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a036:	4b62      	ldr	r3, [pc, #392]	; (800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a03e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a042:	d106      	bne.n	800a052 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a046:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a04a:	d102      	bne.n	800a052 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a04c:	4b5e      	ldr	r3, [pc, #376]	; (800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a04e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a050:	e010      	b.n	800a074 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a052:	4b5b      	ldr	r3, [pc, #364]	; (800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a05a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a05e:	d106      	bne.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a062:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a066:	d102      	bne.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a068:	4b58      	ldr	r3, [pc, #352]	; (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a06a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a06c:	e002      	b.n	800a074 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a06e:	2300      	movs	r3, #0
 800a070:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a072:	e2e7      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a074:	e2e6      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a076:	4b56      	ldr	r3, [pc, #344]	; (800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a078:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a07a:	e2e3      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a07c:	2300      	movs	r3, #0
 800a07e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a080:	e2e0      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a088:	f040 80a7 	bne.w	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a08c:	4b4c      	ldr	r3, [pc, #304]	; (800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a08e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a090:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a094:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a098:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a09c:	d055      	beq.n	800a14a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a0a4:	f200 8096 	bhi.w	800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a0ae:	f000 8084 	beq.w	800a1ba <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a0b8:	f200 808c 	bhi.w	800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0c2:	d030      	beq.n	800a126 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0ca:	f200 8083 	bhi.w	800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d004      	beq.n	800a0de <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a0da:	d012      	beq.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a0dc:	e07a      	b.n	800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a0de:	4b38      	ldr	r3, [pc, #224]	; (800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0ea:	d107      	bne.n	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f000 fd73 	bl	800abdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a0fa:	e2a3      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a100:	e2a0      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a102:	4b2f      	ldr	r3, [pc, #188]	; (800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a10a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a10e:	d107      	bne.n	800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a110:	f107 0318 	add.w	r3, r7, #24
 800a114:	4618      	mov	r0, r3
 800a116:	f000 fab9 	bl	800a68c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a11e:	e291      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a120:	2300      	movs	r3, #0
 800a122:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a124:	e28e      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a126:	4b26      	ldr	r3, [pc, #152]	; (800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a12e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a132:	d107      	bne.n	800a144 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a134:	f107 030c 	add.w	r3, r7, #12
 800a138:	4618      	mov	r0, r3
 800a13a:	f000 fbfb 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a142:	e27f      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a144:	2300      	movs	r3, #0
 800a146:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a148:	e27c      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a14a:	4b1d      	ldr	r3, [pc, #116]	; (800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a14c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a14e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a152:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a154:	4b1a      	ldr	r3, [pc, #104]	; (800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f003 0304 	and.w	r3, r3, #4
 800a15c:	2b04      	cmp	r3, #4
 800a15e:	d10c      	bne.n	800a17a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a162:	2b00      	cmp	r3, #0
 800a164:	d109      	bne.n	800a17a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a166:	4b16      	ldr	r3, [pc, #88]	; (800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	08db      	lsrs	r3, r3, #3
 800a16c:	f003 0303 	and.w	r3, r3, #3
 800a170:	4a14      	ldr	r2, [pc, #80]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a172:	fa22 f303 	lsr.w	r3, r2, r3
 800a176:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a178:	e01e      	b.n	800a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a17a:	4b11      	ldr	r3, [pc, #68]	; (800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a186:	d106      	bne.n	800a196 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a18a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a18e:	d102      	bne.n	800a196 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a190:	4b0d      	ldr	r3, [pc, #52]	; (800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a192:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a194:	e010      	b.n	800a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a196:	4b0a      	ldr	r3, [pc, #40]	; (800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a19e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1a2:	d106      	bne.n	800a1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800a1a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1aa:	d102      	bne.n	800a1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a1ac:	4b07      	ldr	r3, [pc, #28]	; (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1b0:	e002      	b.n	800a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a1b6:	e245      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a1b8:	e244      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a1ba:	4b05      	ldr	r3, [pc, #20]	; (800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a1bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1be:	e241      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a1c0:	58024400 	.word	0x58024400
 800a1c4:	03d09000 	.word	0x03d09000
 800a1c8:	003d0900 	.word	0x003d0900
 800a1cc:	017d7840 	.word	0x017d7840
 800a1d0:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1d8:	e234      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1e0:	f040 809c 	bne.w	800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a1e4:	4b9b      	ldr	r3, [pc, #620]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a1e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1e8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a1ec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1f4:	d054      	beq.n	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800a1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1fc:	f200 808b 	bhi.w	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a202:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a206:	f000 8083 	beq.w	800a310 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800a20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a210:	f200 8081 	bhi.w	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a21a:	d02f      	beq.n	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800a21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a222:	d878      	bhi.n	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a226:	2b00      	cmp	r3, #0
 800a228:	d004      	beq.n	800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800a22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a22c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a230:	d012      	beq.n	800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800a232:	e070      	b.n	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a234:	4b87      	ldr	r3, [pc, #540]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a23c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a240:	d107      	bne.n	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a246:	4618      	mov	r0, r3
 800a248:	f000 fcc8 	bl	800abdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a250:	e1f8      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a252:	2300      	movs	r3, #0
 800a254:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a256:	e1f5      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a258:	4b7e      	ldr	r3, [pc, #504]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a260:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a264:	d107      	bne.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a266:	f107 0318 	add.w	r3, r7, #24
 800a26a:	4618      	mov	r0, r3
 800a26c:	f000 fa0e 	bl	800a68c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a270:	69bb      	ldr	r3, [r7, #24]
 800a272:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a274:	e1e6      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a276:	2300      	movs	r3, #0
 800a278:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a27a:	e1e3      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a27c:	4b75      	ldr	r3, [pc, #468]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a284:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a288:	d107      	bne.n	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a28a:	f107 030c 	add.w	r3, r7, #12
 800a28e:	4618      	mov	r0, r3
 800a290:	f000 fb50 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a298:	e1d4      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a29a:	2300      	movs	r3, #0
 800a29c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a29e:	e1d1      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a2a0:	4b6c      	ldr	r3, [pc, #432]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a2a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a2a8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a2aa:	4b6a      	ldr	r3, [pc, #424]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f003 0304 	and.w	r3, r3, #4
 800a2b2:	2b04      	cmp	r3, #4
 800a2b4:	d10c      	bne.n	800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a2b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d109      	bne.n	800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a2bc:	4b65      	ldr	r3, [pc, #404]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	08db      	lsrs	r3, r3, #3
 800a2c2:	f003 0303 	and.w	r3, r3, #3
 800a2c6:	4a64      	ldr	r2, [pc, #400]	; (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800a2c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a2cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2ce:	e01e      	b.n	800a30e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a2d0:	4b60      	ldr	r3, [pc, #384]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2dc:	d106      	bne.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800a2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2e4:	d102      	bne.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a2e6:	4b5d      	ldr	r3, [pc, #372]	; (800a45c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800a2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2ea:	e010      	b.n	800a30e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a2ec:	4b59      	ldr	r3, [pc, #356]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2f8:	d106      	bne.n	800a308 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800a2fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a300:	d102      	bne.n	800a308 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a302:	4b57      	ldr	r3, [pc, #348]	; (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800a304:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a306:	e002      	b.n	800a30e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a308:	2300      	movs	r3, #0
 800a30a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a30c:	e19a      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a30e:	e199      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a310:	4b54      	ldr	r3, [pc, #336]	; (800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a312:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a314:	e196      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a316:	2300      	movs	r3, #0
 800a318:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a31a:	e193      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a322:	d173      	bne.n	800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a324:	4b4b      	ldr	r3, [pc, #300]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a328:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a32c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a330:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a334:	d02f      	beq.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800a336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a338:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a33c:	d863      	bhi.n	800a406 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800a33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a340:	2b00      	cmp	r3, #0
 800a342:	d004      	beq.n	800a34e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800a344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a34a:	d012      	beq.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800a34c:	e05b      	b.n	800a406 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a34e:	4b41      	ldr	r3, [pc, #260]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a356:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a35a:	d107      	bne.n	800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a35c:	f107 0318 	add.w	r3, r7, #24
 800a360:	4618      	mov	r0, r3
 800a362:	f000 f993 	bl	800a68c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a36a:	e16b      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a36c:	2300      	movs	r3, #0
 800a36e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a370:	e168      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a372:	4b38      	ldr	r3, [pc, #224]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a37a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a37e:	d107      	bne.n	800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a380:	f107 030c 	add.w	r3, r7, #12
 800a384:	4618      	mov	r0, r3
 800a386:	f000 fad5 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a38e:	e159      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a390:	2300      	movs	r3, #0
 800a392:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a394:	e156      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a396:	4b2f      	ldr	r3, [pc, #188]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a39a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a39e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a3a0:	4b2c      	ldr	r3, [pc, #176]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f003 0304 	and.w	r3, r3, #4
 800a3a8:	2b04      	cmp	r3, #4
 800a3aa:	d10c      	bne.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800a3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d109      	bne.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a3b2:	4b28      	ldr	r3, [pc, #160]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	08db      	lsrs	r3, r3, #3
 800a3b8:	f003 0303 	and.w	r3, r3, #3
 800a3bc:	4a26      	ldr	r2, [pc, #152]	; (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800a3be:	fa22 f303 	lsr.w	r3, r2, r3
 800a3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3c4:	e01e      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3c6:	4b23      	ldr	r3, [pc, #140]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3d2:	d106      	bne.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800a3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3da:	d102      	bne.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a3dc:	4b1f      	ldr	r3, [pc, #124]	; (800a45c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800a3de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3e0:	e010      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3e2:	4b1c      	ldr	r3, [pc, #112]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3ee:	d106      	bne.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800a3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3f6:	d102      	bne.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a3f8:	4b19      	ldr	r3, [pc, #100]	; (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800a3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3fc:	e002      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a3fe:	2300      	movs	r3, #0
 800a400:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a402:	e11f      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a404:	e11e      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a406:	2300      	movs	r3, #0
 800a408:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a40a:	e11b      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a412:	d13e      	bne.n	800a492 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a414:	4b0f      	ldr	r3, [pc, #60]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a41c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a420:	2b00      	cmp	r3, #0
 800a422:	d004      	beq.n	800a42e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800a424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a42a:	d01d      	beq.n	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a42c:	e02e      	b.n	800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a42e:	4b09      	ldr	r3, [pc, #36]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a436:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a43a:	d107      	bne.n	800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a43c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a440:	4618      	mov	r0, r3
 800a442:	f000 fbcb 	bl	800abdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a448:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a44a:	e0fb      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a44c:	2300      	movs	r3, #0
 800a44e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a450:	e0f8      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a452:	bf00      	nop
 800a454:	58024400 	.word	0x58024400
 800a458:	03d09000 	.word	0x03d09000
 800a45c:	003d0900 	.word	0x003d0900
 800a460:	017d7840 	.word	0x017d7840
 800a464:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a468:	4b79      	ldr	r3, [pc, #484]	; (800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a470:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a474:	d107      	bne.n	800a486 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a476:	f107 0318 	add.w	r3, r7, #24
 800a47a:	4618      	mov	r0, r3
 800a47c:	f000 f906 	bl	800a68c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a480:	6a3b      	ldr	r3, [r7, #32]
 800a482:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a484:	e0de      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a486:	2300      	movs	r3, #0
 800a488:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a48a:	e0db      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a48c:	2300      	movs	r3, #0
 800a48e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a490:	e0d8      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a498:	f040 8085 	bne.w	800a5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a49c:	4b6c      	ldr	r3, [pc, #432]	; (800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a49e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4a0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a4a4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a4ac:	d06b      	beq.n	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800a4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a4b4:	d874      	bhi.n	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4bc:	d056      	beq.n	800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800a4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4c4:	d86c      	bhi.n	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a4cc:	d03b      	beq.n	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800a4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a4d4:	d864      	bhi.n	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4dc:	d021      	beq.n	800a522 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800a4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4e4:	d85c      	bhi.n	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d004      	beq.n	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4f2:	d004      	beq.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800a4f4:	e054      	b.n	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a4f6:	f000 f8b3 	bl	800a660 <HAL_RCCEx_GetD3PCLK1Freq>
 800a4fa:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a4fc:	e0a2      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4fe:	4b54      	ldr	r3, [pc, #336]	; (800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a506:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a50a:	d107      	bne.n	800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a50c:	f107 0318 	add.w	r3, r7, #24
 800a510:	4618      	mov	r0, r3
 800a512:	f000 f8bb 	bl	800a68c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a51a:	e093      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a51c:	2300      	movs	r3, #0
 800a51e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a520:	e090      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a522:	4b4b      	ldr	r3, [pc, #300]	; (800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a52a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a52e:	d107      	bne.n	800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a530:	f107 030c 	add.w	r3, r7, #12
 800a534:	4618      	mov	r0, r3
 800a536:	f000 f9fd 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a53e:	e081      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a540:	2300      	movs	r3, #0
 800a542:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a544:	e07e      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a546:	4b42      	ldr	r3, [pc, #264]	; (800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f003 0304 	and.w	r3, r3, #4
 800a54e:	2b04      	cmp	r3, #4
 800a550:	d109      	bne.n	800a566 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a552:	4b3f      	ldr	r3, [pc, #252]	; (800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	08db      	lsrs	r3, r3, #3
 800a558:	f003 0303 	and.w	r3, r3, #3
 800a55c:	4a3d      	ldr	r2, [pc, #244]	; (800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a55e:	fa22 f303 	lsr.w	r3, r2, r3
 800a562:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a564:	e06e      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a566:	2300      	movs	r3, #0
 800a568:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a56a:	e06b      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a56c:	4b38      	ldr	r3, [pc, #224]	; (800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a578:	d102      	bne.n	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800a57a:	4b37      	ldr	r3, [pc, #220]	; (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a57c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a57e:	e061      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a580:	2300      	movs	r3, #0
 800a582:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a584:	e05e      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a586:	4b32      	ldr	r3, [pc, #200]	; (800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a58e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a592:	d102      	bne.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800a594:	4b31      	ldr	r3, [pc, #196]	; (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a596:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a598:	e054      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a59a:	2300      	movs	r3, #0
 800a59c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a59e:	e051      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5a4:	e04e      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5ac:	d148      	bne.n	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800a5ae:	4b28      	ldr	r3, [pc, #160]	; (800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a5b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a5b6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5be:	d02a      	beq.n	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800a5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5c6:	d838      	bhi.n	800a63a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800a5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d004      	beq.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800a5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5d4:	d00d      	beq.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800a5d6:	e030      	b.n	800a63a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a5d8:	4b1d      	ldr	r3, [pc, #116]	; (800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5e4:	d102      	bne.n	800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800a5e6:	4b1d      	ldr	r3, [pc, #116]	; (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a5ea:	e02b      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5f0:	e028      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5f2:	4b17      	ldr	r3, [pc, #92]	; (800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5fe:	d107      	bne.n	800a610 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a604:	4618      	mov	r0, r3
 800a606:	f000 fae9 	bl	800abdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a60c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a60e:	e019      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a610:	2300      	movs	r3, #0
 800a612:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a614:	e016      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a616:	4b0e      	ldr	r3, [pc, #56]	; (800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a61e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a622:	d107      	bne.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a624:	f107 0318 	add.w	r3, r7, #24
 800a628:	4618      	mov	r0, r3
 800a62a:	f000 f82f 	bl	800a68c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a632:	e007      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a634:	2300      	movs	r3, #0
 800a636:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a638:	e004      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a63a:	2300      	movs	r3, #0
 800a63c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a63e:	e001      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800a640:	2300      	movs	r3, #0
 800a642:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a646:	4618      	mov	r0, r3
 800a648:	3740      	adds	r7, #64	; 0x40
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	58024400 	.word	0x58024400
 800a654:	03d09000 	.word	0x03d09000
 800a658:	003d0900 	.word	0x003d0900
 800a65c:	017d7840 	.word	0x017d7840

0800a660 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a664:	f7fe fb88 	bl	8008d78 <HAL_RCC_GetHCLKFreq>
 800a668:	4602      	mov	r2, r0
 800a66a:	4b06      	ldr	r3, [pc, #24]	; (800a684 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a66c:	6a1b      	ldr	r3, [r3, #32]
 800a66e:	091b      	lsrs	r3, r3, #4
 800a670:	f003 0307 	and.w	r3, r3, #7
 800a674:	4904      	ldr	r1, [pc, #16]	; (800a688 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a676:	5ccb      	ldrb	r3, [r1, r3]
 800a678:	f003 031f 	and.w	r3, r3, #31
 800a67c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a680:	4618      	mov	r0, r3
 800a682:	bd80      	pop	{r7, pc}
 800a684:	58024400 	.word	0x58024400
 800a688:	0800ee24 	.word	0x0800ee24

0800a68c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b089      	sub	sp, #36	; 0x24
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a694:	4ba1      	ldr	r3, [pc, #644]	; (800a91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a698:	f003 0303 	and.w	r3, r3, #3
 800a69c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a69e:	4b9f      	ldr	r3, [pc, #636]	; (800a91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a2:	0b1b      	lsrs	r3, r3, #12
 800a6a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a6aa:	4b9c      	ldr	r3, [pc, #624]	; (800a91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ae:	091b      	lsrs	r3, r3, #4
 800a6b0:	f003 0301 	and.w	r3, r3, #1
 800a6b4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a6b6:	4b99      	ldr	r3, [pc, #612]	; (800a91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ba:	08db      	lsrs	r3, r3, #3
 800a6bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a6c0:	693a      	ldr	r2, [r7, #16]
 800a6c2:	fb02 f303 	mul.w	r3, r2, r3
 800a6c6:	ee07 3a90 	vmov	s15, r3
 800a6ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	f000 8111 	beq.w	800a8fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	f000 8083 	beq.w	800a7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	2b02      	cmp	r3, #2
 800a6e6:	f200 80a1 	bhi.w	800a82c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d003      	beq.n	800a6f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a6f0:	69bb      	ldr	r3, [r7, #24]
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d056      	beq.n	800a7a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a6f6:	e099      	b.n	800a82c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6f8:	4b88      	ldr	r3, [pc, #544]	; (800a91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f003 0320 	and.w	r3, r3, #32
 800a700:	2b00      	cmp	r3, #0
 800a702:	d02d      	beq.n	800a760 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a704:	4b85      	ldr	r3, [pc, #532]	; (800a91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	08db      	lsrs	r3, r3, #3
 800a70a:	f003 0303 	and.w	r3, r3, #3
 800a70e:	4a84      	ldr	r2, [pc, #528]	; (800a920 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a710:	fa22 f303 	lsr.w	r3, r2, r3
 800a714:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	ee07 3a90 	vmov	s15, r3
 800a71c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	ee07 3a90 	vmov	s15, r3
 800a726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a72a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a72e:	4b7b      	ldr	r3, [pc, #492]	; (800a91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a736:	ee07 3a90 	vmov	s15, r3
 800a73a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a73e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a742:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a924 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a74a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a74e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a75a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a75e:	e087      	b.n	800a870 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	ee07 3a90 	vmov	s15, r3
 800a766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a76a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a928 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a76e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a772:	4b6a      	ldr	r3, [pc, #424]	; (800a91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a77a:	ee07 3a90 	vmov	s15, r3
 800a77e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a782:	ed97 6a03 	vldr	s12, [r7, #12]
 800a786:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a924 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a78a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a78e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a79a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a79e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7a2:	e065      	b.n	800a870 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	ee07 3a90 	vmov	s15, r3
 800a7aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a92c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a7b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7b6:	4b59      	ldr	r3, [pc, #356]	; (800a91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7be:	ee07 3a90 	vmov	s15, r3
 800a7c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a924 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a7ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7e6:	e043      	b.n	800a870 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	ee07 3a90 	vmov	s15, r3
 800a7ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a930 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a7f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7fa:	4b48      	ldr	r3, [pc, #288]	; (800a91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a802:	ee07 3a90 	vmov	s15, r3
 800a806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a80a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a80e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a924 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a81a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a81e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a822:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a826:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a82a:	e021      	b.n	800a870 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	ee07 3a90 	vmov	s15, r3
 800a832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a836:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a92c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a83a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a83e:	4b37      	ldr	r3, [pc, #220]	; (800a91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a846:	ee07 3a90 	vmov	s15, r3
 800a84a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a84e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a852:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a924 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a85a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a85e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a86a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a86e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a870:	4b2a      	ldr	r3, [pc, #168]	; (800a91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a874:	0a5b      	lsrs	r3, r3, #9
 800a876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a87a:	ee07 3a90 	vmov	s15, r3
 800a87e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a882:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a886:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a88a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a88e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a896:	ee17 2a90 	vmov	r2, s15
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a89e:	4b1f      	ldr	r3, [pc, #124]	; (800a91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a2:	0c1b      	lsrs	r3, r3, #16
 800a8a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8a8:	ee07 3a90 	vmov	s15, r3
 800a8ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8c4:	ee17 2a90 	vmov	r2, s15
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a8cc:	4b13      	ldr	r3, [pc, #76]	; (800a91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d0:	0e1b      	lsrs	r3, r3, #24
 800a8d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8d6:	ee07 3a90 	vmov	s15, r3
 800a8da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8f2:	ee17 2a90 	vmov	r2, s15
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a8fa:	e008      	b.n	800a90e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	609a      	str	r2, [r3, #8]
}
 800a90e:	bf00      	nop
 800a910:	3724      	adds	r7, #36	; 0x24
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	58024400 	.word	0x58024400
 800a920:	03d09000 	.word	0x03d09000
 800a924:	46000000 	.word	0x46000000
 800a928:	4c742400 	.word	0x4c742400
 800a92c:	4a742400 	.word	0x4a742400
 800a930:	4bbebc20 	.word	0x4bbebc20

0800a934 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a934:	b480      	push	{r7}
 800a936:	b089      	sub	sp, #36	; 0x24
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a93c:	4ba1      	ldr	r3, [pc, #644]	; (800abc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a93e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a940:	f003 0303 	and.w	r3, r3, #3
 800a944:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a946:	4b9f      	ldr	r3, [pc, #636]	; (800abc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a94a:	0d1b      	lsrs	r3, r3, #20
 800a94c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a950:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a952:	4b9c      	ldr	r3, [pc, #624]	; (800abc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a956:	0a1b      	lsrs	r3, r3, #8
 800a958:	f003 0301 	and.w	r3, r3, #1
 800a95c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a95e:	4b99      	ldr	r3, [pc, #612]	; (800abc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a962:	08db      	lsrs	r3, r3, #3
 800a964:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a968:	693a      	ldr	r2, [r7, #16]
 800a96a:	fb02 f303 	mul.w	r3, r2, r3
 800a96e:	ee07 3a90 	vmov	s15, r3
 800a972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a976:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f000 8111 	beq.w	800aba4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a982:	69bb      	ldr	r3, [r7, #24]
 800a984:	2b02      	cmp	r3, #2
 800a986:	f000 8083 	beq.w	800aa90 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	2b02      	cmp	r3, #2
 800a98e:	f200 80a1 	bhi.w	800aad4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d003      	beq.n	800a9a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d056      	beq.n	800aa4c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a99e:	e099      	b.n	800aad4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9a0:	4b88      	ldr	r3, [pc, #544]	; (800abc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f003 0320 	and.w	r3, r3, #32
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d02d      	beq.n	800aa08 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9ac:	4b85      	ldr	r3, [pc, #532]	; (800abc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	08db      	lsrs	r3, r3, #3
 800a9b2:	f003 0303 	and.w	r3, r3, #3
 800a9b6:	4a84      	ldr	r2, [pc, #528]	; (800abc8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a9b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a9bc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	ee07 3a90 	vmov	s15, r3
 800a9c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	ee07 3a90 	vmov	s15, r3
 800a9ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9d6:	4b7b      	ldr	r3, [pc, #492]	; (800abc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9de:	ee07 3a90 	vmov	s15, r3
 800a9e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 800abcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a9ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa02:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aa06:	e087      	b.n	800ab18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	ee07 3a90 	vmov	s15, r3
 800aa0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800abd0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800aa16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa1a:	4b6a      	ldr	r3, [pc, #424]	; (800abc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa22:	ee07 3a90 	vmov	s15, r3
 800aa26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800abcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa4a:	e065      	b.n	800ab18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	ee07 3a90 	vmov	s15, r3
 800aa52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800abd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aa5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa5e:	4b59      	ldr	r3, [pc, #356]	; (800abc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa66:	ee07 3a90 	vmov	s15, r3
 800aa6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa72:	eddf 5a56 	vldr	s11, [pc, #344]	; 800abcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa8e:	e043      	b.n	800ab18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	ee07 3a90 	vmov	s15, r3
 800aa96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800abd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800aa9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaa2:	4b48      	ldr	r3, [pc, #288]	; (800abc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aaa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaaa:	ee07 3a90 	vmov	s15, r3
 800aaae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aab2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aab6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800abcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aaba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aabe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aace:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aad2:	e021      	b.n	800ab18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	ee07 3a90 	vmov	s15, r3
 800aada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aade:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800abd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aae6:	4b37      	ldr	r3, [pc, #220]	; (800abc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaee:	ee07 3a90 	vmov	s15, r3
 800aaf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aafa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800abcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aafe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab16:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800ab18:	4b2a      	ldr	r3, [pc, #168]	; (800abc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab1c:	0a5b      	lsrs	r3, r3, #9
 800ab1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab22:	ee07 3a90 	vmov	s15, r3
 800ab26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab32:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab3e:	ee17 2a90 	vmov	r2, s15
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ab46:	4b1f      	ldr	r3, [pc, #124]	; (800abc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab4a:	0c1b      	lsrs	r3, r3, #16
 800ab4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab50:	ee07 3a90 	vmov	s15, r3
 800ab54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab60:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab6c:	ee17 2a90 	vmov	r2, s15
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ab74:	4b13      	ldr	r3, [pc, #76]	; (800abc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab78:	0e1b      	lsrs	r3, r3, #24
 800ab7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab7e:	ee07 3a90 	vmov	s15, r3
 800ab82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab8e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab9a:	ee17 2a90 	vmov	r2, s15
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800aba2:	e008      	b.n	800abb6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2200      	movs	r2, #0
 800abae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	609a      	str	r2, [r3, #8]
}
 800abb6:	bf00      	nop
 800abb8:	3724      	adds	r7, #36	; 0x24
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	58024400 	.word	0x58024400
 800abc8:	03d09000 	.word	0x03d09000
 800abcc:	46000000 	.word	0x46000000
 800abd0:	4c742400 	.word	0x4c742400
 800abd4:	4a742400 	.word	0x4a742400
 800abd8:	4bbebc20 	.word	0x4bbebc20

0800abdc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800abdc:	b480      	push	{r7}
 800abde:	b089      	sub	sp, #36	; 0x24
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abe4:	4ba0      	ldr	r3, [pc, #640]	; (800ae68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abe8:	f003 0303 	and.w	r3, r3, #3
 800abec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800abee:	4b9e      	ldr	r3, [pc, #632]	; (800ae68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf2:	091b      	lsrs	r3, r3, #4
 800abf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abf8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800abfa:	4b9b      	ldr	r3, [pc, #620]	; (800ae68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abfe:	f003 0301 	and.w	r3, r3, #1
 800ac02:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ac04:	4b98      	ldr	r3, [pc, #608]	; (800ae68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac08:	08db      	lsrs	r3, r3, #3
 800ac0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac0e:	693a      	ldr	r2, [r7, #16]
 800ac10:	fb02 f303 	mul.w	r3, r2, r3
 800ac14:	ee07 3a90 	vmov	s15, r3
 800ac18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac1c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	f000 8111 	beq.w	800ae4a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ac28:	69bb      	ldr	r3, [r7, #24]
 800ac2a:	2b02      	cmp	r3, #2
 800ac2c:	f000 8083 	beq.w	800ad36 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ac30:	69bb      	ldr	r3, [r7, #24]
 800ac32:	2b02      	cmp	r3, #2
 800ac34:	f200 80a1 	bhi.w	800ad7a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d003      	beq.n	800ac46 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d056      	beq.n	800acf2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ac44:	e099      	b.n	800ad7a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac46:	4b88      	ldr	r3, [pc, #544]	; (800ae68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f003 0320 	and.w	r3, r3, #32
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d02d      	beq.n	800acae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac52:	4b85      	ldr	r3, [pc, #532]	; (800ae68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	08db      	lsrs	r3, r3, #3
 800ac58:	f003 0303 	and.w	r3, r3, #3
 800ac5c:	4a83      	ldr	r2, [pc, #524]	; (800ae6c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ac5e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac62:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	ee07 3a90 	vmov	s15, r3
 800ac6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	ee07 3a90 	vmov	s15, r3
 800ac74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac7c:	4b7a      	ldr	r3, [pc, #488]	; (800ae68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac84:	ee07 3a90 	vmov	s15, r3
 800ac88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac8c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac90:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ae70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ac94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aca0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aca8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800acac:	e087      	b.n	800adbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	ee07 3a90 	vmov	s15, r3
 800acb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acb8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ae74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800acbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acc0:	4b69      	ldr	r3, [pc, #420]	; (800ae68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800acc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acc8:	ee07 3a90 	vmov	s15, r3
 800accc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acd0:	ed97 6a03 	vldr	s12, [r7, #12]
 800acd4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ae70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800acd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ace0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ace4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ace8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acf0:	e065      	b.n	800adbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	ee07 3a90 	vmov	s15, r3
 800acf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acfc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ae78 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ad00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad04:	4b58      	ldr	r3, [pc, #352]	; (800ae68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad0c:	ee07 3a90 	vmov	s15, r3
 800ad10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad14:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad18:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ae70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad34:	e043      	b.n	800adbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	ee07 3a90 	vmov	s15, r3
 800ad3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad40:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ae7c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ad44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad48:	4b47      	ldr	r3, [pc, #284]	; (800ae68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad50:	ee07 3a90 	vmov	s15, r3
 800ad54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad58:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad5c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ae70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad78:	e021      	b.n	800adbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	ee07 3a90 	vmov	s15, r3
 800ad80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad84:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ae74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ad88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad8c:	4b36      	ldr	r3, [pc, #216]	; (800ae68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad94:	ee07 3a90 	vmov	s15, r3
 800ad98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad9c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ada0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ae70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ada4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ada8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adb8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800adbc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800adbe:	4b2a      	ldr	r3, [pc, #168]	; (800ae68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc2:	0a5b      	lsrs	r3, r3, #9
 800adc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adc8:	ee07 3a90 	vmov	s15, r3
 800adcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800add0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800add4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800add8:	edd7 6a07 	vldr	s13, [r7, #28]
 800addc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ade0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ade4:	ee17 2a90 	vmov	r2, s15
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800adec:	4b1e      	ldr	r3, [pc, #120]	; (800ae68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adf0:	0c1b      	lsrs	r3, r3, #16
 800adf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adf6:	ee07 3a90 	vmov	s15, r3
 800adfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae06:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae12:	ee17 2a90 	vmov	r2, s15
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800ae1a:	4b13      	ldr	r3, [pc, #76]	; (800ae68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae1e:	0e1b      	lsrs	r3, r3, #24
 800ae20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae24:	ee07 3a90 	vmov	s15, r3
 800ae28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae30:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae34:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae40:	ee17 2a90 	vmov	r2, s15
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ae48:	e008      	b.n	800ae5c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	609a      	str	r2, [r3, #8]
}
 800ae5c:	bf00      	nop
 800ae5e:	3724      	adds	r7, #36	; 0x24
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr
 800ae68:	58024400 	.word	0x58024400
 800ae6c:	03d09000 	.word	0x03d09000
 800ae70:	46000000 	.word	0x46000000
 800ae74:	4c742400 	.word	0x4c742400
 800ae78:	4a742400 	.word	0x4a742400
 800ae7c:	4bbebc20 	.word	0x4bbebc20

0800ae80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ae8e:	4b53      	ldr	r3, [pc, #332]	; (800afdc <RCCEx_PLL2_Config+0x15c>)
 800ae90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae92:	f003 0303 	and.w	r3, r3, #3
 800ae96:	2b03      	cmp	r3, #3
 800ae98:	d101      	bne.n	800ae9e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e099      	b.n	800afd2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ae9e:	4b4f      	ldr	r3, [pc, #316]	; (800afdc <RCCEx_PLL2_Config+0x15c>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4a4e      	ldr	r2, [pc, #312]	; (800afdc <RCCEx_PLL2_Config+0x15c>)
 800aea4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800aea8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aeaa:	f7f7 fbf5 	bl	8002698 <HAL_GetTick>
 800aeae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aeb0:	e008      	b.n	800aec4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800aeb2:	f7f7 fbf1 	bl	8002698 <HAL_GetTick>
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	1ad3      	subs	r3, r2, r3
 800aebc:	2b02      	cmp	r3, #2
 800aebe:	d901      	bls.n	800aec4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aec0:	2303      	movs	r3, #3
 800aec2:	e086      	b.n	800afd2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aec4:	4b45      	ldr	r3, [pc, #276]	; (800afdc <RCCEx_PLL2_Config+0x15c>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1f0      	bne.n	800aeb2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800aed0:	4b42      	ldr	r3, [pc, #264]	; (800afdc <RCCEx_PLL2_Config+0x15c>)
 800aed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	031b      	lsls	r3, r3, #12
 800aede:	493f      	ldr	r1, [pc, #252]	; (800afdc <RCCEx_PLL2_Config+0x15c>)
 800aee0:	4313      	orrs	r3, r2
 800aee2:	628b      	str	r3, [r1, #40]	; 0x28
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	3b01      	subs	r3, #1
 800aeea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	3b01      	subs	r3, #1
 800aef4:	025b      	lsls	r3, r3, #9
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	431a      	orrs	r2, r3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	3b01      	subs	r3, #1
 800af00:	041b      	lsls	r3, r3, #16
 800af02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800af06:	431a      	orrs	r2, r3
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	691b      	ldr	r3, [r3, #16]
 800af0c:	3b01      	subs	r3, #1
 800af0e:	061b      	lsls	r3, r3, #24
 800af10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800af14:	4931      	ldr	r1, [pc, #196]	; (800afdc <RCCEx_PLL2_Config+0x15c>)
 800af16:	4313      	orrs	r3, r2
 800af18:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800af1a:	4b30      	ldr	r3, [pc, #192]	; (800afdc <RCCEx_PLL2_Config+0x15c>)
 800af1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	695b      	ldr	r3, [r3, #20]
 800af26:	492d      	ldr	r1, [pc, #180]	; (800afdc <RCCEx_PLL2_Config+0x15c>)
 800af28:	4313      	orrs	r3, r2
 800af2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800af2c:	4b2b      	ldr	r3, [pc, #172]	; (800afdc <RCCEx_PLL2_Config+0x15c>)
 800af2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af30:	f023 0220 	bic.w	r2, r3, #32
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	699b      	ldr	r3, [r3, #24]
 800af38:	4928      	ldr	r1, [pc, #160]	; (800afdc <RCCEx_PLL2_Config+0x15c>)
 800af3a:	4313      	orrs	r3, r2
 800af3c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800af3e:	4b27      	ldr	r3, [pc, #156]	; (800afdc <RCCEx_PLL2_Config+0x15c>)
 800af40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af42:	4a26      	ldr	r2, [pc, #152]	; (800afdc <RCCEx_PLL2_Config+0x15c>)
 800af44:	f023 0310 	bic.w	r3, r3, #16
 800af48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800af4a:	4b24      	ldr	r3, [pc, #144]	; (800afdc <RCCEx_PLL2_Config+0x15c>)
 800af4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af4e:	4b24      	ldr	r3, [pc, #144]	; (800afe0 <RCCEx_PLL2_Config+0x160>)
 800af50:	4013      	ands	r3, r2
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	69d2      	ldr	r2, [r2, #28]
 800af56:	00d2      	lsls	r2, r2, #3
 800af58:	4920      	ldr	r1, [pc, #128]	; (800afdc <RCCEx_PLL2_Config+0x15c>)
 800af5a:	4313      	orrs	r3, r2
 800af5c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800af5e:	4b1f      	ldr	r3, [pc, #124]	; (800afdc <RCCEx_PLL2_Config+0x15c>)
 800af60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af62:	4a1e      	ldr	r2, [pc, #120]	; (800afdc <RCCEx_PLL2_Config+0x15c>)
 800af64:	f043 0310 	orr.w	r3, r3, #16
 800af68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d106      	bne.n	800af7e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800af70:	4b1a      	ldr	r3, [pc, #104]	; (800afdc <RCCEx_PLL2_Config+0x15c>)
 800af72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af74:	4a19      	ldr	r2, [pc, #100]	; (800afdc <RCCEx_PLL2_Config+0x15c>)
 800af76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800af7c:	e00f      	b.n	800af9e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	2b01      	cmp	r3, #1
 800af82:	d106      	bne.n	800af92 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800af84:	4b15      	ldr	r3, [pc, #84]	; (800afdc <RCCEx_PLL2_Config+0x15c>)
 800af86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af88:	4a14      	ldr	r2, [pc, #80]	; (800afdc <RCCEx_PLL2_Config+0x15c>)
 800af8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800af90:	e005      	b.n	800af9e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800af92:	4b12      	ldr	r3, [pc, #72]	; (800afdc <RCCEx_PLL2_Config+0x15c>)
 800af94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af96:	4a11      	ldr	r2, [pc, #68]	; (800afdc <RCCEx_PLL2_Config+0x15c>)
 800af98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800af9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800af9e:	4b0f      	ldr	r3, [pc, #60]	; (800afdc <RCCEx_PLL2_Config+0x15c>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	4a0e      	ldr	r2, [pc, #56]	; (800afdc <RCCEx_PLL2_Config+0x15c>)
 800afa4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800afa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afaa:	f7f7 fb75 	bl	8002698 <HAL_GetTick>
 800afae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800afb0:	e008      	b.n	800afc4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800afb2:	f7f7 fb71 	bl	8002698 <HAL_GetTick>
 800afb6:	4602      	mov	r2, r0
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	1ad3      	subs	r3, r2, r3
 800afbc:	2b02      	cmp	r3, #2
 800afbe:	d901      	bls.n	800afc4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800afc0:	2303      	movs	r3, #3
 800afc2:	e006      	b.n	800afd2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800afc4:	4b05      	ldr	r3, [pc, #20]	; (800afdc <RCCEx_PLL2_Config+0x15c>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d0f0      	beq.n	800afb2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800afd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	58024400 	.word	0x58024400
 800afe0:	ffff0007 	.word	0xffff0007

0800afe4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800afee:	2300      	movs	r3, #0
 800aff0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aff2:	4b53      	ldr	r3, [pc, #332]	; (800b140 <RCCEx_PLL3_Config+0x15c>)
 800aff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aff6:	f003 0303 	and.w	r3, r3, #3
 800affa:	2b03      	cmp	r3, #3
 800affc:	d101      	bne.n	800b002 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800affe:	2301      	movs	r3, #1
 800b000:	e099      	b.n	800b136 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b002:	4b4f      	ldr	r3, [pc, #316]	; (800b140 <RCCEx_PLL3_Config+0x15c>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4a4e      	ldr	r2, [pc, #312]	; (800b140 <RCCEx_PLL3_Config+0x15c>)
 800b008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b00c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b00e:	f7f7 fb43 	bl	8002698 <HAL_GetTick>
 800b012:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b014:	e008      	b.n	800b028 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b016:	f7f7 fb3f 	bl	8002698 <HAL_GetTick>
 800b01a:	4602      	mov	r2, r0
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	1ad3      	subs	r3, r2, r3
 800b020:	2b02      	cmp	r3, #2
 800b022:	d901      	bls.n	800b028 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b024:	2303      	movs	r3, #3
 800b026:	e086      	b.n	800b136 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b028:	4b45      	ldr	r3, [pc, #276]	; (800b140 <RCCEx_PLL3_Config+0x15c>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b030:	2b00      	cmp	r3, #0
 800b032:	d1f0      	bne.n	800b016 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b034:	4b42      	ldr	r3, [pc, #264]	; (800b140 <RCCEx_PLL3_Config+0x15c>)
 800b036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b038:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	051b      	lsls	r3, r3, #20
 800b042:	493f      	ldr	r1, [pc, #252]	; (800b140 <RCCEx_PLL3_Config+0x15c>)
 800b044:	4313      	orrs	r3, r2
 800b046:	628b      	str	r3, [r1, #40]	; 0x28
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	3b01      	subs	r3, #1
 800b04e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	689b      	ldr	r3, [r3, #8]
 800b056:	3b01      	subs	r3, #1
 800b058:	025b      	lsls	r3, r3, #9
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	431a      	orrs	r2, r3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	3b01      	subs	r3, #1
 800b064:	041b      	lsls	r3, r3, #16
 800b066:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b06a:	431a      	orrs	r2, r3
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	3b01      	subs	r3, #1
 800b072:	061b      	lsls	r3, r3, #24
 800b074:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b078:	4931      	ldr	r1, [pc, #196]	; (800b140 <RCCEx_PLL3_Config+0x15c>)
 800b07a:	4313      	orrs	r3, r2
 800b07c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b07e:	4b30      	ldr	r3, [pc, #192]	; (800b140 <RCCEx_PLL3_Config+0x15c>)
 800b080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b082:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	695b      	ldr	r3, [r3, #20]
 800b08a:	492d      	ldr	r1, [pc, #180]	; (800b140 <RCCEx_PLL3_Config+0x15c>)
 800b08c:	4313      	orrs	r3, r2
 800b08e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b090:	4b2b      	ldr	r3, [pc, #172]	; (800b140 <RCCEx_PLL3_Config+0x15c>)
 800b092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b094:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	699b      	ldr	r3, [r3, #24]
 800b09c:	4928      	ldr	r1, [pc, #160]	; (800b140 <RCCEx_PLL3_Config+0x15c>)
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b0a2:	4b27      	ldr	r3, [pc, #156]	; (800b140 <RCCEx_PLL3_Config+0x15c>)
 800b0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a6:	4a26      	ldr	r2, [pc, #152]	; (800b140 <RCCEx_PLL3_Config+0x15c>)
 800b0a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b0ae:	4b24      	ldr	r3, [pc, #144]	; (800b140 <RCCEx_PLL3_Config+0x15c>)
 800b0b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0b2:	4b24      	ldr	r3, [pc, #144]	; (800b144 <RCCEx_PLL3_Config+0x160>)
 800b0b4:	4013      	ands	r3, r2
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	69d2      	ldr	r2, [r2, #28]
 800b0ba:	00d2      	lsls	r2, r2, #3
 800b0bc:	4920      	ldr	r1, [pc, #128]	; (800b140 <RCCEx_PLL3_Config+0x15c>)
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b0c2:	4b1f      	ldr	r3, [pc, #124]	; (800b140 <RCCEx_PLL3_Config+0x15c>)
 800b0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c6:	4a1e      	ldr	r2, [pc, #120]	; (800b140 <RCCEx_PLL3_Config+0x15c>)
 800b0c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d106      	bne.n	800b0e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b0d4:	4b1a      	ldr	r3, [pc, #104]	; (800b140 <RCCEx_PLL3_Config+0x15c>)
 800b0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d8:	4a19      	ldr	r2, [pc, #100]	; (800b140 <RCCEx_PLL3_Config+0x15c>)
 800b0da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b0de:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b0e0:	e00f      	b.n	800b102 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d106      	bne.n	800b0f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b0e8:	4b15      	ldr	r3, [pc, #84]	; (800b140 <RCCEx_PLL3_Config+0x15c>)
 800b0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ec:	4a14      	ldr	r2, [pc, #80]	; (800b140 <RCCEx_PLL3_Config+0x15c>)
 800b0ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b0f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b0f4:	e005      	b.n	800b102 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b0f6:	4b12      	ldr	r3, [pc, #72]	; (800b140 <RCCEx_PLL3_Config+0x15c>)
 800b0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0fa:	4a11      	ldr	r2, [pc, #68]	; (800b140 <RCCEx_PLL3_Config+0x15c>)
 800b0fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b100:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b102:	4b0f      	ldr	r3, [pc, #60]	; (800b140 <RCCEx_PLL3_Config+0x15c>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4a0e      	ldr	r2, [pc, #56]	; (800b140 <RCCEx_PLL3_Config+0x15c>)
 800b108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b10c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b10e:	f7f7 fac3 	bl	8002698 <HAL_GetTick>
 800b112:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b114:	e008      	b.n	800b128 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b116:	f7f7 fabf 	bl	8002698 <HAL_GetTick>
 800b11a:	4602      	mov	r2, r0
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	1ad3      	subs	r3, r2, r3
 800b120:	2b02      	cmp	r3, #2
 800b122:	d901      	bls.n	800b128 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b124:	2303      	movs	r3, #3
 800b126:	e006      	b.n	800b136 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b128:	4b05      	ldr	r3, [pc, #20]	; (800b140 <RCCEx_PLL3_Config+0x15c>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b130:	2b00      	cmp	r3, #0
 800b132:	d0f0      	beq.n	800b116 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b134:	7bfb      	ldrb	r3, [r7, #15]
}
 800b136:	4618      	mov	r0, r3
 800b138:	3710      	adds	r7, #16
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	58024400 	.word	0x58024400
 800b144:	ffff0007 	.word	0xffff0007

0800b148 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d101      	bne.n	800b15a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b156:	2301      	movs	r3, #1
 800b158:	e0f1      	b.n	800b33e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2200      	movs	r2, #0
 800b15e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4a78      	ldr	r2, [pc, #480]	; (800b348 <HAL_SPI_Init+0x200>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d00f      	beq.n	800b18a <HAL_SPI_Init+0x42>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4a77      	ldr	r2, [pc, #476]	; (800b34c <HAL_SPI_Init+0x204>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d00a      	beq.n	800b18a <HAL_SPI_Init+0x42>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4a75      	ldr	r2, [pc, #468]	; (800b350 <HAL_SPI_Init+0x208>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d005      	beq.n	800b18a <HAL_SPI_Init+0x42>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	68db      	ldr	r3, [r3, #12]
 800b182:	2b0f      	cmp	r3, #15
 800b184:	d901      	bls.n	800b18a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b186:	2301      	movs	r3, #1
 800b188:	e0d9      	b.n	800b33e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 fd74 	bl	800bc78 <SPI_GetPacketSize>
 800b190:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4a6c      	ldr	r2, [pc, #432]	; (800b348 <HAL_SPI_Init+0x200>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d00c      	beq.n	800b1b6 <HAL_SPI_Init+0x6e>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a6a      	ldr	r2, [pc, #424]	; (800b34c <HAL_SPI_Init+0x204>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d007      	beq.n	800b1b6 <HAL_SPI_Init+0x6e>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a69      	ldr	r2, [pc, #420]	; (800b350 <HAL_SPI_Init+0x208>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d002      	beq.n	800b1b6 <HAL_SPI_Init+0x6e>
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2b08      	cmp	r3, #8
 800b1b4:	d811      	bhi.n	800b1da <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b1ba:	4a63      	ldr	r2, [pc, #396]	; (800b348 <HAL_SPI_Init+0x200>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d009      	beq.n	800b1d4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a61      	ldr	r2, [pc, #388]	; (800b34c <HAL_SPI_Init+0x204>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d004      	beq.n	800b1d4 <HAL_SPI_Init+0x8c>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4a60      	ldr	r2, [pc, #384]	; (800b350 <HAL_SPI_Init+0x208>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d104      	bne.n	800b1de <HAL_SPI_Init+0x96>
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2b10      	cmp	r3, #16
 800b1d8:	d901      	bls.n	800b1de <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	e0af      	b.n	800b33e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d106      	bne.n	800b1f8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f7f6 feda 	bl	8001fac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2202      	movs	r2, #2
 800b1fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f022 0201 	bic.w	r2, r2, #1
 800b20e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b21a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	699b      	ldr	r3, [r3, #24]
 800b220:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b224:	d119      	bne.n	800b25a <HAL_SPI_Init+0x112>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b22e:	d103      	bne.n	800b238 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b234:	2b00      	cmp	r3, #0
 800b236:	d008      	beq.n	800b24a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d10c      	bne.n	800b25a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b244:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b248:	d107      	bne.n	800b25a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b258:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	69da      	ldr	r2, [r3, #28]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b262:	431a      	orrs	r2, r3
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	431a      	orrs	r2, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b26c:	ea42 0103 	orr.w	r1, r2, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	68da      	ldr	r2, [r3, #12]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	430a      	orrs	r2, r1
 800b27a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b284:	431a      	orrs	r2, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b28a:	431a      	orrs	r2, r3
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	699b      	ldr	r3, [r3, #24]
 800b290:	431a      	orrs	r2, r3
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	691b      	ldr	r3, [r3, #16]
 800b296:	431a      	orrs	r2, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	695b      	ldr	r3, [r3, #20]
 800b29c:	431a      	orrs	r2, r3
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6a1b      	ldr	r3, [r3, #32]
 800b2a2:	431a      	orrs	r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	431a      	orrs	r2, r3
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2ae:	431a      	orrs	r2, r3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	689b      	ldr	r3, [r3, #8]
 800b2b4:	431a      	orrs	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2ba:	ea42 0103 	orr.w	r1, r2, r3
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	430a      	orrs	r2, r1
 800b2c8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d113      	bne.n	800b2fa <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2e4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b2f8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f022 0201 	bic.w	r2, r2, #1
 800b308:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b312:	2b00      	cmp	r3, #0
 800b314:	d00a      	beq.n	800b32c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	68db      	ldr	r3, [r3, #12]
 800b31c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	430a      	orrs	r2, r1
 800b32a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2201      	movs	r2, #1
 800b338:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	40013000 	.word	0x40013000
 800b34c:	40003800 	.word	0x40003800
 800b350:	40003c00 	.word	0x40003c00

0800b354 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b08a      	sub	sp, #40	; 0x28
 800b358:	af02      	add	r7, sp, #8
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	603b      	str	r3, [r7, #0]
 800b360:	4613      	mov	r3, r2
 800b362:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b364:	2300      	movs	r3, #0
 800b366:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	3330      	adds	r3, #48	; 0x30
 800b36e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b378:	d112      	bne.n	800b3a0 <HAL_SPI_Receive+0x4c>
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d10e      	bne.n	800b3a0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2204      	movs	r2, #4
 800b386:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b38a:	88fa      	ldrh	r2, [r7, #6]
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	9300      	str	r3, [sp, #0]
 800b390:	4613      	mov	r3, r2
 800b392:	68ba      	ldr	r2, [r7, #8]
 800b394:	68b9      	ldr	r1, [r7, #8]
 800b396:	68f8      	ldr	r0, [r7, #12]
 800b398:	f000 f978 	bl	800b68c <HAL_SPI_TransmitReceive>
 800b39c:	4603      	mov	r3, r0
 800b39e:	e16f      	b.n	800b680 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d101      	bne.n	800b3ae <HAL_SPI_Receive+0x5a>
 800b3aa:	2302      	movs	r3, #2
 800b3ac:	e168      	b.n	800b680 <HAL_SPI_Receive+0x32c>
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b3b6:	f7f7 f96f 	bl	8002698 <HAL_GetTick>
 800b3ba:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d007      	beq.n	800b3d8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800b3c8:	2302      	movs	r3, #2
 800b3ca:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b3d4:	7ffb      	ldrb	r3, [r7, #31]
 800b3d6:	e153      	b.n	800b680 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d002      	beq.n	800b3e4 <HAL_SPI_Receive+0x90>
 800b3de:	88fb      	ldrh	r3, [r7, #6]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d107      	bne.n	800b3f4 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b3f0:	7ffb      	ldrb	r3, [r7, #31]
 800b3f2:	e145      	b.n	800b680 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2204      	movs	r2, #4
 800b3f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2200      	movs	r2, #0
 800b400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	68ba      	ldr	r2, [r7, #8]
 800b408:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	88fa      	ldrh	r2, [r7, #6]
 800b40e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	88fa      	ldrh	r2, [r7, #6]
 800b416:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2200      	movs	r2, #0
 800b41e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2200      	movs	r2, #0
 800b424:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2200      	movs	r2, #0
 800b42c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2200      	movs	r2, #0
 800b434:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2200      	movs	r2, #0
 800b43a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	689b      	ldr	r3, [r3, #8]
 800b440:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b444:	d107      	bne.n	800b456 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b454:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	685a      	ldr	r2, [r3, #4]
 800b45c:	4b8a      	ldr	r3, [pc, #552]	; (800b688 <HAL_SPI_Receive+0x334>)
 800b45e:	4013      	ands	r3, r2
 800b460:	88f9      	ldrh	r1, [r7, #6]
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	6812      	ldr	r2, [r2, #0]
 800b466:	430b      	orrs	r3, r1
 800b468:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f042 0201 	orr.w	r2, r2, #1
 800b478:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b482:	d107      	bne.n	800b494 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b492:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	2b0f      	cmp	r3, #15
 800b49a:	d948      	bls.n	800b52e <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b49c:	e040      	b.n	800b520 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	695a      	ldr	r2, [r3, #20]
 800b4a4:	f248 0308 	movw	r3, #32776	; 0x8008
 800b4a8:	4013      	ands	r3, r2
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d014      	beq.n	800b4d8 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b4b8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4be:	1d1a      	adds	r2, r3, #4
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	3b01      	subs	r3, #1
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b4d6:	e023      	b.n	800b520 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b4d8:	f7f7 f8de 	bl	8002698 <HAL_GetTick>
 800b4dc:	4602      	mov	r2, r0
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	1ad3      	subs	r3, r2, r3
 800b4e2:	683a      	ldr	r2, [r7, #0]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d803      	bhi.n	800b4f0 <HAL_SPI_Receive+0x19c>
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4ee:	d102      	bne.n	800b4f6 <HAL_SPI_Receive+0x1a2>
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d114      	bne.n	800b520 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b4f6:	68f8      	ldr	r0, [r7, #12]
 800b4f8:	f000 faf0 	bl	800badc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b50a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2201      	movs	r2, #1
 800b518:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b51c:	2303      	movs	r3, #3
 800b51e:	e0af      	b.n	800b680 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b526:	b29b      	uxth	r3, r3
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d1b8      	bne.n	800b49e <HAL_SPI_Receive+0x14a>
 800b52c:	e095      	b.n	800b65a <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	2b07      	cmp	r3, #7
 800b534:	f240 808b 	bls.w	800b64e <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b538:	e03f      	b.n	800b5ba <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	695b      	ldr	r3, [r3, #20]
 800b540:	f003 0301 	and.w	r3, r3, #1
 800b544:	2b01      	cmp	r3, #1
 800b546:	d114      	bne.n	800b572 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b54c:	69ba      	ldr	r2, [r7, #24]
 800b54e:	8812      	ldrh	r2, [r2, #0]
 800b550:	b292      	uxth	r2, r2
 800b552:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b558:	1c9a      	adds	r2, r3, #2
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b564:	b29b      	uxth	r3, r3
 800b566:	3b01      	subs	r3, #1
 800b568:	b29a      	uxth	r2, r3
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b570:	e023      	b.n	800b5ba <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b572:	f7f7 f891 	bl	8002698 <HAL_GetTick>
 800b576:	4602      	mov	r2, r0
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	1ad3      	subs	r3, r2, r3
 800b57c:	683a      	ldr	r2, [r7, #0]
 800b57e:	429a      	cmp	r2, r3
 800b580:	d803      	bhi.n	800b58a <HAL_SPI_Receive+0x236>
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b588:	d102      	bne.n	800b590 <HAL_SPI_Receive+0x23c>
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d114      	bne.n	800b5ba <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f000 faa3 	bl	800badc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2200      	movs	r2, #0
 800b59a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b5b6:	2303      	movs	r3, #3
 800b5b8:	e062      	b.n	800b680 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b5c0:	b29b      	uxth	r3, r3
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1b9      	bne.n	800b53a <HAL_SPI_Receive+0x1e6>
 800b5c6:	e048      	b.n	800b65a <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	695b      	ldr	r3, [r3, #20]
 800b5ce:	f003 0301 	and.w	r3, r3, #1
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	d117      	bne.n	800b606 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5e2:	7812      	ldrb	r2, [r2, #0]
 800b5e4:	b2d2      	uxtb	r2, r2
 800b5e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5ec:	1c5a      	adds	r2, r3, #1
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	3b01      	subs	r3, #1
 800b5fc:	b29a      	uxth	r2, r3
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b604:	e023      	b.n	800b64e <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b606:	f7f7 f847 	bl	8002698 <HAL_GetTick>
 800b60a:	4602      	mov	r2, r0
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	1ad3      	subs	r3, r2, r3
 800b610:	683a      	ldr	r2, [r7, #0]
 800b612:	429a      	cmp	r2, r3
 800b614:	d803      	bhi.n	800b61e <HAL_SPI_Receive+0x2ca>
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b61c:	d102      	bne.n	800b624 <HAL_SPI_Receive+0x2d0>
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d114      	bne.n	800b64e <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b624:	68f8      	ldr	r0, [r7, #12]
 800b626:	f000 fa59 	bl	800badc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2200      	movs	r2, #0
 800b62e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b638:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2201      	movs	r2, #1
 800b646:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b64a:	2303      	movs	r3, #3
 800b64c:	e018      	b.n	800b680 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b654:	b29b      	uxth	r3, r3
 800b656:	2b00      	cmp	r3, #0
 800b658:	d1b6      	bne.n	800b5c8 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f000 fa3e 	bl	800badc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2200      	movs	r2, #0
 800b664:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2201      	movs	r2, #1
 800b66c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b676:	2b00      	cmp	r3, #0
 800b678:	d001      	beq.n	800b67e <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800b67a:	2301      	movs	r3, #1
 800b67c:	e000      	b.n	800b680 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800b67e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b680:	4618      	mov	r0, r3
 800b682:	3720      	adds	r7, #32
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	ffff0000 	.word	0xffff0000

0800b68c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b08e      	sub	sp, #56	; 0x38
 800b690:	af02      	add	r7, sp, #8
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	60b9      	str	r1, [r7, #8]
 800b696:	607a      	str	r2, [r7, #4]
 800b698:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b69a:	2300      	movs	r3, #0
 800b69c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	3320      	adds	r3, #32
 800b6a6:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	3330      	adds	r3, #48	; 0x30
 800b6ae:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d101      	bne.n	800b6be <HAL_SPI_TransmitReceive+0x32>
 800b6ba:	2302      	movs	r3, #2
 800b6bc:	e209      	b.n	800bad2 <HAL_SPI_TransmitReceive+0x446>
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b6c6:	f7f6 ffe7 	bl	8002698 <HAL_GetTick>
 800b6ca:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800b6cc:	887b      	ldrh	r3, [r7, #2]
 800b6ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800b6d0:	887b      	ldrh	r3, [r7, #2]
 800b6d2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b6da:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b6e2:	7efb      	ldrb	r3, [r7, #27]
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d014      	beq.n	800b712 <HAL_SPI_TransmitReceive+0x86>
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b6ee:	d106      	bne.n	800b6fe <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d102      	bne.n	800b6fe <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800b6f8:	7efb      	ldrb	r3, [r7, #27]
 800b6fa:	2b04      	cmp	r3, #4
 800b6fc:	d009      	beq.n	800b712 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800b6fe:	2302      	movs	r3, #2
 800b700:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2200      	movs	r2, #0
 800b708:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b70c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b710:	e1df      	b.n	800bad2 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d005      	beq.n	800b724 <HAL_SPI_TransmitReceive+0x98>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d002      	beq.n	800b724 <HAL_SPI_TransmitReceive+0x98>
 800b71e:	887b      	ldrh	r3, [r7, #2]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d109      	bne.n	800b738 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800b724:	2301      	movs	r3, #1
 800b726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2200      	movs	r2, #0
 800b72e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b732:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b736:	e1cc      	b.n	800bad2 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	2b04      	cmp	r3, #4
 800b742:	d003      	beq.n	800b74c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2205      	movs	r2, #5
 800b748:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2200      	movs	r2, #0
 800b750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	887a      	ldrh	r2, [r7, #2]
 800b75e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	887a      	ldrh	r2, [r7, #2]
 800b766:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	68ba      	ldr	r2, [r7, #8]
 800b76e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	887a      	ldrh	r2, [r7, #2]
 800b774:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	887a      	ldrh	r2, [r7, #2]
 800b77c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2200      	movs	r2, #0
 800b784:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2200      	movs	r2, #0
 800b78a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	685a      	ldr	r2, [r3, #4]
 800b792:	4b82      	ldr	r3, [pc, #520]	; (800b99c <HAL_SPI_TransmitReceive+0x310>)
 800b794:	4013      	ands	r3, r2
 800b796:	8879      	ldrh	r1, [r7, #2]
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	6812      	ldr	r2, [r2, #0]
 800b79c:	430b      	orrs	r3, r1
 800b79e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	681a      	ldr	r2, [r3, #0]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f042 0201 	orr.w	r2, r2, #1
 800b7ae:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b7b8:	d107      	bne.n	800b7ca <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	2b0f      	cmp	r3, #15
 800b7d0:	d970      	bls.n	800b8b4 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b7d2:	e068      	b.n	800b8a6 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	695b      	ldr	r3, [r3, #20]
 800b7da:	f003 0302 	and.w	r3, r3, #2
 800b7de:	2b02      	cmp	r3, #2
 800b7e0:	d11a      	bne.n	800b818 <HAL_SPI_TransmitReceive+0x18c>
 800b7e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d017      	beq.n	800b818 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	6812      	ldr	r2, [r2, #0]
 800b7f2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7f8:	1d1a      	adds	r2, r3, #4
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b804:	b29b      	uxth	r3, r3
 800b806:	3b01      	subs	r3, #1
 800b808:	b29a      	uxth	r2, r3
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b816:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	695a      	ldr	r2, [r3, #20]
 800b81e:	f248 0308 	movw	r3, #32776	; 0x8008
 800b822:	4013      	ands	r3, r2
 800b824:	2b00      	cmp	r3, #0
 800b826:	d01a      	beq.n	800b85e <HAL_SPI_TransmitReceive+0x1d2>
 800b828:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d017      	beq.n	800b85e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681a      	ldr	r2, [r3, #0]
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b836:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b838:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b83e:	1d1a      	adds	r2, r3, #4
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	3b01      	subs	r3, #1
 800b84e:	b29a      	uxth	r2, r3
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b85c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b85e:	f7f6 ff1b 	bl	8002698 <HAL_GetTick>
 800b862:	4602      	mov	r2, r0
 800b864:	69fb      	ldr	r3, [r7, #28]
 800b866:	1ad3      	subs	r3, r2, r3
 800b868:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d803      	bhi.n	800b876 <HAL_SPI_TransmitReceive+0x1ea>
 800b86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b874:	d102      	bne.n	800b87c <HAL_SPI_TransmitReceive+0x1f0>
 800b876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d114      	bne.n	800b8a6 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b87c:	68f8      	ldr	r0, [r7, #12]
 800b87e:	f000 f92d 	bl	800badc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2200      	movs	r2, #0
 800b886:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b890:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2201      	movs	r2, #1
 800b89e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800b8a2:	2303      	movs	r3, #3
 800b8a4:	e115      	b.n	800bad2 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b8a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d193      	bne.n	800b7d4 <HAL_SPI_TransmitReceive+0x148>
 800b8ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d190      	bne.n	800b7d4 <HAL_SPI_TransmitReceive+0x148>
 800b8b2:	e0e7      	b.n	800ba84 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	68db      	ldr	r3, [r3, #12]
 800b8b8:	2b07      	cmp	r3, #7
 800b8ba:	f240 80dd 	bls.w	800ba78 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b8be:	e066      	b.n	800b98e <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	695b      	ldr	r3, [r3, #20]
 800b8c6:	f003 0302 	and.w	r3, r3, #2
 800b8ca:	2b02      	cmp	r3, #2
 800b8cc:	d119      	bne.n	800b902 <HAL_SPI_TransmitReceive+0x276>
 800b8ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d016      	beq.n	800b902 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8d8:	881a      	ldrh	r2, [r3, #0]
 800b8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8dc:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8e2:	1c9a      	adds	r2, r3, #2
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	3b01      	subs	r3, #1
 800b8f2:	b29a      	uxth	r2, r3
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b900:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	695b      	ldr	r3, [r3, #20]
 800b908:	f003 0301 	and.w	r3, r3, #1
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d11a      	bne.n	800b946 <HAL_SPI_TransmitReceive+0x2ba>
 800b910:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b912:	2b00      	cmp	r3, #0
 800b914:	d017      	beq.n	800b946 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b91a:	6a3a      	ldr	r2, [r7, #32]
 800b91c:	8812      	ldrh	r2, [r2, #0]
 800b91e:	b292      	uxth	r2, r2
 800b920:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b926:	1c9a      	adds	r2, r3, #2
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b932:	b29b      	uxth	r3, r3
 800b934:	3b01      	subs	r3, #1
 800b936:	b29a      	uxth	r2, r3
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b944:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b946:	f7f6 fea7 	bl	8002698 <HAL_GetTick>
 800b94a:	4602      	mov	r2, r0
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	1ad3      	subs	r3, r2, r3
 800b950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b952:	429a      	cmp	r2, r3
 800b954:	d803      	bhi.n	800b95e <HAL_SPI_TransmitReceive+0x2d2>
 800b956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b95c:	d102      	bne.n	800b964 <HAL_SPI_TransmitReceive+0x2d8>
 800b95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b960:	2b00      	cmp	r3, #0
 800b962:	d114      	bne.n	800b98e <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b964:	68f8      	ldr	r0, [r7, #12]
 800b966:	f000 f8b9 	bl	800badc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2200      	movs	r2, #0
 800b96e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b978:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2201      	movs	r2, #1
 800b986:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800b98a:	2303      	movs	r3, #3
 800b98c:	e0a1      	b.n	800bad2 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b98e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b990:	2b00      	cmp	r3, #0
 800b992:	d195      	bne.n	800b8c0 <HAL_SPI_TransmitReceive+0x234>
 800b994:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b996:	2b00      	cmp	r3, #0
 800b998:	d192      	bne.n	800b8c0 <HAL_SPI_TransmitReceive+0x234>
 800b99a:	e073      	b.n	800ba84 <HAL_SPI_TransmitReceive+0x3f8>
 800b99c:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	695b      	ldr	r3, [r3, #20]
 800b9a6:	f003 0302 	and.w	r3, r3, #2
 800b9aa:	2b02      	cmp	r3, #2
 800b9ac:	d11b      	bne.n	800b9e6 <HAL_SPI_TransmitReceive+0x35a>
 800b9ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d018      	beq.n	800b9e6 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	3320      	adds	r3, #32
 800b9be:	7812      	ldrb	r2, [r2, #0]
 800b9c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9c6:	1c5a      	adds	r2, r3, #1
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b9e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	695b      	ldr	r3, [r3, #20]
 800b9ec:	f003 0301 	and.w	r3, r3, #1
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	d11d      	bne.n	800ba30 <HAL_SPI_TransmitReceive+0x3a4>
 800b9f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d01a      	beq.n	800ba30 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba06:	7812      	ldrb	r2, [r2, #0]
 800ba08:	b2d2      	uxtb	r2, r2
 800ba0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba10:	1c5a      	adds	r2, r3, #1
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba1c:	b29b      	uxth	r3, r3
 800ba1e:	3b01      	subs	r3, #1
 800ba20:	b29a      	uxth	r2, r3
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba2e:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba30:	f7f6 fe32 	bl	8002698 <HAL_GetTick>
 800ba34:	4602      	mov	r2, r0
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	1ad3      	subs	r3, r2, r3
 800ba3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d803      	bhi.n	800ba48 <HAL_SPI_TransmitReceive+0x3bc>
 800ba40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba46:	d102      	bne.n	800ba4e <HAL_SPI_TransmitReceive+0x3c2>
 800ba48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d114      	bne.n	800ba78 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ba4e:	68f8      	ldr	r0, [r7, #12]
 800ba50:	f000 f844 	bl	800badc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2200      	movs	r2, #0
 800ba58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2201      	movs	r2, #1
 800ba70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800ba74:	2303      	movs	r3, #3
 800ba76:	e02c      	b.n	800bad2 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ba78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d190      	bne.n	800b9a0 <HAL_SPI_TransmitReceive+0x314>
 800ba7e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d18d      	bne.n	800b9a0 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800ba84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba86:	9300      	str	r3, [sp, #0]
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	2108      	movs	r1, #8
 800ba8e:	68f8      	ldr	r0, [r7, #12]
 800ba90:	f000 f8c4 	bl	800bc1c <SPI_WaitOnFlagUntilTimeout>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d007      	beq.n	800baaa <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800baa0:	f043 0220 	orr.w	r2, r3, #32
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800baaa:	68f8      	ldr	r0, [r7, #12]
 800baac:	f000 f816 	bl	800badc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2200      	movs	r2, #0
 800bab4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2201      	movs	r2, #1
 800babc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d001      	beq.n	800bace <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800baca:	2301      	movs	r3, #1
 800bacc:	e001      	b.n	800bad2 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800bace:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3730      	adds	r7, #48	; 0x30
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	bf00      	nop

0800badc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800badc:	b480      	push	{r7}
 800bade:	b085      	sub	sp, #20
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	695b      	ldr	r3, [r3, #20]
 800baea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	699a      	ldr	r2, [r3, #24]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f042 0208 	orr.w	r2, r2, #8
 800bafa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	699a      	ldr	r2, [r3, #24]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f042 0210 	orr.w	r2, r2, #16
 800bb0a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	681a      	ldr	r2, [r3, #0]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f022 0201 	bic.w	r2, r2, #1
 800bb1a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	6919      	ldr	r1, [r3, #16]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	4b3c      	ldr	r3, [pc, #240]	; (800bc18 <SPI_CloseTransfer+0x13c>)
 800bb28:	400b      	ands	r3, r1
 800bb2a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	689a      	ldr	r2, [r3, #8]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800bb3a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	2b04      	cmp	r3, #4
 800bb46:	d014      	beq.n	800bb72 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f003 0320 	and.w	r3, r3, #32
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d00f      	beq.n	800bb72 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	699a      	ldr	r2, [r3, #24]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f042 0220 	orr.w	r2, r2, #32
 800bb70:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	2b03      	cmp	r3, #3
 800bb7c:	d014      	beq.n	800bba8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d00f      	beq.n	800bba8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb8e:	f043 0204 	orr.w	r2, r3, #4
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	699a      	ldr	r2, [r3, #24]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bba6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d00f      	beq.n	800bbd2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbb8:	f043 0201 	orr.w	r2, r3, #1
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	699a      	ldr	r2, [r3, #24]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbd0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d00f      	beq.n	800bbfc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbe2:	f043 0208 	orr.w	r2, r3, #8
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	699a      	ldr	r2, [r3, #24]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bbfa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2200      	movs	r2, #0
 800bc08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800bc0c:	bf00      	nop
 800bc0e:	3714      	adds	r7, #20
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr
 800bc18:	fffffc90 	.word	0xfffffc90

0800bc1c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	603b      	str	r3, [r7, #0]
 800bc28:	4613      	mov	r3, r2
 800bc2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bc2c:	e010      	b.n	800bc50 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc2e:	f7f6 fd33 	bl	8002698 <HAL_GetTick>
 800bc32:	4602      	mov	r2, r0
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	1ad3      	subs	r3, r2, r3
 800bc38:	69ba      	ldr	r2, [r7, #24]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d803      	bhi.n	800bc46 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc44:	d102      	bne.n	800bc4c <SPI_WaitOnFlagUntilTimeout+0x30>
 800bc46:	69bb      	ldr	r3, [r7, #24]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d101      	bne.n	800bc50 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800bc4c:	2303      	movs	r3, #3
 800bc4e:	e00f      	b.n	800bc70 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	695a      	ldr	r2, [r3, #20]
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	4013      	ands	r3, r2
 800bc5a:	68ba      	ldr	r2, [r7, #8]
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	bf0c      	ite	eq
 800bc60:	2301      	moveq	r3, #1
 800bc62:	2300      	movne	r3, #0
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	461a      	mov	r2, r3
 800bc68:	79fb      	ldrb	r3, [r7, #7]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d0df      	beq.n	800bc2e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800bc6e:	2300      	movs	r3, #0
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b085      	sub	sp, #20
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc84:	095b      	lsrs	r3, r3, #5
 800bc86:	3301      	adds	r3, #1
 800bc88:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	3301      	adds	r3, #1
 800bc90:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	3307      	adds	r3, #7
 800bc96:	08db      	lsrs	r3, r3, #3
 800bc98:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	68fa      	ldr	r2, [r7, #12]
 800bc9e:	fb02 f303 	mul.w	r3, r2, r3
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3714      	adds	r7, #20
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr
	...

0800bcb0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d109      	bne.n	800bcd8 <HAL_TIM_OC_Start_IT+0x28>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	bf14      	ite	ne
 800bcd0:	2301      	movne	r3, #1
 800bcd2:	2300      	moveq	r3, #0
 800bcd4:	b2db      	uxtb	r3, r3
 800bcd6:	e03c      	b.n	800bd52 <HAL_TIM_OC_Start_IT+0xa2>
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	2b04      	cmp	r3, #4
 800bcdc:	d109      	bne.n	800bcf2 <HAL_TIM_OC_Start_IT+0x42>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bce4:	b2db      	uxtb	r3, r3
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	bf14      	ite	ne
 800bcea:	2301      	movne	r3, #1
 800bcec:	2300      	moveq	r3, #0
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	e02f      	b.n	800bd52 <HAL_TIM_OC_Start_IT+0xa2>
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	2b08      	cmp	r3, #8
 800bcf6:	d109      	bne.n	800bd0c <HAL_TIM_OC_Start_IT+0x5c>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bcfe:	b2db      	uxtb	r3, r3
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	bf14      	ite	ne
 800bd04:	2301      	movne	r3, #1
 800bd06:	2300      	moveq	r3, #0
 800bd08:	b2db      	uxtb	r3, r3
 800bd0a:	e022      	b.n	800bd52 <HAL_TIM_OC_Start_IT+0xa2>
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	2b0c      	cmp	r3, #12
 800bd10:	d109      	bne.n	800bd26 <HAL_TIM_OC_Start_IT+0x76>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	bf14      	ite	ne
 800bd1e:	2301      	movne	r3, #1
 800bd20:	2300      	moveq	r3, #0
 800bd22:	b2db      	uxtb	r3, r3
 800bd24:	e015      	b.n	800bd52 <HAL_TIM_OC_Start_IT+0xa2>
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	2b10      	cmp	r3, #16
 800bd2a:	d109      	bne.n	800bd40 <HAL_TIM_OC_Start_IT+0x90>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	bf14      	ite	ne
 800bd38:	2301      	movne	r3, #1
 800bd3a:	2300      	moveq	r3, #0
 800bd3c:	b2db      	uxtb	r3, r3
 800bd3e:	e008      	b.n	800bd52 <HAL_TIM_OC_Start_IT+0xa2>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bd46:	b2db      	uxtb	r3, r3
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	bf14      	ite	ne
 800bd4c:	2301      	movne	r3, #1
 800bd4e:	2300      	moveq	r3, #0
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d001      	beq.n	800bd5a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800bd56:	2301      	movs	r3, #1
 800bd58:	e0ec      	b.n	800bf34 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d104      	bne.n	800bd6a <HAL_TIM_OC_Start_IT+0xba>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2202      	movs	r2, #2
 800bd64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd68:	e023      	b.n	800bdb2 <HAL_TIM_OC_Start_IT+0x102>
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	2b04      	cmp	r3, #4
 800bd6e:	d104      	bne.n	800bd7a <HAL_TIM_OC_Start_IT+0xca>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2202      	movs	r2, #2
 800bd74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd78:	e01b      	b.n	800bdb2 <HAL_TIM_OC_Start_IT+0x102>
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	2b08      	cmp	r3, #8
 800bd7e:	d104      	bne.n	800bd8a <HAL_TIM_OC_Start_IT+0xda>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2202      	movs	r2, #2
 800bd84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd88:	e013      	b.n	800bdb2 <HAL_TIM_OC_Start_IT+0x102>
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	2b0c      	cmp	r3, #12
 800bd8e:	d104      	bne.n	800bd9a <HAL_TIM_OC_Start_IT+0xea>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2202      	movs	r2, #2
 800bd94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bd98:	e00b      	b.n	800bdb2 <HAL_TIM_OC_Start_IT+0x102>
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	2b10      	cmp	r3, #16
 800bd9e:	d104      	bne.n	800bdaa <HAL_TIM_OC_Start_IT+0xfa>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2202      	movs	r2, #2
 800bda4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bda8:	e003      	b.n	800bdb2 <HAL_TIM_OC_Start_IT+0x102>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2202      	movs	r2, #2
 800bdae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	2b0c      	cmp	r3, #12
 800bdb6:	d841      	bhi.n	800be3c <HAL_TIM_OC_Start_IT+0x18c>
 800bdb8:	a201      	add	r2, pc, #4	; (adr r2, 800bdc0 <HAL_TIM_OC_Start_IT+0x110>)
 800bdba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdbe:	bf00      	nop
 800bdc0:	0800bdf5 	.word	0x0800bdf5
 800bdc4:	0800be3d 	.word	0x0800be3d
 800bdc8:	0800be3d 	.word	0x0800be3d
 800bdcc:	0800be3d 	.word	0x0800be3d
 800bdd0:	0800be07 	.word	0x0800be07
 800bdd4:	0800be3d 	.word	0x0800be3d
 800bdd8:	0800be3d 	.word	0x0800be3d
 800bddc:	0800be3d 	.word	0x0800be3d
 800bde0:	0800be19 	.word	0x0800be19
 800bde4:	0800be3d 	.word	0x0800be3d
 800bde8:	0800be3d 	.word	0x0800be3d
 800bdec:	0800be3d 	.word	0x0800be3d
 800bdf0:	0800be2b 	.word	0x0800be2b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	68da      	ldr	r2, [r3, #12]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f042 0202 	orr.w	r2, r2, #2
 800be02:	60da      	str	r2, [r3, #12]
      break;
 800be04:	e01d      	b.n	800be42 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	68da      	ldr	r2, [r3, #12]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f042 0204 	orr.w	r2, r2, #4
 800be14:	60da      	str	r2, [r3, #12]
      break;
 800be16:	e014      	b.n	800be42 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	68da      	ldr	r2, [r3, #12]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f042 0208 	orr.w	r2, r2, #8
 800be26:	60da      	str	r2, [r3, #12]
      break;
 800be28:	e00b      	b.n	800be42 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	68da      	ldr	r2, [r3, #12]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f042 0210 	orr.w	r2, r2, #16
 800be38:	60da      	str	r2, [r3, #12]
      break;
 800be3a:	e002      	b.n	800be42 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800be3c:	2301      	movs	r3, #1
 800be3e:	73fb      	strb	r3, [r7, #15]
      break;
 800be40:	bf00      	nop
  }

  if (status == HAL_OK)
 800be42:	7bfb      	ldrb	r3, [r7, #15]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d174      	bne.n	800bf32 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2201      	movs	r2, #1
 800be4e:	6839      	ldr	r1, [r7, #0]
 800be50:	4618      	mov	r0, r3
 800be52:	f000 fea9 	bl	800cba8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4a38      	ldr	r2, [pc, #224]	; (800bf3c <HAL_TIM_OC_Start_IT+0x28c>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d013      	beq.n	800be88 <HAL_TIM_OC_Start_IT+0x1d8>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4a36      	ldr	r2, [pc, #216]	; (800bf40 <HAL_TIM_OC_Start_IT+0x290>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d00e      	beq.n	800be88 <HAL_TIM_OC_Start_IT+0x1d8>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4a35      	ldr	r2, [pc, #212]	; (800bf44 <HAL_TIM_OC_Start_IT+0x294>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d009      	beq.n	800be88 <HAL_TIM_OC_Start_IT+0x1d8>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a33      	ldr	r2, [pc, #204]	; (800bf48 <HAL_TIM_OC_Start_IT+0x298>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d004      	beq.n	800be88 <HAL_TIM_OC_Start_IT+0x1d8>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4a32      	ldr	r2, [pc, #200]	; (800bf4c <HAL_TIM_OC_Start_IT+0x29c>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d101      	bne.n	800be8c <HAL_TIM_OC_Start_IT+0x1dc>
 800be88:	2301      	movs	r3, #1
 800be8a:	e000      	b.n	800be8e <HAL_TIM_OC_Start_IT+0x1de>
 800be8c:	2300      	movs	r3, #0
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d007      	beq.n	800bea2 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bea0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	4a25      	ldr	r2, [pc, #148]	; (800bf3c <HAL_TIM_OC_Start_IT+0x28c>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d022      	beq.n	800bef2 <HAL_TIM_OC_Start_IT+0x242>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800beb4:	d01d      	beq.n	800bef2 <HAL_TIM_OC_Start_IT+0x242>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	4a25      	ldr	r2, [pc, #148]	; (800bf50 <HAL_TIM_OC_Start_IT+0x2a0>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d018      	beq.n	800bef2 <HAL_TIM_OC_Start_IT+0x242>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4a23      	ldr	r2, [pc, #140]	; (800bf54 <HAL_TIM_OC_Start_IT+0x2a4>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d013      	beq.n	800bef2 <HAL_TIM_OC_Start_IT+0x242>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4a22      	ldr	r2, [pc, #136]	; (800bf58 <HAL_TIM_OC_Start_IT+0x2a8>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d00e      	beq.n	800bef2 <HAL_TIM_OC_Start_IT+0x242>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4a19      	ldr	r2, [pc, #100]	; (800bf40 <HAL_TIM_OC_Start_IT+0x290>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d009      	beq.n	800bef2 <HAL_TIM_OC_Start_IT+0x242>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4a1e      	ldr	r2, [pc, #120]	; (800bf5c <HAL_TIM_OC_Start_IT+0x2ac>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d004      	beq.n	800bef2 <HAL_TIM_OC_Start_IT+0x242>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4a15      	ldr	r2, [pc, #84]	; (800bf44 <HAL_TIM_OC_Start_IT+0x294>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d115      	bne.n	800bf1e <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	689a      	ldr	r2, [r3, #8]
 800bef8:	4b19      	ldr	r3, [pc, #100]	; (800bf60 <HAL_TIM_OC_Start_IT+0x2b0>)
 800befa:	4013      	ands	r3, r2
 800befc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	2b06      	cmp	r3, #6
 800bf02:	d015      	beq.n	800bf30 <HAL_TIM_OC_Start_IT+0x280>
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf0a:	d011      	beq.n	800bf30 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	681a      	ldr	r2, [r3, #0]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f042 0201 	orr.w	r2, r2, #1
 800bf1a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf1c:	e008      	b.n	800bf30 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	681a      	ldr	r2, [r3, #0]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f042 0201 	orr.w	r2, r2, #1
 800bf2c:	601a      	str	r2, [r3, #0]
 800bf2e:	e000      	b.n	800bf32 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf30:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800bf32:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3710      	adds	r7, #16
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	40010000 	.word	0x40010000
 800bf40:	40010400 	.word	0x40010400
 800bf44:	40014000 	.word	0x40014000
 800bf48:	40014400 	.word	0x40014400
 800bf4c:	40014800 	.word	0x40014800
 800bf50:	40000400 	.word	0x40000400
 800bf54:	40000800 	.word	0x40000800
 800bf58:	40000c00 	.word	0x40000c00
 800bf5c:	40001800 	.word	0x40001800
 800bf60:	00010007 	.word	0x00010007

0800bf64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b082      	sub	sp, #8
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d101      	bne.n	800bf76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bf72:	2301      	movs	r3, #1
 800bf74:	e049      	b.n	800c00a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d106      	bne.n	800bf90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f7f6 f8be 	bl	800210c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2202      	movs	r2, #2
 800bf94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681a      	ldr	r2, [r3, #0]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	3304      	adds	r3, #4
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	4610      	mov	r0, r2
 800bfa4:	f000 fa90 	bl	800c4c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2201      	movs	r2, #1
 800bfac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2201      	movs	r2, #1
 800bfbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2201      	movs	r2, #1
 800bfcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2201      	movs	r2, #1
 800bfec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2201      	movs	r2, #1
 800bff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2201      	movs	r2, #1
 800bffc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2201      	movs	r2, #1
 800c004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c008:	2300      	movs	r3, #0
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3708      	adds	r7, #8
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}

0800c012 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c012:	b580      	push	{r7, lr}
 800c014:	b082      	sub	sp, #8
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	691b      	ldr	r3, [r3, #16]
 800c020:	f003 0302 	and.w	r3, r3, #2
 800c024:	2b02      	cmp	r3, #2
 800c026:	d122      	bne.n	800c06e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	f003 0302 	and.w	r3, r3, #2
 800c032:	2b02      	cmp	r3, #2
 800c034:	d11b      	bne.n	800c06e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f06f 0202 	mvn.w	r2, #2
 800c03e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2201      	movs	r2, #1
 800c044:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	699b      	ldr	r3, [r3, #24]
 800c04c:	f003 0303 	and.w	r3, r3, #3
 800c050:	2b00      	cmp	r3, #0
 800c052:	d003      	beq.n	800c05c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 fa19 	bl	800c48c <HAL_TIM_IC_CaptureCallback>
 800c05a:	e005      	b.n	800c068 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f7f4 fad3 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 fa1c 	bl	800c4a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2200      	movs	r2, #0
 800c06c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	691b      	ldr	r3, [r3, #16]
 800c074:	f003 0304 	and.w	r3, r3, #4
 800c078:	2b04      	cmp	r3, #4
 800c07a:	d122      	bne.n	800c0c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	f003 0304 	and.w	r3, r3, #4
 800c086:	2b04      	cmp	r3, #4
 800c088:	d11b      	bne.n	800c0c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f06f 0204 	mvn.w	r2, #4
 800c092:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2202      	movs	r2, #2
 800c098:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	699b      	ldr	r3, [r3, #24]
 800c0a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d003      	beq.n	800c0b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 f9ef 	bl	800c48c <HAL_TIM_IC_CaptureCallback>
 800c0ae:	e005      	b.n	800c0bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f7f4 faa9 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 f9f2 	bl	800c4a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	691b      	ldr	r3, [r3, #16]
 800c0c8:	f003 0308 	and.w	r3, r3, #8
 800c0cc:	2b08      	cmp	r3, #8
 800c0ce:	d122      	bne.n	800c116 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	68db      	ldr	r3, [r3, #12]
 800c0d6:	f003 0308 	and.w	r3, r3, #8
 800c0da:	2b08      	cmp	r3, #8
 800c0dc:	d11b      	bne.n	800c116 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f06f 0208 	mvn.w	r2, #8
 800c0e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2204      	movs	r2, #4
 800c0ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	69db      	ldr	r3, [r3, #28]
 800c0f4:	f003 0303 	and.w	r3, r3, #3
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d003      	beq.n	800c104 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f000 f9c5 	bl	800c48c <HAL_TIM_IC_CaptureCallback>
 800c102:	e005      	b.n	800c110 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f7f4 fa7f 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 f9c8 	bl	800c4a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2200      	movs	r2, #0
 800c114:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	691b      	ldr	r3, [r3, #16]
 800c11c:	f003 0310 	and.w	r3, r3, #16
 800c120:	2b10      	cmp	r3, #16
 800c122:	d122      	bne.n	800c16a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	68db      	ldr	r3, [r3, #12]
 800c12a:	f003 0310 	and.w	r3, r3, #16
 800c12e:	2b10      	cmp	r3, #16
 800c130:	d11b      	bne.n	800c16a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f06f 0210 	mvn.w	r2, #16
 800c13a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2208      	movs	r2, #8
 800c140:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	69db      	ldr	r3, [r3, #28]
 800c148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d003      	beq.n	800c158 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f000 f99b 	bl	800c48c <HAL_TIM_IC_CaptureCallback>
 800c156:	e005      	b.n	800c164 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f7f4 fa55 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 f99e 	bl	800c4a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2200      	movs	r2, #0
 800c168:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	691b      	ldr	r3, [r3, #16]
 800c170:	f003 0301 	and.w	r3, r3, #1
 800c174:	2b01      	cmp	r3, #1
 800c176:	d10e      	bne.n	800c196 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	f003 0301 	and.w	r3, r3, #1
 800c182:	2b01      	cmp	r3, #1
 800c184:	d107      	bne.n	800c196 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f06f 0201 	mvn.w	r2, #1
 800c18e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f000 f971 	bl	800c478 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	691b      	ldr	r3, [r3, #16]
 800c19c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1a0:	2b80      	cmp	r3, #128	; 0x80
 800c1a2:	d10e      	bne.n	800c1c2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1ae:	2b80      	cmp	r3, #128	; 0x80
 800c1b0:	d107      	bne.n	800c1c2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c1ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 fe2f 	bl	800ce20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	691b      	ldr	r3, [r3, #16]
 800c1c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1d0:	d10e      	bne.n	800c1f0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1dc:	2b80      	cmp	r3, #128	; 0x80
 800c1de:	d107      	bne.n	800c1f0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c1e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 fe22 	bl	800ce34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	691b      	ldr	r3, [r3, #16]
 800c1f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1fa:	2b40      	cmp	r3, #64	; 0x40
 800c1fc:	d10e      	bne.n	800c21c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	68db      	ldr	r3, [r3, #12]
 800c204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c208:	2b40      	cmp	r3, #64	; 0x40
 800c20a:	d107      	bne.n	800c21c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f000 f94c 	bl	800c4b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	691b      	ldr	r3, [r3, #16]
 800c222:	f003 0320 	and.w	r3, r3, #32
 800c226:	2b20      	cmp	r3, #32
 800c228:	d10e      	bne.n	800c248 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	68db      	ldr	r3, [r3, #12]
 800c230:	f003 0320 	and.w	r3, r3, #32
 800c234:	2b20      	cmp	r3, #32
 800c236:	d107      	bne.n	800c248 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f06f 0220 	mvn.w	r2, #32
 800c240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f000 fde2 	bl	800ce0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c248:	bf00      	nop
 800c24a:	3708      	adds	r7, #8
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b086      	sub	sp, #24
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c25c:	2300      	movs	r3, #0
 800c25e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c266:	2b01      	cmp	r3, #1
 800c268:	d101      	bne.n	800c26e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c26a:	2302      	movs	r3, #2
 800c26c:	e0ff      	b.n	800c46e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2201      	movs	r2, #1
 800c272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2b14      	cmp	r3, #20
 800c27a:	f200 80f0 	bhi.w	800c45e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c27e:	a201      	add	r2, pc, #4	; (adr r2, 800c284 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c284:	0800c2d9 	.word	0x0800c2d9
 800c288:	0800c45f 	.word	0x0800c45f
 800c28c:	0800c45f 	.word	0x0800c45f
 800c290:	0800c45f 	.word	0x0800c45f
 800c294:	0800c319 	.word	0x0800c319
 800c298:	0800c45f 	.word	0x0800c45f
 800c29c:	0800c45f 	.word	0x0800c45f
 800c2a0:	0800c45f 	.word	0x0800c45f
 800c2a4:	0800c35b 	.word	0x0800c35b
 800c2a8:	0800c45f 	.word	0x0800c45f
 800c2ac:	0800c45f 	.word	0x0800c45f
 800c2b0:	0800c45f 	.word	0x0800c45f
 800c2b4:	0800c39b 	.word	0x0800c39b
 800c2b8:	0800c45f 	.word	0x0800c45f
 800c2bc:	0800c45f 	.word	0x0800c45f
 800c2c0:	0800c45f 	.word	0x0800c45f
 800c2c4:	0800c3dd 	.word	0x0800c3dd
 800c2c8:	0800c45f 	.word	0x0800c45f
 800c2cc:	0800c45f 	.word	0x0800c45f
 800c2d0:	0800c45f 	.word	0x0800c45f
 800c2d4:	0800c41d 	.word	0x0800c41d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	68b9      	ldr	r1, [r7, #8]
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f000 f98c 	bl	800c5fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	699a      	ldr	r2, [r3, #24]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f042 0208 	orr.w	r2, r2, #8
 800c2f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	699a      	ldr	r2, [r3, #24]
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f022 0204 	bic.w	r2, r2, #4
 800c302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	6999      	ldr	r1, [r3, #24]
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	691a      	ldr	r2, [r3, #16]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	430a      	orrs	r2, r1
 800c314:	619a      	str	r2, [r3, #24]
      break;
 800c316:	e0a5      	b.n	800c464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	68b9      	ldr	r1, [r7, #8]
 800c31e:	4618      	mov	r0, r3
 800c320:	f000 f9fc 	bl	800c71c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	699a      	ldr	r2, [r3, #24]
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	699a      	ldr	r2, [r3, #24]
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	6999      	ldr	r1, [r3, #24]
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	691b      	ldr	r3, [r3, #16]
 800c34e:	021a      	lsls	r2, r3, #8
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	430a      	orrs	r2, r1
 800c356:	619a      	str	r2, [r3, #24]
      break;
 800c358:	e084      	b.n	800c464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	68b9      	ldr	r1, [r7, #8]
 800c360:	4618      	mov	r0, r3
 800c362:	f000 fa65 	bl	800c830 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	69da      	ldr	r2, [r3, #28]
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f042 0208 	orr.w	r2, r2, #8
 800c374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	69da      	ldr	r2, [r3, #28]
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f022 0204 	bic.w	r2, r2, #4
 800c384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	69d9      	ldr	r1, [r3, #28]
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	691a      	ldr	r2, [r3, #16]
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	430a      	orrs	r2, r1
 800c396:	61da      	str	r2, [r3, #28]
      break;
 800c398:	e064      	b.n	800c464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	68b9      	ldr	r1, [r7, #8]
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f000 facd 	bl	800c940 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	69da      	ldr	r2, [r3, #28]
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c3b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	69da      	ldr	r2, [r3, #28]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	69d9      	ldr	r1, [r3, #28]
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	691b      	ldr	r3, [r3, #16]
 800c3d0:	021a      	lsls	r2, r3, #8
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	430a      	orrs	r2, r1
 800c3d8:	61da      	str	r2, [r3, #28]
      break;
 800c3da:	e043      	b.n	800c464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	68b9      	ldr	r1, [r7, #8]
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f000 fb16 	bl	800ca14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f042 0208 	orr.w	r2, r2, #8
 800c3f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f022 0204 	bic.w	r2, r2, #4
 800c406:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	691a      	ldr	r2, [r3, #16]
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	430a      	orrs	r2, r1
 800c418:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c41a:	e023      	b.n	800c464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	68b9      	ldr	r1, [r7, #8]
 800c422:	4618      	mov	r0, r3
 800c424:	f000 fb5a 	bl	800cadc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c436:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c446:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	691b      	ldr	r3, [r3, #16]
 800c452:	021a      	lsls	r2, r3, #8
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	430a      	orrs	r2, r1
 800c45a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c45c:	e002      	b.n	800c464 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c45e:	2301      	movs	r3, #1
 800c460:	75fb      	strb	r3, [r7, #23]
      break;
 800c462:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2200      	movs	r2, #0
 800c468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c46c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3718      	adds	r7, #24
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop

0800c478 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c480:	bf00      	nop
 800c482:	370c      	adds	r7, #12
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c494:	bf00      	nop
 800c496:	370c      	adds	r7, #12
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c4a8:	bf00      	nop
 800c4aa:	370c      	adds	r7, #12
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c4bc:	bf00      	nop
 800c4be:	370c      	adds	r7, #12
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b085      	sub	sp, #20
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	4a40      	ldr	r2, [pc, #256]	; (800c5dc <TIM_Base_SetConfig+0x114>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d013      	beq.n	800c508 <TIM_Base_SetConfig+0x40>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4e6:	d00f      	beq.n	800c508 <TIM_Base_SetConfig+0x40>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	4a3d      	ldr	r2, [pc, #244]	; (800c5e0 <TIM_Base_SetConfig+0x118>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d00b      	beq.n	800c508 <TIM_Base_SetConfig+0x40>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	4a3c      	ldr	r2, [pc, #240]	; (800c5e4 <TIM_Base_SetConfig+0x11c>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d007      	beq.n	800c508 <TIM_Base_SetConfig+0x40>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	4a3b      	ldr	r2, [pc, #236]	; (800c5e8 <TIM_Base_SetConfig+0x120>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d003      	beq.n	800c508 <TIM_Base_SetConfig+0x40>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	4a3a      	ldr	r2, [pc, #232]	; (800c5ec <TIM_Base_SetConfig+0x124>)
 800c504:	4293      	cmp	r3, r2
 800c506:	d108      	bne.n	800c51a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c50e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	68fa      	ldr	r2, [r7, #12]
 800c516:	4313      	orrs	r3, r2
 800c518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	4a2f      	ldr	r2, [pc, #188]	; (800c5dc <TIM_Base_SetConfig+0x114>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d01f      	beq.n	800c562 <TIM_Base_SetConfig+0x9a>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c528:	d01b      	beq.n	800c562 <TIM_Base_SetConfig+0x9a>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	4a2c      	ldr	r2, [pc, #176]	; (800c5e0 <TIM_Base_SetConfig+0x118>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d017      	beq.n	800c562 <TIM_Base_SetConfig+0x9a>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	4a2b      	ldr	r2, [pc, #172]	; (800c5e4 <TIM_Base_SetConfig+0x11c>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d013      	beq.n	800c562 <TIM_Base_SetConfig+0x9a>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	4a2a      	ldr	r2, [pc, #168]	; (800c5e8 <TIM_Base_SetConfig+0x120>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d00f      	beq.n	800c562 <TIM_Base_SetConfig+0x9a>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	4a29      	ldr	r2, [pc, #164]	; (800c5ec <TIM_Base_SetConfig+0x124>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d00b      	beq.n	800c562 <TIM_Base_SetConfig+0x9a>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	4a28      	ldr	r2, [pc, #160]	; (800c5f0 <TIM_Base_SetConfig+0x128>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d007      	beq.n	800c562 <TIM_Base_SetConfig+0x9a>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	4a27      	ldr	r2, [pc, #156]	; (800c5f4 <TIM_Base_SetConfig+0x12c>)
 800c556:	4293      	cmp	r3, r2
 800c558:	d003      	beq.n	800c562 <TIM_Base_SetConfig+0x9a>
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4a26      	ldr	r2, [pc, #152]	; (800c5f8 <TIM_Base_SetConfig+0x130>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d108      	bne.n	800c574 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	68db      	ldr	r3, [r3, #12]
 800c56e:	68fa      	ldr	r2, [r7, #12]
 800c570:	4313      	orrs	r3, r2
 800c572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	695b      	ldr	r3, [r3, #20]
 800c57e:	4313      	orrs	r3, r2
 800c580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	68fa      	ldr	r2, [r7, #12]
 800c586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	689a      	ldr	r2, [r3, #8]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	681a      	ldr	r2, [r3, #0]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	4a10      	ldr	r2, [pc, #64]	; (800c5dc <TIM_Base_SetConfig+0x114>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d00f      	beq.n	800c5c0 <TIM_Base_SetConfig+0xf8>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	4a12      	ldr	r2, [pc, #72]	; (800c5ec <TIM_Base_SetConfig+0x124>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d00b      	beq.n	800c5c0 <TIM_Base_SetConfig+0xf8>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	4a11      	ldr	r2, [pc, #68]	; (800c5f0 <TIM_Base_SetConfig+0x128>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d007      	beq.n	800c5c0 <TIM_Base_SetConfig+0xf8>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	4a10      	ldr	r2, [pc, #64]	; (800c5f4 <TIM_Base_SetConfig+0x12c>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d003      	beq.n	800c5c0 <TIM_Base_SetConfig+0xf8>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	4a0f      	ldr	r2, [pc, #60]	; (800c5f8 <TIM_Base_SetConfig+0x130>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d103      	bne.n	800c5c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	691a      	ldr	r2, [r3, #16]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	615a      	str	r2, [r3, #20]
}
 800c5ce:	bf00      	nop
 800c5d0:	3714      	adds	r7, #20
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d8:	4770      	bx	lr
 800c5da:	bf00      	nop
 800c5dc:	40010000 	.word	0x40010000
 800c5e0:	40000400 	.word	0x40000400
 800c5e4:	40000800 	.word	0x40000800
 800c5e8:	40000c00 	.word	0x40000c00
 800c5ec:	40010400 	.word	0x40010400
 800c5f0:	40014000 	.word	0x40014000
 800c5f4:	40014400 	.word	0x40014400
 800c5f8:	40014800 	.word	0x40014800

0800c5fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b087      	sub	sp, #28
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6a1b      	ldr	r3, [r3, #32]
 800c60a:	f023 0201 	bic.w	r2, r3, #1
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6a1b      	ldr	r3, [r3, #32]
 800c616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	699b      	ldr	r3, [r3, #24]
 800c622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c624:	68fa      	ldr	r2, [r7, #12]
 800c626:	4b37      	ldr	r3, [pc, #220]	; (800c704 <TIM_OC1_SetConfig+0x108>)
 800c628:	4013      	ands	r3, r2
 800c62a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f023 0303 	bic.w	r3, r3, #3
 800c632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	68fa      	ldr	r2, [r7, #12]
 800c63a:	4313      	orrs	r3, r2
 800c63c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	f023 0302 	bic.w	r3, r3, #2
 800c644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	689b      	ldr	r3, [r3, #8]
 800c64a:	697a      	ldr	r2, [r7, #20]
 800c64c:	4313      	orrs	r3, r2
 800c64e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	4a2d      	ldr	r2, [pc, #180]	; (800c708 <TIM_OC1_SetConfig+0x10c>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d00f      	beq.n	800c678 <TIM_OC1_SetConfig+0x7c>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4a2c      	ldr	r2, [pc, #176]	; (800c70c <TIM_OC1_SetConfig+0x110>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d00b      	beq.n	800c678 <TIM_OC1_SetConfig+0x7c>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	4a2b      	ldr	r2, [pc, #172]	; (800c710 <TIM_OC1_SetConfig+0x114>)
 800c664:	4293      	cmp	r3, r2
 800c666:	d007      	beq.n	800c678 <TIM_OC1_SetConfig+0x7c>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	4a2a      	ldr	r2, [pc, #168]	; (800c714 <TIM_OC1_SetConfig+0x118>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d003      	beq.n	800c678 <TIM_OC1_SetConfig+0x7c>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	4a29      	ldr	r2, [pc, #164]	; (800c718 <TIM_OC1_SetConfig+0x11c>)
 800c674:	4293      	cmp	r3, r2
 800c676:	d10c      	bne.n	800c692 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	f023 0308 	bic.w	r3, r3, #8
 800c67e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	68db      	ldr	r3, [r3, #12]
 800c684:	697a      	ldr	r2, [r7, #20]
 800c686:	4313      	orrs	r3, r2
 800c688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	f023 0304 	bic.w	r3, r3, #4
 800c690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	4a1c      	ldr	r2, [pc, #112]	; (800c708 <TIM_OC1_SetConfig+0x10c>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d00f      	beq.n	800c6ba <TIM_OC1_SetConfig+0xbe>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	4a1b      	ldr	r2, [pc, #108]	; (800c70c <TIM_OC1_SetConfig+0x110>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d00b      	beq.n	800c6ba <TIM_OC1_SetConfig+0xbe>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	4a1a      	ldr	r2, [pc, #104]	; (800c710 <TIM_OC1_SetConfig+0x114>)
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d007      	beq.n	800c6ba <TIM_OC1_SetConfig+0xbe>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	4a19      	ldr	r2, [pc, #100]	; (800c714 <TIM_OC1_SetConfig+0x118>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d003      	beq.n	800c6ba <TIM_OC1_SetConfig+0xbe>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	4a18      	ldr	r2, [pc, #96]	; (800c718 <TIM_OC1_SetConfig+0x11c>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d111      	bne.n	800c6de <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c6c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c6c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	695b      	ldr	r3, [r3, #20]
 800c6ce:	693a      	ldr	r2, [r7, #16]
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	699b      	ldr	r3, [r3, #24]
 800c6d8:	693a      	ldr	r2, [r7, #16]
 800c6da:	4313      	orrs	r3, r2
 800c6dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	693a      	ldr	r2, [r7, #16]
 800c6e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	68fa      	ldr	r2, [r7, #12]
 800c6e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	685a      	ldr	r2, [r3, #4]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	697a      	ldr	r2, [r7, #20]
 800c6f6:	621a      	str	r2, [r3, #32]
}
 800c6f8:	bf00      	nop
 800c6fa:	371c      	adds	r7, #28
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr
 800c704:	fffeff8f 	.word	0xfffeff8f
 800c708:	40010000 	.word	0x40010000
 800c70c:	40010400 	.word	0x40010400
 800c710:	40014000 	.word	0x40014000
 800c714:	40014400 	.word	0x40014400
 800c718:	40014800 	.word	0x40014800

0800c71c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b087      	sub	sp, #28
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6a1b      	ldr	r3, [r3, #32]
 800c72a:	f023 0210 	bic.w	r2, r3, #16
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6a1b      	ldr	r3, [r3, #32]
 800c736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	699b      	ldr	r3, [r3, #24]
 800c742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c744:	68fa      	ldr	r2, [r7, #12]
 800c746:	4b34      	ldr	r3, [pc, #208]	; (800c818 <TIM_OC2_SetConfig+0xfc>)
 800c748:	4013      	ands	r3, r2
 800c74a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c752:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	021b      	lsls	r3, r3, #8
 800c75a:	68fa      	ldr	r2, [r7, #12]
 800c75c:	4313      	orrs	r3, r2
 800c75e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	f023 0320 	bic.w	r3, r3, #32
 800c766:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	689b      	ldr	r3, [r3, #8]
 800c76c:	011b      	lsls	r3, r3, #4
 800c76e:	697a      	ldr	r2, [r7, #20]
 800c770:	4313      	orrs	r3, r2
 800c772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	4a29      	ldr	r2, [pc, #164]	; (800c81c <TIM_OC2_SetConfig+0x100>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d003      	beq.n	800c784 <TIM_OC2_SetConfig+0x68>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	4a28      	ldr	r2, [pc, #160]	; (800c820 <TIM_OC2_SetConfig+0x104>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d10d      	bne.n	800c7a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c78a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	68db      	ldr	r3, [r3, #12]
 800c790:	011b      	lsls	r3, r3, #4
 800c792:	697a      	ldr	r2, [r7, #20]
 800c794:	4313      	orrs	r3, r2
 800c796:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c79e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	4a1e      	ldr	r2, [pc, #120]	; (800c81c <TIM_OC2_SetConfig+0x100>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d00f      	beq.n	800c7c8 <TIM_OC2_SetConfig+0xac>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	4a1d      	ldr	r2, [pc, #116]	; (800c820 <TIM_OC2_SetConfig+0x104>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d00b      	beq.n	800c7c8 <TIM_OC2_SetConfig+0xac>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	4a1c      	ldr	r2, [pc, #112]	; (800c824 <TIM_OC2_SetConfig+0x108>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d007      	beq.n	800c7c8 <TIM_OC2_SetConfig+0xac>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	4a1b      	ldr	r2, [pc, #108]	; (800c828 <TIM_OC2_SetConfig+0x10c>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d003      	beq.n	800c7c8 <TIM_OC2_SetConfig+0xac>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	4a1a      	ldr	r2, [pc, #104]	; (800c82c <TIM_OC2_SetConfig+0x110>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d113      	bne.n	800c7f0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c7ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c7d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	695b      	ldr	r3, [r3, #20]
 800c7dc:	009b      	lsls	r3, r3, #2
 800c7de:	693a      	ldr	r2, [r7, #16]
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	699b      	ldr	r3, [r3, #24]
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	693a      	ldr	r2, [r7, #16]
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	693a      	ldr	r2, [r7, #16]
 800c7f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	68fa      	ldr	r2, [r7, #12]
 800c7fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	685a      	ldr	r2, [r3, #4]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	697a      	ldr	r2, [r7, #20]
 800c808:	621a      	str	r2, [r3, #32]
}
 800c80a:	bf00      	nop
 800c80c:	371c      	adds	r7, #28
 800c80e:	46bd      	mov	sp, r7
 800c810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c814:	4770      	bx	lr
 800c816:	bf00      	nop
 800c818:	feff8fff 	.word	0xfeff8fff
 800c81c:	40010000 	.word	0x40010000
 800c820:	40010400 	.word	0x40010400
 800c824:	40014000 	.word	0x40014000
 800c828:	40014400 	.word	0x40014400
 800c82c:	40014800 	.word	0x40014800

0800c830 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c830:	b480      	push	{r7}
 800c832:	b087      	sub	sp, #28
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6a1b      	ldr	r3, [r3, #32]
 800c83e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6a1b      	ldr	r3, [r3, #32]
 800c84a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	69db      	ldr	r3, [r3, #28]
 800c856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c858:	68fa      	ldr	r2, [r7, #12]
 800c85a:	4b33      	ldr	r3, [pc, #204]	; (800c928 <TIM_OC3_SetConfig+0xf8>)
 800c85c:	4013      	ands	r3, r2
 800c85e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	f023 0303 	bic.w	r3, r3, #3
 800c866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	68fa      	ldr	r2, [r7, #12]
 800c86e:	4313      	orrs	r3, r2
 800c870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	689b      	ldr	r3, [r3, #8]
 800c87e:	021b      	lsls	r3, r3, #8
 800c880:	697a      	ldr	r2, [r7, #20]
 800c882:	4313      	orrs	r3, r2
 800c884:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	4a28      	ldr	r2, [pc, #160]	; (800c92c <TIM_OC3_SetConfig+0xfc>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d003      	beq.n	800c896 <TIM_OC3_SetConfig+0x66>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	4a27      	ldr	r2, [pc, #156]	; (800c930 <TIM_OC3_SetConfig+0x100>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d10d      	bne.n	800c8b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c89c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	68db      	ldr	r3, [r3, #12]
 800c8a2:	021b      	lsls	r3, r3, #8
 800c8a4:	697a      	ldr	r2, [r7, #20]
 800c8a6:	4313      	orrs	r3, r2
 800c8a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c8b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	4a1d      	ldr	r2, [pc, #116]	; (800c92c <TIM_OC3_SetConfig+0xfc>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d00f      	beq.n	800c8da <TIM_OC3_SetConfig+0xaa>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	4a1c      	ldr	r2, [pc, #112]	; (800c930 <TIM_OC3_SetConfig+0x100>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d00b      	beq.n	800c8da <TIM_OC3_SetConfig+0xaa>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	4a1b      	ldr	r2, [pc, #108]	; (800c934 <TIM_OC3_SetConfig+0x104>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d007      	beq.n	800c8da <TIM_OC3_SetConfig+0xaa>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	4a1a      	ldr	r2, [pc, #104]	; (800c938 <TIM_OC3_SetConfig+0x108>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d003      	beq.n	800c8da <TIM_OC3_SetConfig+0xaa>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	4a19      	ldr	r2, [pc, #100]	; (800c93c <TIM_OC3_SetConfig+0x10c>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d113      	bne.n	800c902 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c8e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c8e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	695b      	ldr	r3, [r3, #20]
 800c8ee:	011b      	lsls	r3, r3, #4
 800c8f0:	693a      	ldr	r2, [r7, #16]
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	699b      	ldr	r3, [r3, #24]
 800c8fa:	011b      	lsls	r3, r3, #4
 800c8fc:	693a      	ldr	r2, [r7, #16]
 800c8fe:	4313      	orrs	r3, r2
 800c900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	693a      	ldr	r2, [r7, #16]
 800c906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	68fa      	ldr	r2, [r7, #12]
 800c90c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	685a      	ldr	r2, [r3, #4]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	697a      	ldr	r2, [r7, #20]
 800c91a:	621a      	str	r2, [r3, #32]
}
 800c91c:	bf00      	nop
 800c91e:	371c      	adds	r7, #28
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr
 800c928:	fffeff8f 	.word	0xfffeff8f
 800c92c:	40010000 	.word	0x40010000
 800c930:	40010400 	.word	0x40010400
 800c934:	40014000 	.word	0x40014000
 800c938:	40014400 	.word	0x40014400
 800c93c:	40014800 	.word	0x40014800

0800c940 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c940:	b480      	push	{r7}
 800c942:	b087      	sub	sp, #28
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6a1b      	ldr	r3, [r3, #32]
 800c94e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6a1b      	ldr	r3, [r3, #32]
 800c95a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	69db      	ldr	r3, [r3, #28]
 800c966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c968:	68fa      	ldr	r2, [r7, #12]
 800c96a:	4b24      	ldr	r3, [pc, #144]	; (800c9fc <TIM_OC4_SetConfig+0xbc>)
 800c96c:	4013      	ands	r3, r2
 800c96e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	021b      	lsls	r3, r3, #8
 800c97e:	68fa      	ldr	r2, [r7, #12]
 800c980:	4313      	orrs	r3, r2
 800c982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c98a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	689b      	ldr	r3, [r3, #8]
 800c990:	031b      	lsls	r3, r3, #12
 800c992:	693a      	ldr	r2, [r7, #16]
 800c994:	4313      	orrs	r3, r2
 800c996:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	4a19      	ldr	r2, [pc, #100]	; (800ca00 <TIM_OC4_SetConfig+0xc0>)
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d00f      	beq.n	800c9c0 <TIM_OC4_SetConfig+0x80>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	4a18      	ldr	r2, [pc, #96]	; (800ca04 <TIM_OC4_SetConfig+0xc4>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d00b      	beq.n	800c9c0 <TIM_OC4_SetConfig+0x80>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	4a17      	ldr	r2, [pc, #92]	; (800ca08 <TIM_OC4_SetConfig+0xc8>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d007      	beq.n	800c9c0 <TIM_OC4_SetConfig+0x80>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	4a16      	ldr	r2, [pc, #88]	; (800ca0c <TIM_OC4_SetConfig+0xcc>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d003      	beq.n	800c9c0 <TIM_OC4_SetConfig+0x80>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	4a15      	ldr	r2, [pc, #84]	; (800ca10 <TIM_OC4_SetConfig+0xd0>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d109      	bne.n	800c9d4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c9c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	695b      	ldr	r3, [r3, #20]
 800c9cc:	019b      	lsls	r3, r3, #6
 800c9ce:	697a      	ldr	r2, [r7, #20]
 800c9d0:	4313      	orrs	r3, r2
 800c9d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	697a      	ldr	r2, [r7, #20]
 800c9d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	68fa      	ldr	r2, [r7, #12]
 800c9de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	685a      	ldr	r2, [r3, #4]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	693a      	ldr	r2, [r7, #16]
 800c9ec:	621a      	str	r2, [r3, #32]
}
 800c9ee:	bf00      	nop
 800c9f0:	371c      	adds	r7, #28
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f8:	4770      	bx	lr
 800c9fa:	bf00      	nop
 800c9fc:	feff8fff 	.word	0xfeff8fff
 800ca00:	40010000 	.word	0x40010000
 800ca04:	40010400 	.word	0x40010400
 800ca08:	40014000 	.word	0x40014000
 800ca0c:	40014400 	.word	0x40014400
 800ca10:	40014800 	.word	0x40014800

0800ca14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b087      	sub	sp, #28
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6a1b      	ldr	r3, [r3, #32]
 800ca22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6a1b      	ldr	r3, [r3, #32]
 800ca2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	685b      	ldr	r3, [r3, #4]
 800ca34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ca3c:	68fa      	ldr	r2, [r7, #12]
 800ca3e:	4b21      	ldr	r3, [pc, #132]	; (800cac4 <TIM_OC5_SetConfig+0xb0>)
 800ca40:	4013      	ands	r3, r2
 800ca42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	68fa      	ldr	r2, [r7, #12]
 800ca4a:	4313      	orrs	r3, r2
 800ca4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ca54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	689b      	ldr	r3, [r3, #8]
 800ca5a:	041b      	lsls	r3, r3, #16
 800ca5c:	693a      	ldr	r2, [r7, #16]
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	4a18      	ldr	r2, [pc, #96]	; (800cac8 <TIM_OC5_SetConfig+0xb4>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d00f      	beq.n	800ca8a <TIM_OC5_SetConfig+0x76>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	4a17      	ldr	r2, [pc, #92]	; (800cacc <TIM_OC5_SetConfig+0xb8>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d00b      	beq.n	800ca8a <TIM_OC5_SetConfig+0x76>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	4a16      	ldr	r2, [pc, #88]	; (800cad0 <TIM_OC5_SetConfig+0xbc>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d007      	beq.n	800ca8a <TIM_OC5_SetConfig+0x76>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	4a15      	ldr	r2, [pc, #84]	; (800cad4 <TIM_OC5_SetConfig+0xc0>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d003      	beq.n	800ca8a <TIM_OC5_SetConfig+0x76>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	4a14      	ldr	r2, [pc, #80]	; (800cad8 <TIM_OC5_SetConfig+0xc4>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d109      	bne.n	800ca9e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	695b      	ldr	r3, [r3, #20]
 800ca96:	021b      	lsls	r3, r3, #8
 800ca98:	697a      	ldr	r2, [r7, #20]
 800ca9a:	4313      	orrs	r3, r2
 800ca9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	697a      	ldr	r2, [r7, #20]
 800caa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	68fa      	ldr	r2, [r7, #12]
 800caa8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	685a      	ldr	r2, [r3, #4]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	693a      	ldr	r2, [r7, #16]
 800cab6:	621a      	str	r2, [r3, #32]
}
 800cab8:	bf00      	nop
 800caba:	371c      	adds	r7, #28
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr
 800cac4:	fffeff8f 	.word	0xfffeff8f
 800cac8:	40010000 	.word	0x40010000
 800cacc:	40010400 	.word	0x40010400
 800cad0:	40014000 	.word	0x40014000
 800cad4:	40014400 	.word	0x40014400
 800cad8:	40014800 	.word	0x40014800

0800cadc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cadc:	b480      	push	{r7}
 800cade:	b087      	sub	sp, #28
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6a1b      	ldr	r3, [r3, #32]
 800caea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6a1b      	ldr	r3, [r3, #32]
 800caf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cb04:	68fa      	ldr	r2, [r7, #12]
 800cb06:	4b22      	ldr	r3, [pc, #136]	; (800cb90 <TIM_OC6_SetConfig+0xb4>)
 800cb08:	4013      	ands	r3, r2
 800cb0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	021b      	lsls	r3, r3, #8
 800cb12:	68fa      	ldr	r2, [r7, #12]
 800cb14:	4313      	orrs	r3, r2
 800cb16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cb1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	689b      	ldr	r3, [r3, #8]
 800cb24:	051b      	lsls	r3, r3, #20
 800cb26:	693a      	ldr	r2, [r7, #16]
 800cb28:	4313      	orrs	r3, r2
 800cb2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	4a19      	ldr	r2, [pc, #100]	; (800cb94 <TIM_OC6_SetConfig+0xb8>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d00f      	beq.n	800cb54 <TIM_OC6_SetConfig+0x78>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4a18      	ldr	r2, [pc, #96]	; (800cb98 <TIM_OC6_SetConfig+0xbc>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d00b      	beq.n	800cb54 <TIM_OC6_SetConfig+0x78>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	4a17      	ldr	r2, [pc, #92]	; (800cb9c <TIM_OC6_SetConfig+0xc0>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d007      	beq.n	800cb54 <TIM_OC6_SetConfig+0x78>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	4a16      	ldr	r2, [pc, #88]	; (800cba0 <TIM_OC6_SetConfig+0xc4>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d003      	beq.n	800cb54 <TIM_OC6_SetConfig+0x78>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	4a15      	ldr	r2, [pc, #84]	; (800cba4 <TIM_OC6_SetConfig+0xc8>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d109      	bne.n	800cb68 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cb5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	695b      	ldr	r3, [r3, #20]
 800cb60:	029b      	lsls	r3, r3, #10
 800cb62:	697a      	ldr	r2, [r7, #20]
 800cb64:	4313      	orrs	r3, r2
 800cb66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	697a      	ldr	r2, [r7, #20]
 800cb6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	68fa      	ldr	r2, [r7, #12]
 800cb72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	685a      	ldr	r2, [r3, #4]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	693a      	ldr	r2, [r7, #16]
 800cb80:	621a      	str	r2, [r3, #32]
}
 800cb82:	bf00      	nop
 800cb84:	371c      	adds	r7, #28
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr
 800cb8e:	bf00      	nop
 800cb90:	feff8fff 	.word	0xfeff8fff
 800cb94:	40010000 	.word	0x40010000
 800cb98:	40010400 	.word	0x40010400
 800cb9c:	40014000 	.word	0x40014000
 800cba0:	40014400 	.word	0x40014400
 800cba4:	40014800 	.word	0x40014800

0800cba8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b087      	sub	sp, #28
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	60f8      	str	r0, [r7, #12]
 800cbb0:	60b9      	str	r1, [r7, #8]
 800cbb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	f003 031f 	and.w	r3, r3, #31
 800cbba:	2201      	movs	r2, #1
 800cbbc:	fa02 f303 	lsl.w	r3, r2, r3
 800cbc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	6a1a      	ldr	r2, [r3, #32]
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	43db      	mvns	r3, r3
 800cbca:	401a      	ands	r2, r3
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	6a1a      	ldr	r2, [r3, #32]
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	f003 031f 	and.w	r3, r3, #31
 800cbda:	6879      	ldr	r1, [r7, #4]
 800cbdc:	fa01 f303 	lsl.w	r3, r1, r3
 800cbe0:	431a      	orrs	r2, r3
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	621a      	str	r2, [r3, #32]
}
 800cbe6:	bf00      	nop
 800cbe8:	371c      	adds	r7, #28
 800cbea:	46bd      	mov	sp, r7
 800cbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf0:	4770      	bx	lr
	...

0800cbf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b085      	sub	sp, #20
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d101      	bne.n	800cc0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cc08:	2302      	movs	r3, #2
 800cc0a:	e06d      	b.n	800cce8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2201      	movs	r2, #1
 800cc10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2202      	movs	r2, #2
 800cc18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	685b      	ldr	r3, [r3, #4]
 800cc22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	689b      	ldr	r3, [r3, #8]
 800cc2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	4a30      	ldr	r2, [pc, #192]	; (800ccf4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d004      	beq.n	800cc40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4a2f      	ldr	r2, [pc, #188]	; (800ccf8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d108      	bne.n	800cc52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cc46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	68fa      	ldr	r2, [r7, #12]
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	68fa      	ldr	r2, [r7, #12]
 800cc60:	4313      	orrs	r3, r2
 800cc62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	68fa      	ldr	r2, [r7, #12]
 800cc6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4a20      	ldr	r2, [pc, #128]	; (800ccf4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d022      	beq.n	800ccbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc7e:	d01d      	beq.n	800ccbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4a1d      	ldr	r2, [pc, #116]	; (800ccfc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d018      	beq.n	800ccbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	4a1c      	ldr	r2, [pc, #112]	; (800cd00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d013      	beq.n	800ccbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	4a1a      	ldr	r2, [pc, #104]	; (800cd04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d00e      	beq.n	800ccbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	4a15      	ldr	r2, [pc, #84]	; (800ccf8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d009      	beq.n	800ccbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4a16      	ldr	r2, [pc, #88]	; (800cd08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d004      	beq.n	800ccbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	4a15      	ldr	r2, [pc, #84]	; (800cd0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d10c      	bne.n	800ccd6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ccc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	689b      	ldr	r3, [r3, #8]
 800ccc8:	68ba      	ldr	r2, [r7, #8]
 800ccca:	4313      	orrs	r3, r2
 800cccc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	68ba      	ldr	r2, [r7, #8]
 800ccd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2201      	movs	r2, #1
 800ccda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2200      	movs	r2, #0
 800cce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cce6:	2300      	movs	r3, #0
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3714      	adds	r7, #20
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr
 800ccf4:	40010000 	.word	0x40010000
 800ccf8:	40010400 	.word	0x40010400
 800ccfc:	40000400 	.word	0x40000400
 800cd00:	40000800 	.word	0x40000800
 800cd04:	40000c00 	.word	0x40000c00
 800cd08:	40001800 	.word	0x40001800
 800cd0c:	40014000 	.word	0x40014000

0800cd10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b085      	sub	sp, #20
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d101      	bne.n	800cd2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cd28:	2302      	movs	r3, #2
 800cd2a:	e065      	b.n	800cdf8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2201      	movs	r2, #1
 800cd30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	68db      	ldr	r3, [r3, #12]
 800cd3e:	4313      	orrs	r3, r2
 800cd40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	689b      	ldr	r3, [r3, #8]
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	691b      	ldr	r3, [r3, #16]
 800cd76:	4313      	orrs	r3, r2
 800cd78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	695b      	ldr	r3, [r3, #20]
 800cd84:	4313      	orrs	r3, r2
 800cd86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd92:	4313      	orrs	r3, r2
 800cd94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	699b      	ldr	r3, [r3, #24]
 800cda0:	041b      	lsls	r3, r3, #16
 800cda2:	4313      	orrs	r3, r2
 800cda4:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4a16      	ldr	r2, [pc, #88]	; (800ce04 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d004      	beq.n	800cdba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4a14      	ldr	r2, [pc, #80]	; (800ce08 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d115      	bne.n	800cde6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc4:	051b      	lsls	r3, r3, #20
 800cdc6:	4313      	orrs	r3, r2
 800cdc8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	69db      	ldr	r3, [r3, #28]
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	6a1b      	ldr	r3, [r3, #32]
 800cde2:	4313      	orrs	r3, r2
 800cde4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	68fa      	ldr	r2, [r7, #12]
 800cdec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cdf6:	2300      	movs	r3, #0
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3714      	adds	r7, #20
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr
 800ce04:	40010000 	.word	0x40010000
 800ce08:	40010400 	.word	0x40010400

0800ce0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b083      	sub	sp, #12
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ce14:	bf00      	nop
 800ce16:	370c      	adds	r7, #12
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr

0800ce20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b083      	sub	sp, #12
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ce28:	bf00      	nop
 800ce2a:	370c      	adds	r7, #12
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr

0800ce34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b083      	sub	sp, #12
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ce3c:	bf00      	nop
 800ce3e:	370c      	adds	r7, #12
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr

0800ce48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d101      	bne.n	800ce5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ce56:	2301      	movs	r3, #1
 800ce58:	e042      	b.n	800cee0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d106      	bne.n	800ce72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2200      	movs	r2, #0
 800ce68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f7f5 fa0f 	bl	8002290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2224      	movs	r2, #36	; 0x24
 800ce76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	681a      	ldr	r2, [r3, #0]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f022 0201 	bic.w	r2, r2, #1
 800ce88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f000 f92e 	bl	800d0ec <UART_SetConfig>
 800ce90:	4603      	mov	r3, r0
 800ce92:	2b01      	cmp	r3, #1
 800ce94:	d101      	bne.n	800ce9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ce96:	2301      	movs	r3, #1
 800ce98:	e022      	b.n	800cee0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d002      	beq.n	800cea8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f000 fe8a 	bl	800dbbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	685a      	ldr	r2, [r3, #4]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ceb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	689a      	ldr	r2, [r3, #8]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cec6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	681a      	ldr	r2, [r3, #0]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f042 0201 	orr.w	r2, r2, #1
 800ced6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f000 ff11 	bl	800dd00 <UART_CheckIdleState>
 800cede:	4603      	mov	r3, r0
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3708      	adds	r7, #8
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b08a      	sub	sp, #40	; 0x28
 800ceec:	af02      	add	r7, sp, #8
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	603b      	str	r3, [r7, #0]
 800cef4:	4613      	mov	r3, r2
 800cef6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cefe:	2b20      	cmp	r3, #32
 800cf00:	f040 8083 	bne.w	800d00a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d002      	beq.n	800cf10 <HAL_UART_Transmit+0x28>
 800cf0a:	88fb      	ldrh	r3, [r7, #6]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d101      	bne.n	800cf14 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800cf10:	2301      	movs	r3, #1
 800cf12:	e07b      	b.n	800d00c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	d101      	bne.n	800cf22 <HAL_UART_Transmit+0x3a>
 800cf1e:	2302      	movs	r3, #2
 800cf20:	e074      	b.n	800d00c <HAL_UART_Transmit+0x124>
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2201      	movs	r2, #1
 800cf26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2221      	movs	r2, #33	; 0x21
 800cf36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cf3a:	f7f5 fbad 	bl	8002698 <HAL_GetTick>
 800cf3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	88fa      	ldrh	r2, [r7, #6]
 800cf44:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	88fa      	ldrh	r2, [r7, #6]
 800cf4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	689b      	ldr	r3, [r3, #8]
 800cf54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf58:	d108      	bne.n	800cf6c <HAL_UART_Transmit+0x84>
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	691b      	ldr	r3, [r3, #16]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d104      	bne.n	800cf6c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800cf62:	2300      	movs	r3, #0
 800cf64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	61bb      	str	r3, [r7, #24]
 800cf6a:	e003      	b.n	800cf74 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cf70:	2300      	movs	r3, #0
 800cf72:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	2200      	movs	r2, #0
 800cf78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800cf7c:	e02c      	b.n	800cfd8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	9300      	str	r3, [sp, #0]
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	2200      	movs	r2, #0
 800cf86:	2180      	movs	r1, #128	; 0x80
 800cf88:	68f8      	ldr	r0, [r7, #12]
 800cf8a:	f000 ff04 	bl	800dd96 <UART_WaitOnFlagUntilTimeout>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d001      	beq.n	800cf98 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800cf94:	2303      	movs	r3, #3
 800cf96:	e039      	b.n	800d00c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800cf98:	69fb      	ldr	r3, [r7, #28]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d10b      	bne.n	800cfb6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cf9e:	69bb      	ldr	r3, [r7, #24]
 800cfa0:	881b      	ldrh	r3, [r3, #0]
 800cfa2:	461a      	mov	r2, r3
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cfac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	3302      	adds	r3, #2
 800cfb2:	61bb      	str	r3, [r7, #24]
 800cfb4:	e007      	b.n	800cfc6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cfb6:	69fb      	ldr	r3, [r7, #28]
 800cfb8:	781a      	ldrb	r2, [r3, #0]
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800cfc0:	69fb      	ldr	r3, [r7, #28]
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cfcc:	b29b      	uxth	r3, r3
 800cfce:	3b01      	subs	r3, #1
 800cfd0:	b29a      	uxth	r2, r3
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cfde:	b29b      	uxth	r3, r3
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d1cc      	bne.n	800cf7e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	9300      	str	r3, [sp, #0]
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	2200      	movs	r2, #0
 800cfec:	2140      	movs	r1, #64	; 0x40
 800cfee:	68f8      	ldr	r0, [r7, #12]
 800cff0:	f000 fed1 	bl	800dd96 <UART_WaitOnFlagUntilTimeout>
 800cff4:	4603      	mov	r3, r0
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d001      	beq.n	800cffe <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800cffa:	2303      	movs	r3, #3
 800cffc:	e006      	b.n	800d00c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2220      	movs	r2, #32
 800d002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d006:	2300      	movs	r3, #0
 800d008:	e000      	b.n	800d00c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d00a:	2302      	movs	r3, #2
  }
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3720      	adds	r7, #32
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b08a      	sub	sp, #40	; 0x28
 800d018:	af00      	add	r7, sp, #0
 800d01a:	60f8      	str	r0, [r7, #12]
 800d01c:	60b9      	str	r1, [r7, #8]
 800d01e:	4613      	mov	r3, r2
 800d020:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d028:	2b20      	cmp	r3, #32
 800d02a:	d142      	bne.n	800d0b2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d002      	beq.n	800d038 <HAL_UART_Receive_IT+0x24>
 800d032:	88fb      	ldrh	r3, [r7, #6]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d101      	bne.n	800d03c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d038:	2301      	movs	r3, #1
 800d03a:	e03b      	b.n	800d0b4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d042:	2b01      	cmp	r3, #1
 800d044:	d101      	bne.n	800d04a <HAL_UART_Receive_IT+0x36>
 800d046:	2302      	movs	r3, #2
 800d048:	e034      	b.n	800d0b4 <HAL_UART_Receive_IT+0xa0>
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	2201      	movs	r2, #1
 800d04e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2200      	movs	r2, #0
 800d056:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	4a17      	ldr	r2, [pc, #92]	; (800d0bc <HAL_UART_Receive_IT+0xa8>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d01f      	beq.n	800d0a2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d018      	beq.n	800d0a2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	e853 3f00 	ldrex	r3, [r3]
 800d07c:	613b      	str	r3, [r7, #16]
   return(result);
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d084:	627b      	str	r3, [r7, #36]	; 0x24
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	461a      	mov	r2, r3
 800d08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08e:	623b      	str	r3, [r7, #32]
 800d090:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d092:	69f9      	ldr	r1, [r7, #28]
 800d094:	6a3a      	ldr	r2, [r7, #32]
 800d096:	e841 2300 	strex	r3, r2, [r1]
 800d09a:	61bb      	str	r3, [r7, #24]
   return(result);
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d1e6      	bne.n	800d070 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d0a2:	88fb      	ldrh	r3, [r7, #6]
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	68b9      	ldr	r1, [r7, #8]
 800d0a8:	68f8      	ldr	r0, [r7, #12]
 800d0aa:	f000 ff3d 	bl	800df28 <UART_Start_Receive_IT>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	e000      	b.n	800d0b4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d0b2:	2302      	movs	r3, #2
  }
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3728      	adds	r7, #40	; 0x28
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}
 800d0bc:	58000c00 	.word	0x58000c00

0800d0c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b083      	sub	sp, #12
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d0c8:	bf00      	nop
 800d0ca:	370c      	adds	r7, #12
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr

0800d0d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b083      	sub	sp, #12
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
 800d0dc:	460b      	mov	r3, r1
 800d0de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d0e0:	bf00      	nop
 800d0e2:	370c      	adds	r7, #12
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr

0800d0ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d0ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d0f0:	b092      	sub	sp, #72	; 0x48
 800d0f2:	af00      	add	r7, sp, #0
 800d0f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	689a      	ldr	r2, [r3, #8]
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	691b      	ldr	r3, [r3, #16]
 800d104:	431a      	orrs	r2, r3
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	695b      	ldr	r3, [r3, #20]
 800d10a:	431a      	orrs	r2, r3
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	69db      	ldr	r3, [r3, #28]
 800d110:	4313      	orrs	r3, r2
 800d112:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	4bbe      	ldr	r3, [pc, #760]	; (800d414 <UART_SetConfig+0x328>)
 800d11c:	4013      	ands	r3, r2
 800d11e:	697a      	ldr	r2, [r7, #20]
 800d120:	6812      	ldr	r2, [r2, #0]
 800d122:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d124:	430b      	orrs	r3, r1
 800d126:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	68da      	ldr	r2, [r3, #12]
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	430a      	orrs	r2, r1
 800d13c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	699b      	ldr	r3, [r3, #24]
 800d142:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4ab3      	ldr	r2, [pc, #716]	; (800d418 <UART_SetConfig+0x32c>)
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d004      	beq.n	800d158 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	6a1b      	ldr	r3, [r3, #32]
 800d152:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d154:	4313      	orrs	r3, r2
 800d156:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	689a      	ldr	r2, [r3, #8]
 800d15e:	4baf      	ldr	r3, [pc, #700]	; (800d41c <UART_SetConfig+0x330>)
 800d160:	4013      	ands	r3, r2
 800d162:	697a      	ldr	r2, [r7, #20]
 800d164:	6812      	ldr	r2, [r2, #0]
 800d166:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d168:	430b      	orrs	r3, r1
 800d16a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d172:	f023 010f 	bic.w	r1, r3, #15
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	430a      	orrs	r2, r1
 800d180:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	4aa6      	ldr	r2, [pc, #664]	; (800d420 <UART_SetConfig+0x334>)
 800d188:	4293      	cmp	r3, r2
 800d18a:	d177      	bne.n	800d27c <UART_SetConfig+0x190>
 800d18c:	4ba5      	ldr	r3, [pc, #660]	; (800d424 <UART_SetConfig+0x338>)
 800d18e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d190:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d194:	2b28      	cmp	r3, #40	; 0x28
 800d196:	d86d      	bhi.n	800d274 <UART_SetConfig+0x188>
 800d198:	a201      	add	r2, pc, #4	; (adr r2, 800d1a0 <UART_SetConfig+0xb4>)
 800d19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d19e:	bf00      	nop
 800d1a0:	0800d245 	.word	0x0800d245
 800d1a4:	0800d275 	.word	0x0800d275
 800d1a8:	0800d275 	.word	0x0800d275
 800d1ac:	0800d275 	.word	0x0800d275
 800d1b0:	0800d275 	.word	0x0800d275
 800d1b4:	0800d275 	.word	0x0800d275
 800d1b8:	0800d275 	.word	0x0800d275
 800d1bc:	0800d275 	.word	0x0800d275
 800d1c0:	0800d24d 	.word	0x0800d24d
 800d1c4:	0800d275 	.word	0x0800d275
 800d1c8:	0800d275 	.word	0x0800d275
 800d1cc:	0800d275 	.word	0x0800d275
 800d1d0:	0800d275 	.word	0x0800d275
 800d1d4:	0800d275 	.word	0x0800d275
 800d1d8:	0800d275 	.word	0x0800d275
 800d1dc:	0800d275 	.word	0x0800d275
 800d1e0:	0800d255 	.word	0x0800d255
 800d1e4:	0800d275 	.word	0x0800d275
 800d1e8:	0800d275 	.word	0x0800d275
 800d1ec:	0800d275 	.word	0x0800d275
 800d1f0:	0800d275 	.word	0x0800d275
 800d1f4:	0800d275 	.word	0x0800d275
 800d1f8:	0800d275 	.word	0x0800d275
 800d1fc:	0800d275 	.word	0x0800d275
 800d200:	0800d25d 	.word	0x0800d25d
 800d204:	0800d275 	.word	0x0800d275
 800d208:	0800d275 	.word	0x0800d275
 800d20c:	0800d275 	.word	0x0800d275
 800d210:	0800d275 	.word	0x0800d275
 800d214:	0800d275 	.word	0x0800d275
 800d218:	0800d275 	.word	0x0800d275
 800d21c:	0800d275 	.word	0x0800d275
 800d220:	0800d265 	.word	0x0800d265
 800d224:	0800d275 	.word	0x0800d275
 800d228:	0800d275 	.word	0x0800d275
 800d22c:	0800d275 	.word	0x0800d275
 800d230:	0800d275 	.word	0x0800d275
 800d234:	0800d275 	.word	0x0800d275
 800d238:	0800d275 	.word	0x0800d275
 800d23c:	0800d275 	.word	0x0800d275
 800d240:	0800d26d 	.word	0x0800d26d
 800d244:	2301      	movs	r3, #1
 800d246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d24a:	e222      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d24c:	2304      	movs	r3, #4
 800d24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d252:	e21e      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d254:	2308      	movs	r3, #8
 800d256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d25a:	e21a      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d25c:	2310      	movs	r3, #16
 800d25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d262:	e216      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d264:	2320      	movs	r3, #32
 800d266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d26a:	e212      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d26c:	2340      	movs	r3, #64	; 0x40
 800d26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d272:	e20e      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d274:	2380      	movs	r3, #128	; 0x80
 800d276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d27a:	e20a      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4a69      	ldr	r2, [pc, #420]	; (800d428 <UART_SetConfig+0x33c>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d130      	bne.n	800d2e8 <UART_SetConfig+0x1fc>
 800d286:	4b67      	ldr	r3, [pc, #412]	; (800d424 <UART_SetConfig+0x338>)
 800d288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d28a:	f003 0307 	and.w	r3, r3, #7
 800d28e:	2b05      	cmp	r3, #5
 800d290:	d826      	bhi.n	800d2e0 <UART_SetConfig+0x1f4>
 800d292:	a201      	add	r2, pc, #4	; (adr r2, 800d298 <UART_SetConfig+0x1ac>)
 800d294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d298:	0800d2b1 	.word	0x0800d2b1
 800d29c:	0800d2b9 	.word	0x0800d2b9
 800d2a0:	0800d2c1 	.word	0x0800d2c1
 800d2a4:	0800d2c9 	.word	0x0800d2c9
 800d2a8:	0800d2d1 	.word	0x0800d2d1
 800d2ac:	0800d2d9 	.word	0x0800d2d9
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2b6:	e1ec      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d2b8:	2304      	movs	r3, #4
 800d2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2be:	e1e8      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d2c0:	2308      	movs	r3, #8
 800d2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2c6:	e1e4      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d2c8:	2310      	movs	r3, #16
 800d2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ce:	e1e0      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d2d0:	2320      	movs	r3, #32
 800d2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2d6:	e1dc      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d2d8:	2340      	movs	r3, #64	; 0x40
 800d2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2de:	e1d8      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d2e0:	2380      	movs	r3, #128	; 0x80
 800d2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2e6:	e1d4      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4a4f      	ldr	r2, [pc, #316]	; (800d42c <UART_SetConfig+0x340>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d130      	bne.n	800d354 <UART_SetConfig+0x268>
 800d2f2:	4b4c      	ldr	r3, [pc, #304]	; (800d424 <UART_SetConfig+0x338>)
 800d2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2f6:	f003 0307 	and.w	r3, r3, #7
 800d2fa:	2b05      	cmp	r3, #5
 800d2fc:	d826      	bhi.n	800d34c <UART_SetConfig+0x260>
 800d2fe:	a201      	add	r2, pc, #4	; (adr r2, 800d304 <UART_SetConfig+0x218>)
 800d300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d304:	0800d31d 	.word	0x0800d31d
 800d308:	0800d325 	.word	0x0800d325
 800d30c:	0800d32d 	.word	0x0800d32d
 800d310:	0800d335 	.word	0x0800d335
 800d314:	0800d33d 	.word	0x0800d33d
 800d318:	0800d345 	.word	0x0800d345
 800d31c:	2300      	movs	r3, #0
 800d31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d322:	e1b6      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d324:	2304      	movs	r3, #4
 800d326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d32a:	e1b2      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d32c:	2308      	movs	r3, #8
 800d32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d332:	e1ae      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d334:	2310      	movs	r3, #16
 800d336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d33a:	e1aa      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d33c:	2320      	movs	r3, #32
 800d33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d342:	e1a6      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d344:	2340      	movs	r3, #64	; 0x40
 800d346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d34a:	e1a2      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d34c:	2380      	movs	r3, #128	; 0x80
 800d34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d352:	e19e      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	4a35      	ldr	r2, [pc, #212]	; (800d430 <UART_SetConfig+0x344>)
 800d35a:	4293      	cmp	r3, r2
 800d35c:	d130      	bne.n	800d3c0 <UART_SetConfig+0x2d4>
 800d35e:	4b31      	ldr	r3, [pc, #196]	; (800d424 <UART_SetConfig+0x338>)
 800d360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d362:	f003 0307 	and.w	r3, r3, #7
 800d366:	2b05      	cmp	r3, #5
 800d368:	d826      	bhi.n	800d3b8 <UART_SetConfig+0x2cc>
 800d36a:	a201      	add	r2, pc, #4	; (adr r2, 800d370 <UART_SetConfig+0x284>)
 800d36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d370:	0800d389 	.word	0x0800d389
 800d374:	0800d391 	.word	0x0800d391
 800d378:	0800d399 	.word	0x0800d399
 800d37c:	0800d3a1 	.word	0x0800d3a1
 800d380:	0800d3a9 	.word	0x0800d3a9
 800d384:	0800d3b1 	.word	0x0800d3b1
 800d388:	2300      	movs	r3, #0
 800d38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d38e:	e180      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d390:	2304      	movs	r3, #4
 800d392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d396:	e17c      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d398:	2308      	movs	r3, #8
 800d39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d39e:	e178      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d3a0:	2310      	movs	r3, #16
 800d3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3a6:	e174      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d3a8:	2320      	movs	r3, #32
 800d3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ae:	e170      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d3b0:	2340      	movs	r3, #64	; 0x40
 800d3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3b6:	e16c      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d3b8:	2380      	movs	r3, #128	; 0x80
 800d3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3be:	e168      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4a1b      	ldr	r2, [pc, #108]	; (800d434 <UART_SetConfig+0x348>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d142      	bne.n	800d450 <UART_SetConfig+0x364>
 800d3ca:	4b16      	ldr	r3, [pc, #88]	; (800d424 <UART_SetConfig+0x338>)
 800d3cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3ce:	f003 0307 	and.w	r3, r3, #7
 800d3d2:	2b05      	cmp	r3, #5
 800d3d4:	d838      	bhi.n	800d448 <UART_SetConfig+0x35c>
 800d3d6:	a201      	add	r2, pc, #4	; (adr r2, 800d3dc <UART_SetConfig+0x2f0>)
 800d3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3dc:	0800d3f5 	.word	0x0800d3f5
 800d3e0:	0800d3fd 	.word	0x0800d3fd
 800d3e4:	0800d405 	.word	0x0800d405
 800d3e8:	0800d40d 	.word	0x0800d40d
 800d3ec:	0800d439 	.word	0x0800d439
 800d3f0:	0800d441 	.word	0x0800d441
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3fa:	e14a      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d3fc:	2304      	movs	r3, #4
 800d3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d402:	e146      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d404:	2308      	movs	r3, #8
 800d406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d40a:	e142      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d40c:	2310      	movs	r3, #16
 800d40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d412:	e13e      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d414:	cfff69f3 	.word	0xcfff69f3
 800d418:	58000c00 	.word	0x58000c00
 800d41c:	11fff4ff 	.word	0x11fff4ff
 800d420:	40011000 	.word	0x40011000
 800d424:	58024400 	.word	0x58024400
 800d428:	40004400 	.word	0x40004400
 800d42c:	40004800 	.word	0x40004800
 800d430:	40004c00 	.word	0x40004c00
 800d434:	40005000 	.word	0x40005000
 800d438:	2320      	movs	r3, #32
 800d43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d43e:	e128      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d440:	2340      	movs	r3, #64	; 0x40
 800d442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d446:	e124      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d448:	2380      	movs	r3, #128	; 0x80
 800d44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d44e:	e120      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d450:	697b      	ldr	r3, [r7, #20]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	4acb      	ldr	r2, [pc, #812]	; (800d784 <UART_SetConfig+0x698>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d176      	bne.n	800d548 <UART_SetConfig+0x45c>
 800d45a:	4bcb      	ldr	r3, [pc, #812]	; (800d788 <UART_SetConfig+0x69c>)
 800d45c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d45e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d462:	2b28      	cmp	r3, #40	; 0x28
 800d464:	d86c      	bhi.n	800d540 <UART_SetConfig+0x454>
 800d466:	a201      	add	r2, pc, #4	; (adr r2, 800d46c <UART_SetConfig+0x380>)
 800d468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d46c:	0800d511 	.word	0x0800d511
 800d470:	0800d541 	.word	0x0800d541
 800d474:	0800d541 	.word	0x0800d541
 800d478:	0800d541 	.word	0x0800d541
 800d47c:	0800d541 	.word	0x0800d541
 800d480:	0800d541 	.word	0x0800d541
 800d484:	0800d541 	.word	0x0800d541
 800d488:	0800d541 	.word	0x0800d541
 800d48c:	0800d519 	.word	0x0800d519
 800d490:	0800d541 	.word	0x0800d541
 800d494:	0800d541 	.word	0x0800d541
 800d498:	0800d541 	.word	0x0800d541
 800d49c:	0800d541 	.word	0x0800d541
 800d4a0:	0800d541 	.word	0x0800d541
 800d4a4:	0800d541 	.word	0x0800d541
 800d4a8:	0800d541 	.word	0x0800d541
 800d4ac:	0800d521 	.word	0x0800d521
 800d4b0:	0800d541 	.word	0x0800d541
 800d4b4:	0800d541 	.word	0x0800d541
 800d4b8:	0800d541 	.word	0x0800d541
 800d4bc:	0800d541 	.word	0x0800d541
 800d4c0:	0800d541 	.word	0x0800d541
 800d4c4:	0800d541 	.word	0x0800d541
 800d4c8:	0800d541 	.word	0x0800d541
 800d4cc:	0800d529 	.word	0x0800d529
 800d4d0:	0800d541 	.word	0x0800d541
 800d4d4:	0800d541 	.word	0x0800d541
 800d4d8:	0800d541 	.word	0x0800d541
 800d4dc:	0800d541 	.word	0x0800d541
 800d4e0:	0800d541 	.word	0x0800d541
 800d4e4:	0800d541 	.word	0x0800d541
 800d4e8:	0800d541 	.word	0x0800d541
 800d4ec:	0800d531 	.word	0x0800d531
 800d4f0:	0800d541 	.word	0x0800d541
 800d4f4:	0800d541 	.word	0x0800d541
 800d4f8:	0800d541 	.word	0x0800d541
 800d4fc:	0800d541 	.word	0x0800d541
 800d500:	0800d541 	.word	0x0800d541
 800d504:	0800d541 	.word	0x0800d541
 800d508:	0800d541 	.word	0x0800d541
 800d50c:	0800d539 	.word	0x0800d539
 800d510:	2301      	movs	r3, #1
 800d512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d516:	e0bc      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d518:	2304      	movs	r3, #4
 800d51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d51e:	e0b8      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d520:	2308      	movs	r3, #8
 800d522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d526:	e0b4      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d528:	2310      	movs	r3, #16
 800d52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d52e:	e0b0      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d530:	2320      	movs	r3, #32
 800d532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d536:	e0ac      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d538:	2340      	movs	r3, #64	; 0x40
 800d53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d53e:	e0a8      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d540:	2380      	movs	r3, #128	; 0x80
 800d542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d546:	e0a4      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4a8f      	ldr	r2, [pc, #572]	; (800d78c <UART_SetConfig+0x6a0>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d130      	bne.n	800d5b4 <UART_SetConfig+0x4c8>
 800d552:	4b8d      	ldr	r3, [pc, #564]	; (800d788 <UART_SetConfig+0x69c>)
 800d554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d556:	f003 0307 	and.w	r3, r3, #7
 800d55a:	2b05      	cmp	r3, #5
 800d55c:	d826      	bhi.n	800d5ac <UART_SetConfig+0x4c0>
 800d55e:	a201      	add	r2, pc, #4	; (adr r2, 800d564 <UART_SetConfig+0x478>)
 800d560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d564:	0800d57d 	.word	0x0800d57d
 800d568:	0800d585 	.word	0x0800d585
 800d56c:	0800d58d 	.word	0x0800d58d
 800d570:	0800d595 	.word	0x0800d595
 800d574:	0800d59d 	.word	0x0800d59d
 800d578:	0800d5a5 	.word	0x0800d5a5
 800d57c:	2300      	movs	r3, #0
 800d57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d582:	e086      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d584:	2304      	movs	r3, #4
 800d586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d58a:	e082      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d58c:	2308      	movs	r3, #8
 800d58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d592:	e07e      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d594:	2310      	movs	r3, #16
 800d596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d59a:	e07a      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d59c:	2320      	movs	r3, #32
 800d59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5a2:	e076      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d5a4:	2340      	movs	r3, #64	; 0x40
 800d5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5aa:	e072      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d5ac:	2380      	movs	r3, #128	; 0x80
 800d5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5b2:	e06e      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	4a75      	ldr	r2, [pc, #468]	; (800d790 <UART_SetConfig+0x6a4>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d130      	bne.n	800d620 <UART_SetConfig+0x534>
 800d5be:	4b72      	ldr	r3, [pc, #456]	; (800d788 <UART_SetConfig+0x69c>)
 800d5c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5c2:	f003 0307 	and.w	r3, r3, #7
 800d5c6:	2b05      	cmp	r3, #5
 800d5c8:	d826      	bhi.n	800d618 <UART_SetConfig+0x52c>
 800d5ca:	a201      	add	r2, pc, #4	; (adr r2, 800d5d0 <UART_SetConfig+0x4e4>)
 800d5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5d0:	0800d5e9 	.word	0x0800d5e9
 800d5d4:	0800d5f1 	.word	0x0800d5f1
 800d5d8:	0800d5f9 	.word	0x0800d5f9
 800d5dc:	0800d601 	.word	0x0800d601
 800d5e0:	0800d609 	.word	0x0800d609
 800d5e4:	0800d611 	.word	0x0800d611
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5ee:	e050      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d5f0:	2304      	movs	r3, #4
 800d5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5f6:	e04c      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d5f8:	2308      	movs	r3, #8
 800d5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5fe:	e048      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d600:	2310      	movs	r3, #16
 800d602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d606:	e044      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d608:	2320      	movs	r3, #32
 800d60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d60e:	e040      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d610:	2340      	movs	r3, #64	; 0x40
 800d612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d616:	e03c      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d618:	2380      	movs	r3, #128	; 0x80
 800d61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d61e:	e038      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	4a5b      	ldr	r2, [pc, #364]	; (800d794 <UART_SetConfig+0x6a8>)
 800d626:	4293      	cmp	r3, r2
 800d628:	d130      	bne.n	800d68c <UART_SetConfig+0x5a0>
 800d62a:	4b57      	ldr	r3, [pc, #348]	; (800d788 <UART_SetConfig+0x69c>)
 800d62c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d62e:	f003 0307 	and.w	r3, r3, #7
 800d632:	2b05      	cmp	r3, #5
 800d634:	d826      	bhi.n	800d684 <UART_SetConfig+0x598>
 800d636:	a201      	add	r2, pc, #4	; (adr r2, 800d63c <UART_SetConfig+0x550>)
 800d638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d63c:	0800d655 	.word	0x0800d655
 800d640:	0800d65d 	.word	0x0800d65d
 800d644:	0800d665 	.word	0x0800d665
 800d648:	0800d66d 	.word	0x0800d66d
 800d64c:	0800d675 	.word	0x0800d675
 800d650:	0800d67d 	.word	0x0800d67d
 800d654:	2302      	movs	r3, #2
 800d656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d65a:	e01a      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d65c:	2304      	movs	r3, #4
 800d65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d662:	e016      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d664:	2308      	movs	r3, #8
 800d666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d66a:	e012      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d66c:	2310      	movs	r3, #16
 800d66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d672:	e00e      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d674:	2320      	movs	r3, #32
 800d676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d67a:	e00a      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d67c:	2340      	movs	r3, #64	; 0x40
 800d67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d682:	e006      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d684:	2380      	movs	r3, #128	; 0x80
 800d686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d68a:	e002      	b.n	800d692 <UART_SetConfig+0x5a6>
 800d68c:	2380      	movs	r3, #128	; 0x80
 800d68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	4a3f      	ldr	r2, [pc, #252]	; (800d794 <UART_SetConfig+0x6a8>)
 800d698:	4293      	cmp	r3, r2
 800d69a:	f040 80f8 	bne.w	800d88e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d69e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d6a2:	2b20      	cmp	r3, #32
 800d6a4:	dc46      	bgt.n	800d734 <UART_SetConfig+0x648>
 800d6a6:	2b02      	cmp	r3, #2
 800d6a8:	f2c0 8082 	blt.w	800d7b0 <UART_SetConfig+0x6c4>
 800d6ac:	3b02      	subs	r3, #2
 800d6ae:	2b1e      	cmp	r3, #30
 800d6b0:	d87e      	bhi.n	800d7b0 <UART_SetConfig+0x6c4>
 800d6b2:	a201      	add	r2, pc, #4	; (adr r2, 800d6b8 <UART_SetConfig+0x5cc>)
 800d6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6b8:	0800d73b 	.word	0x0800d73b
 800d6bc:	0800d7b1 	.word	0x0800d7b1
 800d6c0:	0800d743 	.word	0x0800d743
 800d6c4:	0800d7b1 	.word	0x0800d7b1
 800d6c8:	0800d7b1 	.word	0x0800d7b1
 800d6cc:	0800d7b1 	.word	0x0800d7b1
 800d6d0:	0800d753 	.word	0x0800d753
 800d6d4:	0800d7b1 	.word	0x0800d7b1
 800d6d8:	0800d7b1 	.word	0x0800d7b1
 800d6dc:	0800d7b1 	.word	0x0800d7b1
 800d6e0:	0800d7b1 	.word	0x0800d7b1
 800d6e4:	0800d7b1 	.word	0x0800d7b1
 800d6e8:	0800d7b1 	.word	0x0800d7b1
 800d6ec:	0800d7b1 	.word	0x0800d7b1
 800d6f0:	0800d763 	.word	0x0800d763
 800d6f4:	0800d7b1 	.word	0x0800d7b1
 800d6f8:	0800d7b1 	.word	0x0800d7b1
 800d6fc:	0800d7b1 	.word	0x0800d7b1
 800d700:	0800d7b1 	.word	0x0800d7b1
 800d704:	0800d7b1 	.word	0x0800d7b1
 800d708:	0800d7b1 	.word	0x0800d7b1
 800d70c:	0800d7b1 	.word	0x0800d7b1
 800d710:	0800d7b1 	.word	0x0800d7b1
 800d714:	0800d7b1 	.word	0x0800d7b1
 800d718:	0800d7b1 	.word	0x0800d7b1
 800d71c:	0800d7b1 	.word	0x0800d7b1
 800d720:	0800d7b1 	.word	0x0800d7b1
 800d724:	0800d7b1 	.word	0x0800d7b1
 800d728:	0800d7b1 	.word	0x0800d7b1
 800d72c:	0800d7b1 	.word	0x0800d7b1
 800d730:	0800d7a3 	.word	0x0800d7a3
 800d734:	2b40      	cmp	r3, #64	; 0x40
 800d736:	d037      	beq.n	800d7a8 <UART_SetConfig+0x6bc>
 800d738:	e03a      	b.n	800d7b0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d73a:	f7fc ff91 	bl	800a660 <HAL_RCCEx_GetD3PCLK1Freq>
 800d73e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d740:	e03c      	b.n	800d7bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d746:	4618      	mov	r0, r3
 800d748:	f7fc ffa0 	bl	800a68c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d74e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d750:	e034      	b.n	800d7bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d752:	f107 0318 	add.w	r3, r7, #24
 800d756:	4618      	mov	r0, r3
 800d758:	f7fd f8ec 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d75c:	69fb      	ldr	r3, [r7, #28]
 800d75e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d760:	e02c      	b.n	800d7bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d762:	4b09      	ldr	r3, [pc, #36]	; (800d788 <UART_SetConfig+0x69c>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f003 0320 	and.w	r3, r3, #32
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d016      	beq.n	800d79c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d76e:	4b06      	ldr	r3, [pc, #24]	; (800d788 <UART_SetConfig+0x69c>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	08db      	lsrs	r3, r3, #3
 800d774:	f003 0303 	and.w	r3, r3, #3
 800d778:	4a07      	ldr	r2, [pc, #28]	; (800d798 <UART_SetConfig+0x6ac>)
 800d77a:	fa22 f303 	lsr.w	r3, r2, r3
 800d77e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d780:	e01c      	b.n	800d7bc <UART_SetConfig+0x6d0>
 800d782:	bf00      	nop
 800d784:	40011400 	.word	0x40011400
 800d788:	58024400 	.word	0x58024400
 800d78c:	40007800 	.word	0x40007800
 800d790:	40007c00 	.word	0x40007c00
 800d794:	58000c00 	.word	0x58000c00
 800d798:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d79c:	4b9d      	ldr	r3, [pc, #628]	; (800da14 <UART_SetConfig+0x928>)
 800d79e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7a0:	e00c      	b.n	800d7bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d7a2:	4b9d      	ldr	r3, [pc, #628]	; (800da18 <UART_SetConfig+0x92c>)
 800d7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7a6:	e009      	b.n	800d7bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d7a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7ae:	e005      	b.n	800d7bc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d7ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d7bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	f000 81de 	beq.w	800db80 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7c8:	4a94      	ldr	r2, [pc, #592]	; (800da1c <UART_SetConfig+0x930>)
 800d7ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7d6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	685a      	ldr	r2, [r3, #4]
 800d7dc:	4613      	mov	r3, r2
 800d7de:	005b      	lsls	r3, r3, #1
 800d7e0:	4413      	add	r3, r2
 800d7e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d305      	bcc.n	800d7f4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	685b      	ldr	r3, [r3, #4]
 800d7ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d7ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	d903      	bls.n	800d7fc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d7fa:	e1c1      	b.n	800db80 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7fe:	2200      	movs	r2, #0
 800d800:	60bb      	str	r3, [r7, #8]
 800d802:	60fa      	str	r2, [r7, #12]
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d808:	4a84      	ldr	r2, [pc, #528]	; (800da1c <UART_SetConfig+0x930>)
 800d80a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d80e:	b29b      	uxth	r3, r3
 800d810:	2200      	movs	r2, #0
 800d812:	603b      	str	r3, [r7, #0]
 800d814:	607a      	str	r2, [r7, #4]
 800d816:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d81a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d81e:	f7f2 fd5b 	bl	80002d8 <__aeabi_uldivmod>
 800d822:	4602      	mov	r2, r0
 800d824:	460b      	mov	r3, r1
 800d826:	4610      	mov	r0, r2
 800d828:	4619      	mov	r1, r3
 800d82a:	f04f 0200 	mov.w	r2, #0
 800d82e:	f04f 0300 	mov.w	r3, #0
 800d832:	020b      	lsls	r3, r1, #8
 800d834:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d838:	0202      	lsls	r2, r0, #8
 800d83a:	6979      	ldr	r1, [r7, #20]
 800d83c:	6849      	ldr	r1, [r1, #4]
 800d83e:	0849      	lsrs	r1, r1, #1
 800d840:	2000      	movs	r0, #0
 800d842:	460c      	mov	r4, r1
 800d844:	4605      	mov	r5, r0
 800d846:	eb12 0804 	adds.w	r8, r2, r4
 800d84a:	eb43 0905 	adc.w	r9, r3, r5
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	685b      	ldr	r3, [r3, #4]
 800d852:	2200      	movs	r2, #0
 800d854:	469a      	mov	sl, r3
 800d856:	4693      	mov	fp, r2
 800d858:	4652      	mov	r2, sl
 800d85a:	465b      	mov	r3, fp
 800d85c:	4640      	mov	r0, r8
 800d85e:	4649      	mov	r1, r9
 800d860:	f7f2 fd3a 	bl	80002d8 <__aeabi_uldivmod>
 800d864:	4602      	mov	r2, r0
 800d866:	460b      	mov	r3, r1
 800d868:	4613      	mov	r3, r2
 800d86a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d86e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d872:	d308      	bcc.n	800d886 <UART_SetConfig+0x79a>
 800d874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d87a:	d204      	bcs.n	800d886 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d882:	60da      	str	r2, [r3, #12]
 800d884:	e17c      	b.n	800db80 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d886:	2301      	movs	r3, #1
 800d888:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d88c:	e178      	b.n	800db80 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	69db      	ldr	r3, [r3, #28]
 800d892:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d896:	f040 80c5 	bne.w	800da24 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d89a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d89e:	2b20      	cmp	r3, #32
 800d8a0:	dc48      	bgt.n	800d934 <UART_SetConfig+0x848>
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	db7b      	blt.n	800d99e <UART_SetConfig+0x8b2>
 800d8a6:	2b20      	cmp	r3, #32
 800d8a8:	d879      	bhi.n	800d99e <UART_SetConfig+0x8b2>
 800d8aa:	a201      	add	r2, pc, #4	; (adr r2, 800d8b0 <UART_SetConfig+0x7c4>)
 800d8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8b0:	0800d93b 	.word	0x0800d93b
 800d8b4:	0800d943 	.word	0x0800d943
 800d8b8:	0800d99f 	.word	0x0800d99f
 800d8bc:	0800d99f 	.word	0x0800d99f
 800d8c0:	0800d94b 	.word	0x0800d94b
 800d8c4:	0800d99f 	.word	0x0800d99f
 800d8c8:	0800d99f 	.word	0x0800d99f
 800d8cc:	0800d99f 	.word	0x0800d99f
 800d8d0:	0800d95b 	.word	0x0800d95b
 800d8d4:	0800d99f 	.word	0x0800d99f
 800d8d8:	0800d99f 	.word	0x0800d99f
 800d8dc:	0800d99f 	.word	0x0800d99f
 800d8e0:	0800d99f 	.word	0x0800d99f
 800d8e4:	0800d99f 	.word	0x0800d99f
 800d8e8:	0800d99f 	.word	0x0800d99f
 800d8ec:	0800d99f 	.word	0x0800d99f
 800d8f0:	0800d96b 	.word	0x0800d96b
 800d8f4:	0800d99f 	.word	0x0800d99f
 800d8f8:	0800d99f 	.word	0x0800d99f
 800d8fc:	0800d99f 	.word	0x0800d99f
 800d900:	0800d99f 	.word	0x0800d99f
 800d904:	0800d99f 	.word	0x0800d99f
 800d908:	0800d99f 	.word	0x0800d99f
 800d90c:	0800d99f 	.word	0x0800d99f
 800d910:	0800d99f 	.word	0x0800d99f
 800d914:	0800d99f 	.word	0x0800d99f
 800d918:	0800d99f 	.word	0x0800d99f
 800d91c:	0800d99f 	.word	0x0800d99f
 800d920:	0800d99f 	.word	0x0800d99f
 800d924:	0800d99f 	.word	0x0800d99f
 800d928:	0800d99f 	.word	0x0800d99f
 800d92c:	0800d99f 	.word	0x0800d99f
 800d930:	0800d991 	.word	0x0800d991
 800d934:	2b40      	cmp	r3, #64	; 0x40
 800d936:	d02e      	beq.n	800d996 <UART_SetConfig+0x8aa>
 800d938:	e031      	b.n	800d99e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d93a:	f7fb fa4d 	bl	8008dd8 <HAL_RCC_GetPCLK1Freq>
 800d93e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d940:	e033      	b.n	800d9aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d942:	f7fb fa5f 	bl	8008e04 <HAL_RCC_GetPCLK2Freq>
 800d946:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d948:	e02f      	b.n	800d9aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d94a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d94e:	4618      	mov	r0, r3
 800d950:	f7fc fe9c 	bl	800a68c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d956:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d958:	e027      	b.n	800d9aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d95a:	f107 0318 	add.w	r3, r7, #24
 800d95e:	4618      	mov	r0, r3
 800d960:	f7fc ffe8 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d964:	69fb      	ldr	r3, [r7, #28]
 800d966:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d968:	e01f      	b.n	800d9aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d96a:	4b2d      	ldr	r3, [pc, #180]	; (800da20 <UART_SetConfig+0x934>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	f003 0320 	and.w	r3, r3, #32
 800d972:	2b00      	cmp	r3, #0
 800d974:	d009      	beq.n	800d98a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d976:	4b2a      	ldr	r3, [pc, #168]	; (800da20 <UART_SetConfig+0x934>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	08db      	lsrs	r3, r3, #3
 800d97c:	f003 0303 	and.w	r3, r3, #3
 800d980:	4a24      	ldr	r2, [pc, #144]	; (800da14 <UART_SetConfig+0x928>)
 800d982:	fa22 f303 	lsr.w	r3, r2, r3
 800d986:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d988:	e00f      	b.n	800d9aa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d98a:	4b22      	ldr	r3, [pc, #136]	; (800da14 <UART_SetConfig+0x928>)
 800d98c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d98e:	e00c      	b.n	800d9aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d990:	4b21      	ldr	r3, [pc, #132]	; (800da18 <UART_SetConfig+0x92c>)
 800d992:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d994:	e009      	b.n	800d9aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d99a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d99c:	e005      	b.n	800d9aa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d9a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d9aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	f000 80e7 	beq.w	800db80 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9b6:	4a19      	ldr	r2, [pc, #100]	; (800da1c <UART_SetConfig+0x930>)
 800d9b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9bc:	461a      	mov	r2, r3
 800d9be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9c4:	005a      	lsls	r2, r3, #1
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	685b      	ldr	r3, [r3, #4]
 800d9ca:	085b      	lsrs	r3, r3, #1
 800d9cc:	441a      	add	r2, r3
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9d6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9da:	2b0f      	cmp	r3, #15
 800d9dc:	d916      	bls.n	800da0c <UART_SetConfig+0x920>
 800d9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9e4:	d212      	bcs.n	800da0c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	f023 030f 	bic.w	r3, r3, #15
 800d9ee:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9f2:	085b      	lsrs	r3, r3, #1
 800d9f4:	b29b      	uxth	r3, r3
 800d9f6:	f003 0307 	and.w	r3, r3, #7
 800d9fa:	b29a      	uxth	r2, r3
 800d9fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d9fe:	4313      	orrs	r3, r2
 800da00:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800da08:	60da      	str	r2, [r3, #12]
 800da0a:	e0b9      	b.n	800db80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800da0c:	2301      	movs	r3, #1
 800da0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800da12:	e0b5      	b.n	800db80 <UART_SetConfig+0xa94>
 800da14:	03d09000 	.word	0x03d09000
 800da18:	003d0900 	.word	0x003d0900
 800da1c:	0800ee3c 	.word	0x0800ee3c
 800da20:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800da24:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800da28:	2b20      	cmp	r3, #32
 800da2a:	dc49      	bgt.n	800dac0 <UART_SetConfig+0x9d4>
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	db7c      	blt.n	800db2a <UART_SetConfig+0xa3e>
 800da30:	2b20      	cmp	r3, #32
 800da32:	d87a      	bhi.n	800db2a <UART_SetConfig+0xa3e>
 800da34:	a201      	add	r2, pc, #4	; (adr r2, 800da3c <UART_SetConfig+0x950>)
 800da36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da3a:	bf00      	nop
 800da3c:	0800dac7 	.word	0x0800dac7
 800da40:	0800dacf 	.word	0x0800dacf
 800da44:	0800db2b 	.word	0x0800db2b
 800da48:	0800db2b 	.word	0x0800db2b
 800da4c:	0800dad7 	.word	0x0800dad7
 800da50:	0800db2b 	.word	0x0800db2b
 800da54:	0800db2b 	.word	0x0800db2b
 800da58:	0800db2b 	.word	0x0800db2b
 800da5c:	0800dae7 	.word	0x0800dae7
 800da60:	0800db2b 	.word	0x0800db2b
 800da64:	0800db2b 	.word	0x0800db2b
 800da68:	0800db2b 	.word	0x0800db2b
 800da6c:	0800db2b 	.word	0x0800db2b
 800da70:	0800db2b 	.word	0x0800db2b
 800da74:	0800db2b 	.word	0x0800db2b
 800da78:	0800db2b 	.word	0x0800db2b
 800da7c:	0800daf7 	.word	0x0800daf7
 800da80:	0800db2b 	.word	0x0800db2b
 800da84:	0800db2b 	.word	0x0800db2b
 800da88:	0800db2b 	.word	0x0800db2b
 800da8c:	0800db2b 	.word	0x0800db2b
 800da90:	0800db2b 	.word	0x0800db2b
 800da94:	0800db2b 	.word	0x0800db2b
 800da98:	0800db2b 	.word	0x0800db2b
 800da9c:	0800db2b 	.word	0x0800db2b
 800daa0:	0800db2b 	.word	0x0800db2b
 800daa4:	0800db2b 	.word	0x0800db2b
 800daa8:	0800db2b 	.word	0x0800db2b
 800daac:	0800db2b 	.word	0x0800db2b
 800dab0:	0800db2b 	.word	0x0800db2b
 800dab4:	0800db2b 	.word	0x0800db2b
 800dab8:	0800db2b 	.word	0x0800db2b
 800dabc:	0800db1d 	.word	0x0800db1d
 800dac0:	2b40      	cmp	r3, #64	; 0x40
 800dac2:	d02e      	beq.n	800db22 <UART_SetConfig+0xa36>
 800dac4:	e031      	b.n	800db2a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dac6:	f7fb f987 	bl	8008dd8 <HAL_RCC_GetPCLK1Freq>
 800daca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dacc:	e033      	b.n	800db36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dace:	f7fb f999 	bl	8008e04 <HAL_RCC_GetPCLK2Freq>
 800dad2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dad4:	e02f      	b.n	800db36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dada:	4618      	mov	r0, r3
 800dadc:	f7fc fdd6 	bl	800a68c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dae4:	e027      	b.n	800db36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dae6:	f107 0318 	add.w	r3, r7, #24
 800daea:	4618      	mov	r0, r3
 800daec:	f7fc ff22 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800daf0:	69fb      	ldr	r3, [r7, #28]
 800daf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800daf4:	e01f      	b.n	800db36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800daf6:	4b2d      	ldr	r3, [pc, #180]	; (800dbac <UART_SetConfig+0xac0>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	f003 0320 	and.w	r3, r3, #32
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d009      	beq.n	800db16 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800db02:	4b2a      	ldr	r3, [pc, #168]	; (800dbac <UART_SetConfig+0xac0>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	08db      	lsrs	r3, r3, #3
 800db08:	f003 0303 	and.w	r3, r3, #3
 800db0c:	4a28      	ldr	r2, [pc, #160]	; (800dbb0 <UART_SetConfig+0xac4>)
 800db0e:	fa22 f303 	lsr.w	r3, r2, r3
 800db12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800db14:	e00f      	b.n	800db36 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800db16:	4b26      	ldr	r3, [pc, #152]	; (800dbb0 <UART_SetConfig+0xac4>)
 800db18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db1a:	e00c      	b.n	800db36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800db1c:	4b25      	ldr	r3, [pc, #148]	; (800dbb4 <UART_SetConfig+0xac8>)
 800db1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db20:	e009      	b.n	800db36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db28:	e005      	b.n	800db36 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800db2a:	2300      	movs	r3, #0
 800db2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800db2e:	2301      	movs	r3, #1
 800db30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800db34:	bf00      	nop
    }

    if (pclk != 0U)
 800db36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d021      	beq.n	800db80 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db40:	4a1d      	ldr	r2, [pc, #116]	; (800dbb8 <UART_SetConfig+0xacc>)
 800db42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db46:	461a      	mov	r2, r3
 800db48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db4a:	fbb3 f2f2 	udiv	r2, r3, r2
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	085b      	lsrs	r3, r3, #1
 800db54:	441a      	add	r2, r3
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	685b      	ldr	r3, [r3, #4]
 800db5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800db5e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db62:	2b0f      	cmp	r3, #15
 800db64:	d909      	bls.n	800db7a <UART_SetConfig+0xa8e>
 800db66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db6c:	d205      	bcs.n	800db7a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800db6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db70:	b29a      	uxth	r2, r3
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	60da      	str	r2, [r3, #12]
 800db78:	e002      	b.n	800db80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800db7a:	2301      	movs	r3, #1
 800db7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	2201      	movs	r2, #1
 800db84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	2201      	movs	r2, #1
 800db8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	2200      	movs	r2, #0
 800db94:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	2200      	movs	r2, #0
 800db9a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800db9c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3748      	adds	r7, #72	; 0x48
 800dba4:	46bd      	mov	sp, r7
 800dba6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dbaa:	bf00      	nop
 800dbac:	58024400 	.word	0x58024400
 800dbb0:	03d09000 	.word	0x03d09000
 800dbb4:	003d0900 	.word	0x003d0900
 800dbb8:	0800ee3c 	.word	0x0800ee3c

0800dbbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b083      	sub	sp, #12
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbc8:	f003 0301 	and.w	r3, r3, #1
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d00a      	beq.n	800dbe6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	685b      	ldr	r3, [r3, #4]
 800dbd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	430a      	orrs	r2, r1
 800dbe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbea:	f003 0302 	and.w	r3, r3, #2
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d00a      	beq.n	800dc08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	430a      	orrs	r2, r1
 800dc06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc0c:	f003 0304 	and.w	r3, r3, #4
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d00a      	beq.n	800dc2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	685b      	ldr	r3, [r3, #4]
 800dc1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	430a      	orrs	r2, r1
 800dc28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc2e:	f003 0308 	and.w	r3, r3, #8
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d00a      	beq.n	800dc4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	685b      	ldr	r3, [r3, #4]
 800dc3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	430a      	orrs	r2, r1
 800dc4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc50:	f003 0310 	and.w	r3, r3, #16
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d00a      	beq.n	800dc6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	689b      	ldr	r3, [r3, #8]
 800dc5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	430a      	orrs	r2, r1
 800dc6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc72:	f003 0320 	and.w	r3, r3, #32
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d00a      	beq.n	800dc90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	689b      	ldr	r3, [r3, #8]
 800dc80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	430a      	orrs	r2, r1
 800dc8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d01a      	beq.n	800dcd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	430a      	orrs	r2, r1
 800dcb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dcba:	d10a      	bne.n	800dcd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	685b      	ldr	r3, [r3, #4]
 800dcc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	430a      	orrs	r2, r1
 800dcd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d00a      	beq.n	800dcf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	430a      	orrs	r2, r1
 800dcf2:	605a      	str	r2, [r3, #4]
  }
}
 800dcf4:	bf00      	nop
 800dcf6:	370c      	adds	r7, #12
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr

0800dd00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b086      	sub	sp, #24
 800dd04:	af02      	add	r7, sp, #8
 800dd06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dd10:	f7f4 fcc2 	bl	8002698 <HAL_GetTick>
 800dd14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f003 0308 	and.w	r3, r3, #8
 800dd20:	2b08      	cmp	r3, #8
 800dd22:	d10e      	bne.n	800dd42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dd28:	9300      	str	r3, [sp, #0]
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f000 f82f 	bl	800dd96 <UART_WaitOnFlagUntilTimeout>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d001      	beq.n	800dd42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd3e:	2303      	movs	r3, #3
 800dd40:	e025      	b.n	800dd8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f003 0304 	and.w	r3, r3, #4
 800dd4c:	2b04      	cmp	r3, #4
 800dd4e:	d10e      	bne.n	800dd6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dd54:	9300      	str	r3, [sp, #0]
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	2200      	movs	r2, #0
 800dd5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 f819 	bl	800dd96 <UART_WaitOnFlagUntilTimeout>
 800dd64:	4603      	mov	r3, r0
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d001      	beq.n	800dd6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd6a:	2303      	movs	r3, #3
 800dd6c:	e00f      	b.n	800dd8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2220      	movs	r2, #32
 800dd72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2220      	movs	r2, #32
 800dd7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2200      	movs	r2, #0
 800dd82:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2200      	movs	r2, #0
 800dd88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dd8c:	2300      	movs	r3, #0
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3710      	adds	r7, #16
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}

0800dd96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dd96:	b580      	push	{r7, lr}
 800dd98:	b09c      	sub	sp, #112	; 0x70
 800dd9a:	af00      	add	r7, sp, #0
 800dd9c:	60f8      	str	r0, [r7, #12]
 800dd9e:	60b9      	str	r1, [r7, #8]
 800dda0:	603b      	str	r3, [r7, #0]
 800dda2:	4613      	mov	r3, r2
 800dda4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dda6:	e0a9      	b.n	800defc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dda8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ddaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddae:	f000 80a5 	beq.w	800defc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ddb2:	f7f4 fc71 	bl	8002698 <HAL_GetTick>
 800ddb6:	4602      	mov	r2, r0
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	1ad3      	subs	r3, r2, r3
 800ddbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ddbe:	429a      	cmp	r2, r3
 800ddc0:	d302      	bcc.n	800ddc8 <UART_WaitOnFlagUntilTimeout+0x32>
 800ddc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d140      	bne.n	800de4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddd0:	e853 3f00 	ldrex	r3, [r3]
 800ddd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ddd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dddc:	667b      	str	r3, [r7, #100]	; 0x64
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	461a      	mov	r2, r3
 800dde4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dde6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dde8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ddec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ddee:	e841 2300 	strex	r3, r2, [r1]
 800ddf2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ddf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d1e6      	bne.n	800ddc8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	3308      	adds	r3, #8
 800de00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de04:	e853 3f00 	ldrex	r3, [r3]
 800de08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800de0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de0c:	f023 0301 	bic.w	r3, r3, #1
 800de10:	663b      	str	r3, [r7, #96]	; 0x60
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	3308      	adds	r3, #8
 800de18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800de1a:	64ba      	str	r2, [r7, #72]	; 0x48
 800de1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800de20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800de22:	e841 2300 	strex	r3, r2, [r1]
 800de26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800de28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d1e5      	bne.n	800ddfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	2220      	movs	r2, #32
 800de32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	2220      	movs	r2, #32
 800de3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	2200      	movs	r2, #0
 800de42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800de46:	2303      	movs	r3, #3
 800de48:	e069      	b.n	800df1e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	f003 0304 	and.w	r3, r3, #4
 800de54:	2b00      	cmp	r3, #0
 800de56:	d051      	beq.n	800defc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	69db      	ldr	r3, [r3, #28]
 800de5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800de62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800de66:	d149      	bne.n	800defc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800de70:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de7a:	e853 3f00 	ldrex	r3, [r3]
 800de7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800de80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800de86:	66fb      	str	r3, [r7, #108]	; 0x6c
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	461a      	mov	r2, r3
 800de8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de90:	637b      	str	r3, [r7, #52]	; 0x34
 800de92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800de96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de98:	e841 2300 	strex	r3, r2, [r1]
 800de9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800de9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d1e6      	bne.n	800de72 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	3308      	adds	r3, #8
 800deaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	e853 3f00 	ldrex	r3, [r3]
 800deb2:	613b      	str	r3, [r7, #16]
   return(result);
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	f023 0301 	bic.w	r3, r3, #1
 800deba:	66bb      	str	r3, [r7, #104]	; 0x68
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	3308      	adds	r3, #8
 800dec2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dec4:	623a      	str	r2, [r7, #32]
 800dec6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dec8:	69f9      	ldr	r1, [r7, #28]
 800deca:	6a3a      	ldr	r2, [r7, #32]
 800decc:	e841 2300 	strex	r3, r2, [r1]
 800ded0:	61bb      	str	r3, [r7, #24]
   return(result);
 800ded2:	69bb      	ldr	r3, [r7, #24]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d1e5      	bne.n	800dea4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2220      	movs	r2, #32
 800dedc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2220      	movs	r2, #32
 800dee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	2220      	movs	r2, #32
 800deec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	2200      	movs	r2, #0
 800def4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800def8:	2303      	movs	r3, #3
 800defa:	e010      	b.n	800df1e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	69da      	ldr	r2, [r3, #28]
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	4013      	ands	r3, r2
 800df06:	68ba      	ldr	r2, [r7, #8]
 800df08:	429a      	cmp	r2, r3
 800df0a:	bf0c      	ite	eq
 800df0c:	2301      	moveq	r3, #1
 800df0e:	2300      	movne	r3, #0
 800df10:	b2db      	uxtb	r3, r3
 800df12:	461a      	mov	r2, r3
 800df14:	79fb      	ldrb	r3, [r7, #7]
 800df16:	429a      	cmp	r2, r3
 800df18:	f43f af46 	beq.w	800dda8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800df1c:	2300      	movs	r3, #0
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3770      	adds	r7, #112	; 0x70
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}
	...

0800df28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800df28:	b480      	push	{r7}
 800df2a:	b0a3      	sub	sp, #140	; 0x8c
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	60b9      	str	r1, [r7, #8]
 800df32:	4613      	mov	r3, r2
 800df34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	68ba      	ldr	r2, [r7, #8]
 800df3a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	88fa      	ldrh	r2, [r7, #6]
 800df40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	88fa      	ldrh	r2, [r7, #6]
 800df48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	2200      	movs	r2, #0
 800df50:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	689b      	ldr	r3, [r3, #8]
 800df56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df5a:	d10e      	bne.n	800df7a <UART_Start_Receive_IT+0x52>
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	691b      	ldr	r3, [r3, #16]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d105      	bne.n	800df70 <UART_Start_Receive_IT+0x48>
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	f240 12ff 	movw	r2, #511	; 0x1ff
 800df6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800df6e:	e02d      	b.n	800dfcc <UART_Start_Receive_IT+0xa4>
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	22ff      	movs	r2, #255	; 0xff
 800df74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800df78:	e028      	b.n	800dfcc <UART_Start_Receive_IT+0xa4>
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	689b      	ldr	r3, [r3, #8]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d10d      	bne.n	800df9e <UART_Start_Receive_IT+0x76>
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	691b      	ldr	r3, [r3, #16]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d104      	bne.n	800df94 <UART_Start_Receive_IT+0x6c>
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	22ff      	movs	r2, #255	; 0xff
 800df8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800df92:	e01b      	b.n	800dfcc <UART_Start_Receive_IT+0xa4>
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	227f      	movs	r2, #127	; 0x7f
 800df98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800df9c:	e016      	b.n	800dfcc <UART_Start_Receive_IT+0xa4>
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	689b      	ldr	r3, [r3, #8]
 800dfa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dfa6:	d10d      	bne.n	800dfc4 <UART_Start_Receive_IT+0x9c>
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	691b      	ldr	r3, [r3, #16]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d104      	bne.n	800dfba <UART_Start_Receive_IT+0x92>
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	227f      	movs	r2, #127	; 0x7f
 800dfb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dfb8:	e008      	b.n	800dfcc <UART_Start_Receive_IT+0xa4>
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	223f      	movs	r2, #63	; 0x3f
 800dfbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dfc2:	e003      	b.n	800dfcc <UART_Start_Receive_IT+0xa4>
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2222      	movs	r2, #34	; 0x22
 800dfd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	3308      	adds	r3, #8
 800dfe2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dfe6:	e853 3f00 	ldrex	r3, [r3]
 800dfea:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800dfec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dfee:	f043 0301 	orr.w	r3, r3, #1
 800dff2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	3308      	adds	r3, #8
 800dffc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e000:	673a      	str	r2, [r7, #112]	; 0x70
 800e002:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e004:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e006:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e008:	e841 2300 	strex	r3, r2, [r1]
 800e00c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800e00e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e010:	2b00      	cmp	r3, #0
 800e012:	d1e3      	bne.n	800dfdc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e01c:	d153      	bne.n	800e0c6 <UART_Start_Receive_IT+0x19e>
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e024:	88fa      	ldrh	r2, [r7, #6]
 800e026:	429a      	cmp	r2, r3
 800e028:	d34d      	bcc.n	800e0c6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	689b      	ldr	r3, [r3, #8]
 800e02e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e032:	d107      	bne.n	800e044 <UART_Start_Receive_IT+0x11c>
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	691b      	ldr	r3, [r3, #16]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d103      	bne.n	800e044 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	4a4b      	ldr	r2, [pc, #300]	; (800e16c <UART_Start_Receive_IT+0x244>)
 800e040:	671a      	str	r2, [r3, #112]	; 0x70
 800e042:	e002      	b.n	800e04a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	4a4a      	ldr	r2, [pc, #296]	; (800e170 <UART_Start_Receive_IT+0x248>)
 800e048:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	2200      	movs	r2, #0
 800e04e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	691b      	ldr	r3, [r3, #16]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d01a      	beq.n	800e090 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e062:	e853 3f00 	ldrex	r3, [r3]
 800e066:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e06a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e06e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	461a      	mov	r2, r3
 800e078:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e07c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e07e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e080:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e082:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e084:	e841 2300 	strex	r3, r2, [r1]
 800e088:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e08a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d1e4      	bne.n	800e05a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	3308      	adds	r3, #8
 800e096:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e09a:	e853 3f00 	ldrex	r3, [r3]
 800e09e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	3308      	adds	r3, #8
 800e0ae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e0b0:	64ba      	str	r2, [r7, #72]	; 0x48
 800e0b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e0b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e0b8:	e841 2300 	strex	r3, r2, [r1]
 800e0bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e0be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d1e5      	bne.n	800e090 <UART_Start_Receive_IT+0x168>
 800e0c4:	e04a      	b.n	800e15c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	689b      	ldr	r3, [r3, #8]
 800e0ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e0ce:	d107      	bne.n	800e0e0 <UART_Start_Receive_IT+0x1b8>
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	691b      	ldr	r3, [r3, #16]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d103      	bne.n	800e0e0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	4a26      	ldr	r2, [pc, #152]	; (800e174 <UART_Start_Receive_IT+0x24c>)
 800e0dc:	671a      	str	r2, [r3, #112]	; 0x70
 800e0de:	e002      	b.n	800e0e6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	4a25      	ldr	r2, [pc, #148]	; (800e178 <UART_Start_Receive_IT+0x250>)
 800e0e4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	691b      	ldr	r3, [r3, #16]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d019      	beq.n	800e12a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0fe:	e853 3f00 	ldrex	r3, [r3]
 800e102:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e106:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800e10a:	677b      	str	r3, [r7, #116]	; 0x74
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	461a      	mov	r2, r3
 800e112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e114:	637b      	str	r3, [r7, #52]	; 0x34
 800e116:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e118:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e11a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e11c:	e841 2300 	strex	r3, r2, [r1]
 800e120:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e124:	2b00      	cmp	r3, #0
 800e126:	d1e6      	bne.n	800e0f6 <UART_Start_Receive_IT+0x1ce>
 800e128:	e018      	b.n	800e15c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	e853 3f00 	ldrex	r3, [r3]
 800e136:	613b      	str	r3, [r7, #16]
   return(result);
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	f043 0320 	orr.w	r3, r3, #32
 800e13e:	67bb      	str	r3, [r7, #120]	; 0x78
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	461a      	mov	r2, r3
 800e146:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e148:	623b      	str	r3, [r7, #32]
 800e14a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e14c:	69f9      	ldr	r1, [r7, #28]
 800e14e:	6a3a      	ldr	r2, [r7, #32]
 800e150:	e841 2300 	strex	r3, r2, [r1]
 800e154:	61bb      	str	r3, [r7, #24]
   return(result);
 800e156:	69bb      	ldr	r3, [r7, #24]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d1e6      	bne.n	800e12a <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800e15c:	2300      	movs	r3, #0
}
 800e15e:	4618      	mov	r0, r3
 800e160:	378c      	adds	r7, #140	; 0x8c
 800e162:	46bd      	mov	sp, r7
 800e164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e168:	4770      	bx	lr
 800e16a:	bf00      	nop
 800e16c:	0800e735 	.word	0x0800e735
 800e170:	0800e43d 	.word	0x0800e43d
 800e174:	0800e2dd 	.word	0x0800e2dd
 800e178:	0800e17d 	.word	0x0800e17d

0800e17c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b096      	sub	sp, #88	; 0x58
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e18a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e194:	2b22      	cmp	r3, #34	; 0x22
 800e196:	f040 8095 	bne.w	800e2c4 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1a0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e1a4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800e1a8:	b2d9      	uxtb	r1, r3
 800e1aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e1ae:	b2da      	uxtb	r2, r3
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e1b4:	400a      	ands	r2, r1
 800e1b6:	b2d2      	uxtb	r2, r2
 800e1b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e1be:	1c5a      	adds	r2, r3, #1
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e1ca:	b29b      	uxth	r3, r3
 800e1cc:	3b01      	subs	r3, #1
 800e1ce:	b29a      	uxth	r2, r3
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e1dc:	b29b      	uxth	r3, r3
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d178      	bne.n	800e2d4 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ea:	e853 3f00 	ldrex	r3, [r3]
 800e1ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e1f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e1f6:	653b      	str	r3, [r7, #80]	; 0x50
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	461a      	mov	r2, r3
 800e1fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e200:	647b      	str	r3, [r7, #68]	; 0x44
 800e202:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e204:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e208:	e841 2300 	strex	r3, r2, [r1]
 800e20c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e20e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e210:	2b00      	cmp	r3, #0
 800e212:	d1e6      	bne.n	800e1e2 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	3308      	adds	r3, #8
 800e21a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21e:	e853 3f00 	ldrex	r3, [r3]
 800e222:	623b      	str	r3, [r7, #32]
   return(result);
 800e224:	6a3b      	ldr	r3, [r7, #32]
 800e226:	f023 0301 	bic.w	r3, r3, #1
 800e22a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	3308      	adds	r3, #8
 800e232:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e234:	633a      	str	r2, [r7, #48]	; 0x30
 800e236:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e238:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e23a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e23c:	e841 2300 	strex	r3, r2, [r1]
 800e240:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e244:	2b00      	cmp	r3, #0
 800e246:	d1e5      	bne.n	800e214 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2220      	movs	r2, #32
 800e24c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2200      	movs	r2, #0
 800e254:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e25a:	2b01      	cmp	r3, #1
 800e25c:	d12e      	bne.n	800e2bc <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2200      	movs	r2, #0
 800e262:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	e853 3f00 	ldrex	r3, [r3]
 800e270:	60fb      	str	r3, [r7, #12]
   return(result);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	f023 0310 	bic.w	r3, r3, #16
 800e278:	64bb      	str	r3, [r7, #72]	; 0x48
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	461a      	mov	r2, r3
 800e280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e282:	61fb      	str	r3, [r7, #28]
 800e284:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e286:	69b9      	ldr	r1, [r7, #24]
 800e288:	69fa      	ldr	r2, [r7, #28]
 800e28a:	e841 2300 	strex	r3, r2, [r1]
 800e28e:	617b      	str	r3, [r7, #20]
   return(result);
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d1e6      	bne.n	800e264 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	69db      	ldr	r3, [r3, #28]
 800e29c:	f003 0310 	and.w	r3, r3, #16
 800e2a0:	2b10      	cmp	r3, #16
 800e2a2:	d103      	bne.n	800e2ac <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	2210      	movs	r2, #16
 800e2aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e2b2:	4619      	mov	r1, r3
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f7fe ff0d 	bl	800d0d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e2ba:	e00b      	b.n	800e2d4 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f7f2 fce3 	bl	8000c88 <HAL_UART_RxCpltCallback>
}
 800e2c2:	e007      	b.n	800e2d4 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	699a      	ldr	r2, [r3, #24]
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	f042 0208 	orr.w	r2, r2, #8
 800e2d2:	619a      	str	r2, [r3, #24]
}
 800e2d4:	bf00      	nop
 800e2d6:	3758      	adds	r7, #88	; 0x58
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}

0800e2dc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b096      	sub	sp, #88	; 0x58
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e2ea:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2f4:	2b22      	cmp	r3, #34	; 0x22
 800e2f6:	f040 8095 	bne.w	800e424 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e300:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e308:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800e30a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800e30e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e312:	4013      	ands	r3, r2
 800e314:	b29a      	uxth	r2, r3
 800e316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e318:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e31e:	1c9a      	adds	r2, r3, #2
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	3b01      	subs	r3, #1
 800e32e:	b29a      	uxth	r2, r3
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e33c:	b29b      	uxth	r3, r3
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d178      	bne.n	800e434 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e34a:	e853 3f00 	ldrex	r3, [r3]
 800e34e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e352:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e356:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	461a      	mov	r2, r3
 800e35e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e360:	643b      	str	r3, [r7, #64]	; 0x40
 800e362:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e364:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e366:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e368:	e841 2300 	strex	r3, r2, [r1]
 800e36c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e370:	2b00      	cmp	r3, #0
 800e372:	d1e6      	bne.n	800e342 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	3308      	adds	r3, #8
 800e37a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e37c:	6a3b      	ldr	r3, [r7, #32]
 800e37e:	e853 3f00 	ldrex	r3, [r3]
 800e382:	61fb      	str	r3, [r7, #28]
   return(result);
 800e384:	69fb      	ldr	r3, [r7, #28]
 800e386:	f023 0301 	bic.w	r3, r3, #1
 800e38a:	64bb      	str	r3, [r7, #72]	; 0x48
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	3308      	adds	r3, #8
 800e392:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e394:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e396:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e39a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e39c:	e841 2300 	strex	r3, r2, [r1]
 800e3a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d1e5      	bne.n	800e374 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2220      	movs	r2, #32
 800e3ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3ba:	2b01      	cmp	r3, #1
 800e3bc:	d12e      	bne.n	800e41c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	e853 3f00 	ldrex	r3, [r3]
 800e3d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	f023 0310 	bic.w	r3, r3, #16
 800e3d8:	647b      	str	r3, [r7, #68]	; 0x44
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	461a      	mov	r2, r3
 800e3e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3e2:	61bb      	str	r3, [r7, #24]
 800e3e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3e6:	6979      	ldr	r1, [r7, #20]
 800e3e8:	69ba      	ldr	r2, [r7, #24]
 800e3ea:	e841 2300 	strex	r3, r2, [r1]
 800e3ee:	613b      	str	r3, [r7, #16]
   return(result);
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d1e6      	bne.n	800e3c4 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	69db      	ldr	r3, [r3, #28]
 800e3fc:	f003 0310 	and.w	r3, r3, #16
 800e400:	2b10      	cmp	r3, #16
 800e402:	d103      	bne.n	800e40c <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	2210      	movs	r2, #16
 800e40a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e412:	4619      	mov	r1, r3
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f7fe fe5d 	bl	800d0d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e41a:	e00b      	b.n	800e434 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f7f2 fc33 	bl	8000c88 <HAL_UART_RxCpltCallback>
}
 800e422:	e007      	b.n	800e434 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	699a      	ldr	r2, [r3, #24]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f042 0208 	orr.w	r2, r2, #8
 800e432:	619a      	str	r2, [r3, #24]
}
 800e434:	bf00      	nop
 800e436:	3758      	adds	r7, #88	; 0x58
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b0a6      	sub	sp, #152	; 0x98
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e44a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	69db      	ldr	r3, [r3, #28]
 800e454:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	689b      	ldr	r3, [r3, #8]
 800e468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e472:	2b22      	cmp	r3, #34	; 0x22
 800e474:	f040 814d 	bne.w	800e712 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e47e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e482:	e0f4      	b.n	800e66e <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e48a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e48e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800e492:	b2d9      	uxtb	r1, r3
 800e494:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e498:	b2da      	uxtb	r2, r3
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e49e:	400a      	ands	r2, r1
 800e4a0:	b2d2      	uxtb	r2, r2
 800e4a2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4a8:	1c5a      	adds	r2, r3, #1
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e4b4:	b29b      	uxth	r3, r3
 800e4b6:	3b01      	subs	r3, #1
 800e4b8:	b29a      	uxth	r2, r3
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	69db      	ldr	r3, [r3, #28]
 800e4c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e4ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e4ce:	f003 0307 	and.w	r3, r3, #7
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d053      	beq.n	800e57e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e4d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e4da:	f003 0301 	and.w	r3, r3, #1
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d011      	beq.n	800e506 <UART_RxISR_8BIT_FIFOEN+0xca>
 800e4e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e4e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d00b      	beq.n	800e506 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	2201      	movs	r2, #1
 800e4f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4fc:	f043 0201 	orr.w	r2, r3, #1
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e506:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e50a:	f003 0302 	and.w	r3, r3, #2
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d011      	beq.n	800e536 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e512:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e516:	f003 0301 	and.w	r3, r3, #1
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d00b      	beq.n	800e536 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	2202      	movs	r2, #2
 800e524:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e52c:	f043 0204 	orr.w	r2, r3, #4
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e536:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e53a:	f003 0304 	and.w	r3, r3, #4
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d011      	beq.n	800e566 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e542:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e546:	f003 0301 	and.w	r3, r3, #1
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d00b      	beq.n	800e566 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	2204      	movs	r2, #4
 800e554:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e55c:	f043 0202 	orr.w	r2, r3, #2
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d006      	beq.n	800e57e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f7fe fda5 	bl	800d0c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2200      	movs	r2, #0
 800e57a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e584:	b29b      	uxth	r3, r3
 800e586:	2b00      	cmp	r3, #0
 800e588:	d171      	bne.n	800e66e <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e590:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e592:	e853 3f00 	ldrex	r3, [r3]
 800e596:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800e598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e59a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e59e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e5ac:	66bb      	str	r3, [r7, #104]	; 0x68
 800e5ae:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5b0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e5b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e5b4:	e841 2300 	strex	r3, r2, [r1]
 800e5b8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e5ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d1e4      	bne.n	800e58a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	3308      	adds	r3, #8
 800e5c6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5ca:	e853 3f00 	ldrex	r3, [r3]
 800e5ce:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e5d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5d2:	4b56      	ldr	r3, [pc, #344]	; (800e72c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800e5d4:	4013      	ands	r3, r2
 800e5d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	3308      	adds	r3, #8
 800e5de:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e5e0:	657a      	str	r2, [r7, #84]	; 0x54
 800e5e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e5e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e5e8:	e841 2300 	strex	r3, r2, [r1]
 800e5ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e5ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d1e5      	bne.n	800e5c0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2220      	movs	r2, #32
 800e5f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2200      	movs	r2, #0
 800e600:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e606:	2b01      	cmp	r3, #1
 800e608:	d12e      	bne.n	800e668 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2200      	movs	r2, #0
 800e60e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e618:	e853 3f00 	ldrex	r3, [r3]
 800e61c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e620:	f023 0310 	bic.w	r3, r3, #16
 800e624:	67bb      	str	r3, [r7, #120]	; 0x78
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	461a      	mov	r2, r3
 800e62c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e62e:	643b      	str	r3, [r7, #64]	; 0x40
 800e630:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e632:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e634:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e636:	e841 2300 	strex	r3, r2, [r1]
 800e63a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d1e6      	bne.n	800e610 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	69db      	ldr	r3, [r3, #28]
 800e648:	f003 0310 	and.w	r3, r3, #16
 800e64c:	2b10      	cmp	r3, #16
 800e64e:	d103      	bne.n	800e658 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	2210      	movs	r2, #16
 800e656:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e65e:	4619      	mov	r1, r3
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f7fe fd37 	bl	800d0d4 <HAL_UARTEx_RxEventCallback>
 800e666:	e002      	b.n	800e66e <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f7f2 fb0d 	bl	8000c88 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e66e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800e672:	2b00      	cmp	r3, #0
 800e674:	d006      	beq.n	800e684 <UART_RxISR_8BIT_FIFOEN+0x248>
 800e676:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e67a:	f003 0320 	and.w	r3, r3, #32
 800e67e:	2b00      	cmp	r3, #0
 800e680:	f47f af00 	bne.w	800e484 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e68a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e68e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800e692:	2b00      	cmp	r3, #0
 800e694:	d045      	beq.n	800e722 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e69c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d23e      	bcs.n	800e722 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	3308      	adds	r3, #8
 800e6aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6ac:	6a3b      	ldr	r3, [r7, #32]
 800e6ae:	e853 3f00 	ldrex	r3, [r3]
 800e6b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800e6b4:	69fb      	ldr	r3, [r7, #28]
 800e6b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e6ba:	673b      	str	r3, [r7, #112]	; 0x70
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	3308      	adds	r3, #8
 800e6c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e6c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e6c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e6ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6cc:	e841 2300 	strex	r3, r2, [r1]
 800e6d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d1e5      	bne.n	800e6a4 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	4a15      	ldr	r2, [pc, #84]	; (800e730 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800e6dc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	e853 3f00 	ldrex	r3, [r3]
 800e6ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	f043 0320 	orr.w	r3, r3, #32
 800e6f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	461a      	mov	r2, r3
 800e6fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6fc:	61bb      	str	r3, [r7, #24]
 800e6fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e700:	6979      	ldr	r1, [r7, #20]
 800e702:	69ba      	ldr	r2, [r7, #24]
 800e704:	e841 2300 	strex	r3, r2, [r1]
 800e708:	613b      	str	r3, [r7, #16]
   return(result);
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d1e6      	bne.n	800e6de <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e710:	e007      	b.n	800e722 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	699a      	ldr	r2, [r3, #24]
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f042 0208 	orr.w	r2, r2, #8
 800e720:	619a      	str	r2, [r3, #24]
}
 800e722:	bf00      	nop
 800e724:	3798      	adds	r7, #152	; 0x98
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}
 800e72a:	bf00      	nop
 800e72c:	effffffe 	.word	0xeffffffe
 800e730:	0800e17d 	.word	0x0800e17d

0800e734 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b0a8      	sub	sp, #160	; 0xa0
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e742:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	69db      	ldr	r3, [r3, #28]
 800e74c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	689b      	ldr	r3, [r3, #8]
 800e760:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e76a:	2b22      	cmp	r3, #34	; 0x22
 800e76c:	f040 8151 	bne.w	800ea12 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e776:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e77a:	e0f8      	b.n	800e96e <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e782:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e78a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800e78e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800e792:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e796:	4013      	ands	r3, r2
 800e798:	b29a      	uxth	r2, r3
 800e79a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e79e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7a4:	1c9a      	adds	r2, r3, #2
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	3b01      	subs	r3, #1
 800e7b4:	b29a      	uxth	r2, r3
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	69db      	ldr	r3, [r3, #28]
 800e7c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e7c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e7ca:	f003 0307 	and.w	r3, r3, #7
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d053      	beq.n	800e87a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e7d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e7d6:	f003 0301 	and.w	r3, r3, #1
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d011      	beq.n	800e802 <UART_RxISR_16BIT_FIFOEN+0xce>
 800e7de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e7e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d00b      	beq.n	800e802 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7f8:	f043 0201 	orr.w	r2, r3, #1
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e802:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e806:	f003 0302 	and.w	r3, r3, #2
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d011      	beq.n	800e832 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e80e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e812:	f003 0301 	and.w	r3, r3, #1
 800e816:	2b00      	cmp	r3, #0
 800e818:	d00b      	beq.n	800e832 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	2202      	movs	r2, #2
 800e820:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e828:	f043 0204 	orr.w	r2, r3, #4
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e832:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e836:	f003 0304 	and.w	r3, r3, #4
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d011      	beq.n	800e862 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e83e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e842:	f003 0301 	and.w	r3, r3, #1
 800e846:	2b00      	cmp	r3, #0
 800e848:	d00b      	beq.n	800e862 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	2204      	movs	r2, #4
 800e850:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e858:	f043 0202 	orr.w	r2, r3, #2
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d006      	beq.n	800e87a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f7fe fc27 	bl	800d0c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2200      	movs	r2, #0
 800e876:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e880:	b29b      	uxth	r3, r3
 800e882:	2b00      	cmp	r3, #0
 800e884:	d173      	bne.n	800e96e <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e88c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e88e:	e853 3f00 	ldrex	r3, [r3]
 800e892:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e896:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e89a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e8a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e8aa:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e8ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e8b0:	e841 2300 	strex	r3, r2, [r1]
 800e8b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e8b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d1e4      	bne.n	800e886 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	3308      	adds	r3, #8
 800e8c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8c6:	e853 3f00 	ldrex	r3, [r3]
 800e8ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e8cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e8ce:	4b57      	ldr	r3, [pc, #348]	; (800ea2c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800e8d0:	4013      	ands	r3, r2
 800e8d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	3308      	adds	r3, #8
 800e8dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e8e0:	65ba      	str	r2, [r7, #88]	; 0x58
 800e8e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e8e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e8e8:	e841 2300 	strex	r3, r2, [r1]
 800e8ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e8ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d1e3      	bne.n	800e8bc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2220      	movs	r2, #32
 800e8f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2200      	movs	r2, #0
 800e900:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e906:	2b01      	cmp	r3, #1
 800e908:	d12e      	bne.n	800e968 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2200      	movs	r2, #0
 800e90e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e918:	e853 3f00 	ldrex	r3, [r3]
 800e91c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e91e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e920:	f023 0310 	bic.w	r3, r3, #16
 800e924:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	461a      	mov	r2, r3
 800e92c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e92e:	647b      	str	r3, [r7, #68]	; 0x44
 800e930:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e932:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e934:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e936:	e841 2300 	strex	r3, r2, [r1]
 800e93a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e93c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d1e6      	bne.n	800e910 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	69db      	ldr	r3, [r3, #28]
 800e948:	f003 0310 	and.w	r3, r3, #16
 800e94c:	2b10      	cmp	r3, #16
 800e94e:	d103      	bne.n	800e958 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	2210      	movs	r2, #16
 800e956:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e95e:	4619      	mov	r1, r3
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f7fe fbb7 	bl	800d0d4 <HAL_UARTEx_RxEventCallback>
 800e966:	e002      	b.n	800e96e <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f7f2 f98d 	bl	8000c88 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e96e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800e972:	2b00      	cmp	r3, #0
 800e974:	d006      	beq.n	800e984 <UART_RxISR_16BIT_FIFOEN+0x250>
 800e976:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e97a:	f003 0320 	and.w	r3, r3, #32
 800e97e:	2b00      	cmp	r3, #0
 800e980:	f47f aefc 	bne.w	800e77c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e98a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e98e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e992:	2b00      	cmp	r3, #0
 800e994:	d045      	beq.n	800ea22 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e99c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	d23e      	bcs.n	800ea22 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	3308      	adds	r3, #8
 800e9aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ae:	e853 3f00 	ldrex	r3, [r3]
 800e9b2:	623b      	str	r3, [r7, #32]
   return(result);
 800e9b4:	6a3b      	ldr	r3, [r7, #32]
 800e9b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e9ba:	677b      	str	r3, [r7, #116]	; 0x74
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	3308      	adds	r3, #8
 800e9c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e9c4:	633a      	str	r2, [r7, #48]	; 0x30
 800e9c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e9ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9cc:	e841 2300 	strex	r3, r2, [r1]
 800e9d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d1e5      	bne.n	800e9a4 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	4a15      	ldr	r2, [pc, #84]	; (800ea30 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800e9dc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9e4:	693b      	ldr	r3, [r7, #16]
 800e9e6:	e853 3f00 	ldrex	r3, [r3]
 800e9ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	f043 0320 	orr.w	r3, r3, #32
 800e9f2:	673b      	str	r3, [r7, #112]	; 0x70
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	461a      	mov	r2, r3
 800e9fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e9fc:	61fb      	str	r3, [r7, #28]
 800e9fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea00:	69b9      	ldr	r1, [r7, #24]
 800ea02:	69fa      	ldr	r2, [r7, #28]
 800ea04:	e841 2300 	strex	r3, r2, [r1]
 800ea08:	617b      	str	r3, [r7, #20]
   return(result);
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d1e6      	bne.n	800e9de <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ea10:	e007      	b.n	800ea22 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	699a      	ldr	r2, [r3, #24]
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f042 0208 	orr.w	r2, r2, #8
 800ea20:	619a      	str	r2, [r3, #24]
}
 800ea22:	bf00      	nop
 800ea24:	37a0      	adds	r7, #160	; 0xa0
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	effffffe 	.word	0xeffffffe
 800ea30:	0800e2dd 	.word	0x0800e2dd

0800ea34 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b088      	sub	sp, #32
 800ea38:	af02      	add	r7, sp, #8
 800ea3a:	60f8      	str	r0, [r7, #12]
 800ea3c:	1d3b      	adds	r3, r7, #4
 800ea3e:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800ea42:	2300      	movs	r3, #0
 800ea44:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ea4c:	2b01      	cmp	r3, #1
 800ea4e:	d101      	bne.n	800ea54 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800ea50:	2302      	movs	r3, #2
 800ea52:	e046      	b.n	800eae2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	2201      	movs	r2, #1
 800ea58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	2224      	movs	r2, #36	; 0x24
 800ea60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	681a      	ldr	r2, [r3, #0]
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f022 0201 	bic.w	r2, r2, #1
 800ea72:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	689b      	ldr	r3, [r3, #8]
 800ea7a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ea7e:	687a      	ldr	r2, [r7, #4]
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	430a      	orrs	r2, r1
 800ea86:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d105      	bne.n	800ea9a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800ea8e:	1d3b      	adds	r3, r7, #4
 800ea90:	e893 0006 	ldmia.w	r3, {r1, r2}
 800ea94:	68f8      	ldr	r0, [r7, #12]
 800ea96:	f000 f910 	bl	800ecba <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	681a      	ldr	r2, [r3, #0]
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	f042 0201 	orr.w	r2, r2, #1
 800eaa8:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eaaa:	f7f3 fdf5 	bl	8002698 <HAL_GetTick>
 800eaae:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eab0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eab4:	9300      	str	r3, [sp, #0]
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	2200      	movs	r2, #0
 800eaba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eabe:	68f8      	ldr	r0, [r7, #12]
 800eac0:	f7ff f969 	bl	800dd96 <UART_WaitOnFlagUntilTimeout>
 800eac4:	4603      	mov	r3, r0
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d002      	beq.n	800ead0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800eaca:	2303      	movs	r3, #3
 800eacc:	75fb      	strb	r3, [r7, #23]
 800eace:	e003      	b.n	800ead8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	2220      	movs	r2, #32
 800ead4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2200      	movs	r2, #0
 800eadc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800eae0:	7dfb      	ldrb	r3, [r7, #23]
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3718      	adds	r7, #24
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}

0800eaea <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800eaea:	b480      	push	{r7}
 800eaec:	b089      	sub	sp, #36	; 0x24
 800eaee:	af00      	add	r7, sp, #0
 800eaf0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eaf8:	2b01      	cmp	r3, #1
 800eafa:	d101      	bne.n	800eb00 <HAL_UARTEx_EnableStopMode+0x16>
 800eafc:	2302      	movs	r3, #2
 800eafe:	e021      	b.n	800eb44 <HAL_UARTEx_EnableStopMode+0x5a>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2201      	movs	r2, #1
 800eb04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	e853 3f00 	ldrex	r3, [r3]
 800eb14:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	f043 0302 	orr.w	r3, r3, #2
 800eb1c:	61fb      	str	r3, [r7, #28]
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	461a      	mov	r2, r3
 800eb24:	69fb      	ldr	r3, [r7, #28]
 800eb26:	61bb      	str	r3, [r7, #24]
 800eb28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb2a:	6979      	ldr	r1, [r7, #20]
 800eb2c:	69ba      	ldr	r2, [r7, #24]
 800eb2e:	e841 2300 	strex	r3, r2, [r1]
 800eb32:	613b      	str	r3, [r7, #16]
   return(result);
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d1e6      	bne.n	800eb08 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb42:	2300      	movs	r3, #0
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3724      	adds	r7, #36	; 0x24
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4e:	4770      	bx	lr

0800eb50 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800eb50:	b480      	push	{r7}
 800eb52:	b085      	sub	sp, #20
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb5e:	2b01      	cmp	r3, #1
 800eb60:	d101      	bne.n	800eb66 <HAL_UARTEx_DisableFifoMode+0x16>
 800eb62:	2302      	movs	r3, #2
 800eb64:	e027      	b.n	800ebb6 <HAL_UARTEx_DisableFifoMode+0x66>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2201      	movs	r2, #1
 800eb6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2224      	movs	r2, #36	; 0x24
 800eb72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	681a      	ldr	r2, [r3, #0]
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	f022 0201 	bic.w	r2, r2, #1
 800eb8c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800eb94:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2200      	movs	r2, #0
 800eb9a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	68fa      	ldr	r2, [r7, #12]
 800eba2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2220      	movs	r2, #32
 800eba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ebb4:	2300      	movs	r3, #0
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	3714      	adds	r7, #20
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc0:	4770      	bx	lr

0800ebc2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ebc2:	b580      	push	{r7, lr}
 800ebc4:	b084      	sub	sp, #16
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	6078      	str	r0, [r7, #4]
 800ebca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ebd2:	2b01      	cmp	r3, #1
 800ebd4:	d101      	bne.n	800ebda <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ebd6:	2302      	movs	r3, #2
 800ebd8:	e02d      	b.n	800ec36 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2201      	movs	r2, #1
 800ebde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2224      	movs	r2, #36	; 0x24
 800ebe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	681a      	ldr	r2, [r3, #0]
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	f022 0201 	bic.w	r2, r2, #1
 800ec00:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	689b      	ldr	r3, [r3, #8]
 800ec08:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	683a      	ldr	r2, [r7, #0]
 800ec12:	430a      	orrs	r2, r1
 800ec14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ec16:	6878      	ldr	r0, [r7, #4]
 800ec18:	f000 f872 	bl	800ed00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	68fa      	ldr	r2, [r7, #12]
 800ec22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2220      	movs	r2, #32
 800ec28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ec34:	2300      	movs	r3, #0
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3710      	adds	r7, #16
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}

0800ec3e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ec3e:	b580      	push	{r7, lr}
 800ec40:	b084      	sub	sp, #16
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	6078      	str	r0, [r7, #4]
 800ec46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec4e:	2b01      	cmp	r3, #1
 800ec50:	d101      	bne.n	800ec56 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ec52:	2302      	movs	r3, #2
 800ec54:	e02d      	b.n	800ecb2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2201      	movs	r2, #1
 800ec5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2224      	movs	r2, #36	; 0x24
 800ec62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	681a      	ldr	r2, [r3, #0]
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	f022 0201 	bic.w	r2, r2, #1
 800ec7c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	689b      	ldr	r3, [r3, #8]
 800ec84:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	683a      	ldr	r2, [r7, #0]
 800ec8e:	430a      	orrs	r2, r1
 800ec90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f000 f834 	bl	800ed00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	68fa      	ldr	r2, [r7, #12]
 800ec9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2220      	movs	r2, #32
 800eca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ecb0:	2300      	movs	r3, #0
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3710      	adds	r7, #16
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}

0800ecba <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800ecba:	b480      	push	{r7}
 800ecbc:	b085      	sub	sp, #20
 800ecbe:	af00      	add	r7, sp, #0
 800ecc0:	60f8      	str	r0, [r7, #12]
 800ecc2:	1d3b      	adds	r3, r7, #4
 800ecc4:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	685b      	ldr	r3, [r3, #4]
 800ecce:	f023 0210 	bic.w	r2, r3, #16
 800ecd2:	893b      	ldrh	r3, [r7, #8]
 800ecd4:	4619      	mov	r1, r3
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	430a      	orrs	r2, r1
 800ecdc:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	685b      	ldr	r3, [r3, #4]
 800ece4:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800ece8:	7abb      	ldrb	r3, [r7, #10]
 800ecea:	061a      	lsls	r2, r3, #24
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	430a      	orrs	r2, r1
 800ecf2:	605a      	str	r2, [r3, #4]
}
 800ecf4:	bf00      	nop
 800ecf6:	3714      	adds	r7, #20
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfe:	4770      	bx	lr

0800ed00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b085      	sub	sp, #20
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d108      	bne.n	800ed22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2201      	movs	r2, #1
 800ed14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2201      	movs	r2, #1
 800ed1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ed20:	e031      	b.n	800ed86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ed22:	2310      	movs	r3, #16
 800ed24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ed26:	2310      	movs	r3, #16
 800ed28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	689b      	ldr	r3, [r3, #8]
 800ed30:	0e5b      	lsrs	r3, r3, #25
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	f003 0307 	and.w	r3, r3, #7
 800ed38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	689b      	ldr	r3, [r3, #8]
 800ed40:	0f5b      	lsrs	r3, r3, #29
 800ed42:	b2db      	uxtb	r3, r3
 800ed44:	f003 0307 	and.w	r3, r3, #7
 800ed48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ed4a:	7bbb      	ldrb	r3, [r7, #14]
 800ed4c:	7b3a      	ldrb	r2, [r7, #12]
 800ed4e:	4911      	ldr	r1, [pc, #68]	; (800ed94 <UARTEx_SetNbDataToProcess+0x94>)
 800ed50:	5c8a      	ldrb	r2, [r1, r2]
 800ed52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ed56:	7b3a      	ldrb	r2, [r7, #12]
 800ed58:	490f      	ldr	r1, [pc, #60]	; (800ed98 <UARTEx_SetNbDataToProcess+0x98>)
 800ed5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ed5c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed60:	b29a      	uxth	r2, r3
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ed68:	7bfb      	ldrb	r3, [r7, #15]
 800ed6a:	7b7a      	ldrb	r2, [r7, #13]
 800ed6c:	4909      	ldr	r1, [pc, #36]	; (800ed94 <UARTEx_SetNbDataToProcess+0x94>)
 800ed6e:	5c8a      	ldrb	r2, [r1, r2]
 800ed70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ed74:	7b7a      	ldrb	r2, [r7, #13]
 800ed76:	4908      	ldr	r1, [pc, #32]	; (800ed98 <UARTEx_SetNbDataToProcess+0x98>)
 800ed78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ed7a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed7e:	b29a      	uxth	r2, r3
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ed86:	bf00      	nop
 800ed88:	3714      	adds	r7, #20
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed90:	4770      	bx	lr
 800ed92:	bf00      	nop
 800ed94:	0800ee54 	.word	0x0800ee54
 800ed98:	0800ee5c 	.word	0x0800ee5c

0800ed9c <__libc_init_array>:
 800ed9c:	b570      	push	{r4, r5, r6, lr}
 800ed9e:	4d0d      	ldr	r5, [pc, #52]	; (800edd4 <__libc_init_array+0x38>)
 800eda0:	4c0d      	ldr	r4, [pc, #52]	; (800edd8 <__libc_init_array+0x3c>)
 800eda2:	1b64      	subs	r4, r4, r5
 800eda4:	10a4      	asrs	r4, r4, #2
 800eda6:	2600      	movs	r6, #0
 800eda8:	42a6      	cmp	r6, r4
 800edaa:	d109      	bne.n	800edc0 <__libc_init_array+0x24>
 800edac:	4d0b      	ldr	r5, [pc, #44]	; (800eddc <__libc_init_array+0x40>)
 800edae:	4c0c      	ldr	r4, [pc, #48]	; (800ede0 <__libc_init_array+0x44>)
 800edb0:	f000 f820 	bl	800edf4 <_init>
 800edb4:	1b64      	subs	r4, r4, r5
 800edb6:	10a4      	asrs	r4, r4, #2
 800edb8:	2600      	movs	r6, #0
 800edba:	42a6      	cmp	r6, r4
 800edbc:	d105      	bne.n	800edca <__libc_init_array+0x2e>
 800edbe:	bd70      	pop	{r4, r5, r6, pc}
 800edc0:	f855 3b04 	ldr.w	r3, [r5], #4
 800edc4:	4798      	blx	r3
 800edc6:	3601      	adds	r6, #1
 800edc8:	e7ee      	b.n	800eda8 <__libc_init_array+0xc>
 800edca:	f855 3b04 	ldr.w	r3, [r5], #4
 800edce:	4798      	blx	r3
 800edd0:	3601      	adds	r6, #1
 800edd2:	e7f2      	b.n	800edba <__libc_init_array+0x1e>
 800edd4:	0800ee6c 	.word	0x0800ee6c
 800edd8:	0800ee6c 	.word	0x0800ee6c
 800eddc:	0800ee6c 	.word	0x0800ee6c
 800ede0:	0800ee70 	.word	0x0800ee70

0800ede4 <memset>:
 800ede4:	4402      	add	r2, r0
 800ede6:	4603      	mov	r3, r0
 800ede8:	4293      	cmp	r3, r2
 800edea:	d100      	bne.n	800edee <memset+0xa>
 800edec:	4770      	bx	lr
 800edee:	f803 1b01 	strb.w	r1, [r3], #1
 800edf2:	e7f9      	b.n	800ede8 <memset+0x4>

0800edf4 <_init>:
 800edf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edf6:	bf00      	nop
 800edf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edfa:	bc08      	pop	{r3}
 800edfc:	469e      	mov	lr, r3
 800edfe:	4770      	bx	lr

0800ee00 <_fini>:
 800ee00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee02:	bf00      	nop
 800ee04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee06:	bc08      	pop	{r3}
 800ee08:	469e      	mov	lr, r3
 800ee0a:	4770      	bx	lr
