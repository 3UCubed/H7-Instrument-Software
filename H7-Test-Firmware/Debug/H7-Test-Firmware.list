
H7-Test-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff54  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080101ec  080101ec  000201ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010244  08010244  00020244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801024c  0801024c  0002024c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010250  08010250  00020250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  24000000  08010254  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005d8  240000a0  080102ec  000300a0  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24000678  080102ec  00030678  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023c1f  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000371c  00000000  00000000  00053ce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b58  00000000  00000000  00057408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001a10  00000000  00000000  00058f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b1ff  00000000  00000000  0005a970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024109  00000000  00000000  00095b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018064e  00000000  00000000  000b9c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023a2c6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000795c  00000000  00000000  0023a318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000a0 	.word	0x240000a0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080101d4 	.word	0x080101d4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000a4 	.word	0x240000a4
 80002d4:	080101d4 	.word	0x080101d4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ee:	4904      	ldr	r1, [pc, #16]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x28>)
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f6:	f3bf 8f4f 	dsb	sy
}
 80005fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <__NVIC_SystemReset+0x20>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	05fa0004 	.word	0x05fa0004

08000608 <poll_i2c_sensor>:
 *
 * @param TEMP_ADDR address of individual i2c sensor
 * @return int16_t integer result from sensor
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af02      	add	r7, sp, #8
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
  int16_t output;
  uint8_t buf[2];
  HAL_StatusTypeDef ret;
  buf[0] = REG_TEMP;
 8000612:	2300      	movs	r3, #0
 8000614:	723b      	strb	r3, [r7, #8]
  ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1,
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	b299      	uxth	r1, r3
 800061a:	f107 0208 	add.w	r2, r7, #8
 800061e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2301      	movs	r3, #1
 8000626:	481d      	ldr	r0, [pc, #116]	; (800069c <poll_i2c_sensor+0x94>)
 8000628:	f007 fb38 	bl	8007c9c <HAL_I2C_Master_Transmit>
 800062c:	4603      	mov	r3, r0
 800062e:	737b      	strb	r3, [r7, #13]
                                1000);
  if (ret != HAL_OK)
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d009      	beq.n	800064a <poll_i2c_sensor+0x42>
  {
    strcpy((char *)buf, "Error Tx\r\n");
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	4a19      	ldr	r2, [pc, #100]	; (80006a0 <poll_i2c_sensor+0x98>)
 800063c:	ca07      	ldmia	r2, {r0, r1, r2}
 800063e:	c303      	stmia	r3!, {r0, r1}
 8000640:	801a      	strh	r2, [r3, #0]
 8000642:	3302      	adds	r3, #2
 8000644:	0c12      	lsrs	r2, r2, #16
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	e022      	b.n	8000690 <poll_i2c_sensor+0x88>
  }
  else
  {
    /* Read 2 bytes from the temperature register */
    ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2,
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	b299      	uxth	r1, r3
 800064e:	f107 0208 	add.w	r2, r7, #8
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2302      	movs	r3, #2
 800065a:	4810      	ldr	r0, [pc, #64]	; (800069c <poll_i2c_sensor+0x94>)
 800065c:	f007 fc12 	bl	8007e84 <HAL_I2C_Master_Receive>
 8000660:	4603      	mov	r3, r0
 8000662:	737b      	strb	r3, [r7, #13]
                                 1000);
    if (ret != HAL_OK)
 8000664:	7b7b      	ldrb	r3, [r7, #13]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d009      	beq.n	800067e <poll_i2c_sensor+0x76>
    {
      strcpy((char *)buf, "Error Rx\r\n");
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <poll_i2c_sensor+0x9c>)
 8000670:	ca07      	ldmia	r2, {r0, r1, r2}
 8000672:	c303      	stmia	r3!, {r0, r1}
 8000674:	801a      	strh	r2, [r3, #0]
 8000676:	3302      	adds	r3, #2
 8000678:	0c12      	lsrs	r2, r2, #16
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	e008      	b.n	8000690 <poll_i2c_sensor+0x88>
    }
    else
    {
      output = (int16_t)(buf[0] << 8);
 800067e:	7a3b      	ldrb	r3, [r7, #8]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	81fb      	strh	r3, [r7, #14]
      output = (output | buf[1]) >> 3;
 8000684:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000688:	7a7a      	ldrb	r2, [r7, #9]
 800068a:	4313      	orrs	r3, r2
 800068c:	10db      	asrs	r3, r3, #3
 800068e:	81fb      	strh	r3, [r7, #14]
    }
  }
  return output;
 8000690:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	24000288 	.word	0x24000288
 80006a0:	080101ec 	.word	0x080101ec
 80006a4:	080101f8 	.word	0x080101f8

080006a8 <i2c>:
 * @brief called in hk routine to poll each i2c sensor
 *
 * @return int16_t* size 4 buffer to return i2c values
 */
int16_t *i2c()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
  int16_t output1 = poll_i2c_sensor(ADT7410_1);
 80006ae:	2390      	movs	r3, #144	; 0x90
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffa9 	bl	8000608 <poll_i2c_sensor>
 80006b6:	4603      	mov	r3, r0
 80006b8:	81fb      	strh	r3, [r7, #14]
  int16_t output2 = poll_i2c_sensor(ADT7410_2);
 80006ba:	2394      	movs	r3, #148	; 0x94
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffa3 	bl	8000608 <poll_i2c_sensor>
 80006c2:	4603      	mov	r3, r0
 80006c4:	81bb      	strh	r3, [r7, #12]
  int16_t output3 = poll_i2c_sensor(ADT7410_3);
 80006c6:	2392      	movs	r3, #146	; 0x92
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff9d 	bl	8000608 <poll_i2c_sensor>
 80006ce:	4603      	mov	r3, r0
 80006d0:	817b      	strh	r3, [r7, #10]
  int16_t output4 = poll_i2c_sensor(ADT7410_4);
 80006d2:	2396      	movs	r3, #150	; 0x96
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff97 	bl	8000608 <poll_i2c_sensor>
 80006da:	4603      	mov	r3, r0
 80006dc:	813b      	strh	r3, [r7, #8]

  int16_t *results = malloc(4 * sizeof(int16_t));
 80006de:	2008      	movs	r0, #8
 80006e0:	f00f fc54 	bl	800ff8c <malloc>
 80006e4:	4603      	mov	r3, r0
 80006e6:	607b      	str	r3, [r7, #4]
  results[0] = output1;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	89fa      	ldrh	r2, [r7, #14]
 80006ec:	801a      	strh	r2, [r3, #0]
  results[1] = output2;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3302      	adds	r3, #2
 80006f2:	89ba      	ldrh	r2, [r7, #12]
 80006f4:	801a      	strh	r2, [r3, #0]
  results[2] = output3;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3304      	adds	r3, #4
 80006fa:	897a      	ldrh	r2, [r7, #10]
 80006fc:	801a      	strh	r2, [r3, #0]
  results[3] = output4;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3306      	adds	r3, #6
 8000702:	893a      	ldrh	r2, [r7, #8]
 8000704:	801a      	strh	r2, [r3, #0]
  return results;
 8000706:	687b      	ldr	r3, [r7, #4]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <do_auto_sweep>:
/**
 * @brief if auto sweep is enabled, will increase step
 *
 */
void do_auto_sweep()
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  if (step == 7)
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <do_auto_sweep+0x50>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b07      	cmp	r3, #7
 800071a:	d103      	bne.n	8000724 <do_auto_sweep+0x14>
  {
    is_increasing = 0;
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <do_auto_sweep+0x54>)
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	e006      	b.n	8000732 <do_auto_sweep+0x22>
  }
  else if (step == 0)
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <do_auto_sweep+0x50>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d102      	bne.n	8000732 <do_auto_sweep+0x22>
  {
    is_increasing = 1;
 800072c:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <do_auto_sweep+0x54>)
 800072e:	2201      	movs	r2, #1
 8000730:	601a      	str	r2, [r3, #0]
  }

  if (is_increasing)
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <do_auto_sweep+0x54>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d006      	beq.n	8000748 <do_auto_sweep+0x38>
  {
    step++;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <do_auto_sweep+0x50>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b07      	ldr	r3, [pc, #28]	; (8000760 <do_auto_sweep+0x50>)
 8000744:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    step--;
  }
}
 8000746:	e005      	b.n	8000754 <do_auto_sweep+0x44>
    step--;
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <do_auto_sweep+0x50>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	3b01      	subs	r3, #1
 800074e:	b2da      	uxtb	r2, r3
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <do_auto_sweep+0x50>)
 8000752:	701a      	strb	r2, [r3, #0]
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	24000600 	.word	0x24000600
 8000764:	24000020 	.word	0x24000020

08000768 <spi>:
 *
 * @param spi given spi peripheral
 * @return uint16_t raw value from reading spi peripheral
 */
uint8_t* spi(SPI_HandleTypeDef spi)
{
 8000768:	b084      	sub	sp, #16
 800076a:	b580      	push	{r7, lr}
 800076c:	b084      	sub	sp, #16
 800076e:	af00      	add	r7, sp, #0
 8000770:	f107 0c18 	add.w	ip, r7, #24
 8000774:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiRxBuffer[2];
	HAL_SPI_Receive(&spi,(uint8_t *)spiRxBuffer, 1, 1);
 8000778:	1d39      	adds	r1, r7, #4
 800077a:	2301      	movs	r3, #1
 800077c:	2201      	movs	r2, #1
 800077e:	f107 0018 	add.w	r0, r7, #24
 8000782:	f00b fa47 	bl	800bc14 <HAL_SPI_Receive>
	uint8_t SPI_LSB = ((spiRxBuffer[0] & 0xFF00) >> 8);
 8000786:	2300      	movs	r3, #0
 8000788:	73fb      	strb	r3, [r7, #15]
	uint8_t SPI_MSB = (spiRxBuffer[1] & 0xFF);
 800078a:	797b      	ldrb	r3, [r7, #5]
 800078c:	73bb      	strb	r3, [r7, #14]
	spi.Instance->CR1 |= 1<<10; // THIS IS NEEDED TO STOP SPI2_SCK FROM GENERATING CLOCK PULSES
 800078e:	69bb      	ldr	r3, [r7, #24]
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000798:	601a      	str	r2, [r3, #0]
	uint8_t* results = malloc(2 * sizeof(uint8_t));
 800079a:	2002      	movs	r0, #2
 800079c:	f00f fbf6 	bl	800ff8c <malloc>
 80007a0:	4603      	mov	r3, r0
 80007a2:	60bb      	str	r3, [r7, #8]
	results[0] = SPI_MSB;
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	7bba      	ldrb	r2, [r7, #14]
 80007a8:	701a      	strb	r2, [r3, #0]
	results[1] = SPI_LSB;
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	3301      	adds	r3, #1
 80007ae:	7bfa      	ldrb	r2, [r7, #15]
 80007b0:	701a      	strb	r2, [r3, #0]
	return results;
 80007b2:	68bb      	ldr	r3, [r7, #8]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007be:	b004      	add	sp, #16
 80007c0:	4770      	bx	lr
	...

080007c4 <set_erpa_sweep>:
/**
 * @brief Set the erpa sweep value
 *
 */
void set_erpa_sweep()
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <set_erpa_sweep+0x28>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	461a      	mov	r2, r3
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <set_erpa_sweep+0x2c>)
 80007d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007d4:	2200      	movs	r2, #0
 80007d6:	2100      	movs	r1, #0
 80007d8:	4806      	ldr	r0, [pc, #24]	; (80007f4 <set_erpa_sweep+0x30>)
 80007da:	f004 f85c 	bl	8004896 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80007de:	2100      	movs	r1, #0
 80007e0:	4804      	ldr	r0, [pc, #16]	; (80007f4 <set_erpa_sweep+0x30>)
 80007e2:	f004 f806 	bl	80047f2 <HAL_DAC_Start>

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	24000600 	.word	0x24000600
 80007f0:	24000000 	.word	0x24000000
 80007f4:	24000274 	.word	0x24000274

080007f8 <erpa_adc>:
/**
 * @brief polls erpa adcs
 *
 * @return uint16_t* results of erpa adcs
 */
uint16_t* erpa_adc() {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0

	HAL_ADC_Stop_DMA(&hadc1);
 80007fe:	4819      	ldr	r0, [pc, #100]	; (8000864 <erpa_adc+0x6c>)
 8000800:	f002 fe2a 	bl	8003458 <HAL_ADC_Stop_DMA>
	if (HAL_ADC_Start_DMA(&hadc1,
 8000804:	2220      	movs	r2, #32
 8000806:	4918      	ldr	r1, [pc, #96]	; (8000868 <erpa_adc+0x70>)
 8000808:	4816      	ldr	r0, [pc, #88]	; (8000864 <erpa_adc+0x6c>)
 800080a:	f002 fd61 	bl	80032d0 <HAL_ADC_Start_DMA>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <erpa_adc+0x20>
		(uint32_t *)aADCxConvertedData,
		 ADC_CONVERTED_DATA_BUFFER_SIZE
	) != HAL_OK) {
		 Error_Handler();
 8000814:	f001 fb68 	bl	8001ee8 <Error_Handler>
	}

	uint16_t PF11 = aADCxConvertedData[13]; 		// ENDmon -- verified
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <erpa_adc+0x70>)
 800081a:	8b5b      	ldrh	r3, [r3, #26]
 800081c:	81fb      	strh	r3, [r7, #14]
	uint16_t PA6 = aADCxConvertedData[14]; 			// SWPmon -- verified
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <erpa_adc+0x70>)
 8000820:	8b9b      	ldrh	r3, [r3, #28]
 8000822:	81bb      	strh	r3, [r7, #12]
	uint16_t PC4 = aADCxConvertedData[15]; 			// TEMP1 -- verified
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <erpa_adc+0x70>)
 8000826:	8bdb      	ldrh	r3, [r3, #30]
 8000828:	817b      	strh	r3, [r7, #10]
	uint16_t PB1 = aADCxConvertedData[0];			// TEMP2 -- verified
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <erpa_adc+0x70>)
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	813b      	strh	r3, [r7, #8]

	uint16_t* results = malloc(4 * sizeof(uint16_t));
 8000830:	2008      	movs	r0, #8
 8000832:	f00f fbab 	bl	800ff8c <malloc>
 8000836:	4603      	mov	r3, r0
 8000838:	607b      	str	r3, [r7, #4]
	results[0] = PF11;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	89fa      	ldrh	r2, [r7, #14]
 800083e:	801a      	strh	r2, [r3, #0]
	results[1] = PA6;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3302      	adds	r3, #2
 8000844:	89ba      	ldrh	r2, [r7, #12]
 8000846:	801a      	strh	r2, [r3, #0]
	results[2] = PC4;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3304      	adds	r3, #4
 800084c:	897a      	ldrh	r2, [r7, #10]
 800084e:	801a      	strh	r2, [r3, #0]
	results[3] = PB1;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3306      	adds	r3, #6
 8000854:	893a      	ldrh	r2, [r7, #8]
 8000856:	801a      	strh	r2, [r3, #0]

	return results;
 8000858:	687b      	ldr	r3, [r7, #4]


}
 800085a:	4618      	mov	r0, r3
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	240000bc 	.word	0x240000bc
 8000868:	24000580 	.word	0x24000580

0800086c <hk_adc1>:

uint16_t* hk_adc1() {
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0

	HAL_ADC_Stop_DMA(&hadc1);
 8000872:	482e      	ldr	r0, [pc, #184]	; (800092c <hk_adc1+0xc0>)
 8000874:	f002 fdf0 	bl	8003458 <HAL_ADC_Stop_DMA>
	if (HAL_ADC_Start_DMA(&hadc1,
 8000878:	2220      	movs	r2, #32
 800087a:	492d      	ldr	r1, [pc, #180]	; (8000930 <hk_adc1+0xc4>)
 800087c:	482b      	ldr	r0, [pc, #172]	; (800092c <hk_adc1+0xc0>)
 800087e:	f002 fd27 	bl	80032d0 <HAL_ADC_Start_DMA>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <hk_adc1+0x20>
			(uint32_t *)aADCxConvertedData,
			ADC_CONVERTED_DATA_BUFFER_SIZE)
			!= HAL_OK) {
		Error_Handler();
 8000888:	f001 fb2e 	bl	8001ee8 <Error_Handler>
	}

	uint16_t PF12 = aADCxConvertedData[2];			// BUSVmon -- sending as ENDMON
 800088c:	4b28      	ldr	r3, [pc, #160]	; (8000930 <hk_adc1+0xc4>)
 800088e:	889b      	ldrh	r3, [r3, #4]
 8000890:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = aADCxConvertedData[1];			// BUSImon -- sending as n800vmon
 8000892:	4b27      	ldr	r3, [pc, #156]	; (8000930 <hk_adc1+0xc4>)
 8000894:	885b      	ldrh	r3, [r3, #2]
 8000896:	82bb      	strh	r3, [r7, #20]
	uint16_t PC5 = aADCxConvertedData[4];			// 2v5mon -- verified sending as TMP1 too
 8000898:	4b25      	ldr	r3, [pc, #148]	; (8000930 <hk_adc1+0xc4>)
 800089a:	891b      	ldrh	r3, [r3, #8]
 800089c:	827b      	strh	r3, [r7, #18]
	uint16_t PB0 = aADCxConvertedData[5];			// 3v3mon -- verified sending as TMP2 too
 800089e:	4b24      	ldr	r3, [pc, #144]	; (8000930 <hk_adc1+0xc4>)
 80008a0:	895b      	ldrh	r3, [r3, #10]
 80008a2:	823b      	strh	r3, [r7, #16]
	uint16_t PC0 = aADCxConvertedData[6];			// 5vmon -- verified
 80008a4:	4b22      	ldr	r3, [pc, #136]	; (8000930 <hk_adc1+0xc4>)
 80008a6:	899b      	ldrh	r3, [r3, #12]
 80008a8:	81fb      	strh	r3, [r7, #14]
	uint16_t PC1 = aADCxConvertedData[7];			// n3v3mon -- verified sending as SWPMon too
 80008aa:	4b21      	ldr	r3, [pc, #132]	; (8000930 <hk_adc1+0xc4>)
 80008ac:	89db      	ldrh	r3, [r3, #14]
 80008ae:	81bb      	strh	r3, [r7, #12]
	uint16_t PA2 = aADCxConvertedData[8];			// n5vmon -- verified
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <hk_adc1+0xc4>)
 80008b2:	8a1b      	ldrh	r3, [r3, #16]
 80008b4:	817b      	strh	r3, [r7, #10]
	uint16_t PA3 = aADCxConvertedData[9];			// 15vmon -- verified
 80008b6:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <hk_adc1+0xc4>)
 80008b8:	8a5b      	ldrh	r3, [r3, #18]
 80008ba:	813b      	strh	r3, [r7, #8]
	uint16_t PA0 = aADCxConvertedData[10];			// 5vrefmon -- verified
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <hk_adc1+0xc4>)
 80008be:	8a9b      	ldrh	r3, [r3, #20]
 80008c0:	80fb      	strh	r3, [r7, #6]
	uint16_t PA1 = aADCxConvertedData[11];			// n200vmon -- verified
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <hk_adc1+0xc4>)
 80008c4:	8adb      	ldrh	r3, [r3, #22]
 80008c6:	80bb      	strh	r3, [r7, #4]

	uint16_t* results = malloc(10 * sizeof(uint16_t));
 80008c8:	2014      	movs	r0, #20
 80008ca:	f00f fb5f 	bl	800ff8c <malloc>
 80008ce:	4603      	mov	r3, r0
 80008d0:	603b      	str	r3, [r7, #0]
	results[0] = PF12;
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	8afa      	ldrh	r2, [r7, #22]
 80008d6:	801a      	strh	r2, [r3, #0]
	results[1] = PA7;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	3302      	adds	r3, #2
 80008dc:	8aba      	ldrh	r2, [r7, #20]
 80008de:	801a      	strh	r2, [r3, #0]
	results[2] = PC5;
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	3304      	adds	r3, #4
 80008e4:	8a7a      	ldrh	r2, [r7, #18]
 80008e6:	801a      	strh	r2, [r3, #0]
	results[3] = PB0;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	3306      	adds	r3, #6
 80008ec:	8a3a      	ldrh	r2, [r7, #16]
 80008ee:	801a      	strh	r2, [r3, #0]
	results[4] = PC0;
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	3308      	adds	r3, #8
 80008f4:	89fa      	ldrh	r2, [r7, #14]
 80008f6:	801a      	strh	r2, [r3, #0]
	results[5] = PC1;
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	330a      	adds	r3, #10
 80008fc:	89ba      	ldrh	r2, [r7, #12]
 80008fe:	801a      	strh	r2, [r3, #0]
	results[6] = PA2;
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	330c      	adds	r3, #12
 8000904:	897a      	ldrh	r2, [r7, #10]
 8000906:	801a      	strh	r2, [r3, #0]
	results[7] = PA3;
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	330e      	adds	r3, #14
 800090c:	893a      	ldrh	r2, [r7, #8]
 800090e:	801a      	strh	r2, [r3, #0]
	results[8] = PA0;
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	3310      	adds	r3, #16
 8000914:	88fa      	ldrh	r2, [r7, #6]
 8000916:	801a      	strh	r2, [r3, #0]
	results[9] = PA1;
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	3312      	adds	r3, #18
 800091c:	88ba      	ldrh	r2, [r7, #4]
 800091e:	801a      	strh	r2, [r3, #0]

	return results;
 8000920:	683b      	ldr	r3, [r7, #0]

}
 8000922:	4618      	mov	r0, r3
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	240000bc 	.word	0x240000bc
 8000930:	24000580 	.word	0x24000580

08000934 <hk_adc3>:

uint16_t* hk_adc3() {
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
	ALIGN_32BYTES (static uint16_t   adc_data[ADC_CONVERTED_DATA_BUFFER_SIZE]);

	HAL_ADC_Stop_DMA(&hadc3);
 800093a:	4815      	ldr	r0, [pc, #84]	; (8000990 <hk_adc3+0x5c>)
 800093c:	f002 fd8c 	bl	8003458 <HAL_ADC_Stop_DMA>
	if (HAL_ADC_Start_DMA(&hadc3,
 8000940:	2220      	movs	r2, #32
 8000942:	4914      	ldr	r1, [pc, #80]	; (8000994 <hk_adc3+0x60>)
 8000944:	4812      	ldr	r0, [pc, #72]	; (8000990 <hk_adc3+0x5c>)
 8000946:	f002 fcc3 	bl	80032d0 <HAL_ADC_Start_DMA>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <hk_adc3+0x20>
			(uint32_t *)adc_data,
			ADC_CONVERTED_DATA_BUFFER_SIZE)
			!= HAL_OK) {
		Error_Handler();
 8000950:	f001 faca 	bl	8001ee8 <Error_Handler>
	}

	uint16_t vrefint = aADC3ConvertedData[1];
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <hk_adc3+0x64>)
 8000956:	885b      	ldrh	r3, [r3, #2]
 8000958:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = aADC3ConvertedData[2];
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <hk_adc3+0x64>)
 800095c:	889b      	ldrh	r3, [r3, #4]
 800095e:	81bb      	strh	r3, [r7, #12]
	uint16_t PF9 = aADC3ConvertedData[0];
 8000960:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <hk_adc3+0x64>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	817b      	strh	r3, [r7, #10]

	uint16_t* results = malloc(3 * sizeof(uint16_t));
 8000966:	2006      	movs	r0, #6
 8000968:	f00f fb10 	bl	800ff8c <malloc>
 800096c:	4603      	mov	r3, r0
 800096e:	607b      	str	r3, [r7, #4]
	results[0] = vrefint;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	89fa      	ldrh	r2, [r7, #14]
 8000974:	801a      	strh	r2, [r3, #0]
	results[1] = vsense;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3302      	adds	r3, #2
 800097a:	89ba      	ldrh	r2, [r7, #12]
 800097c:	801a      	strh	r2, [r3, #0]
	results[2] = PF9;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3304      	adds	r3, #4
 8000982:	897a      	ldrh	r2, [r7, #10]
 8000984:	801a      	strh	r2, [r3, #0]

	return results;
 8000986:	687b      	ldr	r3, [r7, #4]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	24000120 	.word	0x24000120
 8000994:	24000620 	.word	0x24000620
 8000998:	240005c0 	.word	0x240005c0

0800099c <send_erpa_packet>:
 *
 * @param erpa_spi erpa spi raw value
 * @param erpa_adc_results erpa adc results
 */
void send_erpa_packet(uint8_t* erpa_spi, uint16_t *erpa_adc_results)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
	uint8_t erpa_buf[14];
	erpa_buf[0] = erpa_sync;                  						// ERPA SYNC 0xAA MSB
 80009a6:	23aa      	movs	r3, #170	; 0xaa
 80009a8:	723b      	strb	r3, [r7, #8]
	erpa_buf[1] = erpa_sync;                  						// ERPA SYNC 0xAA LSB
 80009aa:	23aa      	movs	r3, #170	; 0xaa
 80009ac:	727b      	strb	r3, [r7, #9]
	erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 						// ERPA SEQ # MSB
 80009ae:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <send_erpa_packet+0xb0>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	0a1b      	lsrs	r3, r3, #8
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	72bb      	strb	r3, [r7, #10]
	erpa_buf[3] = (erpa_seq & 0xFF);          						// ERPA SEQ # MSB
 80009ba:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <send_erpa_packet+0xb0>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	72fb      	strb	r3, [r7, #11]
	erpa_buf[4] = ((erpa_adc_results[0] & 0xFF00) >> 8); 	  		// ENDmon MSB
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	0a1b      	lsrs	r3, r3, #8
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	733b      	strb	r3, [r7, #12]
	erpa_buf[5] = (erpa_adc_results[0] & 0xFF);               		// ENDmon LSB
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	737b      	strb	r3, [r7, #13]
	erpa_buf[6] = ((erpa_adc_results[1] & 0xFF00) >> 8);      		// SWP Monitored MSB
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	3302      	adds	r3, #2
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	0a1b      	lsrs	r3, r3, #8
 80009de:	b29b      	uxth	r3, r3
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	73bb      	strb	r3, [r7, #14]
	erpa_buf[7] = (erpa_adc_results[1] & 0xFF);               		// SWP Monitored LSB
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	3302      	adds	r3, #2
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	73fb      	strb	r3, [r7, #15]
	erpa_buf[8] = ((erpa_adc_results[2] & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	3304      	adds	r3, #4
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	0a1b      	lsrs	r3, r3, #8
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	743b      	strb	r3, [r7, #16]
	erpa_buf[9] = (erpa_adc_results[2] & 0xFF);               		// TEMPURATURE 1 LSB
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	3304      	adds	r3, #4
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	747b      	strb	r3, [r7, #17]
	erpa_buf[10] = ((erpa_adc_results[3] & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	3306      	adds	r3, #6
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	0a1b      	lsrs	r3, r3, #8
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	74bb      	strb	r3, [r7, #18]
	erpa_buf[11] = (erpa_adc_results[3] & 0xFF);                    // TEMPURATURE 2 LSB
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	3306      	adds	r3, #6
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	74fb      	strb	r3, [r7, #19]
	erpa_buf[12] = erpa_spi[0];									// ERPA eADC MSB
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	753b      	strb	r3, [r7, #20]
	erpa_buf[13] = erpa_spi[1];									// ERPA eADC LSB
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	785b      	ldrb	r3, [r3, #1]
 8000a28:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 8000a2a:	f107 0108 	add.w	r1, r7, #8
 8000a2e:	2364      	movs	r3, #100	; 0x64
 8000a30:	220e      	movs	r2, #14
 8000a32:	4807      	ldr	r0, [pc, #28]	; (8000a50 <send_erpa_packet+0xb4>)
 8000a34:	f00c feb8 	bl	800d7a8 <HAL_UART_Transmit>
	erpa_seq++;
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <send_erpa_packet+0xb0>)
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	4b02      	ldr	r3, [pc, #8]	; (8000a4c <send_erpa_packet+0xb0>)
 8000a42:	801a      	strh	r2, [r3, #0]

}
 8000a44:	bf00      	nop
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	24000608 	.word	0x24000608
 8000a50:	2400047c 	.word	0x2400047c

08000a54 <send_hk_packet>:
 *
 * @param i2c_values values of all i2c sensors
 * @param hk_adc_results hk adc results
 */
void send_hk_packet(int16_t *i2c_values, uint16_t *hk_adc1_results, uint16_t *hk_adc3_results)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08e      	sub	sp, #56	; 0x38
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]

	uint8_t hk_buf[38];

	hk_buf[0] = hk_sync;                     		// HK SYNC 0xCC MSB					0 SYNC
 8000a60:	23cc      	movs	r3, #204	; 0xcc
 8000a62:	743b      	strb	r3, [r7, #16]
	hk_buf[1] = hk_sync;                     		// HK SYNC 0xCC LSB
 8000a64:	23cc      	movs	r3, #204	; 0xcc
 8000a66:	747b      	strb	r3, [r7, #17]
	hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    		// HK SEQ # MSB		1 SEQUENCE
 8000a68:	4b7d      	ldr	r3, [pc, #500]	; (8000c60 <send_hk_packet+0x20c>)
 8000a6a:	881b      	ldrh	r3, [r3, #0]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	74bb      	strb	r3, [r7, #18]
	hk_buf[3] = (hk_seq & 0xFF);             		// HK SEQ # LSB
 8000a74:	4b7a      	ldr	r3, [pc, #488]	; (8000c60 <send_hk_packet+0x20c>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	74fb      	strb	r3, [r7, #19]
	hk_buf[4] = ((hk_adc3_results[1] & 0xFF00) >> 8);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3302      	adds	r3, #2
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	0a1b      	lsrs	r3, r3, #8
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	753b      	strb	r3, [r7, #20]
	hk_buf[5] = (hk_adc3_results[1] & 0xFF);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3302      	adds	r3, #2
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	757b      	strb	r3, [r7, #21]
	hk_buf[6] = ((hk_adc3_results[0] & 0xFF00) >> 8);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	0a1b      	lsrs	r3, r3, #8
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	75bb      	strb	r3, [r7, #22]
	hk_buf[7] = (hk_adc3_results[0] & 0xFF);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	881b      	ldrh	r3, [r3, #0]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	75fb      	strb	r3, [r7, #23]
	hk_buf[8] = ((i2c_values[0] & 0xFF00) >> 8);
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aae:	121b      	asrs	r3, r3, #8
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	763b      	strb	r3, [r7, #24]
	hk_buf[9] = (i2c_values[0] & 0xFF);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	767b      	strb	r3, [r7, #25]
	hk_buf[10] = ((i2c_values[1] & 0xFF00) >> 8);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	3302      	adds	r3, #2
 8000ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ac6:	121b      	asrs	r3, r3, #8
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	76bb      	strb	r3, [r7, #26]
	hk_buf[11] = (i2c_values[1] & 0xFF);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	3302      	adds	r3, #2
 8000ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	76fb      	strb	r3, [r7, #27]
	hk_buf[12] = ((i2c_values[2] & 0xFF00) >> 8);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	3304      	adds	r3, #4
 8000adc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ae0:	121b      	asrs	r3, r3, #8
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	773b      	strb	r3, [r7, #28]
	hk_buf[13] = (i2c_values[2] & 0xFF);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	777b      	strb	r3, [r7, #29]
	hk_buf[14] = ((i2c_values[3] & 0xFF00) >> 8);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	3306      	adds	r3, #6
 8000af6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000afa:	121b      	asrs	r3, r3, #8
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	77bb      	strb	r3, [r7, #30]
	hk_buf[15] = (i2c_values[3] & 0xFF);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	3306      	adds	r3, #6
 8000b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	77fb      	strb	r3, [r7, #31]
	hk_buf[16] = ((hk_adc1_results[0] & 0xFF00) >> 8);
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	881b      	ldrh	r3, [r3, #0]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	f887 3020 	strb.w	r3, [r7, #32]
	hk_buf[17] = (hk_adc1_results[0] & 0xFF);
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	hk_buf[18] = ((hk_adc1_results[1] & 0xFF00) >> 8);
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	3302      	adds	r3, #2
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	0a1b      	lsrs	r3, r3, #8
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	hk_buf[19] = (hk_adc1_results[1] & 0xFF);
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	3302      	adds	r3, #2
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	hk_buf[20] = ((hk_adc1_results[2] & 0xFF00) >> 8);
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	3304      	adds	r3, #4
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	0a1b      	lsrs	r3, r3, #8
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hk_buf[21] = (hk_adc1_results[2] & 0xFF);
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	3304      	adds	r3, #4
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hk_buf[22] = ((hk_adc1_results[3] & 0xFF00) >> 8);
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	3306      	adds	r3, #6
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	0a1b      	lsrs	r3, r3, #8
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hk_buf[23] = (hk_adc1_results[3] & 0xFF);
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	3306      	adds	r3, #6
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hk_buf[24] = ((hk_adc1_results[4] & 0xFF00) >> 8);
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	3308      	adds	r3, #8
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	0a1b      	lsrs	r3, r3, #8
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	hk_buf[25] = (hk_adc1_results[4] & 0xFF);
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	3308      	adds	r3, #8
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	hk_buf[26] = ((hk_adc1_results[5] & 0xFF00) >> 8);
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	330a      	adds	r3, #10
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	0a1b      	lsrs	r3, r3, #8
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	hk_buf[27] = (hk_adc1_results[5] & 0xFF);
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	330a      	adds	r3, #10
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	hk_buf[28] = ((hk_adc1_results[6] & 0xFF00) >> 8);
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	330c      	adds	r3, #12
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	0a1b      	lsrs	r3, r3, #8
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	hk_buf[29] = (hk_adc1_results[6] & 0xFF);
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	330c      	adds	r3, #12
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	hk_buf[30] = ((hk_adc1_results[7] & 0xFF00) >> 8);
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	330e      	adds	r3, #14
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	0a1b      	lsrs	r3, r3, #8
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	hk_buf[31] = (hk_adc1_results[7] & 0xFF);
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	330e      	adds	r3, #14
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	hk_buf[32] = ((hk_adc1_results[8] & 0xFF00) >> 8);
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	3310      	adds	r3, #16
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	0a1b      	lsrs	r3, r3, #8
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	hk_buf[33] = (hk_adc1_results[8] & 0xFF);
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	3310      	adds	r3, #16
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	hk_buf[34] = ((hk_adc1_results[9] & 0xFF00) >> 8);
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	3312      	adds	r3, #18
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	0a1b      	lsrs	r3, r3, #8
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	hk_buf[35] = (hk_adc1_results[9] & 0xFF);
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	3312      	adds	r3, #18
 8000c18:	881b      	ldrh	r3, [r3, #0]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	hk_buf[36] = ((hk_adc3_results[2] & 0xFF00) >> 8);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3304      	adds	r3, #4
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	0a1b      	lsrs	r3, r3, #8
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	hk_buf[37] = (hk_adc3_results[2] & 0xFF);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3304      	adds	r3, #4
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000c3c:	f107 0110 	add.w	r1, r7, #16
 8000c40:	2364      	movs	r3, #100	; 0x64
 8000c42:	2226      	movs	r2, #38	; 0x26
 8000c44:	4807      	ldr	r0, [pc, #28]	; (8000c64 <send_hk_packet+0x210>)
 8000c46:	f00c fdaf 	bl	800d7a8 <HAL_UART_Transmit>
	hk_seq++;
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <send_hk_packet+0x20c>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <send_hk_packet+0x20c>)
 8000c54:	801a      	strh	r2, [r3, #0]


}
 8000c56:	bf00      	nop
 8000c58:	3738      	adds	r7, #56	; 0x38
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	24000614 	.word	0x24000614
 8000c64:	2400047c 	.word	0x2400047c

08000c68 <send_pmt_packet>:
 * @brief sends pmt packet via UART
 *
 * @param pmt_spi raw pmt spi value
 */
void send_pmt_packet(uint8_t* pmt_spi)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	pmt_buf[0] = pmt_sync;
 8000c70:	22bb      	movs	r2, #187	; 0xbb
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <send_pmt_packet+0x5c>)
 8000c74:	701a      	strb	r2, [r3, #0]
	pmt_buf[1] = pmt_sync;
 8000c76:	22bb      	movs	r2, #187	; 0xbb
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <send_pmt_packet+0x5c>)
 8000c7a:	705a      	strb	r2, [r3, #1]
	pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <send_pmt_packet+0x60>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <send_pmt_packet+0x5c>)
 8000c88:	709a      	strb	r2, [r3, #2]
	pmt_buf[3] = (pmt_seq & 0xFF);
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <send_pmt_packet+0x60>)
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <send_pmt_packet+0x5c>)
 8000c92:	70da      	strb	r2, [r3, #3]
	pmt_buf[4] = pmt_spi[0];
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	781a      	ldrb	r2, [r3, #0]
 8000c98:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <send_pmt_packet+0x5c>)
 8000c9a:	711a      	strb	r2, [r3, #4]
	pmt_buf[5] = pmt_spi[1];
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	785a      	ldrb	r2, [r3, #1]
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <send_pmt_packet+0x5c>)
 8000ca2:	715a      	strb	r2, [r3, #5]

	HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000ca4:	2364      	movs	r3, #100	; 0x64
 8000ca6:	2206      	movs	r2, #6
 8000ca8:	4906      	ldr	r1, [pc, #24]	; (8000cc4 <send_pmt_packet+0x5c>)
 8000caa:	4808      	ldr	r0, [pc, #32]	; (8000ccc <send_pmt_packet+0x64>)
 8000cac:	f00c fd7c 	bl	800d7a8 <HAL_UART_Transmit>
	pmt_seq++;
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <send_pmt_packet+0x60>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <send_pmt_packet+0x60>)
 8000cba:	801a      	strh	r2, [r3, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	2400060c 	.word	0x2400060c
 8000cc8:	24000612 	.word	0x24000612
 8000ccc:	2400047c 	.word	0x2400047c

08000cd0 <HAL_TIM_OC_DelayElapsedCallback>:


void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b0a7      	sub	sp, #156	; 0x9c
 8000cd4:	af1e      	add	r7, sp, #120	; 0x78
 8000cd6:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a3b      	ldr	r2, [pc, #236]	; (8000dc8 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d14a      	bne.n	8000d76 <HAL_TIM_OC_DelayElapsedCallback+0xa6>
  {
      if (ERPA_ON)
 8000ce0:	4b3a      	ldr	r3, [pc, #232]	; (8000dcc <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d02a      	beq.n	8000d3e <HAL_TIM_OC_DelayElapsedCallback+0x6e>
      {


		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {}
 8000ce8:	bf00      	nop
 8000cea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cee:	4838      	ldr	r0, [pc, #224]	; (8000dd0 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8000cf0:	f006 ff12 	bl	8007b18 <HAL_GPIO_ReadPin>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d1f7      	bne.n	8000cea <HAL_TIM_OC_DelayElapsedCallback+0x1a>

		uint8_t* spi2_results = spi(hspi2);
 8000cfa:	4c36      	ldr	r4, [pc, #216]	; (8000dd4 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8000cfc:	4668      	mov	r0, sp
 8000cfe:	f104 0310 	add.w	r3, r4, #16
 8000d02:	2278      	movs	r2, #120	; 0x78
 8000d04:	4619      	mov	r1, r3
 8000d06:	f00f f951 	bl	800ffac <memcpy>
 8000d0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d0e:	f7ff fd2b 	bl	8000768 <spi>
 8000d12:	61b8      	str	r0, [r7, #24]
        uint16_t *erpa_adc_results = erpa_adc();
 8000d14:	f7ff fd70 	bl	80007f8 <erpa_adc>
 8000d18:	6178      	str	r0, [r7, #20]
		set_erpa_sweep();
 8000d1a:	f7ff fd53 	bl	80007c4 <set_erpa_sweep>

		if (auto_sweep)
 8000d1e:	4b2e      	ldr	r3, [pc, #184]	; (8000dd8 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_TIM_OC_DelayElapsedCallback+0x5a>
		{
		  do_auto_sweep();
 8000d26:	f7ff fcf3 	bl	8000710 <do_auto_sweep>
		}

		send_erpa_packet(spi2_results, erpa_adc_results);
 8000d2a:	6979      	ldr	r1, [r7, #20]
 8000d2c:	69b8      	ldr	r0, [r7, #24]
 8000d2e:	f7ff fe35 	bl	800099c <send_erpa_packet>

		free(spi2_results);
 8000d32:	69b8      	ldr	r0, [r7, #24]
 8000d34:	f00f f932 	bl	800ff9c <free>
		free(erpa_adc_results);
 8000d38:	6978      	ldr	r0, [r7, #20]
 8000d3a:	f00f f92f 	bl	800ff9c <free>
      }
      if (HK_ON)
 8000d3e:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d03b      	beq.n	8000dbe <HAL_TIM_OC_DelayElapsedCallback+0xee>
      {
    	  int16_t *i2c_values = i2c();
 8000d46:	f7ff fcaf 	bl	80006a8 <i2c>
 8000d4a:	6138      	str	r0, [r7, #16]
    	  uint16_t* hk_adc1_results = hk_adc1();
 8000d4c:	f7ff fd8e 	bl	800086c <hk_adc1>
 8000d50:	60f8      	str	r0, [r7, #12]
    	  uint16_t* hk_adc3_results = hk_adc3();
 8000d52:	f7ff fdef 	bl	8000934 <hk_adc3>
 8000d56:	60b8      	str	r0, [r7, #8]


    	  send_hk_packet(i2c_values, hk_adc1_results, hk_adc3_results);
 8000d58:	68ba      	ldr	r2, [r7, #8]
 8000d5a:	68f9      	ldr	r1, [r7, #12]
 8000d5c:	6938      	ldr	r0, [r7, #16]
 8000d5e:	f7ff fe79 	bl	8000a54 <send_hk_packet>


          free(i2c_values);
 8000d62:	6938      	ldr	r0, [r7, #16]
 8000d64:	f00f f91a 	bl	800ff9c <free>
          free(hk_adc1_results);
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f00f f917 	bl	800ff9c <free>
          free(hk_adc3_results);
 8000d6e:	68b8      	ldr	r0, [r7, #8]
 8000d70:	f00f f914 	bl	800ff9c <free>
  		send_pmt_packet(spi1_results);

		free(spi1_results);
      }
  }
}
 8000d74:	e023      	b.n	8000dbe <HAL_TIM_OC_DelayElapsedCallback+0xee>
  else if (htim == &htim1)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a19      	ldr	r2, [pc, #100]	; (8000de0 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d11f      	bne.n	8000dbe <HAL_TIM_OC_DelayElapsedCallback+0xee>
      if (PMT_ON)
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d01b      	beq.n	8000dbe <HAL_TIM_OC_DelayElapsedCallback+0xee>
    	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {}
 8000d86:	bf00      	nop
 8000d88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d8c:	4816      	ldr	r0, [pc, #88]	; (8000de8 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8000d8e:	f006 fec3 	bl	8007b18 <HAL_GPIO_ReadPin>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d1f7      	bne.n	8000d88 <HAL_TIM_OC_DelayElapsedCallback+0xb8>
  		uint8_t* spi1_results = spi(hspi1);
 8000d98:	4c14      	ldr	r4, [pc, #80]	; (8000dec <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8000d9a:	4668      	mov	r0, sp
 8000d9c:	f104 0310 	add.w	r3, r4, #16
 8000da0:	2278      	movs	r2, #120	; 0x78
 8000da2:	4619      	mov	r1, r3
 8000da4:	f00f f902 	bl	800ffac <memcpy>
 8000da8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000dac:	f7ff fcdc 	bl	8000768 <spi>
 8000db0:	61f8      	str	r0, [r7, #28]
  		send_pmt_packet(spi1_results);
 8000db2:	69f8      	ldr	r0, [r7, #28]
 8000db4:	f7ff ff58 	bl	8000c68 <send_pmt_packet>
		free(spi1_results);
 8000db8:	69f8      	ldr	r0, [r7, #28]
 8000dba:	f00f f8ef 	bl	800ff9c <free>
}
 8000dbe:	bf00      	nop
 8000dc0:	3724      	adds	r7, #36	; 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd90      	pop	{r4, r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	24000430 	.word	0x24000430
 8000dcc:	24000617 	.word	0x24000617
 8000dd0:	58020400 	.word	0x58020400
 8000dd4:	2400035c 	.word	0x2400035c
 8000dd8:	24000604 	.word	0x24000604
 8000ddc:	24000618 	.word	0x24000618
 8000de0:	240003e4 	.word	0x240003e4
 8000de4:	24000616 	.word	0x24000616
 8000de8:	58020000 	.word	0x58020000
 8000dec:	240002d4 	.word	0x240002d4

08000df0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]

  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	4998      	ldr	r1, [pc, #608]	; (800105c <HAL_UART_RxCpltCallback+0x26c>)
 8000dfc:	4898      	ldr	r0, [pc, #608]	; (8001060 <HAL_UART_RxCpltCallback+0x270>)
 8000dfe:	f00c fd69 	bl	800d8d4 <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000e02:	4b96      	ldr	r3, [pc, #600]	; (800105c <HAL_UART_RxCpltCallback+0x26c>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	73fb      	strb	r3, [r7, #15]

  switch (key)
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	2b1d      	cmp	r3, #29
 8000e0c:	f200 8121 	bhi.w	8001052 <HAL_UART_RxCpltCallback+0x262>
 8000e10:	a201      	add	r2, pc, #4	; (adr r2, 8000e18 <HAL_UART_RxCpltCallback+0x28>)
 8000e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e16:	bf00      	nop
 8000e18:	08000f1d 	.word	0x08000f1d
 8000e1c:	08000f39 	.word	0x08000f39
 8000e20:	08000f55 	.word	0x08000f55
 8000e24:	08000f75 	.word	0x08000f75
 8000e28:	08000f95 	.word	0x08000f95
 8000e2c:	08000fb1 	.word	0x08000fb1
 8000e30:	08000fd1 	.word	0x08000fd1
 8000e34:	08000ff1 	.word	0x08000ff1
 8000e38:	08000ead 	.word	0x08000ead
 8000e3c:	08000ebb 	.word	0x08000ebb
 8000e40:	08000e9f 	.word	0x08000e9f
 8000e44:	08000e91 	.word	0x08000e91
 8000e48:	0800100d 	.word	0x0800100d
 8000e4c:	0800101d 	.word	0x0800101d
 8000e50:	0800102d 	.word	0x0800102d
 8000e54:	0800103d 	.word	0x0800103d
 8000e58:	08001025 	.word	0x08001025
 8000e5c:	08001035 	.word	0x08001035
 8000e60:	08001045 	.word	0x08001045
 8000e64:	08000f2b 	.word	0x08000f2b
 8000e68:	08000f47 	.word	0x08000f47
 8000e6c:	08000f65 	.word	0x08000f65
 8000e70:	08000f85 	.word	0x08000f85
 8000e74:	08000fa3 	.word	0x08000fa3
 8000e78:	08000fc1 	.word	0x08000fc1
 8000e7c:	08000fe1 	.word	0x08000fe1
 8000e80:	08000fff 	.word	0x08000fff
 8000e84:	08000ec9 	.word	0x08000ec9
 8000e88:	08000ee1 	.word	0x08000ee1
 8000e8c:	08000ef9 	.word	0x08000ef9
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000e90:	4b74      	ldr	r3, [pc, #464]	; (8001064 <HAL_UART_RxCpltCallback+0x274>)
 8000e92:	2140      	movs	r1, #64	; 0x40
 8000e94:	2201      	movs	r2, #1
 8000e96:	4618      	mov	r0, r3
 8000e98:	f006 fe56 	bl	8007b48 <HAL_GPIO_WritePin>
    break;
 8000e9c:	e0d9      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000e9e:	4b71      	ldr	r3, [pc, #452]	; (8001064 <HAL_UART_RxCpltCallback+0x274>)
 8000ea0:	2140      	movs	r1, #64	; 0x40
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f006 fe4f 	bl	8007b48 <HAL_GPIO_WritePin>
    break;
 8000eaa:	e0d2      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
  }

  case 0x08:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 8000eac:	4b6d      	ldr	r3, [pc, #436]	; (8001064 <HAL_UART_RxCpltCallback+0x274>)
 8000eae:	2180      	movs	r1, #128	; 0x80
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f006 fe48 	bl	8007b48 <HAL_GPIO_WritePin>
    break;
 8000eb8:	e0cb      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x09:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 8000eba:	4b6a      	ldr	r3, [pc, #424]	; (8001064 <HAL_UART_RxCpltCallback+0x274>)
 8000ebc:	2180      	movs	r1, #128	; 0x80
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f006 fe41 	bl	8007b48 <HAL_GPIO_WritePin>
    break;
 8000ec6:	e0c4      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x1B:
  {
    if (step < 7)
 8000ec8:	4b67      	ldr	r3, [pc, #412]	; (8001068 <HAL_UART_RxCpltCallback+0x278>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b06      	cmp	r3, #6
 8000ece:	f200 80bd 	bhi.w	800104c <HAL_UART_RxCpltCallback+0x25c>
    {
      step++;
 8000ed2:	4b65      	ldr	r3, [pc, #404]	; (8001068 <HAL_UART_RxCpltCallback+0x278>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b63      	ldr	r3, [pc, #396]	; (8001068 <HAL_UART_RxCpltCallback+0x278>)
 8000edc:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000ede:	e0b5      	b.n	800104c <HAL_UART_RxCpltCallback+0x25c>
  }
  case 0x1C:
  {
    if (step > 0)
 8000ee0:	4b61      	ldr	r3, [pc, #388]	; (8001068 <HAL_UART_RxCpltCallback+0x278>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f000 80b3 	beq.w	8001050 <HAL_UART_RxCpltCallback+0x260>
    {
      step--;
 8000eea:	4b5f      	ldr	r3, [pc, #380]	; (8001068 <HAL_UART_RxCpltCallback+0x278>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4b5d      	ldr	r3, [pc, #372]	; (8001068 <HAL_UART_RxCpltCallback+0x278>)
 8000ef4:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000ef6:	e0ab      	b.n	8001050 <HAL_UART_RxCpltCallback+0x260>
  }
  case 0x1D: {
	if (!auto_sweep) {
 8000ef8:	4b5c      	ldr	r3, [pc, #368]	; (800106c <HAL_UART_RxCpltCallback+0x27c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d106      	bne.n	8000f0e <HAL_UART_RxCpltCallback+0x11e>
		auto_sweep = 1;
 8000f00:	4b5a      	ldr	r3, [pc, #360]	; (800106c <HAL_UART_RxCpltCallback+0x27c>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	601a      	str	r2, [r3, #0]
		step = 0;
 8000f06:	4b58      	ldr	r3, [pc, #352]	; (8001068 <HAL_UART_RxCpltCallback+0x278>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
	} else {
		auto_sweep = 0;
		step = 0;
	}
  	break;
 8000f0c:	e0a1      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
		auto_sweep = 0;
 8000f0e:	4b57      	ldr	r3, [pc, #348]	; (800106c <HAL_UART_RxCpltCallback+0x27c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
		step = 0;
 8000f14:	4b54      	ldr	r3, [pc, #336]	; (8001068 <HAL_UART_RxCpltCallback+0x278>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
  	break;
 8000f1a:	e09a      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
   }
  case 0x00:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000f1c:	4b54      	ldr	r3, [pc, #336]	; (8001070 <HAL_UART_RxCpltCallback+0x280>)
 8000f1e:	2120      	movs	r1, #32
 8000f20:	2201      	movs	r2, #1
 8000f22:	4618      	mov	r0, r3
 8000f24:	f006 fe10 	bl	8007b48 <HAL_GPIO_WritePin>
    break;
 8000f28:	e093      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x13:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000f2a:	4b51      	ldr	r3, [pc, #324]	; (8001070 <HAL_UART_RxCpltCallback+0x280>)
 8000f2c:	2120      	movs	r1, #32
 8000f2e:	2200      	movs	r2, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f006 fe09 	bl	8007b48 <HAL_GPIO_WritePin>
    break;
 8000f36:	e08c      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x01:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000f38:	4b4d      	ldr	r3, [pc, #308]	; (8001070 <HAL_UART_RxCpltCallback+0x280>)
 8000f3a:	2140      	movs	r1, #64	; 0x40
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f006 fe02 	bl	8007b48 <HAL_GPIO_WritePin>
    break;
 8000f44:	e085      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000f46:	4b4a      	ldr	r3, [pc, #296]	; (8001070 <HAL_UART_RxCpltCallback+0x280>)
 8000f48:	2140      	movs	r1, #64	; 0x40
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f006 fdfb 	bl	8007b48 <HAL_GPIO_WritePin>
    break;
 8000f52:	e07e      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000f54:	4b47      	ldr	r3, [pc, #284]	; (8001074 <HAL_UART_RxCpltCallback+0x284>)
 8000f56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f006 fdf3 	bl	8007b48 <HAL_GPIO_WritePin>
    break;
 8000f62:	e076      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000f64:	4b43      	ldr	r3, [pc, #268]	; (8001074 <HAL_UART_RxCpltCallback+0x284>)
 8000f66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f006 fdeb 	bl	8007b48 <HAL_GPIO_WritePin>
    break;
 8000f72:	e06e      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000f74:	4b3f      	ldr	r3, [pc, #252]	; (8001074 <HAL_UART_RxCpltCallback+0x284>)
 8000f76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f006 fde3 	bl	8007b48 <HAL_GPIO_WritePin>
    break;
 8000f82:	e066      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000f84:	4b3b      	ldr	r3, [pc, #236]	; (8001074 <HAL_UART_RxCpltCallback+0x284>)
 8000f86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f006 fddb 	bl	8007b48 <HAL_GPIO_WritePin>
    break;
 8000f92:	e05e      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000f94:	4b37      	ldr	r3, [pc, #220]	; (8001074 <HAL_UART_RxCpltCallback+0x284>)
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f006 fdd4 	bl	8007b48 <HAL_GPIO_WritePin>
    break;
 8000fa0:	e057      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000fa2:	4b34      	ldr	r3, [pc, #208]	; (8001074 <HAL_UART_RxCpltCallback+0x284>)
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f006 fdcd 	bl	8007b48 <HAL_GPIO_WritePin>
    break;
 8000fae:	e050      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000fb0:	4b30      	ldr	r3, [pc, #192]	; (8001074 <HAL_UART_RxCpltCallback+0x284>)
 8000fb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f006 fdc5 	bl	8007b48 <HAL_GPIO_WritePin>
    break;
 8000fbe:	e048      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000fc0:	4b2c      	ldr	r3, [pc, #176]	; (8001074 <HAL_UART_RxCpltCallback+0x284>)
 8000fc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f006 fdbd 	bl	8007b48 <HAL_GPIO_WritePin>
    break;
 8000fce:	e040      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000fd0:	4b28      	ldr	r3, [pc, #160]	; (8001074 <HAL_UART_RxCpltCallback+0x284>)
 8000fd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f006 fdb5 	bl	8007b48 <HAL_GPIO_WritePin>
    break;
 8000fde:	e038      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000fe0:	4b24      	ldr	r3, [pc, #144]	; (8001074 <HAL_UART_RxCpltCallback+0x284>)
 8000fe2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f006 fdad 	bl	8007b48 <HAL_GPIO_WritePin>
    break;
 8000fee:	e030      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000ff0:	4b20      	ldr	r3, [pc, #128]	; (8001074 <HAL_UART_RxCpltCallback+0x284>)
 8000ff2:	2140      	movs	r1, #64	; 0x40
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f006 fda6 	bl	8007b48 <HAL_GPIO_WritePin>
    break;
 8000ffc:	e029      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <HAL_UART_RxCpltCallback+0x284>)
 8001000:	2140      	movs	r1, #64	; 0x40
 8001002:	2200      	movs	r2, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f006 fd9f 	bl	8007b48 <HAL_GPIO_WritePin>
    break;
 800100a:	e022      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0C:
  {
      HAL_SuspendTick();
 800100c:	f001 fd6a 	bl	8002ae4 <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001010:	2101      	movs	r1, #1
 8001012:	2001      	movs	r0, #1
 8001014:	f007 fb3c 	bl	8008690 <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8001018:	f7ff fae0 	bl	80005dc <__NVIC_SystemReset>
      break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <HAL_UART_RxCpltCallback+0x288>)
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
    break;
 8001022:	e016      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x10:
  {
    PMT_ON = 0;
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <HAL_UART_RxCpltCallback+0x288>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
    break;
 800102a:	e012      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <HAL_UART_RxCpltCallback+0x28c>)
 800102e:	2201      	movs	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]
    break;
 8001032:	e00e      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_UART_RxCpltCallback+0x28c>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
    break;
 800103a:	e00a      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0F:
  {
    HK_ON = 1;
 800103c:	4b10      	ldr	r3, [pc, #64]	; (8001080 <HAL_UART_RxCpltCallback+0x290>)
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]
    break;
 8001042:	e006      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x12:
  {
    HK_ON = 0;
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_UART_RxCpltCallback+0x290>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
    break;
 800104a:	e002      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
    break;
 800104c:	bf00      	nop
 800104e:	e000      	b.n	8001052 <HAL_UART_RxCpltCallback+0x262>
    break;
 8001050:	bf00      	nop
  }
  }
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2400050c 	.word	0x2400050c
 8001060:	2400047c 	.word	0x2400047c
 8001064:	58021400 	.word	0x58021400
 8001068:	24000600 	.word	0x24000600
 800106c:	24000604 	.word	0x24000604
 8001070:	58020400 	.word	0x58020400
 8001074:	58020800 	.word	0x58020800
 8001078:	24000616 	.word	0x24000616
 800107c:	24000617 	.word	0x24000617
 8001080:	24000618 	.word	0x24000618

08001084 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001088:	f001 fc76 	bl	8002978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108c:	f000 f87e 	bl	800118c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001090:	f000 f902 	bl	8001298 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001094:	f000 fd90 	bl	8001bb8 <MX_GPIO_Init>
  MX_DAC1_Init();
 8001098:	f000 fb04 	bl	80016a4 <MX_DAC1_Init>
  MX_TIM1_Init();
 800109c:	f000 fc2e 	bl	80018fc <MX_TIM1_Init>
  MX_TIM2_Init();
 80010a0:	f000 fcbc 	bl	8001a1c <MX_TIM2_Init>
  MX_I2C1_Init();
 80010a4:	f000 fb3a 	bl	800171c <MX_I2C1_Init>
  MX_SPI1_Init();
 80010a8:	f000 fb78 	bl	800179c <MX_SPI1_Init>
  MX_DMA_Init();
 80010ac:	f000 fd5c 	bl	8001b68 <MX_DMA_Init>
  MX_ADC1_Init();
 80010b0:	f000 f920 	bl	80012f4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80010b4:	f000 fd0c 	bl	8001ad0 <MX_USART1_UART_Init>
  MX_ADC3_Init();
 80010b8:	f000 fa70 	bl	800159c <MX_ADC3_Init>
  MX_SPI2_Init();
 80010bc:	f000 fbc6 	bl	800184c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */



  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 80010c0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80010c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80010c8:	4829      	ldr	r0, [pc, #164]	; (8001170 <main+0xec>)
 80010ca:	f003 f91f 	bl	800430c <HAL_ADCEx_Calibration_Start>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <main+0x54>
  {
    /* Calibration Error */
    Error_Handler();
 80010d4:	f000 ff08 	bl	8001ee8 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 80010d8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80010dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80010e0:	4824      	ldr	r0, [pc, #144]	; (8001174 <main+0xf0>)
 80010e2:	f003 f913 	bl	800430c <HAL_ADCEx_Calibration_Start>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <main+0x6c>
  {
	/* Calibration Error */
	Error_Handler();
 80010ec:	f000 fefc 	bl	8001ee8 <Error_Handler>
  }


  /* Start Timers with OC & Interrupt */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80010f0:	2100      	movs	r1, #0
 80010f2:	4821      	ldr	r0, [pc, #132]	; (8001178 <main+0xf4>)
 80010f4:	f00b fa3c 	bl	800c570 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 80010f8:	210c      	movs	r1, #12
 80010fa:	4820      	ldr	r0, [pc, #128]	; (800117c <main+0xf8>)
 80010fc:	f00b fa38 	bl	800c570 <HAL_TIM_OC_Start_IT>

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8001100:	bf00      	nop
 8001102:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <main+0xfc>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	69db      	ldr	r3, [r3, #28]
 8001108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001110:	d0f7      	beq.n	8001102 <main+0x7e>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8001112:	bf00      	nop
 8001114:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <main+0xfc>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800111e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001122:	d1f7      	bne.n	8001114 <main+0x90>

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <main+0x100>)
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <main+0x100>)
 800112c:	2210      	movs	r2, #16
 800112e:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x5B; // send "["
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <main+0x100>)
 8001132:	225b      	movs	r2, #91	; 0x5b
 8001134:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <main+0x100>)
 8001138:	e893 0006 	ldmia.w	r3, {r1, r2}
 800113c:	4810      	ldr	r0, [pc, #64]	; (8001180 <main+0xfc>)
 800113e:	f00e fd47 	bl	800fbd0 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <main+0xc8>
      Error_Handler();
 8001148:	f000 fece 	bl	8001ee8 <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <main+0xfc>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <main+0xfc>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800115a:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 800115c:	4808      	ldr	r0, [pc, #32]	; (8001180 <main+0xfc>)
 800115e:	f00e fd92 	bl	800fc86 <HAL_UARTEx_EnableStopMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8001162:	2201      	movs	r2, #1
 8001164:	4908      	ldr	r1, [pc, #32]	; (8001188 <main+0x104>)
 8001166:	4806      	ldr	r0, [pc, #24]	; (8001180 <main+0xfc>)
 8001168:	f00c fbb4 	bl	800d8d4 <HAL_UART_Receive_IT>
 800116c:	e7f9      	b.n	8001162 <main+0xde>
 800116e:	bf00      	nop
 8001170:	240000bc 	.word	0x240000bc
 8001174:	24000120 	.word	0x24000120
 8001178:	240003e4 	.word	0x240003e4
 800117c:	24000430 	.word	0x24000430
 8001180:	2400047c 	.word	0x2400047c
 8001184:	24000570 	.word	0x24000570
 8001188:	2400050c 	.word	0x2400050c

0800118c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b09c      	sub	sp, #112	; 0x70
 8001190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	224c      	movs	r2, #76	; 0x4c
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f00e ff14 	bl	800ffc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2220      	movs	r2, #32
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f00e ff0e 	bl	800ffc8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011ac:	2002      	movs	r0, #2
 80011ae:	f007 faab 	bl	8008708 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011b2:	2300      	movs	r3, #0
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4b35      	ldr	r3, [pc, #212]	; (800128c <SystemClock_Config+0x100>)
 80011b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ba:	4a34      	ldr	r2, [pc, #208]	; (800128c <SystemClock_Config+0x100>)
 80011bc:	f023 0301 	bic.w	r3, r3, #1
 80011c0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80011c2:	4b32      	ldr	r3, [pc, #200]	; (800128c <SystemClock_Config+0x100>)
 80011c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	4b30      	ldr	r3, [pc, #192]	; (8001290 <SystemClock_Config+0x104>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011d4:	4a2e      	ldr	r2, [pc, #184]	; (8001290 <SystemClock_Config+0x104>)
 80011d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b2c      	ldr	r3, [pc, #176]	; (8001290 <SystemClock_Config+0x104>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011e8:	bf00      	nop
 80011ea:	4b29      	ldr	r3, [pc, #164]	; (8001290 <SystemClock_Config+0x104>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011f6:	d1f8      	bne.n	80011ea <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80011f8:	4b26      	ldr	r3, [pc, #152]	; (8001294 <SystemClock_Config+0x108>)
 80011fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fc:	4a25      	ldr	r2, [pc, #148]	; (8001294 <SystemClock_Config+0x108>)
 80011fe:	f023 0303 	bic.w	r3, r3, #3
 8001202:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001204:	2302      	movs	r3, #2
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001208:	2301      	movs	r3, #1
 800120a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800120c:	2340      	movs	r3, #64	; 0x40
 800120e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001210:	2302      	movs	r3, #2
 8001212:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001214:	2300      	movs	r3, #0
 8001216:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001218:	2304      	movs	r3, #4
 800121a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800121c:	230c      	movs	r3, #12
 800121e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001220:	2302      	movs	r3, #2
 8001222:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001224:	2302      	movs	r3, #2
 8001226:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001228:	2302      	movs	r3, #2
 800122a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800122c:	230c      	movs	r3, #12
 800122e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001230:	2300      	movs	r3, #0
 8001232:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123c:	4618      	mov	r0, r3
 800123e:	f007 fa9d 	bl	800877c <HAL_RCC_OscConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001248:	f000 fe4e 	bl	8001ee8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124c:	233f      	movs	r3, #63	; 0x3f
 800124e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001250:	2303      	movs	r3, #3
 8001252:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8001254:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001258:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	2101      	movs	r1, #1
 8001272:	4618      	mov	r0, r3
 8001274:	f007 feb0 	bl	8008fd8 <HAL_RCC_ClockConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800127e:	f000 fe33 	bl	8001ee8 <Error_Handler>
  }
}
 8001282:	bf00      	nop
 8001284:	3770      	adds	r7, #112	; 0x70
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	58000400 	.word	0x58000400
 8001290:	58024800 	.word	0x58024800
 8001294:	58024400 	.word	0x58024400

08001298 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b0b0      	sub	sp, #192	; 0xc0
 800129c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	22bc      	movs	r2, #188	; 0xbc
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f00e fe8f 	bl	800ffc8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80012ae:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80012b0:	2304      	movs	r3, #4
 80012b2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 80012b4:	2309      	movs	r3, #9
 80012b6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 80012b8:	2304      	movs	r3, #4
 80012ba:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80012bc:	2302      	movs	r3, #2
 80012be:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012c0:	2302      	movs	r3, #2
 80012c2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80012c4:	23c0      	movs	r3, #192	; 0xc0
 80012c6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80012c8:	2320      	movs	r3, #32
 80012ca:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80012cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80012d2:	2300      	movs	r3, #0
 80012d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	4618      	mov	r0, r3
 80012dc:	f008 fa08 	bl	80096f0 <HAL_RCCEx_PeriphCLKConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 80012e6:	f000 fdff 	bl	8001ee8 <Error_Handler>
  }
}
 80012ea:	bf00      	nop
 80012ec:	37c0      	adds	r7, #192	; 0xc0
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012fa:	f107 031c 	add.w	r3, r7, #28
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001306:	463b      	mov	r3, r7
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
 8001314:	615a      	str	r2, [r3, #20]
 8001316:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001318:	4b90      	ldr	r3, [pc, #576]	; (800155c <MX_ADC1_Init+0x268>)
 800131a:	4a91      	ldr	r2, [pc, #580]	; (8001560 <MX_ADC1_Init+0x26c>)
 800131c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800131e:	4b8f      	ldr	r3, [pc, #572]	; (800155c <MX_ADC1_Init+0x268>)
 8001320:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001324:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001326:	4b8d      	ldr	r3, [pc, #564]	; (800155c <MX_ADC1_Init+0x268>)
 8001328:	2208      	movs	r2, #8
 800132a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800132c:	4b8b      	ldr	r3, [pc, #556]	; (800155c <MX_ADC1_Init+0x268>)
 800132e:	2201      	movs	r2, #1
 8001330:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001332:	4b8a      	ldr	r3, [pc, #552]	; (800155c <MX_ADC1_Init+0x268>)
 8001334:	2204      	movs	r2, #4
 8001336:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001338:	4b88      	ldr	r3, [pc, #544]	; (800155c <MX_ADC1_Init+0x268>)
 800133a:	2200      	movs	r2, #0
 800133c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800133e:	4b87      	ldr	r3, [pc, #540]	; (800155c <MX_ADC1_Init+0x268>)
 8001340:	2201      	movs	r2, #1
 8001342:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 14;
 8001344:	4b85      	ldr	r3, [pc, #532]	; (800155c <MX_ADC1_Init+0x268>)
 8001346:	220e      	movs	r2, #14
 8001348:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800134a:	4b84      	ldr	r3, [pc, #528]	; (800155c <MX_ADC1_Init+0x268>)
 800134c:	2200      	movs	r2, #0
 800134e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001350:	4b82      	ldr	r3, [pc, #520]	; (800155c <MX_ADC1_Init+0x268>)
 8001352:	2200      	movs	r2, #0
 8001354:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001356:	4b81      	ldr	r3, [pc, #516]	; (800155c <MX_ADC1_Init+0x268>)
 8001358:	2200      	movs	r2, #0
 800135a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800135c:	4b7f      	ldr	r3, [pc, #508]	; (800155c <MX_ADC1_Init+0x268>)
 800135e:	2203      	movs	r2, #3
 8001360:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001362:	4b7e      	ldr	r3, [pc, #504]	; (800155c <MX_ADC1_Init+0x268>)
 8001364:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001368:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800136a:	4b7c      	ldr	r3, [pc, #496]	; (800155c <MX_ADC1_Init+0x268>)
 800136c:	2200      	movs	r2, #0
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001370:	4b7a      	ldr	r3, [pc, #488]	; (800155c <MX_ADC1_Init+0x268>)
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001378:	4878      	ldr	r0, [pc, #480]	; (800155c <MX_ADC1_Init+0x268>)
 800137a:	f001 fe07 	bl	8002f8c <HAL_ADC_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001384:	f000 fdb0 	bl	8001ee8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	4872      	ldr	r0, [pc, #456]	; (800155c <MX_ADC1_Init+0x268>)
 8001394:	f003 f81e 	bl	80043d4 <HAL_ADCEx_MultiModeConfigChannel>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800139e:	f000 fda3 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80013a2:	4b70      	ldr	r3, [pc, #448]	; (8001564 <MX_ADC1_Init+0x270>)
 80013a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013a6:	2306      	movs	r3, #6
 80013a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80013aa:	2307      	movs	r3, #7
 80013ac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80013b2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013b4:	2304      	movs	r3, #4
 80013b6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	4619      	mov	r1, r3
 80013c4:	4865      	ldr	r0, [pc, #404]	; (800155c <MX_ADC1_Init+0x268>)
 80013c6:	f002 f8b3 	bl	8003530 <HAL_ADC_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80013d0:	f000 fd8a 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013d4:	4b64      	ldr	r3, [pc, #400]	; (8001568 <MX_ADC1_Init+0x274>)
 80013d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013d8:	230c      	movs	r3, #12
 80013da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013dc:	463b      	mov	r3, r7
 80013de:	4619      	mov	r1, r3
 80013e0:	485e      	ldr	r0, [pc, #376]	; (800155c <MX_ADC1_Init+0x268>)
 80013e2:	f002 f8a5 	bl	8003530 <HAL_ADC_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80013ec:	f000 fd7c 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013f0:	4b5e      	ldr	r3, [pc, #376]	; (800156c <MX_ADC1_Init+0x278>)
 80013f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013f4:	2312      	movs	r3, #18
 80013f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f8:	463b      	mov	r3, r7
 80013fa:	4619      	mov	r1, r3
 80013fc:	4857      	ldr	r0, [pc, #348]	; (800155c <MX_ADC1_Init+0x268>)
 80013fe:	f002 f897 	bl	8003530 <HAL_ADC_ConfigChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001408:	f000 fd6e 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800140c:	4b58      	ldr	r3, [pc, #352]	; (8001570 <MX_ADC1_Init+0x27c>)
 800140e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001410:	2318      	movs	r3, #24
 8001412:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001414:	463b      	mov	r3, r7
 8001416:	4619      	mov	r1, r3
 8001418:	4850      	ldr	r0, [pc, #320]	; (800155c <MX_ADC1_Init+0x268>)
 800141a:	f002 f889 	bl	8003530 <HAL_ADC_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001424:	f000 fd60 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001428:	4b52      	ldr	r3, [pc, #328]	; (8001574 <MX_ADC1_Init+0x280>)
 800142a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800142c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001430:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001432:	463b      	mov	r3, r7
 8001434:	4619      	mov	r1, r3
 8001436:	4849      	ldr	r0, [pc, #292]	; (800155c <MX_ADC1_Init+0x268>)
 8001438:	f002 f87a 	bl	8003530 <HAL_ADC_ConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8001442:	f000 fd51 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001446:	4b4c      	ldr	r3, [pc, #304]	; (8001578 <MX_ADC1_Init+0x284>)
 8001448:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800144a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800144e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001450:	463b      	mov	r3, r7
 8001452:	4619      	mov	r1, r3
 8001454:	4841      	ldr	r0, [pc, #260]	; (800155c <MX_ADC1_Init+0x268>)
 8001456:	f002 f86b 	bl	8003530 <HAL_ADC_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001460:	f000 fd42 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001464:	4b45      	ldr	r3, [pc, #276]	; (800157c <MX_ADC1_Init+0x288>)
 8001466:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001468:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800146c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800146e:	463b      	mov	r3, r7
 8001470:	4619      	mov	r1, r3
 8001472:	483a      	ldr	r0, [pc, #232]	; (800155c <MX_ADC1_Init+0x268>)
 8001474:	f002 f85c 	bl	8003530 <HAL_ADC_ConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800147e:	f000 fd33 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001482:	4b3f      	ldr	r3, [pc, #252]	; (8001580 <MX_ADC1_Init+0x28c>)
 8001484:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001486:	f44f 7389 	mov.w	r3, #274	; 0x112
 800148a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800148c:	463b      	mov	r3, r7
 800148e:	4619      	mov	r1, r3
 8001490:	4832      	ldr	r0, [pc, #200]	; (800155c <MX_ADC1_Init+0x268>)
 8001492:	f002 f84d 	bl	8003530 <HAL_ADC_ConfigChannel>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800149c:	f000 fd24 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80014a0:	4b38      	ldr	r3, [pc, #224]	; (8001584 <MX_ADC1_Init+0x290>)
 80014a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80014a4:	f44f 738c 	mov.w	r3, #280	; 0x118
 80014a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014aa:	463b      	mov	r3, r7
 80014ac:	4619      	mov	r1, r3
 80014ae:	482b      	ldr	r0, [pc, #172]	; (800155c <MX_ADC1_Init+0x268>)
 80014b0:	f002 f83e 	bl	8003530 <HAL_ADC_ConfigChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80014ba:	f000 fd15 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80014be:	4b32      	ldr	r3, [pc, #200]	; (8001588 <MX_ADC1_Init+0x294>)
 80014c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80014c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c8:	463b      	mov	r3, r7
 80014ca:	4619      	mov	r1, r3
 80014cc:	4823      	ldr	r0, [pc, #140]	; (800155c <MX_ADC1_Init+0x268>)
 80014ce:	f002 f82f 	bl	8003530 <HAL_ADC_ConfigChannel>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80014d8:	f000 fd06 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80014dc:	4b2b      	ldr	r3, [pc, #172]	; (800158c <MX_ADC1_Init+0x298>)
 80014de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80014e0:	f240 2306 	movw	r3, #518	; 0x206
 80014e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e6:	463b      	mov	r3, r7
 80014e8:	4619      	mov	r1, r3
 80014ea:	481c      	ldr	r0, [pc, #112]	; (800155c <MX_ADC1_Init+0x268>)
 80014ec:	f002 f820 	bl	8003530 <HAL_ADC_ConfigChannel>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80014f6:	f000 fcf7 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80014fa:	4b25      	ldr	r3, [pc, #148]	; (8001590 <MX_ADC1_Init+0x29c>)
 80014fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80014fe:	f44f 7303 	mov.w	r3, #524	; 0x20c
 8001502:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001504:	463b      	mov	r3, r7
 8001506:	4619      	mov	r1, r3
 8001508:	4814      	ldr	r0, [pc, #80]	; (800155c <MX_ADC1_Init+0x268>)
 800150a:	f002 f811 	bl	8003530 <HAL_ADC_ConfigChannel>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_ADC1_Init+0x224>
  {
    Error_Handler();
 8001514:	f000 fce8 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001518:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <MX_ADC1_Init+0x2a0>)
 800151a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 800151c:	f240 2312 	movw	r3, #530	; 0x212
 8001520:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001522:	463b      	mov	r3, r7
 8001524:	4619      	mov	r1, r3
 8001526:	480d      	ldr	r0, [pc, #52]	; (800155c <MX_ADC1_Init+0x268>)
 8001528:	f002 f802 	bl	8003530 <HAL_ADC_ConfigChannel>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_ADC1_Init+0x242>
  {
    Error_Handler();
 8001532:	f000 fcd9 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001536:	4b18      	ldr	r3, [pc, #96]	; (8001598 <MX_ADC1_Init+0x2a4>)
 8001538:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 800153a:	f44f 7306 	mov.w	r3, #536	; 0x218
 800153e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001540:	463b      	mov	r3, r7
 8001542:	4619      	mov	r1, r3
 8001544:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_ADC1_Init+0x268>)
 8001546:	f001 fff3 	bl	8003530 <HAL_ADC_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_ADC1_Init+0x260>
  {
    Error_Handler();
 8001550:	f000 fcca 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001554:	bf00      	nop
 8001556:	3728      	adds	r7, #40	; 0x28
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	240000bc 	.word	0x240000bc
 8001560:	40022000 	.word	0x40022000
 8001564:	08600004 	.word	0x08600004
 8001568:	0c900008 	.word	0x0c900008
 800156c:	10c00010 	.word	0x10c00010
 8001570:	14f00020 	.word	0x14f00020
 8001574:	19200040 	.word	0x19200040
 8001578:	1d500080 	.word	0x1d500080
 800157c:	21800100 	.word	0x21800100
 8001580:	25b00200 	.word	0x25b00200
 8001584:	2a000400 	.word	0x2a000400
 8001588:	2e300800 	.word	0x2e300800
 800158c:	3ac04000 	.word	0x3ac04000
 8001590:	3ef08000 	.word	0x3ef08000
 8001594:	43210000 	.word	0x43210000
 8001598:	47520000 	.word	0x47520000

0800159c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
 80015b0:	615a      	str	r2, [r3, #20]
 80015b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80015b4:	4b36      	ldr	r3, [pc, #216]	; (8001690 <MX_ADC3_Init+0xf4>)
 80015b6:	4a37      	ldr	r2, [pc, #220]	; (8001694 <MX_ADC3_Init+0xf8>)
 80015b8:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80015ba:	4b35      	ldr	r3, [pc, #212]	; (8001690 <MX_ADC3_Init+0xf4>)
 80015bc:	2208      	movs	r2, #8
 80015be:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015c0:	4b33      	ldr	r3, [pc, #204]	; (8001690 <MX_ADC3_Init+0xf4>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015c6:	4b32      	ldr	r3, [pc, #200]	; (8001690 <MX_ADC3_Init+0xf4>)
 80015c8:	2204      	movs	r2, #4
 80015ca:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80015cc:	4b30      	ldr	r3, [pc, #192]	; (8001690 <MX_ADC3_Init+0xf4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80015d2:	4b2f      	ldr	r3, [pc, #188]	; (8001690 <MX_ADC3_Init+0xf4>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 3;
 80015d8:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <MX_ADC3_Init+0xf4>)
 80015da:	2203      	movs	r2, #3
 80015dc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80015de:	4b2c      	ldr	r3, [pc, #176]	; (8001690 <MX_ADC3_Init+0xf4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015e4:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <MX_ADC3_Init+0xf4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ea:	4b29      	ldr	r3, [pc, #164]	; (8001690 <MX_ADC3_Init+0xf4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80015f0:	4b27      	ldr	r3, [pc, #156]	; (8001690 <MX_ADC3_Init+0xf4>)
 80015f2:	2203      	movs	r2, #3
 80015f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015f6:	4b26      	ldr	r3, [pc, #152]	; (8001690 <MX_ADC3_Init+0xf4>)
 80015f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015fc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80015fe:	4b24      	ldr	r3, [pc, #144]	; (8001690 <MX_ADC3_Init+0xf4>)
 8001600:	2200      	movs	r2, #0
 8001602:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001604:	4b22      	ldr	r3, [pc, #136]	; (8001690 <MX_ADC3_Init+0xf4>)
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800160c:	4820      	ldr	r0, [pc, #128]	; (8001690 <MX_ADC3_Init+0xf4>)
 800160e:	f001 fcbd 	bl	8002f8c <HAL_ADC_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001618:	f000 fc66 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800161c:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <MX_ADC3_Init+0xfc>)
 800161e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001620:	2306      	movs	r3, #6
 8001622:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001624:	2307      	movs	r3, #7
 8001626:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001628:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800162c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800162e:	2304      	movs	r3, #4
 8001630:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	4619      	mov	r1, r3
 800163e:	4814      	ldr	r0, [pc, #80]	; (8001690 <MX_ADC3_Init+0xf4>)
 8001640:	f001 ff76 	bl	8003530 <HAL_ADC_ConfigChannel>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800164a:	f000 fc4d 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800164e:	4b13      	ldr	r3, [pc, #76]	; (800169c <MX_ADC3_Init+0x100>)
 8001650:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001652:	230c      	movs	r3, #12
 8001654:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	4619      	mov	r1, r3
 800165a:	480d      	ldr	r0, [pc, #52]	; (8001690 <MX_ADC3_Init+0xf4>)
 800165c:	f001 ff68 	bl	8003530 <HAL_ADC_ConfigChannel>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8001666:	f000 fc3f 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <MX_ADC3_Init+0x104>)
 800166c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800166e:	2312      	movs	r3, #18
 8001670:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	4619      	mov	r1, r3
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <MX_ADC3_Init+0xf4>)
 8001678:	f001 ff5a 	bl	8003530 <HAL_ADC_ConfigChannel>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001682:	f000 fc31 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	3720      	adds	r7, #32
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	24000120 	.word	0x24000120
 8001694:	58026000 	.word	0x58026000
 8001698:	cfb80000 	.word	0xcfb80000
 800169c:	cb840000 	.word	0xcb840000
 80016a0:	08600004 	.word	0x08600004

080016a4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	2224      	movs	r2, #36	; 0x24
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f00e fc89 	bl	800ffc8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80016b6:	4b17      	ldr	r3, [pc, #92]	; (8001714 <MX_DAC1_Init+0x70>)
 80016b8:	4a17      	ldr	r2, [pc, #92]	; (8001718 <MX_DAC1_Init+0x74>)
 80016ba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80016bc:	4815      	ldr	r0, [pc, #84]	; (8001714 <MX_DAC1_Init+0x70>)
 80016be:	f003 f876 	bl	80047ae <HAL_DAC_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80016c8:	f000 fc0e 	bl	8001ee8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 80016d0:	2302      	movs	r3, #2
 80016d2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80016d8:	2301      	movs	r3, #1
 80016da:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2200      	movs	r2, #0
 80016e4:	4619      	mov	r1, r3
 80016e6:	480b      	ldr	r0, [pc, #44]	; (8001714 <MX_DAC1_Init+0x70>)
 80016e8:	f003 f8fa 	bl	80048e0 <HAL_DAC_ConfigChannel>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80016f2:	f000 fbf9 	bl	8001ee8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	2210      	movs	r2, #16
 80016fa:	4619      	mov	r1, r3
 80016fc:	4805      	ldr	r0, [pc, #20]	; (8001714 <MX_DAC1_Init+0x70>)
 80016fe:	f003 f8ef 	bl	80048e0 <HAL_DAC_ConfigChannel>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8001708:	f000 fbee 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	3728      	adds	r7, #40	; 0x28
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	24000274 	.word	0x24000274
 8001718:	40007400 	.word	0x40007400

0800171c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <MX_I2C1_Init+0x74>)
 8001722:	4a1c      	ldr	r2, [pc, #112]	; (8001794 <MX_I2C1_Init+0x78>)
 8001724:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <MX_I2C1_Init+0x74>)
 8001728:	4a1b      	ldr	r2, [pc, #108]	; (8001798 <MX_I2C1_Init+0x7c>)
 800172a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800172c:	4b18      	ldr	r3, [pc, #96]	; (8001790 <MX_I2C1_Init+0x74>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001732:	4b17      	ldr	r3, [pc, #92]	; (8001790 <MX_I2C1_Init+0x74>)
 8001734:	2201      	movs	r2, #1
 8001736:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001738:	4b15      	ldr	r3, [pc, #84]	; (8001790 <MX_I2C1_Init+0x74>)
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800173e:	4b14      	ldr	r3, [pc, #80]	; (8001790 <MX_I2C1_Init+0x74>)
 8001740:	2200      	movs	r2, #0
 8001742:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001744:	4b12      	ldr	r3, [pc, #72]	; (8001790 <MX_I2C1_Init+0x74>)
 8001746:	2200      	movs	r2, #0
 8001748:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800174a:	4b11      	ldr	r3, [pc, #68]	; (8001790 <MX_I2C1_Init+0x74>)
 800174c:	2200      	movs	r2, #0
 800174e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <MX_I2C1_Init+0x74>)
 8001752:	2200      	movs	r2, #0
 8001754:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001756:	480e      	ldr	r0, [pc, #56]	; (8001790 <MX_I2C1_Init+0x74>)
 8001758:	f006 fa10 	bl	8007b7c <HAL_I2C_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001762:	f000 fbc1 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001766:	2100      	movs	r1, #0
 8001768:	4809      	ldr	r0, [pc, #36]	; (8001790 <MX_I2C1_Init+0x74>)
 800176a:	f006 fef9 	bl	8008560 <HAL_I2CEx_ConfigAnalogFilter>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001774:	f000 fbb8 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001778:	2100      	movs	r1, #0
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <MX_I2C1_Init+0x74>)
 800177c:	f006 ff3b 	bl	80085f6 <HAL_I2CEx_ConfigDigitalFilter>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001786:	f000 fbaf 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	24000288 	.word	0x24000288
 8001794:	40005400 	.word	0x40005400
 8001798:	20303e5d 	.word	0x20303e5d

0800179c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017a0:	4b28      	ldr	r3, [pc, #160]	; (8001844 <MX_SPI1_Init+0xa8>)
 80017a2:	4a29      	ldr	r2, [pc, #164]	; (8001848 <MX_SPI1_Init+0xac>)
 80017a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017a6:	4b27      	ldr	r3, [pc, #156]	; (8001844 <MX_SPI1_Init+0xa8>)
 80017a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80017ae:	4b25      	ldr	r3, [pc, #148]	; (8001844 <MX_SPI1_Init+0xa8>)
 80017b0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017b4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80017b6:	4b23      	ldr	r3, [pc, #140]	; (8001844 <MX_SPI1_Init+0xa8>)
 80017b8:	220f      	movs	r2, #15
 80017ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017bc:	4b21      	ldr	r3, [pc, #132]	; (8001844 <MX_SPI1_Init+0xa8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <MX_SPI1_Init+0xa8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017c8:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <MX_SPI1_Init+0xa8>)
 80017ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017d0:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <MX_SPI1_Init+0xa8>)
 80017d2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80017d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017d8:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <MX_SPI1_Init+0xa8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017de:	4b19      	ldr	r3, [pc, #100]	; (8001844 <MX_SPI1_Init+0xa8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017e4:	4b17      	ldr	r3, [pc, #92]	; (8001844 <MX_SPI1_Init+0xa8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80017ea:	4b16      	ldr	r3, [pc, #88]	; (8001844 <MX_SPI1_Init+0xa8>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017f0:	4b14      	ldr	r3, [pc, #80]	; (8001844 <MX_SPI1_Init+0xa8>)
 80017f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017f6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <MX_SPI1_Init+0xa8>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <MX_SPI1_Init+0xa8>)
 8001800:	2200      	movs	r2, #0
 8001802:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <MX_SPI1_Init+0xa8>)
 8001806:	2200      	movs	r2, #0
 8001808:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <MX_SPI1_Init+0xa8>)
 800180c:	2200      	movs	r2, #0
 800180e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <MX_SPI1_Init+0xa8>)
 8001812:	2200      	movs	r2, #0
 8001814:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001816:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <MX_SPI1_Init+0xa8>)
 8001818:	2200      	movs	r2, #0
 800181a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <MX_SPI1_Init+0xa8>)
 800181e:	2200      	movs	r2, #0
 8001820:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <MX_SPI1_Init+0xa8>)
 8001824:	2200      	movs	r2, #0
 8001826:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <MX_SPI1_Init+0xa8>)
 800182a:	2200      	movs	r2, #0
 800182c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800182e:	4805      	ldr	r0, [pc, #20]	; (8001844 <MX_SPI1_Init+0xa8>)
 8001830:	f00a f8ea 	bl	800ba08 <HAL_SPI_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800183a:	f000 fb55 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	240002d4 	.word	0x240002d4
 8001848:	40013000 	.word	0x40013000

0800184c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001850:	4b28      	ldr	r3, [pc, #160]	; (80018f4 <MX_SPI2_Init+0xa8>)
 8001852:	4a29      	ldr	r2, [pc, #164]	; (80018f8 <MX_SPI2_Init+0xac>)
 8001854:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001856:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <MX_SPI2_Init+0xa8>)
 8001858:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800185c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800185e:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <MX_SPI2_Init+0xa8>)
 8001860:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001864:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001866:	4b23      	ldr	r3, [pc, #140]	; (80018f4 <MX_SPI2_Init+0xa8>)
 8001868:	220f      	movs	r2, #15
 800186a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800186c:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <MX_SPI2_Init+0xa8>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001872:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <MX_SPI2_Init+0xa8>)
 8001874:	2200      	movs	r2, #0
 8001876:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001878:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <MX_SPI2_Init+0xa8>)
 800187a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800187e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001880:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <MX_SPI2_Init+0xa8>)
 8001882:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001886:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001888:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <MX_SPI2_Init+0xa8>)
 800188a:	2200      	movs	r2, #0
 800188c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800188e:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <MX_SPI2_Init+0xa8>)
 8001890:	2200      	movs	r2, #0
 8001892:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001894:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <MX_SPI2_Init+0xa8>)
 8001896:	2200      	movs	r2, #0
 8001898:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800189a:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <MX_SPI2_Init+0xa8>)
 800189c:	2200      	movs	r2, #0
 800189e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018a0:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <MX_SPI2_Init+0xa8>)
 80018a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018a6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <MX_SPI2_Init+0xa8>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_SPI2_Init+0xa8>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <MX_SPI2_Init+0xa8>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <MX_SPI2_Init+0xa8>)
 80018bc:	2200      	movs	r2, #0
 80018be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <MX_SPI2_Init+0xa8>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <MX_SPI2_Init+0xa8>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <MX_SPI2_Init+0xa8>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <MX_SPI2_Init+0xa8>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <MX_SPI2_Init+0xa8>)
 80018da:	2200      	movs	r2, #0
 80018dc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <MX_SPI2_Init+0xa8>)
 80018e0:	f00a f892 	bl	800ba08 <HAL_SPI_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80018ea:	f000 fafd 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	2400035c 	.word	0x2400035c
 80018f8:	40003800 	.word	0x40003800

080018fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b096      	sub	sp, #88	; 0x58
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001902:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800190e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	611a      	str	r2, [r3, #16]
 800191e:	615a      	str	r2, [r3, #20]
 8001920:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	222c      	movs	r2, #44	; 0x2c
 8001926:	2100      	movs	r1, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f00e fb4d 	bl	800ffc8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800192e:	4b39      	ldr	r3, [pc, #228]	; (8001a14 <MX_TIM1_Init+0x118>)
 8001930:	4a39      	ldr	r2, [pc, #228]	; (8001a18 <MX_TIM1_Init+0x11c>)
 8001932:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 8001934:	4b37      	ldr	r3, [pc, #220]	; (8001a14 <MX_TIM1_Init+0x118>)
 8001936:	2263      	movs	r2, #99	; 0x63
 8001938:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193a:	4b36      	ldr	r3, [pc, #216]	; (8001a14 <MX_TIM1_Init+0x118>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000 - 1;
 8001940:	4b34      	ldr	r3, [pc, #208]	; (8001a14 <MX_TIM1_Init+0x118>)
 8001942:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001946:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001948:	4b32      	ldr	r3, [pc, #200]	; (8001a14 <MX_TIM1_Init+0x118>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800194e:	4b31      	ldr	r3, [pc, #196]	; (8001a14 <MX_TIM1_Init+0x118>)
 8001950:	2200      	movs	r2, #0
 8001952:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001954:	4b2f      	ldr	r3, [pc, #188]	; (8001a14 <MX_TIM1_Init+0x118>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800195a:	482e      	ldr	r0, [pc, #184]	; (8001a14 <MX_TIM1_Init+0x118>)
 800195c:	f00a ff62 	bl	800c824 <HAL_TIM_PWM_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001966:	f000 fabf 	bl	8001ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001976:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800197a:	4619      	mov	r1, r3
 800197c:	4825      	ldr	r0, [pc, #148]	; (8001a14 <MX_TIM1_Init+0x118>)
 800197e:	f00b fd99 	bl	800d4b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001988:	f000 faae 	bl	8001ee8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800198c:	2360      	movs	r3, #96	; 0x60
 800198e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480 -1;
 8001990:	f240 13df 	movw	r3, #479	; 0x1df
 8001994:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001996:	2300      	movs	r3, #0
 8001998:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800199a:	2300      	movs	r3, #0
 800199c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019a2:	2300      	movs	r3, #0
 80019a4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019ae:	2200      	movs	r2, #0
 80019b0:	4619      	mov	r1, r3
 80019b2:	4818      	ldr	r0, [pc, #96]	; (8001a14 <MX_TIM1_Init+0x118>)
 80019b4:	f00b f8ac 	bl	800cb10 <HAL_TIM_PWM_ConfigChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80019be:	f000 fa93 	bl	8001ee8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	4619      	mov	r1, r3
 80019f6:	4807      	ldr	r0, [pc, #28]	; (8001a14 <MX_TIM1_Init+0x118>)
 80019f8:	f00b fdea 	bl	800d5d0 <HAL_TIMEx_ConfigBreakDeadTime>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001a02:	f000 fa71 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a06:	4803      	ldr	r0, [pc, #12]	; (8001a14 <MX_TIM1_Init+0x118>)
 8001a08:	f000 fd82 	bl	8002510 <HAL_TIM_MspPostInit>

}
 8001a0c:	bf00      	nop
 8001a0e:	3758      	adds	r7, #88	; 0x58
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	240003e4 	.word	0x240003e4
 8001a18:	40010000 	.word	0x40010000

08001a1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a22:	f107 031c 	add.w	r3, r7, #28
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a2e:	463b      	mov	r3, r7
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
 8001a3c:	615a      	str	r2, [r3, #20]
 8001a3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a40:	4b22      	ldr	r3, [pc, #136]	; (8001acc <MX_TIM2_Init+0xb0>)
 8001a42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 -1;
 8001a48:	4b20      	ldr	r3, [pc, #128]	; (8001acc <MX_TIM2_Init+0xb0>)
 8001a4a:	2263      	movs	r2, #99	; 0x63
 8001a4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4e:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <MX_TIM2_Init+0xb0>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48000 - 1;
 8001a54:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <MX_TIM2_Init+0xb0>)
 8001a56:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001a5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <MX_TIM2_Init+0xb0>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a62:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <MX_TIM2_Init+0xb0>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a68:	4818      	ldr	r0, [pc, #96]	; (8001acc <MX_TIM2_Init+0xb0>)
 8001a6a:	f00a fedb 	bl	800c824 <HAL_TIM_PWM_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001a74:	f000 fa38 	bl	8001ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a80:	f107 031c 	add.w	r3, r7, #28
 8001a84:	4619      	mov	r1, r3
 8001a86:	4811      	ldr	r0, [pc, #68]	; (8001acc <MX_TIM2_Init+0xb0>)
 8001a88:	f00b fd14 	bl	800d4b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001a92:	f000 fa29 	bl	8001ee8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a96:	2360      	movs	r3, #96	; 0x60
 8001a98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 480 - 1;
 8001a9a:	f240 13df 	movw	r3, #479	; 0x1df
 8001a9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001aa8:	463b      	mov	r3, r7
 8001aaa:	220c      	movs	r2, #12
 8001aac:	4619      	mov	r1, r3
 8001aae:	4807      	ldr	r0, [pc, #28]	; (8001acc <MX_TIM2_Init+0xb0>)
 8001ab0:	f00b f82e 	bl	800cb10 <HAL_TIM_PWM_ConfigChannel>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001aba:	f000 fa15 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001abe:	4803      	ldr	r0, [pc, #12]	; (8001acc <MX_TIM2_Init+0xb0>)
 8001ac0:	f000 fd26 	bl	8002510 <HAL_TIM_MspPostInit>

}
 8001ac4:	bf00      	nop
 8001ac6:	3728      	adds	r7, #40	; 0x28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	24000430 	.word	0x24000430

08001ad0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ad4:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <MX_USART1_UART_Init+0x90>)
 8001ad6:	4a23      	ldr	r2, [pc, #140]	; (8001b64 <MX_USART1_UART_Init+0x94>)
 8001ad8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001ada:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <MX_USART1_UART_Init+0x90>)
 8001adc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001ae0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae2:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <MX_USART1_UART_Init+0x90>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ae8:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <MX_USART1_UART_Init+0x90>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aee:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <MX_USART1_UART_Init+0x90>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001af4:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <MX_USART1_UART_Init+0x90>)
 8001af6:	220c      	movs	r2, #12
 8001af8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001afa:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <MX_USART1_UART_Init+0x90>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b00:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <MX_USART1_UART_Init+0x90>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <MX_USART1_UART_Init+0x90>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b0c:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <MX_USART1_UART_Init+0x90>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b12:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <MX_USART1_UART_Init+0x90>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b18:	4811      	ldr	r0, [pc, #68]	; (8001b60 <MX_USART1_UART_Init+0x90>)
 8001b1a:	f00b fdf5 	bl	800d708 <HAL_UART_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b24:	f000 f9e0 	bl	8001ee8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b28:	2100      	movs	r1, #0
 8001b2a:	480d      	ldr	r0, [pc, #52]	; (8001b60 <MX_USART1_UART_Init+0x90>)
 8001b2c:	f00e f917 	bl	800fd5e <HAL_UARTEx_SetTxFifoThreshold>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b36:	f000 f9d7 	bl	8001ee8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4808      	ldr	r0, [pc, #32]	; (8001b60 <MX_USART1_UART_Init+0x90>)
 8001b3e:	f00e f94c 	bl	800fdda <HAL_UARTEx_SetRxFifoThreshold>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b48:	f000 f9ce 	bl	8001ee8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b4c:	4804      	ldr	r0, [pc, #16]	; (8001b60 <MX_USART1_UART_Init+0x90>)
 8001b4e:	f00e f8cd 	bl	800fcec <HAL_UARTEx_DisableFifoMode>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b58:	f000 f9c6 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	2400047c 	.word	0x2400047c
 8001b64:	40011000 	.word	0x40011000

08001b68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <MX_DMA_Init+0x4c>)
 8001b70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b74:	4a0f      	ldr	r2, [pc, #60]	; (8001bb4 <MX_DMA_Init+0x4c>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <MX_DMA_Init+0x4c>)
 8001b80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2100      	movs	r1, #0
 8001b90:	200b      	movs	r0, #11
 8001b92:	f002 fdd8 	bl	8004746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b96:	200b      	movs	r0, #11
 8001b98:	f002 fdef 	bl	800477a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	200c      	movs	r0, #12
 8001ba2:	f002 fdd0 	bl	8004746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001ba6:	200c      	movs	r0, #12
 8001ba8:	f002 fde7 	bl	800477a <HAL_NVIC_EnableIRQ>

}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	58024400 	.word	0x58024400

08001bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08c      	sub	sp, #48	; 0x30
 8001bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bce:	4b54      	ldr	r3, [pc, #336]	; (8001d20 <MX_GPIO_Init+0x168>)
 8001bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd4:	4a52      	ldr	r2, [pc, #328]	; (8001d20 <MX_GPIO_Init+0x168>)
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bde:	4b50      	ldr	r3, [pc, #320]	; (8001d20 <MX_GPIO_Init+0x168>)
 8001be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bec:	4b4c      	ldr	r3, [pc, #304]	; (8001d20 <MX_GPIO_Init+0x168>)
 8001bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf2:	4a4b      	ldr	r2, [pc, #300]	; (8001d20 <MX_GPIO_Init+0x168>)
 8001bf4:	f043 0320 	orr.w	r3, r3, #32
 8001bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bfc:	4b48      	ldr	r3, [pc, #288]	; (8001d20 <MX_GPIO_Init+0x168>)
 8001bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c02:	f003 0320 	and.w	r3, r3, #32
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c0a:	4b45      	ldr	r3, [pc, #276]	; (8001d20 <MX_GPIO_Init+0x168>)
 8001c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c10:	4a43      	ldr	r2, [pc, #268]	; (8001d20 <MX_GPIO_Init+0x168>)
 8001c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c1a:	4b41      	ldr	r3, [pc, #260]	; (8001d20 <MX_GPIO_Init+0x168>)
 8001c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c28:	4b3d      	ldr	r3, [pc, #244]	; (8001d20 <MX_GPIO_Init+0x168>)
 8001c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c2e:	4a3c      	ldr	r2, [pc, #240]	; (8001d20 <MX_GPIO_Init+0x168>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c38:	4b39      	ldr	r3, [pc, #228]	; (8001d20 <MX_GPIO_Init+0x168>)
 8001c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c46:	4b36      	ldr	r3, [pc, #216]	; (8001d20 <MX_GPIO_Init+0x168>)
 8001c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4c:	4a34      	ldr	r2, [pc, #208]	; (8001d20 <MX_GPIO_Init+0x168>)
 8001c4e:	f043 0302 	orr.w	r3, r3, #2
 8001c52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c56:	4b32      	ldr	r3, [pc, #200]	; (8001d20 <MX_GPIO_Init+0x168>)
 8001c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c64:	4b2e      	ldr	r3, [pc, #184]	; (8001d20 <MX_GPIO_Init+0x168>)
 8001c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6a:	4a2d      	ldr	r2, [pc, #180]	; (8001d20 <MX_GPIO_Init+0x168>)
 8001c6c:	f043 0308 	orr.w	r3, r3, #8
 8001c70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c74:	4b2a      	ldr	r3, [pc, #168]	; (8001d20 <MX_GPIO_Init+0x168>)
 8001c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001c82:	2200      	movs	r2, #0
 8001c84:	21c0      	movs	r1, #192	; 0xc0
 8001c86:	4827      	ldr	r0, [pc, #156]	; (8001d24 <MX_GPIO_Init+0x16c>)
 8001c88:	f005 ff5e 	bl	8007b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8001c92:	4825      	ldr	r0, [pc, #148]	; (8001d28 <MX_GPIO_Init+0x170>)
 8001c94:	f005 ff58 	bl	8007b48 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2160      	movs	r1, #96	; 0x60
 8001c9c:	4823      	ldr	r0, [pc, #140]	; (8001d2c <MX_GPIO_Init+0x174>)
 8001c9e:	f005 ff53 	bl	8007b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ca2:	23c0      	movs	r3, #192	; 0xc0
 8001ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cb2:	f107 031c 	add.w	r3, r7, #28
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	481a      	ldr	r0, [pc, #104]	; (8001d24 <MX_GPIO_Init+0x16c>)
 8001cba:	f005 fd7d 	bl	80077b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001cbe:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001cc2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd0:	f107 031c 	add.w	r3, r7, #28
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4814      	ldr	r0, [pc, #80]	; (8001d28 <MX_GPIO_Init+0x170>)
 8001cd8:	f005 fd6e 	bl	80077b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001cdc:	2360      	movs	r3, #96	; 0x60
 8001cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cec:	2307      	movs	r3, #7
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cf0:	f107 031c 	add.w	r3, r7, #28
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	480e      	ldr	r0, [pc, #56]	; (8001d30 <MX_GPIO_Init+0x178>)
 8001cf8:	f005 fd5e 	bl	80077b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001cfc:	2360      	movs	r3, #96	; 0x60
 8001cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d00:	2301      	movs	r3, #1
 8001d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0c:	f107 031c 	add.w	r3, r7, #28
 8001d10:	4619      	mov	r1, r3
 8001d12:	4806      	ldr	r0, [pc, #24]	; (8001d2c <MX_GPIO_Init+0x174>)
 8001d14:	f005 fd50 	bl	80077b8 <HAL_GPIO_Init>

}
 8001d18:	bf00      	nop
 8001d1a:	3730      	adds	r7, #48	; 0x30
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	58024400 	.word	0x58024400
 8001d24:	58021400 	.word	0x58021400
 8001d28:	58020800 	.word	0x58020800
 8001d2c:	58020400 	.word	0x58020400
 8001d30:	58020c00 	.word	0x58020c00

08001d34 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

	/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
	if (hadc == &hadc1) {
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a2f      	ldr	r2, [pc, #188]	; (8001dfc <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d129      	bne.n	8001d98 <HAL_ADC_ConvHalfCpltCallback+0x64>
 8001d44:	4b2e      	ldr	r3, [pc, #184]	; (8001e00 <HAL_ADC_ConvHalfCpltCallback+0xcc>)
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
 8001d48:	2320      	movs	r3, #32
 8001d4a:	623b      	str	r3, [r7, #32]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	dd1d      	ble.n	8001d8e <HAL_ADC_ConvHalfCpltCallback+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	f003 021f 	and.w	r2, r3, #31
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d62:	f3bf 8f4f 	dsb	sy
}
 8001d66:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001d68:	4a26      	ldr	r2, [pc, #152]	; (8001e04 <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	3320      	adds	r3, #32
 8001d74:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3b20      	subs	r3, #32
 8001d7a:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	dcf2      	bgt.n	8001d68 <HAL_ADC_ConvHalfCpltCallback+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d82:	f3bf 8f4f 	dsb	sy
}
 8001d86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d88:	f3bf 8f6f 	isb	sy
}
 8001d8c:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8001d8e:	bf00      	nop
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[0], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc1);
 8001d90:	481a      	ldr	r0, [pc, #104]	; (8001dfc <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 8001d92:	f001 fb61 	bl	8003458 <HAL_ADC_Stop_DMA>
	} else if (hadc == &hadc3) {
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[0], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc3);
	}

}
 8001d96:	e02c      	b.n	8001df2 <HAL_ADC_ConvHalfCpltCallback+0xbe>
	} else if (hadc == &hadc3) {
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a1b      	ldr	r2, [pc, #108]	; (8001e08 <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d128      	bne.n	8001df2 <HAL_ADC_ConvHalfCpltCallback+0xbe>
 8001da0:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <HAL_ADC_ConvHalfCpltCallback+0xcc>)
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	2320      	movs	r3, #32
 8001da6:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	dd1d      	ble.n	8001dea <HAL_ADC_ConvHalfCpltCallback+0xb6>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f003 021f 	and.w	r2, r3, #31
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4413      	add	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001dbe:	f3bf 8f4f 	dsb	sy
}
 8001dc2:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001dc4:	4a0f      	ldr	r2, [pc, #60]	; (8001e04 <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	3320      	adds	r3, #32
 8001dd0:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	3b20      	subs	r3, #32
 8001dd6:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	dcf2      	bgt.n	8001dc4 <HAL_ADC_ConvHalfCpltCallback+0x90>
  __ASM volatile ("dsb 0xF":::"memory");
 8001dde:	f3bf 8f4f 	dsb	sy
}
 8001de2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001de4:	f3bf 8f6f 	isb	sy
}
 8001de8:	bf00      	nop
}
 8001dea:	bf00      	nop
		HAL_ADC_Stop_DMA(&hadc3);
 8001dec:	4806      	ldr	r0, [pc, #24]	; (8001e08 <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 8001dee:	f001 fb33 	bl	8003458 <HAL_ADC_Stop_DMA>
}
 8001df2:	bf00      	nop
 8001df4:	3728      	adds	r7, #40	; 0x28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	240000bc 	.word	0x240000bc
 8001e00:	24000580 	.word	0x24000580
 8001e04:	e000ed00 	.word	0xe000ed00
 8001e08:	24000120 	.word	0x24000120

08001e0c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
	if (hadc == &hadc1) {
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a2f      	ldr	r2, [pc, #188]	; (8001ed4 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d129      	bne.n	8001e70 <HAL_ADC_ConvCpltCallback+0x64>
 8001e1c:	4b2e      	ldr	r3, [pc, #184]	; (8001ed8 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e20:	2320      	movs	r3, #32
 8001e22:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	dd1d      	ble.n	8001e66 <HAL_ADC_ConvCpltCallback+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	f003 021f 	and.w	r2, r3, #31
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	4413      	add	r3, r2
 8001e34:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3a:	f3bf 8f4f 	dsb	sy
}
 8001e3e:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001e40:	4a26      	ldr	r2, [pc, #152]	; (8001edc <HAL_ADC_ConvCpltCallback+0xd0>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	3320      	adds	r3, #32
 8001e4c:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3b20      	subs	r3, #32
 8001e52:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	dcf2      	bgt.n	8001e40 <HAL_ADC_ConvCpltCallback+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e5a:	f3bf 8f4f 	dsb	sy
}
 8001e5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e60:	f3bf 8f6f 	isb	sy
}
 8001e64:	bf00      	nop
}
 8001e66:	bf00      	nop
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[ADC_CONVERTED_DATA_BUFFER_SIZE/2], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc1);
 8001e68:	481a      	ldr	r0, [pc, #104]	; (8001ed4 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001e6a:	f001 faf5 	bl	8003458 <HAL_ADC_Stop_DMA>
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADC3ConvertedData[ADC_CONVERTED_DATA_BUFFER_SIZE/2], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc3);

	}

}
 8001e6e:	e02c      	b.n	8001eca <HAL_ADC_ConvCpltCallback+0xbe>
	} else if (hadc == &hadc3) {
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a1b      	ldr	r2, [pc, #108]	; (8001ee0 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d128      	bne.n	8001eca <HAL_ADC_ConvCpltCallback+0xbe>
 8001e78:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	2320      	movs	r3, #32
 8001e7e:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	dd1d      	ble.n	8001ec2 <HAL_ADC_ConvCpltCallback+0xb6>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f003 021f 	and.w	r2, r3, #31
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4413      	add	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e96:	f3bf 8f4f 	dsb	sy
}
 8001e9a:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001e9c:	4a0f      	ldr	r2, [pc, #60]	; (8001edc <HAL_ADC_ConvCpltCallback+0xd0>)
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	3320      	adds	r3, #32
 8001ea8:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	3b20      	subs	r3, #32
 8001eae:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	dcf2      	bgt.n	8001e9c <HAL_ADC_ConvCpltCallback+0x90>
  __ASM volatile ("dsb 0xF":::"memory");
 8001eb6:	f3bf 8f4f 	dsb	sy
}
 8001eba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ebc:	f3bf 8f6f 	isb	sy
}
 8001ec0:	bf00      	nop
}
 8001ec2:	bf00      	nop
		HAL_ADC_Stop_DMA(&hadc3);
 8001ec4:	4806      	ldr	r0, [pc, #24]	; (8001ee0 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001ec6:	f001 fac7 	bl	8003458 <HAL_ADC_Stop_DMA>
}
 8001eca:	bf00      	nop
 8001ecc:	3728      	adds	r7, #40	; 0x28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	240000bc 	.word	0x240000bc
 8001ed8:	240005a0 	.word	0x240005a0
 8001edc:	e000ed00 	.word	0xe000ed00
 8001ee0:	24000120 	.word	0x24000120
 8001ee4:	240005e0 	.word	0x240005e0

08001ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001eec:	b672      	cpsid	i
}
 8001eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <Error_Handler+0x8>
	...

08001ef4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efa:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <HAL_MspInit+0x30>)
 8001efc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f00:	4a08      	ldr	r2, [pc, #32]	; (8001f24 <HAL_MspInit+0x30>)
 8001f02:	f043 0302 	orr.w	r3, r3, #2
 8001f06:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_MspInit+0x30>)
 8001f0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	58024400 	.word	0x58024400

08001f28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08e      	sub	sp, #56	; 0x38
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a8a      	ldr	r2, [pc, #552]	; (8002170 <HAL_ADC_MspInit+0x248>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	f040 80ad 	bne.w	80020a6 <HAL_ADC_MspInit+0x17e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001f4c:	4b89      	ldr	r3, [pc, #548]	; (8002174 <HAL_ADC_MspInit+0x24c>)
 8001f4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f52:	4a88      	ldr	r2, [pc, #544]	; (8002174 <HAL_ADC_MspInit+0x24c>)
 8001f54:	f043 0320 	orr.w	r3, r3, #32
 8001f58:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f5c:	4b85      	ldr	r3, [pc, #532]	; (8002174 <HAL_ADC_MspInit+0x24c>)
 8001f5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f62:	f003 0320 	and.w	r3, r3, #32
 8001f66:	623b      	str	r3, [r7, #32]
 8001f68:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6a:	4b82      	ldr	r3, [pc, #520]	; (8002174 <HAL_ADC_MspInit+0x24c>)
 8001f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f70:	4a80      	ldr	r2, [pc, #512]	; (8002174 <HAL_ADC_MspInit+0x24c>)
 8001f72:	f043 0304 	orr.w	r3, r3, #4
 8001f76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f7a:	4b7e      	ldr	r3, [pc, #504]	; (8002174 <HAL_ADC_MspInit+0x24c>)
 8001f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f88:	4b7a      	ldr	r3, [pc, #488]	; (8002174 <HAL_ADC_MspInit+0x24c>)
 8001f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f8e:	4a79      	ldr	r2, [pc, #484]	; (8002174 <HAL_ADC_MspInit+0x24c>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f98:	4b76      	ldr	r3, [pc, #472]	; (8002174 <HAL_ADC_MspInit+0x24c>)
 8001f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	61bb      	str	r3, [r7, #24]
 8001fa4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa6:	4b73      	ldr	r3, [pc, #460]	; (8002174 <HAL_ADC_MspInit+0x24c>)
 8001fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fac:	4a71      	ldr	r2, [pc, #452]	; (8002174 <HAL_ADC_MspInit+0x24c>)
 8001fae:	f043 0302 	orr.w	r3, r3, #2
 8001fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fb6:	4b6f      	ldr	r3, [pc, #444]	; (8002174 <HAL_ADC_MspInit+0x24c>)
 8001fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fc4:	4b6b      	ldr	r3, [pc, #428]	; (8002174 <HAL_ADC_MspInit+0x24c>)
 8001fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fca:	4a6a      	ldr	r2, [pc, #424]	; (8002174 <HAL_ADC_MspInit+0x24c>)
 8001fcc:	f043 0320 	orr.w	r3, r3, #32
 8001fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fd4:	4b67      	ldr	r3, [pc, #412]	; (8002174 <HAL_ADC_MspInit+0x24c>)
 8001fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fda:	f003 0320 	and.w	r3, r3, #32
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	693b      	ldr	r3, [r7, #16]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001fe2:	2333      	movs	r3, #51	; 0x33
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4860      	ldr	r0, [pc, #384]	; (8002178 <HAL_ADC_MspInit+0x250>)
 8001ff6:	f005 fbdf 	bl	80077b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001ffa:	23cf      	movs	r3, #207	; 0xcf
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ffe:	2303      	movs	r3, #3
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200a:	4619      	mov	r1, r3
 800200c:	485b      	ldr	r0, [pc, #364]	; (800217c <HAL_ADC_MspInit+0x254>)
 800200e:	f005 fbd3 	bl	80077b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002012:	2303      	movs	r3, #3
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002016:	2303      	movs	r3, #3
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002022:	4619      	mov	r1, r3
 8002024:	4856      	ldr	r0, [pc, #344]	; (8002180 <HAL_ADC_MspInit+0x258>)
 8002026:	f005 fbc7 	bl	80077b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800202a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002030:	2303      	movs	r3, #3
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800203c:	4619      	mov	r1, r3
 800203e:	4851      	ldr	r0, [pc, #324]	; (8002184 <HAL_ADC_MspInit+0x25c>)
 8002040:	f005 fbba 	bl	80077b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002044:	4b50      	ldr	r3, [pc, #320]	; (8002188 <HAL_ADC_MspInit+0x260>)
 8002046:	4a51      	ldr	r2, [pc, #324]	; (800218c <HAL_ADC_MspInit+0x264>)
 8002048:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800204a:	4b4f      	ldr	r3, [pc, #316]	; (8002188 <HAL_ADC_MspInit+0x260>)
 800204c:	2209      	movs	r2, #9
 800204e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002050:	4b4d      	ldr	r3, [pc, #308]	; (8002188 <HAL_ADC_MspInit+0x260>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002056:	4b4c      	ldr	r3, [pc, #304]	; (8002188 <HAL_ADC_MspInit+0x260>)
 8002058:	2200      	movs	r2, #0
 800205a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800205c:	4b4a      	ldr	r3, [pc, #296]	; (8002188 <HAL_ADC_MspInit+0x260>)
 800205e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002062:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002064:	4b48      	ldr	r3, [pc, #288]	; (8002188 <HAL_ADC_MspInit+0x260>)
 8002066:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800206a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800206c:	4b46      	ldr	r3, [pc, #280]	; (8002188 <HAL_ADC_MspInit+0x260>)
 800206e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002072:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002074:	4b44      	ldr	r3, [pc, #272]	; (8002188 <HAL_ADC_MspInit+0x260>)
 8002076:	f44f 7280 	mov.w	r2, #256	; 0x100
 800207a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800207c:	4b42      	ldr	r3, [pc, #264]	; (8002188 <HAL_ADC_MspInit+0x260>)
 800207e:	2200      	movs	r2, #0
 8002080:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002082:	4b41      	ldr	r3, [pc, #260]	; (8002188 <HAL_ADC_MspInit+0x260>)
 8002084:	2200      	movs	r2, #0
 8002086:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002088:	483f      	ldr	r0, [pc, #252]	; (8002188 <HAL_ADC_MspInit+0x260>)
 800208a:	f002 fd59 	bl	8004b40 <HAL_DMA_Init>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <HAL_ADC_MspInit+0x170>
    {
      Error_Handler();
 8002094:	f7ff ff28 	bl	8001ee8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a3b      	ldr	r2, [pc, #236]	; (8002188 <HAL_ADC_MspInit+0x260>)
 800209c:	64da      	str	r2, [r3, #76]	; 0x4c
 800209e:	4a3a      	ldr	r2, [pc, #232]	; (8002188 <HAL_ADC_MspInit+0x260>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80020a4:	e05f      	b.n	8002166 <HAL_ADC_MspInit+0x23e>
  else if(hadc->Instance==ADC3)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a39      	ldr	r2, [pc, #228]	; (8002190 <HAL_ADC_MspInit+0x268>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d15a      	bne.n	8002166 <HAL_ADC_MspInit+0x23e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80020b0:	4b30      	ldr	r3, [pc, #192]	; (8002174 <HAL_ADC_MspInit+0x24c>)
 80020b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b6:	4a2f      	ldr	r2, [pc, #188]	; (8002174 <HAL_ADC_MspInit+0x24c>)
 80020b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020c0:	4b2c      	ldr	r3, [pc, #176]	; (8002174 <HAL_ADC_MspInit+0x24c>)
 80020c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020ce:	4b29      	ldr	r3, [pc, #164]	; (8002174 <HAL_ADC_MspInit+0x24c>)
 80020d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d4:	4a27      	ldr	r2, [pc, #156]	; (8002174 <HAL_ADC_MspInit+0x24c>)
 80020d6:	f043 0320 	orr.w	r3, r3, #32
 80020da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020de:	4b25      	ldr	r3, [pc, #148]	; (8002174 <HAL_ADC_MspInit+0x24c>)
 80020e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020f2:	2303      	movs	r3, #3
 80020f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020fe:	4619      	mov	r1, r3
 8002100:	4820      	ldr	r0, [pc, #128]	; (8002184 <HAL_ADC_MspInit+0x25c>)
 8002102:	f005 fb59 	bl	80077b8 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Stream1;
 8002106:	4b23      	ldr	r3, [pc, #140]	; (8002194 <HAL_ADC_MspInit+0x26c>)
 8002108:	4a23      	ldr	r2, [pc, #140]	; (8002198 <HAL_ADC_MspInit+0x270>)
 800210a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800210c:	4b21      	ldr	r3, [pc, #132]	; (8002194 <HAL_ADC_MspInit+0x26c>)
 800210e:	2273      	movs	r2, #115	; 0x73
 8002110:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002112:	4b20      	ldr	r3, [pc, #128]	; (8002194 <HAL_ADC_MspInit+0x26c>)
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002118:	4b1e      	ldr	r3, [pc, #120]	; (8002194 <HAL_ADC_MspInit+0x26c>)
 800211a:	2200      	movs	r2, #0
 800211c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800211e:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <HAL_ADC_MspInit+0x26c>)
 8002120:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002124:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002126:	4b1b      	ldr	r3, [pc, #108]	; (8002194 <HAL_ADC_MspInit+0x26c>)
 8002128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800212c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800212e:	4b19      	ldr	r3, [pc, #100]	; (8002194 <HAL_ADC_MspInit+0x26c>)
 8002130:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002134:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002136:	4b17      	ldr	r3, [pc, #92]	; (8002194 <HAL_ADC_MspInit+0x26c>)
 8002138:	f44f 7280 	mov.w	r2, #256	; 0x100
 800213c:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <HAL_ADC_MspInit+0x26c>)
 8002140:	2200      	movs	r2, #0
 8002142:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002144:	4b13      	ldr	r3, [pc, #76]	; (8002194 <HAL_ADC_MspInit+0x26c>)
 8002146:	2200      	movs	r2, #0
 8002148:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800214a:	4812      	ldr	r0, [pc, #72]	; (8002194 <HAL_ADC_MspInit+0x26c>)
 800214c:	f002 fcf8 	bl	8004b40 <HAL_DMA_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_ADC_MspInit+0x232>
      Error_Handler();
 8002156:	f7ff fec7 	bl	8001ee8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a0d      	ldr	r2, [pc, #52]	; (8002194 <HAL_ADC_MspInit+0x26c>)
 800215e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002160:	4a0c      	ldr	r2, [pc, #48]	; (8002194 <HAL_ADC_MspInit+0x26c>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002166:	bf00      	nop
 8002168:	3738      	adds	r7, #56	; 0x38
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40022000 	.word	0x40022000
 8002174:	58024400 	.word	0x58024400
 8002178:	58020800 	.word	0x58020800
 800217c:	58020000 	.word	0x58020000
 8002180:	58020400 	.word	0x58020400
 8002184:	58021400 	.word	0x58021400
 8002188:	24000184 	.word	0x24000184
 800218c:	40020010 	.word	0x40020010
 8002190:	58026000 	.word	0x58026000
 8002194:	240001fc 	.word	0x240001fc
 8002198:	40020028 	.word	0x40020028

0800219c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08a      	sub	sp, #40	; 0x28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a18      	ldr	r2, [pc, #96]	; (800221c <HAL_DAC_MspInit+0x80>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d129      	bne.n	8002212 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80021be:	4b18      	ldr	r3, [pc, #96]	; (8002220 <HAL_DAC_MspInit+0x84>)
 80021c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021c4:	4a16      	ldr	r2, [pc, #88]	; (8002220 <HAL_DAC_MspInit+0x84>)
 80021c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021ce:	4b14      	ldr	r3, [pc, #80]	; (8002220 <HAL_DAC_MspInit+0x84>)
 80021d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021dc:	4b10      	ldr	r3, [pc, #64]	; (8002220 <HAL_DAC_MspInit+0x84>)
 80021de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e2:	4a0f      	ldr	r2, [pc, #60]	; (8002220 <HAL_DAC_MspInit+0x84>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <HAL_DAC_MspInit+0x84>)
 80021ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80021fa:	2330      	movs	r3, #48	; 0x30
 80021fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021fe:	2303      	movs	r3, #3
 8002200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002206:	f107 0314 	add.w	r3, r7, #20
 800220a:	4619      	mov	r1, r3
 800220c:	4805      	ldr	r0, [pc, #20]	; (8002224 <HAL_DAC_MspInit+0x88>)
 800220e:	f005 fad3 	bl	80077b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002212:	bf00      	nop
 8002214:	3728      	adds	r7, #40	; 0x28
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40007400 	.word	0x40007400
 8002220:	58024400 	.word	0x58024400
 8002224:	58020000 	.word	0x58020000

08002228 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b0b8      	sub	sp, #224	; 0xe0
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002240:	f107 0310 	add.w	r3, r7, #16
 8002244:	22bc      	movs	r2, #188	; 0xbc
 8002246:	2100      	movs	r1, #0
 8002248:	4618      	mov	r0, r3
 800224a:	f00d febd 	bl	800ffc8 <memset>
  if(hi2c->Instance==I2C1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a25      	ldr	r2, [pc, #148]	; (80022e8 <HAL_I2C_MspInit+0xc0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d142      	bne.n	80022de <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002258:	2308      	movs	r3, #8
 800225a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800225c:	2300      	movs	r3, #0
 800225e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002262:	f107 0310 	add.w	r3, r7, #16
 8002266:	4618      	mov	r0, r3
 8002268:	f007 fa42 	bl	80096f0 <HAL_RCCEx_PeriphCLKConfig>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002272:	f7ff fe39 	bl	8001ee8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002276:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <HAL_I2C_MspInit+0xc4>)
 8002278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800227c:	4a1b      	ldr	r2, [pc, #108]	; (80022ec <HAL_I2C_MspInit+0xc4>)
 800227e:	f043 0302 	orr.w	r3, r3, #2
 8002282:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002286:	4b19      	ldr	r3, [pc, #100]	; (80022ec <HAL_I2C_MspInit+0xc4>)
 8002288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002294:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002298:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800229c:	2312      	movs	r3, #18
 800229e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a8:	2300      	movs	r3, #0
 80022aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022ae:	2304      	movs	r3, #4
 80022b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022b8:	4619      	mov	r1, r3
 80022ba:	480d      	ldr	r0, [pc, #52]	; (80022f0 <HAL_I2C_MspInit+0xc8>)
 80022bc:	f005 fa7c 	bl	80077b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022c0:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <HAL_I2C_MspInit+0xc4>)
 80022c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022c6:	4a09      	ldr	r2, [pc, #36]	; (80022ec <HAL_I2C_MspInit+0xc4>)
 80022c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_I2C_MspInit+0xc4>)
 80022d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022de:	bf00      	nop
 80022e0:	37e0      	adds	r7, #224	; 0xe0
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40005400 	.word	0x40005400
 80022ec:	58024400 	.word	0x58024400
 80022f0:	58020400 	.word	0x58020400

080022f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b0ba      	sub	sp, #232	; 0xe8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800230c:	f107 0318 	add.w	r3, r7, #24
 8002310:	22bc      	movs	r2, #188	; 0xbc
 8002312:	2100      	movs	r1, #0
 8002314:	4618      	mov	r0, r3
 8002316:	f00d fe57 	bl	800ffc8 <memset>
  if(hspi->Instance==SPI1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a49      	ldr	r2, [pc, #292]	; (8002444 <HAL_SPI_MspInit+0x150>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d142      	bne.n	80023aa <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002328:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800232a:	2300      	movs	r3, #0
 800232c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800232e:	f107 0318 	add.w	r3, r7, #24
 8002332:	4618      	mov	r0, r3
 8002334:	f007 f9dc 	bl	80096f0 <HAL_RCCEx_PeriphCLKConfig>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800233e:	f7ff fdd3 	bl	8001ee8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002342:	4b41      	ldr	r3, [pc, #260]	; (8002448 <HAL_SPI_MspInit+0x154>)
 8002344:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002348:	4a3f      	ldr	r2, [pc, #252]	; (8002448 <HAL_SPI_MspInit+0x154>)
 800234a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800234e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002352:	4b3d      	ldr	r3, [pc, #244]	; (8002448 <HAL_SPI_MspInit+0x154>)
 8002354:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002358:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002360:	4b39      	ldr	r3, [pc, #228]	; (8002448 <HAL_SPI_MspInit+0x154>)
 8002362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002366:	4a38      	ldr	r2, [pc, #224]	; (8002448 <HAL_SPI_MspInit+0x154>)
 8002368:	f043 0302 	orr.w	r3, r3, #2
 800236c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002370:	4b35      	ldr	r3, [pc, #212]	; (8002448 <HAL_SPI_MspInit+0x154>)
 8002372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	613b      	str	r3, [r7, #16]
 800237c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800237e:	2318      	movs	r3, #24
 8002380:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002390:	2300      	movs	r3, #0
 8002392:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002396:	2305      	movs	r3, #5
 8002398:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023a0:	4619      	mov	r1, r3
 80023a2:	482a      	ldr	r0, [pc, #168]	; (800244c <HAL_SPI_MspInit+0x158>)
 80023a4:	f005 fa08 	bl	80077b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80023a8:	e047      	b.n	800243a <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a28      	ldr	r2, [pc, #160]	; (8002450 <HAL_SPI_MspInit+0x15c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d142      	bne.n	800243a <HAL_SPI_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80023b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023be:	f107 0318 	add.w	r3, r7, #24
 80023c2:	4618      	mov	r0, r3
 80023c4:	f007 f994 	bl	80096f0 <HAL_RCCEx_PeriphCLKConfig>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_SPI_MspInit+0xde>
      Error_Handler();
 80023ce:	f7ff fd8b 	bl	8001ee8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023d2:	4b1d      	ldr	r3, [pc, #116]	; (8002448 <HAL_SPI_MspInit+0x154>)
 80023d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023d8:	4a1b      	ldr	r2, [pc, #108]	; (8002448 <HAL_SPI_MspInit+0x154>)
 80023da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023e2:	4b19      	ldr	r3, [pc, #100]	; (8002448 <HAL_SPI_MspInit+0x154>)
 80023e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f0:	4b15      	ldr	r3, [pc, #84]	; (8002448 <HAL_SPI_MspInit+0x154>)
 80023f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f6:	4a14      	ldr	r2, [pc, #80]	; (8002448 <HAL_SPI_MspInit+0x154>)
 80023f8:	f043 0302 	orr.w	r3, r3, #2
 80023fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <HAL_SPI_MspInit+0x154>)
 8002402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800240e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002412:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002416:	2302      	movs	r3, #2
 8002418:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002422:	2300      	movs	r3, #0
 8002424:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002428:	2305      	movs	r3, #5
 800242a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002432:	4619      	mov	r1, r3
 8002434:	4805      	ldr	r0, [pc, #20]	; (800244c <HAL_SPI_MspInit+0x158>)
 8002436:	f005 f9bf 	bl	80077b8 <HAL_GPIO_Init>
}
 800243a:	bf00      	nop
 800243c:	37e8      	adds	r7, #232	; 0xe8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40013000 	.word	0x40013000
 8002448:	58024400 	.word	0x58024400
 800244c:	58020400 	.word	0x58020400
 8002450:	40003800 	.word	0x40003800

08002454 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a29      	ldr	r2, [pc, #164]	; (8002508 <HAL_TIM_PWM_MspInit+0xb4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d12f      	bne.n	80024c6 <HAL_TIM_PWM_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002466:	4b29      	ldr	r3, [pc, #164]	; (800250c <HAL_TIM_PWM_MspInit+0xb8>)
 8002468:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800246c:	4a27      	ldr	r2, [pc, #156]	; (800250c <HAL_TIM_PWM_MspInit+0xb8>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002476:	4b25      	ldr	r3, [pc, #148]	; (800250c <HAL_TIM_PWM_MspInit+0xb8>)
 8002478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002484:	2200      	movs	r2, #0
 8002486:	2100      	movs	r1, #0
 8002488:	2018      	movs	r0, #24
 800248a:	f002 f95c 	bl	8004746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800248e:	2018      	movs	r0, #24
 8002490:	f002 f973 	bl	800477a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002494:	2200      	movs	r2, #0
 8002496:	2100      	movs	r1, #0
 8002498:	2019      	movs	r0, #25
 800249a:	f002 f954 	bl	8004746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800249e:	2019      	movs	r0, #25
 80024a0:	f002 f96b 	bl	800477a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80024a4:	2200      	movs	r2, #0
 80024a6:	2100      	movs	r1, #0
 80024a8:	201a      	movs	r0, #26
 80024aa:	f002 f94c 	bl	8004746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80024ae:	201a      	movs	r0, #26
 80024b0:	f002 f963 	bl	800477a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80024b4:	2200      	movs	r2, #0
 80024b6:	2100      	movs	r1, #0
 80024b8:	201b      	movs	r0, #27
 80024ba:	f002 f944 	bl	8004746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80024be:	201b      	movs	r0, #27
 80024c0:	f002 f95b 	bl	800477a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80024c4:	e01b      	b.n	80024fe <HAL_TIM_PWM_MspInit+0xaa>
  else if(htim_pwm->Instance==TIM2)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ce:	d116      	bne.n	80024fe <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024d0:	4b0e      	ldr	r3, [pc, #56]	; (800250c <HAL_TIM_PWM_MspInit+0xb8>)
 80024d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024d6:	4a0d      	ldr	r2, [pc, #52]	; (800250c <HAL_TIM_PWM_MspInit+0xb8>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024e0:	4b0a      	ldr	r3, [pc, #40]	; (800250c <HAL_TIM_PWM_MspInit+0xb8>)
 80024e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024ee:	2200      	movs	r2, #0
 80024f0:	2100      	movs	r1, #0
 80024f2:	201c      	movs	r0, #28
 80024f4:	f002 f927 	bl	8004746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024f8:	201c      	movs	r0, #28
 80024fa:	f002 f93e 	bl	800477a <HAL_NVIC_EnableIRQ>
}
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40010000 	.word	0x40010000
 800250c:	58024400 	.word	0x58024400

08002510 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	; 0x28
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 0314 	add.w	r3, r7, #20
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a26      	ldr	r2, [pc, #152]	; (80025c8 <HAL_TIM_MspPostInit+0xb8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d120      	bne.n	8002574 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002532:	4b26      	ldr	r3, [pc, #152]	; (80025cc <HAL_TIM_MspPostInit+0xbc>)
 8002534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002538:	4a24      	ldr	r2, [pc, #144]	; (80025cc <HAL_TIM_MspPostInit+0xbc>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002542:	4b22      	ldr	r3, [pc, #136]	; (80025cc <HAL_TIM_MspPostInit+0xbc>)
 8002544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002550:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002556:	2302      	movs	r3, #2
 8002558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255e:	2300      	movs	r3, #0
 8002560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002562:	2301      	movs	r3, #1
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002566:	f107 0314 	add.w	r3, r7, #20
 800256a:	4619      	mov	r1, r3
 800256c:	4818      	ldr	r0, [pc, #96]	; (80025d0 <HAL_TIM_MspPostInit+0xc0>)
 800256e:	f005 f923 	bl	80077b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002572:	e024      	b.n	80025be <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800257c:	d11f      	bne.n	80025be <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <HAL_TIM_MspPostInit+0xbc>)
 8002580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002584:	4a11      	ldr	r2, [pc, #68]	; (80025cc <HAL_TIM_MspPostInit+0xbc>)
 8002586:	f043 0302 	orr.w	r3, r3, #2
 800258a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800258e:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <HAL_TIM_MspPostInit+0xbc>)
 8002590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800259c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025aa:	2300      	movs	r3, #0
 80025ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025ae:	2301      	movs	r3, #1
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b2:	f107 0314 	add.w	r3, r7, #20
 80025b6:	4619      	mov	r1, r3
 80025b8:	4806      	ldr	r0, [pc, #24]	; (80025d4 <HAL_TIM_MspPostInit+0xc4>)
 80025ba:	f005 f8fd 	bl	80077b8 <HAL_GPIO_Init>
}
 80025be:	bf00      	nop
 80025c0:	3728      	adds	r7, #40	; 0x28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40010000 	.word	0x40010000
 80025cc:	58024400 	.word	0x58024400
 80025d0:	58020000 	.word	0x58020000
 80025d4:	58020400 	.word	0x58020400

080025d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b0b8      	sub	sp, #224	; 0xe0
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025f0:	f107 0310 	add.w	r3, r7, #16
 80025f4:	22bc      	movs	r2, #188	; 0xbc
 80025f6:	2100      	movs	r1, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f00d fce5 	bl	800ffc8 <memset>
  if(huart->Instance==USART1)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a29      	ldr	r2, [pc, #164]	; (80026a8 <HAL_UART_MspInit+0xd0>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d14a      	bne.n	800269e <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002608:	2301      	movs	r3, #1
 800260a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800260c:	2300      	movs	r3, #0
 800260e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002612:	f107 0310 	add.w	r3, r7, #16
 8002616:	4618      	mov	r0, r3
 8002618:	f007 f86a 	bl	80096f0 <HAL_RCCEx_PeriphCLKConfig>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002622:	f7ff fc61 	bl	8001ee8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002626:	4b21      	ldr	r3, [pc, #132]	; (80026ac <HAL_UART_MspInit+0xd4>)
 8002628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800262c:	4a1f      	ldr	r2, [pc, #124]	; (80026ac <HAL_UART_MspInit+0xd4>)
 800262e:	f043 0310 	orr.w	r3, r3, #16
 8002632:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002636:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <HAL_UART_MspInit+0xd4>)
 8002638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800263c:	f003 0310 	and.w	r3, r3, #16
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002644:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_UART_MspInit+0xd4>)
 8002646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800264a:	4a18      	ldr	r2, [pc, #96]	; (80026ac <HAL_UART_MspInit+0xd4>)
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002654:	4b15      	ldr	r3, [pc, #84]	; (80026ac <HAL_UART_MspInit+0xd4>)
 8002656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002662:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002666:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266a:	2302      	movs	r3, #2
 800266c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002676:	2300      	movs	r3, #0
 8002678:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800267c:	2307      	movs	r3, #7
 800267e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002682:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002686:	4619      	mov	r1, r3
 8002688:	4809      	ldr	r0, [pc, #36]	; (80026b0 <HAL_UART_MspInit+0xd8>)
 800268a:	f005 f895 	bl	80077b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800268e:	2200      	movs	r2, #0
 8002690:	2100      	movs	r1, #0
 8002692:	2025      	movs	r0, #37	; 0x25
 8002694:	f002 f857 	bl	8004746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002698:	2025      	movs	r0, #37	; 0x25
 800269a:	f002 f86e 	bl	800477a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800269e:	bf00      	nop
 80026a0:	37e0      	adds	r7, #224	; 0xe0
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40011000 	.word	0x40011000
 80026ac:	58024400 	.word	0x58024400
 80026b0:	58020000 	.word	0x58020000

080026b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026b8:	e7fe      	b.n	80026b8 <NMI_Handler+0x4>

080026ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026be:	e7fe      	b.n	80026be <HardFault_Handler+0x4>

080026c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026c4:	e7fe      	b.n	80026c4 <MemManage_Handler+0x4>

080026c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026c6:	b480      	push	{r7}
 80026c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ca:	e7fe      	b.n	80026ca <BusFault_Handler+0x4>

080026cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026d0:	e7fe      	b.n	80026d0 <UsageFault_Handler+0x4>

080026d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026d2:	b480      	push	{r7}
 80026d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026ee:	b480      	push	{r7}
 80026f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002700:	f000 f9ac 	bl	8002a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}

08002708 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800270c:	4802      	ldr	r0, [pc, #8]	; (8002718 <DMA1_Stream0_IRQHandler+0x10>)
 800270e:	f003 fd41 	bl	8006194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	24000184 	.word	0x24000184

0800271c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002720:	4802      	ldr	r0, [pc, #8]	; (800272c <DMA1_Stream1_IRQHandler+0x10>)
 8002722:	f003 fd37 	bl	8006194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	240001fc 	.word	0x240001fc

08002730 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002734:	4802      	ldr	r0, [pc, #8]	; (8002740 <TIM1_BRK_IRQHandler+0x10>)
 8002736:	f00a f8cc 	bl	800c8d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	240003e4 	.word	0x240003e4

08002744 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002748:	4802      	ldr	r0, [pc, #8]	; (8002754 <TIM1_UP_IRQHandler+0x10>)
 800274a:	f00a f8c2 	bl	800c8d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	240003e4 	.word	0x240003e4

08002758 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800275c:	4802      	ldr	r0, [pc, #8]	; (8002768 <TIM1_TRG_COM_IRQHandler+0x10>)
 800275e:	f00a f8b8 	bl	800c8d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	240003e4 	.word	0x240003e4

0800276c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002770:	4802      	ldr	r0, [pc, #8]	; (800277c <TIM1_CC_IRQHandler+0x10>)
 8002772:	f00a f8ae 	bl	800c8d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	240003e4 	.word	0x240003e4

08002780 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002784:	4802      	ldr	r0, [pc, #8]	; (8002790 <TIM2_IRQHandler+0x10>)
 8002786:	f00a f8a4 	bl	800c8d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	24000430 	.word	0x24000430

08002794 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002798:	4802      	ldr	r0, [pc, #8]	; (80027a4 <USART1_IRQHandler+0x10>)
 800279a:	f00b f8f1 	bl	800d980 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	2400047c 	.word	0x2400047c

080027a8 <_sbrk>:
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	4a14      	ldr	r2, [pc, #80]	; (8002804 <_sbrk+0x5c>)
 80027b2:	4b15      	ldr	r3, [pc, #84]	; (8002808 <_sbrk+0x60>)
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	4b13      	ldr	r3, [pc, #76]	; (800280c <_sbrk+0x64>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d102      	bne.n	80027ca <_sbrk+0x22>
 80027c4:	4b11      	ldr	r3, [pc, #68]	; (800280c <_sbrk+0x64>)
 80027c6:	4a12      	ldr	r2, [pc, #72]	; (8002810 <_sbrk+0x68>)
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	4b10      	ldr	r3, [pc, #64]	; (800280c <_sbrk+0x64>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4413      	add	r3, r2
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d207      	bcs.n	80027e8 <_sbrk+0x40>
 80027d8:	f00d fbae 	bl	800ff38 <__errno>
 80027dc:	4603      	mov	r3, r0
 80027de:	220c      	movs	r2, #12
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027e6:	e009      	b.n	80027fc <_sbrk+0x54>
 80027e8:	4b08      	ldr	r3, [pc, #32]	; (800280c <_sbrk+0x64>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	4b07      	ldr	r3, [pc, #28]	; (800280c <_sbrk+0x64>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4413      	add	r3, r2
 80027f6:	4a05      	ldr	r2, [pc, #20]	; (800280c <_sbrk+0x64>)
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	24080000 	.word	0x24080000
 8002808:	00000400 	.word	0x00000400
 800280c:	24000660 	.word	0x24000660
 8002810:	24000678 	.word	0x24000678

08002814 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002818:	4b37      	ldr	r3, [pc, #220]	; (80028f8 <SystemInit+0xe4>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	4a36      	ldr	r2, [pc, #216]	; (80028f8 <SystemInit+0xe4>)
 8002820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002828:	4b34      	ldr	r3, [pc, #208]	; (80028fc <SystemInit+0xe8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 030f 	and.w	r3, r3, #15
 8002830:	2b06      	cmp	r3, #6
 8002832:	d807      	bhi.n	8002844 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002834:	4b31      	ldr	r3, [pc, #196]	; (80028fc <SystemInit+0xe8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f023 030f 	bic.w	r3, r3, #15
 800283c:	4a2f      	ldr	r2, [pc, #188]	; (80028fc <SystemInit+0xe8>)
 800283e:	f043 0307 	orr.w	r3, r3, #7
 8002842:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002844:	4b2e      	ldr	r3, [pc, #184]	; (8002900 <SystemInit+0xec>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a2d      	ldr	r2, [pc, #180]	; (8002900 <SystemInit+0xec>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002850:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <SystemInit+0xec>)
 8002852:	2200      	movs	r2, #0
 8002854:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002856:	4b2a      	ldr	r3, [pc, #168]	; (8002900 <SystemInit+0xec>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	4929      	ldr	r1, [pc, #164]	; (8002900 <SystemInit+0xec>)
 800285c:	4b29      	ldr	r3, [pc, #164]	; (8002904 <SystemInit+0xf0>)
 800285e:	4013      	ands	r3, r2
 8002860:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002862:	4b26      	ldr	r3, [pc, #152]	; (80028fc <SystemInit+0xe8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d007      	beq.n	800287e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800286e:	4b23      	ldr	r3, [pc, #140]	; (80028fc <SystemInit+0xe8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 030f 	bic.w	r3, r3, #15
 8002876:	4a21      	ldr	r2, [pc, #132]	; (80028fc <SystemInit+0xe8>)
 8002878:	f043 0307 	orr.w	r3, r3, #7
 800287c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800287e:	4b20      	ldr	r3, [pc, #128]	; (8002900 <SystemInit+0xec>)
 8002880:	2200      	movs	r2, #0
 8002882:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002884:	4b1e      	ldr	r3, [pc, #120]	; (8002900 <SystemInit+0xec>)
 8002886:	2200      	movs	r2, #0
 8002888:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800288a:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <SystemInit+0xec>)
 800288c:	2200      	movs	r2, #0
 800288e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002890:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <SystemInit+0xec>)
 8002892:	4a1d      	ldr	r2, [pc, #116]	; (8002908 <SystemInit+0xf4>)
 8002894:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002896:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <SystemInit+0xec>)
 8002898:	4a1c      	ldr	r2, [pc, #112]	; (800290c <SystemInit+0xf8>)
 800289a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800289c:	4b18      	ldr	r3, [pc, #96]	; (8002900 <SystemInit+0xec>)
 800289e:	4a1c      	ldr	r2, [pc, #112]	; (8002910 <SystemInit+0xfc>)
 80028a0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80028a2:	4b17      	ldr	r3, [pc, #92]	; (8002900 <SystemInit+0xec>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80028a8:	4b15      	ldr	r3, [pc, #84]	; (8002900 <SystemInit+0xec>)
 80028aa:	4a19      	ldr	r2, [pc, #100]	; (8002910 <SystemInit+0xfc>)
 80028ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80028ae:	4b14      	ldr	r3, [pc, #80]	; (8002900 <SystemInit+0xec>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <SystemInit+0xec>)
 80028b6:	4a16      	ldr	r2, [pc, #88]	; (8002910 <SystemInit+0xfc>)
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80028ba:	4b11      	ldr	r3, [pc, #68]	; (8002900 <SystemInit+0xec>)
 80028bc:	2200      	movs	r2, #0
 80028be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028c0:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <SystemInit+0xec>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a0e      	ldr	r2, [pc, #56]	; (8002900 <SystemInit+0xec>)
 80028c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <SystemInit+0xec>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <SystemInit+0x100>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <SystemInit+0x104>)
 80028d8:	4013      	ands	r3, r2
 80028da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028de:	d202      	bcs.n	80028e6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80028e0:	4b0e      	ldr	r3, [pc, #56]	; (800291c <SystemInit+0x108>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <SystemInit+0x10c>)
 80028e8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80028ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000ed00 	.word	0xe000ed00
 80028fc:	52002000 	.word	0x52002000
 8002900:	58024400 	.word	0x58024400
 8002904:	eaf6ed7f 	.word	0xeaf6ed7f
 8002908:	02020200 	.word	0x02020200
 800290c:	01ff0000 	.word	0x01ff0000
 8002910:	01010280 	.word	0x01010280
 8002914:	5c001000 	.word	0x5c001000
 8002918:	ffff0000 	.word	0xffff0000
 800291c:	51008108 	.word	0x51008108
 8002920:	52004000 	.word	0x52004000

08002924 <Reset_Handler>:
 8002924:	f8df d034 	ldr.w	sp, [pc, #52]	; 800295c <LoopFillZerobss+0xe>
 8002928:	f7ff ff74 	bl	8002814 <SystemInit>
 800292c:	480c      	ldr	r0, [pc, #48]	; (8002960 <LoopFillZerobss+0x12>)
 800292e:	490d      	ldr	r1, [pc, #52]	; (8002964 <LoopFillZerobss+0x16>)
 8002930:	4a0d      	ldr	r2, [pc, #52]	; (8002968 <LoopFillZerobss+0x1a>)
 8002932:	2300      	movs	r3, #0
 8002934:	e002      	b.n	800293c <LoopCopyDataInit>

08002936 <CopyDataInit>:
 8002936:	58d4      	ldr	r4, [r2, r3]
 8002938:	50c4      	str	r4, [r0, r3]
 800293a:	3304      	adds	r3, #4

0800293c <LoopCopyDataInit>:
 800293c:	18c4      	adds	r4, r0, r3
 800293e:	428c      	cmp	r4, r1
 8002940:	d3f9      	bcc.n	8002936 <CopyDataInit>
 8002942:	4a0a      	ldr	r2, [pc, #40]	; (800296c <LoopFillZerobss+0x1e>)
 8002944:	4c0a      	ldr	r4, [pc, #40]	; (8002970 <LoopFillZerobss+0x22>)
 8002946:	2300      	movs	r3, #0
 8002948:	e001      	b.n	800294e <LoopFillZerobss>

0800294a <FillZerobss>:
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	3204      	adds	r2, #4

0800294e <LoopFillZerobss>:
 800294e:	42a2      	cmp	r2, r4
 8002950:	d3fb      	bcc.n	800294a <FillZerobss>
 8002952:	f00d faf7 	bl	800ff44 <__libc_init_array>
 8002956:	f7fe fb95 	bl	8001084 <main>
 800295a:	4770      	bx	lr
 800295c:	24080000 	.word	0x24080000
 8002960:	24000000 	.word	0x24000000
 8002964:	24000098 	.word	0x24000098
 8002968:	08010254 	.word	0x08010254
 800296c:	240000a0 	.word	0x240000a0
 8002970:	24000678 	.word	0x24000678

08002974 <ADC3_IRQHandler>:
 8002974:	e7fe      	b.n	8002974 <ADC3_IRQHandler>
	...

08002978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800297e:	2003      	movs	r0, #3
 8002980:	f001 fed6 	bl	8004730 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002984:	f006 fcde 	bl	8009344 <HAL_RCC_GetSysClockFreq>
 8002988:	4602      	mov	r2, r0
 800298a:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <HAL_Init+0x68>)
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	0a1b      	lsrs	r3, r3, #8
 8002990:	f003 030f 	and.w	r3, r3, #15
 8002994:	4913      	ldr	r1, [pc, #76]	; (80029e4 <HAL_Init+0x6c>)
 8002996:	5ccb      	ldrb	r3, [r1, r3]
 8002998:	f003 031f 	and.w	r3, r3, #31
 800299c:	fa22 f303 	lsr.w	r3, r2, r3
 80029a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029a2:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <HAL_Init+0x68>)
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	4a0e      	ldr	r2, [pc, #56]	; (80029e4 <HAL_Init+0x6c>)
 80029ac:	5cd3      	ldrb	r3, [r2, r3]
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	fa22 f303 	lsr.w	r3, r2, r3
 80029b8:	4a0b      	ldr	r2, [pc, #44]	; (80029e8 <HAL_Init+0x70>)
 80029ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029bc:	4a0b      	ldr	r2, [pc, #44]	; (80029ec <HAL_Init+0x74>)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029c2:	200f      	movs	r0, #15
 80029c4:	f000 f814 	bl	80029f0 <HAL_InitTick>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e002      	b.n	80029d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80029d2:	f7ff fa8f 	bl	8001ef4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	58024400 	.word	0x58024400
 80029e4:	08010204 	.word	0x08010204
 80029e8:	24000028 	.word	0x24000028
 80029ec:	24000024 	.word	0x24000024

080029f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80029f8:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <HAL_InitTick+0x60>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e021      	b.n	8002a48 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a04:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <HAL_InitTick+0x64>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <HAL_InitTick+0x60>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f001 febb 	bl	8004796 <HAL_SYSTICK_Config>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e00e      	b.n	8002a48 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b0f      	cmp	r3, #15
 8002a2e:	d80a      	bhi.n	8002a46 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a30:	2200      	movs	r2, #0
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a38:	f001 fe85 	bl	8004746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a3c:	4a06      	ldr	r2, [pc, #24]	; (8002a58 <HAL_InitTick+0x68>)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e000      	b.n	8002a48 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	24000030 	.word	0x24000030
 8002a54:	24000024 	.word	0x24000024
 8002a58:	2400002c 	.word	0x2400002c

08002a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_IncTick+0x20>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	461a      	mov	r2, r3
 8002a66:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_IncTick+0x24>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <HAL_IncTick+0x24>)
 8002a6e:	6013      	str	r3, [r2, #0]
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	24000030 	.word	0x24000030
 8002a80:	24000664 	.word	0x24000664

08002a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return uwTick;
 8002a88:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <HAL_GetTick+0x14>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	24000664 	.word	0x24000664

08002a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aa4:	f7ff ffee 	bl	8002a84 <HAL_GetTick>
 8002aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ab4:	d005      	beq.n	8002ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <HAL_Delay+0x44>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4413      	add	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ac2:	bf00      	nop
 8002ac4:	f7ff ffde 	bl	8002a84 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d8f7      	bhi.n	8002ac4 <HAL_Delay+0x28>
  {
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	24000030 	.word	0x24000030

08002ae4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002ae8:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <HAL_SuspendTick+0x1c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <HAL_SuspendTick+0x1c>)
 8002aee:	f023 0302 	bic.w	r3, r3, #2
 8002af2:	6013      	str	r3, [r2, #0]
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	e000e010 	.word	0xe000e010

08002b04 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002b08:	4b03      	ldr	r3, [pc, #12]	; (8002b18 <HAL_GetREVID+0x14>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	0c1b      	lsrs	r3, r3, #16
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	5c001000 	.word	0x5c001000

08002b1c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	609a      	str	r2, [r3, #8]
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	3360      	adds	r3, #96	; 0x60
 8002b96:	461a      	mov	r2, r3
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002bb8:	bf00      	nop
 8002bba:	371c      	adds	r7, #28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f003 031f 	and.w	r3, r3, #31
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	fa01 f303 	lsl.w	r3, r1, r3
 8002be4:	431a      	orrs	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	611a      	str	r2, [r3, #16]
}
 8002bea:	bf00      	nop
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b087      	sub	sp, #28
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	3360      	adds	r3, #96	; 0x60
 8002c06:	461a      	mov	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	601a      	str	r2, [r3, #0]
  }
}
 8002c20:	bf00      	nop
 8002c22:	371c      	adds	r7, #28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b087      	sub	sp, #28
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	3330      	adds	r3, #48	; 0x30
 8002c62:	461a      	mov	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	4413      	add	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f003 031f 	and.w	r3, r3, #31
 8002c7c:	211f      	movs	r1, #31
 8002c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c82:	43db      	mvns	r3, r3
 8002c84:	401a      	ands	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	0e9b      	lsrs	r3, r3, #26
 8002c8a:	f003 011f 	and.w	r1, r3, #31
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	fa01 f303 	lsl.w	r3, r1, r3
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c9e:	bf00      	nop
 8002ca0:	371c      	adds	r7, #28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f023 0203 	bic.w	r2, r3, #3
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	60da      	str	r2, [r3, #12]
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	3314      	adds	r3, #20
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	0e5b      	lsrs	r3, r3, #25
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	4413      	add	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	0d1b      	lsrs	r3, r3, #20
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	2107      	movs	r1, #7
 8002cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002d02:	43db      	mvns	r3, r3
 8002d04:	401a      	ands	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	0d1b      	lsrs	r3, r3, #20
 8002d0a:	f003 031f 	and.w	r3, r3, #31
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	fa01 f303 	lsl.w	r3, r1, r3
 8002d14:	431a      	orrs	r2, r3
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d1a:	bf00      	nop
 8002d1c:	371c      	adds	r7, #28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
	...

08002d28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d40:	43db      	mvns	r3, r3
 8002d42:	401a      	ands	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f003 0318 	and.w	r3, r3, #24
 8002d4a:	4908      	ldr	r1, [pc, #32]	; (8002d6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d4c:	40d9      	lsrs	r1, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	400b      	ands	r3, r1
 8002d52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d56:	431a      	orrs	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002d5e:	bf00      	nop
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	000fffff 	.word	0x000fffff

08002d70 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 031f 	and.w	r3, r3, #31
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	4b04      	ldr	r3, [pc, #16]	; (8002dac <LL_ADC_DisableDeepPowerDown+0x20>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6093      	str	r3, [r2, #8]
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	5fffffc0 	.word	0x5fffffc0

08002db0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dc4:	d101      	bne.n	8002dca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <LL_ADC_EnableInternalRegulator+0x24>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	6fffffc0 	.word	0x6fffffc0

08002e00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e14:	d101      	bne.n	8002e1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <LL_ADC_Enable+0x24>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	f043 0201 	orr.w	r2, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	7fffffc0 	.word	0x7fffffc0

08002e50 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <LL_ADC_Disable+0x24>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	f043 0202 	orr.w	r2, r3, #2
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	7fffffc0 	.word	0x7fffffc0

08002e78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <LL_ADC_IsEnabled+0x18>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <LL_ADC_IsEnabled+0x1a>
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d101      	bne.n	8002eb6 <LL_ADC_IsDisableOngoing+0x18>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <LL_ADC_IsDisableOngoing+0x1a>
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <LL_ADC_REG_StartConversion+0x24>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	f043 0204 	orr.w	r2, r3, #4
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	7fffffc0 	.word	0x7fffffc0

08002eec <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <LL_ADC_REG_StopConversion+0x24>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	f043 0210 	orr.w	r2, r3, #16
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	7fffffc0 	.word	0x7fffffc0

08002f14 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d101      	bne.n	8002f2c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <LL_ADC_INJ_StopConversion+0x24>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	f043 0220 	orr.w	r2, r3, #32
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	7fffffc0 	.word	0x7fffffc0

08002f64 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d101      	bne.n	8002f7c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
	...

08002f8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f8c:	b590      	push	{r4, r7, lr}
 8002f8e:	b089      	sub	sp, #36	; 0x24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e18f      	b.n	80032c6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d109      	bne.n	8002fc8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7fe ffb7 	bl	8001f28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff feef 	bl	8002db0 <LL_ADC_IsDeepPowerDownEnabled>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d004      	beq.n	8002fe2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff fed5 	bl	8002d8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff ff0a 	bl	8002e00 <LL_ADC_IsInternalRegulatorEnabled>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d114      	bne.n	800301c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff feee 	bl	8002dd8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ffc:	4b87      	ldr	r3, [pc, #540]	; (800321c <HAL_ADC_Init+0x290>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	099b      	lsrs	r3, r3, #6
 8003002:	4a87      	ldr	r2, [pc, #540]	; (8003220 <HAL_ADC_Init+0x294>)
 8003004:	fba2 2303 	umull	r2, r3, r2, r3
 8003008:	099b      	lsrs	r3, r3, #6
 800300a:	3301      	adds	r3, #1
 800300c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800300e:	e002      	b.n	8003016 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	3b01      	subs	r3, #1
 8003014:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1f9      	bne.n	8003010 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff feed 	bl	8002e00 <LL_ADC_IsInternalRegulatorEnabled>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10d      	bne.n	8003048 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003030:	f043 0210 	orr.w	r2, r3, #16
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303c:	f043 0201 	orr.w	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff ff61 	bl	8002f14 <LL_ADC_REG_IsConversionOngoing>
 8003052:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	2b00      	cmp	r3, #0
 800305e:	f040 8129 	bne.w	80032b4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b00      	cmp	r3, #0
 8003066:	f040 8125 	bne.w	80032b4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003072:	f043 0202 	orr.w	r2, r3, #2
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fefa 	bl	8002e78 <LL_ADC_IsEnabled>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d136      	bne.n	80030f8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a65      	ldr	r2, [pc, #404]	; (8003224 <HAL_ADC_Init+0x298>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d004      	beq.n	800309e <HAL_ADC_Init+0x112>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a63      	ldr	r2, [pc, #396]	; (8003228 <HAL_ADC_Init+0x29c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d10e      	bne.n	80030bc <HAL_ADC_Init+0x130>
 800309e:	4861      	ldr	r0, [pc, #388]	; (8003224 <HAL_ADC_Init+0x298>)
 80030a0:	f7ff feea 	bl	8002e78 <LL_ADC_IsEnabled>
 80030a4:	4604      	mov	r4, r0
 80030a6:	4860      	ldr	r0, [pc, #384]	; (8003228 <HAL_ADC_Init+0x29c>)
 80030a8:	f7ff fee6 	bl	8002e78 <LL_ADC_IsEnabled>
 80030ac:	4603      	mov	r3, r0
 80030ae:	4323      	orrs	r3, r4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bf0c      	ite	eq
 80030b4:	2301      	moveq	r3, #1
 80030b6:	2300      	movne	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	e008      	b.n	80030ce <HAL_ADC_Init+0x142>
 80030bc:	485b      	ldr	r0, [pc, #364]	; (800322c <HAL_ADC_Init+0x2a0>)
 80030be:	f7ff fedb 	bl	8002e78 <LL_ADC_IsEnabled>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	bf0c      	ite	eq
 80030c8:	2301      	moveq	r3, #1
 80030ca:	2300      	movne	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d012      	beq.n	80030f8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a53      	ldr	r2, [pc, #332]	; (8003224 <HAL_ADC_Init+0x298>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d004      	beq.n	80030e6 <HAL_ADC_Init+0x15a>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a51      	ldr	r2, [pc, #324]	; (8003228 <HAL_ADC_Init+0x29c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d101      	bne.n	80030ea <HAL_ADC_Init+0x15e>
 80030e6:	4a52      	ldr	r2, [pc, #328]	; (8003230 <HAL_ADC_Init+0x2a4>)
 80030e8:	e000      	b.n	80030ec <HAL_ADC_Init+0x160>
 80030ea:	4a52      	ldr	r2, [pc, #328]	; (8003234 <HAL_ADC_Init+0x2a8>)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	4619      	mov	r1, r3
 80030f2:	4610      	mov	r0, r2
 80030f4:	f7ff fd12 	bl	8002b1c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80030f8:	f7ff fd04 	bl	8002b04 <HAL_GetREVID>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f241 0203 	movw	r2, #4099	; 0x1003
 8003102:	4293      	cmp	r3, r2
 8003104:	d914      	bls.n	8003130 <HAL_ADC_Init+0x1a4>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b10      	cmp	r3, #16
 800310c:	d110      	bne.n	8003130 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	7d5b      	ldrb	r3, [r3, #21]
 8003112:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003118:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800311e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	7f1b      	ldrb	r3, [r3, #28]
 8003124:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003126:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003128:	f043 030c 	orr.w	r3, r3, #12
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	e00d      	b.n	800314c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	7d5b      	ldrb	r3, [r3, #21]
 8003134:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800313a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003140:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	7f1b      	ldrb	r3, [r3, #28]
 8003146:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003148:	4313      	orrs	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	7f1b      	ldrb	r3, [r3, #28]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d106      	bne.n	8003162 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	3b01      	subs	r3, #1
 800315a:	045b      	lsls	r3, r3, #17
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	2b00      	cmp	r3, #0
 8003168:	d009      	beq.n	800317e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	4b2c      	ldr	r3, [pc, #176]	; (8003238 <HAL_ADC_Init+0x2ac>)
 8003186:	4013      	ands	r3, r2
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6812      	ldr	r2, [r2, #0]
 800318c:	69b9      	ldr	r1, [r7, #24]
 800318e:	430b      	orrs	r3, r1
 8003190:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff febc 	bl	8002f14 <LL_ADC_REG_IsConversionOngoing>
 800319c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff fede 	bl	8002f64 <LL_ADC_INJ_IsConversionOngoing>
 80031a8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d15f      	bne.n	8003270 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d15c      	bne.n	8003270 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	7d1b      	ldrb	r3, [r3, #20]
 80031ba:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	4b1c      	ldr	r3, [pc, #112]	; (800323c <HAL_ADC_Init+0x2b0>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6812      	ldr	r2, [r2, #0]
 80031d2:	69b9      	ldr	r1, [r7, #24]
 80031d4:	430b      	orrs	r3, r1
 80031d6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d130      	bne.n	8003244 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691a      	ldr	r2, [r3, #16]
 80031ee:	4b14      	ldr	r3, [pc, #80]	; (8003240 <HAL_ADC_Init+0x2b4>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031f6:	3a01      	subs	r2, #1
 80031f8:	0411      	lsls	r1, r2, #16
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031fe:	4311      	orrs	r1, r2
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003204:	4311      	orrs	r1, r2
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800320a:	430a      	orrs	r2, r1
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	611a      	str	r2, [r3, #16]
 8003218:	e01c      	b.n	8003254 <HAL_ADC_Init+0x2c8>
 800321a:	bf00      	nop
 800321c:	24000024 	.word	0x24000024
 8003220:	053e2d63 	.word	0x053e2d63
 8003224:	40022000 	.word	0x40022000
 8003228:	40022100 	.word	0x40022100
 800322c:	58026000 	.word	0x58026000
 8003230:	40022300 	.word	0x40022300
 8003234:	58026300 	.word	0x58026300
 8003238:	fff0c003 	.word	0xfff0c003
 800323c:	ffffbffc 	.word	0xffffbffc
 8003240:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691a      	ldr	r2, [r3, #16]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0201 	bic.w	r2, r2, #1
 8003252:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 feea 	bl	8004044 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d10c      	bne.n	8003292 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	f023 010f 	bic.w	r1, r3, #15
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	1e5a      	subs	r2, r3, #1
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	631a      	str	r2, [r3, #48]	; 0x30
 8003290:	e007      	b.n	80032a2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 020f 	bic.w	r2, r2, #15
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a6:	f023 0303 	bic.w	r3, r3, #3
 80032aa:	f043 0201 	orr.w	r2, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	655a      	str	r2, [r3, #84]	; 0x54
 80032b2:	e007      	b.n	80032c4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b8:	f043 0210 	orr.w	r2, r3, #16
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80032c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3724      	adds	r7, #36	; 0x24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd90      	pop	{r4, r7, pc}
 80032ce:	bf00      	nop

080032d0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a55      	ldr	r2, [pc, #340]	; (8003438 <HAL_ADC_Start_DMA+0x168>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d004      	beq.n	80032f0 <HAL_ADC_Start_DMA+0x20>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a54      	ldr	r2, [pc, #336]	; (800343c <HAL_ADC_Start_DMA+0x16c>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d101      	bne.n	80032f4 <HAL_ADC_Start_DMA+0x24>
 80032f0:	4b53      	ldr	r3, [pc, #332]	; (8003440 <HAL_ADC_Start_DMA+0x170>)
 80032f2:	e000      	b.n	80032f6 <HAL_ADC_Start_DMA+0x26>
 80032f4:	4b53      	ldr	r3, [pc, #332]	; (8003444 <HAL_ADC_Start_DMA+0x174>)
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff fd3a 	bl	8002d70 <LL_ADC_GetMultimode>
 80032fc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff fe06 	bl	8002f14 <LL_ADC_REG_IsConversionOngoing>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	f040 808c 	bne.w	8003428 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003316:	2b01      	cmp	r3, #1
 8003318:	d101      	bne.n	800331e <HAL_ADC_Start_DMA+0x4e>
 800331a:	2302      	movs	r3, #2
 800331c:	e087      	b.n	800342e <HAL_ADC_Start_DMA+0x15e>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	2b05      	cmp	r3, #5
 8003330:	d002      	beq.n	8003338 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	2b09      	cmp	r3, #9
 8003336:	d170      	bne.n	800341a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 fd05 	bl	8003d48 <ADC_Enable>
 800333e:	4603      	mov	r3, r0
 8003340:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003342:	7dfb      	ldrb	r3, [r7, #23]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d163      	bne.n	8003410 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800334c:	4b3e      	ldr	r3, [pc, #248]	; (8003448 <HAL_ADC_Start_DMA+0x178>)
 800334e:	4013      	ands	r3, r2
 8003350:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a37      	ldr	r2, [pc, #220]	; (800343c <HAL_ADC_Start_DMA+0x16c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d002      	beq.n	8003368 <HAL_ADC_Start_DMA+0x98>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	e000      	b.n	800336a <HAL_ADC_Start_DMA+0x9a>
 8003368:	4b33      	ldr	r3, [pc, #204]	; (8003438 <HAL_ADC_Start_DMA+0x168>)
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	6812      	ldr	r2, [r2, #0]
 800336e:	4293      	cmp	r3, r2
 8003370:	d002      	beq.n	8003378 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d105      	bne.n	8003384 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d006      	beq.n	800339e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003394:	f023 0206 	bic.w	r2, r3, #6
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	659a      	str	r2, [r3, #88]	; 0x58
 800339c:	e002      	b.n	80033a4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a8:	4a28      	ldr	r2, [pc, #160]	; (800344c <HAL_ADC_Start_DMA+0x17c>)
 80033aa:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b0:	4a27      	ldr	r2, [pc, #156]	; (8003450 <HAL_ADC_Start_DMA+0x180>)
 80033b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b8:	4a26      	ldr	r2, [pc, #152]	; (8003454 <HAL_ADC_Start_DMA+0x184>)
 80033ba:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	221c      	movs	r2, #28
 80033c2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0210 	orr.w	r2, r2, #16
 80033da:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	4619      	mov	r1, r3
 80033e6:	4610      	mov	r0, r2
 80033e8:	f7ff fc5f 	bl	8002caa <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	3340      	adds	r3, #64	; 0x40
 80033f6:	4619      	mov	r1, r3
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f001 fefc 	bl	80051f8 <HAL_DMA_Start_IT>
 8003400:	4603      	mov	r3, r0
 8003402:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff fd5b 	bl	8002ec4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800340e:	e00d      	b.n	800342c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003418:	e008      	b.n	800342c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003426:	e001      	b.n	800342c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003428:	2302      	movs	r3, #2
 800342a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800342c:	7dfb      	ldrb	r3, [r7, #23]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40022000 	.word	0x40022000
 800343c:	40022100 	.word	0x40022100
 8003440:	40022300 	.word	0x40022300
 8003444:	58026300 	.word	0x58026300
 8003448:	fffff0fe 	.word	0xfffff0fe
 800344c:	08003f1b 	.word	0x08003f1b
 8003450:	08003ff3 	.word	0x08003ff3
 8003454:	0800400f 	.word	0x0800400f

08003458 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_ADC_Stop_DMA+0x16>
 800346a:	2302      	movs	r3, #2
 800346c:	e04f      	b.n	800350e <HAL_ADC_Stop_DMA+0xb6>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003476:	2103      	movs	r1, #3
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 fba9 	bl	8003bd0 <ADC_ConversionStop>
 800347e:	4603      	mov	r3, r0
 8003480:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d13d      	bne.n	8003504 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0203 	bic.w	r2, r2, #3
 8003496:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d10f      	bne.n	80034c6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034aa:	4618      	mov	r0, r3
 80034ac:	f002 f90e 	bl	80056cc <HAL_DMA_Abort>
 80034b0:	4603      	mov	r3, r0
 80034b2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0210 	bic.w	r2, r2, #16
 80034d4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d105      	bne.n	80034e8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fcbd 	bl	8003e5c <ADC_Disable>
 80034e2:	4603      	mov	r3, r0
 80034e4:	73fb      	strb	r3, [r7, #15]
 80034e6:	e002      	b.n	80034ee <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 fcb7 	bl	8003e5c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d107      	bne.n	8003504 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034f8:	4b07      	ldr	r3, [pc, #28]	; (8003518 <HAL_ADC_Stop_DMA+0xc0>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	f043 0201 	orr.w	r2, r3, #1
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800350c:	7bfb      	ldrb	r3, [r7, #15]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	ffffeefe 	.word	0xffffeefe

0800351c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003530:	b590      	push	{r4, r7, lr}
 8003532:	b0a1      	sub	sp, #132	; 0x84
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4a9d      	ldr	r2, [pc, #628]	; (80037c0 <HAL_ADC_ConfigChannel+0x290>)
 800354a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_ADC_ConfigChannel+0x2a>
 8003556:	2302      	movs	r3, #2
 8003558:	e321      	b.n	8003b9e <HAL_ADC_ConfigChannel+0x66e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fcd4 	bl	8002f14 <LL_ADC_REG_IsConversionOngoing>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	f040 8306 	bne.w	8003b80 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800357c:	2b00      	cmp	r3, #0
 800357e:	d108      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x62>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	0e9b      	lsrs	r3, r3, #26
 8003586:	f003 031f 	and.w	r3, r3, #31
 800358a:	2201      	movs	r2, #1
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	e016      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x90>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003598:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800359a:	fa93 f3a3 	rbit	r3, r3
 800359e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035a2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80035a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80035aa:	2320      	movs	r3, #32
 80035ac:	e003      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80035ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035b0:	fab3 f383 	clz	r3, r3
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	f003 031f 	and.w	r3, r3, #31
 80035ba:	2201      	movs	r2, #1
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6812      	ldr	r2, [r2, #0]
 80035c4:	69d1      	ldr	r1, [r2, #28]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6812      	ldr	r2, [r2, #0]
 80035ca:	430b      	orrs	r3, r1
 80035cc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6859      	ldr	r1, [r3, #4]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	461a      	mov	r2, r3
 80035dc:	f7ff fb39 	bl	8002c52 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff fc95 	bl	8002f14 <LL_ADC_REG_IsConversionOngoing>
 80035ea:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fcb7 	bl	8002f64 <LL_ADC_INJ_IsConversionOngoing>
 80035f6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f040 80b3 	bne.w	8003766 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003602:	2b00      	cmp	r3, #0
 8003604:	f040 80af 	bne.w	8003766 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6818      	ldr	r0, [r3, #0]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	6819      	ldr	r1, [r3, #0]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	461a      	mov	r2, r3
 8003616:	f7ff fb5b 	bl	8002cd0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800361a:	4b6a      	ldr	r3, [pc, #424]	; (80037c4 <HAL_ADC_ConfigChannel+0x294>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003626:	d10b      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x110>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	695a      	ldr	r2, [r3, #20]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	089b      	lsrs	r3, r3, #2
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	e01d      	b.n	800367c <HAL_ADC_ConfigChannel+0x14c>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f003 0310 	and.w	r3, r3, #16
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10b      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x136>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	695a      	ldr	r2, [r3, #20]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	089b      	lsrs	r3, r3, #2
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	e00a      	b.n	800367c <HAL_ADC_ConfigChannel+0x14c>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	695a      	ldr	r2, [r3, #20]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	089b      	lsrs	r3, r3, #2
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	2b04      	cmp	r3, #4
 8003684:	d027      	beq.n	80036d6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	6919      	ldr	r1, [r3, #16]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003694:	f7ff fa76 	bl	8002b84 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	6919      	ldr	r1, [r3, #16]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	7e5b      	ldrb	r3, [r3, #25]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d102      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x17e>
 80036a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80036ac:	e000      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x180>
 80036ae:	2300      	movs	r3, #0
 80036b0:	461a      	mov	r2, r3
 80036b2:	f7ff faa0 	bl	8002bf6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	6919      	ldr	r1, [r3, #16]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	7e1b      	ldrb	r3, [r3, #24]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d102      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x19c>
 80036c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036ca:	e000      	b.n	80036ce <HAL_ADC_ConfigChannel+0x19e>
 80036cc:	2300      	movs	r3, #0
 80036ce:	461a      	mov	r2, r3
 80036d0:	f7ff fa78 	bl	8002bc4 <LL_ADC_SetDataRightShift>
 80036d4:	e047      	b.n	8003766 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	069b      	lsls	r3, r3, #26
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d107      	bne.n	80036fa <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036f8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003700:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	069b      	lsls	r3, r3, #26
 800370a:	429a      	cmp	r2, r3
 800370c:	d107      	bne.n	800371e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800371c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003724:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	069b      	lsls	r3, r3, #26
 800372e:	429a      	cmp	r2, r3
 8003730:	d107      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003740:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003748:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	069b      	lsls	r3, r3, #26
 8003752:	429a      	cmp	r2, r3
 8003754:	d107      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003764:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff fb84 	bl	8002e78 <LL_ADC_IsEnabled>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	f040 820d 	bne.w	8003b92 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6818      	ldr	r0, [r3, #0]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	6819      	ldr	r1, [r3, #0]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	461a      	mov	r2, r3
 8003786:	f7ff facf 	bl	8002d28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	4a0c      	ldr	r2, [pc, #48]	; (80037c0 <HAL_ADC_ConfigChannel+0x290>)
 8003790:	4293      	cmp	r3, r2
 8003792:	f040 8133 	bne.w	80039fc <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d110      	bne.n	80037c8 <HAL_ADC_ConfigChannel+0x298>
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	0e9b      	lsrs	r3, r3, #26
 80037ac:	3301      	adds	r3, #1
 80037ae:	f003 031f 	and.w	r3, r3, #31
 80037b2:	2b09      	cmp	r3, #9
 80037b4:	bf94      	ite	ls
 80037b6:	2301      	movls	r3, #1
 80037b8:	2300      	movhi	r3, #0
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	e01e      	b.n	80037fc <HAL_ADC_ConfigChannel+0x2cc>
 80037be:	bf00      	nop
 80037c0:	47ff0000 	.word	0x47ff0000
 80037c4:	5c001000 	.word	0x5c001000
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037d0:	fa93 f3a3 	rbit	r3, r3
 80037d4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80037d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80037da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80037e0:	2320      	movs	r3, #32
 80037e2:	e003      	b.n	80037ec <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80037e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037e6:	fab3 f383 	clz	r3, r3
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	3301      	adds	r3, #1
 80037ee:	f003 031f 	and.w	r3, r3, #31
 80037f2:	2b09      	cmp	r3, #9
 80037f4:	bf94      	ite	ls
 80037f6:	2301      	movls	r3, #1
 80037f8:	2300      	movhi	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d079      	beq.n	80038f4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003808:	2b00      	cmp	r3, #0
 800380a:	d107      	bne.n	800381c <HAL_ADC_ConfigChannel+0x2ec>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	0e9b      	lsrs	r3, r3, #26
 8003812:	3301      	adds	r3, #1
 8003814:	069b      	lsls	r3, r3, #26
 8003816:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800381a:	e015      	b.n	8003848 <HAL_ADC_ConfigChannel+0x318>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003824:	fa93 f3a3 	rbit	r3, r3
 8003828:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800382a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800382c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800382e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003834:	2320      	movs	r3, #32
 8003836:	e003      	b.n	8003840 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800383a:	fab3 f383 	clz	r3, r3
 800383e:	b2db      	uxtb	r3, r3
 8003840:	3301      	adds	r3, #1
 8003842:	069b      	lsls	r3, r3, #26
 8003844:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003850:	2b00      	cmp	r3, #0
 8003852:	d109      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x338>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	0e9b      	lsrs	r3, r3, #26
 800385a:	3301      	adds	r3, #1
 800385c:	f003 031f 	and.w	r3, r3, #31
 8003860:	2101      	movs	r1, #1
 8003862:	fa01 f303 	lsl.w	r3, r1, r3
 8003866:	e017      	b.n	8003898 <HAL_ADC_ConfigChannel+0x368>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003870:	fa93 f3a3 	rbit	r3, r3
 8003874:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003878:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800387a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003880:	2320      	movs	r3, #32
 8003882:	e003      	b.n	800388c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003886:	fab3 f383 	clz	r3, r3
 800388a:	b2db      	uxtb	r3, r3
 800388c:	3301      	adds	r3, #1
 800388e:	f003 031f 	and.w	r3, r3, #31
 8003892:	2101      	movs	r1, #1
 8003894:	fa01 f303 	lsl.w	r3, r1, r3
 8003898:	ea42 0103 	orr.w	r1, r2, r3
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10a      	bne.n	80038be <HAL_ADC_ConfigChannel+0x38e>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	0e9b      	lsrs	r3, r3, #26
 80038ae:	3301      	adds	r3, #1
 80038b0:	f003 021f 	and.w	r2, r3, #31
 80038b4:	4613      	mov	r3, r2
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	4413      	add	r3, r2
 80038ba:	051b      	lsls	r3, r3, #20
 80038bc:	e018      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x3c0>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c6:	fa93 f3a3 	rbit	r3, r3
 80038ca:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80038cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80038d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80038d6:	2320      	movs	r3, #32
 80038d8:	e003      	b.n	80038e2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80038da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038dc:	fab3 f383 	clz	r3, r3
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	3301      	adds	r3, #1
 80038e4:	f003 021f 	and.w	r2, r3, #31
 80038e8:	4613      	mov	r3, r2
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	4413      	add	r3, r2
 80038ee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038f0:	430b      	orrs	r3, r1
 80038f2:	e07e      	b.n	80039f2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d107      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x3e0>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	0e9b      	lsrs	r3, r3, #26
 8003906:	3301      	adds	r3, #1
 8003908:	069b      	lsls	r3, r3, #26
 800390a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800390e:	e015      	b.n	800393c <HAL_ADC_ConfigChannel+0x40c>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003918:	fa93 f3a3 	rbit	r3, r3
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003928:	2320      	movs	r3, #32
 800392a:	e003      	b.n	8003934 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392e:	fab3 f383 	clz	r3, r3
 8003932:	b2db      	uxtb	r3, r3
 8003934:	3301      	adds	r3, #1
 8003936:	069b      	lsls	r3, r3, #26
 8003938:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003944:	2b00      	cmp	r3, #0
 8003946:	d109      	bne.n	800395c <HAL_ADC_ConfigChannel+0x42c>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	0e9b      	lsrs	r3, r3, #26
 800394e:	3301      	adds	r3, #1
 8003950:	f003 031f 	and.w	r3, r3, #31
 8003954:	2101      	movs	r1, #1
 8003956:	fa01 f303 	lsl.w	r3, r1, r3
 800395a:	e017      	b.n	800398c <HAL_ADC_ConfigChannel+0x45c>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	fa93 f3a3 	rbit	r3, r3
 8003968:	61bb      	str	r3, [r7, #24]
  return result;
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003974:	2320      	movs	r3, #32
 8003976:	e003      	b.n	8003980 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	fab3 f383 	clz	r3, r3
 800397e:	b2db      	uxtb	r3, r3
 8003980:	3301      	adds	r3, #1
 8003982:	f003 031f 	and.w	r3, r3, #31
 8003986:	2101      	movs	r1, #1
 8003988:	fa01 f303 	lsl.w	r3, r1, r3
 800398c:	ea42 0103 	orr.w	r1, r2, r3
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10d      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x488>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	0e9b      	lsrs	r3, r3, #26
 80039a2:	3301      	adds	r3, #1
 80039a4:	f003 021f 	and.w	r2, r3, #31
 80039a8:	4613      	mov	r3, r2
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	4413      	add	r3, r2
 80039ae:	3b1e      	subs	r3, #30
 80039b0:	051b      	lsls	r3, r3, #20
 80039b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039b6:	e01b      	b.n	80039f0 <HAL_ADC_ConfigChannel+0x4c0>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	fa93 f3a3 	rbit	r3, r3
 80039c4:	60fb      	str	r3, [r7, #12]
  return result;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80039d0:	2320      	movs	r3, #32
 80039d2:	e003      	b.n	80039dc <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	fab3 f383 	clz	r3, r3
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	3301      	adds	r3, #1
 80039de:	f003 021f 	and.w	r2, r3, #31
 80039e2:	4613      	mov	r3, r2
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	4413      	add	r3, r2
 80039e8:	3b1e      	subs	r3, #30
 80039ea:	051b      	lsls	r3, r3, #20
 80039ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039f0:	430b      	orrs	r3, r1
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	6892      	ldr	r2, [r2, #8]
 80039f6:	4619      	mov	r1, r3
 80039f8:	f7ff f96a 	bl	8002cd0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f280 80c6 	bge.w	8003b92 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a67      	ldr	r2, [pc, #412]	; (8003ba8 <HAL_ADC_ConfigChannel+0x678>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d004      	beq.n	8003a1a <HAL_ADC_ConfigChannel+0x4ea>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a65      	ldr	r2, [pc, #404]	; (8003bac <HAL_ADC_ConfigChannel+0x67c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x4ee>
 8003a1a:	4b65      	ldr	r3, [pc, #404]	; (8003bb0 <HAL_ADC_ConfigChannel+0x680>)
 8003a1c:	e000      	b.n	8003a20 <HAL_ADC_ConfigChannel+0x4f0>
 8003a1e:	4b65      	ldr	r3, [pc, #404]	; (8003bb4 <HAL_ADC_ConfigChannel+0x684>)
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff f8a1 	bl	8002b68 <LL_ADC_GetCommonPathInternalCh>
 8003a26:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a5e      	ldr	r2, [pc, #376]	; (8003ba8 <HAL_ADC_ConfigChannel+0x678>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d004      	beq.n	8003a3c <HAL_ADC_ConfigChannel+0x50c>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a5d      	ldr	r2, [pc, #372]	; (8003bac <HAL_ADC_ConfigChannel+0x67c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d10e      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x52a>
 8003a3c:	485a      	ldr	r0, [pc, #360]	; (8003ba8 <HAL_ADC_ConfigChannel+0x678>)
 8003a3e:	f7ff fa1b 	bl	8002e78 <LL_ADC_IsEnabled>
 8003a42:	4604      	mov	r4, r0
 8003a44:	4859      	ldr	r0, [pc, #356]	; (8003bac <HAL_ADC_ConfigChannel+0x67c>)
 8003a46:	f7ff fa17 	bl	8002e78 <LL_ADC_IsEnabled>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	4323      	orrs	r3, r4
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	bf0c      	ite	eq
 8003a52:	2301      	moveq	r3, #1
 8003a54:	2300      	movne	r3, #0
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	e008      	b.n	8003a6c <HAL_ADC_ConfigChannel+0x53c>
 8003a5a:	4857      	ldr	r0, [pc, #348]	; (8003bb8 <HAL_ADC_ConfigChannel+0x688>)
 8003a5c:	f7ff fa0c 	bl	8002e78 <LL_ADC_IsEnabled>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	bf0c      	ite	eq
 8003a66:	2301      	moveq	r3, #1
 8003a68:	2300      	movne	r3, #0
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d07d      	beq.n	8003b6c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a51      	ldr	r2, [pc, #324]	; (8003bbc <HAL_ADC_ConfigChannel+0x68c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d130      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x5ac>
 8003a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d12b      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a4b      	ldr	r2, [pc, #300]	; (8003bb8 <HAL_ADC_ConfigChannel+0x688>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	f040 8081 	bne.w	8003b92 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a44      	ldr	r2, [pc, #272]	; (8003ba8 <HAL_ADC_ConfigChannel+0x678>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d004      	beq.n	8003aa4 <HAL_ADC_ConfigChannel+0x574>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a43      	ldr	r2, [pc, #268]	; (8003bac <HAL_ADC_ConfigChannel+0x67c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d101      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0x578>
 8003aa4:	4a42      	ldr	r2, [pc, #264]	; (8003bb0 <HAL_ADC_ConfigChannel+0x680>)
 8003aa6:	e000      	b.n	8003aaa <HAL_ADC_ConfigChannel+0x57a>
 8003aa8:	4a42      	ldr	r2, [pc, #264]	; (8003bb4 <HAL_ADC_ConfigChannel+0x684>)
 8003aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	f7ff f845 	bl	8002b42 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ab8:	4b41      	ldr	r3, [pc, #260]	; (8003bc0 <HAL_ADC_ConfigChannel+0x690>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	099b      	lsrs	r3, r3, #6
 8003abe:	4a41      	ldr	r2, [pc, #260]	; (8003bc4 <HAL_ADC_ConfigChannel+0x694>)
 8003ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac4:	099b      	lsrs	r3, r3, #6
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003acc:	e002      	b.n	8003ad4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f9      	bne.n	8003ace <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ada:	e05a      	b.n	8003b92 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a39      	ldr	r2, [pc, #228]	; (8003bc8 <HAL_ADC_ConfigChannel+0x698>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d11e      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x5f4>
 8003ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d119      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a30      	ldr	r2, [pc, #192]	; (8003bb8 <HAL_ADC_ConfigChannel+0x688>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d14b      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a2a      	ldr	r2, [pc, #168]	; (8003ba8 <HAL_ADC_ConfigChannel+0x678>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d004      	beq.n	8003b0e <HAL_ADC_ConfigChannel+0x5de>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a28      	ldr	r2, [pc, #160]	; (8003bac <HAL_ADC_ConfigChannel+0x67c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d101      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x5e2>
 8003b0e:	4a28      	ldr	r2, [pc, #160]	; (8003bb0 <HAL_ADC_ConfigChannel+0x680>)
 8003b10:	e000      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x5e4>
 8003b12:	4a28      	ldr	r2, [pc, #160]	; (8003bb4 <HAL_ADC_ConfigChannel+0x684>)
 8003b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	f7ff f810 	bl	8002b42 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b22:	e036      	b.n	8003b92 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a28      	ldr	r2, [pc, #160]	; (8003bcc <HAL_ADC_ConfigChannel+0x69c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d131      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x662>
 8003b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d12c      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a1e      	ldr	r2, [pc, #120]	; (8003bb8 <HAL_ADC_ConfigChannel+0x688>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d127      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a18      	ldr	r2, [pc, #96]	; (8003ba8 <HAL_ADC_ConfigChannel+0x678>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d004      	beq.n	8003b56 <HAL_ADC_ConfigChannel+0x626>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a16      	ldr	r2, [pc, #88]	; (8003bac <HAL_ADC_ConfigChannel+0x67c>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d101      	bne.n	8003b5a <HAL_ADC_ConfigChannel+0x62a>
 8003b56:	4a16      	ldr	r2, [pc, #88]	; (8003bb0 <HAL_ADC_ConfigChannel+0x680>)
 8003b58:	e000      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x62c>
 8003b5a:	4a16      	ldr	r2, [pc, #88]	; (8003bb4 <HAL_ADC_ConfigChannel+0x684>)
 8003b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b62:	4619      	mov	r1, r3
 8003b64:	4610      	mov	r0, r2
 8003b66:	f7fe ffec 	bl	8002b42 <LL_ADC_SetCommonPathInternalCh>
 8003b6a:	e012      	b.n	8003b92 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b70:	f043 0220 	orr.w	r2, r3, #32
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003b7e:	e008      	b.n	8003b92 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b84:	f043 0220 	orr.w	r2, r3, #32
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b9a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3784      	adds	r7, #132	; 0x84
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd90      	pop	{r4, r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40022000 	.word	0x40022000
 8003bac:	40022100 	.word	0x40022100
 8003bb0:	40022300 	.word	0x40022300
 8003bb4:	58026300 	.word	0x58026300
 8003bb8:	58026000 	.word	0x58026000
 8003bbc:	cb840000 	.word	0xcb840000
 8003bc0:	24000024 	.word	0x24000024
 8003bc4:	053e2d63 	.word	0x053e2d63
 8003bc8:	c7520000 	.word	0xc7520000
 8003bcc:	cfb80000 	.word	0xcfb80000

08003bd0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b088      	sub	sp, #32
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff f994 	bl	8002f14 <LL_ADC_REG_IsConversionOngoing>
 8003bec:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff f9b6 	bl	8002f64 <LL_ADC_INJ_IsConversionOngoing>
 8003bf8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d103      	bne.n	8003c08 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 8098 	beq.w	8003d38 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d02a      	beq.n	8003c6c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	7d5b      	ldrb	r3, [r3, #21]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d126      	bne.n	8003c6c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	7d1b      	ldrb	r3, [r3, #20]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d122      	bne.n	8003c6c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003c26:	2301      	movs	r3, #1
 8003c28:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003c2a:	e014      	b.n	8003c56 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	4a45      	ldr	r2, [pc, #276]	; (8003d44 <ADC_ConversionStop+0x174>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d90d      	bls.n	8003c50 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c38:	f043 0210 	orr.w	r2, r3, #16
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c44:	f043 0201 	orr.w	r2, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e074      	b.n	8003d3a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	3301      	adds	r3, #1
 8003c54:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c60:	2b40      	cmp	r3, #64	; 0x40
 8003c62:	d1e3      	bne.n	8003c2c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2240      	movs	r2, #64	; 0x40
 8003c6a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d014      	beq.n	8003c9c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff f94c 	bl	8002f14 <LL_ADC_REG_IsConversionOngoing>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00c      	beq.n	8003c9c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff f909 	bl	8002e9e <LL_ADC_IsDisableOngoing>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d104      	bne.n	8003c9c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7ff f928 	bl	8002eec <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d014      	beq.n	8003ccc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff f95c 	bl	8002f64 <LL_ADC_INJ_IsConversionOngoing>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00c      	beq.n	8003ccc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff f8f1 	bl	8002e9e <LL_ADC_IsDisableOngoing>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d104      	bne.n	8003ccc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff f938 	bl	8002f3c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d005      	beq.n	8003cde <ADC_ConversionStop+0x10e>
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d105      	bne.n	8003ce4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003cd8:	230c      	movs	r3, #12
 8003cda:	617b      	str	r3, [r7, #20]
        break;
 8003cdc:	e005      	b.n	8003cea <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003cde:	2308      	movs	r3, #8
 8003ce0:	617b      	str	r3, [r7, #20]
        break;
 8003ce2:	e002      	b.n	8003cea <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	617b      	str	r3, [r7, #20]
        break;
 8003ce8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003cea:	f7fe fecb 	bl	8002a84 <HAL_GetTick>
 8003cee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003cf0:	e01b      	b.n	8003d2a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003cf2:	f7fe fec7 	bl	8002a84 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b05      	cmp	r3, #5
 8003cfe:	d914      	bls.n	8003d2a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00d      	beq.n	8003d2a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d12:	f043 0210 	orr.w	r2, r3, #16
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1e:	f043 0201 	orr.w	r2, r3, #1
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e007      	b.n	8003d3a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1dc      	bne.n	8003cf2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3720      	adds	r7, #32
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	000cdbff 	.word	0x000cdbff

08003d48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff f88f 	bl	8002e78 <LL_ADC_IsEnabled>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d16e      	bne.n	8003e3e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	4b38      	ldr	r3, [pc, #224]	; (8003e48 <ADC_Enable+0x100>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00d      	beq.n	8003d8a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d72:	f043 0210 	orr.w	r2, r3, #16
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7e:	f043 0201 	orr.w	r2, r3, #1
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e05a      	b.n	8003e40 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff f84a 	bl	8002e28 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d94:	f7fe fe76 	bl	8002a84 <HAL_GetTick>
 8003d98:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a2b      	ldr	r2, [pc, #172]	; (8003e4c <ADC_Enable+0x104>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d004      	beq.n	8003dae <ADC_Enable+0x66>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a29      	ldr	r2, [pc, #164]	; (8003e50 <ADC_Enable+0x108>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d101      	bne.n	8003db2 <ADC_Enable+0x6a>
 8003dae:	4b29      	ldr	r3, [pc, #164]	; (8003e54 <ADC_Enable+0x10c>)
 8003db0:	e000      	b.n	8003db4 <ADC_Enable+0x6c>
 8003db2:	4b29      	ldr	r3, [pc, #164]	; (8003e58 <ADC_Enable+0x110>)
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fe ffdb 	bl	8002d70 <LL_ADC_GetMultimode>
 8003dba:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a23      	ldr	r2, [pc, #140]	; (8003e50 <ADC_Enable+0x108>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d002      	beq.n	8003dcc <ADC_Enable+0x84>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	e000      	b.n	8003dce <ADC_Enable+0x86>
 8003dcc:	4b1f      	ldr	r3, [pc, #124]	; (8003e4c <ADC_Enable+0x104>)
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6812      	ldr	r2, [r2, #0]
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d02c      	beq.n	8003e30 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d130      	bne.n	8003e3e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ddc:	e028      	b.n	8003e30 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff f848 	bl	8002e78 <LL_ADC_IsEnabled>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d104      	bne.n	8003df8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff f818 	bl	8002e28 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003df8:	f7fe fe44 	bl	8002a84 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d914      	bls.n	8003e30 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d00d      	beq.n	8003e30 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e18:	f043 0210 	orr.w	r2, r3, #16
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e24:	f043 0201 	orr.w	r2, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e007      	b.n	8003e40 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d1cf      	bne.n	8003dde <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	8000003f 	.word	0x8000003f
 8003e4c:	40022000 	.word	0x40022000
 8003e50:	40022100 	.word	0x40022100
 8003e54:	40022300 	.word	0x40022300
 8003e58:	58026300 	.word	0x58026300

08003e5c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff f818 	bl	8002e9e <LL_ADC_IsDisableOngoing>
 8003e6e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fe ffff 	bl	8002e78 <LL_ADC_IsEnabled>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d047      	beq.n	8003f10 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d144      	bne.n	8003f10 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 030d 	and.w	r3, r3, #13
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d10c      	bne.n	8003eae <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fe ffd9 	bl	8002e50 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2203      	movs	r2, #3
 8003ea4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ea6:	f7fe fded 	bl	8002a84 <HAL_GetTick>
 8003eaa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003eac:	e029      	b.n	8003f02 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb2:	f043 0210 	orr.w	r2, r3, #16
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebe:	f043 0201 	orr.w	r2, r3, #1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e023      	b.n	8003f12 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003eca:	f7fe fddb 	bl	8002a84 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d914      	bls.n	8003f02 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00d      	beq.n	8003f02 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eea:	f043 0210 	orr.w	r2, r3, #16
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef6:	f043 0201 	orr.w	r2, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e007      	b.n	8003f12 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1dc      	bne.n	8003eca <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d14b      	bne.n	8003fcc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d021      	beq.n	8003f92 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fe fe6a 	bl	8002c2c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d032      	beq.n	8003fc4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d12b      	bne.n	8003fc4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d11f      	bne.n	8003fc4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f88:	f043 0201 	orr.w	r2, r3, #1
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	655a      	str	r2, [r3, #84]	; 0x54
 8003f90:	e018      	b.n	8003fc4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f003 0303 	and.w	r3, r3, #3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d111      	bne.n	8003fc4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d105      	bne.n	8003fc4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbc:	f043 0201 	orr.w	r2, r3, #1
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f7fd ff21 	bl	8001e0c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003fca:	e00e      	b.n	8003fea <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd0:	f003 0310 	and.w	r3, r3, #16
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f7ff fa9f 	bl	800351c <HAL_ADC_ErrorCallback>
}
 8003fde:	e004      	b.n	8003fea <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	4798      	blx	r3
}
 8003fea:	bf00      	nop
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b084      	sub	sp, #16
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f7fd fe97 	bl	8001d34 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004006:	bf00      	nop
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004020:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402c:	f043 0204 	orr.w	r2, r3, #4
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f7ff fa71 	bl	800351c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800403a:	bf00      	nop
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a79      	ldr	r2, [pc, #484]	; (8004238 <ADC_ConfigureBoostMode+0x1f4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d004      	beq.n	8004060 <ADC_ConfigureBoostMode+0x1c>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a78      	ldr	r2, [pc, #480]	; (800423c <ADC_ConfigureBoostMode+0x1f8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d109      	bne.n	8004074 <ADC_ConfigureBoostMode+0x30>
 8004060:	4b77      	ldr	r3, [pc, #476]	; (8004240 <ADC_ConfigureBoostMode+0x1fc>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004068:	2b00      	cmp	r3, #0
 800406a:	bf14      	ite	ne
 800406c:	2301      	movne	r3, #1
 800406e:	2300      	moveq	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	e008      	b.n	8004086 <ADC_ConfigureBoostMode+0x42>
 8004074:	4b73      	ldr	r3, [pc, #460]	; (8004244 <ADC_ConfigureBoostMode+0x200>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800407c:	2b00      	cmp	r3, #0
 800407e:	bf14      	ite	ne
 8004080:	2301      	movne	r3, #1
 8004082:	2300      	moveq	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d01c      	beq.n	80040c4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800408a:	f005 fad5 	bl	8009638 <HAL_RCC_GetHCLKFreq>
 800408e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004098:	d010      	beq.n	80040bc <ADC_ConfigureBoostMode+0x78>
 800409a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800409e:	d871      	bhi.n	8004184 <ADC_ConfigureBoostMode+0x140>
 80040a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a4:	d002      	beq.n	80040ac <ADC_ConfigureBoostMode+0x68>
 80040a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040aa:	d16b      	bne.n	8004184 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	0c1b      	lsrs	r3, r3, #16
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b8:	60fb      	str	r3, [r7, #12]
        break;
 80040ba:	e066      	b.n	800418a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	089b      	lsrs	r3, r3, #2
 80040c0:	60fb      	str	r3, [r7, #12]
        break;
 80040c2:	e062      	b.n	800418a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80040c4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80040c8:	f006 fa58 	bl	800a57c <HAL_RCCEx_GetPeriphCLKFreq>
 80040cc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80040d6:	d051      	beq.n	800417c <ADC_ConfigureBoostMode+0x138>
 80040d8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80040dc:	d854      	bhi.n	8004188 <ADC_ConfigureBoostMode+0x144>
 80040de:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80040e2:	d047      	beq.n	8004174 <ADC_ConfigureBoostMode+0x130>
 80040e4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80040e8:	d84e      	bhi.n	8004188 <ADC_ConfigureBoostMode+0x144>
 80040ea:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80040ee:	d03d      	beq.n	800416c <ADC_ConfigureBoostMode+0x128>
 80040f0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80040f4:	d848      	bhi.n	8004188 <ADC_ConfigureBoostMode+0x144>
 80040f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040fa:	d033      	beq.n	8004164 <ADC_ConfigureBoostMode+0x120>
 80040fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004100:	d842      	bhi.n	8004188 <ADC_ConfigureBoostMode+0x144>
 8004102:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004106:	d029      	beq.n	800415c <ADC_ConfigureBoostMode+0x118>
 8004108:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800410c:	d83c      	bhi.n	8004188 <ADC_ConfigureBoostMode+0x144>
 800410e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004112:	d01a      	beq.n	800414a <ADC_ConfigureBoostMode+0x106>
 8004114:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004118:	d836      	bhi.n	8004188 <ADC_ConfigureBoostMode+0x144>
 800411a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800411e:	d014      	beq.n	800414a <ADC_ConfigureBoostMode+0x106>
 8004120:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004124:	d830      	bhi.n	8004188 <ADC_ConfigureBoostMode+0x144>
 8004126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800412a:	d00e      	beq.n	800414a <ADC_ConfigureBoostMode+0x106>
 800412c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004130:	d82a      	bhi.n	8004188 <ADC_ConfigureBoostMode+0x144>
 8004132:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004136:	d008      	beq.n	800414a <ADC_ConfigureBoostMode+0x106>
 8004138:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800413c:	d824      	bhi.n	8004188 <ADC_ConfigureBoostMode+0x144>
 800413e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004142:	d002      	beq.n	800414a <ADC_ConfigureBoostMode+0x106>
 8004144:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004148:	d11e      	bne.n	8004188 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	0c9b      	lsrs	r3, r3, #18
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	fbb2 f3f3 	udiv	r3, r2, r3
 8004158:	60fb      	str	r3, [r7, #12]
        break;
 800415a:	e016      	b.n	800418a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	091b      	lsrs	r3, r3, #4
 8004160:	60fb      	str	r3, [r7, #12]
        break;
 8004162:	e012      	b.n	800418a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	60fb      	str	r3, [r7, #12]
        break;
 800416a:	e00e      	b.n	800418a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	099b      	lsrs	r3, r3, #6
 8004170:	60fb      	str	r3, [r7, #12]
        break;
 8004172:	e00a      	b.n	800418a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	09db      	lsrs	r3, r3, #7
 8004178:	60fb      	str	r3, [r7, #12]
        break;
 800417a:	e006      	b.n	800418a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	0a1b      	lsrs	r3, r3, #8
 8004180:	60fb      	str	r3, [r7, #12]
        break;
 8004182:	e002      	b.n	800418a <ADC_ConfigureBoostMode+0x146>
        break;
 8004184:	bf00      	nop
 8004186:	e000      	b.n	800418a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004188:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800418a:	f7fe fcbb 	bl	8002b04 <HAL_GetREVID>
 800418e:	4603      	mov	r3, r0
 8004190:	f241 0203 	movw	r2, #4099	; 0x1003
 8004194:	4293      	cmp	r3, r2
 8004196:	d815      	bhi.n	80041c4 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4a2b      	ldr	r2, [pc, #172]	; (8004248 <ADC_ConfigureBoostMode+0x204>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d908      	bls.n	80041b2 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ae:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80041b0:	e03e      	b.n	8004230 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041c0:	609a      	str	r2, [r3, #8]
}
 80041c2:	e035      	b.n	8004230 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	085b      	lsrs	r3, r3, #1
 80041c8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4a1f      	ldr	r2, [pc, #124]	; (800424c <ADC_ConfigureBoostMode+0x208>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d808      	bhi.n	80041e4 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80041e0:	609a      	str	r2, [r3, #8]
}
 80041e2:	e025      	b.n	8004230 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4a1a      	ldr	r2, [pc, #104]	; (8004250 <ADC_ConfigureBoostMode+0x20c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d80a      	bhi.n	8004202 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041fe:	609a      	str	r2, [r3, #8]
}
 8004200:	e016      	b.n	8004230 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4a13      	ldr	r2, [pc, #76]	; (8004254 <ADC_ConfigureBoostMode+0x210>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d80a      	bhi.n	8004220 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800421c:	609a      	str	r2, [r3, #8]
}
 800421e:	e007      	b.n	8004230 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800422e:	609a      	str	r2, [r3, #8]
}
 8004230:	bf00      	nop
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40022000 	.word	0x40022000
 800423c:	40022100 	.word	0x40022100
 8004240:	40022300 	.word	0x40022300
 8004244:	58026300 	.word	0x58026300
 8004248:	01312d00 	.word	0x01312d00
 800424c:	005f5e10 	.word	0x005f5e10
 8004250:	00bebc20 	.word	0x00bebc20
 8004254:	017d7840 	.word	0x017d7840

08004258 <LL_ADC_IsEnabled>:
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <LL_ADC_IsEnabled+0x18>
 800426c:	2301      	movs	r3, #1
 800426e:	e000      	b.n	8004272 <LL_ADC_IsEnabled+0x1a>
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
	...

08004280 <LL_ADC_StartCalibration>:
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	4b09      	ldr	r3, [pc, #36]	; (80042b8 <LL_ADC_StartCalibration+0x38>)
 8004292:	4013      	ands	r3, r2
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80042a0:	430a      	orrs	r2, r1
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	609a      	str	r2, [r3, #8]
}
 80042ac:	bf00      	nop
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	3ffeffc0 	.word	0x3ffeffc0

080042bc <LL_ADC_IsCalibrationOnGoing>:
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042d0:	d101      	bne.n	80042d6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80042d2:	2301      	movs	r3, #1
 80042d4:	e000      	b.n	80042d8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <LL_ADC_REG_IsConversionOngoing>:
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d101      	bne.n	80042fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80042f8:	2301      	movs	r3, #1
 80042fa:	e000      	b.n	80042fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
	...

0800430c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004318:	2300      	movs	r3, #0
 800431a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_ADCEx_Calibration_Start+0x1e>
 8004326:	2302      	movs	r3, #2
 8004328:	e04c      	b.n	80043c4 <HAL_ADCEx_Calibration_Start+0xb8>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f7ff fd92 	bl	8003e5c <ADC_Disable>
 8004338:	4603      	mov	r3, r0
 800433a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800433c:	7dfb      	ldrb	r3, [r7, #23]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d135      	bne.n	80043ae <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004346:	4b21      	ldr	r3, [pc, #132]	; (80043cc <HAL_ADCEx_Calibration_Start+0xc0>)
 8004348:	4013      	ands	r3, r2
 800434a:	f043 0202 	orr.w	r2, r3, #2
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	68b9      	ldr	r1, [r7, #8]
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff ff90 	bl	8004280 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004360:	e014      	b.n	800438c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	3301      	adds	r3, #1
 8004366:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	4a19      	ldr	r2, [pc, #100]	; (80043d0 <HAL_ADCEx_Calibration_Start+0xc4>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d30d      	bcc.n	800438c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004374:	f023 0312 	bic.w	r3, r3, #18
 8004378:	f043 0210 	orr.w	r2, r3, #16
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e01b      	b.n	80043c4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff ff93 	bl	80042bc <LL_ADC_IsCalibrationOnGoing>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e2      	bne.n	8004362 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a0:	f023 0303 	bic.w	r3, r3, #3
 80043a4:	f043 0201 	orr.w	r2, r3, #1
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	655a      	str	r2, [r3, #84]	; 0x54
 80043ac:	e005      	b.n	80043ba <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b2:	f043 0210 	orr.w	r2, r3, #16
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80043c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	ffffeefd 	.word	0xffffeefd
 80043d0:	25c3f800 	.word	0x25c3f800

080043d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80043d4:	b590      	push	{r4, r7, lr}
 80043d6:	b09f      	sub	sp, #124	; 0x7c
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80043ee:	2302      	movs	r3, #2
 80043f0:	e0be      	b.n	8004570 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80043fa:	2300      	movs	r3, #0
 80043fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80043fe:	2300      	movs	r3, #0
 8004400:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a5c      	ldr	r2, [pc, #368]	; (8004578 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d102      	bne.n	8004412 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800440c:	4b5b      	ldr	r3, [pc, #364]	; (800457c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800440e:	60bb      	str	r3, [r7, #8]
 8004410:	e001      	b.n	8004416 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004412:	2300      	movs	r3, #0
 8004414:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10b      	bne.n	8004434 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004420:	f043 0220 	orr.w	r2, r3, #32
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e09d      	b.n	8004570 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff ff54 	bl	80042e4 <LL_ADC_REG_IsConversionOngoing>
 800443c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff ff4e 	bl	80042e4 <LL_ADC_REG_IsConversionOngoing>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d17f      	bne.n	800454e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800444e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004450:	2b00      	cmp	r3, #0
 8004452:	d17c      	bne.n	800454e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a47      	ldr	r2, [pc, #284]	; (8004578 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d004      	beq.n	8004468 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a46      	ldr	r2, [pc, #280]	; (800457c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d101      	bne.n	800446c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004468:	4b45      	ldr	r3, [pc, #276]	; (8004580 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800446a:	e000      	b.n	800446e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800446c:	4b45      	ldr	r3, [pc, #276]	; (8004584 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800446e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d039      	beq.n	80044ec <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	431a      	orrs	r2, r3
 8004486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004488:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a3a      	ldr	r2, [pc, #232]	; (8004578 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d004      	beq.n	800449e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a38      	ldr	r2, [pc, #224]	; (800457c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d10e      	bne.n	80044bc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800449e:	4836      	ldr	r0, [pc, #216]	; (8004578 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80044a0:	f7ff feda 	bl	8004258 <LL_ADC_IsEnabled>
 80044a4:	4604      	mov	r4, r0
 80044a6:	4835      	ldr	r0, [pc, #212]	; (800457c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80044a8:	f7ff fed6 	bl	8004258 <LL_ADC_IsEnabled>
 80044ac:	4603      	mov	r3, r0
 80044ae:	4323      	orrs	r3, r4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	bf0c      	ite	eq
 80044b4:	2301      	moveq	r3, #1
 80044b6:	2300      	movne	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	e008      	b.n	80044ce <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80044bc:	4832      	ldr	r0, [pc, #200]	; (8004588 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80044be:	f7ff fecb 	bl	8004258 <LL_ADC_IsEnabled>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	bf0c      	ite	eq
 80044c8:	2301      	moveq	r3, #1
 80044ca:	2300      	movne	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d047      	beq.n	8004562 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80044d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	4b2d      	ldr	r3, [pc, #180]	; (800458c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80044d8:	4013      	ands	r3, r2
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	6811      	ldr	r1, [r2, #0]
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	6892      	ldr	r2, [r2, #8]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	431a      	orrs	r2, r3
 80044e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044ea:	e03a      	b.n	8004562 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80044ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a1e      	ldr	r2, [pc, #120]	; (8004578 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d004      	beq.n	800450c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a1d      	ldr	r2, [pc, #116]	; (800457c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d10e      	bne.n	800452a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800450c:	481a      	ldr	r0, [pc, #104]	; (8004578 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800450e:	f7ff fea3 	bl	8004258 <LL_ADC_IsEnabled>
 8004512:	4604      	mov	r4, r0
 8004514:	4819      	ldr	r0, [pc, #100]	; (800457c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004516:	f7ff fe9f 	bl	8004258 <LL_ADC_IsEnabled>
 800451a:	4603      	mov	r3, r0
 800451c:	4323      	orrs	r3, r4
 800451e:	2b00      	cmp	r3, #0
 8004520:	bf0c      	ite	eq
 8004522:	2301      	moveq	r3, #1
 8004524:	2300      	movne	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	e008      	b.n	800453c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800452a:	4817      	ldr	r0, [pc, #92]	; (8004588 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800452c:	f7ff fe94 	bl	8004258 <LL_ADC_IsEnabled>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	bf0c      	ite	eq
 8004536:	2301      	moveq	r3, #1
 8004538:	2300      	movne	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d010      	beq.n	8004562 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	4b11      	ldr	r3, [pc, #68]	; (800458c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004546:	4013      	ands	r3, r2
 8004548:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800454a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800454c:	e009      	b.n	8004562 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004552:	f043 0220 	orr.w	r2, r3, #32
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004560:	e000      	b.n	8004564 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004562:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800456c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004570:	4618      	mov	r0, r3
 8004572:	377c      	adds	r7, #124	; 0x7c
 8004574:	46bd      	mov	sp, r7
 8004576:	bd90      	pop	{r4, r7, pc}
 8004578:	40022000 	.word	0x40022000
 800457c:	40022100 	.word	0x40022100
 8004580:	40022300 	.word	0x40022300
 8004584:	58026300 	.word	0x58026300
 8004588:	58026000 	.word	0x58026000
 800458c:	fffff0e0 	.word	0xfffff0e0

08004590 <__NVIC_SetPriorityGrouping>:
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045a0:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <__NVIC_SetPriorityGrouping+0x40>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045ac:	4013      	ands	r3, r2
 80045ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80045b8:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <__NVIC_SetPriorityGrouping+0x44>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045be:	4a04      	ldr	r2, [pc, #16]	; (80045d0 <__NVIC_SetPriorityGrouping+0x40>)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	60d3      	str	r3, [r2, #12]
}
 80045c4:	bf00      	nop
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	e000ed00 	.word	0xe000ed00
 80045d4:	05fa0000 	.word	0x05fa0000

080045d8 <__NVIC_GetPriorityGrouping>:
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045dc:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <__NVIC_GetPriorityGrouping+0x18>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	0a1b      	lsrs	r3, r3, #8
 80045e2:	f003 0307 	and.w	r3, r3, #7
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	e000ed00 	.word	0xe000ed00

080045f4 <__NVIC_EnableIRQ>:
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4603      	mov	r3, r0
 80045fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80045fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004602:	2b00      	cmp	r3, #0
 8004604:	db0b      	blt.n	800461e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004606:	88fb      	ldrh	r3, [r7, #6]
 8004608:	f003 021f 	and.w	r2, r3, #31
 800460c:	4907      	ldr	r1, [pc, #28]	; (800462c <__NVIC_EnableIRQ+0x38>)
 800460e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	2001      	movs	r0, #1
 8004616:	fa00 f202 	lsl.w	r2, r0, r2
 800461a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	e000e100 	.word	0xe000e100

08004630 <__NVIC_SetPriority>:
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	6039      	str	r1, [r7, #0]
 800463a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800463c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004640:	2b00      	cmp	r3, #0
 8004642:	db0a      	blt.n	800465a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	b2da      	uxtb	r2, r3
 8004648:	490c      	ldr	r1, [pc, #48]	; (800467c <__NVIC_SetPriority+0x4c>)
 800464a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800464e:	0112      	lsls	r2, r2, #4
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	440b      	add	r3, r1
 8004654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004658:	e00a      	b.n	8004670 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	b2da      	uxtb	r2, r3
 800465e:	4908      	ldr	r1, [pc, #32]	; (8004680 <__NVIC_SetPriority+0x50>)
 8004660:	88fb      	ldrh	r3, [r7, #6]
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	3b04      	subs	r3, #4
 8004668:	0112      	lsls	r2, r2, #4
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	440b      	add	r3, r1
 800466e:	761a      	strb	r2, [r3, #24]
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	e000e100 	.word	0xe000e100
 8004680:	e000ed00 	.word	0xe000ed00

08004684 <NVIC_EncodePriority>:
{
 8004684:	b480      	push	{r7}
 8004686:	b089      	sub	sp, #36	; 0x24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f1c3 0307 	rsb	r3, r3, #7
 800469e:	2b04      	cmp	r3, #4
 80046a0:	bf28      	it	cs
 80046a2:	2304      	movcs	r3, #4
 80046a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	3304      	adds	r3, #4
 80046aa:	2b06      	cmp	r3, #6
 80046ac:	d902      	bls.n	80046b4 <NVIC_EncodePriority+0x30>
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	3b03      	subs	r3, #3
 80046b2:	e000      	b.n	80046b6 <NVIC_EncodePriority+0x32>
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	43da      	mvns	r2, r3
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	401a      	ands	r2, r3
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	fa01 f303 	lsl.w	r3, r1, r3
 80046d6:	43d9      	mvns	r1, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046dc:	4313      	orrs	r3, r2
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3724      	adds	r7, #36	; 0x24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
	...

080046ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046fc:	d301      	bcc.n	8004702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046fe:	2301      	movs	r3, #1
 8004700:	e00f      	b.n	8004722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004702:	4a0a      	ldr	r2, [pc, #40]	; (800472c <SysTick_Config+0x40>)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3b01      	subs	r3, #1
 8004708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800470a:	210f      	movs	r1, #15
 800470c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004710:	f7ff ff8e 	bl	8004630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <SysTick_Config+0x40>)
 8004716:	2200      	movs	r2, #0
 8004718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800471a:	4b04      	ldr	r3, [pc, #16]	; (800472c <SysTick_Config+0x40>)
 800471c:	2207      	movs	r2, #7
 800471e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	e000e010 	.word	0xe000e010

08004730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7ff ff29 	bl	8004590 <__NVIC_SetPriorityGrouping>
}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b086      	sub	sp, #24
 800474a:	af00      	add	r7, sp, #0
 800474c:	4603      	mov	r3, r0
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	607a      	str	r2, [r7, #4]
 8004752:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004754:	f7ff ff40 	bl	80045d8 <__NVIC_GetPriorityGrouping>
 8004758:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	68b9      	ldr	r1, [r7, #8]
 800475e:	6978      	ldr	r0, [r7, #20]
 8004760:	f7ff ff90 	bl	8004684 <NVIC_EncodePriority>
 8004764:	4602      	mov	r2, r0
 8004766:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800476a:	4611      	mov	r1, r2
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff ff5f 	bl	8004630 <__NVIC_SetPriority>
}
 8004772:	bf00      	nop
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b082      	sub	sp, #8
 800477e:	af00      	add	r7, sp, #0
 8004780:	4603      	mov	r3, r0
 8004782:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004784:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff ff33 	bl	80045f4 <__NVIC_EnableIRQ>
}
 800478e:	bf00      	nop
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b082      	sub	sp, #8
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7ff ffa4 	bl	80046ec <SysTick_Config>
 80047a4:	4603      	mov	r3, r0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e014      	b.n	80047ea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	791b      	ldrb	r3, [r3, #4]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d105      	bne.n	80047d6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7fd fce3 	bl	800219c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2202      	movs	r2, #2
 80047da:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	795b      	ldrb	r3, [r3, #5]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_DAC_Start+0x16>
 8004804:	2302      	movs	r3, #2
 8004806:	e040      	b.n	800488a <HAL_DAC_Start+0x98>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2202      	movs	r2, #2
 8004812:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6819      	ldr	r1, [r3, #0]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	f003 0310 	and.w	r3, r3, #16
 8004820:	2201      	movs	r2, #1
 8004822:	409a      	lsls	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10f      	bne.n	8004852 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800483c:	2b02      	cmp	r3, #2
 800483e:	d11d      	bne.n	800487c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	605a      	str	r2, [r3, #4]
 8004850:	e014      	b.n	800487c <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	f003 0310 	and.w	r3, r3, #16
 8004862:	2102      	movs	r1, #2
 8004864:	fa01 f303 	lsl.w	r3, r1, r3
 8004868:	429a      	cmp	r2, r3
 800486a:	d107      	bne.n	800487c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0202 	orr.w	r2, r2, #2
 800487a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004896:	b480      	push	{r7}
 8004898:	b087      	sub	sp, #28
 800489a:	af00      	add	r7, sp, #0
 800489c:	60f8      	str	r0, [r7, #12]
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	607a      	str	r2, [r7, #4]
 80048a2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d105      	bne.n	80048c0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4413      	add	r3, r2
 80048ba:	3308      	adds	r3, #8
 80048bc:	617b      	str	r3, [r7, #20]
 80048be:	e004      	b.n	80048ca <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4413      	add	r3, r2
 80048c6:	3314      	adds	r3, #20
 80048c8:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	461a      	mov	r2, r3
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	371c      	adds	r7, #28
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	795b      	ldrb	r3, [r3, #5]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d101      	bne.n	80048f8 <HAL_DAC_ConfigChannel+0x18>
 80048f4:	2302      	movs	r3, #2
 80048f6:	e11d      	b.n	8004b34 <HAL_DAC_ConfigChannel+0x254>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2201      	movs	r2, #1
 80048fc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2202      	movs	r2, #2
 8004902:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b04      	cmp	r3, #4
 800490a:	d174      	bne.n	80049f6 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800490c:	f7fe f8ba 	bl	8002a84 <HAL_GetTick>
 8004910:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d134      	bne.n	8004982 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004918:	e011      	b.n	800493e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800491a:	f7fe f8b3 	bl	8002a84 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b01      	cmp	r3, #1
 8004926:	d90a      	bls.n	800493e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	f043 0208 	orr.w	r2, r3, #8
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2203      	movs	r2, #3
 8004938:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e0fa      	b.n	8004b34 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004944:	4b7d      	ldr	r3, [pc, #500]	; (8004b3c <HAL_DAC_ConfigChannel+0x25c>)
 8004946:	4013      	ands	r3, r2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1e6      	bne.n	800491a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800494c:	2001      	movs	r0, #1
 800494e:	f7fe f8a5 	bl	8002a9c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	6992      	ldr	r2, [r2, #24]
 800495a:	641a      	str	r2, [r3, #64]	; 0x40
 800495c:	e01e      	b.n	800499c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800495e:	f7fe f891 	bl	8002a84 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b01      	cmp	r3, #1
 800496a:	d90a      	bls.n	8004982 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	f043 0208 	orr.w	r2, r3, #8
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2203      	movs	r2, #3
 800497c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e0d8      	b.n	8004b34 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004988:	2b00      	cmp	r3, #0
 800498a:	dbe8      	blt.n	800495e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800498c:	2001      	movs	r0, #1
 800498e:	f7fe f885 	bl	8002a9c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	6992      	ldr	r2, [r2, #24]
 800499a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f003 0310 	and.w	r3, r3, #16
 80049a8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80049ac:	fa01 f303 	lsl.w	r3, r1, r3
 80049b0:	43db      	mvns	r3, r3
 80049b2:	ea02 0103 	and.w	r1, r2, r3
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	69da      	ldr	r2, [r3, #28]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f003 0310 	and.w	r3, r3, #16
 80049c0:	409a      	lsls	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f003 0310 	and.w	r3, r3, #16
 80049d6:	21ff      	movs	r1, #255	; 0xff
 80049d8:	fa01 f303 	lsl.w	r3, r1, r3
 80049dc:	43db      	mvns	r3, r3
 80049de:	ea02 0103 	and.w	r1, r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	6a1a      	ldr	r2, [r3, #32]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f003 0310 	and.w	r3, r3, #16
 80049ec:	409a      	lsls	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d11d      	bne.n	8004a3a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	221f      	movs	r2, #31
 8004a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a12:	43db      	mvns	r3, r3
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	4013      	ands	r3, r2
 8004a18:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a40:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f003 0310 	and.w	r3, r3, #16
 8004a48:	2207      	movs	r2, #7
 8004a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4e:	43db      	mvns	r3, r3
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	4013      	ands	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d102      	bne.n	8004a64 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61fb      	str	r3, [r7, #28]
 8004a62:	e00f      	b.n	8004a84 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d102      	bne.n	8004a72 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	61fb      	str	r3, [r7, #28]
 8004a70:	e008      	b.n	8004a84 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d102      	bne.n	8004a80 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	61fb      	str	r3, [r7, #28]
 8004a7e:	e001      	b.n	8004a84 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004a80:	2300      	movs	r3, #0
 8004a82:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	69fa      	ldr	r2, [r7, #28]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f003 0310 	and.w	r3, r3, #16
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6819      	ldr	r1, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f003 0310 	and.w	r3, r3, #16
 8004aba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	43da      	mvns	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	400a      	ands	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f003 0310 	and.w	r3, r3, #16
 8004ada:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004ade:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae2:	43db      	mvns	r3, r3
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f003 0310 	and.w	r3, r3, #16
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6819      	ldr	r1, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f003 0310 	and.w	r3, r3, #16
 8004b16:	22c0      	movs	r2, #192	; 0xc0
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	43da      	mvns	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	400a      	ands	r2, r1
 8004b24:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3720      	adds	r7, #32
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20008000 	.word	0x20008000

08004b40 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004b48:	f7fd ff9c 	bl	8002a84 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e316      	b.n	8005186 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a66      	ldr	r2, [pc, #408]	; (8004cf8 <HAL_DMA_Init+0x1b8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d04a      	beq.n	8004bf8 <HAL_DMA_Init+0xb8>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a65      	ldr	r2, [pc, #404]	; (8004cfc <HAL_DMA_Init+0x1bc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d045      	beq.n	8004bf8 <HAL_DMA_Init+0xb8>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a63      	ldr	r2, [pc, #396]	; (8004d00 <HAL_DMA_Init+0x1c0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d040      	beq.n	8004bf8 <HAL_DMA_Init+0xb8>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a62      	ldr	r2, [pc, #392]	; (8004d04 <HAL_DMA_Init+0x1c4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d03b      	beq.n	8004bf8 <HAL_DMA_Init+0xb8>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a60      	ldr	r2, [pc, #384]	; (8004d08 <HAL_DMA_Init+0x1c8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d036      	beq.n	8004bf8 <HAL_DMA_Init+0xb8>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a5f      	ldr	r2, [pc, #380]	; (8004d0c <HAL_DMA_Init+0x1cc>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d031      	beq.n	8004bf8 <HAL_DMA_Init+0xb8>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a5d      	ldr	r2, [pc, #372]	; (8004d10 <HAL_DMA_Init+0x1d0>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d02c      	beq.n	8004bf8 <HAL_DMA_Init+0xb8>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a5c      	ldr	r2, [pc, #368]	; (8004d14 <HAL_DMA_Init+0x1d4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d027      	beq.n	8004bf8 <HAL_DMA_Init+0xb8>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a5a      	ldr	r2, [pc, #360]	; (8004d18 <HAL_DMA_Init+0x1d8>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d022      	beq.n	8004bf8 <HAL_DMA_Init+0xb8>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a59      	ldr	r2, [pc, #356]	; (8004d1c <HAL_DMA_Init+0x1dc>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d01d      	beq.n	8004bf8 <HAL_DMA_Init+0xb8>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a57      	ldr	r2, [pc, #348]	; (8004d20 <HAL_DMA_Init+0x1e0>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d018      	beq.n	8004bf8 <HAL_DMA_Init+0xb8>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a56      	ldr	r2, [pc, #344]	; (8004d24 <HAL_DMA_Init+0x1e4>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d013      	beq.n	8004bf8 <HAL_DMA_Init+0xb8>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a54      	ldr	r2, [pc, #336]	; (8004d28 <HAL_DMA_Init+0x1e8>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00e      	beq.n	8004bf8 <HAL_DMA_Init+0xb8>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a53      	ldr	r2, [pc, #332]	; (8004d2c <HAL_DMA_Init+0x1ec>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d009      	beq.n	8004bf8 <HAL_DMA_Init+0xb8>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a51      	ldr	r2, [pc, #324]	; (8004d30 <HAL_DMA_Init+0x1f0>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d004      	beq.n	8004bf8 <HAL_DMA_Init+0xb8>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a50      	ldr	r2, [pc, #320]	; (8004d34 <HAL_DMA_Init+0x1f4>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d101      	bne.n	8004bfc <HAL_DMA_Init+0xbc>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <HAL_DMA_Init+0xbe>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f000 813b 	beq.w	8004e7a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a37      	ldr	r2, [pc, #220]	; (8004cf8 <HAL_DMA_Init+0x1b8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d04a      	beq.n	8004cb4 <HAL_DMA_Init+0x174>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a36      	ldr	r2, [pc, #216]	; (8004cfc <HAL_DMA_Init+0x1bc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d045      	beq.n	8004cb4 <HAL_DMA_Init+0x174>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a34      	ldr	r2, [pc, #208]	; (8004d00 <HAL_DMA_Init+0x1c0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d040      	beq.n	8004cb4 <HAL_DMA_Init+0x174>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a33      	ldr	r2, [pc, #204]	; (8004d04 <HAL_DMA_Init+0x1c4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d03b      	beq.n	8004cb4 <HAL_DMA_Init+0x174>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a31      	ldr	r2, [pc, #196]	; (8004d08 <HAL_DMA_Init+0x1c8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d036      	beq.n	8004cb4 <HAL_DMA_Init+0x174>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a30      	ldr	r2, [pc, #192]	; (8004d0c <HAL_DMA_Init+0x1cc>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d031      	beq.n	8004cb4 <HAL_DMA_Init+0x174>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a2e      	ldr	r2, [pc, #184]	; (8004d10 <HAL_DMA_Init+0x1d0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d02c      	beq.n	8004cb4 <HAL_DMA_Init+0x174>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a2d      	ldr	r2, [pc, #180]	; (8004d14 <HAL_DMA_Init+0x1d4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d027      	beq.n	8004cb4 <HAL_DMA_Init+0x174>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a2b      	ldr	r2, [pc, #172]	; (8004d18 <HAL_DMA_Init+0x1d8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d022      	beq.n	8004cb4 <HAL_DMA_Init+0x174>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a2a      	ldr	r2, [pc, #168]	; (8004d1c <HAL_DMA_Init+0x1dc>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d01d      	beq.n	8004cb4 <HAL_DMA_Init+0x174>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a28      	ldr	r2, [pc, #160]	; (8004d20 <HAL_DMA_Init+0x1e0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d018      	beq.n	8004cb4 <HAL_DMA_Init+0x174>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a27      	ldr	r2, [pc, #156]	; (8004d24 <HAL_DMA_Init+0x1e4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d013      	beq.n	8004cb4 <HAL_DMA_Init+0x174>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a25      	ldr	r2, [pc, #148]	; (8004d28 <HAL_DMA_Init+0x1e8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00e      	beq.n	8004cb4 <HAL_DMA_Init+0x174>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a24      	ldr	r2, [pc, #144]	; (8004d2c <HAL_DMA_Init+0x1ec>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d009      	beq.n	8004cb4 <HAL_DMA_Init+0x174>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a22      	ldr	r2, [pc, #136]	; (8004d30 <HAL_DMA_Init+0x1f0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d004      	beq.n	8004cb4 <HAL_DMA_Init+0x174>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a21      	ldr	r2, [pc, #132]	; (8004d34 <HAL_DMA_Init+0x1f4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d108      	bne.n	8004cc6 <HAL_DMA_Init+0x186>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0201 	bic.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	e007      	b.n	8004cd6 <HAL_DMA_Init+0x196>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 0201 	bic.w	r2, r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004cd6:	e02f      	b.n	8004d38 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cd8:	f7fd fed4 	bl	8002a84 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b05      	cmp	r3, #5
 8004ce4:	d928      	bls.n	8004d38 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2203      	movs	r2, #3
 8004cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e246      	b.n	8005186 <HAL_DMA_Init+0x646>
 8004cf8:	40020010 	.word	0x40020010
 8004cfc:	40020028 	.word	0x40020028
 8004d00:	40020040 	.word	0x40020040
 8004d04:	40020058 	.word	0x40020058
 8004d08:	40020070 	.word	0x40020070
 8004d0c:	40020088 	.word	0x40020088
 8004d10:	400200a0 	.word	0x400200a0
 8004d14:	400200b8 	.word	0x400200b8
 8004d18:	40020410 	.word	0x40020410
 8004d1c:	40020428 	.word	0x40020428
 8004d20:	40020440 	.word	0x40020440
 8004d24:	40020458 	.word	0x40020458
 8004d28:	40020470 	.word	0x40020470
 8004d2c:	40020488 	.word	0x40020488
 8004d30:	400204a0 	.word	0x400204a0
 8004d34:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1c8      	bne.n	8004cd8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4b83      	ldr	r3, [pc, #524]	; (8004f60 <HAL_DMA_Init+0x420>)
 8004d52:	4013      	ands	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004d5e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d6a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d76:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	d107      	bne.n	8004d9c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d94:	4313      	orrs	r3, r2
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004d9c:	4b71      	ldr	r3, [pc, #452]	; (8004f64 <HAL_DMA_Init+0x424>)
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	4b71      	ldr	r3, [pc, #452]	; (8004f68 <HAL_DMA_Init+0x428>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004da8:	d328      	bcc.n	8004dfc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b28      	cmp	r3, #40	; 0x28
 8004db0:	d903      	bls.n	8004dba <HAL_DMA_Init+0x27a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b2e      	cmp	r3, #46	; 0x2e
 8004db8:	d917      	bls.n	8004dea <HAL_DMA_Init+0x2aa>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b3e      	cmp	r3, #62	; 0x3e
 8004dc0:	d903      	bls.n	8004dca <HAL_DMA_Init+0x28a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b42      	cmp	r3, #66	; 0x42
 8004dc8:	d90f      	bls.n	8004dea <HAL_DMA_Init+0x2aa>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b46      	cmp	r3, #70	; 0x46
 8004dd0:	d903      	bls.n	8004dda <HAL_DMA_Init+0x29a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2b48      	cmp	r3, #72	; 0x48
 8004dd8:	d907      	bls.n	8004dea <HAL_DMA_Init+0x2aa>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b4e      	cmp	r3, #78	; 0x4e
 8004de0:	d905      	bls.n	8004dee <HAL_DMA_Init+0x2ae>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b52      	cmp	r3, #82	; 0x52
 8004de8:	d801      	bhi.n	8004dee <HAL_DMA_Init+0x2ae>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <HAL_DMA_Init+0x2b0>
 8004dee:	2300      	movs	r3, #0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dfa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f023 0307 	bic.w	r3, r3, #7
 8004e12:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d117      	bne.n	8004e56 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00e      	beq.n	8004e56 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f002 fb33 	bl	80074a4 <DMA_CheckFifoParam>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d008      	beq.n	8004e56 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2240      	movs	r2, #64	; 0x40
 8004e48:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e197      	b.n	8005186 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f002 fa6e 	bl	8007340 <DMA_CalcBaseAndBitshift>
 8004e64:	4603      	mov	r3, r0
 8004e66:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e6c:	f003 031f 	and.w	r3, r3, #31
 8004e70:	223f      	movs	r2, #63	; 0x3f
 8004e72:	409a      	lsls	r2, r3
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	609a      	str	r2, [r3, #8]
 8004e78:	e0cd      	b.n	8005016 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a3b      	ldr	r2, [pc, #236]	; (8004f6c <HAL_DMA_Init+0x42c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d022      	beq.n	8004eca <HAL_DMA_Init+0x38a>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a39      	ldr	r2, [pc, #228]	; (8004f70 <HAL_DMA_Init+0x430>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d01d      	beq.n	8004eca <HAL_DMA_Init+0x38a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a38      	ldr	r2, [pc, #224]	; (8004f74 <HAL_DMA_Init+0x434>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d018      	beq.n	8004eca <HAL_DMA_Init+0x38a>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a36      	ldr	r2, [pc, #216]	; (8004f78 <HAL_DMA_Init+0x438>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d013      	beq.n	8004eca <HAL_DMA_Init+0x38a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a35      	ldr	r2, [pc, #212]	; (8004f7c <HAL_DMA_Init+0x43c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d00e      	beq.n	8004eca <HAL_DMA_Init+0x38a>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a33      	ldr	r2, [pc, #204]	; (8004f80 <HAL_DMA_Init+0x440>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d009      	beq.n	8004eca <HAL_DMA_Init+0x38a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a32      	ldr	r2, [pc, #200]	; (8004f84 <HAL_DMA_Init+0x444>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d004      	beq.n	8004eca <HAL_DMA_Init+0x38a>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a30      	ldr	r2, [pc, #192]	; (8004f88 <HAL_DMA_Init+0x448>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d101      	bne.n	8004ece <HAL_DMA_Init+0x38e>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e000      	b.n	8004ed0 <HAL_DMA_Init+0x390>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 8097 	beq.w	8005004 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a24      	ldr	r2, [pc, #144]	; (8004f6c <HAL_DMA_Init+0x42c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d021      	beq.n	8004f24 <HAL_DMA_Init+0x3e4>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a22      	ldr	r2, [pc, #136]	; (8004f70 <HAL_DMA_Init+0x430>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d01c      	beq.n	8004f24 <HAL_DMA_Init+0x3e4>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a21      	ldr	r2, [pc, #132]	; (8004f74 <HAL_DMA_Init+0x434>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d017      	beq.n	8004f24 <HAL_DMA_Init+0x3e4>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a1f      	ldr	r2, [pc, #124]	; (8004f78 <HAL_DMA_Init+0x438>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d012      	beq.n	8004f24 <HAL_DMA_Init+0x3e4>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a1e      	ldr	r2, [pc, #120]	; (8004f7c <HAL_DMA_Init+0x43c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d00d      	beq.n	8004f24 <HAL_DMA_Init+0x3e4>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a1c      	ldr	r2, [pc, #112]	; (8004f80 <HAL_DMA_Init+0x440>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d008      	beq.n	8004f24 <HAL_DMA_Init+0x3e4>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a1b      	ldr	r2, [pc, #108]	; (8004f84 <HAL_DMA_Init+0x444>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d003      	beq.n	8004f24 <HAL_DMA_Init+0x3e4>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a19      	ldr	r2, [pc, #100]	; (8004f88 <HAL_DMA_Init+0x448>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	4b12      	ldr	r3, [pc, #72]	; (8004f8c <HAL_DMA_Init+0x44c>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	2b40      	cmp	r3, #64	; 0x40
 8004f4c:	d020      	beq.n	8004f90 <HAL_DMA_Init+0x450>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	2b80      	cmp	r3, #128	; 0x80
 8004f54:	d102      	bne.n	8004f5c <HAL_DMA_Init+0x41c>
 8004f56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f5a:	e01a      	b.n	8004f92 <HAL_DMA_Init+0x452>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	e018      	b.n	8004f92 <HAL_DMA_Init+0x452>
 8004f60:	fe10803f 	.word	0xfe10803f
 8004f64:	5c001000 	.word	0x5c001000
 8004f68:	ffff0000 	.word	0xffff0000
 8004f6c:	58025408 	.word	0x58025408
 8004f70:	5802541c 	.word	0x5802541c
 8004f74:	58025430 	.word	0x58025430
 8004f78:	58025444 	.word	0x58025444
 8004f7c:	58025458 	.word	0x58025458
 8004f80:	5802546c 	.word	0x5802546c
 8004f84:	58025480 	.word	0x58025480
 8004f88:	58025494 	.word	0x58025494
 8004f8c:	fffe000f 	.word	0xfffe000f
 8004f90:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	68d2      	ldr	r2, [r2, #12]
 8004f96:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004fa0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004fa8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004fb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004fb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004fc0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	4b6e      	ldr	r3, [pc, #440]	; (8005190 <HAL_DMA_Init+0x650>)
 8004fd8:	4413      	add	r3, r2
 8004fda:	4a6e      	ldr	r2, [pc, #440]	; (8005194 <HAL_DMA_Init+0x654>)
 8004fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe0:	091b      	lsrs	r3, r3, #4
 8004fe2:	009a      	lsls	r2, r3, #2
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f002 f9a9 	bl	8007340 <DMA_CalcBaseAndBitshift>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff6:	f003 031f 	and.w	r3, r3, #31
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	409a      	lsls	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	605a      	str	r2, [r3, #4]
 8005002:	e008      	b.n	8005016 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2240      	movs	r2, #64	; 0x40
 8005008:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2203      	movs	r2, #3
 800500e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e0b7      	b.n	8005186 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a5f      	ldr	r2, [pc, #380]	; (8005198 <HAL_DMA_Init+0x658>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d072      	beq.n	8005106 <HAL_DMA_Init+0x5c6>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a5d      	ldr	r2, [pc, #372]	; (800519c <HAL_DMA_Init+0x65c>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d06d      	beq.n	8005106 <HAL_DMA_Init+0x5c6>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a5c      	ldr	r2, [pc, #368]	; (80051a0 <HAL_DMA_Init+0x660>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d068      	beq.n	8005106 <HAL_DMA_Init+0x5c6>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a5a      	ldr	r2, [pc, #360]	; (80051a4 <HAL_DMA_Init+0x664>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d063      	beq.n	8005106 <HAL_DMA_Init+0x5c6>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a59      	ldr	r2, [pc, #356]	; (80051a8 <HAL_DMA_Init+0x668>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d05e      	beq.n	8005106 <HAL_DMA_Init+0x5c6>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a57      	ldr	r2, [pc, #348]	; (80051ac <HAL_DMA_Init+0x66c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d059      	beq.n	8005106 <HAL_DMA_Init+0x5c6>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a56      	ldr	r2, [pc, #344]	; (80051b0 <HAL_DMA_Init+0x670>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d054      	beq.n	8005106 <HAL_DMA_Init+0x5c6>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a54      	ldr	r2, [pc, #336]	; (80051b4 <HAL_DMA_Init+0x674>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d04f      	beq.n	8005106 <HAL_DMA_Init+0x5c6>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a53      	ldr	r2, [pc, #332]	; (80051b8 <HAL_DMA_Init+0x678>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d04a      	beq.n	8005106 <HAL_DMA_Init+0x5c6>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a51      	ldr	r2, [pc, #324]	; (80051bc <HAL_DMA_Init+0x67c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d045      	beq.n	8005106 <HAL_DMA_Init+0x5c6>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a50      	ldr	r2, [pc, #320]	; (80051c0 <HAL_DMA_Init+0x680>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d040      	beq.n	8005106 <HAL_DMA_Init+0x5c6>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a4e      	ldr	r2, [pc, #312]	; (80051c4 <HAL_DMA_Init+0x684>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d03b      	beq.n	8005106 <HAL_DMA_Init+0x5c6>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a4d      	ldr	r2, [pc, #308]	; (80051c8 <HAL_DMA_Init+0x688>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d036      	beq.n	8005106 <HAL_DMA_Init+0x5c6>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a4b      	ldr	r2, [pc, #300]	; (80051cc <HAL_DMA_Init+0x68c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d031      	beq.n	8005106 <HAL_DMA_Init+0x5c6>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a4a      	ldr	r2, [pc, #296]	; (80051d0 <HAL_DMA_Init+0x690>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d02c      	beq.n	8005106 <HAL_DMA_Init+0x5c6>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a48      	ldr	r2, [pc, #288]	; (80051d4 <HAL_DMA_Init+0x694>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d027      	beq.n	8005106 <HAL_DMA_Init+0x5c6>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a47      	ldr	r2, [pc, #284]	; (80051d8 <HAL_DMA_Init+0x698>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d022      	beq.n	8005106 <HAL_DMA_Init+0x5c6>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a45      	ldr	r2, [pc, #276]	; (80051dc <HAL_DMA_Init+0x69c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d01d      	beq.n	8005106 <HAL_DMA_Init+0x5c6>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a44      	ldr	r2, [pc, #272]	; (80051e0 <HAL_DMA_Init+0x6a0>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d018      	beq.n	8005106 <HAL_DMA_Init+0x5c6>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a42      	ldr	r2, [pc, #264]	; (80051e4 <HAL_DMA_Init+0x6a4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d013      	beq.n	8005106 <HAL_DMA_Init+0x5c6>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a41      	ldr	r2, [pc, #260]	; (80051e8 <HAL_DMA_Init+0x6a8>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00e      	beq.n	8005106 <HAL_DMA_Init+0x5c6>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a3f      	ldr	r2, [pc, #252]	; (80051ec <HAL_DMA_Init+0x6ac>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d009      	beq.n	8005106 <HAL_DMA_Init+0x5c6>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a3e      	ldr	r2, [pc, #248]	; (80051f0 <HAL_DMA_Init+0x6b0>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d004      	beq.n	8005106 <HAL_DMA_Init+0x5c6>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a3c      	ldr	r2, [pc, #240]	; (80051f4 <HAL_DMA_Init+0x6b4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d101      	bne.n	800510a <HAL_DMA_Init+0x5ca>
 8005106:	2301      	movs	r3, #1
 8005108:	e000      	b.n	800510c <HAL_DMA_Init+0x5cc>
 800510a:	2300      	movs	r3, #0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d032      	beq.n	8005176 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f002 fa43 	bl	800759c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	2b80      	cmp	r3, #128	; 0x80
 800511c:	d102      	bne.n	8005124 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005138:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d010      	beq.n	8005164 <HAL_DMA_Init+0x624>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2b08      	cmp	r3, #8
 8005148:	d80c      	bhi.n	8005164 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f002 fac0 	bl	80076d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005160:	605a      	str	r2, [r3, #4]
 8005162:	e008      	b.n	8005176 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	a7fdabf8 	.word	0xa7fdabf8
 8005194:	cccccccd 	.word	0xcccccccd
 8005198:	40020010 	.word	0x40020010
 800519c:	40020028 	.word	0x40020028
 80051a0:	40020040 	.word	0x40020040
 80051a4:	40020058 	.word	0x40020058
 80051a8:	40020070 	.word	0x40020070
 80051ac:	40020088 	.word	0x40020088
 80051b0:	400200a0 	.word	0x400200a0
 80051b4:	400200b8 	.word	0x400200b8
 80051b8:	40020410 	.word	0x40020410
 80051bc:	40020428 	.word	0x40020428
 80051c0:	40020440 	.word	0x40020440
 80051c4:	40020458 	.word	0x40020458
 80051c8:	40020470 	.word	0x40020470
 80051cc:	40020488 	.word	0x40020488
 80051d0:	400204a0 	.word	0x400204a0
 80051d4:	400204b8 	.word	0x400204b8
 80051d8:	58025408 	.word	0x58025408
 80051dc:	5802541c 	.word	0x5802541c
 80051e0:	58025430 	.word	0x58025430
 80051e4:	58025444 	.word	0x58025444
 80051e8:	58025458 	.word	0x58025458
 80051ec:	5802546c 	.word	0x5802546c
 80051f0:	58025480 	.word	0x58025480
 80051f4:	58025494 	.word	0x58025494

080051f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e226      	b.n	8005662 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800521a:	2b01      	cmp	r3, #1
 800521c:	d101      	bne.n	8005222 <HAL_DMA_Start_IT+0x2a>
 800521e:	2302      	movs	r3, #2
 8005220:	e21f      	b.n	8005662 <HAL_DMA_Start_IT+0x46a>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b01      	cmp	r3, #1
 8005234:	f040 820a 	bne.w	800564c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a68      	ldr	r2, [pc, #416]	; (80053ec <HAL_DMA_Start_IT+0x1f4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d04a      	beq.n	80052e6 <HAL_DMA_Start_IT+0xee>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a66      	ldr	r2, [pc, #408]	; (80053f0 <HAL_DMA_Start_IT+0x1f8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d045      	beq.n	80052e6 <HAL_DMA_Start_IT+0xee>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a65      	ldr	r2, [pc, #404]	; (80053f4 <HAL_DMA_Start_IT+0x1fc>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d040      	beq.n	80052e6 <HAL_DMA_Start_IT+0xee>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a63      	ldr	r2, [pc, #396]	; (80053f8 <HAL_DMA_Start_IT+0x200>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d03b      	beq.n	80052e6 <HAL_DMA_Start_IT+0xee>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a62      	ldr	r2, [pc, #392]	; (80053fc <HAL_DMA_Start_IT+0x204>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d036      	beq.n	80052e6 <HAL_DMA_Start_IT+0xee>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a60      	ldr	r2, [pc, #384]	; (8005400 <HAL_DMA_Start_IT+0x208>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d031      	beq.n	80052e6 <HAL_DMA_Start_IT+0xee>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a5f      	ldr	r2, [pc, #380]	; (8005404 <HAL_DMA_Start_IT+0x20c>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d02c      	beq.n	80052e6 <HAL_DMA_Start_IT+0xee>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a5d      	ldr	r2, [pc, #372]	; (8005408 <HAL_DMA_Start_IT+0x210>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d027      	beq.n	80052e6 <HAL_DMA_Start_IT+0xee>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a5c      	ldr	r2, [pc, #368]	; (800540c <HAL_DMA_Start_IT+0x214>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d022      	beq.n	80052e6 <HAL_DMA_Start_IT+0xee>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a5a      	ldr	r2, [pc, #360]	; (8005410 <HAL_DMA_Start_IT+0x218>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d01d      	beq.n	80052e6 <HAL_DMA_Start_IT+0xee>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a59      	ldr	r2, [pc, #356]	; (8005414 <HAL_DMA_Start_IT+0x21c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d018      	beq.n	80052e6 <HAL_DMA_Start_IT+0xee>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a57      	ldr	r2, [pc, #348]	; (8005418 <HAL_DMA_Start_IT+0x220>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d013      	beq.n	80052e6 <HAL_DMA_Start_IT+0xee>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a56      	ldr	r2, [pc, #344]	; (800541c <HAL_DMA_Start_IT+0x224>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d00e      	beq.n	80052e6 <HAL_DMA_Start_IT+0xee>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a54      	ldr	r2, [pc, #336]	; (8005420 <HAL_DMA_Start_IT+0x228>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d009      	beq.n	80052e6 <HAL_DMA_Start_IT+0xee>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a53      	ldr	r2, [pc, #332]	; (8005424 <HAL_DMA_Start_IT+0x22c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d004      	beq.n	80052e6 <HAL_DMA_Start_IT+0xee>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a51      	ldr	r2, [pc, #324]	; (8005428 <HAL_DMA_Start_IT+0x230>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d108      	bne.n	80052f8 <HAL_DMA_Start_IT+0x100>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 0201 	bic.w	r2, r2, #1
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	e007      	b.n	8005308 <HAL_DMA_Start_IT+0x110>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0201 	bic.w	r2, r2, #1
 8005306:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	68b9      	ldr	r1, [r7, #8]
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f001 fe6a 	bl	8006fe8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a34      	ldr	r2, [pc, #208]	; (80053ec <HAL_DMA_Start_IT+0x1f4>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d04a      	beq.n	80053b4 <HAL_DMA_Start_IT+0x1bc>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a33      	ldr	r2, [pc, #204]	; (80053f0 <HAL_DMA_Start_IT+0x1f8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d045      	beq.n	80053b4 <HAL_DMA_Start_IT+0x1bc>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a31      	ldr	r2, [pc, #196]	; (80053f4 <HAL_DMA_Start_IT+0x1fc>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d040      	beq.n	80053b4 <HAL_DMA_Start_IT+0x1bc>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a30      	ldr	r2, [pc, #192]	; (80053f8 <HAL_DMA_Start_IT+0x200>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d03b      	beq.n	80053b4 <HAL_DMA_Start_IT+0x1bc>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a2e      	ldr	r2, [pc, #184]	; (80053fc <HAL_DMA_Start_IT+0x204>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d036      	beq.n	80053b4 <HAL_DMA_Start_IT+0x1bc>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a2d      	ldr	r2, [pc, #180]	; (8005400 <HAL_DMA_Start_IT+0x208>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d031      	beq.n	80053b4 <HAL_DMA_Start_IT+0x1bc>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a2b      	ldr	r2, [pc, #172]	; (8005404 <HAL_DMA_Start_IT+0x20c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d02c      	beq.n	80053b4 <HAL_DMA_Start_IT+0x1bc>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a2a      	ldr	r2, [pc, #168]	; (8005408 <HAL_DMA_Start_IT+0x210>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d027      	beq.n	80053b4 <HAL_DMA_Start_IT+0x1bc>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a28      	ldr	r2, [pc, #160]	; (800540c <HAL_DMA_Start_IT+0x214>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d022      	beq.n	80053b4 <HAL_DMA_Start_IT+0x1bc>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a27      	ldr	r2, [pc, #156]	; (8005410 <HAL_DMA_Start_IT+0x218>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d01d      	beq.n	80053b4 <HAL_DMA_Start_IT+0x1bc>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a25      	ldr	r2, [pc, #148]	; (8005414 <HAL_DMA_Start_IT+0x21c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d018      	beq.n	80053b4 <HAL_DMA_Start_IT+0x1bc>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a24      	ldr	r2, [pc, #144]	; (8005418 <HAL_DMA_Start_IT+0x220>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d013      	beq.n	80053b4 <HAL_DMA_Start_IT+0x1bc>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a22      	ldr	r2, [pc, #136]	; (800541c <HAL_DMA_Start_IT+0x224>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d00e      	beq.n	80053b4 <HAL_DMA_Start_IT+0x1bc>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a21      	ldr	r2, [pc, #132]	; (8005420 <HAL_DMA_Start_IT+0x228>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d009      	beq.n	80053b4 <HAL_DMA_Start_IT+0x1bc>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a1f      	ldr	r2, [pc, #124]	; (8005424 <HAL_DMA_Start_IT+0x22c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d004      	beq.n	80053b4 <HAL_DMA_Start_IT+0x1bc>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a1e      	ldr	r2, [pc, #120]	; (8005428 <HAL_DMA_Start_IT+0x230>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d101      	bne.n	80053b8 <HAL_DMA_Start_IT+0x1c0>
 80053b4:	2301      	movs	r3, #1
 80053b6:	e000      	b.n	80053ba <HAL_DMA_Start_IT+0x1c2>
 80053b8:	2300      	movs	r3, #0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d036      	beq.n	800542c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f023 021e 	bic.w	r2, r3, #30
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f042 0216 	orr.w	r2, r2, #22
 80053d0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d03e      	beq.n	8005458 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f042 0208 	orr.w	r2, r2, #8
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	e035      	b.n	8005458 <HAL_DMA_Start_IT+0x260>
 80053ec:	40020010 	.word	0x40020010
 80053f0:	40020028 	.word	0x40020028
 80053f4:	40020040 	.word	0x40020040
 80053f8:	40020058 	.word	0x40020058
 80053fc:	40020070 	.word	0x40020070
 8005400:	40020088 	.word	0x40020088
 8005404:	400200a0 	.word	0x400200a0
 8005408:	400200b8 	.word	0x400200b8
 800540c:	40020410 	.word	0x40020410
 8005410:	40020428 	.word	0x40020428
 8005414:	40020440 	.word	0x40020440
 8005418:	40020458 	.word	0x40020458
 800541c:	40020470 	.word	0x40020470
 8005420:	40020488 	.word	0x40020488
 8005424:	400204a0 	.word	0x400204a0
 8005428:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f023 020e 	bic.w	r2, r3, #14
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 020a 	orr.w	r2, r2, #10
 800543e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	2b00      	cmp	r3, #0
 8005446:	d007      	beq.n	8005458 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0204 	orr.w	r2, r2, #4
 8005456:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a83      	ldr	r2, [pc, #524]	; (800566c <HAL_DMA_Start_IT+0x474>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d072      	beq.n	8005548 <HAL_DMA_Start_IT+0x350>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a82      	ldr	r2, [pc, #520]	; (8005670 <HAL_DMA_Start_IT+0x478>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d06d      	beq.n	8005548 <HAL_DMA_Start_IT+0x350>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a80      	ldr	r2, [pc, #512]	; (8005674 <HAL_DMA_Start_IT+0x47c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d068      	beq.n	8005548 <HAL_DMA_Start_IT+0x350>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a7f      	ldr	r2, [pc, #508]	; (8005678 <HAL_DMA_Start_IT+0x480>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d063      	beq.n	8005548 <HAL_DMA_Start_IT+0x350>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a7d      	ldr	r2, [pc, #500]	; (800567c <HAL_DMA_Start_IT+0x484>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d05e      	beq.n	8005548 <HAL_DMA_Start_IT+0x350>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a7c      	ldr	r2, [pc, #496]	; (8005680 <HAL_DMA_Start_IT+0x488>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d059      	beq.n	8005548 <HAL_DMA_Start_IT+0x350>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a7a      	ldr	r2, [pc, #488]	; (8005684 <HAL_DMA_Start_IT+0x48c>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d054      	beq.n	8005548 <HAL_DMA_Start_IT+0x350>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a79      	ldr	r2, [pc, #484]	; (8005688 <HAL_DMA_Start_IT+0x490>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d04f      	beq.n	8005548 <HAL_DMA_Start_IT+0x350>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a77      	ldr	r2, [pc, #476]	; (800568c <HAL_DMA_Start_IT+0x494>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d04a      	beq.n	8005548 <HAL_DMA_Start_IT+0x350>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a76      	ldr	r2, [pc, #472]	; (8005690 <HAL_DMA_Start_IT+0x498>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d045      	beq.n	8005548 <HAL_DMA_Start_IT+0x350>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a74      	ldr	r2, [pc, #464]	; (8005694 <HAL_DMA_Start_IT+0x49c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d040      	beq.n	8005548 <HAL_DMA_Start_IT+0x350>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a73      	ldr	r2, [pc, #460]	; (8005698 <HAL_DMA_Start_IT+0x4a0>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d03b      	beq.n	8005548 <HAL_DMA_Start_IT+0x350>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a71      	ldr	r2, [pc, #452]	; (800569c <HAL_DMA_Start_IT+0x4a4>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d036      	beq.n	8005548 <HAL_DMA_Start_IT+0x350>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a70      	ldr	r2, [pc, #448]	; (80056a0 <HAL_DMA_Start_IT+0x4a8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d031      	beq.n	8005548 <HAL_DMA_Start_IT+0x350>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a6e      	ldr	r2, [pc, #440]	; (80056a4 <HAL_DMA_Start_IT+0x4ac>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d02c      	beq.n	8005548 <HAL_DMA_Start_IT+0x350>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a6d      	ldr	r2, [pc, #436]	; (80056a8 <HAL_DMA_Start_IT+0x4b0>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d027      	beq.n	8005548 <HAL_DMA_Start_IT+0x350>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a6b      	ldr	r2, [pc, #428]	; (80056ac <HAL_DMA_Start_IT+0x4b4>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d022      	beq.n	8005548 <HAL_DMA_Start_IT+0x350>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a6a      	ldr	r2, [pc, #424]	; (80056b0 <HAL_DMA_Start_IT+0x4b8>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d01d      	beq.n	8005548 <HAL_DMA_Start_IT+0x350>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a68      	ldr	r2, [pc, #416]	; (80056b4 <HAL_DMA_Start_IT+0x4bc>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d018      	beq.n	8005548 <HAL_DMA_Start_IT+0x350>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a67      	ldr	r2, [pc, #412]	; (80056b8 <HAL_DMA_Start_IT+0x4c0>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d013      	beq.n	8005548 <HAL_DMA_Start_IT+0x350>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a65      	ldr	r2, [pc, #404]	; (80056bc <HAL_DMA_Start_IT+0x4c4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d00e      	beq.n	8005548 <HAL_DMA_Start_IT+0x350>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a64      	ldr	r2, [pc, #400]	; (80056c0 <HAL_DMA_Start_IT+0x4c8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d009      	beq.n	8005548 <HAL_DMA_Start_IT+0x350>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a62      	ldr	r2, [pc, #392]	; (80056c4 <HAL_DMA_Start_IT+0x4cc>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d004      	beq.n	8005548 <HAL_DMA_Start_IT+0x350>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a61      	ldr	r2, [pc, #388]	; (80056c8 <HAL_DMA_Start_IT+0x4d0>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d101      	bne.n	800554c <HAL_DMA_Start_IT+0x354>
 8005548:	2301      	movs	r3, #1
 800554a:	e000      	b.n	800554e <HAL_DMA_Start_IT+0x356>
 800554c:	2300      	movs	r3, #0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d01a      	beq.n	8005588 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d007      	beq.n	8005570 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800556a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800556e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005574:	2b00      	cmp	r3, #0
 8005576:	d007      	beq.n	8005588 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005582:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005586:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a37      	ldr	r2, [pc, #220]	; (800566c <HAL_DMA_Start_IT+0x474>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d04a      	beq.n	8005628 <HAL_DMA_Start_IT+0x430>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a36      	ldr	r2, [pc, #216]	; (8005670 <HAL_DMA_Start_IT+0x478>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d045      	beq.n	8005628 <HAL_DMA_Start_IT+0x430>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a34      	ldr	r2, [pc, #208]	; (8005674 <HAL_DMA_Start_IT+0x47c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d040      	beq.n	8005628 <HAL_DMA_Start_IT+0x430>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a33      	ldr	r2, [pc, #204]	; (8005678 <HAL_DMA_Start_IT+0x480>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d03b      	beq.n	8005628 <HAL_DMA_Start_IT+0x430>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a31      	ldr	r2, [pc, #196]	; (800567c <HAL_DMA_Start_IT+0x484>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d036      	beq.n	8005628 <HAL_DMA_Start_IT+0x430>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a30      	ldr	r2, [pc, #192]	; (8005680 <HAL_DMA_Start_IT+0x488>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d031      	beq.n	8005628 <HAL_DMA_Start_IT+0x430>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a2e      	ldr	r2, [pc, #184]	; (8005684 <HAL_DMA_Start_IT+0x48c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d02c      	beq.n	8005628 <HAL_DMA_Start_IT+0x430>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a2d      	ldr	r2, [pc, #180]	; (8005688 <HAL_DMA_Start_IT+0x490>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d027      	beq.n	8005628 <HAL_DMA_Start_IT+0x430>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a2b      	ldr	r2, [pc, #172]	; (800568c <HAL_DMA_Start_IT+0x494>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d022      	beq.n	8005628 <HAL_DMA_Start_IT+0x430>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a2a      	ldr	r2, [pc, #168]	; (8005690 <HAL_DMA_Start_IT+0x498>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d01d      	beq.n	8005628 <HAL_DMA_Start_IT+0x430>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a28      	ldr	r2, [pc, #160]	; (8005694 <HAL_DMA_Start_IT+0x49c>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d018      	beq.n	8005628 <HAL_DMA_Start_IT+0x430>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a27      	ldr	r2, [pc, #156]	; (8005698 <HAL_DMA_Start_IT+0x4a0>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d013      	beq.n	8005628 <HAL_DMA_Start_IT+0x430>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a25      	ldr	r2, [pc, #148]	; (800569c <HAL_DMA_Start_IT+0x4a4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d00e      	beq.n	8005628 <HAL_DMA_Start_IT+0x430>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a24      	ldr	r2, [pc, #144]	; (80056a0 <HAL_DMA_Start_IT+0x4a8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d009      	beq.n	8005628 <HAL_DMA_Start_IT+0x430>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a22      	ldr	r2, [pc, #136]	; (80056a4 <HAL_DMA_Start_IT+0x4ac>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d004      	beq.n	8005628 <HAL_DMA_Start_IT+0x430>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a21      	ldr	r2, [pc, #132]	; (80056a8 <HAL_DMA_Start_IT+0x4b0>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d108      	bne.n	800563a <HAL_DMA_Start_IT+0x442>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0201 	orr.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	e012      	b.n	8005660 <HAL_DMA_Start_IT+0x468>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f042 0201 	orr.w	r2, r2, #1
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	e009      	b.n	8005660 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005652:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005660:	7dfb      	ldrb	r3, [r7, #23]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	40020010 	.word	0x40020010
 8005670:	40020028 	.word	0x40020028
 8005674:	40020040 	.word	0x40020040
 8005678:	40020058 	.word	0x40020058
 800567c:	40020070 	.word	0x40020070
 8005680:	40020088 	.word	0x40020088
 8005684:	400200a0 	.word	0x400200a0
 8005688:	400200b8 	.word	0x400200b8
 800568c:	40020410 	.word	0x40020410
 8005690:	40020428 	.word	0x40020428
 8005694:	40020440 	.word	0x40020440
 8005698:	40020458 	.word	0x40020458
 800569c:	40020470 	.word	0x40020470
 80056a0:	40020488 	.word	0x40020488
 80056a4:	400204a0 	.word	0x400204a0
 80056a8:	400204b8 	.word	0x400204b8
 80056ac:	58025408 	.word	0x58025408
 80056b0:	5802541c 	.word	0x5802541c
 80056b4:	58025430 	.word	0x58025430
 80056b8:	58025444 	.word	0x58025444
 80056bc:	58025458 	.word	0x58025458
 80056c0:	5802546c 	.word	0x5802546c
 80056c4:	58025480 	.word	0x58025480
 80056c8:	58025494 	.word	0x58025494

080056cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80056d4:	f7fd f9d6 	bl	8002a84 <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e2dc      	b.n	8005c9e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d008      	beq.n	8005702 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2280      	movs	r2, #128	; 0x80
 80056f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e2cd      	b.n	8005c9e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a76      	ldr	r2, [pc, #472]	; (80058e0 <HAL_DMA_Abort+0x214>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d04a      	beq.n	80057a2 <HAL_DMA_Abort+0xd6>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a74      	ldr	r2, [pc, #464]	; (80058e4 <HAL_DMA_Abort+0x218>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d045      	beq.n	80057a2 <HAL_DMA_Abort+0xd6>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a73      	ldr	r2, [pc, #460]	; (80058e8 <HAL_DMA_Abort+0x21c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d040      	beq.n	80057a2 <HAL_DMA_Abort+0xd6>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a71      	ldr	r2, [pc, #452]	; (80058ec <HAL_DMA_Abort+0x220>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d03b      	beq.n	80057a2 <HAL_DMA_Abort+0xd6>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a70      	ldr	r2, [pc, #448]	; (80058f0 <HAL_DMA_Abort+0x224>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d036      	beq.n	80057a2 <HAL_DMA_Abort+0xd6>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a6e      	ldr	r2, [pc, #440]	; (80058f4 <HAL_DMA_Abort+0x228>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d031      	beq.n	80057a2 <HAL_DMA_Abort+0xd6>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a6d      	ldr	r2, [pc, #436]	; (80058f8 <HAL_DMA_Abort+0x22c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d02c      	beq.n	80057a2 <HAL_DMA_Abort+0xd6>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a6b      	ldr	r2, [pc, #428]	; (80058fc <HAL_DMA_Abort+0x230>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d027      	beq.n	80057a2 <HAL_DMA_Abort+0xd6>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a6a      	ldr	r2, [pc, #424]	; (8005900 <HAL_DMA_Abort+0x234>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d022      	beq.n	80057a2 <HAL_DMA_Abort+0xd6>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a68      	ldr	r2, [pc, #416]	; (8005904 <HAL_DMA_Abort+0x238>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d01d      	beq.n	80057a2 <HAL_DMA_Abort+0xd6>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a67      	ldr	r2, [pc, #412]	; (8005908 <HAL_DMA_Abort+0x23c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d018      	beq.n	80057a2 <HAL_DMA_Abort+0xd6>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a65      	ldr	r2, [pc, #404]	; (800590c <HAL_DMA_Abort+0x240>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d013      	beq.n	80057a2 <HAL_DMA_Abort+0xd6>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a64      	ldr	r2, [pc, #400]	; (8005910 <HAL_DMA_Abort+0x244>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d00e      	beq.n	80057a2 <HAL_DMA_Abort+0xd6>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a62      	ldr	r2, [pc, #392]	; (8005914 <HAL_DMA_Abort+0x248>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d009      	beq.n	80057a2 <HAL_DMA_Abort+0xd6>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a61      	ldr	r2, [pc, #388]	; (8005918 <HAL_DMA_Abort+0x24c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d004      	beq.n	80057a2 <HAL_DMA_Abort+0xd6>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a5f      	ldr	r2, [pc, #380]	; (800591c <HAL_DMA_Abort+0x250>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d101      	bne.n	80057a6 <HAL_DMA_Abort+0xda>
 80057a2:	2301      	movs	r3, #1
 80057a4:	e000      	b.n	80057a8 <HAL_DMA_Abort+0xdc>
 80057a6:	2300      	movs	r3, #0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d013      	beq.n	80057d4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 021e 	bic.w	r2, r2, #30
 80057ba:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	695a      	ldr	r2, [r3, #20]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057ca:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	617b      	str	r3, [r7, #20]
 80057d2:	e00a      	b.n	80057ea <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 020e 	bic.w	r2, r2, #14
 80057e2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a3c      	ldr	r2, [pc, #240]	; (80058e0 <HAL_DMA_Abort+0x214>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d072      	beq.n	80058da <HAL_DMA_Abort+0x20e>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a3a      	ldr	r2, [pc, #232]	; (80058e4 <HAL_DMA_Abort+0x218>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d06d      	beq.n	80058da <HAL_DMA_Abort+0x20e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a39      	ldr	r2, [pc, #228]	; (80058e8 <HAL_DMA_Abort+0x21c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d068      	beq.n	80058da <HAL_DMA_Abort+0x20e>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a37      	ldr	r2, [pc, #220]	; (80058ec <HAL_DMA_Abort+0x220>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d063      	beq.n	80058da <HAL_DMA_Abort+0x20e>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a36      	ldr	r2, [pc, #216]	; (80058f0 <HAL_DMA_Abort+0x224>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d05e      	beq.n	80058da <HAL_DMA_Abort+0x20e>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a34      	ldr	r2, [pc, #208]	; (80058f4 <HAL_DMA_Abort+0x228>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d059      	beq.n	80058da <HAL_DMA_Abort+0x20e>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a33      	ldr	r2, [pc, #204]	; (80058f8 <HAL_DMA_Abort+0x22c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d054      	beq.n	80058da <HAL_DMA_Abort+0x20e>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a31      	ldr	r2, [pc, #196]	; (80058fc <HAL_DMA_Abort+0x230>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d04f      	beq.n	80058da <HAL_DMA_Abort+0x20e>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a30      	ldr	r2, [pc, #192]	; (8005900 <HAL_DMA_Abort+0x234>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d04a      	beq.n	80058da <HAL_DMA_Abort+0x20e>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a2e      	ldr	r2, [pc, #184]	; (8005904 <HAL_DMA_Abort+0x238>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d045      	beq.n	80058da <HAL_DMA_Abort+0x20e>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a2d      	ldr	r2, [pc, #180]	; (8005908 <HAL_DMA_Abort+0x23c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d040      	beq.n	80058da <HAL_DMA_Abort+0x20e>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a2b      	ldr	r2, [pc, #172]	; (800590c <HAL_DMA_Abort+0x240>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d03b      	beq.n	80058da <HAL_DMA_Abort+0x20e>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a2a      	ldr	r2, [pc, #168]	; (8005910 <HAL_DMA_Abort+0x244>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d036      	beq.n	80058da <HAL_DMA_Abort+0x20e>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a28      	ldr	r2, [pc, #160]	; (8005914 <HAL_DMA_Abort+0x248>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d031      	beq.n	80058da <HAL_DMA_Abort+0x20e>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a27      	ldr	r2, [pc, #156]	; (8005918 <HAL_DMA_Abort+0x24c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d02c      	beq.n	80058da <HAL_DMA_Abort+0x20e>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a25      	ldr	r2, [pc, #148]	; (800591c <HAL_DMA_Abort+0x250>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d027      	beq.n	80058da <HAL_DMA_Abort+0x20e>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a24      	ldr	r2, [pc, #144]	; (8005920 <HAL_DMA_Abort+0x254>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d022      	beq.n	80058da <HAL_DMA_Abort+0x20e>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a22      	ldr	r2, [pc, #136]	; (8005924 <HAL_DMA_Abort+0x258>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d01d      	beq.n	80058da <HAL_DMA_Abort+0x20e>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a21      	ldr	r2, [pc, #132]	; (8005928 <HAL_DMA_Abort+0x25c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d018      	beq.n	80058da <HAL_DMA_Abort+0x20e>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a1f      	ldr	r2, [pc, #124]	; (800592c <HAL_DMA_Abort+0x260>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d013      	beq.n	80058da <HAL_DMA_Abort+0x20e>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1e      	ldr	r2, [pc, #120]	; (8005930 <HAL_DMA_Abort+0x264>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d00e      	beq.n	80058da <HAL_DMA_Abort+0x20e>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a1c      	ldr	r2, [pc, #112]	; (8005934 <HAL_DMA_Abort+0x268>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d009      	beq.n	80058da <HAL_DMA_Abort+0x20e>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a1b      	ldr	r2, [pc, #108]	; (8005938 <HAL_DMA_Abort+0x26c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d004      	beq.n	80058da <HAL_DMA_Abort+0x20e>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a19      	ldr	r2, [pc, #100]	; (800593c <HAL_DMA_Abort+0x270>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d132      	bne.n	8005940 <HAL_DMA_Abort+0x274>
 80058da:	2301      	movs	r3, #1
 80058dc:	e031      	b.n	8005942 <HAL_DMA_Abort+0x276>
 80058de:	bf00      	nop
 80058e0:	40020010 	.word	0x40020010
 80058e4:	40020028 	.word	0x40020028
 80058e8:	40020040 	.word	0x40020040
 80058ec:	40020058 	.word	0x40020058
 80058f0:	40020070 	.word	0x40020070
 80058f4:	40020088 	.word	0x40020088
 80058f8:	400200a0 	.word	0x400200a0
 80058fc:	400200b8 	.word	0x400200b8
 8005900:	40020410 	.word	0x40020410
 8005904:	40020428 	.word	0x40020428
 8005908:	40020440 	.word	0x40020440
 800590c:	40020458 	.word	0x40020458
 8005910:	40020470 	.word	0x40020470
 8005914:	40020488 	.word	0x40020488
 8005918:	400204a0 	.word	0x400204a0
 800591c:	400204b8 	.word	0x400204b8
 8005920:	58025408 	.word	0x58025408
 8005924:	5802541c 	.word	0x5802541c
 8005928:	58025430 	.word	0x58025430
 800592c:	58025444 	.word	0x58025444
 8005930:	58025458 	.word	0x58025458
 8005934:	5802546c 	.word	0x5802546c
 8005938:	58025480 	.word	0x58025480
 800593c:	58025494 	.word	0x58025494
 8005940:	2300      	movs	r3, #0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d007      	beq.n	8005956 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005950:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005954:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a6d      	ldr	r2, [pc, #436]	; (8005b10 <HAL_DMA_Abort+0x444>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d04a      	beq.n	80059f6 <HAL_DMA_Abort+0x32a>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a6b      	ldr	r2, [pc, #428]	; (8005b14 <HAL_DMA_Abort+0x448>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d045      	beq.n	80059f6 <HAL_DMA_Abort+0x32a>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a6a      	ldr	r2, [pc, #424]	; (8005b18 <HAL_DMA_Abort+0x44c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d040      	beq.n	80059f6 <HAL_DMA_Abort+0x32a>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a68      	ldr	r2, [pc, #416]	; (8005b1c <HAL_DMA_Abort+0x450>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d03b      	beq.n	80059f6 <HAL_DMA_Abort+0x32a>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a67      	ldr	r2, [pc, #412]	; (8005b20 <HAL_DMA_Abort+0x454>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d036      	beq.n	80059f6 <HAL_DMA_Abort+0x32a>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a65      	ldr	r2, [pc, #404]	; (8005b24 <HAL_DMA_Abort+0x458>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d031      	beq.n	80059f6 <HAL_DMA_Abort+0x32a>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a64      	ldr	r2, [pc, #400]	; (8005b28 <HAL_DMA_Abort+0x45c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d02c      	beq.n	80059f6 <HAL_DMA_Abort+0x32a>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a62      	ldr	r2, [pc, #392]	; (8005b2c <HAL_DMA_Abort+0x460>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d027      	beq.n	80059f6 <HAL_DMA_Abort+0x32a>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a61      	ldr	r2, [pc, #388]	; (8005b30 <HAL_DMA_Abort+0x464>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d022      	beq.n	80059f6 <HAL_DMA_Abort+0x32a>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a5f      	ldr	r2, [pc, #380]	; (8005b34 <HAL_DMA_Abort+0x468>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d01d      	beq.n	80059f6 <HAL_DMA_Abort+0x32a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a5e      	ldr	r2, [pc, #376]	; (8005b38 <HAL_DMA_Abort+0x46c>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d018      	beq.n	80059f6 <HAL_DMA_Abort+0x32a>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a5c      	ldr	r2, [pc, #368]	; (8005b3c <HAL_DMA_Abort+0x470>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d013      	beq.n	80059f6 <HAL_DMA_Abort+0x32a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a5b      	ldr	r2, [pc, #364]	; (8005b40 <HAL_DMA_Abort+0x474>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d00e      	beq.n	80059f6 <HAL_DMA_Abort+0x32a>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a59      	ldr	r2, [pc, #356]	; (8005b44 <HAL_DMA_Abort+0x478>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d009      	beq.n	80059f6 <HAL_DMA_Abort+0x32a>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a58      	ldr	r2, [pc, #352]	; (8005b48 <HAL_DMA_Abort+0x47c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d004      	beq.n	80059f6 <HAL_DMA_Abort+0x32a>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a56      	ldr	r2, [pc, #344]	; (8005b4c <HAL_DMA_Abort+0x480>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d108      	bne.n	8005a08 <HAL_DMA_Abort+0x33c>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0201 	bic.w	r2, r2, #1
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	e007      	b.n	8005a18 <HAL_DMA_Abort+0x34c>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 0201 	bic.w	r2, r2, #1
 8005a16:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005a18:	e013      	b.n	8005a42 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a1a:	f7fd f833 	bl	8002a84 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b05      	cmp	r3, #5
 8005a26:	d90c      	bls.n	8005a42 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2203      	movs	r2, #3
 8005a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e12d      	b.n	8005c9e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1e5      	bne.n	8005a1a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a2f      	ldr	r2, [pc, #188]	; (8005b10 <HAL_DMA_Abort+0x444>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d04a      	beq.n	8005aee <HAL_DMA_Abort+0x422>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a2d      	ldr	r2, [pc, #180]	; (8005b14 <HAL_DMA_Abort+0x448>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d045      	beq.n	8005aee <HAL_DMA_Abort+0x422>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a2c      	ldr	r2, [pc, #176]	; (8005b18 <HAL_DMA_Abort+0x44c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d040      	beq.n	8005aee <HAL_DMA_Abort+0x422>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a2a      	ldr	r2, [pc, #168]	; (8005b1c <HAL_DMA_Abort+0x450>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d03b      	beq.n	8005aee <HAL_DMA_Abort+0x422>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a29      	ldr	r2, [pc, #164]	; (8005b20 <HAL_DMA_Abort+0x454>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d036      	beq.n	8005aee <HAL_DMA_Abort+0x422>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a27      	ldr	r2, [pc, #156]	; (8005b24 <HAL_DMA_Abort+0x458>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d031      	beq.n	8005aee <HAL_DMA_Abort+0x422>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a26      	ldr	r2, [pc, #152]	; (8005b28 <HAL_DMA_Abort+0x45c>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d02c      	beq.n	8005aee <HAL_DMA_Abort+0x422>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a24      	ldr	r2, [pc, #144]	; (8005b2c <HAL_DMA_Abort+0x460>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d027      	beq.n	8005aee <HAL_DMA_Abort+0x422>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a23      	ldr	r2, [pc, #140]	; (8005b30 <HAL_DMA_Abort+0x464>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d022      	beq.n	8005aee <HAL_DMA_Abort+0x422>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a21      	ldr	r2, [pc, #132]	; (8005b34 <HAL_DMA_Abort+0x468>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d01d      	beq.n	8005aee <HAL_DMA_Abort+0x422>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a20      	ldr	r2, [pc, #128]	; (8005b38 <HAL_DMA_Abort+0x46c>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d018      	beq.n	8005aee <HAL_DMA_Abort+0x422>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a1e      	ldr	r2, [pc, #120]	; (8005b3c <HAL_DMA_Abort+0x470>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d013      	beq.n	8005aee <HAL_DMA_Abort+0x422>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a1d      	ldr	r2, [pc, #116]	; (8005b40 <HAL_DMA_Abort+0x474>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d00e      	beq.n	8005aee <HAL_DMA_Abort+0x422>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a1b      	ldr	r2, [pc, #108]	; (8005b44 <HAL_DMA_Abort+0x478>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d009      	beq.n	8005aee <HAL_DMA_Abort+0x422>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a1a      	ldr	r2, [pc, #104]	; (8005b48 <HAL_DMA_Abort+0x47c>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d004      	beq.n	8005aee <HAL_DMA_Abort+0x422>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a18      	ldr	r2, [pc, #96]	; (8005b4c <HAL_DMA_Abort+0x480>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d101      	bne.n	8005af2 <HAL_DMA_Abort+0x426>
 8005aee:	2301      	movs	r3, #1
 8005af0:	e000      	b.n	8005af4 <HAL_DMA_Abort+0x428>
 8005af2:	2300      	movs	r3, #0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d02b      	beq.n	8005b50 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b02:	f003 031f 	and.w	r3, r3, #31
 8005b06:	223f      	movs	r2, #63	; 0x3f
 8005b08:	409a      	lsls	r2, r3
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	609a      	str	r2, [r3, #8]
 8005b0e:	e02a      	b.n	8005b66 <HAL_DMA_Abort+0x49a>
 8005b10:	40020010 	.word	0x40020010
 8005b14:	40020028 	.word	0x40020028
 8005b18:	40020040 	.word	0x40020040
 8005b1c:	40020058 	.word	0x40020058
 8005b20:	40020070 	.word	0x40020070
 8005b24:	40020088 	.word	0x40020088
 8005b28:	400200a0 	.word	0x400200a0
 8005b2c:	400200b8 	.word	0x400200b8
 8005b30:	40020410 	.word	0x40020410
 8005b34:	40020428 	.word	0x40020428
 8005b38:	40020440 	.word	0x40020440
 8005b3c:	40020458 	.word	0x40020458
 8005b40:	40020470 	.word	0x40020470
 8005b44:	40020488 	.word	0x40020488
 8005b48:	400204a0 	.word	0x400204a0
 8005b4c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b54:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b5a:	f003 031f 	and.w	r3, r3, #31
 8005b5e:	2201      	movs	r2, #1
 8005b60:	409a      	lsls	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a4f      	ldr	r2, [pc, #316]	; (8005ca8 <HAL_DMA_Abort+0x5dc>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d072      	beq.n	8005c56 <HAL_DMA_Abort+0x58a>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a4d      	ldr	r2, [pc, #308]	; (8005cac <HAL_DMA_Abort+0x5e0>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d06d      	beq.n	8005c56 <HAL_DMA_Abort+0x58a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a4c      	ldr	r2, [pc, #304]	; (8005cb0 <HAL_DMA_Abort+0x5e4>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d068      	beq.n	8005c56 <HAL_DMA_Abort+0x58a>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a4a      	ldr	r2, [pc, #296]	; (8005cb4 <HAL_DMA_Abort+0x5e8>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d063      	beq.n	8005c56 <HAL_DMA_Abort+0x58a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a49      	ldr	r2, [pc, #292]	; (8005cb8 <HAL_DMA_Abort+0x5ec>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d05e      	beq.n	8005c56 <HAL_DMA_Abort+0x58a>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a47      	ldr	r2, [pc, #284]	; (8005cbc <HAL_DMA_Abort+0x5f0>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d059      	beq.n	8005c56 <HAL_DMA_Abort+0x58a>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a46      	ldr	r2, [pc, #280]	; (8005cc0 <HAL_DMA_Abort+0x5f4>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d054      	beq.n	8005c56 <HAL_DMA_Abort+0x58a>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a44      	ldr	r2, [pc, #272]	; (8005cc4 <HAL_DMA_Abort+0x5f8>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d04f      	beq.n	8005c56 <HAL_DMA_Abort+0x58a>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a43      	ldr	r2, [pc, #268]	; (8005cc8 <HAL_DMA_Abort+0x5fc>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d04a      	beq.n	8005c56 <HAL_DMA_Abort+0x58a>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a41      	ldr	r2, [pc, #260]	; (8005ccc <HAL_DMA_Abort+0x600>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d045      	beq.n	8005c56 <HAL_DMA_Abort+0x58a>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a40      	ldr	r2, [pc, #256]	; (8005cd0 <HAL_DMA_Abort+0x604>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d040      	beq.n	8005c56 <HAL_DMA_Abort+0x58a>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a3e      	ldr	r2, [pc, #248]	; (8005cd4 <HAL_DMA_Abort+0x608>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d03b      	beq.n	8005c56 <HAL_DMA_Abort+0x58a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a3d      	ldr	r2, [pc, #244]	; (8005cd8 <HAL_DMA_Abort+0x60c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d036      	beq.n	8005c56 <HAL_DMA_Abort+0x58a>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a3b      	ldr	r2, [pc, #236]	; (8005cdc <HAL_DMA_Abort+0x610>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d031      	beq.n	8005c56 <HAL_DMA_Abort+0x58a>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a3a      	ldr	r2, [pc, #232]	; (8005ce0 <HAL_DMA_Abort+0x614>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d02c      	beq.n	8005c56 <HAL_DMA_Abort+0x58a>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a38      	ldr	r2, [pc, #224]	; (8005ce4 <HAL_DMA_Abort+0x618>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d027      	beq.n	8005c56 <HAL_DMA_Abort+0x58a>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a37      	ldr	r2, [pc, #220]	; (8005ce8 <HAL_DMA_Abort+0x61c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d022      	beq.n	8005c56 <HAL_DMA_Abort+0x58a>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a35      	ldr	r2, [pc, #212]	; (8005cec <HAL_DMA_Abort+0x620>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d01d      	beq.n	8005c56 <HAL_DMA_Abort+0x58a>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a34      	ldr	r2, [pc, #208]	; (8005cf0 <HAL_DMA_Abort+0x624>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d018      	beq.n	8005c56 <HAL_DMA_Abort+0x58a>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a32      	ldr	r2, [pc, #200]	; (8005cf4 <HAL_DMA_Abort+0x628>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d013      	beq.n	8005c56 <HAL_DMA_Abort+0x58a>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a31      	ldr	r2, [pc, #196]	; (8005cf8 <HAL_DMA_Abort+0x62c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d00e      	beq.n	8005c56 <HAL_DMA_Abort+0x58a>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a2f      	ldr	r2, [pc, #188]	; (8005cfc <HAL_DMA_Abort+0x630>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d009      	beq.n	8005c56 <HAL_DMA_Abort+0x58a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a2e      	ldr	r2, [pc, #184]	; (8005d00 <HAL_DMA_Abort+0x634>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d004      	beq.n	8005c56 <HAL_DMA_Abort+0x58a>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a2c      	ldr	r2, [pc, #176]	; (8005d04 <HAL_DMA_Abort+0x638>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d101      	bne.n	8005c5a <HAL_DMA_Abort+0x58e>
 8005c56:	2301      	movs	r3, #1
 8005c58:	e000      	b.n	8005c5c <HAL_DMA_Abort+0x590>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d015      	beq.n	8005c8c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c68:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00c      	beq.n	8005c8c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c80:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c8a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3718      	adds	r7, #24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40020010 	.word	0x40020010
 8005cac:	40020028 	.word	0x40020028
 8005cb0:	40020040 	.word	0x40020040
 8005cb4:	40020058 	.word	0x40020058
 8005cb8:	40020070 	.word	0x40020070
 8005cbc:	40020088 	.word	0x40020088
 8005cc0:	400200a0 	.word	0x400200a0
 8005cc4:	400200b8 	.word	0x400200b8
 8005cc8:	40020410 	.word	0x40020410
 8005ccc:	40020428 	.word	0x40020428
 8005cd0:	40020440 	.word	0x40020440
 8005cd4:	40020458 	.word	0x40020458
 8005cd8:	40020470 	.word	0x40020470
 8005cdc:	40020488 	.word	0x40020488
 8005ce0:	400204a0 	.word	0x400204a0
 8005ce4:	400204b8 	.word	0x400204b8
 8005ce8:	58025408 	.word	0x58025408
 8005cec:	5802541c 	.word	0x5802541c
 8005cf0:	58025430 	.word	0x58025430
 8005cf4:	58025444 	.word	0x58025444
 8005cf8:	58025458 	.word	0x58025458
 8005cfc:	5802546c 	.word	0x5802546c
 8005d00:	58025480 	.word	0x58025480
 8005d04:	58025494 	.word	0x58025494

08005d08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e237      	b.n	800618a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d004      	beq.n	8005d30 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2280      	movs	r2, #128	; 0x80
 8005d2a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e22c      	b.n	800618a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a5c      	ldr	r2, [pc, #368]	; (8005ea8 <HAL_DMA_Abort_IT+0x1a0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d04a      	beq.n	8005dd0 <HAL_DMA_Abort_IT+0xc8>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a5b      	ldr	r2, [pc, #364]	; (8005eac <HAL_DMA_Abort_IT+0x1a4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d045      	beq.n	8005dd0 <HAL_DMA_Abort_IT+0xc8>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a59      	ldr	r2, [pc, #356]	; (8005eb0 <HAL_DMA_Abort_IT+0x1a8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d040      	beq.n	8005dd0 <HAL_DMA_Abort_IT+0xc8>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a58      	ldr	r2, [pc, #352]	; (8005eb4 <HAL_DMA_Abort_IT+0x1ac>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d03b      	beq.n	8005dd0 <HAL_DMA_Abort_IT+0xc8>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a56      	ldr	r2, [pc, #344]	; (8005eb8 <HAL_DMA_Abort_IT+0x1b0>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d036      	beq.n	8005dd0 <HAL_DMA_Abort_IT+0xc8>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a55      	ldr	r2, [pc, #340]	; (8005ebc <HAL_DMA_Abort_IT+0x1b4>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d031      	beq.n	8005dd0 <HAL_DMA_Abort_IT+0xc8>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a53      	ldr	r2, [pc, #332]	; (8005ec0 <HAL_DMA_Abort_IT+0x1b8>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d02c      	beq.n	8005dd0 <HAL_DMA_Abort_IT+0xc8>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a52      	ldr	r2, [pc, #328]	; (8005ec4 <HAL_DMA_Abort_IT+0x1bc>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d027      	beq.n	8005dd0 <HAL_DMA_Abort_IT+0xc8>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a50      	ldr	r2, [pc, #320]	; (8005ec8 <HAL_DMA_Abort_IT+0x1c0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d022      	beq.n	8005dd0 <HAL_DMA_Abort_IT+0xc8>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a4f      	ldr	r2, [pc, #316]	; (8005ecc <HAL_DMA_Abort_IT+0x1c4>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d01d      	beq.n	8005dd0 <HAL_DMA_Abort_IT+0xc8>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a4d      	ldr	r2, [pc, #308]	; (8005ed0 <HAL_DMA_Abort_IT+0x1c8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d018      	beq.n	8005dd0 <HAL_DMA_Abort_IT+0xc8>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a4c      	ldr	r2, [pc, #304]	; (8005ed4 <HAL_DMA_Abort_IT+0x1cc>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d013      	beq.n	8005dd0 <HAL_DMA_Abort_IT+0xc8>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a4a      	ldr	r2, [pc, #296]	; (8005ed8 <HAL_DMA_Abort_IT+0x1d0>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d00e      	beq.n	8005dd0 <HAL_DMA_Abort_IT+0xc8>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a49      	ldr	r2, [pc, #292]	; (8005edc <HAL_DMA_Abort_IT+0x1d4>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d009      	beq.n	8005dd0 <HAL_DMA_Abort_IT+0xc8>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a47      	ldr	r2, [pc, #284]	; (8005ee0 <HAL_DMA_Abort_IT+0x1d8>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d004      	beq.n	8005dd0 <HAL_DMA_Abort_IT+0xc8>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a46      	ldr	r2, [pc, #280]	; (8005ee4 <HAL_DMA_Abort_IT+0x1dc>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d101      	bne.n	8005dd4 <HAL_DMA_Abort_IT+0xcc>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e000      	b.n	8005dd6 <HAL_DMA_Abort_IT+0xce>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f000 8086 	beq.w	8005ee8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2204      	movs	r2, #4
 8005de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a2f      	ldr	r2, [pc, #188]	; (8005ea8 <HAL_DMA_Abort_IT+0x1a0>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d04a      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x17c>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a2e      	ldr	r2, [pc, #184]	; (8005eac <HAL_DMA_Abort_IT+0x1a4>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d045      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x17c>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a2c      	ldr	r2, [pc, #176]	; (8005eb0 <HAL_DMA_Abort_IT+0x1a8>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d040      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x17c>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a2b      	ldr	r2, [pc, #172]	; (8005eb4 <HAL_DMA_Abort_IT+0x1ac>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d03b      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x17c>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a29      	ldr	r2, [pc, #164]	; (8005eb8 <HAL_DMA_Abort_IT+0x1b0>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d036      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x17c>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a28      	ldr	r2, [pc, #160]	; (8005ebc <HAL_DMA_Abort_IT+0x1b4>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d031      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x17c>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a26      	ldr	r2, [pc, #152]	; (8005ec0 <HAL_DMA_Abort_IT+0x1b8>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d02c      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x17c>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a25      	ldr	r2, [pc, #148]	; (8005ec4 <HAL_DMA_Abort_IT+0x1bc>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d027      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x17c>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a23      	ldr	r2, [pc, #140]	; (8005ec8 <HAL_DMA_Abort_IT+0x1c0>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d022      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x17c>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a22      	ldr	r2, [pc, #136]	; (8005ecc <HAL_DMA_Abort_IT+0x1c4>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d01d      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x17c>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a20      	ldr	r2, [pc, #128]	; (8005ed0 <HAL_DMA_Abort_IT+0x1c8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d018      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x17c>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a1f      	ldr	r2, [pc, #124]	; (8005ed4 <HAL_DMA_Abort_IT+0x1cc>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d013      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x17c>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a1d      	ldr	r2, [pc, #116]	; (8005ed8 <HAL_DMA_Abort_IT+0x1d0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d00e      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x17c>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a1c      	ldr	r2, [pc, #112]	; (8005edc <HAL_DMA_Abort_IT+0x1d4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d009      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x17c>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1a      	ldr	r2, [pc, #104]	; (8005ee0 <HAL_DMA_Abort_IT+0x1d8>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d004      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x17c>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a19      	ldr	r2, [pc, #100]	; (8005ee4 <HAL_DMA_Abort_IT+0x1dc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d108      	bne.n	8005e96 <HAL_DMA_Abort_IT+0x18e>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 0201 	bic.w	r2, r2, #1
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	e178      	b.n	8006188 <HAL_DMA_Abort_IT+0x480>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0201 	bic.w	r2, r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	e16f      	b.n	8006188 <HAL_DMA_Abort_IT+0x480>
 8005ea8:	40020010 	.word	0x40020010
 8005eac:	40020028 	.word	0x40020028
 8005eb0:	40020040 	.word	0x40020040
 8005eb4:	40020058 	.word	0x40020058
 8005eb8:	40020070 	.word	0x40020070
 8005ebc:	40020088 	.word	0x40020088
 8005ec0:	400200a0 	.word	0x400200a0
 8005ec4:	400200b8 	.word	0x400200b8
 8005ec8:	40020410 	.word	0x40020410
 8005ecc:	40020428 	.word	0x40020428
 8005ed0:	40020440 	.word	0x40020440
 8005ed4:	40020458 	.word	0x40020458
 8005ed8:	40020470 	.word	0x40020470
 8005edc:	40020488 	.word	0x40020488
 8005ee0:	400204a0 	.word	0x400204a0
 8005ee4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 020e 	bic.w	r2, r2, #14
 8005ef6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a6c      	ldr	r2, [pc, #432]	; (80060b0 <HAL_DMA_Abort_IT+0x3a8>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d04a      	beq.n	8005f98 <HAL_DMA_Abort_IT+0x290>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a6b      	ldr	r2, [pc, #428]	; (80060b4 <HAL_DMA_Abort_IT+0x3ac>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d045      	beq.n	8005f98 <HAL_DMA_Abort_IT+0x290>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a69      	ldr	r2, [pc, #420]	; (80060b8 <HAL_DMA_Abort_IT+0x3b0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d040      	beq.n	8005f98 <HAL_DMA_Abort_IT+0x290>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a68      	ldr	r2, [pc, #416]	; (80060bc <HAL_DMA_Abort_IT+0x3b4>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d03b      	beq.n	8005f98 <HAL_DMA_Abort_IT+0x290>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a66      	ldr	r2, [pc, #408]	; (80060c0 <HAL_DMA_Abort_IT+0x3b8>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d036      	beq.n	8005f98 <HAL_DMA_Abort_IT+0x290>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a65      	ldr	r2, [pc, #404]	; (80060c4 <HAL_DMA_Abort_IT+0x3bc>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d031      	beq.n	8005f98 <HAL_DMA_Abort_IT+0x290>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a63      	ldr	r2, [pc, #396]	; (80060c8 <HAL_DMA_Abort_IT+0x3c0>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d02c      	beq.n	8005f98 <HAL_DMA_Abort_IT+0x290>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a62      	ldr	r2, [pc, #392]	; (80060cc <HAL_DMA_Abort_IT+0x3c4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d027      	beq.n	8005f98 <HAL_DMA_Abort_IT+0x290>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a60      	ldr	r2, [pc, #384]	; (80060d0 <HAL_DMA_Abort_IT+0x3c8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d022      	beq.n	8005f98 <HAL_DMA_Abort_IT+0x290>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a5f      	ldr	r2, [pc, #380]	; (80060d4 <HAL_DMA_Abort_IT+0x3cc>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d01d      	beq.n	8005f98 <HAL_DMA_Abort_IT+0x290>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a5d      	ldr	r2, [pc, #372]	; (80060d8 <HAL_DMA_Abort_IT+0x3d0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d018      	beq.n	8005f98 <HAL_DMA_Abort_IT+0x290>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a5c      	ldr	r2, [pc, #368]	; (80060dc <HAL_DMA_Abort_IT+0x3d4>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d013      	beq.n	8005f98 <HAL_DMA_Abort_IT+0x290>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a5a      	ldr	r2, [pc, #360]	; (80060e0 <HAL_DMA_Abort_IT+0x3d8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d00e      	beq.n	8005f98 <HAL_DMA_Abort_IT+0x290>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a59      	ldr	r2, [pc, #356]	; (80060e4 <HAL_DMA_Abort_IT+0x3dc>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d009      	beq.n	8005f98 <HAL_DMA_Abort_IT+0x290>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a57      	ldr	r2, [pc, #348]	; (80060e8 <HAL_DMA_Abort_IT+0x3e0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d004      	beq.n	8005f98 <HAL_DMA_Abort_IT+0x290>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a56      	ldr	r2, [pc, #344]	; (80060ec <HAL_DMA_Abort_IT+0x3e4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d108      	bne.n	8005faa <HAL_DMA_Abort_IT+0x2a2>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0201 	bic.w	r2, r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	e007      	b.n	8005fba <HAL_DMA_Abort_IT+0x2b2>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0201 	bic.w	r2, r2, #1
 8005fb8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a3c      	ldr	r2, [pc, #240]	; (80060b0 <HAL_DMA_Abort_IT+0x3a8>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d072      	beq.n	80060aa <HAL_DMA_Abort_IT+0x3a2>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a3a      	ldr	r2, [pc, #232]	; (80060b4 <HAL_DMA_Abort_IT+0x3ac>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d06d      	beq.n	80060aa <HAL_DMA_Abort_IT+0x3a2>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a39      	ldr	r2, [pc, #228]	; (80060b8 <HAL_DMA_Abort_IT+0x3b0>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d068      	beq.n	80060aa <HAL_DMA_Abort_IT+0x3a2>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a37      	ldr	r2, [pc, #220]	; (80060bc <HAL_DMA_Abort_IT+0x3b4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d063      	beq.n	80060aa <HAL_DMA_Abort_IT+0x3a2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a36      	ldr	r2, [pc, #216]	; (80060c0 <HAL_DMA_Abort_IT+0x3b8>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d05e      	beq.n	80060aa <HAL_DMA_Abort_IT+0x3a2>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a34      	ldr	r2, [pc, #208]	; (80060c4 <HAL_DMA_Abort_IT+0x3bc>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d059      	beq.n	80060aa <HAL_DMA_Abort_IT+0x3a2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a33      	ldr	r2, [pc, #204]	; (80060c8 <HAL_DMA_Abort_IT+0x3c0>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d054      	beq.n	80060aa <HAL_DMA_Abort_IT+0x3a2>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a31      	ldr	r2, [pc, #196]	; (80060cc <HAL_DMA_Abort_IT+0x3c4>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d04f      	beq.n	80060aa <HAL_DMA_Abort_IT+0x3a2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a30      	ldr	r2, [pc, #192]	; (80060d0 <HAL_DMA_Abort_IT+0x3c8>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d04a      	beq.n	80060aa <HAL_DMA_Abort_IT+0x3a2>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a2e      	ldr	r2, [pc, #184]	; (80060d4 <HAL_DMA_Abort_IT+0x3cc>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d045      	beq.n	80060aa <HAL_DMA_Abort_IT+0x3a2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a2d      	ldr	r2, [pc, #180]	; (80060d8 <HAL_DMA_Abort_IT+0x3d0>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d040      	beq.n	80060aa <HAL_DMA_Abort_IT+0x3a2>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a2b      	ldr	r2, [pc, #172]	; (80060dc <HAL_DMA_Abort_IT+0x3d4>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d03b      	beq.n	80060aa <HAL_DMA_Abort_IT+0x3a2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a2a      	ldr	r2, [pc, #168]	; (80060e0 <HAL_DMA_Abort_IT+0x3d8>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d036      	beq.n	80060aa <HAL_DMA_Abort_IT+0x3a2>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a28      	ldr	r2, [pc, #160]	; (80060e4 <HAL_DMA_Abort_IT+0x3dc>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d031      	beq.n	80060aa <HAL_DMA_Abort_IT+0x3a2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a27      	ldr	r2, [pc, #156]	; (80060e8 <HAL_DMA_Abort_IT+0x3e0>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d02c      	beq.n	80060aa <HAL_DMA_Abort_IT+0x3a2>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a25      	ldr	r2, [pc, #148]	; (80060ec <HAL_DMA_Abort_IT+0x3e4>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d027      	beq.n	80060aa <HAL_DMA_Abort_IT+0x3a2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a24      	ldr	r2, [pc, #144]	; (80060f0 <HAL_DMA_Abort_IT+0x3e8>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d022      	beq.n	80060aa <HAL_DMA_Abort_IT+0x3a2>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a22      	ldr	r2, [pc, #136]	; (80060f4 <HAL_DMA_Abort_IT+0x3ec>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d01d      	beq.n	80060aa <HAL_DMA_Abort_IT+0x3a2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a21      	ldr	r2, [pc, #132]	; (80060f8 <HAL_DMA_Abort_IT+0x3f0>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d018      	beq.n	80060aa <HAL_DMA_Abort_IT+0x3a2>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a1f      	ldr	r2, [pc, #124]	; (80060fc <HAL_DMA_Abort_IT+0x3f4>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d013      	beq.n	80060aa <HAL_DMA_Abort_IT+0x3a2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a1e      	ldr	r2, [pc, #120]	; (8006100 <HAL_DMA_Abort_IT+0x3f8>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d00e      	beq.n	80060aa <HAL_DMA_Abort_IT+0x3a2>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a1c      	ldr	r2, [pc, #112]	; (8006104 <HAL_DMA_Abort_IT+0x3fc>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d009      	beq.n	80060aa <HAL_DMA_Abort_IT+0x3a2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a1b      	ldr	r2, [pc, #108]	; (8006108 <HAL_DMA_Abort_IT+0x400>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d004      	beq.n	80060aa <HAL_DMA_Abort_IT+0x3a2>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a19      	ldr	r2, [pc, #100]	; (800610c <HAL_DMA_Abort_IT+0x404>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d132      	bne.n	8006110 <HAL_DMA_Abort_IT+0x408>
 80060aa:	2301      	movs	r3, #1
 80060ac:	e031      	b.n	8006112 <HAL_DMA_Abort_IT+0x40a>
 80060ae:	bf00      	nop
 80060b0:	40020010 	.word	0x40020010
 80060b4:	40020028 	.word	0x40020028
 80060b8:	40020040 	.word	0x40020040
 80060bc:	40020058 	.word	0x40020058
 80060c0:	40020070 	.word	0x40020070
 80060c4:	40020088 	.word	0x40020088
 80060c8:	400200a0 	.word	0x400200a0
 80060cc:	400200b8 	.word	0x400200b8
 80060d0:	40020410 	.word	0x40020410
 80060d4:	40020428 	.word	0x40020428
 80060d8:	40020440 	.word	0x40020440
 80060dc:	40020458 	.word	0x40020458
 80060e0:	40020470 	.word	0x40020470
 80060e4:	40020488 	.word	0x40020488
 80060e8:	400204a0 	.word	0x400204a0
 80060ec:	400204b8 	.word	0x400204b8
 80060f0:	58025408 	.word	0x58025408
 80060f4:	5802541c 	.word	0x5802541c
 80060f8:	58025430 	.word	0x58025430
 80060fc:	58025444 	.word	0x58025444
 8006100:	58025458 	.word	0x58025458
 8006104:	5802546c 	.word	0x5802546c
 8006108:	58025480 	.word	0x58025480
 800610c:	58025494 	.word	0x58025494
 8006110:	2300      	movs	r3, #0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d028      	beq.n	8006168 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006120:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006124:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006130:	f003 031f 	and.w	r3, r3, #31
 8006134:	2201      	movs	r2, #1
 8006136:	409a      	lsls	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006144:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00c      	beq.n	8006168 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006158:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800615c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006166:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800617c:	2b00      	cmp	r3, #0
 800617e:	d003      	beq.n	8006188 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop

08006194 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b08a      	sub	sp, #40	; 0x28
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80061a0:	4b67      	ldr	r3, [pc, #412]	; (8006340 <HAL_DMA_IRQHandler+0x1ac>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a67      	ldr	r2, [pc, #412]	; (8006344 <HAL_DMA_IRQHandler+0x1b0>)
 80061a6:	fba2 2303 	umull	r2, r3, r2, r3
 80061aa:	0a9b      	lsrs	r3, r3, #10
 80061ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a5f      	ldr	r2, [pc, #380]	; (8006348 <HAL_DMA_IRQHandler+0x1b4>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d04a      	beq.n	8006266 <HAL_DMA_IRQHandler+0xd2>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a5d      	ldr	r2, [pc, #372]	; (800634c <HAL_DMA_IRQHandler+0x1b8>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d045      	beq.n	8006266 <HAL_DMA_IRQHandler+0xd2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a5c      	ldr	r2, [pc, #368]	; (8006350 <HAL_DMA_IRQHandler+0x1bc>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d040      	beq.n	8006266 <HAL_DMA_IRQHandler+0xd2>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a5a      	ldr	r2, [pc, #360]	; (8006354 <HAL_DMA_IRQHandler+0x1c0>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d03b      	beq.n	8006266 <HAL_DMA_IRQHandler+0xd2>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a59      	ldr	r2, [pc, #356]	; (8006358 <HAL_DMA_IRQHandler+0x1c4>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d036      	beq.n	8006266 <HAL_DMA_IRQHandler+0xd2>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a57      	ldr	r2, [pc, #348]	; (800635c <HAL_DMA_IRQHandler+0x1c8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d031      	beq.n	8006266 <HAL_DMA_IRQHandler+0xd2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a56      	ldr	r2, [pc, #344]	; (8006360 <HAL_DMA_IRQHandler+0x1cc>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d02c      	beq.n	8006266 <HAL_DMA_IRQHandler+0xd2>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a54      	ldr	r2, [pc, #336]	; (8006364 <HAL_DMA_IRQHandler+0x1d0>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d027      	beq.n	8006266 <HAL_DMA_IRQHandler+0xd2>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a53      	ldr	r2, [pc, #332]	; (8006368 <HAL_DMA_IRQHandler+0x1d4>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d022      	beq.n	8006266 <HAL_DMA_IRQHandler+0xd2>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a51      	ldr	r2, [pc, #324]	; (800636c <HAL_DMA_IRQHandler+0x1d8>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d01d      	beq.n	8006266 <HAL_DMA_IRQHandler+0xd2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a50      	ldr	r2, [pc, #320]	; (8006370 <HAL_DMA_IRQHandler+0x1dc>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d018      	beq.n	8006266 <HAL_DMA_IRQHandler+0xd2>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a4e      	ldr	r2, [pc, #312]	; (8006374 <HAL_DMA_IRQHandler+0x1e0>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d013      	beq.n	8006266 <HAL_DMA_IRQHandler+0xd2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a4d      	ldr	r2, [pc, #308]	; (8006378 <HAL_DMA_IRQHandler+0x1e4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d00e      	beq.n	8006266 <HAL_DMA_IRQHandler+0xd2>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a4b      	ldr	r2, [pc, #300]	; (800637c <HAL_DMA_IRQHandler+0x1e8>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d009      	beq.n	8006266 <HAL_DMA_IRQHandler+0xd2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a4a      	ldr	r2, [pc, #296]	; (8006380 <HAL_DMA_IRQHandler+0x1ec>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d004      	beq.n	8006266 <HAL_DMA_IRQHandler+0xd2>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a48      	ldr	r2, [pc, #288]	; (8006384 <HAL_DMA_IRQHandler+0x1f0>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d101      	bne.n	800626a <HAL_DMA_IRQHandler+0xd6>
 8006266:	2301      	movs	r3, #1
 8006268:	e000      	b.n	800626c <HAL_DMA_IRQHandler+0xd8>
 800626a:	2300      	movs	r3, #0
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 842b 	beq.w	8006ac8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006276:	f003 031f 	and.w	r3, r3, #31
 800627a:	2208      	movs	r2, #8
 800627c:	409a      	lsls	r2, r3
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	4013      	ands	r3, r2
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 80a2 	beq.w	80063cc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a2e      	ldr	r2, [pc, #184]	; (8006348 <HAL_DMA_IRQHandler+0x1b4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d04a      	beq.n	8006328 <HAL_DMA_IRQHandler+0x194>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a2d      	ldr	r2, [pc, #180]	; (800634c <HAL_DMA_IRQHandler+0x1b8>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d045      	beq.n	8006328 <HAL_DMA_IRQHandler+0x194>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a2b      	ldr	r2, [pc, #172]	; (8006350 <HAL_DMA_IRQHandler+0x1bc>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d040      	beq.n	8006328 <HAL_DMA_IRQHandler+0x194>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a2a      	ldr	r2, [pc, #168]	; (8006354 <HAL_DMA_IRQHandler+0x1c0>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d03b      	beq.n	8006328 <HAL_DMA_IRQHandler+0x194>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a28      	ldr	r2, [pc, #160]	; (8006358 <HAL_DMA_IRQHandler+0x1c4>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d036      	beq.n	8006328 <HAL_DMA_IRQHandler+0x194>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a27      	ldr	r2, [pc, #156]	; (800635c <HAL_DMA_IRQHandler+0x1c8>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d031      	beq.n	8006328 <HAL_DMA_IRQHandler+0x194>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a25      	ldr	r2, [pc, #148]	; (8006360 <HAL_DMA_IRQHandler+0x1cc>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d02c      	beq.n	8006328 <HAL_DMA_IRQHandler+0x194>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a24      	ldr	r2, [pc, #144]	; (8006364 <HAL_DMA_IRQHandler+0x1d0>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d027      	beq.n	8006328 <HAL_DMA_IRQHandler+0x194>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a22      	ldr	r2, [pc, #136]	; (8006368 <HAL_DMA_IRQHandler+0x1d4>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d022      	beq.n	8006328 <HAL_DMA_IRQHandler+0x194>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a21      	ldr	r2, [pc, #132]	; (800636c <HAL_DMA_IRQHandler+0x1d8>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d01d      	beq.n	8006328 <HAL_DMA_IRQHandler+0x194>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a1f      	ldr	r2, [pc, #124]	; (8006370 <HAL_DMA_IRQHandler+0x1dc>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d018      	beq.n	8006328 <HAL_DMA_IRQHandler+0x194>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a1e      	ldr	r2, [pc, #120]	; (8006374 <HAL_DMA_IRQHandler+0x1e0>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d013      	beq.n	8006328 <HAL_DMA_IRQHandler+0x194>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a1c      	ldr	r2, [pc, #112]	; (8006378 <HAL_DMA_IRQHandler+0x1e4>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d00e      	beq.n	8006328 <HAL_DMA_IRQHandler+0x194>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a1b      	ldr	r2, [pc, #108]	; (800637c <HAL_DMA_IRQHandler+0x1e8>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d009      	beq.n	8006328 <HAL_DMA_IRQHandler+0x194>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a19      	ldr	r2, [pc, #100]	; (8006380 <HAL_DMA_IRQHandler+0x1ec>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d004      	beq.n	8006328 <HAL_DMA_IRQHandler+0x194>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a18      	ldr	r2, [pc, #96]	; (8006384 <HAL_DMA_IRQHandler+0x1f0>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d12f      	bne.n	8006388 <HAL_DMA_IRQHandler+0x1f4>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0304 	and.w	r3, r3, #4
 8006332:	2b00      	cmp	r3, #0
 8006334:	bf14      	ite	ne
 8006336:	2301      	movne	r3, #1
 8006338:	2300      	moveq	r3, #0
 800633a:	b2db      	uxtb	r3, r3
 800633c:	e02e      	b.n	800639c <HAL_DMA_IRQHandler+0x208>
 800633e:	bf00      	nop
 8006340:	24000024 	.word	0x24000024
 8006344:	1b4e81b5 	.word	0x1b4e81b5
 8006348:	40020010 	.word	0x40020010
 800634c:	40020028 	.word	0x40020028
 8006350:	40020040 	.word	0x40020040
 8006354:	40020058 	.word	0x40020058
 8006358:	40020070 	.word	0x40020070
 800635c:	40020088 	.word	0x40020088
 8006360:	400200a0 	.word	0x400200a0
 8006364:	400200b8 	.word	0x400200b8
 8006368:	40020410 	.word	0x40020410
 800636c:	40020428 	.word	0x40020428
 8006370:	40020440 	.word	0x40020440
 8006374:	40020458 	.word	0x40020458
 8006378:	40020470 	.word	0x40020470
 800637c:	40020488 	.word	0x40020488
 8006380:	400204a0 	.word	0x400204a0
 8006384:	400204b8 	.word	0x400204b8
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0308 	and.w	r3, r3, #8
 8006392:	2b00      	cmp	r3, #0
 8006394:	bf14      	ite	ne
 8006396:	2301      	movne	r3, #1
 8006398:	2300      	moveq	r3, #0
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	d015      	beq.n	80063cc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0204 	bic.w	r2, r2, #4
 80063ae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b4:	f003 031f 	and.w	r3, r3, #31
 80063b8:	2208      	movs	r2, #8
 80063ba:	409a      	lsls	r2, r3
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c4:	f043 0201 	orr.w	r2, r3, #1
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d0:	f003 031f 	and.w	r3, r3, #31
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	fa22 f303 	lsr.w	r3, r2, r3
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d06e      	beq.n	80064c0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a69      	ldr	r2, [pc, #420]	; (800658c <HAL_DMA_IRQHandler+0x3f8>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d04a      	beq.n	8006482 <HAL_DMA_IRQHandler+0x2ee>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a67      	ldr	r2, [pc, #412]	; (8006590 <HAL_DMA_IRQHandler+0x3fc>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d045      	beq.n	8006482 <HAL_DMA_IRQHandler+0x2ee>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a66      	ldr	r2, [pc, #408]	; (8006594 <HAL_DMA_IRQHandler+0x400>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d040      	beq.n	8006482 <HAL_DMA_IRQHandler+0x2ee>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a64      	ldr	r2, [pc, #400]	; (8006598 <HAL_DMA_IRQHandler+0x404>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d03b      	beq.n	8006482 <HAL_DMA_IRQHandler+0x2ee>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a63      	ldr	r2, [pc, #396]	; (800659c <HAL_DMA_IRQHandler+0x408>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d036      	beq.n	8006482 <HAL_DMA_IRQHandler+0x2ee>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a61      	ldr	r2, [pc, #388]	; (80065a0 <HAL_DMA_IRQHandler+0x40c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d031      	beq.n	8006482 <HAL_DMA_IRQHandler+0x2ee>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a60      	ldr	r2, [pc, #384]	; (80065a4 <HAL_DMA_IRQHandler+0x410>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d02c      	beq.n	8006482 <HAL_DMA_IRQHandler+0x2ee>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a5e      	ldr	r2, [pc, #376]	; (80065a8 <HAL_DMA_IRQHandler+0x414>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d027      	beq.n	8006482 <HAL_DMA_IRQHandler+0x2ee>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a5d      	ldr	r2, [pc, #372]	; (80065ac <HAL_DMA_IRQHandler+0x418>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d022      	beq.n	8006482 <HAL_DMA_IRQHandler+0x2ee>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a5b      	ldr	r2, [pc, #364]	; (80065b0 <HAL_DMA_IRQHandler+0x41c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d01d      	beq.n	8006482 <HAL_DMA_IRQHandler+0x2ee>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a5a      	ldr	r2, [pc, #360]	; (80065b4 <HAL_DMA_IRQHandler+0x420>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d018      	beq.n	8006482 <HAL_DMA_IRQHandler+0x2ee>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a58      	ldr	r2, [pc, #352]	; (80065b8 <HAL_DMA_IRQHandler+0x424>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d013      	beq.n	8006482 <HAL_DMA_IRQHandler+0x2ee>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a57      	ldr	r2, [pc, #348]	; (80065bc <HAL_DMA_IRQHandler+0x428>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d00e      	beq.n	8006482 <HAL_DMA_IRQHandler+0x2ee>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a55      	ldr	r2, [pc, #340]	; (80065c0 <HAL_DMA_IRQHandler+0x42c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d009      	beq.n	8006482 <HAL_DMA_IRQHandler+0x2ee>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a54      	ldr	r2, [pc, #336]	; (80065c4 <HAL_DMA_IRQHandler+0x430>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d004      	beq.n	8006482 <HAL_DMA_IRQHandler+0x2ee>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a52      	ldr	r2, [pc, #328]	; (80065c8 <HAL_DMA_IRQHandler+0x434>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d10a      	bne.n	8006498 <HAL_DMA_IRQHandler+0x304>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800648c:	2b00      	cmp	r3, #0
 800648e:	bf14      	ite	ne
 8006490:	2301      	movne	r3, #1
 8006492:	2300      	moveq	r3, #0
 8006494:	b2db      	uxtb	r3, r3
 8006496:	e003      	b.n	80064a0 <HAL_DMA_IRQHandler+0x30c>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2300      	movs	r3, #0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00d      	beq.n	80064c0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a8:	f003 031f 	and.w	r3, r3, #31
 80064ac:	2201      	movs	r2, #1
 80064ae:	409a      	lsls	r2, r3
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b8:	f043 0202 	orr.w	r2, r3, #2
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c4:	f003 031f 	and.w	r3, r3, #31
 80064c8:	2204      	movs	r2, #4
 80064ca:	409a      	lsls	r2, r3
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	4013      	ands	r3, r2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 808f 	beq.w	80065f4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a2c      	ldr	r2, [pc, #176]	; (800658c <HAL_DMA_IRQHandler+0x3f8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d04a      	beq.n	8006576 <HAL_DMA_IRQHandler+0x3e2>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a2a      	ldr	r2, [pc, #168]	; (8006590 <HAL_DMA_IRQHandler+0x3fc>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d045      	beq.n	8006576 <HAL_DMA_IRQHandler+0x3e2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a29      	ldr	r2, [pc, #164]	; (8006594 <HAL_DMA_IRQHandler+0x400>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d040      	beq.n	8006576 <HAL_DMA_IRQHandler+0x3e2>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a27      	ldr	r2, [pc, #156]	; (8006598 <HAL_DMA_IRQHandler+0x404>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d03b      	beq.n	8006576 <HAL_DMA_IRQHandler+0x3e2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a26      	ldr	r2, [pc, #152]	; (800659c <HAL_DMA_IRQHandler+0x408>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d036      	beq.n	8006576 <HAL_DMA_IRQHandler+0x3e2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a24      	ldr	r2, [pc, #144]	; (80065a0 <HAL_DMA_IRQHandler+0x40c>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d031      	beq.n	8006576 <HAL_DMA_IRQHandler+0x3e2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a23      	ldr	r2, [pc, #140]	; (80065a4 <HAL_DMA_IRQHandler+0x410>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d02c      	beq.n	8006576 <HAL_DMA_IRQHandler+0x3e2>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a21      	ldr	r2, [pc, #132]	; (80065a8 <HAL_DMA_IRQHandler+0x414>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d027      	beq.n	8006576 <HAL_DMA_IRQHandler+0x3e2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a20      	ldr	r2, [pc, #128]	; (80065ac <HAL_DMA_IRQHandler+0x418>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d022      	beq.n	8006576 <HAL_DMA_IRQHandler+0x3e2>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a1e      	ldr	r2, [pc, #120]	; (80065b0 <HAL_DMA_IRQHandler+0x41c>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d01d      	beq.n	8006576 <HAL_DMA_IRQHandler+0x3e2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a1d      	ldr	r2, [pc, #116]	; (80065b4 <HAL_DMA_IRQHandler+0x420>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d018      	beq.n	8006576 <HAL_DMA_IRQHandler+0x3e2>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a1b      	ldr	r2, [pc, #108]	; (80065b8 <HAL_DMA_IRQHandler+0x424>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d013      	beq.n	8006576 <HAL_DMA_IRQHandler+0x3e2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a1a      	ldr	r2, [pc, #104]	; (80065bc <HAL_DMA_IRQHandler+0x428>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d00e      	beq.n	8006576 <HAL_DMA_IRQHandler+0x3e2>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a18      	ldr	r2, [pc, #96]	; (80065c0 <HAL_DMA_IRQHandler+0x42c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d009      	beq.n	8006576 <HAL_DMA_IRQHandler+0x3e2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a17      	ldr	r2, [pc, #92]	; (80065c4 <HAL_DMA_IRQHandler+0x430>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d004      	beq.n	8006576 <HAL_DMA_IRQHandler+0x3e2>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a15      	ldr	r2, [pc, #84]	; (80065c8 <HAL_DMA_IRQHandler+0x434>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d12a      	bne.n	80065cc <HAL_DMA_IRQHandler+0x438>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b00      	cmp	r3, #0
 8006582:	bf14      	ite	ne
 8006584:	2301      	movne	r3, #1
 8006586:	2300      	moveq	r3, #0
 8006588:	b2db      	uxtb	r3, r3
 800658a:	e023      	b.n	80065d4 <HAL_DMA_IRQHandler+0x440>
 800658c:	40020010 	.word	0x40020010
 8006590:	40020028 	.word	0x40020028
 8006594:	40020040 	.word	0x40020040
 8006598:	40020058 	.word	0x40020058
 800659c:	40020070 	.word	0x40020070
 80065a0:	40020088 	.word	0x40020088
 80065a4:	400200a0 	.word	0x400200a0
 80065a8:	400200b8 	.word	0x400200b8
 80065ac:	40020410 	.word	0x40020410
 80065b0:	40020428 	.word	0x40020428
 80065b4:	40020440 	.word	0x40020440
 80065b8:	40020458 	.word	0x40020458
 80065bc:	40020470 	.word	0x40020470
 80065c0:	40020488 	.word	0x40020488
 80065c4:	400204a0 	.word	0x400204a0
 80065c8:	400204b8 	.word	0x400204b8
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2300      	movs	r3, #0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00d      	beq.n	80065f4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065dc:	f003 031f 	and.w	r3, r3, #31
 80065e0:	2204      	movs	r2, #4
 80065e2:	409a      	lsls	r2, r3
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ec:	f043 0204 	orr.w	r2, r3, #4
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f8:	f003 031f 	and.w	r3, r3, #31
 80065fc:	2210      	movs	r2, #16
 80065fe:	409a      	lsls	r2, r3
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	4013      	ands	r3, r2
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 80a6 	beq.w	8006756 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a85      	ldr	r2, [pc, #532]	; (8006824 <HAL_DMA_IRQHandler+0x690>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d04a      	beq.n	80066aa <HAL_DMA_IRQHandler+0x516>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a83      	ldr	r2, [pc, #524]	; (8006828 <HAL_DMA_IRQHandler+0x694>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d045      	beq.n	80066aa <HAL_DMA_IRQHandler+0x516>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a82      	ldr	r2, [pc, #520]	; (800682c <HAL_DMA_IRQHandler+0x698>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d040      	beq.n	80066aa <HAL_DMA_IRQHandler+0x516>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a80      	ldr	r2, [pc, #512]	; (8006830 <HAL_DMA_IRQHandler+0x69c>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d03b      	beq.n	80066aa <HAL_DMA_IRQHandler+0x516>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a7f      	ldr	r2, [pc, #508]	; (8006834 <HAL_DMA_IRQHandler+0x6a0>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d036      	beq.n	80066aa <HAL_DMA_IRQHandler+0x516>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a7d      	ldr	r2, [pc, #500]	; (8006838 <HAL_DMA_IRQHandler+0x6a4>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d031      	beq.n	80066aa <HAL_DMA_IRQHandler+0x516>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a7c      	ldr	r2, [pc, #496]	; (800683c <HAL_DMA_IRQHandler+0x6a8>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d02c      	beq.n	80066aa <HAL_DMA_IRQHandler+0x516>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a7a      	ldr	r2, [pc, #488]	; (8006840 <HAL_DMA_IRQHandler+0x6ac>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d027      	beq.n	80066aa <HAL_DMA_IRQHandler+0x516>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a79      	ldr	r2, [pc, #484]	; (8006844 <HAL_DMA_IRQHandler+0x6b0>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d022      	beq.n	80066aa <HAL_DMA_IRQHandler+0x516>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a77      	ldr	r2, [pc, #476]	; (8006848 <HAL_DMA_IRQHandler+0x6b4>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d01d      	beq.n	80066aa <HAL_DMA_IRQHandler+0x516>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a76      	ldr	r2, [pc, #472]	; (800684c <HAL_DMA_IRQHandler+0x6b8>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d018      	beq.n	80066aa <HAL_DMA_IRQHandler+0x516>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a74      	ldr	r2, [pc, #464]	; (8006850 <HAL_DMA_IRQHandler+0x6bc>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d013      	beq.n	80066aa <HAL_DMA_IRQHandler+0x516>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a73      	ldr	r2, [pc, #460]	; (8006854 <HAL_DMA_IRQHandler+0x6c0>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00e      	beq.n	80066aa <HAL_DMA_IRQHandler+0x516>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a71      	ldr	r2, [pc, #452]	; (8006858 <HAL_DMA_IRQHandler+0x6c4>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d009      	beq.n	80066aa <HAL_DMA_IRQHandler+0x516>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a70      	ldr	r2, [pc, #448]	; (800685c <HAL_DMA_IRQHandler+0x6c8>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d004      	beq.n	80066aa <HAL_DMA_IRQHandler+0x516>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a6e      	ldr	r2, [pc, #440]	; (8006860 <HAL_DMA_IRQHandler+0x6cc>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d10a      	bne.n	80066c0 <HAL_DMA_IRQHandler+0x52c>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0308 	and.w	r3, r3, #8
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	bf14      	ite	ne
 80066b8:	2301      	movne	r3, #1
 80066ba:	2300      	moveq	r3, #0
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	e009      	b.n	80066d4 <HAL_DMA_IRQHandler+0x540>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0304 	and.w	r3, r3, #4
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	bf14      	ite	ne
 80066ce:	2301      	movne	r3, #1
 80066d0:	2300      	moveq	r3, #0
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d03e      	beq.n	8006756 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066dc:	f003 031f 	and.w	r3, r3, #31
 80066e0:	2210      	movs	r2, #16
 80066e2:	409a      	lsls	r2, r3
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d018      	beq.n	8006728 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d108      	bne.n	8006716 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006708:	2b00      	cmp	r3, #0
 800670a:	d024      	beq.n	8006756 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	4798      	blx	r3
 8006714:	e01f      	b.n	8006756 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800671a:	2b00      	cmp	r3, #0
 800671c:	d01b      	beq.n	8006756 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	4798      	blx	r3
 8006726:	e016      	b.n	8006756 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006732:	2b00      	cmp	r3, #0
 8006734:	d107      	bne.n	8006746 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 0208 	bic.w	r2, r2, #8
 8006744:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800675a:	f003 031f 	and.w	r3, r3, #31
 800675e:	2220      	movs	r2, #32
 8006760:	409a      	lsls	r2, r3
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	4013      	ands	r3, r2
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 8110 	beq.w	800698c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a2c      	ldr	r2, [pc, #176]	; (8006824 <HAL_DMA_IRQHandler+0x690>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d04a      	beq.n	800680c <HAL_DMA_IRQHandler+0x678>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a2b      	ldr	r2, [pc, #172]	; (8006828 <HAL_DMA_IRQHandler+0x694>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d045      	beq.n	800680c <HAL_DMA_IRQHandler+0x678>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a29      	ldr	r2, [pc, #164]	; (800682c <HAL_DMA_IRQHandler+0x698>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d040      	beq.n	800680c <HAL_DMA_IRQHandler+0x678>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a28      	ldr	r2, [pc, #160]	; (8006830 <HAL_DMA_IRQHandler+0x69c>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d03b      	beq.n	800680c <HAL_DMA_IRQHandler+0x678>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a26      	ldr	r2, [pc, #152]	; (8006834 <HAL_DMA_IRQHandler+0x6a0>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d036      	beq.n	800680c <HAL_DMA_IRQHandler+0x678>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a25      	ldr	r2, [pc, #148]	; (8006838 <HAL_DMA_IRQHandler+0x6a4>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d031      	beq.n	800680c <HAL_DMA_IRQHandler+0x678>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a23      	ldr	r2, [pc, #140]	; (800683c <HAL_DMA_IRQHandler+0x6a8>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d02c      	beq.n	800680c <HAL_DMA_IRQHandler+0x678>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a22      	ldr	r2, [pc, #136]	; (8006840 <HAL_DMA_IRQHandler+0x6ac>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d027      	beq.n	800680c <HAL_DMA_IRQHandler+0x678>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a20      	ldr	r2, [pc, #128]	; (8006844 <HAL_DMA_IRQHandler+0x6b0>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d022      	beq.n	800680c <HAL_DMA_IRQHandler+0x678>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a1f      	ldr	r2, [pc, #124]	; (8006848 <HAL_DMA_IRQHandler+0x6b4>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d01d      	beq.n	800680c <HAL_DMA_IRQHandler+0x678>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a1d      	ldr	r2, [pc, #116]	; (800684c <HAL_DMA_IRQHandler+0x6b8>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d018      	beq.n	800680c <HAL_DMA_IRQHandler+0x678>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a1c      	ldr	r2, [pc, #112]	; (8006850 <HAL_DMA_IRQHandler+0x6bc>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d013      	beq.n	800680c <HAL_DMA_IRQHandler+0x678>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a1a      	ldr	r2, [pc, #104]	; (8006854 <HAL_DMA_IRQHandler+0x6c0>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d00e      	beq.n	800680c <HAL_DMA_IRQHandler+0x678>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a19      	ldr	r2, [pc, #100]	; (8006858 <HAL_DMA_IRQHandler+0x6c4>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d009      	beq.n	800680c <HAL_DMA_IRQHandler+0x678>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a17      	ldr	r2, [pc, #92]	; (800685c <HAL_DMA_IRQHandler+0x6c8>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d004      	beq.n	800680c <HAL_DMA_IRQHandler+0x678>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a16      	ldr	r2, [pc, #88]	; (8006860 <HAL_DMA_IRQHandler+0x6cc>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d12b      	bne.n	8006864 <HAL_DMA_IRQHandler+0x6d0>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0310 	and.w	r3, r3, #16
 8006816:	2b00      	cmp	r3, #0
 8006818:	bf14      	ite	ne
 800681a:	2301      	movne	r3, #1
 800681c:	2300      	moveq	r3, #0
 800681e:	b2db      	uxtb	r3, r3
 8006820:	e02a      	b.n	8006878 <HAL_DMA_IRQHandler+0x6e4>
 8006822:	bf00      	nop
 8006824:	40020010 	.word	0x40020010
 8006828:	40020028 	.word	0x40020028
 800682c:	40020040 	.word	0x40020040
 8006830:	40020058 	.word	0x40020058
 8006834:	40020070 	.word	0x40020070
 8006838:	40020088 	.word	0x40020088
 800683c:	400200a0 	.word	0x400200a0
 8006840:	400200b8 	.word	0x400200b8
 8006844:	40020410 	.word	0x40020410
 8006848:	40020428 	.word	0x40020428
 800684c:	40020440 	.word	0x40020440
 8006850:	40020458 	.word	0x40020458
 8006854:	40020470 	.word	0x40020470
 8006858:	40020488 	.word	0x40020488
 800685c:	400204a0 	.word	0x400204a0
 8006860:	400204b8 	.word	0x400204b8
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b00      	cmp	r3, #0
 8006870:	bf14      	ite	ne
 8006872:	2301      	movne	r3, #1
 8006874:	2300      	moveq	r3, #0
 8006876:	b2db      	uxtb	r3, r3
 8006878:	2b00      	cmp	r3, #0
 800687a:	f000 8087 	beq.w	800698c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006882:	f003 031f 	and.w	r3, r3, #31
 8006886:	2220      	movs	r2, #32
 8006888:	409a      	lsls	r2, r3
 800688a:	6a3b      	ldr	r3, [r7, #32]
 800688c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b04      	cmp	r3, #4
 8006898:	d139      	bne.n	800690e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0216 	bic.w	r2, r2, #22
 80068a8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	695a      	ldr	r2, [r3, #20]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068b8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d103      	bne.n	80068ca <HAL_DMA_IRQHandler+0x736>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d007      	beq.n	80068da <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 0208 	bic.w	r2, r2, #8
 80068d8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068de:	f003 031f 	and.w	r3, r3, #31
 80068e2:	223f      	movs	r2, #63	; 0x3f
 80068e4:	409a      	lsls	r2, r3
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 834a 	beq.w	8006f98 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	4798      	blx	r3
          }
          return;
 800690c:	e344      	b.n	8006f98 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d018      	beq.n	800694e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d108      	bne.n	800693c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800692e:	2b00      	cmp	r3, #0
 8006930:	d02c      	beq.n	800698c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	4798      	blx	r3
 800693a:	e027      	b.n	800698c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006940:	2b00      	cmp	r3, #0
 8006942:	d023      	beq.n	800698c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	4798      	blx	r3
 800694c:	e01e      	b.n	800698c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10f      	bne.n	800697c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f022 0210 	bic.w	r2, r2, #16
 800696a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006980:	2b00      	cmp	r3, #0
 8006982:	d003      	beq.n	800698c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 8306 	beq.w	8006fa2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 8088 	beq.w	8006ab4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2204      	movs	r2, #4
 80069a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a7a      	ldr	r2, [pc, #488]	; (8006b9c <HAL_DMA_IRQHandler+0xa08>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d04a      	beq.n	8006a4c <HAL_DMA_IRQHandler+0x8b8>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a79      	ldr	r2, [pc, #484]	; (8006ba0 <HAL_DMA_IRQHandler+0xa0c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d045      	beq.n	8006a4c <HAL_DMA_IRQHandler+0x8b8>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a77      	ldr	r2, [pc, #476]	; (8006ba4 <HAL_DMA_IRQHandler+0xa10>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d040      	beq.n	8006a4c <HAL_DMA_IRQHandler+0x8b8>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a76      	ldr	r2, [pc, #472]	; (8006ba8 <HAL_DMA_IRQHandler+0xa14>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d03b      	beq.n	8006a4c <HAL_DMA_IRQHandler+0x8b8>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a74      	ldr	r2, [pc, #464]	; (8006bac <HAL_DMA_IRQHandler+0xa18>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d036      	beq.n	8006a4c <HAL_DMA_IRQHandler+0x8b8>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a73      	ldr	r2, [pc, #460]	; (8006bb0 <HAL_DMA_IRQHandler+0xa1c>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d031      	beq.n	8006a4c <HAL_DMA_IRQHandler+0x8b8>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a71      	ldr	r2, [pc, #452]	; (8006bb4 <HAL_DMA_IRQHandler+0xa20>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d02c      	beq.n	8006a4c <HAL_DMA_IRQHandler+0x8b8>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a70      	ldr	r2, [pc, #448]	; (8006bb8 <HAL_DMA_IRQHandler+0xa24>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d027      	beq.n	8006a4c <HAL_DMA_IRQHandler+0x8b8>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a6e      	ldr	r2, [pc, #440]	; (8006bbc <HAL_DMA_IRQHandler+0xa28>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d022      	beq.n	8006a4c <HAL_DMA_IRQHandler+0x8b8>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a6d      	ldr	r2, [pc, #436]	; (8006bc0 <HAL_DMA_IRQHandler+0xa2c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d01d      	beq.n	8006a4c <HAL_DMA_IRQHandler+0x8b8>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a6b      	ldr	r2, [pc, #428]	; (8006bc4 <HAL_DMA_IRQHandler+0xa30>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d018      	beq.n	8006a4c <HAL_DMA_IRQHandler+0x8b8>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a6a      	ldr	r2, [pc, #424]	; (8006bc8 <HAL_DMA_IRQHandler+0xa34>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d013      	beq.n	8006a4c <HAL_DMA_IRQHandler+0x8b8>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a68      	ldr	r2, [pc, #416]	; (8006bcc <HAL_DMA_IRQHandler+0xa38>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00e      	beq.n	8006a4c <HAL_DMA_IRQHandler+0x8b8>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a67      	ldr	r2, [pc, #412]	; (8006bd0 <HAL_DMA_IRQHandler+0xa3c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d009      	beq.n	8006a4c <HAL_DMA_IRQHandler+0x8b8>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a65      	ldr	r2, [pc, #404]	; (8006bd4 <HAL_DMA_IRQHandler+0xa40>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d004      	beq.n	8006a4c <HAL_DMA_IRQHandler+0x8b8>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a64      	ldr	r2, [pc, #400]	; (8006bd8 <HAL_DMA_IRQHandler+0xa44>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d108      	bne.n	8006a5e <HAL_DMA_IRQHandler+0x8ca>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 0201 	bic.w	r2, r2, #1
 8006a5a:	601a      	str	r2, [r3, #0]
 8006a5c:	e007      	b.n	8006a6e <HAL_DMA_IRQHandler+0x8da>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f022 0201 	bic.w	r2, r2, #1
 8006a6c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	3301      	adds	r3, #1
 8006a72:	60fb      	str	r3, [r7, #12]
 8006a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d307      	bcc.n	8006a8a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1f2      	bne.n	8006a6e <HAL_DMA_IRQHandler+0x8da>
 8006a88:	e000      	b.n	8006a8c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006a8a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d004      	beq.n	8006aa4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2203      	movs	r2, #3
 8006a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006aa2:	e003      	b.n	8006aac <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 8272 	beq.w	8006fa2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	4798      	blx	r3
 8006ac6:	e26c      	b.n	8006fa2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a43      	ldr	r2, [pc, #268]	; (8006bdc <HAL_DMA_IRQHandler+0xa48>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d022      	beq.n	8006b18 <HAL_DMA_IRQHandler+0x984>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a42      	ldr	r2, [pc, #264]	; (8006be0 <HAL_DMA_IRQHandler+0xa4c>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d01d      	beq.n	8006b18 <HAL_DMA_IRQHandler+0x984>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a40      	ldr	r2, [pc, #256]	; (8006be4 <HAL_DMA_IRQHandler+0xa50>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d018      	beq.n	8006b18 <HAL_DMA_IRQHandler+0x984>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a3f      	ldr	r2, [pc, #252]	; (8006be8 <HAL_DMA_IRQHandler+0xa54>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d013      	beq.n	8006b18 <HAL_DMA_IRQHandler+0x984>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a3d      	ldr	r2, [pc, #244]	; (8006bec <HAL_DMA_IRQHandler+0xa58>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d00e      	beq.n	8006b18 <HAL_DMA_IRQHandler+0x984>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a3c      	ldr	r2, [pc, #240]	; (8006bf0 <HAL_DMA_IRQHandler+0xa5c>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d009      	beq.n	8006b18 <HAL_DMA_IRQHandler+0x984>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a3a      	ldr	r2, [pc, #232]	; (8006bf4 <HAL_DMA_IRQHandler+0xa60>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d004      	beq.n	8006b18 <HAL_DMA_IRQHandler+0x984>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a39      	ldr	r2, [pc, #228]	; (8006bf8 <HAL_DMA_IRQHandler+0xa64>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d101      	bne.n	8006b1c <HAL_DMA_IRQHandler+0x988>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e000      	b.n	8006b1e <HAL_DMA_IRQHandler+0x98a>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 823f 	beq.w	8006fa2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b30:	f003 031f 	and.w	r3, r3, #31
 8006b34:	2204      	movs	r2, #4
 8006b36:	409a      	lsls	r2, r3
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 80cd 	beq.w	8006cdc <HAL_DMA_IRQHandler+0xb48>
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 80c7 	beq.w	8006cdc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b52:	f003 031f 	and.w	r3, r3, #31
 8006b56:	2204      	movs	r2, #4
 8006b58:	409a      	lsls	r2, r3
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d049      	beq.n	8006bfc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d109      	bne.n	8006b86 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f000 8210 	beq.w	8006f9c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b84:	e20a      	b.n	8006f9c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f000 8206 	beq.w	8006f9c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b98:	e200      	b.n	8006f9c <HAL_DMA_IRQHandler+0xe08>
 8006b9a:	bf00      	nop
 8006b9c:	40020010 	.word	0x40020010
 8006ba0:	40020028 	.word	0x40020028
 8006ba4:	40020040 	.word	0x40020040
 8006ba8:	40020058 	.word	0x40020058
 8006bac:	40020070 	.word	0x40020070
 8006bb0:	40020088 	.word	0x40020088
 8006bb4:	400200a0 	.word	0x400200a0
 8006bb8:	400200b8 	.word	0x400200b8
 8006bbc:	40020410 	.word	0x40020410
 8006bc0:	40020428 	.word	0x40020428
 8006bc4:	40020440 	.word	0x40020440
 8006bc8:	40020458 	.word	0x40020458
 8006bcc:	40020470 	.word	0x40020470
 8006bd0:	40020488 	.word	0x40020488
 8006bd4:	400204a0 	.word	0x400204a0
 8006bd8:	400204b8 	.word	0x400204b8
 8006bdc:	58025408 	.word	0x58025408
 8006be0:	5802541c 	.word	0x5802541c
 8006be4:	58025430 	.word	0x58025430
 8006be8:	58025444 	.word	0x58025444
 8006bec:	58025458 	.word	0x58025458
 8006bf0:	5802546c 	.word	0x5802546c
 8006bf4:	58025480 	.word	0x58025480
 8006bf8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f003 0320 	and.w	r3, r3, #32
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d160      	bne.n	8006cc8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a7f      	ldr	r2, [pc, #508]	; (8006e08 <HAL_DMA_IRQHandler+0xc74>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d04a      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xb12>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a7d      	ldr	r2, [pc, #500]	; (8006e0c <HAL_DMA_IRQHandler+0xc78>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d045      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xb12>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a7c      	ldr	r2, [pc, #496]	; (8006e10 <HAL_DMA_IRQHandler+0xc7c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d040      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xb12>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a7a      	ldr	r2, [pc, #488]	; (8006e14 <HAL_DMA_IRQHandler+0xc80>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d03b      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xb12>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a79      	ldr	r2, [pc, #484]	; (8006e18 <HAL_DMA_IRQHandler+0xc84>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d036      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xb12>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a77      	ldr	r2, [pc, #476]	; (8006e1c <HAL_DMA_IRQHandler+0xc88>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d031      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xb12>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a76      	ldr	r2, [pc, #472]	; (8006e20 <HAL_DMA_IRQHandler+0xc8c>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d02c      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xb12>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a74      	ldr	r2, [pc, #464]	; (8006e24 <HAL_DMA_IRQHandler+0xc90>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d027      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xb12>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a73      	ldr	r2, [pc, #460]	; (8006e28 <HAL_DMA_IRQHandler+0xc94>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d022      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xb12>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a71      	ldr	r2, [pc, #452]	; (8006e2c <HAL_DMA_IRQHandler+0xc98>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d01d      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xb12>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a70      	ldr	r2, [pc, #448]	; (8006e30 <HAL_DMA_IRQHandler+0xc9c>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d018      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xb12>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a6e      	ldr	r2, [pc, #440]	; (8006e34 <HAL_DMA_IRQHandler+0xca0>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d013      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xb12>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a6d      	ldr	r2, [pc, #436]	; (8006e38 <HAL_DMA_IRQHandler+0xca4>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d00e      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xb12>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a6b      	ldr	r2, [pc, #428]	; (8006e3c <HAL_DMA_IRQHandler+0xca8>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d009      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xb12>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a6a      	ldr	r2, [pc, #424]	; (8006e40 <HAL_DMA_IRQHandler+0xcac>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d004      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xb12>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a68      	ldr	r2, [pc, #416]	; (8006e44 <HAL_DMA_IRQHandler+0xcb0>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d108      	bne.n	8006cb8 <HAL_DMA_IRQHandler+0xb24>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 0208 	bic.w	r2, r2, #8
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	e007      	b.n	8006cc8 <HAL_DMA_IRQHandler+0xb34>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f022 0204 	bic.w	r2, r2, #4
 8006cc6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f000 8165 	beq.w	8006f9c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cda:	e15f      	b.n	8006f9c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce0:	f003 031f 	and.w	r3, r3, #31
 8006ce4:	2202      	movs	r2, #2
 8006ce6:	409a      	lsls	r2, r3
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	4013      	ands	r3, r2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f000 80c5 	beq.w	8006e7c <HAL_DMA_IRQHandler+0xce8>
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	f003 0302 	and.w	r3, r3, #2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 80bf 	beq.w	8006e7c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d02:	f003 031f 	and.w	r3, r3, #31
 8006d06:	2202      	movs	r2, #2
 8006d08:	409a      	lsls	r2, r3
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d018      	beq.n	8006d4a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d109      	bne.n	8006d36 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f000 813a 	beq.w	8006fa0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d34:	e134      	b.n	8006fa0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 8130 	beq.w	8006fa0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d48:	e12a      	b.n	8006fa0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f003 0320 	and.w	r3, r3, #32
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f040 8089 	bne.w	8006e68 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a2b      	ldr	r2, [pc, #172]	; (8006e08 <HAL_DMA_IRQHandler+0xc74>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d04a      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xc62>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a29      	ldr	r2, [pc, #164]	; (8006e0c <HAL_DMA_IRQHandler+0xc78>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d045      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xc62>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a28      	ldr	r2, [pc, #160]	; (8006e10 <HAL_DMA_IRQHandler+0xc7c>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d040      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xc62>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a26      	ldr	r2, [pc, #152]	; (8006e14 <HAL_DMA_IRQHandler+0xc80>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d03b      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xc62>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a25      	ldr	r2, [pc, #148]	; (8006e18 <HAL_DMA_IRQHandler+0xc84>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d036      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xc62>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a23      	ldr	r2, [pc, #140]	; (8006e1c <HAL_DMA_IRQHandler+0xc88>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d031      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xc62>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a22      	ldr	r2, [pc, #136]	; (8006e20 <HAL_DMA_IRQHandler+0xc8c>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d02c      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xc62>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a20      	ldr	r2, [pc, #128]	; (8006e24 <HAL_DMA_IRQHandler+0xc90>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d027      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xc62>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a1f      	ldr	r2, [pc, #124]	; (8006e28 <HAL_DMA_IRQHandler+0xc94>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d022      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xc62>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a1d      	ldr	r2, [pc, #116]	; (8006e2c <HAL_DMA_IRQHandler+0xc98>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d01d      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xc62>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a1c      	ldr	r2, [pc, #112]	; (8006e30 <HAL_DMA_IRQHandler+0xc9c>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d018      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xc62>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a1a      	ldr	r2, [pc, #104]	; (8006e34 <HAL_DMA_IRQHandler+0xca0>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d013      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xc62>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a19      	ldr	r2, [pc, #100]	; (8006e38 <HAL_DMA_IRQHandler+0xca4>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d00e      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xc62>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a17      	ldr	r2, [pc, #92]	; (8006e3c <HAL_DMA_IRQHandler+0xca8>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d009      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xc62>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a16      	ldr	r2, [pc, #88]	; (8006e40 <HAL_DMA_IRQHandler+0xcac>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d004      	beq.n	8006df6 <HAL_DMA_IRQHandler+0xc62>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a14      	ldr	r2, [pc, #80]	; (8006e44 <HAL_DMA_IRQHandler+0xcb0>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d128      	bne.n	8006e48 <HAL_DMA_IRQHandler+0xcb4>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f022 0214 	bic.w	r2, r2, #20
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	e027      	b.n	8006e58 <HAL_DMA_IRQHandler+0xcc4>
 8006e08:	40020010 	.word	0x40020010
 8006e0c:	40020028 	.word	0x40020028
 8006e10:	40020040 	.word	0x40020040
 8006e14:	40020058 	.word	0x40020058
 8006e18:	40020070 	.word	0x40020070
 8006e1c:	40020088 	.word	0x40020088
 8006e20:	400200a0 	.word	0x400200a0
 8006e24:	400200b8 	.word	0x400200b8
 8006e28:	40020410 	.word	0x40020410
 8006e2c:	40020428 	.word	0x40020428
 8006e30:	40020440 	.word	0x40020440
 8006e34:	40020458 	.word	0x40020458
 8006e38:	40020470 	.word	0x40020470
 8006e3c:	40020488 	.word	0x40020488
 8006e40:	400204a0 	.word	0x400204a0
 8006e44:	400204b8 	.word	0x400204b8
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f022 020a 	bic.w	r2, r2, #10
 8006e56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f000 8097 	beq.w	8006fa0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e7a:	e091      	b.n	8006fa0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e80:	f003 031f 	and.w	r3, r3, #31
 8006e84:	2208      	movs	r2, #8
 8006e86:	409a      	lsls	r2, r3
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 8088 	beq.w	8006fa2 <HAL_DMA_IRQHandler+0xe0e>
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f003 0308 	and.w	r3, r3, #8
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 8082 	beq.w	8006fa2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a41      	ldr	r2, [pc, #260]	; (8006fa8 <HAL_DMA_IRQHandler+0xe14>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d04a      	beq.n	8006f3e <HAL_DMA_IRQHandler+0xdaa>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a3f      	ldr	r2, [pc, #252]	; (8006fac <HAL_DMA_IRQHandler+0xe18>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d045      	beq.n	8006f3e <HAL_DMA_IRQHandler+0xdaa>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a3e      	ldr	r2, [pc, #248]	; (8006fb0 <HAL_DMA_IRQHandler+0xe1c>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d040      	beq.n	8006f3e <HAL_DMA_IRQHandler+0xdaa>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a3c      	ldr	r2, [pc, #240]	; (8006fb4 <HAL_DMA_IRQHandler+0xe20>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d03b      	beq.n	8006f3e <HAL_DMA_IRQHandler+0xdaa>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a3b      	ldr	r2, [pc, #236]	; (8006fb8 <HAL_DMA_IRQHandler+0xe24>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d036      	beq.n	8006f3e <HAL_DMA_IRQHandler+0xdaa>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a39      	ldr	r2, [pc, #228]	; (8006fbc <HAL_DMA_IRQHandler+0xe28>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d031      	beq.n	8006f3e <HAL_DMA_IRQHandler+0xdaa>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a38      	ldr	r2, [pc, #224]	; (8006fc0 <HAL_DMA_IRQHandler+0xe2c>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d02c      	beq.n	8006f3e <HAL_DMA_IRQHandler+0xdaa>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a36      	ldr	r2, [pc, #216]	; (8006fc4 <HAL_DMA_IRQHandler+0xe30>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d027      	beq.n	8006f3e <HAL_DMA_IRQHandler+0xdaa>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a35      	ldr	r2, [pc, #212]	; (8006fc8 <HAL_DMA_IRQHandler+0xe34>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d022      	beq.n	8006f3e <HAL_DMA_IRQHandler+0xdaa>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a33      	ldr	r2, [pc, #204]	; (8006fcc <HAL_DMA_IRQHandler+0xe38>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d01d      	beq.n	8006f3e <HAL_DMA_IRQHandler+0xdaa>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a32      	ldr	r2, [pc, #200]	; (8006fd0 <HAL_DMA_IRQHandler+0xe3c>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d018      	beq.n	8006f3e <HAL_DMA_IRQHandler+0xdaa>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a30      	ldr	r2, [pc, #192]	; (8006fd4 <HAL_DMA_IRQHandler+0xe40>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d013      	beq.n	8006f3e <HAL_DMA_IRQHandler+0xdaa>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a2f      	ldr	r2, [pc, #188]	; (8006fd8 <HAL_DMA_IRQHandler+0xe44>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d00e      	beq.n	8006f3e <HAL_DMA_IRQHandler+0xdaa>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a2d      	ldr	r2, [pc, #180]	; (8006fdc <HAL_DMA_IRQHandler+0xe48>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d009      	beq.n	8006f3e <HAL_DMA_IRQHandler+0xdaa>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a2c      	ldr	r2, [pc, #176]	; (8006fe0 <HAL_DMA_IRQHandler+0xe4c>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d004      	beq.n	8006f3e <HAL_DMA_IRQHandler+0xdaa>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a2a      	ldr	r2, [pc, #168]	; (8006fe4 <HAL_DMA_IRQHandler+0xe50>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d108      	bne.n	8006f50 <HAL_DMA_IRQHandler+0xdbc>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f022 021c 	bic.w	r2, r2, #28
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	e007      	b.n	8006f60 <HAL_DMA_IRQHandler+0xdcc>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f022 020e 	bic.w	r2, r2, #14
 8006f5e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f64:	f003 031f 	and.w	r3, r3, #31
 8006f68:	2201      	movs	r2, #1
 8006f6a:	409a      	lsls	r2, r3
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d009      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	4798      	blx	r3
 8006f96:	e004      	b.n	8006fa2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006f98:	bf00      	nop
 8006f9a:	e002      	b.n	8006fa2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f9c:	bf00      	nop
 8006f9e:	e000      	b.n	8006fa2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fa0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006fa2:	3728      	adds	r7, #40	; 0x28
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	40020010 	.word	0x40020010
 8006fac:	40020028 	.word	0x40020028
 8006fb0:	40020040 	.word	0x40020040
 8006fb4:	40020058 	.word	0x40020058
 8006fb8:	40020070 	.word	0x40020070
 8006fbc:	40020088 	.word	0x40020088
 8006fc0:	400200a0 	.word	0x400200a0
 8006fc4:	400200b8 	.word	0x400200b8
 8006fc8:	40020410 	.word	0x40020410
 8006fcc:	40020428 	.word	0x40020428
 8006fd0:	40020440 	.word	0x40020440
 8006fd4:	40020458 	.word	0x40020458
 8006fd8:	40020470 	.word	0x40020470
 8006fdc:	40020488 	.word	0x40020488
 8006fe0:	400204a0 	.word	0x400204a0
 8006fe4:	400204b8 	.word	0x400204b8

08006fe8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b087      	sub	sp, #28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ffa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007000:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a7f      	ldr	r2, [pc, #508]	; (8007204 <DMA_SetConfig+0x21c>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d072      	beq.n	80070f2 <DMA_SetConfig+0x10a>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a7d      	ldr	r2, [pc, #500]	; (8007208 <DMA_SetConfig+0x220>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d06d      	beq.n	80070f2 <DMA_SetConfig+0x10a>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a7c      	ldr	r2, [pc, #496]	; (800720c <DMA_SetConfig+0x224>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d068      	beq.n	80070f2 <DMA_SetConfig+0x10a>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a7a      	ldr	r2, [pc, #488]	; (8007210 <DMA_SetConfig+0x228>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d063      	beq.n	80070f2 <DMA_SetConfig+0x10a>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a79      	ldr	r2, [pc, #484]	; (8007214 <DMA_SetConfig+0x22c>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d05e      	beq.n	80070f2 <DMA_SetConfig+0x10a>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a77      	ldr	r2, [pc, #476]	; (8007218 <DMA_SetConfig+0x230>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d059      	beq.n	80070f2 <DMA_SetConfig+0x10a>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a76      	ldr	r2, [pc, #472]	; (800721c <DMA_SetConfig+0x234>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d054      	beq.n	80070f2 <DMA_SetConfig+0x10a>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a74      	ldr	r2, [pc, #464]	; (8007220 <DMA_SetConfig+0x238>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d04f      	beq.n	80070f2 <DMA_SetConfig+0x10a>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a73      	ldr	r2, [pc, #460]	; (8007224 <DMA_SetConfig+0x23c>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d04a      	beq.n	80070f2 <DMA_SetConfig+0x10a>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a71      	ldr	r2, [pc, #452]	; (8007228 <DMA_SetConfig+0x240>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d045      	beq.n	80070f2 <DMA_SetConfig+0x10a>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a70      	ldr	r2, [pc, #448]	; (800722c <DMA_SetConfig+0x244>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d040      	beq.n	80070f2 <DMA_SetConfig+0x10a>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a6e      	ldr	r2, [pc, #440]	; (8007230 <DMA_SetConfig+0x248>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d03b      	beq.n	80070f2 <DMA_SetConfig+0x10a>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a6d      	ldr	r2, [pc, #436]	; (8007234 <DMA_SetConfig+0x24c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d036      	beq.n	80070f2 <DMA_SetConfig+0x10a>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a6b      	ldr	r2, [pc, #428]	; (8007238 <DMA_SetConfig+0x250>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d031      	beq.n	80070f2 <DMA_SetConfig+0x10a>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a6a      	ldr	r2, [pc, #424]	; (800723c <DMA_SetConfig+0x254>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d02c      	beq.n	80070f2 <DMA_SetConfig+0x10a>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a68      	ldr	r2, [pc, #416]	; (8007240 <DMA_SetConfig+0x258>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d027      	beq.n	80070f2 <DMA_SetConfig+0x10a>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a67      	ldr	r2, [pc, #412]	; (8007244 <DMA_SetConfig+0x25c>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d022      	beq.n	80070f2 <DMA_SetConfig+0x10a>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a65      	ldr	r2, [pc, #404]	; (8007248 <DMA_SetConfig+0x260>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d01d      	beq.n	80070f2 <DMA_SetConfig+0x10a>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a64      	ldr	r2, [pc, #400]	; (800724c <DMA_SetConfig+0x264>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d018      	beq.n	80070f2 <DMA_SetConfig+0x10a>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a62      	ldr	r2, [pc, #392]	; (8007250 <DMA_SetConfig+0x268>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d013      	beq.n	80070f2 <DMA_SetConfig+0x10a>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a61      	ldr	r2, [pc, #388]	; (8007254 <DMA_SetConfig+0x26c>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d00e      	beq.n	80070f2 <DMA_SetConfig+0x10a>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a5f      	ldr	r2, [pc, #380]	; (8007258 <DMA_SetConfig+0x270>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d009      	beq.n	80070f2 <DMA_SetConfig+0x10a>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a5e      	ldr	r2, [pc, #376]	; (800725c <DMA_SetConfig+0x274>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d004      	beq.n	80070f2 <DMA_SetConfig+0x10a>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a5c      	ldr	r2, [pc, #368]	; (8007260 <DMA_SetConfig+0x278>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d101      	bne.n	80070f6 <DMA_SetConfig+0x10e>
 80070f2:	2301      	movs	r3, #1
 80070f4:	e000      	b.n	80070f8 <DMA_SetConfig+0x110>
 80070f6:	2300      	movs	r3, #0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00d      	beq.n	8007118 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007104:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800710a:	2b00      	cmp	r3, #0
 800710c:	d004      	beq.n	8007118 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007116:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a39      	ldr	r2, [pc, #228]	; (8007204 <DMA_SetConfig+0x21c>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d04a      	beq.n	80071b8 <DMA_SetConfig+0x1d0>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a38      	ldr	r2, [pc, #224]	; (8007208 <DMA_SetConfig+0x220>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d045      	beq.n	80071b8 <DMA_SetConfig+0x1d0>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a36      	ldr	r2, [pc, #216]	; (800720c <DMA_SetConfig+0x224>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d040      	beq.n	80071b8 <DMA_SetConfig+0x1d0>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a35      	ldr	r2, [pc, #212]	; (8007210 <DMA_SetConfig+0x228>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d03b      	beq.n	80071b8 <DMA_SetConfig+0x1d0>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a33      	ldr	r2, [pc, #204]	; (8007214 <DMA_SetConfig+0x22c>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d036      	beq.n	80071b8 <DMA_SetConfig+0x1d0>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a32      	ldr	r2, [pc, #200]	; (8007218 <DMA_SetConfig+0x230>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d031      	beq.n	80071b8 <DMA_SetConfig+0x1d0>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a30      	ldr	r2, [pc, #192]	; (800721c <DMA_SetConfig+0x234>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d02c      	beq.n	80071b8 <DMA_SetConfig+0x1d0>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a2f      	ldr	r2, [pc, #188]	; (8007220 <DMA_SetConfig+0x238>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d027      	beq.n	80071b8 <DMA_SetConfig+0x1d0>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a2d      	ldr	r2, [pc, #180]	; (8007224 <DMA_SetConfig+0x23c>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d022      	beq.n	80071b8 <DMA_SetConfig+0x1d0>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a2c      	ldr	r2, [pc, #176]	; (8007228 <DMA_SetConfig+0x240>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d01d      	beq.n	80071b8 <DMA_SetConfig+0x1d0>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a2a      	ldr	r2, [pc, #168]	; (800722c <DMA_SetConfig+0x244>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d018      	beq.n	80071b8 <DMA_SetConfig+0x1d0>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a29      	ldr	r2, [pc, #164]	; (8007230 <DMA_SetConfig+0x248>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d013      	beq.n	80071b8 <DMA_SetConfig+0x1d0>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a27      	ldr	r2, [pc, #156]	; (8007234 <DMA_SetConfig+0x24c>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d00e      	beq.n	80071b8 <DMA_SetConfig+0x1d0>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a26      	ldr	r2, [pc, #152]	; (8007238 <DMA_SetConfig+0x250>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d009      	beq.n	80071b8 <DMA_SetConfig+0x1d0>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a24      	ldr	r2, [pc, #144]	; (800723c <DMA_SetConfig+0x254>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d004      	beq.n	80071b8 <DMA_SetConfig+0x1d0>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a23      	ldr	r2, [pc, #140]	; (8007240 <DMA_SetConfig+0x258>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d101      	bne.n	80071bc <DMA_SetConfig+0x1d4>
 80071b8:	2301      	movs	r3, #1
 80071ba:	e000      	b.n	80071be <DMA_SetConfig+0x1d6>
 80071bc:	2300      	movs	r3, #0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d059      	beq.n	8007276 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071c6:	f003 031f 	and.w	r3, r3, #31
 80071ca:	223f      	movs	r2, #63	; 0x3f
 80071cc:	409a      	lsls	r2, r3
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80071e0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	683a      	ldr	r2, [r7, #0]
 80071e8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	2b40      	cmp	r3, #64	; 0x40
 80071f0:	d138      	bne.n	8007264 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007202:	e086      	b.n	8007312 <DMA_SetConfig+0x32a>
 8007204:	40020010 	.word	0x40020010
 8007208:	40020028 	.word	0x40020028
 800720c:	40020040 	.word	0x40020040
 8007210:	40020058 	.word	0x40020058
 8007214:	40020070 	.word	0x40020070
 8007218:	40020088 	.word	0x40020088
 800721c:	400200a0 	.word	0x400200a0
 8007220:	400200b8 	.word	0x400200b8
 8007224:	40020410 	.word	0x40020410
 8007228:	40020428 	.word	0x40020428
 800722c:	40020440 	.word	0x40020440
 8007230:	40020458 	.word	0x40020458
 8007234:	40020470 	.word	0x40020470
 8007238:	40020488 	.word	0x40020488
 800723c:	400204a0 	.word	0x400204a0
 8007240:	400204b8 	.word	0x400204b8
 8007244:	58025408 	.word	0x58025408
 8007248:	5802541c 	.word	0x5802541c
 800724c:	58025430 	.word	0x58025430
 8007250:	58025444 	.word	0x58025444
 8007254:	58025458 	.word	0x58025458
 8007258:	5802546c 	.word	0x5802546c
 800725c:	58025480 	.word	0x58025480
 8007260:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	60da      	str	r2, [r3, #12]
}
 8007274:	e04d      	b.n	8007312 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a29      	ldr	r2, [pc, #164]	; (8007320 <DMA_SetConfig+0x338>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d022      	beq.n	80072c6 <DMA_SetConfig+0x2de>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a27      	ldr	r2, [pc, #156]	; (8007324 <DMA_SetConfig+0x33c>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d01d      	beq.n	80072c6 <DMA_SetConfig+0x2de>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a26      	ldr	r2, [pc, #152]	; (8007328 <DMA_SetConfig+0x340>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d018      	beq.n	80072c6 <DMA_SetConfig+0x2de>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a24      	ldr	r2, [pc, #144]	; (800732c <DMA_SetConfig+0x344>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d013      	beq.n	80072c6 <DMA_SetConfig+0x2de>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a23      	ldr	r2, [pc, #140]	; (8007330 <DMA_SetConfig+0x348>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d00e      	beq.n	80072c6 <DMA_SetConfig+0x2de>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a21      	ldr	r2, [pc, #132]	; (8007334 <DMA_SetConfig+0x34c>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d009      	beq.n	80072c6 <DMA_SetConfig+0x2de>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a20      	ldr	r2, [pc, #128]	; (8007338 <DMA_SetConfig+0x350>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d004      	beq.n	80072c6 <DMA_SetConfig+0x2de>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a1e      	ldr	r2, [pc, #120]	; (800733c <DMA_SetConfig+0x354>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d101      	bne.n	80072ca <DMA_SetConfig+0x2e2>
 80072c6:	2301      	movs	r3, #1
 80072c8:	e000      	b.n	80072cc <DMA_SetConfig+0x2e4>
 80072ca:	2300      	movs	r3, #0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d020      	beq.n	8007312 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d4:	f003 031f 	and.w	r3, r3, #31
 80072d8:	2201      	movs	r2, #1
 80072da:	409a      	lsls	r2, r3
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	2b40      	cmp	r3, #64	; 0x40
 80072ee:	d108      	bne.n	8007302 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	60da      	str	r2, [r3, #12]
}
 8007300:	e007      	b.n	8007312 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	60da      	str	r2, [r3, #12]
}
 8007312:	bf00      	nop
 8007314:	371c      	adds	r7, #28
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	58025408 	.word	0x58025408
 8007324:	5802541c 	.word	0x5802541c
 8007328:	58025430 	.word	0x58025430
 800732c:	58025444 	.word	0x58025444
 8007330:	58025458 	.word	0x58025458
 8007334:	5802546c 	.word	0x5802546c
 8007338:	58025480 	.word	0x58025480
 800733c:	58025494 	.word	0x58025494

08007340 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a42      	ldr	r2, [pc, #264]	; (8007458 <DMA_CalcBaseAndBitshift+0x118>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d04a      	beq.n	80073e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a41      	ldr	r2, [pc, #260]	; (800745c <DMA_CalcBaseAndBitshift+0x11c>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d045      	beq.n	80073e8 <DMA_CalcBaseAndBitshift+0xa8>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a3f      	ldr	r2, [pc, #252]	; (8007460 <DMA_CalcBaseAndBitshift+0x120>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d040      	beq.n	80073e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a3e      	ldr	r2, [pc, #248]	; (8007464 <DMA_CalcBaseAndBitshift+0x124>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d03b      	beq.n	80073e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a3c      	ldr	r2, [pc, #240]	; (8007468 <DMA_CalcBaseAndBitshift+0x128>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d036      	beq.n	80073e8 <DMA_CalcBaseAndBitshift+0xa8>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a3b      	ldr	r2, [pc, #236]	; (800746c <DMA_CalcBaseAndBitshift+0x12c>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d031      	beq.n	80073e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a39      	ldr	r2, [pc, #228]	; (8007470 <DMA_CalcBaseAndBitshift+0x130>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d02c      	beq.n	80073e8 <DMA_CalcBaseAndBitshift+0xa8>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a38      	ldr	r2, [pc, #224]	; (8007474 <DMA_CalcBaseAndBitshift+0x134>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d027      	beq.n	80073e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a36      	ldr	r2, [pc, #216]	; (8007478 <DMA_CalcBaseAndBitshift+0x138>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d022      	beq.n	80073e8 <DMA_CalcBaseAndBitshift+0xa8>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a35      	ldr	r2, [pc, #212]	; (800747c <DMA_CalcBaseAndBitshift+0x13c>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d01d      	beq.n	80073e8 <DMA_CalcBaseAndBitshift+0xa8>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a33      	ldr	r2, [pc, #204]	; (8007480 <DMA_CalcBaseAndBitshift+0x140>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d018      	beq.n	80073e8 <DMA_CalcBaseAndBitshift+0xa8>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a32      	ldr	r2, [pc, #200]	; (8007484 <DMA_CalcBaseAndBitshift+0x144>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d013      	beq.n	80073e8 <DMA_CalcBaseAndBitshift+0xa8>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a30      	ldr	r2, [pc, #192]	; (8007488 <DMA_CalcBaseAndBitshift+0x148>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d00e      	beq.n	80073e8 <DMA_CalcBaseAndBitshift+0xa8>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a2f      	ldr	r2, [pc, #188]	; (800748c <DMA_CalcBaseAndBitshift+0x14c>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d009      	beq.n	80073e8 <DMA_CalcBaseAndBitshift+0xa8>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a2d      	ldr	r2, [pc, #180]	; (8007490 <DMA_CalcBaseAndBitshift+0x150>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d004      	beq.n	80073e8 <DMA_CalcBaseAndBitshift+0xa8>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a2c      	ldr	r2, [pc, #176]	; (8007494 <DMA_CalcBaseAndBitshift+0x154>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d101      	bne.n	80073ec <DMA_CalcBaseAndBitshift+0xac>
 80073e8:	2301      	movs	r3, #1
 80073ea:	e000      	b.n	80073ee <DMA_CalcBaseAndBitshift+0xae>
 80073ec:	2300      	movs	r3, #0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d024      	beq.n	800743c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	3b10      	subs	r3, #16
 80073fa:	4a27      	ldr	r2, [pc, #156]	; (8007498 <DMA_CalcBaseAndBitshift+0x158>)
 80073fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007400:	091b      	lsrs	r3, r3, #4
 8007402:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f003 0307 	and.w	r3, r3, #7
 800740a:	4a24      	ldr	r2, [pc, #144]	; (800749c <DMA_CalcBaseAndBitshift+0x15c>)
 800740c:	5cd3      	ldrb	r3, [r2, r3]
 800740e:	461a      	mov	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2b03      	cmp	r3, #3
 8007418:	d908      	bls.n	800742c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	461a      	mov	r2, r3
 8007420:	4b1f      	ldr	r3, [pc, #124]	; (80074a0 <DMA_CalcBaseAndBitshift+0x160>)
 8007422:	4013      	ands	r3, r2
 8007424:	1d1a      	adds	r2, r3, #4
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	659a      	str	r2, [r3, #88]	; 0x58
 800742a:	e00d      	b.n	8007448 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	461a      	mov	r2, r3
 8007432:	4b1b      	ldr	r3, [pc, #108]	; (80074a0 <DMA_CalcBaseAndBitshift+0x160>)
 8007434:	4013      	ands	r3, r2
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	6593      	str	r3, [r2, #88]	; 0x58
 800743a:	e005      	b.n	8007448 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800744c:	4618      	mov	r0, r3
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	40020010 	.word	0x40020010
 800745c:	40020028 	.word	0x40020028
 8007460:	40020040 	.word	0x40020040
 8007464:	40020058 	.word	0x40020058
 8007468:	40020070 	.word	0x40020070
 800746c:	40020088 	.word	0x40020088
 8007470:	400200a0 	.word	0x400200a0
 8007474:	400200b8 	.word	0x400200b8
 8007478:	40020410 	.word	0x40020410
 800747c:	40020428 	.word	0x40020428
 8007480:	40020440 	.word	0x40020440
 8007484:	40020458 	.word	0x40020458
 8007488:	40020470 	.word	0x40020470
 800748c:	40020488 	.word	0x40020488
 8007490:	400204a0 	.word	0x400204a0
 8007494:	400204b8 	.word	0x400204b8
 8007498:	aaaaaaab 	.word	0xaaaaaaab
 800749c:	08010214 	.word	0x08010214
 80074a0:	fffffc00 	.word	0xfffffc00

080074a4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074ac:	2300      	movs	r3, #0
 80074ae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d120      	bne.n	80074fa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074bc:	2b03      	cmp	r3, #3
 80074be:	d858      	bhi.n	8007572 <DMA_CheckFifoParam+0xce>
 80074c0:	a201      	add	r2, pc, #4	; (adr r2, 80074c8 <DMA_CheckFifoParam+0x24>)
 80074c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c6:	bf00      	nop
 80074c8:	080074d9 	.word	0x080074d9
 80074cc:	080074eb 	.word	0x080074eb
 80074d0:	080074d9 	.word	0x080074d9
 80074d4:	08007573 	.word	0x08007573
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d048      	beq.n	8007576 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074e8:	e045      	b.n	8007576 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80074f2:	d142      	bne.n	800757a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074f8:	e03f      	b.n	800757a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007502:	d123      	bne.n	800754c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007508:	2b03      	cmp	r3, #3
 800750a:	d838      	bhi.n	800757e <DMA_CheckFifoParam+0xda>
 800750c:	a201      	add	r2, pc, #4	; (adr r2, 8007514 <DMA_CheckFifoParam+0x70>)
 800750e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007512:	bf00      	nop
 8007514:	08007525 	.word	0x08007525
 8007518:	0800752b 	.word	0x0800752b
 800751c:	08007525 	.word	0x08007525
 8007520:	0800753d 	.word	0x0800753d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	73fb      	strb	r3, [r7, #15]
        break;
 8007528:	e030      	b.n	800758c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d025      	beq.n	8007582 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800753a:	e022      	b.n	8007582 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007540:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007544:	d11f      	bne.n	8007586 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800754a:	e01c      	b.n	8007586 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007550:	2b02      	cmp	r3, #2
 8007552:	d902      	bls.n	800755a <DMA_CheckFifoParam+0xb6>
 8007554:	2b03      	cmp	r3, #3
 8007556:	d003      	beq.n	8007560 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007558:	e018      	b.n	800758c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	73fb      	strb	r3, [r7, #15]
        break;
 800755e:	e015      	b.n	800758c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00e      	beq.n	800758a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	73fb      	strb	r3, [r7, #15]
    break;
 8007570:	e00b      	b.n	800758a <DMA_CheckFifoParam+0xe6>
        break;
 8007572:	bf00      	nop
 8007574:	e00a      	b.n	800758c <DMA_CheckFifoParam+0xe8>
        break;
 8007576:	bf00      	nop
 8007578:	e008      	b.n	800758c <DMA_CheckFifoParam+0xe8>
        break;
 800757a:	bf00      	nop
 800757c:	e006      	b.n	800758c <DMA_CheckFifoParam+0xe8>
        break;
 800757e:	bf00      	nop
 8007580:	e004      	b.n	800758c <DMA_CheckFifoParam+0xe8>
        break;
 8007582:	bf00      	nop
 8007584:	e002      	b.n	800758c <DMA_CheckFifoParam+0xe8>
        break;
 8007586:	bf00      	nop
 8007588:	e000      	b.n	800758c <DMA_CheckFifoParam+0xe8>
    break;
 800758a:	bf00      	nop
    }
  }

  return status;
 800758c:	7bfb      	ldrb	r3, [r7, #15]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop

0800759c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a38      	ldr	r2, [pc, #224]	; (8007690 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d022      	beq.n	80075fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a36      	ldr	r2, [pc, #216]	; (8007694 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d01d      	beq.n	80075fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a35      	ldr	r2, [pc, #212]	; (8007698 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d018      	beq.n	80075fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a33      	ldr	r2, [pc, #204]	; (800769c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d013      	beq.n	80075fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a32      	ldr	r2, [pc, #200]	; (80076a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d00e      	beq.n	80075fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a30      	ldr	r2, [pc, #192]	; (80076a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d009      	beq.n	80075fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a2f      	ldr	r2, [pc, #188]	; (80076a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d004      	beq.n	80075fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a2d      	ldr	r2, [pc, #180]	; (80076ac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d101      	bne.n	80075fe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80075fa:	2301      	movs	r3, #1
 80075fc:	e000      	b.n	8007600 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80075fe:	2300      	movs	r3, #0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d01a      	beq.n	800763a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	b2db      	uxtb	r3, r3
 800760a:	3b08      	subs	r3, #8
 800760c:	4a28      	ldr	r2, [pc, #160]	; (80076b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800760e:	fba2 2303 	umull	r2, r3, r2, r3
 8007612:	091b      	lsrs	r3, r3, #4
 8007614:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	4b26      	ldr	r3, [pc, #152]	; (80076b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800761a:	4413      	add	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	461a      	mov	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a24      	ldr	r2, [pc, #144]	; (80076b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007628:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f003 031f 	and.w	r3, r3, #31
 8007630:	2201      	movs	r2, #1
 8007632:	409a      	lsls	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007638:	e024      	b.n	8007684 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	b2db      	uxtb	r3, r3
 8007640:	3b10      	subs	r3, #16
 8007642:	4a1e      	ldr	r2, [pc, #120]	; (80076bc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007644:	fba2 2303 	umull	r2, r3, r2, r3
 8007648:	091b      	lsrs	r3, r3, #4
 800764a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	4a1c      	ldr	r2, [pc, #112]	; (80076c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d806      	bhi.n	8007662 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	4a1b      	ldr	r2, [pc, #108]	; (80076c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d902      	bls.n	8007662 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	3308      	adds	r3, #8
 8007660:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	4b18      	ldr	r3, [pc, #96]	; (80076c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007666:	4413      	add	r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	461a      	mov	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a16      	ldr	r2, [pc, #88]	; (80076cc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007674:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f003 031f 	and.w	r3, r3, #31
 800767c:	2201      	movs	r2, #1
 800767e:	409a      	lsls	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007684:	bf00      	nop
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr
 8007690:	58025408 	.word	0x58025408
 8007694:	5802541c 	.word	0x5802541c
 8007698:	58025430 	.word	0x58025430
 800769c:	58025444 	.word	0x58025444
 80076a0:	58025458 	.word	0x58025458
 80076a4:	5802546c 	.word	0x5802546c
 80076a8:	58025480 	.word	0x58025480
 80076ac:	58025494 	.word	0x58025494
 80076b0:	cccccccd 	.word	0xcccccccd
 80076b4:	16009600 	.word	0x16009600
 80076b8:	58025880 	.word	0x58025880
 80076bc:	aaaaaaab 	.word	0xaaaaaaab
 80076c0:	400204b8 	.word	0x400204b8
 80076c4:	4002040f 	.word	0x4002040f
 80076c8:	10008200 	.word	0x10008200
 80076cc:	40020880 	.word	0x40020880

080076d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d04a      	beq.n	800777c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2b08      	cmp	r3, #8
 80076ea:	d847      	bhi.n	800777c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a25      	ldr	r2, [pc, #148]	; (8007788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d022      	beq.n	800773c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a24      	ldr	r2, [pc, #144]	; (800778c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d01d      	beq.n	800773c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a22      	ldr	r2, [pc, #136]	; (8007790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d018      	beq.n	800773c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a21      	ldr	r2, [pc, #132]	; (8007794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d013      	beq.n	800773c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a1f      	ldr	r2, [pc, #124]	; (8007798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d00e      	beq.n	800773c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a1e      	ldr	r2, [pc, #120]	; (800779c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d009      	beq.n	800773c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a1c      	ldr	r2, [pc, #112]	; (80077a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d004      	beq.n	800773c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a1b      	ldr	r2, [pc, #108]	; (80077a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d101      	bne.n	8007740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800773c:	2301      	movs	r3, #1
 800773e:	e000      	b.n	8007742 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007740:	2300      	movs	r3, #0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00a      	beq.n	800775c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	4b17      	ldr	r3, [pc, #92]	; (80077a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800774a:	4413      	add	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	461a      	mov	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a15      	ldr	r2, [pc, #84]	; (80077ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007758:	671a      	str	r2, [r3, #112]	; 0x70
 800775a:	e009      	b.n	8007770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	4b14      	ldr	r3, [pc, #80]	; (80077b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007760:	4413      	add	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	461a      	mov	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a11      	ldr	r2, [pc, #68]	; (80077b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800776e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	3b01      	subs	r3, #1
 8007774:	2201      	movs	r2, #1
 8007776:	409a      	lsls	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800777c:	bf00      	nop
 800777e:	3714      	adds	r7, #20
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr
 8007788:	58025408 	.word	0x58025408
 800778c:	5802541c 	.word	0x5802541c
 8007790:	58025430 	.word	0x58025430
 8007794:	58025444 	.word	0x58025444
 8007798:	58025458 	.word	0x58025458
 800779c:	5802546c 	.word	0x5802546c
 80077a0:	58025480 	.word	0x58025480
 80077a4:	58025494 	.word	0x58025494
 80077a8:	1600963f 	.word	0x1600963f
 80077ac:	58025940 	.word	0x58025940
 80077b0:	1000823f 	.word	0x1000823f
 80077b4:	40020940 	.word	0x40020940

080077b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b089      	sub	sp, #36	; 0x24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80077c6:	4b89      	ldr	r3, [pc, #548]	; (80079ec <HAL_GPIO_Init+0x234>)
 80077c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80077ca:	e194      	b.n	8007af6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	2101      	movs	r1, #1
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	fa01 f303 	lsl.w	r3, r1, r3
 80077d8:	4013      	ands	r3, r2
 80077da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f000 8186 	beq.w	8007af0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	f003 0303 	and.w	r3, r3, #3
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d005      	beq.n	80077fc <HAL_GPIO_Init+0x44>
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	f003 0303 	and.w	r3, r3, #3
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d130      	bne.n	800785e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	2203      	movs	r2, #3
 8007808:	fa02 f303 	lsl.w	r3, r2, r3
 800780c:	43db      	mvns	r3, r3
 800780e:	69ba      	ldr	r2, [r7, #24]
 8007810:	4013      	ands	r3, r2
 8007812:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	68da      	ldr	r2, [r3, #12]
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	005b      	lsls	r3, r3, #1
 800781c:	fa02 f303 	lsl.w	r3, r2, r3
 8007820:	69ba      	ldr	r2, [r7, #24]
 8007822:	4313      	orrs	r3, r2
 8007824:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007832:	2201      	movs	r2, #1
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	fa02 f303 	lsl.w	r3, r2, r3
 800783a:	43db      	mvns	r3, r3
 800783c:	69ba      	ldr	r2, [r7, #24]
 800783e:	4013      	ands	r3, r2
 8007840:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	091b      	lsrs	r3, r3, #4
 8007848:	f003 0201 	and.w	r2, r3, #1
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	fa02 f303 	lsl.w	r3, r2, r3
 8007852:	69ba      	ldr	r2, [r7, #24]
 8007854:	4313      	orrs	r3, r2
 8007856:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	69ba      	ldr	r2, [r7, #24]
 800785c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f003 0303 	and.w	r3, r3, #3
 8007866:	2b03      	cmp	r3, #3
 8007868:	d017      	beq.n	800789a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	005b      	lsls	r3, r3, #1
 8007874:	2203      	movs	r2, #3
 8007876:	fa02 f303 	lsl.w	r3, r2, r3
 800787a:	43db      	mvns	r3, r3
 800787c:	69ba      	ldr	r2, [r7, #24]
 800787e:	4013      	ands	r3, r2
 8007880:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	689a      	ldr	r2, [r3, #8]
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	005b      	lsls	r3, r3, #1
 800788a:	fa02 f303 	lsl.w	r3, r2, r3
 800788e:	69ba      	ldr	r2, [r7, #24]
 8007890:	4313      	orrs	r3, r2
 8007892:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	69ba      	ldr	r2, [r7, #24]
 8007898:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f003 0303 	and.w	r3, r3, #3
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d123      	bne.n	80078ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	08da      	lsrs	r2, r3, #3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	3208      	adds	r2, #8
 80078ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	f003 0307 	and.w	r3, r3, #7
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	220f      	movs	r2, #15
 80078be:	fa02 f303 	lsl.w	r3, r2, r3
 80078c2:	43db      	mvns	r3, r3
 80078c4:	69ba      	ldr	r2, [r7, #24]
 80078c6:	4013      	ands	r3, r2
 80078c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	691a      	ldr	r2, [r3, #16]
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	f003 0307 	and.w	r3, r3, #7
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	fa02 f303 	lsl.w	r3, r2, r3
 80078da:	69ba      	ldr	r2, [r7, #24]
 80078dc:	4313      	orrs	r3, r2
 80078de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	08da      	lsrs	r2, r3, #3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	3208      	adds	r2, #8
 80078e8:	69b9      	ldr	r1, [r7, #24]
 80078ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	005b      	lsls	r3, r3, #1
 80078f8:	2203      	movs	r2, #3
 80078fa:	fa02 f303 	lsl.w	r3, r2, r3
 80078fe:	43db      	mvns	r3, r3
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	4013      	ands	r3, r2
 8007904:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f003 0203 	and.w	r2, r3, #3
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	005b      	lsls	r3, r3, #1
 8007912:	fa02 f303 	lsl.w	r3, r2, r3
 8007916:	69ba      	ldr	r2, [r7, #24]
 8007918:	4313      	orrs	r3, r2
 800791a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	69ba      	ldr	r2, [r7, #24]
 8007920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800792a:	2b00      	cmp	r3, #0
 800792c:	f000 80e0 	beq.w	8007af0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007930:	4b2f      	ldr	r3, [pc, #188]	; (80079f0 <HAL_GPIO_Init+0x238>)
 8007932:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007936:	4a2e      	ldr	r2, [pc, #184]	; (80079f0 <HAL_GPIO_Init+0x238>)
 8007938:	f043 0302 	orr.w	r3, r3, #2
 800793c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007940:	4b2b      	ldr	r3, [pc, #172]	; (80079f0 <HAL_GPIO_Init+0x238>)
 8007942:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	60fb      	str	r3, [r7, #12]
 800794c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800794e:	4a29      	ldr	r2, [pc, #164]	; (80079f4 <HAL_GPIO_Init+0x23c>)
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	089b      	lsrs	r3, r3, #2
 8007954:	3302      	adds	r3, #2
 8007956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800795a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	f003 0303 	and.w	r3, r3, #3
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	220f      	movs	r2, #15
 8007966:	fa02 f303 	lsl.w	r3, r2, r3
 800796a:	43db      	mvns	r3, r3
 800796c:	69ba      	ldr	r2, [r7, #24]
 800796e:	4013      	ands	r3, r2
 8007970:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a20      	ldr	r2, [pc, #128]	; (80079f8 <HAL_GPIO_Init+0x240>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d052      	beq.n	8007a20 <HAL_GPIO_Init+0x268>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a1f      	ldr	r2, [pc, #124]	; (80079fc <HAL_GPIO_Init+0x244>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d031      	beq.n	80079e6 <HAL_GPIO_Init+0x22e>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a1e      	ldr	r2, [pc, #120]	; (8007a00 <HAL_GPIO_Init+0x248>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d02b      	beq.n	80079e2 <HAL_GPIO_Init+0x22a>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a1d      	ldr	r2, [pc, #116]	; (8007a04 <HAL_GPIO_Init+0x24c>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d025      	beq.n	80079de <HAL_GPIO_Init+0x226>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a1c      	ldr	r2, [pc, #112]	; (8007a08 <HAL_GPIO_Init+0x250>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d01f      	beq.n	80079da <HAL_GPIO_Init+0x222>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a1b      	ldr	r2, [pc, #108]	; (8007a0c <HAL_GPIO_Init+0x254>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d019      	beq.n	80079d6 <HAL_GPIO_Init+0x21e>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a1a      	ldr	r2, [pc, #104]	; (8007a10 <HAL_GPIO_Init+0x258>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d013      	beq.n	80079d2 <HAL_GPIO_Init+0x21a>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a19      	ldr	r2, [pc, #100]	; (8007a14 <HAL_GPIO_Init+0x25c>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d00d      	beq.n	80079ce <HAL_GPIO_Init+0x216>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a18      	ldr	r2, [pc, #96]	; (8007a18 <HAL_GPIO_Init+0x260>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d007      	beq.n	80079ca <HAL_GPIO_Init+0x212>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a17      	ldr	r2, [pc, #92]	; (8007a1c <HAL_GPIO_Init+0x264>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d101      	bne.n	80079c6 <HAL_GPIO_Init+0x20e>
 80079c2:	2309      	movs	r3, #9
 80079c4:	e02d      	b.n	8007a22 <HAL_GPIO_Init+0x26a>
 80079c6:	230a      	movs	r3, #10
 80079c8:	e02b      	b.n	8007a22 <HAL_GPIO_Init+0x26a>
 80079ca:	2308      	movs	r3, #8
 80079cc:	e029      	b.n	8007a22 <HAL_GPIO_Init+0x26a>
 80079ce:	2307      	movs	r3, #7
 80079d0:	e027      	b.n	8007a22 <HAL_GPIO_Init+0x26a>
 80079d2:	2306      	movs	r3, #6
 80079d4:	e025      	b.n	8007a22 <HAL_GPIO_Init+0x26a>
 80079d6:	2305      	movs	r3, #5
 80079d8:	e023      	b.n	8007a22 <HAL_GPIO_Init+0x26a>
 80079da:	2304      	movs	r3, #4
 80079dc:	e021      	b.n	8007a22 <HAL_GPIO_Init+0x26a>
 80079de:	2303      	movs	r3, #3
 80079e0:	e01f      	b.n	8007a22 <HAL_GPIO_Init+0x26a>
 80079e2:	2302      	movs	r3, #2
 80079e4:	e01d      	b.n	8007a22 <HAL_GPIO_Init+0x26a>
 80079e6:	2301      	movs	r3, #1
 80079e8:	e01b      	b.n	8007a22 <HAL_GPIO_Init+0x26a>
 80079ea:	bf00      	nop
 80079ec:	58000080 	.word	0x58000080
 80079f0:	58024400 	.word	0x58024400
 80079f4:	58000400 	.word	0x58000400
 80079f8:	58020000 	.word	0x58020000
 80079fc:	58020400 	.word	0x58020400
 8007a00:	58020800 	.word	0x58020800
 8007a04:	58020c00 	.word	0x58020c00
 8007a08:	58021000 	.word	0x58021000
 8007a0c:	58021400 	.word	0x58021400
 8007a10:	58021800 	.word	0x58021800
 8007a14:	58021c00 	.word	0x58021c00
 8007a18:	58022000 	.word	0x58022000
 8007a1c:	58022400 	.word	0x58022400
 8007a20:	2300      	movs	r3, #0
 8007a22:	69fa      	ldr	r2, [r7, #28]
 8007a24:	f002 0203 	and.w	r2, r2, #3
 8007a28:	0092      	lsls	r2, r2, #2
 8007a2a:	4093      	lsls	r3, r2
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007a32:	4938      	ldr	r1, [pc, #224]	; (8007b14 <HAL_GPIO_Init+0x35c>)
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	089b      	lsrs	r3, r3, #2
 8007a38:	3302      	adds	r3, #2
 8007a3a:	69ba      	ldr	r2, [r7, #24]
 8007a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	43db      	mvns	r3, r3
 8007a4c:	69ba      	ldr	r2, [r7, #24]
 8007a4e:	4013      	ands	r3, r2
 8007a50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d003      	beq.n	8007a66 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007a66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	43db      	mvns	r3, r3
 8007a7a:	69ba      	ldr	r2, [r7, #24]
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d003      	beq.n	8007a94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007a8c:	69ba      	ldr	r2, [r7, #24]
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007a94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	43db      	mvns	r3, r3
 8007aa6:	69ba      	ldr	r2, [r7, #24]
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d003      	beq.n	8007ac0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007ab8:	69ba      	ldr	r2, [r7, #24]
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	69ba      	ldr	r2, [r7, #24]
 8007ac4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	43db      	mvns	r3, r3
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d003      	beq.n	8007aea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007ae2:	69ba      	ldr	r2, [r7, #24]
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	69ba      	ldr	r2, [r7, #24]
 8007aee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	3301      	adds	r3, #1
 8007af4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	fa22 f303 	lsr.w	r3, r2, r3
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f47f ae63 	bne.w	80077cc <HAL_GPIO_Init+0x14>
  }
}
 8007b06:	bf00      	nop
 8007b08:	bf00      	nop
 8007b0a:	3724      	adds	r7, #36	; 0x24
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr
 8007b14:	58000400 	.word	0x58000400

08007b18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	691a      	ldr	r2, [r3, #16]
 8007b28:	887b      	ldrh	r3, [r7, #2]
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d002      	beq.n	8007b36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007b30:	2301      	movs	r3, #1
 8007b32:	73fb      	strb	r3, [r7, #15]
 8007b34:	e001      	b.n	8007b3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007b36:	2300      	movs	r3, #0
 8007b38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3714      	adds	r7, #20
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	460b      	mov	r3, r1
 8007b52:	807b      	strh	r3, [r7, #2]
 8007b54:	4613      	mov	r3, r2
 8007b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007b58:	787b      	ldrb	r3, [r7, #1]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d003      	beq.n	8007b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b5e:	887a      	ldrh	r2, [r7, #2]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007b64:	e003      	b.n	8007b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007b66:	887b      	ldrh	r3, [r7, #2]
 8007b68:	041a      	lsls	r2, r3, #16
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	619a      	str	r2, [r3, #24]
}
 8007b6e:	bf00      	nop
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
	...

08007b7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d101      	bne.n	8007b8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e07f      	b.n	8007c8e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d106      	bne.n	8007ba8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f7fa fb40 	bl	8002228 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2224      	movs	r2, #36	; 0x24
 8007bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f022 0201 	bic.w	r2, r2, #1
 8007bbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685a      	ldr	r2, [r3, #4]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007bcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	689a      	ldr	r2, [r3, #8]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007bdc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d107      	bne.n	8007bf6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	689a      	ldr	r2, [r3, #8]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bf2:	609a      	str	r2, [r3, #8]
 8007bf4:	e006      	b.n	8007c04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	689a      	ldr	r2, [r3, #8]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007c02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d104      	bne.n	8007c16 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	6859      	ldr	r1, [r3, #4]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	4b1d      	ldr	r3, [pc, #116]	; (8007c98 <HAL_I2C_Init+0x11c>)
 8007c22:	430b      	orrs	r3, r1
 8007c24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68da      	ldr	r2, [r3, #12]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	691a      	ldr	r2, [r3, #16]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	69d9      	ldr	r1, [r3, #28]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a1a      	ldr	r2, [r3, #32]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	430a      	orrs	r2, r1
 8007c5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f042 0201 	orr.w	r2, r2, #1
 8007c6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2220      	movs	r2, #32
 8007c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	02008000 	.word	0x02008000

08007c9c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b088      	sub	sp, #32
 8007ca0:	af02      	add	r7, sp, #8
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	607a      	str	r2, [r7, #4]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	460b      	mov	r3, r1
 8007caa:	817b      	strh	r3, [r7, #10]
 8007cac:	4613      	mov	r3, r2
 8007cae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b20      	cmp	r3, #32
 8007cba:	f040 80da 	bne.w	8007e72 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d101      	bne.n	8007ccc <HAL_I2C_Master_Transmit+0x30>
 8007cc8:	2302      	movs	r3, #2
 8007cca:	e0d3      	b.n	8007e74 <HAL_I2C_Master_Transmit+0x1d8>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007cd4:	f7fa fed6 	bl	8002a84 <HAL_GetTick>
 8007cd8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	2319      	movs	r3, #25
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f000 f9e6 	bl	80080b8 <I2C_WaitOnFlagUntilTimeout>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d001      	beq.n	8007cf6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e0be      	b.n	8007e74 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2221      	movs	r2, #33	; 0x21
 8007cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2210      	movs	r2, #16
 8007d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	893a      	ldrh	r2, [r7, #8]
 8007d16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	2bff      	cmp	r3, #255	; 0xff
 8007d26:	d90e      	bls.n	8007d46 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	22ff      	movs	r2, #255	; 0xff
 8007d2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	8979      	ldrh	r1, [r7, #10]
 8007d36:	4b51      	ldr	r3, [pc, #324]	; (8007e7c <HAL_I2C_Master_Transmit+0x1e0>)
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f000 fbdc 	bl	80084fc <I2C_TransferConfig>
 8007d44:	e06c      	b.n	8007e20 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d54:	b2da      	uxtb	r2, r3
 8007d56:	8979      	ldrh	r1, [r7, #10]
 8007d58:	4b48      	ldr	r3, [pc, #288]	; (8007e7c <HAL_I2C_Master_Transmit+0x1e0>)
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f000 fbcb 	bl	80084fc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007d66:	e05b      	b.n	8007e20 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d68:	697a      	ldr	r2, [r7, #20]
 8007d6a:	6a39      	ldr	r1, [r7, #32]
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f000 f9e3 	bl	8008138 <I2C_WaitOnTXISFlagUntilTimeout>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d001      	beq.n	8007d7c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e07b      	b.n	8007e74 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d80:	781a      	ldrb	r2, [r3, #0]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8c:	1c5a      	adds	r2, r3, #1
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007da4:	3b01      	subs	r3, #1
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d034      	beq.n	8007e20 <HAL_I2C_Master_Transmit+0x184>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d130      	bne.n	8007e20 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	6a3b      	ldr	r3, [r7, #32]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	2180      	movs	r1, #128	; 0x80
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f000 f975 	bl	80080b8 <I2C_WaitOnFlagUntilTimeout>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d001      	beq.n	8007dd8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e04d      	b.n	8007e74 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	2bff      	cmp	r3, #255	; 0xff
 8007de0:	d90e      	bls.n	8007e00 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	22ff      	movs	r2, #255	; 0xff
 8007de6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	8979      	ldrh	r1, [r7, #10]
 8007df0:	2300      	movs	r3, #0
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 fb7f 	bl	80084fc <I2C_TransferConfig>
 8007dfe:	e00f      	b.n	8007e20 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e0e:	b2da      	uxtb	r2, r3
 8007e10:	8979      	ldrh	r1, [r7, #10]
 8007e12:	2300      	movs	r3, #0
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f000 fb6e 	bl	80084fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d19e      	bne.n	8007d68 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e2a:	697a      	ldr	r2, [r7, #20]
 8007e2c:	6a39      	ldr	r1, [r7, #32]
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f000 f9c2 	bl	80081b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e01a      	b.n	8007e74 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2220      	movs	r2, #32
 8007e44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	6859      	ldr	r1, [r3, #4]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	4b0b      	ldr	r3, [pc, #44]	; (8007e80 <HAL_I2C_Master_Transmit+0x1e4>)
 8007e52:	400b      	ands	r3, r1
 8007e54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2220      	movs	r2, #32
 8007e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	e000      	b.n	8007e74 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007e72:	2302      	movs	r3, #2
  }
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3718      	adds	r7, #24
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	80002000 	.word	0x80002000
 8007e80:	fe00e800 	.word	0xfe00e800

08007e84 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b088      	sub	sp, #32
 8007e88:	af02      	add	r7, sp, #8
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	607a      	str	r2, [r7, #4]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	460b      	mov	r3, r1
 8007e92:	817b      	strh	r3, [r7, #10]
 8007e94:	4613      	mov	r3, r2
 8007e96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b20      	cmp	r3, #32
 8007ea2:	f040 80db 	bne.w	800805c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d101      	bne.n	8007eb4 <HAL_I2C_Master_Receive+0x30>
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	e0d4      	b.n	800805e <HAL_I2C_Master_Receive+0x1da>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007ebc:	f7fa fde2 	bl	8002a84 <HAL_GetTick>
 8007ec0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	2319      	movs	r3, #25
 8007ec8:	2201      	movs	r2, #1
 8007eca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 f8f2 	bl	80080b8 <I2C_WaitOnFlagUntilTimeout>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e0bf      	b.n	800805e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2222      	movs	r2, #34	; 0x22
 8007ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2210      	movs	r2, #16
 8007eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	893a      	ldrh	r2, [r7, #8]
 8007efe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2200      	movs	r2, #0
 8007f04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	2bff      	cmp	r3, #255	; 0xff
 8007f0e:	d90e      	bls.n	8007f2e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	22ff      	movs	r2, #255	; 0xff
 8007f14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f1a:	b2da      	uxtb	r2, r3
 8007f1c:	8979      	ldrh	r1, [r7, #10]
 8007f1e:	4b52      	ldr	r3, [pc, #328]	; (8008068 <HAL_I2C_Master_Receive+0x1e4>)
 8007f20:	9300      	str	r3, [sp, #0]
 8007f22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f000 fae8 	bl	80084fc <I2C_TransferConfig>
 8007f2c:	e06d      	b.n	800800a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	8979      	ldrh	r1, [r7, #10]
 8007f40:	4b49      	ldr	r3, [pc, #292]	; (8008068 <HAL_I2C_Master_Receive+0x1e4>)
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 fad7 	bl	80084fc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007f4e:	e05c      	b.n	800800a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f50:	697a      	ldr	r2, [r7, #20]
 8007f52:	6a39      	ldr	r1, [r7, #32]
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f000 f96b 	bl	8008230 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d001      	beq.n	8007f64 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e07c      	b.n	800805e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6e:	b2d2      	uxtb	r2, r2
 8007f70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f76:	1c5a      	adds	r2, r3, #1
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f80:	3b01      	subs	r3, #1
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d034      	beq.n	800800a <HAL_I2C_Master_Receive+0x186>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d130      	bne.n	800800a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	9300      	str	r3, [sp, #0]
 8007fac:	6a3b      	ldr	r3, [r7, #32]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	2180      	movs	r1, #128	; 0x80
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f000 f880 	bl	80080b8 <I2C_WaitOnFlagUntilTimeout>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d001      	beq.n	8007fc2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e04d      	b.n	800805e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	2bff      	cmp	r3, #255	; 0xff
 8007fca:	d90e      	bls.n	8007fea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	22ff      	movs	r2, #255	; 0xff
 8007fd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fd6:	b2da      	uxtb	r2, r3
 8007fd8:	8979      	ldrh	r1, [r7, #10]
 8007fda:	2300      	movs	r3, #0
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f000 fa8a 	bl	80084fc <I2C_TransferConfig>
 8007fe8:	e00f      	b.n	800800a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	8979      	ldrh	r1, [r7, #10]
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f000 fa79 	bl	80084fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800800e:	b29b      	uxth	r3, r3
 8008010:	2b00      	cmp	r3, #0
 8008012:	d19d      	bne.n	8007f50 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008014:	697a      	ldr	r2, [r7, #20]
 8008016:	6a39      	ldr	r1, [r7, #32]
 8008018:	68f8      	ldr	r0, [r7, #12]
 800801a:	f000 f8cd 	bl	80081b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d001      	beq.n	8008028 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e01a      	b.n	800805e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2220      	movs	r2, #32
 800802e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	6859      	ldr	r1, [r3, #4]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	4b0c      	ldr	r3, [pc, #48]	; (800806c <HAL_I2C_Master_Receive+0x1e8>)
 800803c:	400b      	ands	r3, r1
 800803e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2220      	movs	r2, #32
 8008044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008058:	2300      	movs	r3, #0
 800805a:	e000      	b.n	800805e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800805c:	2302      	movs	r3, #2
  }
}
 800805e:	4618      	mov	r0, r3
 8008060:	3718      	adds	r7, #24
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	80002400 	.word	0x80002400
 800806c:	fe00e800 	.word	0xfe00e800

08008070 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	f003 0302 	and.w	r3, r3, #2
 8008082:	2b02      	cmp	r3, #2
 8008084:	d103      	bne.n	800808e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2200      	movs	r2, #0
 800808c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	f003 0301 	and.w	r3, r3, #1
 8008098:	2b01      	cmp	r3, #1
 800809a:	d007      	beq.n	80080ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699a      	ldr	r2, [r3, #24]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f042 0201 	orr.w	r2, r2, #1
 80080aa:	619a      	str	r2, [r3, #24]
  }
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	603b      	str	r3, [r7, #0]
 80080c4:	4613      	mov	r3, r2
 80080c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080c8:	e022      	b.n	8008110 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080d0:	d01e      	beq.n	8008110 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080d2:	f7fa fcd7 	bl	8002a84 <HAL_GetTick>
 80080d6:	4602      	mov	r2, r0
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d302      	bcc.n	80080e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d113      	bne.n	8008110 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ec:	f043 0220 	orr.w	r2, r3, #32
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e00f      	b.n	8008130 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	699a      	ldr	r2, [r3, #24]
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	4013      	ands	r3, r2
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	429a      	cmp	r2, r3
 800811e:	bf0c      	ite	eq
 8008120:	2301      	moveq	r3, #1
 8008122:	2300      	movne	r3, #0
 8008124:	b2db      	uxtb	r3, r3
 8008126:	461a      	mov	r2, r3
 8008128:	79fb      	ldrb	r3, [r7, #7]
 800812a:	429a      	cmp	r2, r3
 800812c:	d0cd      	beq.n	80080ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008144:	e02c      	b.n	80081a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	68b9      	ldr	r1, [r7, #8]
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f000 f8ea 	bl	8008324 <I2C_IsErrorOccurred>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e02a      	b.n	80081b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008160:	d01e      	beq.n	80081a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008162:	f7fa fc8f 	bl	8002a84 <HAL_GetTick>
 8008166:	4602      	mov	r2, r0
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	1ad3      	subs	r3, r2, r3
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	429a      	cmp	r2, r3
 8008170:	d302      	bcc.n	8008178 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d113      	bne.n	80081a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800817c:	f043 0220 	orr.w	r2, r3, #32
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2220      	movs	r2, #32
 8008188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e007      	b.n	80081b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	f003 0302 	and.w	r3, r3, #2
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d1cb      	bne.n	8008146 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081c4:	e028      	b.n	8008218 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	68b9      	ldr	r1, [r7, #8]
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f000 f8aa 	bl	8008324 <I2C_IsErrorOccurred>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d001      	beq.n	80081da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e026      	b.n	8008228 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081da:	f7fa fc53 	bl	8002a84 <HAL_GetTick>
 80081de:	4602      	mov	r2, r0
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d302      	bcc.n	80081f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d113      	bne.n	8008218 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081f4:	f043 0220 	orr.w	r2, r3, #32
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2220      	movs	r2, #32
 8008200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	e007      	b.n	8008228 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	f003 0320 	and.w	r3, r3, #32
 8008222:	2b20      	cmp	r3, #32
 8008224:	d1cf      	bne.n	80081c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3710      	adds	r7, #16
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800823c:	e064      	b.n	8008308 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	68b9      	ldr	r1, [r7, #8]
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f000 f86e 	bl	8008324 <I2C_IsErrorOccurred>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d001      	beq.n	8008252 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e062      	b.n	8008318 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	f003 0320 	and.w	r3, r3, #32
 800825c:	2b20      	cmp	r3, #32
 800825e:	d138      	bne.n	80082d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	f003 0304 	and.w	r3, r3, #4
 800826a:	2b04      	cmp	r3, #4
 800826c:	d105      	bne.n	800827a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8008276:	2300      	movs	r3, #0
 8008278:	e04e      	b.n	8008318 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	f003 0310 	and.w	r3, r3, #16
 8008284:	2b10      	cmp	r3, #16
 8008286:	d107      	bne.n	8008298 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2210      	movs	r2, #16
 800828e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2204      	movs	r2, #4
 8008294:	645a      	str	r2, [r3, #68]	; 0x44
 8008296:	e002      	b.n	800829e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2220      	movs	r2, #32
 80082a4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6859      	ldr	r1, [r3, #4]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	4b1b      	ldr	r3, [pc, #108]	; (8008320 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80082b2:	400b      	ands	r3, r1
 80082b4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2220      	movs	r2, #32
 80082ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e022      	b.n	8008318 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082d2:	f7fa fbd7 	bl	8002a84 <HAL_GetTick>
 80082d6:	4602      	mov	r2, r0
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d302      	bcc.n	80082e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10f      	bne.n	8008308 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ec:	f043 0220 	orr.w	r2, r3, #32
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2220      	movs	r2, #32
 80082f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e007      	b.n	8008318 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	f003 0304 	and.w	r3, r3, #4
 8008312:	2b04      	cmp	r3, #4
 8008314:	d193      	bne.n	800823e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	fe00e800 	.word	0xfe00e800

08008324 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b08a      	sub	sp, #40	; 0x28
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008330:	2300      	movs	r3, #0
 8008332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800833e:	2300      	movs	r3, #0
 8008340:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	f003 0310 	and.w	r3, r3, #16
 800834c:	2b00      	cmp	r3, #0
 800834e:	d075      	beq.n	800843c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2210      	movs	r2, #16
 8008356:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008358:	e056      	b.n	8008408 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008360:	d052      	beq.n	8008408 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008362:	f7fa fb8f 	bl	8002a84 <HAL_GetTick>
 8008366:	4602      	mov	r2, r0
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	68ba      	ldr	r2, [r7, #8]
 800836e:	429a      	cmp	r2, r3
 8008370:	d302      	bcc.n	8008378 <I2C_IsErrorOccurred+0x54>
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d147      	bne.n	8008408 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008382:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800838a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800839a:	d12e      	bne.n	80083fa <I2C_IsErrorOccurred+0xd6>
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083a2:	d02a      	beq.n	80083fa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80083a4:	7cfb      	ldrb	r3, [r7, #19]
 80083a6:	2b20      	cmp	r3, #32
 80083a8:	d027      	beq.n	80083fa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	685a      	ldr	r2, [r3, #4]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083b8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80083ba:	f7fa fb63 	bl	8002a84 <HAL_GetTick>
 80083be:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80083c0:	e01b      	b.n	80083fa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80083c2:	f7fa fb5f 	bl	8002a84 <HAL_GetTick>
 80083c6:	4602      	mov	r2, r0
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	1ad3      	subs	r3, r2, r3
 80083cc:	2b19      	cmp	r3, #25
 80083ce:	d914      	bls.n	80083fa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083d4:	f043 0220 	orr.w	r2, r3, #32
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2220      	movs	r2, #32
 80083e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	f003 0320 	and.w	r3, r3, #32
 8008404:	2b20      	cmp	r3, #32
 8008406:	d1dc      	bne.n	80083c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	f003 0320 	and.w	r3, r3, #32
 8008412:	2b20      	cmp	r3, #32
 8008414:	d003      	beq.n	800841e <I2C_IsErrorOccurred+0xfa>
 8008416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800841a:	2b00      	cmp	r3, #0
 800841c:	d09d      	beq.n	800835a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800841e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008422:	2b00      	cmp	r3, #0
 8008424:	d103      	bne.n	800842e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2220      	movs	r2, #32
 800842c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800842e:	6a3b      	ldr	r3, [r7, #32]
 8008430:	f043 0304 	orr.w	r3, r3, #4
 8008434:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00b      	beq.n	8008466 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800844e:	6a3b      	ldr	r3, [r7, #32]
 8008450:	f043 0301 	orr.w	r3, r3, #1
 8008454:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800845e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00b      	beq.n	8008488 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	f043 0308 	orr.w	r3, r3, #8
 8008476:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008480:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00b      	beq.n	80084aa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008492:	6a3b      	ldr	r3, [r7, #32]
 8008494:	f043 0302 	orr.w	r3, r3, #2
 8008498:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80084aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d01c      	beq.n	80084ec <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	f7ff fddc 	bl	8008070 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	6859      	ldr	r1, [r3, #4]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	4b0d      	ldr	r3, [pc, #52]	; (80084f8 <I2C_IsErrorOccurred+0x1d4>)
 80084c4:	400b      	ands	r3, r1
 80084c6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084cc:	6a3b      	ldr	r3, [r7, #32]
 80084ce:	431a      	orrs	r2, r3
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2220      	movs	r2, #32
 80084d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80084ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3728      	adds	r7, #40	; 0x28
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	fe00e800 	.word	0xfe00e800

080084fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b087      	sub	sp, #28
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	607b      	str	r3, [r7, #4]
 8008506:	460b      	mov	r3, r1
 8008508:	817b      	strh	r3, [r7, #10]
 800850a:	4613      	mov	r3, r2
 800850c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800850e:	897b      	ldrh	r3, [r7, #10]
 8008510:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008514:	7a7b      	ldrb	r3, [r7, #9]
 8008516:	041b      	lsls	r3, r3, #16
 8008518:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800851c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008522:	6a3b      	ldr	r3, [r7, #32]
 8008524:	4313      	orrs	r3, r2
 8008526:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800852a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	685a      	ldr	r2, [r3, #4]
 8008532:	6a3b      	ldr	r3, [r7, #32]
 8008534:	0d5b      	lsrs	r3, r3, #21
 8008536:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800853a:	4b08      	ldr	r3, [pc, #32]	; (800855c <I2C_TransferConfig+0x60>)
 800853c:	430b      	orrs	r3, r1
 800853e:	43db      	mvns	r3, r3
 8008540:	ea02 0103 	and.w	r1, r2, r3
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	697a      	ldr	r2, [r7, #20]
 800854a:	430a      	orrs	r2, r1
 800854c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800854e:	bf00      	nop
 8008550:	371c      	adds	r7, #28
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	03ff63ff 	.word	0x03ff63ff

08008560 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b20      	cmp	r3, #32
 8008574:	d138      	bne.n	80085e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800857c:	2b01      	cmp	r3, #1
 800857e:	d101      	bne.n	8008584 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008580:	2302      	movs	r3, #2
 8008582:	e032      	b.n	80085ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2224      	movs	r2, #36	; 0x24
 8008590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f022 0201 	bic.w	r2, r2, #1
 80085a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80085b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6819      	ldr	r1, [r3, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	430a      	orrs	r2, r1
 80085c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f042 0201 	orr.w	r2, r2, #1
 80085d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2220      	movs	r2, #32
 80085d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80085e4:	2300      	movs	r3, #0
 80085e6:	e000      	b.n	80085ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80085e8:	2302      	movs	r3, #2
  }
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	370c      	adds	r7, #12
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr

080085f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80085f6:	b480      	push	{r7}
 80085f8:	b085      	sub	sp, #20
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
 80085fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008606:	b2db      	uxtb	r3, r3
 8008608:	2b20      	cmp	r3, #32
 800860a:	d139      	bne.n	8008680 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008612:	2b01      	cmp	r3, #1
 8008614:	d101      	bne.n	800861a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008616:	2302      	movs	r3, #2
 8008618:	e033      	b.n	8008682 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2224      	movs	r2, #36	; 0x24
 8008626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f022 0201 	bic.w	r2, r2, #1
 8008638:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008648:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	021b      	lsls	r3, r3, #8
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	4313      	orrs	r3, r2
 8008652:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f042 0201 	orr.w	r2, r2, #1
 800866a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2220      	movs	r2, #32
 8008670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800867c:	2300      	movs	r3, #0
 800867e:	e000      	b.n	8008682 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008680:	2302      	movs	r3, #2
  }
}
 8008682:	4618      	mov	r0, r3
 8008684:	3714      	adds	r7, #20
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
	...

08008690 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	460b      	mov	r3, r1
 800869a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800869c:	4b18      	ldr	r3, [pc, #96]	; (8008700 <HAL_PWR_EnterSTOPMode+0x70>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f023 0201 	bic.w	r2, r3, #1
 80086a4:	4916      	ldr	r1, [pc, #88]	; (8008700 <HAL_PWR_EnterSTOPMode+0x70>)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 80086ac:	4b14      	ldr	r3, [pc, #80]	; (8008700 <HAL_PWR_EnterSTOPMode+0x70>)
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	4a13      	ldr	r2, [pc, #76]	; (8008700 <HAL_PWR_EnterSTOPMode+0x70>)
 80086b2:	f023 0305 	bic.w	r3, r3, #5
 80086b6:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 80086b8:	4b11      	ldr	r3, [pc, #68]	; (8008700 <HAL_PWR_EnterSTOPMode+0x70>)
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	4a10      	ldr	r2, [pc, #64]	; (8008700 <HAL_PWR_EnterSTOPMode+0x70>)
 80086be:	f023 0302 	bic.w	r3, r3, #2
 80086c2:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80086c4:	4b0f      	ldr	r3, [pc, #60]	; (8008704 <HAL_PWR_EnterSTOPMode+0x74>)
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	4a0e      	ldr	r2, [pc, #56]	; (8008704 <HAL_PWR_EnterSTOPMode+0x74>)
 80086ca:	f043 0304 	orr.w	r3, r3, #4
 80086ce:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80086d0:	f3bf 8f4f 	dsb	sy
}
 80086d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80086d6:	f3bf 8f6f 	isb	sy
}
 80086da:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80086dc:	78fb      	ldrb	r3, [r7, #3]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d101      	bne.n	80086e6 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 80086e2:	bf30      	wfi
 80086e4:	e000      	b.n	80086e8 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 80086e6:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80086e8:	4b06      	ldr	r3, [pc, #24]	; (8008704 <HAL_PWR_EnterSTOPMode+0x74>)
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	4a05      	ldr	r2, [pc, #20]	; (8008704 <HAL_PWR_EnterSTOPMode+0x74>)
 80086ee:	f023 0304 	bic.w	r3, r3, #4
 80086f2:	6113      	str	r3, [r2, #16]
}
 80086f4:	bf00      	nop
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr
 8008700:	58024800 	.word	0x58024800
 8008704:	e000ed00 	.word	0xe000ed00

08008708 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008710:	4b19      	ldr	r3, [pc, #100]	; (8008778 <HAL_PWREx_ConfigSupply+0x70>)
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	f003 0304 	and.w	r3, r3, #4
 8008718:	2b04      	cmp	r3, #4
 800871a:	d00a      	beq.n	8008732 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800871c:	4b16      	ldr	r3, [pc, #88]	; (8008778 <HAL_PWREx_ConfigSupply+0x70>)
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	f003 0307 	and.w	r3, r3, #7
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	429a      	cmp	r2, r3
 8008728:	d001      	beq.n	800872e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e01f      	b.n	800876e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	e01d      	b.n	800876e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008732:	4b11      	ldr	r3, [pc, #68]	; (8008778 <HAL_PWREx_ConfigSupply+0x70>)
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	f023 0207 	bic.w	r2, r3, #7
 800873a:	490f      	ldr	r1, [pc, #60]	; (8008778 <HAL_PWREx_ConfigSupply+0x70>)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4313      	orrs	r3, r2
 8008740:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008742:	f7fa f99f 	bl	8002a84 <HAL_GetTick>
 8008746:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008748:	e009      	b.n	800875e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800874a:	f7fa f99b 	bl	8002a84 <HAL_GetTick>
 800874e:	4602      	mov	r2, r0
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008758:	d901      	bls.n	800875e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e007      	b.n	800876e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800875e:	4b06      	ldr	r3, [pc, #24]	; (8008778 <HAL_PWREx_ConfigSupply+0x70>)
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800876a:	d1ee      	bne.n	800874a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	58024800 	.word	0x58024800

0800877c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b08c      	sub	sp, #48	; 0x30
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d102      	bne.n	8008790 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	f000 bc1d 	b.w	8008fca <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 0301 	and.w	r3, r3, #1
 8008798:	2b00      	cmp	r3, #0
 800879a:	f000 8087 	beq.w	80088ac <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800879e:	4b99      	ldr	r3, [pc, #612]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80087a8:	4b96      	ldr	r3, [pc, #600]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80087aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ac:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80087ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b0:	2b10      	cmp	r3, #16
 80087b2:	d007      	beq.n	80087c4 <HAL_RCC_OscConfig+0x48>
 80087b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b6:	2b18      	cmp	r3, #24
 80087b8:	d110      	bne.n	80087dc <HAL_RCC_OscConfig+0x60>
 80087ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087bc:	f003 0303 	and.w	r3, r3, #3
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d10b      	bne.n	80087dc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087c4:	4b8f      	ldr	r3, [pc, #572]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d06c      	beq.n	80088aa <HAL_RCC_OscConfig+0x12e>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d168      	bne.n	80088aa <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e3f6      	b.n	8008fca <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087e4:	d106      	bne.n	80087f4 <HAL_RCC_OscConfig+0x78>
 80087e6:	4b87      	ldr	r3, [pc, #540]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a86      	ldr	r2, [pc, #536]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80087ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087f0:	6013      	str	r3, [r2, #0]
 80087f2:	e02e      	b.n	8008852 <HAL_RCC_OscConfig+0xd6>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10c      	bne.n	8008816 <HAL_RCC_OscConfig+0x9a>
 80087fc:	4b81      	ldr	r3, [pc, #516]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a80      	ldr	r2, [pc, #512]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008806:	6013      	str	r3, [r2, #0]
 8008808:	4b7e      	ldr	r3, [pc, #504]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a7d      	ldr	r2, [pc, #500]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 800880e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008812:	6013      	str	r3, [r2, #0]
 8008814:	e01d      	b.n	8008852 <HAL_RCC_OscConfig+0xd6>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800881e:	d10c      	bne.n	800883a <HAL_RCC_OscConfig+0xbe>
 8008820:	4b78      	ldr	r3, [pc, #480]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a77      	ldr	r2, [pc, #476]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008826:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800882a:	6013      	str	r3, [r2, #0]
 800882c:	4b75      	ldr	r3, [pc, #468]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a74      	ldr	r2, [pc, #464]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008836:	6013      	str	r3, [r2, #0]
 8008838:	e00b      	b.n	8008852 <HAL_RCC_OscConfig+0xd6>
 800883a:	4b72      	ldr	r3, [pc, #456]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a71      	ldr	r2, [pc, #452]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008844:	6013      	str	r3, [r2, #0]
 8008846:	4b6f      	ldr	r3, [pc, #444]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a6e      	ldr	r2, [pc, #440]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 800884c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008850:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d013      	beq.n	8008882 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800885a:	f7fa f913 	bl	8002a84 <HAL_GetTick>
 800885e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008860:	e008      	b.n	8008874 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008862:	f7fa f90f 	bl	8002a84 <HAL_GetTick>
 8008866:	4602      	mov	r2, r0
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	1ad3      	subs	r3, r2, r3
 800886c:	2b64      	cmp	r3, #100	; 0x64
 800886e:	d901      	bls.n	8008874 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008870:	2303      	movs	r3, #3
 8008872:	e3aa      	b.n	8008fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008874:	4b63      	ldr	r3, [pc, #396]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800887c:	2b00      	cmp	r3, #0
 800887e:	d0f0      	beq.n	8008862 <HAL_RCC_OscConfig+0xe6>
 8008880:	e014      	b.n	80088ac <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008882:	f7fa f8ff 	bl	8002a84 <HAL_GetTick>
 8008886:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008888:	e008      	b.n	800889c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800888a:	f7fa f8fb 	bl	8002a84 <HAL_GetTick>
 800888e:	4602      	mov	r2, r0
 8008890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	2b64      	cmp	r3, #100	; 0x64
 8008896:	d901      	bls.n	800889c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008898:	2303      	movs	r3, #3
 800889a:	e396      	b.n	8008fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800889c:	4b59      	ldr	r3, [pc, #356]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1f0      	bne.n	800888a <HAL_RCC_OscConfig+0x10e>
 80088a8:	e000      	b.n	80088ac <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088aa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 0302 	and.w	r3, r3, #2
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f000 80cb 	beq.w	8008a50 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088ba:	4b52      	ldr	r3, [pc, #328]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088c2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80088c4:	4b4f      	ldr	r3, [pc, #316]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80088c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80088ca:	6a3b      	ldr	r3, [r7, #32]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d007      	beq.n	80088e0 <HAL_RCC_OscConfig+0x164>
 80088d0:	6a3b      	ldr	r3, [r7, #32]
 80088d2:	2b18      	cmp	r3, #24
 80088d4:	d156      	bne.n	8008984 <HAL_RCC_OscConfig+0x208>
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	f003 0303 	and.w	r3, r3, #3
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d151      	bne.n	8008984 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088e0:	4b48      	ldr	r3, [pc, #288]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0304 	and.w	r3, r3, #4
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d005      	beq.n	80088f8 <HAL_RCC_OscConfig+0x17c>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d101      	bne.n	80088f8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	e368      	b.n	8008fca <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80088f8:	4b42      	ldr	r3, [pc, #264]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f023 0219 	bic.w	r2, r3, #25
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	493f      	ldr	r1, [pc, #252]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008906:	4313      	orrs	r3, r2
 8008908:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800890a:	f7fa f8bb 	bl	8002a84 <HAL_GetTick>
 800890e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008910:	e008      	b.n	8008924 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008912:	f7fa f8b7 	bl	8002a84 <HAL_GetTick>
 8008916:	4602      	mov	r2, r0
 8008918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	2b02      	cmp	r3, #2
 800891e:	d901      	bls.n	8008924 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008920:	2303      	movs	r3, #3
 8008922:	e352      	b.n	8008fca <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008924:	4b37      	ldr	r3, [pc, #220]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 0304 	and.w	r3, r3, #4
 800892c:	2b00      	cmp	r3, #0
 800892e:	d0f0      	beq.n	8008912 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008930:	f7fa f8e8 	bl	8002b04 <HAL_GetREVID>
 8008934:	4603      	mov	r3, r0
 8008936:	f241 0203 	movw	r2, #4099	; 0x1003
 800893a:	4293      	cmp	r3, r2
 800893c:	d817      	bhi.n	800896e <HAL_RCC_OscConfig+0x1f2>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	691b      	ldr	r3, [r3, #16]
 8008942:	2b40      	cmp	r3, #64	; 0x40
 8008944:	d108      	bne.n	8008958 <HAL_RCC_OscConfig+0x1dc>
 8008946:	4b2f      	ldr	r3, [pc, #188]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800894e:	4a2d      	ldr	r2, [pc, #180]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008954:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008956:	e07b      	b.n	8008a50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008958:	4b2a      	ldr	r3, [pc, #168]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	031b      	lsls	r3, r3, #12
 8008966:	4927      	ldr	r1, [pc, #156]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008968:	4313      	orrs	r3, r2
 800896a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800896c:	e070      	b.n	8008a50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800896e:	4b25      	ldr	r3, [pc, #148]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	061b      	lsls	r3, r3, #24
 800897c:	4921      	ldr	r1, [pc, #132]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 800897e:	4313      	orrs	r3, r2
 8008980:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008982:	e065      	b.n	8008a50 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d048      	beq.n	8008a1e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800898c:	4b1d      	ldr	r3, [pc, #116]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f023 0219 	bic.w	r2, r3, #25
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	491a      	ldr	r1, [pc, #104]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 800899a:	4313      	orrs	r3, r2
 800899c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800899e:	f7fa f871 	bl	8002a84 <HAL_GetTick>
 80089a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80089a4:	e008      	b.n	80089b8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089a6:	f7fa f86d 	bl	8002a84 <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d901      	bls.n	80089b8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80089b4:	2303      	movs	r3, #3
 80089b6:	e308      	b.n	8008fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80089b8:	4b12      	ldr	r3, [pc, #72]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 0304 	and.w	r3, r3, #4
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d0f0      	beq.n	80089a6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089c4:	f7fa f89e 	bl	8002b04 <HAL_GetREVID>
 80089c8:	4603      	mov	r3, r0
 80089ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d81a      	bhi.n	8008a08 <HAL_RCC_OscConfig+0x28c>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	2b40      	cmp	r3, #64	; 0x40
 80089d8:	d108      	bne.n	80089ec <HAL_RCC_OscConfig+0x270>
 80089da:	4b0a      	ldr	r3, [pc, #40]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80089e2:	4a08      	ldr	r2, [pc, #32]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80089e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089e8:	6053      	str	r3, [r2, #4]
 80089ea:	e031      	b.n	8008a50 <HAL_RCC_OscConfig+0x2d4>
 80089ec:	4b05      	ldr	r3, [pc, #20]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	031b      	lsls	r3, r3, #12
 80089fa:	4902      	ldr	r1, [pc, #8]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80089fc:	4313      	orrs	r3, r2
 80089fe:	604b      	str	r3, [r1, #4]
 8008a00:	e026      	b.n	8008a50 <HAL_RCC_OscConfig+0x2d4>
 8008a02:	bf00      	nop
 8008a04:	58024400 	.word	0x58024400
 8008a08:	4b9a      	ldr	r3, [pc, #616]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	061b      	lsls	r3, r3, #24
 8008a16:	4997      	ldr	r1, [pc, #604]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	604b      	str	r3, [r1, #4]
 8008a1c:	e018      	b.n	8008a50 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a1e:	4b95      	ldr	r3, [pc, #596]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a94      	ldr	r2, [pc, #592]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008a24:	f023 0301 	bic.w	r3, r3, #1
 8008a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a2a:	f7fa f82b 	bl	8002a84 <HAL_GetTick>
 8008a2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008a30:	e008      	b.n	8008a44 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a32:	f7fa f827 	bl	8002a84 <HAL_GetTick>
 8008a36:	4602      	mov	r2, r0
 8008a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d901      	bls.n	8008a44 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e2c2      	b.n	8008fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008a44:	4b8b      	ldr	r3, [pc, #556]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 0304 	and.w	r3, r3, #4
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1f0      	bne.n	8008a32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0310 	and.w	r3, r3, #16
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 80a9 	beq.w	8008bb0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a5e:	4b85      	ldr	r3, [pc, #532]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008a68:	4b82      	ldr	r3, [pc, #520]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a6c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	2b08      	cmp	r3, #8
 8008a72:	d007      	beq.n	8008a84 <HAL_RCC_OscConfig+0x308>
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	2b18      	cmp	r3, #24
 8008a78:	d13a      	bne.n	8008af0 <HAL_RCC_OscConfig+0x374>
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	f003 0303 	and.w	r3, r3, #3
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d135      	bne.n	8008af0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a84:	4b7b      	ldr	r3, [pc, #492]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d005      	beq.n	8008a9c <HAL_RCC_OscConfig+0x320>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	69db      	ldr	r3, [r3, #28]
 8008a94:	2b80      	cmp	r3, #128	; 0x80
 8008a96:	d001      	beq.n	8008a9c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e296      	b.n	8008fca <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a9c:	f7fa f832 	bl	8002b04 <HAL_GetREVID>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	f241 0203 	movw	r2, #4099	; 0x1003
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d817      	bhi.n	8008ada <HAL_RCC_OscConfig+0x35e>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	2b20      	cmp	r3, #32
 8008ab0:	d108      	bne.n	8008ac4 <HAL_RCC_OscConfig+0x348>
 8008ab2:	4b70      	ldr	r3, [pc, #448]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008aba:	4a6e      	ldr	r2, [pc, #440]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008abc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ac0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ac2:	e075      	b.n	8008bb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ac4:	4b6b      	ldr	r3, [pc, #428]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6a1b      	ldr	r3, [r3, #32]
 8008ad0:	069b      	lsls	r3, r3, #26
 8008ad2:	4968      	ldr	r1, [pc, #416]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ad8:	e06a      	b.n	8008bb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ada:	4b66      	ldr	r3, [pc, #408]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	061b      	lsls	r3, r3, #24
 8008ae8:	4962      	ldr	r1, [pc, #392]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008aee:	e05f      	b.n	8008bb0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d042      	beq.n	8008b7e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008af8:	4b5e      	ldr	r3, [pc, #376]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a5d      	ldr	r2, [pc, #372]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b04:	f7f9 ffbe 	bl	8002a84 <HAL_GetTick>
 8008b08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b0a:	e008      	b.n	8008b1e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008b0c:	f7f9 ffba 	bl	8002a84 <HAL_GetTick>
 8008b10:	4602      	mov	r2, r0
 8008b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	d901      	bls.n	8008b1e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e255      	b.n	8008fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b1e:	4b55      	ldr	r3, [pc, #340]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d0f0      	beq.n	8008b0c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b2a:	f7f9 ffeb 	bl	8002b04 <HAL_GetREVID>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	f241 0203 	movw	r2, #4099	; 0x1003
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d817      	bhi.n	8008b68 <HAL_RCC_OscConfig+0x3ec>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6a1b      	ldr	r3, [r3, #32]
 8008b3c:	2b20      	cmp	r3, #32
 8008b3e:	d108      	bne.n	8008b52 <HAL_RCC_OscConfig+0x3d6>
 8008b40:	4b4c      	ldr	r3, [pc, #304]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008b48:	4a4a      	ldr	r2, [pc, #296]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008b4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b4e:	6053      	str	r3, [r2, #4]
 8008b50:	e02e      	b.n	8008bb0 <HAL_RCC_OscConfig+0x434>
 8008b52:	4b48      	ldr	r3, [pc, #288]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	069b      	lsls	r3, r3, #26
 8008b60:	4944      	ldr	r1, [pc, #272]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008b62:	4313      	orrs	r3, r2
 8008b64:	604b      	str	r3, [r1, #4]
 8008b66:	e023      	b.n	8008bb0 <HAL_RCC_OscConfig+0x434>
 8008b68:	4b42      	ldr	r3, [pc, #264]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a1b      	ldr	r3, [r3, #32]
 8008b74:	061b      	lsls	r3, r3, #24
 8008b76:	493f      	ldr	r1, [pc, #252]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	60cb      	str	r3, [r1, #12]
 8008b7c:	e018      	b.n	8008bb0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008b7e:	4b3d      	ldr	r3, [pc, #244]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a3c      	ldr	r2, [pc, #240]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008b84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b8a:	f7f9 ff7b 	bl	8002a84 <HAL_GetTick>
 8008b8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b90:	e008      	b.n	8008ba4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008b92:	f7f9 ff77 	bl	8002a84 <HAL_GetTick>
 8008b96:	4602      	mov	r2, r0
 8008b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9a:	1ad3      	subs	r3, r2, r3
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d901      	bls.n	8008ba4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	e212      	b.n	8008fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008ba4:	4b33      	ldr	r3, [pc, #204]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1f0      	bne.n	8008b92 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 0308 	and.w	r3, r3, #8
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d036      	beq.n	8008c2a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	695b      	ldr	r3, [r3, #20]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d019      	beq.n	8008bf8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008bc4:	4b2b      	ldr	r3, [pc, #172]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bc8:	4a2a      	ldr	r2, [pc, #168]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008bca:	f043 0301 	orr.w	r3, r3, #1
 8008bce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bd0:	f7f9 ff58 	bl	8002a84 <HAL_GetTick>
 8008bd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008bd6:	e008      	b.n	8008bea <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008bd8:	f7f9 ff54 	bl	8002a84 <HAL_GetTick>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	d901      	bls.n	8008bea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e1ef      	b.n	8008fca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008bea:	4b22      	ldr	r3, [pc, #136]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bee:	f003 0302 	and.w	r3, r3, #2
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d0f0      	beq.n	8008bd8 <HAL_RCC_OscConfig+0x45c>
 8008bf6:	e018      	b.n	8008c2a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008bf8:	4b1e      	ldr	r3, [pc, #120]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bfc:	4a1d      	ldr	r2, [pc, #116]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008bfe:	f023 0301 	bic.w	r3, r3, #1
 8008c02:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c04:	f7f9 ff3e 	bl	8002a84 <HAL_GetTick>
 8008c08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008c0a:	e008      	b.n	8008c1e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c0c:	f7f9 ff3a 	bl	8002a84 <HAL_GetTick>
 8008c10:	4602      	mov	r2, r0
 8008c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d901      	bls.n	8008c1e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	e1d5      	b.n	8008fca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008c1e:	4b15      	ldr	r3, [pc, #84]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c22:	f003 0302 	and.w	r3, r3, #2
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d1f0      	bne.n	8008c0c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f003 0320 	and.w	r3, r3, #32
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d039      	beq.n	8008caa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d01c      	beq.n	8008c78 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008c3e:	4b0d      	ldr	r3, [pc, #52]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a0c      	ldr	r2, [pc, #48]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008c44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008c48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008c4a:	f7f9 ff1b 	bl	8002a84 <HAL_GetTick>
 8008c4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008c50:	e008      	b.n	8008c64 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008c52:	f7f9 ff17 	bl	8002a84 <HAL_GetTick>
 8008c56:	4602      	mov	r2, r0
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d901      	bls.n	8008c64 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e1b2      	b.n	8008fca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008c64:	4b03      	ldr	r3, [pc, #12]	; (8008c74 <HAL_RCC_OscConfig+0x4f8>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d0f0      	beq.n	8008c52 <HAL_RCC_OscConfig+0x4d6>
 8008c70:	e01b      	b.n	8008caa <HAL_RCC_OscConfig+0x52e>
 8008c72:	bf00      	nop
 8008c74:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008c78:	4b9b      	ldr	r3, [pc, #620]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a9a      	ldr	r2, [pc, #616]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008c7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008c84:	f7f9 fefe 	bl	8002a84 <HAL_GetTick>
 8008c88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c8a:	e008      	b.n	8008c9e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008c8c:	f7f9 fefa 	bl	8002a84 <HAL_GetTick>
 8008c90:	4602      	mov	r2, r0
 8008c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c94:	1ad3      	subs	r3, r2, r3
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d901      	bls.n	8008c9e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	e195      	b.n	8008fca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c9e:	4b92      	ldr	r3, [pc, #584]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1f0      	bne.n	8008c8c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 0304 	and.w	r3, r3, #4
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f000 8081 	beq.w	8008dba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008cb8:	4b8c      	ldr	r3, [pc, #560]	; (8008eec <HAL_RCC_OscConfig+0x770>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a8b      	ldr	r2, [pc, #556]	; (8008eec <HAL_RCC_OscConfig+0x770>)
 8008cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008cc4:	f7f9 fede 	bl	8002a84 <HAL_GetTick>
 8008cc8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008cca:	e008      	b.n	8008cde <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008ccc:	f7f9 feda 	bl	8002a84 <HAL_GetTick>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	2b64      	cmp	r3, #100	; 0x64
 8008cd8:	d901      	bls.n	8008cde <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e175      	b.n	8008fca <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008cde:	4b83      	ldr	r3, [pc, #524]	; (8008eec <HAL_RCC_OscConfig+0x770>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d0f0      	beq.n	8008ccc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d106      	bne.n	8008d00 <HAL_RCC_OscConfig+0x584>
 8008cf2:	4b7d      	ldr	r3, [pc, #500]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf6:	4a7c      	ldr	r2, [pc, #496]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008cf8:	f043 0301 	orr.w	r3, r3, #1
 8008cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8008cfe:	e02d      	b.n	8008d5c <HAL_RCC_OscConfig+0x5e0>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d10c      	bne.n	8008d22 <HAL_RCC_OscConfig+0x5a6>
 8008d08:	4b77      	ldr	r3, [pc, #476]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d0c:	4a76      	ldr	r2, [pc, #472]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008d0e:	f023 0301 	bic.w	r3, r3, #1
 8008d12:	6713      	str	r3, [r2, #112]	; 0x70
 8008d14:	4b74      	ldr	r3, [pc, #464]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d18:	4a73      	ldr	r2, [pc, #460]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008d1a:	f023 0304 	bic.w	r3, r3, #4
 8008d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8008d20:	e01c      	b.n	8008d5c <HAL_RCC_OscConfig+0x5e0>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	2b05      	cmp	r3, #5
 8008d28:	d10c      	bne.n	8008d44 <HAL_RCC_OscConfig+0x5c8>
 8008d2a:	4b6f      	ldr	r3, [pc, #444]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d2e:	4a6e      	ldr	r2, [pc, #440]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008d30:	f043 0304 	orr.w	r3, r3, #4
 8008d34:	6713      	str	r3, [r2, #112]	; 0x70
 8008d36:	4b6c      	ldr	r3, [pc, #432]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d3a:	4a6b      	ldr	r2, [pc, #428]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008d3c:	f043 0301 	orr.w	r3, r3, #1
 8008d40:	6713      	str	r3, [r2, #112]	; 0x70
 8008d42:	e00b      	b.n	8008d5c <HAL_RCC_OscConfig+0x5e0>
 8008d44:	4b68      	ldr	r3, [pc, #416]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d48:	4a67      	ldr	r2, [pc, #412]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008d4a:	f023 0301 	bic.w	r3, r3, #1
 8008d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8008d50:	4b65      	ldr	r3, [pc, #404]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d54:	4a64      	ldr	r2, [pc, #400]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008d56:	f023 0304 	bic.w	r3, r3, #4
 8008d5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d015      	beq.n	8008d90 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d64:	f7f9 fe8e 	bl	8002a84 <HAL_GetTick>
 8008d68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d6a:	e00a      	b.n	8008d82 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d6c:	f7f9 fe8a 	bl	8002a84 <HAL_GetTick>
 8008d70:	4602      	mov	r2, r0
 8008d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d901      	bls.n	8008d82 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	e123      	b.n	8008fca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d82:	4b59      	ldr	r3, [pc, #356]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d86:	f003 0302 	and.w	r3, r3, #2
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d0ee      	beq.n	8008d6c <HAL_RCC_OscConfig+0x5f0>
 8008d8e:	e014      	b.n	8008dba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d90:	f7f9 fe78 	bl	8002a84 <HAL_GetTick>
 8008d94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d96:	e00a      	b.n	8008dae <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d98:	f7f9 fe74 	bl	8002a84 <HAL_GetTick>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d901      	bls.n	8008dae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008daa:	2303      	movs	r3, #3
 8008dac:	e10d      	b.n	8008fca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008dae:	4b4e      	ldr	r3, [pc, #312]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db2:	f003 0302 	and.w	r3, r3, #2
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1ee      	bne.n	8008d98 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f000 8102 	beq.w	8008fc8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008dc4:	4b48      	ldr	r3, [pc, #288]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dcc:	2b18      	cmp	r3, #24
 8008dce:	f000 80bd 	beq.w	8008f4c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	f040 809e 	bne.w	8008f18 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ddc:	4b42      	ldr	r3, [pc, #264]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a41      	ldr	r2, [pc, #260]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008de2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008de8:	f7f9 fe4c 	bl	8002a84 <HAL_GetTick>
 8008dec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008dee:	e008      	b.n	8008e02 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008df0:	f7f9 fe48 	bl	8002a84 <HAL_GetTick>
 8008df4:	4602      	mov	r2, r0
 8008df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d901      	bls.n	8008e02 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	e0e3      	b.n	8008fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e02:	4b39      	ldr	r3, [pc, #228]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1f0      	bne.n	8008df0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008e0e:	4b36      	ldr	r3, [pc, #216]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e12:	4b37      	ldr	r3, [pc, #220]	; (8008ef0 <HAL_RCC_OscConfig+0x774>)
 8008e14:	4013      	ands	r3, r2
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008e1e:	0112      	lsls	r2, r2, #4
 8008e20:	430a      	orrs	r2, r1
 8008e22:	4931      	ldr	r1, [pc, #196]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008e24:	4313      	orrs	r3, r2
 8008e26:	628b      	str	r3, [r1, #40]	; 0x28
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e36:	3b01      	subs	r3, #1
 8008e38:	025b      	lsls	r3, r3, #9
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	431a      	orrs	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e42:	3b01      	subs	r3, #1
 8008e44:	041b      	lsls	r3, r3, #16
 8008e46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e4a:	431a      	orrs	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e50:	3b01      	subs	r3, #1
 8008e52:	061b      	lsls	r3, r3, #24
 8008e54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e58:	4923      	ldr	r1, [pc, #140]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008e5e:	4b22      	ldr	r3, [pc, #136]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e62:	4a21      	ldr	r2, [pc, #132]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008e64:	f023 0301 	bic.w	r3, r3, #1
 8008e68:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008e6a:	4b1f      	ldr	r3, [pc, #124]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e6e:	4b21      	ldr	r3, [pc, #132]	; (8008ef4 <HAL_RCC_OscConfig+0x778>)
 8008e70:	4013      	ands	r3, r2
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008e76:	00d2      	lsls	r2, r2, #3
 8008e78:	491b      	ldr	r1, [pc, #108]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008e7e:	4b1a      	ldr	r3, [pc, #104]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e82:	f023 020c 	bic.w	r2, r3, #12
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e8a:	4917      	ldr	r1, [pc, #92]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008e90:	4b15      	ldr	r3, [pc, #84]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e94:	f023 0202 	bic.w	r2, r3, #2
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e9c:	4912      	ldr	r1, [pc, #72]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008ea2:	4b11      	ldr	r3, [pc, #68]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea6:	4a10      	ldr	r2, [pc, #64]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008eac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008eae:	4b0e      	ldr	r3, [pc, #56]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb2:	4a0d      	ldr	r2, [pc, #52]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008eba:	4b0b      	ldr	r3, [pc, #44]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ebe:	4a0a      	ldr	r2, [pc, #40]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008ec6:	4b08      	ldr	r3, [pc, #32]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eca:	4a07      	ldr	r2, [pc, #28]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008ecc:	f043 0301 	orr.w	r3, r3, #1
 8008ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ed2:	4b05      	ldr	r3, [pc, #20]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a04      	ldr	r2, [pc, #16]	; (8008ee8 <HAL_RCC_OscConfig+0x76c>)
 8008ed8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ede:	f7f9 fdd1 	bl	8002a84 <HAL_GetTick>
 8008ee2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ee4:	e011      	b.n	8008f0a <HAL_RCC_OscConfig+0x78e>
 8008ee6:	bf00      	nop
 8008ee8:	58024400 	.word	0x58024400
 8008eec:	58024800 	.word	0x58024800
 8008ef0:	fffffc0c 	.word	0xfffffc0c
 8008ef4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ef8:	f7f9 fdc4 	bl	8002a84 <HAL_GetTick>
 8008efc:	4602      	mov	r2, r0
 8008efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d901      	bls.n	8008f0a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008f06:	2303      	movs	r3, #3
 8008f08:	e05f      	b.n	8008fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f0a:	4b32      	ldr	r3, [pc, #200]	; (8008fd4 <HAL_RCC_OscConfig+0x858>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d0f0      	beq.n	8008ef8 <HAL_RCC_OscConfig+0x77c>
 8008f16:	e057      	b.n	8008fc8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f18:	4b2e      	ldr	r3, [pc, #184]	; (8008fd4 <HAL_RCC_OscConfig+0x858>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a2d      	ldr	r2, [pc, #180]	; (8008fd4 <HAL_RCC_OscConfig+0x858>)
 8008f1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f24:	f7f9 fdae 	bl	8002a84 <HAL_GetTick>
 8008f28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008f2a:	e008      	b.n	8008f3e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f2c:	f7f9 fdaa 	bl	8002a84 <HAL_GetTick>
 8008f30:	4602      	mov	r2, r0
 8008f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d901      	bls.n	8008f3e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008f3a:	2303      	movs	r3, #3
 8008f3c:	e045      	b.n	8008fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008f3e:	4b25      	ldr	r3, [pc, #148]	; (8008fd4 <HAL_RCC_OscConfig+0x858>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1f0      	bne.n	8008f2c <HAL_RCC_OscConfig+0x7b0>
 8008f4a:	e03d      	b.n	8008fc8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008f4c:	4b21      	ldr	r3, [pc, #132]	; (8008fd4 <HAL_RCC_OscConfig+0x858>)
 8008f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f50:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008f52:	4b20      	ldr	r3, [pc, #128]	; (8008fd4 <HAL_RCC_OscConfig+0x858>)
 8008f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f56:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d031      	beq.n	8008fc4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	f003 0203 	and.w	r2, r3, #3
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d12a      	bne.n	8008fc4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	091b      	lsrs	r3, r3, #4
 8008f72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d122      	bne.n	8008fc4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f88:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d11a      	bne.n	8008fc4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	0a5b      	lsrs	r3, r3, #9
 8008f92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f9a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d111      	bne.n	8008fc4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	0c1b      	lsrs	r3, r3, #16
 8008fa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d108      	bne.n	8008fc4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	0e1b      	lsrs	r3, r3, #24
 8008fb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fbe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d001      	beq.n	8008fc8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e000      	b.n	8008fca <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3730      	adds	r7, #48	; 0x30
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	58024400 	.word	0x58024400

08008fd8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b086      	sub	sp, #24
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d101      	bne.n	8008fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e19c      	b.n	8009326 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008fec:	4b8a      	ldr	r3, [pc, #552]	; (8009218 <HAL_RCC_ClockConfig+0x240>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 030f 	and.w	r3, r3, #15
 8008ff4:	683a      	ldr	r2, [r7, #0]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d910      	bls.n	800901c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ffa:	4b87      	ldr	r3, [pc, #540]	; (8009218 <HAL_RCC_ClockConfig+0x240>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f023 020f 	bic.w	r2, r3, #15
 8009002:	4985      	ldr	r1, [pc, #532]	; (8009218 <HAL_RCC_ClockConfig+0x240>)
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	4313      	orrs	r3, r2
 8009008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800900a:	4b83      	ldr	r3, [pc, #524]	; (8009218 <HAL_RCC_ClockConfig+0x240>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 030f 	and.w	r3, r3, #15
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	429a      	cmp	r2, r3
 8009016:	d001      	beq.n	800901c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	e184      	b.n	8009326 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 0304 	and.w	r3, r3, #4
 8009024:	2b00      	cmp	r3, #0
 8009026:	d010      	beq.n	800904a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	691a      	ldr	r2, [r3, #16]
 800902c:	4b7b      	ldr	r3, [pc, #492]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 800902e:	699b      	ldr	r3, [r3, #24]
 8009030:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009034:	429a      	cmp	r2, r3
 8009036:	d908      	bls.n	800904a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009038:	4b78      	ldr	r3, [pc, #480]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	4975      	ldr	r1, [pc, #468]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 8009046:	4313      	orrs	r3, r2
 8009048:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f003 0308 	and.w	r3, r3, #8
 8009052:	2b00      	cmp	r3, #0
 8009054:	d010      	beq.n	8009078 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	695a      	ldr	r2, [r3, #20]
 800905a:	4b70      	ldr	r3, [pc, #448]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 800905c:	69db      	ldr	r3, [r3, #28]
 800905e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009062:	429a      	cmp	r2, r3
 8009064:	d908      	bls.n	8009078 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009066:	4b6d      	ldr	r3, [pc, #436]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 8009068:	69db      	ldr	r3, [r3, #28]
 800906a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	695b      	ldr	r3, [r3, #20]
 8009072:	496a      	ldr	r1, [pc, #424]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 8009074:	4313      	orrs	r3, r2
 8009076:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0310 	and.w	r3, r3, #16
 8009080:	2b00      	cmp	r3, #0
 8009082:	d010      	beq.n	80090a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	699a      	ldr	r2, [r3, #24]
 8009088:	4b64      	ldr	r3, [pc, #400]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 800908a:	69db      	ldr	r3, [r3, #28]
 800908c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009090:	429a      	cmp	r2, r3
 8009092:	d908      	bls.n	80090a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009094:	4b61      	ldr	r3, [pc, #388]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 8009096:	69db      	ldr	r3, [r3, #28]
 8009098:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	699b      	ldr	r3, [r3, #24]
 80090a0:	495e      	ldr	r1, [pc, #376]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 80090a2:	4313      	orrs	r3, r2
 80090a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 0320 	and.w	r3, r3, #32
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d010      	beq.n	80090d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	69da      	ldr	r2, [r3, #28]
 80090b6:	4b59      	ldr	r3, [pc, #356]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090be:	429a      	cmp	r2, r3
 80090c0:	d908      	bls.n	80090d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80090c2:	4b56      	ldr	r3, [pc, #344]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 80090c4:	6a1b      	ldr	r3, [r3, #32]
 80090c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	69db      	ldr	r3, [r3, #28]
 80090ce:	4953      	ldr	r1, [pc, #332]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 80090d0:	4313      	orrs	r3, r2
 80090d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 0302 	and.w	r3, r3, #2
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d010      	beq.n	8009102 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	68da      	ldr	r2, [r3, #12]
 80090e4:	4b4d      	ldr	r3, [pc, #308]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 80090e6:	699b      	ldr	r3, [r3, #24]
 80090e8:	f003 030f 	and.w	r3, r3, #15
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d908      	bls.n	8009102 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090f0:	4b4a      	ldr	r3, [pc, #296]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 80090f2:	699b      	ldr	r3, [r3, #24]
 80090f4:	f023 020f 	bic.w	r2, r3, #15
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	4947      	ldr	r1, [pc, #284]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 80090fe:	4313      	orrs	r3, r2
 8009100:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 0301 	and.w	r3, r3, #1
 800910a:	2b00      	cmp	r3, #0
 800910c:	d055      	beq.n	80091ba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800910e:	4b43      	ldr	r3, [pc, #268]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 8009110:	699b      	ldr	r3, [r3, #24]
 8009112:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	4940      	ldr	r1, [pc, #256]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 800911c:	4313      	orrs	r3, r2
 800911e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	2b02      	cmp	r3, #2
 8009126:	d107      	bne.n	8009138 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009128:	4b3c      	ldr	r3, [pc, #240]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009130:	2b00      	cmp	r3, #0
 8009132:	d121      	bne.n	8009178 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	e0f6      	b.n	8009326 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	2b03      	cmp	r3, #3
 800913e:	d107      	bne.n	8009150 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009140:	4b36      	ldr	r3, [pc, #216]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009148:	2b00      	cmp	r3, #0
 800914a:	d115      	bne.n	8009178 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	e0ea      	b.n	8009326 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	2b01      	cmp	r3, #1
 8009156:	d107      	bne.n	8009168 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009158:	4b30      	ldr	r3, [pc, #192]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009160:	2b00      	cmp	r3, #0
 8009162:	d109      	bne.n	8009178 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	e0de      	b.n	8009326 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009168:	4b2c      	ldr	r3, [pc, #176]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f003 0304 	and.w	r3, r3, #4
 8009170:	2b00      	cmp	r3, #0
 8009172:	d101      	bne.n	8009178 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e0d6      	b.n	8009326 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009178:	4b28      	ldr	r3, [pc, #160]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	f023 0207 	bic.w	r2, r3, #7
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	4925      	ldr	r1, [pc, #148]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 8009186:	4313      	orrs	r3, r2
 8009188:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800918a:	f7f9 fc7b 	bl	8002a84 <HAL_GetTick>
 800918e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009190:	e00a      	b.n	80091a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009192:	f7f9 fc77 	bl	8002a84 <HAL_GetTick>
 8009196:	4602      	mov	r2, r0
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	1ad3      	subs	r3, r2, r3
 800919c:	f241 3288 	movw	r2, #5000	; 0x1388
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d901      	bls.n	80091a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80091a4:	2303      	movs	r3, #3
 80091a6:	e0be      	b.n	8009326 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091a8:	4b1c      	ldr	r3, [pc, #112]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 80091aa:	691b      	ldr	r3, [r3, #16]
 80091ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	00db      	lsls	r3, r3, #3
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d1eb      	bne.n	8009192 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f003 0302 	and.w	r3, r3, #2
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d010      	beq.n	80091e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	68da      	ldr	r2, [r3, #12]
 80091ca:	4b14      	ldr	r3, [pc, #80]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	f003 030f 	and.w	r3, r3, #15
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d208      	bcs.n	80091e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091d6:	4b11      	ldr	r3, [pc, #68]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	f023 020f 	bic.w	r2, r3, #15
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	490e      	ldr	r1, [pc, #56]	; (800921c <HAL_RCC_ClockConfig+0x244>)
 80091e4:	4313      	orrs	r3, r2
 80091e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80091e8:	4b0b      	ldr	r3, [pc, #44]	; (8009218 <HAL_RCC_ClockConfig+0x240>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f003 030f 	and.w	r3, r3, #15
 80091f0:	683a      	ldr	r2, [r7, #0]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d214      	bcs.n	8009220 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091f6:	4b08      	ldr	r3, [pc, #32]	; (8009218 <HAL_RCC_ClockConfig+0x240>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f023 020f 	bic.w	r2, r3, #15
 80091fe:	4906      	ldr	r1, [pc, #24]	; (8009218 <HAL_RCC_ClockConfig+0x240>)
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	4313      	orrs	r3, r2
 8009204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009206:	4b04      	ldr	r3, [pc, #16]	; (8009218 <HAL_RCC_ClockConfig+0x240>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f003 030f 	and.w	r3, r3, #15
 800920e:	683a      	ldr	r2, [r7, #0]
 8009210:	429a      	cmp	r2, r3
 8009212:	d005      	beq.n	8009220 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	e086      	b.n	8009326 <HAL_RCC_ClockConfig+0x34e>
 8009218:	52002000 	.word	0x52002000
 800921c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 0304 	and.w	r3, r3, #4
 8009228:	2b00      	cmp	r3, #0
 800922a:	d010      	beq.n	800924e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	691a      	ldr	r2, [r3, #16]
 8009230:	4b3f      	ldr	r3, [pc, #252]	; (8009330 <HAL_RCC_ClockConfig+0x358>)
 8009232:	699b      	ldr	r3, [r3, #24]
 8009234:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009238:	429a      	cmp	r2, r3
 800923a:	d208      	bcs.n	800924e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800923c:	4b3c      	ldr	r3, [pc, #240]	; (8009330 <HAL_RCC_ClockConfig+0x358>)
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	691b      	ldr	r3, [r3, #16]
 8009248:	4939      	ldr	r1, [pc, #228]	; (8009330 <HAL_RCC_ClockConfig+0x358>)
 800924a:	4313      	orrs	r3, r2
 800924c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 0308 	and.w	r3, r3, #8
 8009256:	2b00      	cmp	r3, #0
 8009258:	d010      	beq.n	800927c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	695a      	ldr	r2, [r3, #20]
 800925e:	4b34      	ldr	r3, [pc, #208]	; (8009330 <HAL_RCC_ClockConfig+0x358>)
 8009260:	69db      	ldr	r3, [r3, #28]
 8009262:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009266:	429a      	cmp	r2, r3
 8009268:	d208      	bcs.n	800927c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800926a:	4b31      	ldr	r3, [pc, #196]	; (8009330 <HAL_RCC_ClockConfig+0x358>)
 800926c:	69db      	ldr	r3, [r3, #28]
 800926e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	695b      	ldr	r3, [r3, #20]
 8009276:	492e      	ldr	r1, [pc, #184]	; (8009330 <HAL_RCC_ClockConfig+0x358>)
 8009278:	4313      	orrs	r3, r2
 800927a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f003 0310 	and.w	r3, r3, #16
 8009284:	2b00      	cmp	r3, #0
 8009286:	d010      	beq.n	80092aa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	699a      	ldr	r2, [r3, #24]
 800928c:	4b28      	ldr	r3, [pc, #160]	; (8009330 <HAL_RCC_ClockConfig+0x358>)
 800928e:	69db      	ldr	r3, [r3, #28]
 8009290:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009294:	429a      	cmp	r2, r3
 8009296:	d208      	bcs.n	80092aa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009298:	4b25      	ldr	r3, [pc, #148]	; (8009330 <HAL_RCC_ClockConfig+0x358>)
 800929a:	69db      	ldr	r3, [r3, #28]
 800929c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	699b      	ldr	r3, [r3, #24]
 80092a4:	4922      	ldr	r1, [pc, #136]	; (8009330 <HAL_RCC_ClockConfig+0x358>)
 80092a6:	4313      	orrs	r3, r2
 80092a8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 0320 	and.w	r3, r3, #32
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d010      	beq.n	80092d8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	69da      	ldr	r2, [r3, #28]
 80092ba:	4b1d      	ldr	r3, [pc, #116]	; (8009330 <HAL_RCC_ClockConfig+0x358>)
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d208      	bcs.n	80092d8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80092c6:	4b1a      	ldr	r3, [pc, #104]	; (8009330 <HAL_RCC_ClockConfig+0x358>)
 80092c8:	6a1b      	ldr	r3, [r3, #32]
 80092ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	69db      	ldr	r3, [r3, #28]
 80092d2:	4917      	ldr	r1, [pc, #92]	; (8009330 <HAL_RCC_ClockConfig+0x358>)
 80092d4:	4313      	orrs	r3, r2
 80092d6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80092d8:	f000 f834 	bl	8009344 <HAL_RCC_GetSysClockFreq>
 80092dc:	4602      	mov	r2, r0
 80092de:	4b14      	ldr	r3, [pc, #80]	; (8009330 <HAL_RCC_ClockConfig+0x358>)
 80092e0:	699b      	ldr	r3, [r3, #24]
 80092e2:	0a1b      	lsrs	r3, r3, #8
 80092e4:	f003 030f 	and.w	r3, r3, #15
 80092e8:	4912      	ldr	r1, [pc, #72]	; (8009334 <HAL_RCC_ClockConfig+0x35c>)
 80092ea:	5ccb      	ldrb	r3, [r1, r3]
 80092ec:	f003 031f 	and.w	r3, r3, #31
 80092f0:	fa22 f303 	lsr.w	r3, r2, r3
 80092f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092f6:	4b0e      	ldr	r3, [pc, #56]	; (8009330 <HAL_RCC_ClockConfig+0x358>)
 80092f8:	699b      	ldr	r3, [r3, #24]
 80092fa:	f003 030f 	and.w	r3, r3, #15
 80092fe:	4a0d      	ldr	r2, [pc, #52]	; (8009334 <HAL_RCC_ClockConfig+0x35c>)
 8009300:	5cd3      	ldrb	r3, [r2, r3]
 8009302:	f003 031f 	and.w	r3, r3, #31
 8009306:	693a      	ldr	r2, [r7, #16]
 8009308:	fa22 f303 	lsr.w	r3, r2, r3
 800930c:	4a0a      	ldr	r2, [pc, #40]	; (8009338 <HAL_RCC_ClockConfig+0x360>)
 800930e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009310:	4a0a      	ldr	r2, [pc, #40]	; (800933c <HAL_RCC_ClockConfig+0x364>)
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009316:	4b0a      	ldr	r3, [pc, #40]	; (8009340 <HAL_RCC_ClockConfig+0x368>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4618      	mov	r0, r3
 800931c:	f7f9 fb68 	bl	80029f0 <HAL_InitTick>
 8009320:	4603      	mov	r3, r0
 8009322:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009324:	7bfb      	ldrb	r3, [r7, #15]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3718      	adds	r7, #24
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	58024400 	.word	0x58024400
 8009334:	08010204 	.word	0x08010204
 8009338:	24000028 	.word	0x24000028
 800933c:	24000024 	.word	0x24000024
 8009340:	2400002c 	.word	0x2400002c

08009344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009344:	b480      	push	{r7}
 8009346:	b089      	sub	sp, #36	; 0x24
 8009348:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800934a:	4bb3      	ldr	r3, [pc, #716]	; (8009618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009352:	2b18      	cmp	r3, #24
 8009354:	f200 8155 	bhi.w	8009602 <HAL_RCC_GetSysClockFreq+0x2be>
 8009358:	a201      	add	r2, pc, #4	; (adr r2, 8009360 <HAL_RCC_GetSysClockFreq+0x1c>)
 800935a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935e:	bf00      	nop
 8009360:	080093c5 	.word	0x080093c5
 8009364:	08009603 	.word	0x08009603
 8009368:	08009603 	.word	0x08009603
 800936c:	08009603 	.word	0x08009603
 8009370:	08009603 	.word	0x08009603
 8009374:	08009603 	.word	0x08009603
 8009378:	08009603 	.word	0x08009603
 800937c:	08009603 	.word	0x08009603
 8009380:	080093eb 	.word	0x080093eb
 8009384:	08009603 	.word	0x08009603
 8009388:	08009603 	.word	0x08009603
 800938c:	08009603 	.word	0x08009603
 8009390:	08009603 	.word	0x08009603
 8009394:	08009603 	.word	0x08009603
 8009398:	08009603 	.word	0x08009603
 800939c:	08009603 	.word	0x08009603
 80093a0:	080093f1 	.word	0x080093f1
 80093a4:	08009603 	.word	0x08009603
 80093a8:	08009603 	.word	0x08009603
 80093ac:	08009603 	.word	0x08009603
 80093b0:	08009603 	.word	0x08009603
 80093b4:	08009603 	.word	0x08009603
 80093b8:	08009603 	.word	0x08009603
 80093bc:	08009603 	.word	0x08009603
 80093c0:	080093f7 	.word	0x080093f7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093c4:	4b94      	ldr	r3, [pc, #592]	; (8009618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f003 0320 	and.w	r3, r3, #32
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d009      	beq.n	80093e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093d0:	4b91      	ldr	r3, [pc, #580]	; (8009618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	08db      	lsrs	r3, r3, #3
 80093d6:	f003 0303 	and.w	r3, r3, #3
 80093da:	4a90      	ldr	r2, [pc, #576]	; (800961c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80093dc:	fa22 f303 	lsr.w	r3, r2, r3
 80093e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80093e2:	e111      	b.n	8009608 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80093e4:	4b8d      	ldr	r3, [pc, #564]	; (800961c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80093e6:	61bb      	str	r3, [r7, #24]
    break;
 80093e8:	e10e      	b.n	8009608 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80093ea:	4b8d      	ldr	r3, [pc, #564]	; (8009620 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80093ec:	61bb      	str	r3, [r7, #24]
    break;
 80093ee:	e10b      	b.n	8009608 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80093f0:	4b8c      	ldr	r3, [pc, #560]	; (8009624 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80093f2:	61bb      	str	r3, [r7, #24]
    break;
 80093f4:	e108      	b.n	8009608 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80093f6:	4b88      	ldr	r3, [pc, #544]	; (8009618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093fa:	f003 0303 	and.w	r3, r3, #3
 80093fe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009400:	4b85      	ldr	r3, [pc, #532]	; (8009618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009404:	091b      	lsrs	r3, r3, #4
 8009406:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800940a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800940c:	4b82      	ldr	r3, [pc, #520]	; (8009618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800940e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009410:	f003 0301 	and.w	r3, r3, #1
 8009414:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009416:	4b80      	ldr	r3, [pc, #512]	; (8009618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800941a:	08db      	lsrs	r3, r3, #3
 800941c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	fb02 f303 	mul.w	r3, r2, r3
 8009426:	ee07 3a90 	vmov	s15, r3
 800942a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800942e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	2b00      	cmp	r3, #0
 8009436:	f000 80e1 	beq.w	80095fc <HAL_RCC_GetSysClockFreq+0x2b8>
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	2b02      	cmp	r3, #2
 800943e:	f000 8083 	beq.w	8009548 <HAL_RCC_GetSysClockFreq+0x204>
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	2b02      	cmp	r3, #2
 8009446:	f200 80a1 	bhi.w	800958c <HAL_RCC_GetSysClockFreq+0x248>
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d003      	beq.n	8009458 <HAL_RCC_GetSysClockFreq+0x114>
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	2b01      	cmp	r3, #1
 8009454:	d056      	beq.n	8009504 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009456:	e099      	b.n	800958c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009458:	4b6f      	ldr	r3, [pc, #444]	; (8009618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 0320 	and.w	r3, r3, #32
 8009460:	2b00      	cmp	r3, #0
 8009462:	d02d      	beq.n	80094c0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009464:	4b6c      	ldr	r3, [pc, #432]	; (8009618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	08db      	lsrs	r3, r3, #3
 800946a:	f003 0303 	and.w	r3, r3, #3
 800946e:	4a6b      	ldr	r2, [pc, #428]	; (800961c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009470:	fa22 f303 	lsr.w	r3, r2, r3
 8009474:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	ee07 3a90 	vmov	s15, r3
 800947c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	ee07 3a90 	vmov	s15, r3
 8009486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800948a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800948e:	4b62      	ldr	r3, [pc, #392]	; (8009618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009496:	ee07 3a90 	vmov	s15, r3
 800949a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800949e:	ed97 6a02 	vldr	s12, [r7, #8]
 80094a2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009628 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80094be:	e087      	b.n	80095d0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	ee07 3a90 	vmov	s15, r3
 80094c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ca:	eddf 6a58 	vldr	s13, [pc, #352]	; 800962c <HAL_RCC_GetSysClockFreq+0x2e8>
 80094ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094d2:	4b51      	ldr	r3, [pc, #324]	; (8009618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094da:	ee07 3a90 	vmov	s15, r3
 80094de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80094e6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009628 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009502:	e065      	b.n	80095d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	ee07 3a90 	vmov	s15, r3
 800950a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800950e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009630 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009516:	4b40      	ldr	r3, [pc, #256]	; (8009618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800951a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800951e:	ee07 3a90 	vmov	s15, r3
 8009522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009526:	ed97 6a02 	vldr	s12, [r7, #8]
 800952a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009628 <HAL_RCC_GetSysClockFreq+0x2e4>
 800952e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800953a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800953e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009542:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009546:	e043      	b.n	80095d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	ee07 3a90 	vmov	s15, r3
 800954e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009552:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009634 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800955a:	4b2f      	ldr	r3, [pc, #188]	; (8009618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800955c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800955e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009562:	ee07 3a90 	vmov	s15, r3
 8009566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800956a:	ed97 6a02 	vldr	s12, [r7, #8]
 800956e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009628 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800957a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800957e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009586:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800958a:	e021      	b.n	80095d0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	ee07 3a90 	vmov	s15, r3
 8009592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009596:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009630 <HAL_RCC_GetSysClockFreq+0x2ec>
 800959a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800959e:	4b1e      	ldr	r3, [pc, #120]	; (8009618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095a6:	ee07 3a90 	vmov	s15, r3
 80095aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80095b2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009628 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095ce:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80095d0:	4b11      	ldr	r3, [pc, #68]	; (8009618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d4:	0a5b      	lsrs	r3, r3, #9
 80095d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095da:	3301      	adds	r3, #1
 80095dc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	ee07 3a90 	vmov	s15, r3
 80095e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80095e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80095ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095f4:	ee17 3a90 	vmov	r3, s15
 80095f8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80095fa:	e005      	b.n	8009608 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80095fc:	2300      	movs	r3, #0
 80095fe:	61bb      	str	r3, [r7, #24]
    break;
 8009600:	e002      	b.n	8009608 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009602:	4b07      	ldr	r3, [pc, #28]	; (8009620 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009604:	61bb      	str	r3, [r7, #24]
    break;
 8009606:	bf00      	nop
  }

  return sysclockfreq;
 8009608:	69bb      	ldr	r3, [r7, #24]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3724      	adds	r7, #36	; 0x24
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop
 8009618:	58024400 	.word	0x58024400
 800961c:	03d09000 	.word	0x03d09000
 8009620:	003d0900 	.word	0x003d0900
 8009624:	017d7840 	.word	0x017d7840
 8009628:	46000000 	.word	0x46000000
 800962c:	4c742400 	.word	0x4c742400
 8009630:	4a742400 	.word	0x4a742400
 8009634:	4bbebc20 	.word	0x4bbebc20

08009638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800963e:	f7ff fe81 	bl	8009344 <HAL_RCC_GetSysClockFreq>
 8009642:	4602      	mov	r2, r0
 8009644:	4b10      	ldr	r3, [pc, #64]	; (8009688 <HAL_RCC_GetHCLKFreq+0x50>)
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	0a1b      	lsrs	r3, r3, #8
 800964a:	f003 030f 	and.w	r3, r3, #15
 800964e:	490f      	ldr	r1, [pc, #60]	; (800968c <HAL_RCC_GetHCLKFreq+0x54>)
 8009650:	5ccb      	ldrb	r3, [r1, r3]
 8009652:	f003 031f 	and.w	r3, r3, #31
 8009656:	fa22 f303 	lsr.w	r3, r2, r3
 800965a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800965c:	4b0a      	ldr	r3, [pc, #40]	; (8009688 <HAL_RCC_GetHCLKFreq+0x50>)
 800965e:	699b      	ldr	r3, [r3, #24]
 8009660:	f003 030f 	and.w	r3, r3, #15
 8009664:	4a09      	ldr	r2, [pc, #36]	; (800968c <HAL_RCC_GetHCLKFreq+0x54>)
 8009666:	5cd3      	ldrb	r3, [r2, r3]
 8009668:	f003 031f 	and.w	r3, r3, #31
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	fa22 f303 	lsr.w	r3, r2, r3
 8009672:	4a07      	ldr	r2, [pc, #28]	; (8009690 <HAL_RCC_GetHCLKFreq+0x58>)
 8009674:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009676:	4a07      	ldr	r2, [pc, #28]	; (8009694 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800967c:	4b04      	ldr	r3, [pc, #16]	; (8009690 <HAL_RCC_GetHCLKFreq+0x58>)
 800967e:	681b      	ldr	r3, [r3, #0]
}
 8009680:	4618      	mov	r0, r3
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	58024400 	.word	0x58024400
 800968c:	08010204 	.word	0x08010204
 8009690:	24000028 	.word	0x24000028
 8009694:	24000024 	.word	0x24000024

08009698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800969c:	f7ff ffcc 	bl	8009638 <HAL_RCC_GetHCLKFreq>
 80096a0:	4602      	mov	r2, r0
 80096a2:	4b06      	ldr	r3, [pc, #24]	; (80096bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80096a4:	69db      	ldr	r3, [r3, #28]
 80096a6:	091b      	lsrs	r3, r3, #4
 80096a8:	f003 0307 	and.w	r3, r3, #7
 80096ac:	4904      	ldr	r1, [pc, #16]	; (80096c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80096ae:	5ccb      	ldrb	r3, [r1, r3]
 80096b0:	f003 031f 	and.w	r3, r3, #31
 80096b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	58024400 	.word	0x58024400
 80096c0:	08010204 	.word	0x08010204

080096c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80096c8:	f7ff ffb6 	bl	8009638 <HAL_RCC_GetHCLKFreq>
 80096cc:	4602      	mov	r2, r0
 80096ce:	4b06      	ldr	r3, [pc, #24]	; (80096e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80096d0:	69db      	ldr	r3, [r3, #28]
 80096d2:	0a1b      	lsrs	r3, r3, #8
 80096d4:	f003 0307 	and.w	r3, r3, #7
 80096d8:	4904      	ldr	r1, [pc, #16]	; (80096ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80096da:	5ccb      	ldrb	r3, [r1, r3]
 80096dc:	f003 031f 	and.w	r3, r3, #31
 80096e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	58024400 	.word	0x58024400
 80096ec:	08010204 	.word	0x08010204

080096f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b086      	sub	sp, #24
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80096f8:	2300      	movs	r3, #0
 80096fa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80096fc:	2300      	movs	r3, #0
 80096fe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009708:	2b00      	cmp	r3, #0
 800970a:	d03f      	beq.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009710:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009714:	d02a      	beq.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009716:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800971a:	d824      	bhi.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800971c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009720:	d018      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009722:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009726:	d81e      	bhi.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009728:	2b00      	cmp	r3, #0
 800972a:	d003      	beq.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800972c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009730:	d007      	beq.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009732:	e018      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009734:	4ba3      	ldr	r3, [pc, #652]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009738:	4aa2      	ldr	r2, [pc, #648]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800973a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800973e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009740:	e015      	b.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	3304      	adds	r3, #4
 8009746:	2102      	movs	r1, #2
 8009748:	4618      	mov	r0, r3
 800974a:	f001 fff9 	bl	800b740 <RCCEx_PLL2_Config>
 800974e:	4603      	mov	r3, r0
 8009750:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009752:	e00c      	b.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	3324      	adds	r3, #36	; 0x24
 8009758:	2102      	movs	r1, #2
 800975a:	4618      	mov	r0, r3
 800975c:	f002 f8a2 	bl	800b8a4 <RCCEx_PLL3_Config>
 8009760:	4603      	mov	r3, r0
 8009762:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009764:	e003      	b.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	75fb      	strb	r3, [r7, #23]
      break;
 800976a:	e000      	b.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800976c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800976e:	7dfb      	ldrb	r3, [r7, #23]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d109      	bne.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009774:	4b93      	ldr	r3, [pc, #588]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009778:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009780:	4990      	ldr	r1, [pc, #576]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009782:	4313      	orrs	r3, r2
 8009784:	650b      	str	r3, [r1, #80]	; 0x50
 8009786:	e001      	b.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009788:	7dfb      	ldrb	r3, [r7, #23]
 800978a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009794:	2b00      	cmp	r3, #0
 8009796:	d03d      	beq.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800979c:	2b04      	cmp	r3, #4
 800979e:	d826      	bhi.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80097a0:	a201      	add	r2, pc, #4	; (adr r2, 80097a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80097a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a6:	bf00      	nop
 80097a8:	080097bd 	.word	0x080097bd
 80097ac:	080097cb 	.word	0x080097cb
 80097b0:	080097dd 	.word	0x080097dd
 80097b4:	080097f5 	.word	0x080097f5
 80097b8:	080097f5 	.word	0x080097f5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097bc:	4b81      	ldr	r3, [pc, #516]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c0:	4a80      	ldr	r2, [pc, #512]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80097c8:	e015      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	3304      	adds	r3, #4
 80097ce:	2100      	movs	r1, #0
 80097d0:	4618      	mov	r0, r3
 80097d2:	f001 ffb5 	bl	800b740 <RCCEx_PLL2_Config>
 80097d6:	4603      	mov	r3, r0
 80097d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80097da:	e00c      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	3324      	adds	r3, #36	; 0x24
 80097e0:	2100      	movs	r1, #0
 80097e2:	4618      	mov	r0, r3
 80097e4:	f002 f85e 	bl	800b8a4 <RCCEx_PLL3_Config>
 80097e8:	4603      	mov	r3, r0
 80097ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80097ec:	e003      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	75fb      	strb	r3, [r7, #23]
      break;
 80097f2:	e000      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80097f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097f6:	7dfb      	ldrb	r3, [r7, #23]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d109      	bne.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80097fc:	4b71      	ldr	r3, [pc, #452]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009800:	f023 0207 	bic.w	r2, r3, #7
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009808:	496e      	ldr	r1, [pc, #440]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800980a:	4313      	orrs	r3, r2
 800980c:	650b      	str	r3, [r1, #80]	; 0x50
 800980e:	e001      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009810:	7dfb      	ldrb	r3, [r7, #23]
 8009812:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800981c:	2b00      	cmp	r3, #0
 800981e:	d042      	beq.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009828:	d02b      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800982a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800982e:	d825      	bhi.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009830:	2bc0      	cmp	r3, #192	; 0xc0
 8009832:	d028      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009834:	2bc0      	cmp	r3, #192	; 0xc0
 8009836:	d821      	bhi.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009838:	2b80      	cmp	r3, #128	; 0x80
 800983a:	d016      	beq.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800983c:	2b80      	cmp	r3, #128	; 0x80
 800983e:	d81d      	bhi.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009840:	2b00      	cmp	r3, #0
 8009842:	d002      	beq.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009844:	2b40      	cmp	r3, #64	; 0x40
 8009846:	d007      	beq.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009848:	e018      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800984a:	4b5e      	ldr	r3, [pc, #376]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800984c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984e:	4a5d      	ldr	r2, [pc, #372]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009854:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009856:	e017      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	3304      	adds	r3, #4
 800985c:	2100      	movs	r1, #0
 800985e:	4618      	mov	r0, r3
 8009860:	f001 ff6e 	bl	800b740 <RCCEx_PLL2_Config>
 8009864:	4603      	mov	r3, r0
 8009866:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009868:	e00e      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	3324      	adds	r3, #36	; 0x24
 800986e:	2100      	movs	r1, #0
 8009870:	4618      	mov	r0, r3
 8009872:	f002 f817 	bl	800b8a4 <RCCEx_PLL3_Config>
 8009876:	4603      	mov	r3, r0
 8009878:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800987a:	e005      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	75fb      	strb	r3, [r7, #23]
      break;
 8009880:	e002      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009882:	bf00      	nop
 8009884:	e000      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009886:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009888:	7dfb      	ldrb	r3, [r7, #23]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d109      	bne.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800988e:	4b4d      	ldr	r3, [pc, #308]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009892:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800989a:	494a      	ldr	r1, [pc, #296]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800989c:	4313      	orrs	r3, r2
 800989e:	650b      	str	r3, [r1, #80]	; 0x50
 80098a0:	e001      	b.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098a2:	7dfb      	ldrb	r3, [r7, #23]
 80098a4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d049      	beq.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80098b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80098bc:	d030      	beq.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80098be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80098c2:	d82a      	bhi.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80098c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80098c8:	d02c      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80098ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80098ce:	d824      	bhi.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80098d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098d4:	d018      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80098d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098da:	d81e      	bhi.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d003      	beq.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80098e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098e4:	d007      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80098e6:	e018      	b.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098e8:	4b36      	ldr	r3, [pc, #216]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80098ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ec:	4a35      	ldr	r2, [pc, #212]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80098ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098f4:	e017      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	3304      	adds	r3, #4
 80098fa:	2100      	movs	r1, #0
 80098fc:	4618      	mov	r0, r3
 80098fe:	f001 ff1f 	bl	800b740 <RCCEx_PLL2_Config>
 8009902:	4603      	mov	r3, r0
 8009904:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009906:	e00e      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	3324      	adds	r3, #36	; 0x24
 800990c:	2100      	movs	r1, #0
 800990e:	4618      	mov	r0, r3
 8009910:	f001 ffc8 	bl	800b8a4 <RCCEx_PLL3_Config>
 8009914:	4603      	mov	r3, r0
 8009916:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009918:	e005      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	75fb      	strb	r3, [r7, #23]
      break;
 800991e:	e002      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009920:	bf00      	nop
 8009922:	e000      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009924:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009926:	7dfb      	ldrb	r3, [r7, #23]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10a      	bne.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800992c:	4b25      	ldr	r3, [pc, #148]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800992e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009930:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800993a:	4922      	ldr	r1, [pc, #136]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800993c:	4313      	orrs	r3, r2
 800993e:	658b      	str	r3, [r1, #88]	; 0x58
 8009940:	e001      	b.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009942:	7dfb      	ldrb	r3, [r7, #23]
 8009944:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800994e:	2b00      	cmp	r3, #0
 8009950:	d04b      	beq.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009958:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800995c:	d030      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800995e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009962:	d82a      	bhi.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009964:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009968:	d02e      	beq.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800996a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800996e:	d824      	bhi.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009970:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009974:	d018      	beq.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009976:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800997a:	d81e      	bhi.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800997c:	2b00      	cmp	r3, #0
 800997e:	d003      	beq.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009984:	d007      	beq.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009986:	e018      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009988:	4b0e      	ldr	r3, [pc, #56]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800998a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800998c:	4a0d      	ldr	r2, [pc, #52]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800998e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009992:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009994:	e019      	b.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	3304      	adds	r3, #4
 800999a:	2100      	movs	r1, #0
 800999c:	4618      	mov	r0, r3
 800999e:	f001 fecf 	bl	800b740 <RCCEx_PLL2_Config>
 80099a2:	4603      	mov	r3, r0
 80099a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80099a6:	e010      	b.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	3324      	adds	r3, #36	; 0x24
 80099ac:	2100      	movs	r1, #0
 80099ae:	4618      	mov	r0, r3
 80099b0:	f001 ff78 	bl	800b8a4 <RCCEx_PLL3_Config>
 80099b4:	4603      	mov	r3, r0
 80099b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80099b8:	e007      	b.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80099ba:	2301      	movs	r3, #1
 80099bc:	75fb      	strb	r3, [r7, #23]
      break;
 80099be:	e004      	b.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80099c0:	bf00      	nop
 80099c2:	e002      	b.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80099c4:	58024400 	.word	0x58024400
      break;
 80099c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099ca:	7dfb      	ldrb	r3, [r7, #23]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d10a      	bne.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80099d0:	4b99      	ldr	r3, [pc, #612]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099d4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80099de:	4996      	ldr	r1, [pc, #600]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099e0:	4313      	orrs	r3, r2
 80099e2:	658b      	str	r3, [r1, #88]	; 0x58
 80099e4:	e001      	b.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099e6:	7dfb      	ldrb	r3, [r7, #23]
 80099e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d032      	beq.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099fa:	2b30      	cmp	r3, #48	; 0x30
 80099fc:	d01c      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80099fe:	2b30      	cmp	r3, #48	; 0x30
 8009a00:	d817      	bhi.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009a02:	2b20      	cmp	r3, #32
 8009a04:	d00c      	beq.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8009a06:	2b20      	cmp	r3, #32
 8009a08:	d813      	bhi.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d016      	beq.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8009a0e:	2b10      	cmp	r3, #16
 8009a10:	d10f      	bne.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a12:	4b89      	ldr	r3, [pc, #548]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a16:	4a88      	ldr	r2, [pc, #544]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009a1e:	e00e      	b.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	3304      	adds	r3, #4
 8009a24:	2102      	movs	r1, #2
 8009a26:	4618      	mov	r0, r3
 8009a28:	f001 fe8a 	bl	800b740 <RCCEx_PLL2_Config>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009a30:	e005      	b.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	75fb      	strb	r3, [r7, #23]
      break;
 8009a36:	e002      	b.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009a38:	bf00      	nop
 8009a3a:	e000      	b.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009a3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a3e:	7dfb      	ldrb	r3, [r7, #23]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d109      	bne.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009a44:	4b7c      	ldr	r3, [pc, #496]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a50:	4979      	ldr	r1, [pc, #484]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a52:	4313      	orrs	r3, r2
 8009a54:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009a56:	e001      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a58:	7dfb      	ldrb	r3, [r7, #23]
 8009a5a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d047      	beq.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a70:	d030      	beq.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a76:	d82a      	bhi.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009a78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a7c:	d02c      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009a7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a82:	d824      	bhi.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a88:	d018      	beq.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8009a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a8e:	d81e      	bhi.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d003      	beq.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8009a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a98:	d007      	beq.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8009a9a:	e018      	b.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a9c:	4b66      	ldr	r3, [pc, #408]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa0:	4a65      	ldr	r2, [pc, #404]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009aa6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009aa8:	e017      	b.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	3304      	adds	r3, #4
 8009aae:	2100      	movs	r1, #0
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f001 fe45 	bl	800b740 <RCCEx_PLL2_Config>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009aba:	e00e      	b.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	3324      	adds	r3, #36	; 0x24
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f001 feee 	bl	800b8a4 <RCCEx_PLL3_Config>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009acc:	e005      	b.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ad2:	e002      	b.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009ad4:	bf00      	nop
 8009ad6:	e000      	b.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009ad8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ada:	7dfb      	ldrb	r3, [r7, #23]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d109      	bne.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009ae0:	4b55      	ldr	r3, [pc, #340]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ae4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aec:	4952      	ldr	r1, [pc, #328]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009aee:	4313      	orrs	r3, r2
 8009af0:	650b      	str	r3, [r1, #80]	; 0x50
 8009af2:	e001      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009af4:	7dfb      	ldrb	r3, [r7, #23]
 8009af6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d049      	beq.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b0c:	d02e      	beq.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009b0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b12:	d828      	bhi.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009b14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009b18:	d02a      	beq.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8009b1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009b1e:	d822      	bhi.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009b20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009b24:	d026      	beq.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8009b26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009b2a:	d81c      	bhi.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009b2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b30:	d010      	beq.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009b32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b36:	d816      	bhi.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d01d      	beq.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b40:	d111      	bne.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	3304      	adds	r3, #4
 8009b46:	2101      	movs	r1, #1
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f001 fdf9 	bl	800b740 <RCCEx_PLL2_Config>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009b52:	e012      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	3324      	adds	r3, #36	; 0x24
 8009b58:	2101      	movs	r1, #1
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f001 fea2 	bl	800b8a4 <RCCEx_PLL3_Config>
 8009b60:	4603      	mov	r3, r0
 8009b62:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009b64:	e009      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	75fb      	strb	r3, [r7, #23]
      break;
 8009b6a:	e006      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009b6c:	bf00      	nop
 8009b6e:	e004      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009b70:	bf00      	nop
 8009b72:	e002      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009b74:	bf00      	nop
 8009b76:	e000      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b7a:	7dfb      	ldrb	r3, [r7, #23]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d109      	bne.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009b80:	4b2d      	ldr	r3, [pc, #180]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b84:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b8c:	492a      	ldr	r1, [pc, #168]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	650b      	str	r3, [r1, #80]	; 0x50
 8009b92:	e001      	b.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b94:	7dfb      	ldrb	r3, [r7, #23]
 8009b96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d04d      	beq.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009baa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009bae:	d02e      	beq.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8009bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009bb4:	d828      	bhi.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bba:	d02a      	beq.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bc0:	d822      	bhi.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009bc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009bc6:	d026      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009bc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009bcc:	d81c      	bhi.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009bce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bd2:	d010      	beq.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009bd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bd8:	d816      	bhi.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d01d      	beq.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009bde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009be2:	d111      	bne.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	3304      	adds	r3, #4
 8009be8:	2101      	movs	r1, #1
 8009bea:	4618      	mov	r0, r3
 8009bec:	f001 fda8 	bl	800b740 <RCCEx_PLL2_Config>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009bf4:	e012      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	3324      	adds	r3, #36	; 0x24
 8009bfa:	2101      	movs	r1, #1
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f001 fe51 	bl	800b8a4 <RCCEx_PLL3_Config>
 8009c02:	4603      	mov	r3, r0
 8009c04:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009c06:	e009      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c0c:	e006      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009c0e:	bf00      	nop
 8009c10:	e004      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009c12:	bf00      	nop
 8009c14:	e002      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009c16:	bf00      	nop
 8009c18:	e000      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009c1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c1c:	7dfb      	ldrb	r3, [r7, #23]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10c      	bne.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009c22:	4b05      	ldr	r3, [pc, #20]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c26:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009c30:	4901      	ldr	r1, [pc, #4]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009c32:	4313      	orrs	r3, r2
 8009c34:	658b      	str	r3, [r1, #88]	; 0x58
 8009c36:	e003      	b.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009c38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c3c:	7dfb      	ldrb	r3, [r7, #23]
 8009c3e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d02f      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c54:	d00e      	beq.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8009c56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c5a:	d814      	bhi.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d015      	beq.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8009c60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c64:	d10f      	bne.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c66:	4baf      	ldr	r3, [pc, #700]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6a:	4aae      	ldr	r2, [pc, #696]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009c72:	e00c      	b.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	3304      	adds	r3, #4
 8009c78:	2101      	movs	r1, #1
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f001 fd60 	bl	800b740 <RCCEx_PLL2_Config>
 8009c80:	4603      	mov	r3, r0
 8009c82:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009c84:	e003      	b.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c86:	2301      	movs	r3, #1
 8009c88:	75fb      	strb	r3, [r7, #23]
      break;
 8009c8a:	e000      	b.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8009c8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c8e:	7dfb      	ldrb	r3, [r7, #23]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d109      	bne.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009c94:	4ba3      	ldr	r3, [pc, #652]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c98:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ca0:	49a0      	ldr	r1, [pc, #640]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	650b      	str	r3, [r1, #80]	; 0x50
 8009ca6:	e001      	b.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ca8:	7dfb      	ldrb	r3, [r7, #23]
 8009caa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d032      	beq.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cbc:	2b03      	cmp	r3, #3
 8009cbe:	d81b      	bhi.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009cc0:	a201      	add	r2, pc, #4	; (adr r2, 8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8009cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc6:	bf00      	nop
 8009cc8:	08009cff 	.word	0x08009cff
 8009ccc:	08009cd9 	.word	0x08009cd9
 8009cd0:	08009ce7 	.word	0x08009ce7
 8009cd4:	08009cff 	.word	0x08009cff
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cd8:	4b92      	ldr	r3, [pc, #584]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cdc:	4a91      	ldr	r2, [pc, #580]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ce2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009ce4:	e00c      	b.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	3304      	adds	r3, #4
 8009cea:	2102      	movs	r1, #2
 8009cec:	4618      	mov	r0, r3
 8009cee:	f001 fd27 	bl	800b740 <RCCEx_PLL2_Config>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009cf6:	e003      	b.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8009cfc:	e000      	b.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009cfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d00:	7dfb      	ldrb	r3, [r7, #23]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d109      	bne.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009d06:	4b87      	ldr	r3, [pc, #540]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d0a:	f023 0203 	bic.w	r2, r3, #3
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d12:	4984      	ldr	r1, [pc, #528]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d14:	4313      	orrs	r3, r2
 8009d16:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009d18:	e001      	b.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d1a:	7dfb      	ldrb	r3, [r7, #23]
 8009d1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	f000 8086 	beq.w	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d2c:	4b7e      	ldr	r3, [pc, #504]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a7d      	ldr	r2, [pc, #500]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d38:	f7f8 fea4 	bl	8002a84 <HAL_GetTick>
 8009d3c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d3e:	e009      	b.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d40:	f7f8 fea0 	bl	8002a84 <HAL_GetTick>
 8009d44:	4602      	mov	r2, r0
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	1ad3      	subs	r3, r2, r3
 8009d4a:	2b64      	cmp	r3, #100	; 0x64
 8009d4c:	d902      	bls.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009d4e:	2303      	movs	r3, #3
 8009d50:	75fb      	strb	r3, [r7, #23]
        break;
 8009d52:	e005      	b.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d54:	4b74      	ldr	r3, [pc, #464]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d0ef      	beq.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009d60:	7dfb      	ldrb	r3, [r7, #23]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d166      	bne.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009d66:	4b6f      	ldr	r3, [pc, #444]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d70:	4053      	eors	r3, r2
 8009d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d013      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009d7a:	4b6a      	ldr	r3, [pc, #424]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d82:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009d84:	4b67      	ldr	r3, [pc, #412]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d88:	4a66      	ldr	r2, [pc, #408]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d8e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009d90:	4b64      	ldr	r3, [pc, #400]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d94:	4a63      	ldr	r2, [pc, #396]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d9a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009d9c:	4a61      	ldr	r2, [pc, #388]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dac:	d115      	bne.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dae:	f7f8 fe69 	bl	8002a84 <HAL_GetTick>
 8009db2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009db4:	e00b      	b.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009db6:	f7f8 fe65 	bl	8002a84 <HAL_GetTick>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	1ad3      	subs	r3, r2, r3
 8009dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d902      	bls.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009dc8:	2303      	movs	r3, #3
 8009dca:	75fb      	strb	r3, [r7, #23]
            break;
 8009dcc:	e005      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009dce:	4b55      	ldr	r3, [pc, #340]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dd2:	f003 0302 	and.w	r3, r3, #2
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d0ed      	beq.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009dda:	7dfb      	ldrb	r3, [r7, #23]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d126      	bne.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009dee:	d10d      	bne.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009df0:	4b4c      	ldr	r3, [pc, #304]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009dfe:	0919      	lsrs	r1, r3, #4
 8009e00:	4b4a      	ldr	r3, [pc, #296]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8009e02:	400b      	ands	r3, r1
 8009e04:	4947      	ldr	r1, [pc, #284]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009e06:	4313      	orrs	r3, r2
 8009e08:	610b      	str	r3, [r1, #16]
 8009e0a:	e005      	b.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009e0c:	4b45      	ldr	r3, [pc, #276]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	4a44      	ldr	r2, [pc, #272]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009e12:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009e16:	6113      	str	r3, [r2, #16]
 8009e18:	4b42      	ldr	r3, [pc, #264]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009e1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e26:	493f      	ldr	r1, [pc, #252]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	670b      	str	r3, [r1, #112]	; 0x70
 8009e2c:	e004      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009e2e:	7dfb      	ldrb	r3, [r7, #23]
 8009e30:	75bb      	strb	r3, [r7, #22]
 8009e32:	e001      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e34:	7dfb      	ldrb	r3, [r7, #23]
 8009e36:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f003 0301 	and.w	r3, r3, #1
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	f000 8085 	beq.w	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e4a:	2b28      	cmp	r3, #40	; 0x28
 8009e4c:	d866      	bhi.n	8009f1c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009e4e:	a201      	add	r2, pc, #4	; (adr r2, 8009e54 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e54:	08009f31 	.word	0x08009f31
 8009e58:	08009f1d 	.word	0x08009f1d
 8009e5c:	08009f1d 	.word	0x08009f1d
 8009e60:	08009f1d 	.word	0x08009f1d
 8009e64:	08009f1d 	.word	0x08009f1d
 8009e68:	08009f1d 	.word	0x08009f1d
 8009e6c:	08009f1d 	.word	0x08009f1d
 8009e70:	08009f1d 	.word	0x08009f1d
 8009e74:	08009ef9 	.word	0x08009ef9
 8009e78:	08009f1d 	.word	0x08009f1d
 8009e7c:	08009f1d 	.word	0x08009f1d
 8009e80:	08009f1d 	.word	0x08009f1d
 8009e84:	08009f1d 	.word	0x08009f1d
 8009e88:	08009f1d 	.word	0x08009f1d
 8009e8c:	08009f1d 	.word	0x08009f1d
 8009e90:	08009f1d 	.word	0x08009f1d
 8009e94:	08009f0b 	.word	0x08009f0b
 8009e98:	08009f1d 	.word	0x08009f1d
 8009e9c:	08009f1d 	.word	0x08009f1d
 8009ea0:	08009f1d 	.word	0x08009f1d
 8009ea4:	08009f1d 	.word	0x08009f1d
 8009ea8:	08009f1d 	.word	0x08009f1d
 8009eac:	08009f1d 	.word	0x08009f1d
 8009eb0:	08009f1d 	.word	0x08009f1d
 8009eb4:	08009f31 	.word	0x08009f31
 8009eb8:	08009f1d 	.word	0x08009f1d
 8009ebc:	08009f1d 	.word	0x08009f1d
 8009ec0:	08009f1d 	.word	0x08009f1d
 8009ec4:	08009f1d 	.word	0x08009f1d
 8009ec8:	08009f1d 	.word	0x08009f1d
 8009ecc:	08009f1d 	.word	0x08009f1d
 8009ed0:	08009f1d 	.word	0x08009f1d
 8009ed4:	08009f31 	.word	0x08009f31
 8009ed8:	08009f1d 	.word	0x08009f1d
 8009edc:	08009f1d 	.word	0x08009f1d
 8009ee0:	08009f1d 	.word	0x08009f1d
 8009ee4:	08009f1d 	.word	0x08009f1d
 8009ee8:	08009f1d 	.word	0x08009f1d
 8009eec:	08009f1d 	.word	0x08009f1d
 8009ef0:	08009f1d 	.word	0x08009f1d
 8009ef4:	08009f31 	.word	0x08009f31
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	3304      	adds	r3, #4
 8009efc:	2101      	movs	r1, #1
 8009efe:	4618      	mov	r0, r3
 8009f00:	f001 fc1e 	bl	800b740 <RCCEx_PLL2_Config>
 8009f04:	4603      	mov	r3, r0
 8009f06:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009f08:	e013      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	3324      	adds	r3, #36	; 0x24
 8009f0e:	2101      	movs	r1, #1
 8009f10:	4618      	mov	r0, r3
 8009f12:	f001 fcc7 	bl	800b8a4 <RCCEx_PLL3_Config>
 8009f16:	4603      	mov	r3, r0
 8009f18:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009f1a:	e00a      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8009f20:	e007      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009f22:	bf00      	nop
 8009f24:	58024400 	.word	0x58024400
 8009f28:	58024800 	.word	0x58024800
 8009f2c:	00ffffcf 	.word	0x00ffffcf
      break;
 8009f30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f32:	7dfb      	ldrb	r3, [r7, #23]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d109      	bne.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009f38:	4b96      	ldr	r3, [pc, #600]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f3c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f44:	4993      	ldr	r1, [pc, #588]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009f46:	4313      	orrs	r3, r2
 8009f48:	654b      	str	r3, [r1, #84]	; 0x54
 8009f4a:	e001      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f4c:	7dfb      	ldrb	r3, [r7, #23]
 8009f4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f003 0302 	and.w	r3, r3, #2
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d038      	beq.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f60:	2b05      	cmp	r3, #5
 8009f62:	d821      	bhi.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009f64:	a201      	add	r2, pc, #4	; (adr r2, 8009f6c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6a:	bf00      	nop
 8009f6c:	08009faf 	.word	0x08009faf
 8009f70:	08009f85 	.word	0x08009f85
 8009f74:	08009f97 	.word	0x08009f97
 8009f78:	08009faf 	.word	0x08009faf
 8009f7c:	08009faf 	.word	0x08009faf
 8009f80:	08009faf 	.word	0x08009faf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	3304      	adds	r3, #4
 8009f88:	2101      	movs	r1, #1
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f001 fbd8 	bl	800b740 <RCCEx_PLL2_Config>
 8009f90:	4603      	mov	r3, r0
 8009f92:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009f94:	e00c      	b.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	3324      	adds	r3, #36	; 0x24
 8009f9a:	2101      	movs	r1, #1
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f001 fc81 	bl	800b8a4 <RCCEx_PLL3_Config>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009fa6:	e003      	b.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	75fb      	strb	r3, [r7, #23]
      break;
 8009fac:	e000      	b.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009fae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fb0:	7dfb      	ldrb	r3, [r7, #23]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d109      	bne.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009fb6:	4b77      	ldr	r3, [pc, #476]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fba:	f023 0207 	bic.w	r2, r3, #7
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fc2:	4974      	ldr	r1, [pc, #464]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	654b      	str	r3, [r1, #84]	; 0x54
 8009fc8:	e001      	b.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fca:	7dfb      	ldrb	r3, [r7, #23]
 8009fcc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f003 0304 	and.w	r3, r3, #4
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d03a      	beq.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fe0:	2b05      	cmp	r3, #5
 8009fe2:	d821      	bhi.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009fe4:	a201      	add	r2, pc, #4	; (adr r2, 8009fec <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fea:	bf00      	nop
 8009fec:	0800a02f 	.word	0x0800a02f
 8009ff0:	0800a005 	.word	0x0800a005
 8009ff4:	0800a017 	.word	0x0800a017
 8009ff8:	0800a02f 	.word	0x0800a02f
 8009ffc:	0800a02f 	.word	0x0800a02f
 800a000:	0800a02f 	.word	0x0800a02f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	3304      	adds	r3, #4
 800a008:	2101      	movs	r1, #1
 800a00a:	4618      	mov	r0, r3
 800a00c:	f001 fb98 	bl	800b740 <RCCEx_PLL2_Config>
 800a010:	4603      	mov	r3, r0
 800a012:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a014:	e00c      	b.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	3324      	adds	r3, #36	; 0x24
 800a01a:	2101      	movs	r1, #1
 800a01c:	4618      	mov	r0, r3
 800a01e:	f001 fc41 	bl	800b8a4 <RCCEx_PLL3_Config>
 800a022:	4603      	mov	r3, r0
 800a024:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a026:	e003      	b.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	75fb      	strb	r3, [r7, #23]
      break;
 800a02c:	e000      	b.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800a02e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a030:	7dfb      	ldrb	r3, [r7, #23]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d10a      	bne.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a036:	4b57      	ldr	r3, [pc, #348]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a03a:	f023 0207 	bic.w	r2, r3, #7
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a044:	4953      	ldr	r1, [pc, #332]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a046:	4313      	orrs	r3, r2
 800a048:	658b      	str	r3, [r1, #88]	; 0x58
 800a04a:	e001      	b.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a04c:	7dfb      	ldrb	r3, [r7, #23]
 800a04e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 0320 	and.w	r3, r3, #32
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d04b      	beq.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a062:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a066:	d02e      	beq.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a068:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a06c:	d828      	bhi.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a06e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a072:	d02a      	beq.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a078:	d822      	bhi.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a07a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a07e:	d026      	beq.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a080:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a084:	d81c      	bhi.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a08a:	d010      	beq.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800a08c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a090:	d816      	bhi.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a092:	2b00      	cmp	r3, #0
 800a094:	d01d      	beq.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800a096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a09a:	d111      	bne.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	3304      	adds	r3, #4
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f001 fb4c 	bl	800b740 <RCCEx_PLL2_Config>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a0ac:	e012      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	3324      	adds	r3, #36	; 0x24
 800a0b2:	2102      	movs	r1, #2
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f001 fbf5 	bl	800b8a4 <RCCEx_PLL3_Config>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a0be:	e009      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	75fb      	strb	r3, [r7, #23]
      break;
 800a0c4:	e006      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a0c6:	bf00      	nop
 800a0c8:	e004      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a0ca:	bf00      	nop
 800a0cc:	e002      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a0ce:	bf00      	nop
 800a0d0:	e000      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a0d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0d4:	7dfb      	ldrb	r3, [r7, #23]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d10a      	bne.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a0da:	4b2e      	ldr	r3, [pc, #184]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a0dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0e8:	492a      	ldr	r1, [pc, #168]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	654b      	str	r3, [r1, #84]	; 0x54
 800a0ee:	e001      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0f0:	7dfb      	ldrb	r3, [r7, #23]
 800a0f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d04d      	beq.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a106:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a10a:	d02e      	beq.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a10c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a110:	d828      	bhi.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a116:	d02a      	beq.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a11c:	d822      	bhi.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a11e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a122:	d026      	beq.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a124:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a128:	d81c      	bhi.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a12a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a12e:	d010      	beq.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800a130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a134:	d816      	bhi.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a136:	2b00      	cmp	r3, #0
 800a138:	d01d      	beq.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800a13a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a13e:	d111      	bne.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	3304      	adds	r3, #4
 800a144:	2100      	movs	r1, #0
 800a146:	4618      	mov	r0, r3
 800a148:	f001 fafa 	bl	800b740 <RCCEx_PLL2_Config>
 800a14c:	4603      	mov	r3, r0
 800a14e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a150:	e012      	b.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	3324      	adds	r3, #36	; 0x24
 800a156:	2102      	movs	r1, #2
 800a158:	4618      	mov	r0, r3
 800a15a:	f001 fba3 	bl	800b8a4 <RCCEx_PLL3_Config>
 800a15e:	4603      	mov	r3, r0
 800a160:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a162:	e009      	b.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a164:	2301      	movs	r3, #1
 800a166:	75fb      	strb	r3, [r7, #23]
      break;
 800a168:	e006      	b.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a16a:	bf00      	nop
 800a16c:	e004      	b.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a16e:	bf00      	nop
 800a170:	e002      	b.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a172:	bf00      	nop
 800a174:	e000      	b.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a176:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a178:	7dfb      	ldrb	r3, [r7, #23]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d10c      	bne.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a17e:	4b05      	ldr	r3, [pc, #20]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a182:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a18c:	4901      	ldr	r1, [pc, #4]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a18e:	4313      	orrs	r3, r2
 800a190:	658b      	str	r3, [r1, #88]	; 0x58
 800a192:	e003      	b.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800a194:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a198:	7dfb      	ldrb	r3, [r7, #23]
 800a19a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d04b      	beq.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a1ae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a1b2:	d02e      	beq.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a1b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a1b8:	d828      	bhi.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a1ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1be:	d02a      	beq.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a1c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1c4:	d822      	bhi.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a1c6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a1ca:	d026      	beq.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800a1cc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a1d0:	d81c      	bhi.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a1d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1d6:	d010      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800a1d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1dc:	d816      	bhi.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d01d      	beq.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800a1e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1e6:	d111      	bne.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	3304      	adds	r3, #4
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f001 faa6 	bl	800b740 <RCCEx_PLL2_Config>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a1f8:	e012      	b.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	3324      	adds	r3, #36	; 0x24
 800a1fe:	2102      	movs	r1, #2
 800a200:	4618      	mov	r0, r3
 800a202:	f001 fb4f 	bl	800b8a4 <RCCEx_PLL3_Config>
 800a206:	4603      	mov	r3, r0
 800a208:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a20a:	e009      	b.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	75fb      	strb	r3, [r7, #23]
      break;
 800a210:	e006      	b.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a212:	bf00      	nop
 800a214:	e004      	b.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a216:	bf00      	nop
 800a218:	e002      	b.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a21a:	bf00      	nop
 800a21c:	e000      	b.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a21e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a220:	7dfb      	ldrb	r3, [r7, #23]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10a      	bne.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a226:	4b9d      	ldr	r3, [pc, #628]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a22a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a234:	4999      	ldr	r1, [pc, #612]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a236:	4313      	orrs	r3, r2
 800a238:	658b      	str	r3, [r1, #88]	; 0x58
 800a23a:	e001      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a23c:	7dfb      	ldrb	r3, [r7, #23]
 800a23e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f003 0308 	and.w	r3, r3, #8
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d01a      	beq.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a256:	d10a      	bne.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	3324      	adds	r3, #36	; 0x24
 800a25c:	2102      	movs	r1, #2
 800a25e:	4618      	mov	r0, r3
 800a260:	f001 fb20 	bl	800b8a4 <RCCEx_PLL3_Config>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d001      	beq.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a26e:	4b8b      	ldr	r3, [pc, #556]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a272:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a27c:	4987      	ldr	r1, [pc, #540]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a27e:	4313      	orrs	r3, r2
 800a280:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f003 0310 	and.w	r3, r3, #16
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d01a      	beq.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a298:	d10a      	bne.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	3324      	adds	r3, #36	; 0x24
 800a29e:	2102      	movs	r1, #2
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f001 faff 	bl	800b8a4 <RCCEx_PLL3_Config>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d001      	beq.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a2b0:	4b7a      	ldr	r3, [pc, #488]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a2b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a2be:	4977      	ldr	r1, [pc, #476]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d034      	beq.n	800a33a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a2d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2da:	d01d      	beq.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800a2dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2e0:	d817      	bhi.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d003      	beq.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a2e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2ea:	d009      	beq.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800a2ec:	e011      	b.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	3304      	adds	r3, #4
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f001 fa23 	bl	800b740 <RCCEx_PLL2_Config>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a2fe:	e00c      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	3324      	adds	r3, #36	; 0x24
 800a304:	2102      	movs	r1, #2
 800a306:	4618      	mov	r0, r3
 800a308:	f001 facc 	bl	800b8a4 <RCCEx_PLL3_Config>
 800a30c:	4603      	mov	r3, r0
 800a30e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a310:	e003      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	75fb      	strb	r3, [r7, #23]
      break;
 800a316:	e000      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800a318:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a31a:	7dfb      	ldrb	r3, [r7, #23]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10a      	bne.n	800a336 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a320:	4b5e      	ldr	r3, [pc, #376]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a324:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a32e:	495b      	ldr	r1, [pc, #364]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a330:	4313      	orrs	r3, r2
 800a332:	658b      	str	r3, [r1, #88]	; 0x58
 800a334:	e001      	b.n	800a33a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a336:	7dfb      	ldrb	r3, [r7, #23]
 800a338:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a342:	2b00      	cmp	r3, #0
 800a344:	d033      	beq.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a34c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a350:	d01c      	beq.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800a352:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a356:	d816      	bhi.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800a358:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a35c:	d003      	beq.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800a35e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a362:	d007      	beq.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800a364:	e00f      	b.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a366:	4b4d      	ldr	r3, [pc, #308]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a36a:	4a4c      	ldr	r2, [pc, #304]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a36c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a370:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a372:	e00c      	b.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	3324      	adds	r3, #36	; 0x24
 800a378:	2101      	movs	r1, #1
 800a37a:	4618      	mov	r0, r3
 800a37c:	f001 fa92 	bl	800b8a4 <RCCEx_PLL3_Config>
 800a380:	4603      	mov	r3, r0
 800a382:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a384:	e003      	b.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	75fb      	strb	r3, [r7, #23]
      break;
 800a38a:	e000      	b.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800a38c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a38e:	7dfb      	ldrb	r3, [r7, #23]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d10a      	bne.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a394:	4b41      	ldr	r3, [pc, #260]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a398:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3a2:	493e      	ldr	r1, [pc, #248]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	654b      	str	r3, [r1, #84]	; 0x54
 800a3a8:	e001      	b.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3aa:	7dfb      	ldrb	r3, [r7, #23]
 800a3ac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d029      	beq.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d003      	beq.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800a3c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3c6:	d007      	beq.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800a3c8:	e00f      	b.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3ca:	4b34      	ldr	r3, [pc, #208]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ce:	4a33      	ldr	r2, [pc, #204]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a3d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a3d6:	e00b      	b.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	3304      	adds	r3, #4
 800a3dc:	2102      	movs	r1, #2
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f001 f9ae 	bl	800b740 <RCCEx_PLL2_Config>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a3e8:	e002      	b.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	75fb      	strb	r3, [r7, #23]
      break;
 800a3ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3f0:	7dfb      	ldrb	r3, [r7, #23]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d109      	bne.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a3f6:	4b29      	ldr	r3, [pc, #164]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a3f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a402:	4926      	ldr	r1, [pc, #152]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a404:	4313      	orrs	r3, r2
 800a406:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a408:	e001      	b.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a40a:	7dfb      	ldrb	r3, [r7, #23]
 800a40c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00a      	beq.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	3324      	adds	r3, #36	; 0x24
 800a41e:	2102      	movs	r1, #2
 800a420:	4618      	mov	r0, r3
 800a422:	f001 fa3f 	bl	800b8a4 <RCCEx_PLL3_Config>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d001      	beq.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d033      	beq.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a440:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a444:	d017      	beq.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a446:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a44a:	d811      	bhi.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a44c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a450:	d013      	beq.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a456:	d80b      	bhi.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d010      	beq.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800a45c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a460:	d106      	bne.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a462:	4b0e      	ldr	r3, [pc, #56]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a466:	4a0d      	ldr	r2, [pc, #52]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a46c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a46e:	e007      	b.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	75fb      	strb	r3, [r7, #23]
      break;
 800a474:	e004      	b.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a476:	bf00      	nop
 800a478:	e002      	b.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a47a:	bf00      	nop
 800a47c:	e000      	b.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a47e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a480:	7dfb      	ldrb	r3, [r7, #23]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10c      	bne.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a486:	4b05      	ldr	r3, [pc, #20]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a48a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a492:	4902      	ldr	r1, [pc, #8]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a494:	4313      	orrs	r3, r2
 800a496:	654b      	str	r3, [r1, #84]	; 0x54
 800a498:	e004      	b.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800a49a:	bf00      	nop
 800a49c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4a0:	7dfb      	ldrb	r3, [r7, #23]
 800a4a2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d008      	beq.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a4b0:	4b31      	ldr	r3, [pc, #196]	; (800a578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4bc:	492e      	ldr	r1, [pc, #184]	; (800a578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d009      	beq.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a4ce:	4b2a      	ldr	r3, [pc, #168]	; (800a578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a4dc:	4926      	ldr	r1, [pc, #152]	; (800a578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d008      	beq.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a4ee:	4b22      	ldr	r3, [pc, #136]	; (800a578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4fa:	491f      	ldr	r1, [pc, #124]	; (800a578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00d      	beq.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a50c:	4b1a      	ldr	r3, [pc, #104]	; (800a578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	4a19      	ldr	r2, [pc, #100]	; (800a578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a512:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a516:	6113      	str	r3, [r2, #16]
 800a518:	4b17      	ldr	r3, [pc, #92]	; (800a578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a51a:	691a      	ldr	r2, [r3, #16]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a522:	4915      	ldr	r1, [pc, #84]	; (800a578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a524:	4313      	orrs	r3, r2
 800a526:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	da08      	bge.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a530:	4b11      	ldr	r3, [pc, #68]	; (800a578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a534:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a53c:	490e      	ldr	r1, [pc, #56]	; (800a578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a53e:	4313      	orrs	r3, r2
 800a540:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d009      	beq.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a54e:	4b0a      	ldr	r3, [pc, #40]	; (800a578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a552:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a55c:	4906      	ldr	r1, [pc, #24]	; (800a578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a55e:	4313      	orrs	r3, r2
 800a560:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a562:	7dbb      	ldrb	r3, [r7, #22]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d101      	bne.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800a568:	2300      	movs	r3, #0
 800a56a:	e000      	b.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800a56c:	2301      	movs	r3, #1
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3718      	adds	r7, #24
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	58024400 	.word	0x58024400

0800a57c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b090      	sub	sp, #64	; 0x40
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a58a:	f040 8095 	bne.w	800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a58e:	4b97      	ldr	r3, [pc, #604]	; (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a592:	f003 0307 	and.w	r3, r3, #7
 800a596:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59a:	2b04      	cmp	r3, #4
 800a59c:	f200 8088 	bhi.w	800a6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a5a0:	a201      	add	r2, pc, #4	; (adr r2, 800a5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a6:	bf00      	nop
 800a5a8:	0800a5bd 	.word	0x0800a5bd
 800a5ac:	0800a5e5 	.word	0x0800a5e5
 800a5b0:	0800a60d 	.word	0x0800a60d
 800a5b4:	0800a6a9 	.word	0x0800a6a9
 800a5b8:	0800a635 	.word	0x0800a635
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5bc:	4b8b      	ldr	r3, [pc, #556]	; (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5c8:	d108      	bne.n	800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f000 ff64 	bl	800b49c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5d8:	f000 bc94 	b.w	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5e0:	f000 bc90 	b.w	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5e4:	4b81      	ldr	r3, [pc, #516]	; (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5f0:	d108      	bne.n	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5f2:	f107 0318 	add.w	r3, r7, #24
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f000 fca8 	bl	800af4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a600:	f000 bc80 	b.w	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a604:	2300      	movs	r3, #0
 800a606:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a608:	f000 bc7c 	b.w	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a60c:	4b77      	ldr	r3, [pc, #476]	; (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a614:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a618:	d108      	bne.n	800a62c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a61a:	f107 030c 	add.w	r3, r7, #12
 800a61e:	4618      	mov	r0, r3
 800a620:	f000 fde8 	bl	800b1f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a628:	f000 bc6c 	b.w	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a62c:	2300      	movs	r3, #0
 800a62e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a630:	f000 bc68 	b.w	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a634:	4b6d      	ldr	r3, [pc, #436]	; (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a638:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a63c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a63e:	4b6b      	ldr	r3, [pc, #428]	; (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f003 0304 	and.w	r3, r3, #4
 800a646:	2b04      	cmp	r3, #4
 800a648:	d10c      	bne.n	800a664 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a64a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d109      	bne.n	800a664 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a650:	4b66      	ldr	r3, [pc, #408]	; (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	08db      	lsrs	r3, r3, #3
 800a656:	f003 0303 	and.w	r3, r3, #3
 800a65a:	4a65      	ldr	r2, [pc, #404]	; (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a65c:	fa22 f303 	lsr.w	r3, r2, r3
 800a660:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a662:	e01f      	b.n	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a664:	4b61      	ldr	r3, [pc, #388]	; (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a66c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a670:	d106      	bne.n	800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a674:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a678:	d102      	bne.n	800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a67a:	4b5e      	ldr	r3, [pc, #376]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a67c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a67e:	e011      	b.n	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a680:	4b5a      	ldr	r3, [pc, #360]	; (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a68c:	d106      	bne.n	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a68e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a694:	d102      	bne.n	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a696:	4b58      	ldr	r3, [pc, #352]	; (800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a698:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a69a:	e003      	b.n	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a69c:	2300      	movs	r3, #0
 800a69e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a6a0:	f000 bc30 	b.w	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a6a4:	f000 bc2e 	b.w	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a6a8:	4b54      	ldr	r3, [pc, #336]	; (800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6ac:	f000 bc2a 	b.w	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6b4:	f000 bc26 	b.w	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6be:	f040 809f 	bne.w	800a800 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a6c2:	4b4a      	ldr	r3, [pc, #296]	; (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a6c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6c6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a6ca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6d2:	d04d      	beq.n	800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6da:	f200 8084 	bhi.w	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e0:	2bc0      	cmp	r3, #192	; 0xc0
 800a6e2:	d07d      	beq.n	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e6:	2bc0      	cmp	r3, #192	; 0xc0
 800a6e8:	d87d      	bhi.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ec:	2b80      	cmp	r3, #128	; 0x80
 800a6ee:	d02d      	beq.n	800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f2:	2b80      	cmp	r3, #128	; 0x80
 800a6f4:	d877      	bhi.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d003      	beq.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fe:	2b40      	cmp	r3, #64	; 0x40
 800a700:	d012      	beq.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a702:	e070      	b.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a704:	4b39      	ldr	r3, [pc, #228]	; (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a70c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a710:	d107      	bne.n	800a722 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a716:	4618      	mov	r0, r3
 800a718:	f000 fec0 	bl	800b49c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a720:	e3f0      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a722:	2300      	movs	r3, #0
 800a724:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a726:	e3ed      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a728:	4b30      	ldr	r3, [pc, #192]	; (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a730:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a734:	d107      	bne.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a736:	f107 0318 	add.w	r3, r7, #24
 800a73a:	4618      	mov	r0, r3
 800a73c:	f000 fc06 	bl	800af4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a740:	69bb      	ldr	r3, [r7, #24]
 800a742:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a744:	e3de      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a746:	2300      	movs	r3, #0
 800a748:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a74a:	e3db      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a74c:	4b27      	ldr	r3, [pc, #156]	; (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a758:	d107      	bne.n	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a75a:	f107 030c 	add.w	r3, r7, #12
 800a75e:	4618      	mov	r0, r3
 800a760:	f000 fd48 	bl	800b1f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a768:	e3cc      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a76a:	2300      	movs	r3, #0
 800a76c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a76e:	e3c9      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a770:	4b1e      	ldr	r3, [pc, #120]	; (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a774:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a778:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a77a:	4b1c      	ldr	r3, [pc, #112]	; (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f003 0304 	and.w	r3, r3, #4
 800a782:	2b04      	cmp	r3, #4
 800a784:	d10c      	bne.n	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d109      	bne.n	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a78c:	4b17      	ldr	r3, [pc, #92]	; (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	08db      	lsrs	r3, r3, #3
 800a792:	f003 0303 	and.w	r3, r3, #3
 800a796:	4a16      	ldr	r2, [pc, #88]	; (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a798:	fa22 f303 	lsr.w	r3, r2, r3
 800a79c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a79e:	e01e      	b.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7a0:	4b12      	ldr	r3, [pc, #72]	; (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7ac:	d106      	bne.n	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7b4:	d102      	bne.n	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a7b6:	4b0f      	ldr	r3, [pc, #60]	; (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a7b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7ba:	e010      	b.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a7bc:	4b0b      	ldr	r3, [pc, #44]	; (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7c8:	d106      	bne.n	800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a7ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7d0:	d102      	bne.n	800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a7d2:	4b09      	ldr	r3, [pc, #36]	; (800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7d6:	e002      	b.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a7dc:	e392      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a7de:	e391      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a7e0:	4b06      	ldr	r3, [pc, #24]	; (800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7e4:	e38e      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7ea:	e38b      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a7ec:	58024400 	.word	0x58024400
 800a7f0:	03d09000 	.word	0x03d09000
 800a7f4:	003d0900 	.word	0x003d0900
 800a7f8:	017d7840 	.word	0x017d7840
 800a7fc:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a806:	f040 809c 	bne.w	800a942 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a80a:	4b9d      	ldr	r3, [pc, #628]	; (800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a80c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a80e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a812:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a816:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a81a:	d054      	beq.n	800a8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800a81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a822:	f200 808b 	bhi.w	800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a828:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a82c:	f000 8083 	beq.w	800a936 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800a830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a832:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a836:	f200 8081 	bhi.w	800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a840:	d02f      	beq.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800a842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a848:	d878      	bhi.n	800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d004      	beq.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800a850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a852:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a856:	d012      	beq.n	800a87e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800a858:	e070      	b.n	800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a85a:	4b89      	ldr	r3, [pc, #548]	; (800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a862:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a866:	d107      	bne.n	800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a86c:	4618      	mov	r0, r3
 800a86e:	f000 fe15 	bl	800b49c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a874:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a876:	e345      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a878:	2300      	movs	r3, #0
 800a87a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a87c:	e342      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a87e:	4b80      	ldr	r3, [pc, #512]	; (800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a886:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a88a:	d107      	bne.n	800a89c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a88c:	f107 0318 	add.w	r3, r7, #24
 800a890:	4618      	mov	r0, r3
 800a892:	f000 fb5b 	bl	800af4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a89a:	e333      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a89c:	2300      	movs	r3, #0
 800a89e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8a0:	e330      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8a2:	4b77      	ldr	r3, [pc, #476]	; (800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8ae:	d107      	bne.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8b0:	f107 030c 	add.w	r3, r7, #12
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f000 fc9d 	bl	800b1f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a8be:	e321      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8c4:	e31e      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a8c6:	4b6e      	ldr	r3, [pc, #440]	; (800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a8ce:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8d0:	4b6b      	ldr	r3, [pc, #428]	; (800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f003 0304 	and.w	r3, r3, #4
 800a8d8:	2b04      	cmp	r3, #4
 800a8da:	d10c      	bne.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800a8dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d109      	bne.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a8e2:	4b67      	ldr	r3, [pc, #412]	; (800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	08db      	lsrs	r3, r3, #3
 800a8e8:	f003 0303 	and.w	r3, r3, #3
 800a8ec:	4a65      	ldr	r2, [pc, #404]	; (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a8ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a8f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8f4:	e01e      	b.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8f6:	4b62      	ldr	r3, [pc, #392]	; (800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a902:	d106      	bne.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a906:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a90a:	d102      	bne.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a90c:	4b5e      	ldr	r3, [pc, #376]	; (800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a90e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a910:	e010      	b.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a912:	4b5b      	ldr	r3, [pc, #364]	; (800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a91a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a91e:	d106      	bne.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a922:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a926:	d102      	bne.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a928:	4b58      	ldr	r3, [pc, #352]	; (800aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a92a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a92c:	e002      	b.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a92e:	2300      	movs	r3, #0
 800a930:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a932:	e2e7      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a934:	e2e6      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a936:	4b56      	ldr	r3, [pc, #344]	; (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a938:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a93a:	e2e3      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a93c:	2300      	movs	r3, #0
 800a93e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a940:	e2e0      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a948:	f040 80a7 	bne.w	800aa9a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a94c:	4b4c      	ldr	r3, [pc, #304]	; (800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a94e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a950:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a954:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a958:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a95c:	d055      	beq.n	800aa0a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a960:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a964:	f200 8096 	bhi.w	800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a96e:	f000 8084 	beq.w	800aa7a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a974:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a978:	f200 808c 	bhi.w	800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a982:	d030      	beq.n	800a9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a986:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a98a:	f200 8083 	bhi.w	800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a990:	2b00      	cmp	r3, #0
 800a992:	d004      	beq.n	800a99e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a996:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a99a:	d012      	beq.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a99c:	e07a      	b.n	800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a99e:	4b38      	ldr	r3, [pc, #224]	; (800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9aa:	d107      	bne.n	800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f000 fd73 	bl	800b49c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a9ba:	e2a3      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9c0:	e2a0      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9c2:	4b2f      	ldr	r3, [pc, #188]	; (800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9ce:	d107      	bne.n	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9d0:	f107 0318 	add.w	r3, r7, #24
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f000 fab9 	bl	800af4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a9de:	e291      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9e4:	e28e      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9e6:	4b26      	ldr	r3, [pc, #152]	; (800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9f2:	d107      	bne.n	800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9f4:	f107 030c 	add.w	r3, r7, #12
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f000 fbfb 	bl	800b1f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aa02:	e27f      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aa04:	2300      	movs	r3, #0
 800aa06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa08:	e27c      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800aa0a:	4b1d      	ldr	r3, [pc, #116]	; (800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800aa0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa12:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa14:	4b1a      	ldr	r3, [pc, #104]	; (800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f003 0304 	and.w	r3, r3, #4
 800aa1c:	2b04      	cmp	r3, #4
 800aa1e:	d10c      	bne.n	800aa3a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800aa20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d109      	bne.n	800aa3a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa26:	4b16      	ldr	r3, [pc, #88]	; (800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	08db      	lsrs	r3, r3, #3
 800aa2c:	f003 0303 	and.w	r3, r3, #3
 800aa30:	4a14      	ldr	r2, [pc, #80]	; (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800aa32:	fa22 f303 	lsr.w	r3, r2, r3
 800aa36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa38:	e01e      	b.n	800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa3a:	4b11      	ldr	r3, [pc, #68]	; (800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa46:	d106      	bne.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800aa48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa4e:	d102      	bne.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800aa50:	4b0d      	ldr	r3, [pc, #52]	; (800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800aa52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa54:	e010      	b.n	800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa56:	4b0a      	ldr	r3, [pc, #40]	; (800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa62:	d106      	bne.n	800aa72 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800aa64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa6a:	d102      	bne.n	800aa72 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aa6c:	4b07      	ldr	r3, [pc, #28]	; (800aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800aa6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa70:	e002      	b.n	800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800aa72:	2300      	movs	r3, #0
 800aa74:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800aa76:	e245      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800aa78:	e244      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800aa7a:	4b05      	ldr	r3, [pc, #20]	; (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aa7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa7e:	e241      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800aa80:	58024400 	.word	0x58024400
 800aa84:	03d09000 	.word	0x03d09000
 800aa88:	003d0900 	.word	0x003d0900
 800aa8c:	017d7840 	.word	0x017d7840
 800aa90:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800aa94:	2300      	movs	r3, #0
 800aa96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa98:	e234      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaa0:	f040 809c 	bne.w	800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800aaa4:	4b9b      	ldr	r3, [pc, #620]	; (800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aaa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaa8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800aaac:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aaae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aab4:	d054      	beq.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800aab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aabc:	f200 808b 	bhi.w	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800aac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aac6:	f000 8083 	beq.w	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800aaca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aacc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aad0:	f200 8081 	bhi.w	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800aad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aada:	d02f      	beq.n	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800aadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aae2:	d878      	bhi.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800aae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d004      	beq.n	800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800aaea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaf0:	d012      	beq.n	800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800aaf2:	e070      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aaf4:	4b87      	ldr	r3, [pc, #540]	; (800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aafc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab00:	d107      	bne.n	800ab12 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab06:	4618      	mov	r0, r3
 800ab08:	f000 fcc8 	bl	800b49c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ab10:	e1f8      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ab12:	2300      	movs	r3, #0
 800ab14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab16:	e1f5      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab18:	4b7e      	ldr	r3, [pc, #504]	; (800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab24:	d107      	bne.n	800ab36 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab26:	f107 0318 	add.w	r3, r7, #24
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f000 fa0e 	bl	800af4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab30:	69bb      	ldr	r3, [r7, #24]
 800ab32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ab34:	e1e6      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ab36:	2300      	movs	r3, #0
 800ab38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab3a:	e1e3      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab3c:	4b75      	ldr	r3, [pc, #468]	; (800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab48:	d107      	bne.n	800ab5a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab4a:	f107 030c 	add.w	r3, r7, #12
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f000 fb50 	bl	800b1f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ab58:	e1d4      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab5e:	e1d1      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ab60:	4b6c      	ldr	r3, [pc, #432]	; (800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab68:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab6a:	4b6a      	ldr	r3, [pc, #424]	; (800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f003 0304 	and.w	r3, r3, #4
 800ab72:	2b04      	cmp	r3, #4
 800ab74:	d10c      	bne.n	800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ab76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d109      	bne.n	800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab7c:	4b65      	ldr	r3, [pc, #404]	; (800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	08db      	lsrs	r3, r3, #3
 800ab82:	f003 0303 	and.w	r3, r3, #3
 800ab86:	4a64      	ldr	r2, [pc, #400]	; (800ad18 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800ab88:	fa22 f303 	lsr.w	r3, r2, r3
 800ab8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab8e:	e01e      	b.n	800abce <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab90:	4b60      	ldr	r3, [pc, #384]	; (800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab9c:	d106      	bne.n	800abac <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800ab9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aba4:	d102      	bne.n	800abac <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800aba6:	4b5d      	ldr	r3, [pc, #372]	; (800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800aba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abaa:	e010      	b.n	800abce <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800abac:	4b59      	ldr	r3, [pc, #356]	; (800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abb8:	d106      	bne.n	800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800abba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abc0:	d102      	bne.n	800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800abc2:	4b57      	ldr	r3, [pc, #348]	; (800ad20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800abc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abc6:	e002      	b.n	800abce <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800abc8:	2300      	movs	r3, #0
 800abca:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800abcc:	e19a      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800abce:	e199      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800abd0:	4b54      	ldr	r3, [pc, #336]	; (800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abd4:	e196      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800abd6:	2300      	movs	r3, #0
 800abd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abda:	e193      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800abe2:	d173      	bne.n	800accc <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800abe4:	4b4b      	ldr	r3, [pc, #300]	; (800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800abe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abe8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800abec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800abee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abf4:	d02f      	beq.n	800ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800abf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abfc:	d863      	bhi.n	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800abfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d004      	beq.n	800ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800ac04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac0a:	d012      	beq.n	800ac32 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800ac0c:	e05b      	b.n	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac0e:	4b41      	ldr	r3, [pc, #260]	; (800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac1a:	d107      	bne.n	800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac1c:	f107 0318 	add.w	r3, r7, #24
 800ac20:	4618      	mov	r0, r3
 800ac22:	f000 f993 	bl	800af4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac2a:	e16b      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac30:	e168      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac32:	4b38      	ldr	r3, [pc, #224]	; (800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac3e:	d107      	bne.n	800ac50 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac40:	f107 030c 	add.w	r3, r7, #12
 800ac44:	4618      	mov	r0, r3
 800ac46:	f000 fad5 	bl	800b1f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac4e:	e159      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ac50:	2300      	movs	r3, #0
 800ac52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac54:	e156      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ac56:	4b2f      	ldr	r3, [pc, #188]	; (800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac5e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac60:	4b2c      	ldr	r3, [pc, #176]	; (800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f003 0304 	and.w	r3, r3, #4
 800ac68:	2b04      	cmp	r3, #4
 800ac6a:	d10c      	bne.n	800ac86 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800ac6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d109      	bne.n	800ac86 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac72:	4b28      	ldr	r3, [pc, #160]	; (800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	08db      	lsrs	r3, r3, #3
 800ac78:	f003 0303 	and.w	r3, r3, #3
 800ac7c:	4a26      	ldr	r2, [pc, #152]	; (800ad18 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800ac7e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac84:	e01e      	b.n	800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac86:	4b23      	ldr	r3, [pc, #140]	; (800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac92:	d106      	bne.n	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800ac94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac9a:	d102      	bne.n	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ac9c:	4b1f      	ldr	r3, [pc, #124]	; (800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800ac9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aca0:	e010      	b.n	800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aca2:	4b1c      	ldr	r3, [pc, #112]	; (800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acae:	d106      	bne.n	800acbe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800acb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acb6:	d102      	bne.n	800acbe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800acb8:	4b19      	ldr	r3, [pc, #100]	; (800ad20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800acba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acbc:	e002      	b.n	800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800acbe:	2300      	movs	r3, #0
 800acc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800acc2:	e11f      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800acc4:	e11e      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800acc6:	2300      	movs	r3, #0
 800acc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acca:	e11b      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acd2:	d13e      	bne.n	800ad52 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800acd4:	4b0f      	ldr	r3, [pc, #60]	; (800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800acd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acdc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800acde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d004      	beq.n	800acee <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800ace4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acea:	d01d      	beq.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800acec:	e02e      	b.n	800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800acee:	4b09      	ldr	r3, [pc, #36]	; (800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acfa:	d107      	bne.n	800ad0c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800acfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad00:	4618      	mov	r0, r3
 800ad02:	f000 fbcb 	bl	800b49c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad0a:	e0fb      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad10:	e0f8      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ad12:	bf00      	nop
 800ad14:	58024400 	.word	0x58024400
 800ad18:	03d09000 	.word	0x03d09000
 800ad1c:	003d0900 	.word	0x003d0900
 800ad20:	017d7840 	.word	0x017d7840
 800ad24:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad28:	4b79      	ldr	r3, [pc, #484]	; (800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad34:	d107      	bne.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad36:	f107 0318 	add.w	r3, r7, #24
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f000 f906 	bl	800af4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ad40:	6a3b      	ldr	r3, [r7, #32]
 800ad42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad44:	e0de      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ad46:	2300      	movs	r3, #0
 800ad48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad4a:	e0db      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad50:	e0d8      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad58:	f040 8085 	bne.w	800ae66 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800ad5c:	4b6c      	ldr	r3, [pc, #432]	; (800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad60:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ad64:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ad66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad6c:	d06b      	beq.n	800ae46 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800ad6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad74:	d874      	bhi.n	800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ad76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad7c:	d056      	beq.n	800ae2c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800ad7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad84:	d86c      	bhi.n	800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ad86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad8c:	d03b      	beq.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800ad8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad94:	d864      	bhi.n	800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ad96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad9c:	d021      	beq.n	800ade2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800ad9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ada4:	d85c      	bhi.n	800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ada6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d004      	beq.n	800adb6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800adac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adb2:	d004      	beq.n	800adbe <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800adb4:	e054      	b.n	800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800adb6:	f000 f8b3 	bl	800af20 <HAL_RCCEx_GetD3PCLK1Freq>
 800adba:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800adbc:	e0a2      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800adbe:	4b54      	ldr	r3, [pc, #336]	; (800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800adc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800adca:	d107      	bne.n	800addc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adcc:	f107 0318 	add.w	r3, r7, #24
 800add0:	4618      	mov	r0, r3
 800add2:	f000 f8bb 	bl	800af4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800add6:	69fb      	ldr	r3, [r7, #28]
 800add8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800adda:	e093      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800addc:	2300      	movs	r3, #0
 800adde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ade0:	e090      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ade2:	4b4b      	ldr	r3, [pc, #300]	; (800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800adea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adee:	d107      	bne.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adf0:	f107 030c 	add.w	r3, r7, #12
 800adf4:	4618      	mov	r0, r3
 800adf6:	f000 f9fd 	bl	800b1f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800adfe:	e081      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ae00:	2300      	movs	r3, #0
 800ae02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae04:	e07e      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae06:	4b42      	ldr	r3, [pc, #264]	; (800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f003 0304 	and.w	r3, r3, #4
 800ae0e:	2b04      	cmp	r3, #4
 800ae10:	d109      	bne.n	800ae26 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae12:	4b3f      	ldr	r3, [pc, #252]	; (800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	08db      	lsrs	r3, r3, #3
 800ae18:	f003 0303 	and.w	r3, r3, #3
 800ae1c:	4a3d      	ldr	r2, [pc, #244]	; (800af14 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800ae1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae24:	e06e      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ae26:	2300      	movs	r3, #0
 800ae28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae2a:	e06b      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ae2c:	4b38      	ldr	r3, [pc, #224]	; (800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae38:	d102      	bne.n	800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800ae3a:	4b37      	ldr	r3, [pc, #220]	; (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ae3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ae3e:	e061      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ae40:	2300      	movs	r3, #0
 800ae42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae44:	e05e      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae46:	4b32      	ldr	r3, [pc, #200]	; (800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae52:	d102      	bne.n	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800ae54:	4b31      	ldr	r3, [pc, #196]	; (800af1c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ae56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae58:	e054      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae5e:	e051      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800ae60:	2300      	movs	r3, #0
 800ae62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae64:	e04e      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae6c:	d148      	bne.n	800af00 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800ae6e:	4b28      	ldr	r3, [pc, #160]	; (800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae76:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ae78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae7e:	d02a      	beq.n	800aed6 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800ae80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae86:	d838      	bhi.n	800aefa <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800ae88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d004      	beq.n	800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800ae8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae94:	d00d      	beq.n	800aeb2 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800ae96:	e030      	b.n	800aefa <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae98:	4b1d      	ldr	r3, [pc, #116]	; (800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aea0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aea4:	d102      	bne.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800aea6:	4b1d      	ldr	r3, [pc, #116]	; (800af1c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aea8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aeaa:	e02b      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aeac:	2300      	movs	r3, #0
 800aeae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aeb0:	e028      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aeb2:	4b17      	ldr	r3, [pc, #92]	; (800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aeba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aebe:	d107      	bne.n	800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aec4:	4618      	mov	r0, r3
 800aec6:	f000 fae9 	bl	800b49c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aeca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aecc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aece:	e019      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aed0:	2300      	movs	r3, #0
 800aed2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aed4:	e016      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aed6:	4b0e      	ldr	r3, [pc, #56]	; (800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aede:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aee2:	d107      	bne.n	800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aee4:	f107 0318 	add.w	r3, r7, #24
 800aee8:	4618      	mov	r0, r3
 800aeea:	f000 f82f 	bl	800af4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aeee:	69fb      	ldr	r3, [r7, #28]
 800aef0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aef2:	e007      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aef4:	2300      	movs	r3, #0
 800aef6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aef8:	e004      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800aefa:	2300      	movs	r3, #0
 800aefc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aefe:	e001      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800af00:	2300      	movs	r3, #0
 800af02:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800af04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800af06:	4618      	mov	r0, r3
 800af08:	3740      	adds	r7, #64	; 0x40
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	58024400 	.word	0x58024400
 800af14:	03d09000 	.word	0x03d09000
 800af18:	003d0900 	.word	0x003d0900
 800af1c:	017d7840 	.word	0x017d7840

0800af20 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800af24:	f7fe fb88 	bl	8009638 <HAL_RCC_GetHCLKFreq>
 800af28:	4602      	mov	r2, r0
 800af2a:	4b06      	ldr	r3, [pc, #24]	; (800af44 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800af2c:	6a1b      	ldr	r3, [r3, #32]
 800af2e:	091b      	lsrs	r3, r3, #4
 800af30:	f003 0307 	and.w	r3, r3, #7
 800af34:	4904      	ldr	r1, [pc, #16]	; (800af48 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800af36:	5ccb      	ldrb	r3, [r1, r3]
 800af38:	f003 031f 	and.w	r3, r3, #31
 800af3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800af40:	4618      	mov	r0, r3
 800af42:	bd80      	pop	{r7, pc}
 800af44:	58024400 	.word	0x58024400
 800af48:	08010204 	.word	0x08010204

0800af4c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b089      	sub	sp, #36	; 0x24
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af54:	4ba1      	ldr	r3, [pc, #644]	; (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af58:	f003 0303 	and.w	r3, r3, #3
 800af5c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800af5e:	4b9f      	ldr	r3, [pc, #636]	; (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af62:	0b1b      	lsrs	r3, r3, #12
 800af64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af68:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800af6a:	4b9c      	ldr	r3, [pc, #624]	; (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af6e:	091b      	lsrs	r3, r3, #4
 800af70:	f003 0301 	and.w	r3, r3, #1
 800af74:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800af76:	4b99      	ldr	r3, [pc, #612]	; (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af7a:	08db      	lsrs	r3, r3, #3
 800af7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af80:	693a      	ldr	r2, [r7, #16]
 800af82:	fb02 f303 	mul.w	r3, r2, r3
 800af86:	ee07 3a90 	vmov	s15, r3
 800af8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	2b00      	cmp	r3, #0
 800af96:	f000 8111 	beq.w	800b1bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	2b02      	cmp	r3, #2
 800af9e:	f000 8083 	beq.w	800b0a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	2b02      	cmp	r3, #2
 800afa6:	f200 80a1 	bhi.w	800b0ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800afaa:	69bb      	ldr	r3, [r7, #24]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d003      	beq.n	800afb8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d056      	beq.n	800b064 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800afb6:	e099      	b.n	800b0ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afb8:	4b88      	ldr	r3, [pc, #544]	; (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f003 0320 	and.w	r3, r3, #32
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d02d      	beq.n	800b020 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800afc4:	4b85      	ldr	r3, [pc, #532]	; (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	08db      	lsrs	r3, r3, #3
 800afca:	f003 0303 	and.w	r3, r3, #3
 800afce:	4a84      	ldr	r2, [pc, #528]	; (800b1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800afd0:	fa22 f303 	lsr.w	r3, r2, r3
 800afd4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	ee07 3a90 	vmov	s15, r3
 800afdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	ee07 3a90 	vmov	s15, r3
 800afe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afee:	4b7b      	ldr	r3, [pc, #492]	; (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff6:	ee07 3a90 	vmov	s15, r3
 800affa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800affe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b002:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b00a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b00e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b01a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b01e:	e087      	b.n	800b130 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	ee07 3a90 	vmov	s15, r3
 800b026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b02a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b1e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b02e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b032:	4b6a      	ldr	r3, [pc, #424]	; (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b03a:	ee07 3a90 	vmov	s15, r3
 800b03e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b042:	ed97 6a03 	vldr	s12, [r7, #12]
 800b046:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b04a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b04e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b05a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b05e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b062:	e065      	b.n	800b130 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	ee07 3a90 	vmov	s15, r3
 800b06a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b06e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b1ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b076:	4b59      	ldr	r3, [pc, #356]	; (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b07a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b07e:	ee07 3a90 	vmov	s15, r3
 800b082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b086:	ed97 6a03 	vldr	s12, [r7, #12]
 800b08a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b08e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b09a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b09e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b0a6:	e043      	b.n	800b130 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	ee07 3a90 	vmov	s15, r3
 800b0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b0b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0ba:	4b48      	ldr	r3, [pc, #288]	; (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0c2:	ee07 3a90 	vmov	s15, r3
 800b0c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b0ea:	e021      	b.n	800b130 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	ee07 3a90 	vmov	s15, r3
 800b0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b1ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b0fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0fe:	4b37      	ldr	r3, [pc, #220]	; (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b106:	ee07 3a90 	vmov	s15, r3
 800b10a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b10e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b112:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b11a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b11e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b12a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b12e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b130:	4b2a      	ldr	r3, [pc, #168]	; (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b134:	0a5b      	lsrs	r3, r3, #9
 800b136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b13a:	ee07 3a90 	vmov	s15, r3
 800b13e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b142:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b146:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b14a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b14e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b156:	ee17 2a90 	vmov	r2, s15
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b15e:	4b1f      	ldr	r3, [pc, #124]	; (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b162:	0c1b      	lsrs	r3, r3, #16
 800b164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b168:	ee07 3a90 	vmov	s15, r3
 800b16c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b170:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b174:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b178:	edd7 6a07 	vldr	s13, [r7, #28]
 800b17c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b184:	ee17 2a90 	vmov	r2, s15
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b18c:	4b13      	ldr	r3, [pc, #76]	; (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b18e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b190:	0e1b      	lsrs	r3, r3, #24
 800b192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b196:	ee07 3a90 	vmov	s15, r3
 800b19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b19e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1b2:	ee17 2a90 	vmov	r2, s15
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b1ba:	e008      	b.n	800b1ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	609a      	str	r2, [r3, #8]
}
 800b1ce:	bf00      	nop
 800b1d0:	3724      	adds	r7, #36	; 0x24
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr
 800b1da:	bf00      	nop
 800b1dc:	58024400 	.word	0x58024400
 800b1e0:	03d09000 	.word	0x03d09000
 800b1e4:	46000000 	.word	0x46000000
 800b1e8:	4c742400 	.word	0x4c742400
 800b1ec:	4a742400 	.word	0x4a742400
 800b1f0:	4bbebc20 	.word	0x4bbebc20

0800b1f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b089      	sub	sp, #36	; 0x24
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b1fc:	4ba1      	ldr	r3, [pc, #644]	; (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b200:	f003 0303 	and.w	r3, r3, #3
 800b204:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b206:	4b9f      	ldr	r3, [pc, #636]	; (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b20a:	0d1b      	lsrs	r3, r3, #20
 800b20c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b210:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b212:	4b9c      	ldr	r3, [pc, #624]	; (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b216:	0a1b      	lsrs	r3, r3, #8
 800b218:	f003 0301 	and.w	r3, r3, #1
 800b21c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b21e:	4b99      	ldr	r3, [pc, #612]	; (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b222:	08db      	lsrs	r3, r3, #3
 800b224:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b228:	693a      	ldr	r2, [r7, #16]
 800b22a:	fb02 f303 	mul.w	r3, r2, r3
 800b22e:	ee07 3a90 	vmov	s15, r3
 800b232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b236:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	f000 8111 	beq.w	800b464 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	2b02      	cmp	r3, #2
 800b246:	f000 8083 	beq.w	800b350 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	2b02      	cmp	r3, #2
 800b24e:	f200 80a1 	bhi.w	800b394 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d003      	beq.n	800b260 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b258:	69bb      	ldr	r3, [r7, #24]
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d056      	beq.n	800b30c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b25e:	e099      	b.n	800b394 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b260:	4b88      	ldr	r3, [pc, #544]	; (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f003 0320 	and.w	r3, r3, #32
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d02d      	beq.n	800b2c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b26c:	4b85      	ldr	r3, [pc, #532]	; (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	08db      	lsrs	r3, r3, #3
 800b272:	f003 0303 	and.w	r3, r3, #3
 800b276:	4a84      	ldr	r2, [pc, #528]	; (800b488 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b278:	fa22 f303 	lsr.w	r3, r2, r3
 800b27c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	ee07 3a90 	vmov	s15, r3
 800b284:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	ee07 3a90 	vmov	s15, r3
 800b28e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b296:	4b7b      	ldr	r3, [pc, #492]	; (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b29a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b29e:	ee07 3a90 	vmov	s15, r3
 800b2a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b48c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b2c6:	e087      	b.n	800b3d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	ee07 3a90 	vmov	s15, r3
 800b2ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b490 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b2d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2da:	4b6a      	ldr	r3, [pc, #424]	; (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2e2:	ee07 3a90 	vmov	s15, r3
 800b2e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b48c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b302:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b306:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b30a:	e065      	b.n	800b3d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	ee07 3a90 	vmov	s15, r3
 800b312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b316:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b494 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b31a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b31e:	4b59      	ldr	r3, [pc, #356]	; (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b326:	ee07 3a90 	vmov	s15, r3
 800b32a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b32e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b332:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b48c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b33a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b33e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b34a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b34e:	e043      	b.n	800b3d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	ee07 3a90 	vmov	s15, r3
 800b356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b35a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b498 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b35e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b362:	4b48      	ldr	r3, [pc, #288]	; (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b36a:	ee07 3a90 	vmov	s15, r3
 800b36e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b372:	ed97 6a03 	vldr	s12, [r7, #12]
 800b376:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b48c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b37a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b37e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b38a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b38e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b392:	e021      	b.n	800b3d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	ee07 3a90 	vmov	s15, r3
 800b39a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b39e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b494 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b3a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3a6:	4b37      	ldr	r3, [pc, #220]	; (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ae:	ee07 3a90 	vmov	s15, r3
 800b3b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b48c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b3d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b3d8:	4b2a      	ldr	r3, [pc, #168]	; (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3dc:	0a5b      	lsrs	r3, r3, #9
 800b3de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3e2:	ee07 3a90 	vmov	s15, r3
 800b3e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3fe:	ee17 2a90 	vmov	r2, s15
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b406:	4b1f      	ldr	r3, [pc, #124]	; (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b40a:	0c1b      	lsrs	r3, r3, #16
 800b40c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b410:	ee07 3a90 	vmov	s15, r3
 800b414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b418:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b41c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b420:	edd7 6a07 	vldr	s13, [r7, #28]
 800b424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b42c:	ee17 2a90 	vmov	r2, s15
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b434:	4b13      	ldr	r3, [pc, #76]	; (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b438:	0e1b      	lsrs	r3, r3, #24
 800b43a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b43e:	ee07 3a90 	vmov	s15, r3
 800b442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b446:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b44a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b44e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b452:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b45a:	ee17 2a90 	vmov	r2, s15
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b462:	e008      	b.n	800b476 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	609a      	str	r2, [r3, #8]
}
 800b476:	bf00      	nop
 800b478:	3724      	adds	r7, #36	; 0x24
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop
 800b484:	58024400 	.word	0x58024400
 800b488:	03d09000 	.word	0x03d09000
 800b48c:	46000000 	.word	0x46000000
 800b490:	4c742400 	.word	0x4c742400
 800b494:	4a742400 	.word	0x4a742400
 800b498:	4bbebc20 	.word	0x4bbebc20

0800b49c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b089      	sub	sp, #36	; 0x24
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b4a4:	4ba0      	ldr	r3, [pc, #640]	; (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4a8:	f003 0303 	and.w	r3, r3, #3
 800b4ac:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b4ae:	4b9e      	ldr	r3, [pc, #632]	; (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b2:	091b      	lsrs	r3, r3, #4
 800b4b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4b8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b4ba:	4b9b      	ldr	r3, [pc, #620]	; (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4be:	f003 0301 	and.w	r3, r3, #1
 800b4c2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b4c4:	4b98      	ldr	r3, [pc, #608]	; (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4c8:	08db      	lsrs	r3, r3, #3
 800b4ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b4ce:	693a      	ldr	r2, [r7, #16]
 800b4d0:	fb02 f303 	mul.w	r3, r2, r3
 800b4d4:	ee07 3a90 	vmov	s15, r3
 800b4d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4dc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	f000 8111 	beq.w	800b70a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b4e8:	69bb      	ldr	r3, [r7, #24]
 800b4ea:	2b02      	cmp	r3, #2
 800b4ec:	f000 8083 	beq.w	800b5f6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b4f0:	69bb      	ldr	r3, [r7, #24]
 800b4f2:	2b02      	cmp	r3, #2
 800b4f4:	f200 80a1 	bhi.w	800b63a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d003      	beq.n	800b506 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b4fe:	69bb      	ldr	r3, [r7, #24]
 800b500:	2b01      	cmp	r3, #1
 800b502:	d056      	beq.n	800b5b2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b504:	e099      	b.n	800b63a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b506:	4b88      	ldr	r3, [pc, #544]	; (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f003 0320 	and.w	r3, r3, #32
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d02d      	beq.n	800b56e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b512:	4b85      	ldr	r3, [pc, #532]	; (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	08db      	lsrs	r3, r3, #3
 800b518:	f003 0303 	and.w	r3, r3, #3
 800b51c:	4a83      	ldr	r2, [pc, #524]	; (800b72c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b51e:	fa22 f303 	lsr.w	r3, r2, r3
 800b522:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	ee07 3a90 	vmov	s15, r3
 800b52a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	ee07 3a90 	vmov	s15, r3
 800b534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b53c:	4b7a      	ldr	r3, [pc, #488]	; (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b53e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b544:	ee07 3a90 	vmov	s15, r3
 800b548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b54c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b550:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b730 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b554:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b558:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b55c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b564:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b568:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b56c:	e087      	b.n	800b67e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	ee07 3a90 	vmov	s15, r3
 800b574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b578:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b734 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b57c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b580:	4b69      	ldr	r3, [pc, #420]	; (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b588:	ee07 3a90 	vmov	s15, r3
 800b58c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b590:	ed97 6a03 	vldr	s12, [r7, #12]
 800b594:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b730 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b598:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b59c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b5b0:	e065      	b.n	800b67e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	ee07 3a90 	vmov	s15, r3
 800b5b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5bc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b738 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b5c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5c4:	4b58      	ldr	r3, [pc, #352]	; (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5cc:	ee07 3a90 	vmov	s15, r3
 800b5d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5d8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b730 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b5f4:	e043      	b.n	800b67e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	ee07 3a90 	vmov	s15, r3
 800b5fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b600:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b73c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b604:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b608:	4b47      	ldr	r3, [pc, #284]	; (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b60a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b60c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b610:	ee07 3a90 	vmov	s15, r3
 800b614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b618:	ed97 6a03 	vldr	s12, [r7, #12]
 800b61c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b730 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b620:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b624:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b628:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b62c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b630:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b634:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b638:	e021      	b.n	800b67e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	ee07 3a90 	vmov	s15, r3
 800b640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b644:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b734 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b648:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b64c:	4b36      	ldr	r3, [pc, #216]	; (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b64e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b654:	ee07 3a90 	vmov	s15, r3
 800b658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b65c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b660:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b730 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b664:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b668:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b66c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b670:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b674:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b678:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b67c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b67e:	4b2a      	ldr	r3, [pc, #168]	; (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b682:	0a5b      	lsrs	r3, r3, #9
 800b684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b688:	ee07 3a90 	vmov	s15, r3
 800b68c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b690:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b694:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b698:	edd7 6a07 	vldr	s13, [r7, #28]
 800b69c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6a4:	ee17 2a90 	vmov	r2, s15
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b6ac:	4b1e      	ldr	r3, [pc, #120]	; (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6b0:	0c1b      	lsrs	r3, r3, #16
 800b6b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6b6:	ee07 3a90 	vmov	s15, r3
 800b6ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6d2:	ee17 2a90 	vmov	r2, s15
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b6da:	4b13      	ldr	r3, [pc, #76]	; (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6de:	0e1b      	lsrs	r3, r3, #24
 800b6e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6e4:	ee07 3a90 	vmov	s15, r3
 800b6e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b700:	ee17 2a90 	vmov	r2, s15
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b708:	e008      	b.n	800b71c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2200      	movs	r2, #0
 800b70e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	609a      	str	r2, [r3, #8]
}
 800b71c:	bf00      	nop
 800b71e:	3724      	adds	r7, #36	; 0x24
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr
 800b728:	58024400 	.word	0x58024400
 800b72c:	03d09000 	.word	0x03d09000
 800b730:	46000000 	.word	0x46000000
 800b734:	4c742400 	.word	0x4c742400
 800b738:	4a742400 	.word	0x4a742400
 800b73c:	4bbebc20 	.word	0x4bbebc20

0800b740 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b74a:	2300      	movs	r3, #0
 800b74c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b74e:	4b53      	ldr	r3, [pc, #332]	; (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b752:	f003 0303 	and.w	r3, r3, #3
 800b756:	2b03      	cmp	r3, #3
 800b758:	d101      	bne.n	800b75e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b75a:	2301      	movs	r3, #1
 800b75c:	e099      	b.n	800b892 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b75e:	4b4f      	ldr	r3, [pc, #316]	; (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a4e      	ldr	r2, [pc, #312]	; (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b764:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b76a:	f7f7 f98b 	bl	8002a84 <HAL_GetTick>
 800b76e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b770:	e008      	b.n	800b784 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b772:	f7f7 f987 	bl	8002a84 <HAL_GetTick>
 800b776:	4602      	mov	r2, r0
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	1ad3      	subs	r3, r2, r3
 800b77c:	2b02      	cmp	r3, #2
 800b77e:	d901      	bls.n	800b784 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b780:	2303      	movs	r3, #3
 800b782:	e086      	b.n	800b892 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b784:	4b45      	ldr	r3, [pc, #276]	; (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d1f0      	bne.n	800b772 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b790:	4b42      	ldr	r3, [pc, #264]	; (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b794:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	031b      	lsls	r3, r3, #12
 800b79e:	493f      	ldr	r1, [pc, #252]	; (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	628b      	str	r3, [r1, #40]	; 0x28
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	3b01      	subs	r3, #1
 800b7aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	3b01      	subs	r3, #1
 800b7b4:	025b      	lsls	r3, r3, #9
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	431a      	orrs	r2, r3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	3b01      	subs	r3, #1
 800b7c0:	041b      	lsls	r3, r3, #16
 800b7c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b7c6:	431a      	orrs	r2, r3
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	691b      	ldr	r3, [r3, #16]
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	061b      	lsls	r3, r3, #24
 800b7d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b7d4:	4931      	ldr	r1, [pc, #196]	; (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b7da:	4b30      	ldr	r3, [pc, #192]	; (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b7dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	695b      	ldr	r3, [r3, #20]
 800b7e6:	492d      	ldr	r1, [pc, #180]	; (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b7ec:	4b2b      	ldr	r3, [pc, #172]	; (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f0:	f023 0220 	bic.w	r2, r3, #32
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	699b      	ldr	r3, [r3, #24]
 800b7f8:	4928      	ldr	r1, [pc, #160]	; (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b7fe:	4b27      	ldr	r3, [pc, #156]	; (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b802:	4a26      	ldr	r2, [pc, #152]	; (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b804:	f023 0310 	bic.w	r3, r3, #16
 800b808:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b80a:	4b24      	ldr	r3, [pc, #144]	; (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b80c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b80e:	4b24      	ldr	r3, [pc, #144]	; (800b8a0 <RCCEx_PLL2_Config+0x160>)
 800b810:	4013      	ands	r3, r2
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	69d2      	ldr	r2, [r2, #28]
 800b816:	00d2      	lsls	r2, r2, #3
 800b818:	4920      	ldr	r1, [pc, #128]	; (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b81a:	4313      	orrs	r3, r2
 800b81c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b81e:	4b1f      	ldr	r3, [pc, #124]	; (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b822:	4a1e      	ldr	r2, [pc, #120]	; (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b824:	f043 0310 	orr.w	r3, r3, #16
 800b828:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d106      	bne.n	800b83e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b830:	4b1a      	ldr	r3, [pc, #104]	; (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b834:	4a19      	ldr	r2, [pc, #100]	; (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b836:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b83a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b83c:	e00f      	b.n	800b85e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	2b01      	cmp	r3, #1
 800b842:	d106      	bne.n	800b852 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b844:	4b15      	ldr	r3, [pc, #84]	; (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b848:	4a14      	ldr	r2, [pc, #80]	; (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b84a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b84e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b850:	e005      	b.n	800b85e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b852:	4b12      	ldr	r3, [pc, #72]	; (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b856:	4a11      	ldr	r2, [pc, #68]	; (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b858:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b85c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b85e:	4b0f      	ldr	r3, [pc, #60]	; (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a0e      	ldr	r2, [pc, #56]	; (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b864:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b86a:	f7f7 f90b 	bl	8002a84 <HAL_GetTick>
 800b86e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b870:	e008      	b.n	800b884 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b872:	f7f7 f907 	bl	8002a84 <HAL_GetTick>
 800b876:	4602      	mov	r2, r0
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	1ad3      	subs	r3, r2, r3
 800b87c:	2b02      	cmp	r3, #2
 800b87e:	d901      	bls.n	800b884 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b880:	2303      	movs	r3, #3
 800b882:	e006      	b.n	800b892 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b884:	4b05      	ldr	r3, [pc, #20]	; (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d0f0      	beq.n	800b872 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b890:	7bfb      	ldrb	r3, [r7, #15]
}
 800b892:	4618      	mov	r0, r3
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	bf00      	nop
 800b89c:	58024400 	.word	0x58024400
 800b8a0:	ffff0007 	.word	0xffff0007

0800b8a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b8b2:	4b53      	ldr	r3, [pc, #332]	; (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b8b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8b6:	f003 0303 	and.w	r3, r3, #3
 800b8ba:	2b03      	cmp	r3, #3
 800b8bc:	d101      	bne.n	800b8c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	e099      	b.n	800b9f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b8c2:	4b4f      	ldr	r3, [pc, #316]	; (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4a4e      	ldr	r2, [pc, #312]	; (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b8c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8ce:	f7f7 f8d9 	bl	8002a84 <HAL_GetTick>
 800b8d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b8d4:	e008      	b.n	800b8e8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b8d6:	f7f7 f8d5 	bl	8002a84 <HAL_GetTick>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	1ad3      	subs	r3, r2, r3
 800b8e0:	2b02      	cmp	r3, #2
 800b8e2:	d901      	bls.n	800b8e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b8e4:	2303      	movs	r3, #3
 800b8e6:	e086      	b.n	800b9f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b8e8:	4b45      	ldr	r3, [pc, #276]	; (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d1f0      	bne.n	800b8d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b8f4:	4b42      	ldr	r3, [pc, #264]	; (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b8f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	051b      	lsls	r3, r3, #20
 800b902:	493f      	ldr	r1, [pc, #252]	; (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b904:	4313      	orrs	r3, r2
 800b906:	628b      	str	r3, [r1, #40]	; 0x28
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	3b01      	subs	r3, #1
 800b90e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	689b      	ldr	r3, [r3, #8]
 800b916:	3b01      	subs	r3, #1
 800b918:	025b      	lsls	r3, r3, #9
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	431a      	orrs	r2, r3
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	3b01      	subs	r3, #1
 800b924:	041b      	lsls	r3, r3, #16
 800b926:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b92a:	431a      	orrs	r2, r3
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	691b      	ldr	r3, [r3, #16]
 800b930:	3b01      	subs	r3, #1
 800b932:	061b      	lsls	r3, r3, #24
 800b934:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b938:	4931      	ldr	r1, [pc, #196]	; (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b93a:	4313      	orrs	r3, r2
 800b93c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b93e:	4b30      	ldr	r3, [pc, #192]	; (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b942:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	695b      	ldr	r3, [r3, #20]
 800b94a:	492d      	ldr	r1, [pc, #180]	; (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b94c:	4313      	orrs	r3, r2
 800b94e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b950:	4b2b      	ldr	r3, [pc, #172]	; (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b954:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	699b      	ldr	r3, [r3, #24]
 800b95c:	4928      	ldr	r1, [pc, #160]	; (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b95e:	4313      	orrs	r3, r2
 800b960:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b962:	4b27      	ldr	r3, [pc, #156]	; (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b966:	4a26      	ldr	r2, [pc, #152]	; (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b96c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b96e:	4b24      	ldr	r3, [pc, #144]	; (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b972:	4b24      	ldr	r3, [pc, #144]	; (800ba04 <RCCEx_PLL3_Config+0x160>)
 800b974:	4013      	ands	r3, r2
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	69d2      	ldr	r2, [r2, #28]
 800b97a:	00d2      	lsls	r2, r2, #3
 800b97c:	4920      	ldr	r1, [pc, #128]	; (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b97e:	4313      	orrs	r3, r2
 800b980:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b982:	4b1f      	ldr	r3, [pc, #124]	; (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b986:	4a1e      	ldr	r2, [pc, #120]	; (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b98c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d106      	bne.n	800b9a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b994:	4b1a      	ldr	r3, [pc, #104]	; (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b998:	4a19      	ldr	r2, [pc, #100]	; (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b99a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b99e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b9a0:	e00f      	b.n	800b9c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d106      	bne.n	800b9b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b9a8:	4b15      	ldr	r3, [pc, #84]	; (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ac:	4a14      	ldr	r2, [pc, #80]	; (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b9ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b9b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b9b4:	e005      	b.n	800b9c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b9b6:	4b12      	ldr	r3, [pc, #72]	; (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ba:	4a11      	ldr	r2, [pc, #68]	; (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b9bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b9c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b9c2:	4b0f      	ldr	r3, [pc, #60]	; (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a0e      	ldr	r2, [pc, #56]	; (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b9c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9ce:	f7f7 f859 	bl	8002a84 <HAL_GetTick>
 800b9d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b9d4:	e008      	b.n	800b9e8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b9d6:	f7f7 f855 	bl	8002a84 <HAL_GetTick>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	1ad3      	subs	r3, r2, r3
 800b9e0:	2b02      	cmp	r3, #2
 800b9e2:	d901      	bls.n	800b9e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b9e4:	2303      	movs	r3, #3
 800b9e6:	e006      	b.n	800b9f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b9e8:	4b05      	ldr	r3, [pc, #20]	; (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d0f0      	beq.n	800b9d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3710      	adds	r7, #16
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	58024400 	.word	0x58024400
 800ba04:	ffff0007 	.word	0xffff0007

0800ba08 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d101      	bne.n	800ba1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ba16:	2301      	movs	r3, #1
 800ba18:	e0f1      	b.n	800bbfe <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4a78      	ldr	r2, [pc, #480]	; (800bc08 <HAL_SPI_Init+0x200>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d00f      	beq.n	800ba4a <HAL_SPI_Init+0x42>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4a77      	ldr	r2, [pc, #476]	; (800bc0c <HAL_SPI_Init+0x204>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d00a      	beq.n	800ba4a <HAL_SPI_Init+0x42>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4a75      	ldr	r2, [pc, #468]	; (800bc10 <HAL_SPI_Init+0x208>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d005      	beq.n	800ba4a <HAL_SPI_Init+0x42>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	68db      	ldr	r3, [r3, #12]
 800ba42:	2b0f      	cmp	r3, #15
 800ba44:	d901      	bls.n	800ba4a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ba46:	2301      	movs	r3, #1
 800ba48:	e0d9      	b.n	800bbfe <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 fd74 	bl	800c538 <SPI_GetPacketSize>
 800ba50:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4a6c      	ldr	r2, [pc, #432]	; (800bc08 <HAL_SPI_Init+0x200>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d00c      	beq.n	800ba76 <HAL_SPI_Init+0x6e>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4a6a      	ldr	r2, [pc, #424]	; (800bc0c <HAL_SPI_Init+0x204>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d007      	beq.n	800ba76 <HAL_SPI_Init+0x6e>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4a69      	ldr	r2, [pc, #420]	; (800bc10 <HAL_SPI_Init+0x208>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d002      	beq.n	800ba76 <HAL_SPI_Init+0x6e>
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2b08      	cmp	r3, #8
 800ba74:	d811      	bhi.n	800ba9a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ba7a:	4a63      	ldr	r2, [pc, #396]	; (800bc08 <HAL_SPI_Init+0x200>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d009      	beq.n	800ba94 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a61      	ldr	r2, [pc, #388]	; (800bc0c <HAL_SPI_Init+0x204>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d004      	beq.n	800ba94 <HAL_SPI_Init+0x8c>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4a60      	ldr	r2, [pc, #384]	; (800bc10 <HAL_SPI_Init+0x208>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d104      	bne.n	800ba9e <HAL_SPI_Init+0x96>
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2b10      	cmp	r3, #16
 800ba98:	d901      	bls.n	800ba9e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e0af      	b.n	800bbfe <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d106      	bne.n	800bab8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2200      	movs	r2, #0
 800baae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f7f6 fc1e 	bl	80022f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2202      	movs	r2, #2
 800babc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f022 0201 	bic.w	r2, r2, #1
 800bace:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800bada:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	699b      	ldr	r3, [r3, #24]
 800bae0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bae4:	d119      	bne.n	800bb1a <HAL_SPI_Init+0x112>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800baee:	d103      	bne.n	800baf8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d008      	beq.n	800bb0a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d10c      	bne.n	800bb1a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bb04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb08:	d107      	bne.n	800bb1a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	681a      	ldr	r2, [r3, #0]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bb18:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	69da      	ldr	r2, [r3, #28]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb22:	431a      	orrs	r2, r3
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	431a      	orrs	r2, r3
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb2c:	ea42 0103 	orr.w	r1, r2, r3
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	68da      	ldr	r2, [r3, #12]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	430a      	orrs	r2, r1
 800bb3a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb44:	431a      	orrs	r2, r3
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb4a:	431a      	orrs	r2, r3
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	699b      	ldr	r3, [r3, #24]
 800bb50:	431a      	orrs	r2, r3
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	691b      	ldr	r3, [r3, #16]
 800bb56:	431a      	orrs	r2, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	695b      	ldr	r3, [r3, #20]
 800bb5c:	431a      	orrs	r2, r3
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6a1b      	ldr	r3, [r3, #32]
 800bb62:	431a      	orrs	r2, r3
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	431a      	orrs	r2, r3
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb6e:	431a      	orrs	r2, r3
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	689b      	ldr	r3, [r3, #8]
 800bb74:	431a      	orrs	r2, r3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb7a:	ea42 0103 	orr.w	r1, r2, r3
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	430a      	orrs	r2, r1
 800bb88:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d113      	bne.n	800bbba <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	689b      	ldr	r3, [r3, #8]
 800bb98:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bba4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	689b      	ldr	r3, [r3, #8]
 800bbac:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bbb8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f022 0201 	bic.w	r2, r2, #1
 800bbc8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00a      	beq.n	800bbec <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	430a      	orrs	r2, r1
 800bbea:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800bbfc:	2300      	movs	r3, #0
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3710      	adds	r7, #16
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	40013000 	.word	0x40013000
 800bc0c:	40003800 	.word	0x40003800
 800bc10:	40003c00 	.word	0x40003c00

0800bc14 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b08a      	sub	sp, #40	; 0x28
 800bc18:	af02      	add	r7, sp, #8
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	60b9      	str	r1, [r7, #8]
 800bc1e:	603b      	str	r3, [r7, #0]
 800bc20:	4613      	mov	r3, r2
 800bc22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bc24:	2300      	movs	r3, #0
 800bc26:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	3330      	adds	r3, #48	; 0x30
 800bc2e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc38:	d112      	bne.n	800bc60 <HAL_SPI_Receive+0x4c>
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	689b      	ldr	r3, [r3, #8]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d10e      	bne.n	800bc60 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2204      	movs	r2, #4
 800bc46:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bc4a:	88fa      	ldrh	r2, [r7, #6]
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	9300      	str	r3, [sp, #0]
 800bc50:	4613      	mov	r3, r2
 800bc52:	68ba      	ldr	r2, [r7, #8]
 800bc54:	68b9      	ldr	r1, [r7, #8]
 800bc56:	68f8      	ldr	r0, [r7, #12]
 800bc58:	f000 f978 	bl	800bf4c <HAL_SPI_TransmitReceive>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	e16f      	b.n	800bf40 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d101      	bne.n	800bc6e <HAL_SPI_Receive+0x5a>
 800bc6a:	2302      	movs	r3, #2
 800bc6c:	e168      	b.n	800bf40 <HAL_SPI_Receive+0x32c>
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2201      	movs	r2, #1
 800bc72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bc76:	f7f6 ff05 	bl	8002a84 <HAL_GetTick>
 800bc7a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bc82:	b2db      	uxtb	r3, r3
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d007      	beq.n	800bc98 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800bc88:	2302      	movs	r3, #2
 800bc8a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bc94:	7ffb      	ldrb	r3, [r7, #31]
 800bc96:	e153      	b.n	800bf40 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d002      	beq.n	800bca4 <HAL_SPI_Receive+0x90>
 800bc9e:	88fb      	ldrh	r3, [r7, #6]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d107      	bne.n	800bcb4 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800bca4:	2301      	movs	r3, #1
 800bca6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bcb0:	7ffb      	ldrb	r3, [r7, #31]
 800bcb2:	e145      	b.n	800bf40 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	2204      	movs	r2, #4
 800bcb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	68ba      	ldr	r2, [r7, #8]
 800bcc8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	88fa      	ldrh	r2, [r7, #6]
 800bcce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	88fa      	ldrh	r2, [r7, #6]
 800bcd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2200      	movs	r2, #0
 800bce4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2200      	movs	r2, #0
 800bcec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800bd04:	d107      	bne.n	800bd16 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bd14:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	685a      	ldr	r2, [r3, #4]
 800bd1c:	4b8a      	ldr	r3, [pc, #552]	; (800bf48 <HAL_SPI_Receive+0x334>)
 800bd1e:	4013      	ands	r3, r2
 800bd20:	88f9      	ldrh	r1, [r7, #6]
 800bd22:	68fa      	ldr	r2, [r7, #12]
 800bd24:	6812      	ldr	r2, [r2, #0]
 800bd26:	430b      	orrs	r3, r1
 800bd28:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f042 0201 	orr.w	r2, r2, #1
 800bd38:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd42:	d107      	bne.n	800bd54 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd52:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	2b0f      	cmp	r3, #15
 800bd5a:	d948      	bls.n	800bdee <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bd5c:	e040      	b.n	800bde0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	695a      	ldr	r2, [r3, #20]
 800bd64:	f248 0308 	movw	r3, #32776	; 0x8008
 800bd68:	4013      	ands	r3, r2
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d014      	beq.n	800bd98 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd76:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bd78:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd7e:	1d1a      	adds	r2, r3, #4
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	3b01      	subs	r3, #1
 800bd8e:	b29a      	uxth	r2, r3
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bd96:	e023      	b.n	800bde0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd98:	f7f6 fe74 	bl	8002a84 <HAL_GetTick>
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	1ad3      	subs	r3, r2, r3
 800bda2:	683a      	ldr	r2, [r7, #0]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d803      	bhi.n	800bdb0 <HAL_SPI_Receive+0x19c>
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bdae:	d102      	bne.n	800bdb6 <HAL_SPI_Receive+0x1a2>
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d114      	bne.n	800bde0 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bdb6:	68f8      	ldr	r0, [r7, #12]
 800bdb8:	f000 faf0 	bl	800c39c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bddc:	2303      	movs	r3, #3
 800bdde:	e0af      	b.n	800bf40 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d1b8      	bne.n	800bd5e <HAL_SPI_Receive+0x14a>
 800bdec:	e095      	b.n	800bf1a <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	68db      	ldr	r3, [r3, #12]
 800bdf2:	2b07      	cmp	r3, #7
 800bdf4:	f240 808b 	bls.w	800bf0e <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bdf8:	e03f      	b.n	800be7a <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	695b      	ldr	r3, [r3, #20]
 800be00:	f003 0301 	and.w	r3, r3, #1
 800be04:	2b01      	cmp	r3, #1
 800be06:	d114      	bne.n	800be32 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be0c:	69ba      	ldr	r2, [r7, #24]
 800be0e:	8812      	ldrh	r2, [r2, #0]
 800be10:	b292      	uxth	r2, r2
 800be12:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be18:	1c9a      	adds	r2, r3, #2
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be24:	b29b      	uxth	r3, r3
 800be26:	3b01      	subs	r3, #1
 800be28:	b29a      	uxth	r2, r3
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800be30:	e023      	b.n	800be7a <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be32:	f7f6 fe27 	bl	8002a84 <HAL_GetTick>
 800be36:	4602      	mov	r2, r0
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	1ad3      	subs	r3, r2, r3
 800be3c:	683a      	ldr	r2, [r7, #0]
 800be3e:	429a      	cmp	r2, r3
 800be40:	d803      	bhi.n	800be4a <HAL_SPI_Receive+0x236>
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be48:	d102      	bne.n	800be50 <HAL_SPI_Receive+0x23c>
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d114      	bne.n	800be7a <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800be50:	68f8      	ldr	r0, [r7, #12]
 800be52:	f000 faa3 	bl	800c39c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2200      	movs	r2, #0
 800be5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2201      	movs	r2, #1
 800be72:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800be76:	2303      	movs	r3, #3
 800be78:	e062      	b.n	800bf40 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be80:	b29b      	uxth	r3, r3
 800be82:	2b00      	cmp	r3, #0
 800be84:	d1b9      	bne.n	800bdfa <HAL_SPI_Receive+0x1e6>
 800be86:	e048      	b.n	800bf1a <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	695b      	ldr	r3, [r3, #20]
 800be8e:	f003 0301 	and.w	r3, r3, #1
 800be92:	2b01      	cmp	r3, #1
 800be94:	d117      	bne.n	800bec6 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bea2:	7812      	ldrb	r2, [r2, #0]
 800bea4:	b2d2      	uxtb	r2, r2
 800bea6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800beac:	1c5a      	adds	r2, r3, #1
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800beb8:	b29b      	uxth	r3, r3
 800beba:	3b01      	subs	r3, #1
 800bebc:	b29a      	uxth	r2, r3
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bec4:	e023      	b.n	800bf0e <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bec6:	f7f6 fddd 	bl	8002a84 <HAL_GetTick>
 800beca:	4602      	mov	r2, r0
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	1ad3      	subs	r3, r2, r3
 800bed0:	683a      	ldr	r2, [r7, #0]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d803      	bhi.n	800bede <HAL_SPI_Receive+0x2ca>
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bedc:	d102      	bne.n	800bee4 <HAL_SPI_Receive+0x2d0>
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d114      	bne.n	800bf0e <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bee4:	68f8      	ldr	r0, [r7, #12]
 800bee6:	f000 fa59 	bl	800c39c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2200      	movs	r2, #0
 800beee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bef8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	2201      	movs	r2, #1
 800bf06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bf0a:	2303      	movs	r3, #3
 800bf0c:	e018      	b.n	800bf40 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d1b6      	bne.n	800be88 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bf1a:	68f8      	ldr	r0, [r7, #12]
 800bf1c:	f000 fa3e 	bl	800c39c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2200      	movs	r2, #0
 800bf24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d001      	beq.n	800bf3e <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e000      	b.n	800bf40 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800bf3e:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3720      	adds	r7, #32
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}
 800bf48:	ffff0000 	.word	0xffff0000

0800bf4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b08e      	sub	sp, #56	; 0x38
 800bf50:	af02      	add	r7, sp, #8
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	607a      	str	r2, [r7, #4]
 800bf58:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	3320      	adds	r3, #32
 800bf66:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	3330      	adds	r3, #48	; 0x30
 800bf6e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bf76:	2b01      	cmp	r3, #1
 800bf78:	d101      	bne.n	800bf7e <HAL_SPI_TransmitReceive+0x32>
 800bf7a:	2302      	movs	r3, #2
 800bf7c:	e209      	b.n	800c392 <HAL_SPI_TransmitReceive+0x446>
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2201      	movs	r2, #1
 800bf82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bf86:	f7f6 fd7d 	bl	8002a84 <HAL_GetTick>
 800bf8a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800bf8c:	887b      	ldrh	r3, [r7, #2]
 800bf8e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800bf90:	887b      	ldrh	r3, [r7, #2]
 800bf92:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bf9a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bfa2:	7efb      	ldrb	r3, [r7, #27]
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d014      	beq.n	800bfd2 <HAL_SPI_TransmitReceive+0x86>
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bfae:	d106      	bne.n	800bfbe <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d102      	bne.n	800bfbe <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bfb8:	7efb      	ldrb	r3, [r7, #27]
 800bfba:	2b04      	cmp	r3, #4
 800bfbc:	d009      	beq.n	800bfd2 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800bfbe:	2302      	movs	r3, #2
 800bfc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bfcc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bfd0:	e1df      	b.n	800c392 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d005      	beq.n	800bfe4 <HAL_SPI_TransmitReceive+0x98>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d002      	beq.n	800bfe4 <HAL_SPI_TransmitReceive+0x98>
 800bfde:	887b      	ldrh	r3, [r7, #2]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d109      	bne.n	800bff8 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2200      	movs	r2, #0
 800bfee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bff2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bff6:	e1cc      	b.n	800c392 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bffe:	b2db      	uxtb	r3, r3
 800c000:	2b04      	cmp	r3, #4
 800c002:	d003      	beq.n	800c00c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2205      	movs	r2, #5
 800c008:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2200      	movs	r2, #0
 800c010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	887a      	ldrh	r2, [r7, #2]
 800c01e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	887a      	ldrh	r2, [r7, #2]
 800c026:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	68ba      	ldr	r2, [r7, #8]
 800c02e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	887a      	ldrh	r2, [r7, #2]
 800c034:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	887a      	ldrh	r2, [r7, #2]
 800c03c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	2200      	movs	r2, #0
 800c044:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	2200      	movs	r2, #0
 800c04a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	685a      	ldr	r2, [r3, #4]
 800c052:	4b82      	ldr	r3, [pc, #520]	; (800c25c <HAL_SPI_TransmitReceive+0x310>)
 800c054:	4013      	ands	r3, r2
 800c056:	8879      	ldrh	r1, [r7, #2]
 800c058:	68fa      	ldr	r2, [r7, #12]
 800c05a:	6812      	ldr	r2, [r2, #0]
 800c05c:	430b      	orrs	r3, r1
 800c05e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	681a      	ldr	r2, [r3, #0]
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f042 0201 	orr.w	r2, r2, #1
 800c06e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c078:	d107      	bne.n	800c08a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c088:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	68db      	ldr	r3, [r3, #12]
 800c08e:	2b0f      	cmp	r3, #15
 800c090:	d970      	bls.n	800c174 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c092:	e068      	b.n	800c166 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	695b      	ldr	r3, [r3, #20]
 800c09a:	f003 0302 	and.w	r3, r3, #2
 800c09e:	2b02      	cmp	r3, #2
 800c0a0:	d11a      	bne.n	800c0d8 <HAL_SPI_TransmitReceive+0x18c>
 800c0a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d017      	beq.n	800c0d8 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	6812      	ldr	r2, [r2, #0]
 800c0b2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0b8:	1d1a      	adds	r2, r3, #4
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	3b01      	subs	r3, #1
 800c0c8:	b29a      	uxth	r2, r3
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c0d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	695a      	ldr	r2, [r3, #20]
 800c0de:	f248 0308 	movw	r3, #32776	; 0x8008
 800c0e2:	4013      	ands	r3, r2
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d01a      	beq.n	800c11e <HAL_SPI_TransmitReceive+0x1d2>
 800c0e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d017      	beq.n	800c11e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c0f8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0fe:	1d1a      	adds	r2, r3, #4
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c10a:	b29b      	uxth	r3, r3
 800c10c:	3b01      	subs	r3, #1
 800c10e:	b29a      	uxth	r2, r3
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c11c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c11e:	f7f6 fcb1 	bl	8002a84 <HAL_GetTick>
 800c122:	4602      	mov	r2, r0
 800c124:	69fb      	ldr	r3, [r7, #28]
 800c126:	1ad3      	subs	r3, r2, r3
 800c128:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d803      	bhi.n	800c136 <HAL_SPI_TransmitReceive+0x1ea>
 800c12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c134:	d102      	bne.n	800c13c <HAL_SPI_TransmitReceive+0x1f0>
 800c136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d114      	bne.n	800c166 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c13c:	68f8      	ldr	r0, [r7, #12]
 800c13e:	f000 f92d 	bl	800c39c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2200      	movs	r2, #0
 800c146:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c150:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2201      	movs	r2, #1
 800c15e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c162:	2303      	movs	r3, #3
 800c164:	e115      	b.n	800c392 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c166:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d193      	bne.n	800c094 <HAL_SPI_TransmitReceive+0x148>
 800c16c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d190      	bne.n	800c094 <HAL_SPI_TransmitReceive+0x148>
 800c172:	e0e7      	b.n	800c344 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	2b07      	cmp	r3, #7
 800c17a:	f240 80dd 	bls.w	800c338 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c17e:	e066      	b.n	800c24e <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	695b      	ldr	r3, [r3, #20]
 800c186:	f003 0302 	and.w	r3, r3, #2
 800c18a:	2b02      	cmp	r3, #2
 800c18c:	d119      	bne.n	800c1c2 <HAL_SPI_TransmitReceive+0x276>
 800c18e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c190:	2b00      	cmp	r3, #0
 800c192:	d016      	beq.n	800c1c2 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c198:	881a      	ldrh	r2, [r3, #0]
 800c19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1a2:	1c9a      	adds	r2, r3, #2
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	3b01      	subs	r3, #1
 800c1b2:	b29a      	uxth	r2, r3
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c1c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	695b      	ldr	r3, [r3, #20]
 800c1c8:	f003 0301 	and.w	r3, r3, #1
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d11a      	bne.n	800c206 <HAL_SPI_TransmitReceive+0x2ba>
 800c1d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d017      	beq.n	800c206 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1da:	6a3a      	ldr	r2, [r7, #32]
 800c1dc:	8812      	ldrh	r2, [r2, #0]
 800c1de:	b292      	uxth	r2, r2
 800c1e0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1e6:	1c9a      	adds	r2, r3, #2
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c1f2:	b29b      	uxth	r3, r3
 800c1f4:	3b01      	subs	r3, #1
 800c1f6:	b29a      	uxth	r2, r3
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c204:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c206:	f7f6 fc3d 	bl	8002a84 <HAL_GetTick>
 800c20a:	4602      	mov	r2, r0
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	1ad3      	subs	r3, r2, r3
 800c210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c212:	429a      	cmp	r2, r3
 800c214:	d803      	bhi.n	800c21e <HAL_SPI_TransmitReceive+0x2d2>
 800c216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c21c:	d102      	bne.n	800c224 <HAL_SPI_TransmitReceive+0x2d8>
 800c21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c220:	2b00      	cmp	r3, #0
 800c222:	d114      	bne.n	800c24e <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	f000 f8b9 	bl	800c39c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2200      	movs	r2, #0
 800c22e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c238:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2201      	movs	r2, #1
 800c246:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c24a:	2303      	movs	r3, #3
 800c24c:	e0a1      	b.n	800c392 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c24e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c250:	2b00      	cmp	r3, #0
 800c252:	d195      	bne.n	800c180 <HAL_SPI_TransmitReceive+0x234>
 800c254:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c256:	2b00      	cmp	r3, #0
 800c258:	d192      	bne.n	800c180 <HAL_SPI_TransmitReceive+0x234>
 800c25a:	e073      	b.n	800c344 <HAL_SPI_TransmitReceive+0x3f8>
 800c25c:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	695b      	ldr	r3, [r3, #20]
 800c266:	f003 0302 	and.w	r3, r3, #2
 800c26a:	2b02      	cmp	r3, #2
 800c26c:	d11b      	bne.n	800c2a6 <HAL_SPI_TransmitReceive+0x35a>
 800c26e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c270:	2b00      	cmp	r3, #0
 800c272:	d018      	beq.n	800c2a6 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	3320      	adds	r3, #32
 800c27e:	7812      	ldrb	r2, [r2, #0]
 800c280:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c286:	1c5a      	adds	r2, r3, #1
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c292:	b29b      	uxth	r3, r3
 800c294:	3b01      	subs	r3, #1
 800c296:	b29a      	uxth	r2, r3
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c2a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	695b      	ldr	r3, [r3, #20]
 800c2ac:	f003 0301 	and.w	r3, r3, #1
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d11d      	bne.n	800c2f0 <HAL_SPI_TransmitReceive+0x3a4>
 800c2b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d01a      	beq.n	800c2f0 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2c6:	7812      	ldrb	r2, [r2, #0]
 800c2c8:	b2d2      	uxtb	r2, r2
 800c2ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2d0:	1c5a      	adds	r2, r3, #1
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	3b01      	subs	r3, #1
 800c2e0:	b29a      	uxth	r2, r3
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c2ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2f0:	f7f6 fbc8 	bl	8002a84 <HAL_GetTick>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	1ad3      	subs	r3, r2, r3
 800c2fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d803      	bhi.n	800c308 <HAL_SPI_TransmitReceive+0x3bc>
 800c300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c306:	d102      	bne.n	800c30e <HAL_SPI_TransmitReceive+0x3c2>
 800c308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d114      	bne.n	800c338 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c30e:	68f8      	ldr	r0, [r7, #12]
 800c310:	f000 f844 	bl	800c39c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2200      	movs	r2, #0
 800c318:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c322:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2201      	movs	r2, #1
 800c330:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c334:	2303      	movs	r3, #3
 800c336:	e02c      	b.n	800c392 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c338:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d190      	bne.n	800c260 <HAL_SPI_TransmitReceive+0x314>
 800c33e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c340:	2b00      	cmp	r3, #0
 800c342:	d18d      	bne.n	800c260 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c346:	9300      	str	r3, [sp, #0]
 800c348:	69fb      	ldr	r3, [r7, #28]
 800c34a:	2200      	movs	r2, #0
 800c34c:	2108      	movs	r1, #8
 800c34e:	68f8      	ldr	r0, [r7, #12]
 800c350:	f000 f8c4 	bl	800c4dc <SPI_WaitOnFlagUntilTimeout>
 800c354:	4603      	mov	r3, r0
 800c356:	2b00      	cmp	r3, #0
 800c358:	d007      	beq.n	800c36a <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c360:	f043 0220 	orr.w	r2, r3, #32
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c36a:	68f8      	ldr	r0, [r7, #12]
 800c36c:	f000 f816 	bl	800c39c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2200      	movs	r2, #0
 800c374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2201      	movs	r2, #1
 800c37c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c386:	2b00      	cmp	r3, #0
 800c388:	d001      	beq.n	800c38e <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800c38a:	2301      	movs	r3, #1
 800c38c:	e001      	b.n	800c392 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800c38e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c392:	4618      	mov	r0, r3
 800c394:	3730      	adds	r7, #48	; 0x30
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
 800c39a:	bf00      	nop

0800c39c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b085      	sub	sp, #20
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	695b      	ldr	r3, [r3, #20]
 800c3aa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	699a      	ldr	r2, [r3, #24]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f042 0208 	orr.w	r2, r2, #8
 800c3ba:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	699a      	ldr	r2, [r3, #24]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f042 0210 	orr.w	r2, r2, #16
 800c3ca:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f022 0201 	bic.w	r2, r2, #1
 800c3da:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	6919      	ldr	r1, [r3, #16]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681a      	ldr	r2, [r3, #0]
 800c3e6:	4b3c      	ldr	r3, [pc, #240]	; (800c4d8 <SPI_CloseTransfer+0x13c>)
 800c3e8:	400b      	ands	r3, r1
 800c3ea:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	689a      	ldr	r2, [r3, #8]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c3fa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c402:	b2db      	uxtb	r3, r3
 800c404:	2b04      	cmp	r3, #4
 800c406:	d014      	beq.n	800c432 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f003 0320 	and.w	r3, r3, #32
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d00f      	beq.n	800c432 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c418:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	699a      	ldr	r2, [r3, #24]
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f042 0220 	orr.w	r2, r2, #32
 800c430:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c438:	b2db      	uxtb	r3, r3
 800c43a:	2b03      	cmp	r3, #3
 800c43c:	d014      	beq.n	800c468 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c444:	2b00      	cmp	r3, #0
 800c446:	d00f      	beq.n	800c468 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c44e:	f043 0204 	orr.w	r2, r3, #4
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	699a      	ldr	r2, [r3, #24]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c466:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d00f      	beq.n	800c492 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c478:	f043 0201 	orr.w	r2, r3, #1
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	699a      	ldr	r2, [r3, #24]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c490:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d00f      	beq.n	800c4bc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4a2:	f043 0208 	orr.w	r2, r3, #8
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	699a      	ldr	r2, [r3, #24]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c4ba:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c4cc:	bf00      	nop
 800c4ce:	3714      	adds	r7, #20
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr
 800c4d8:	fffffc90 	.word	0xfffffc90

0800c4dc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	603b      	str	r3, [r7, #0]
 800c4e8:	4613      	mov	r3, r2
 800c4ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c4ec:	e010      	b.n	800c510 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c4ee:	f7f6 fac9 	bl	8002a84 <HAL_GetTick>
 800c4f2:	4602      	mov	r2, r0
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	1ad3      	subs	r3, r2, r3
 800c4f8:	69ba      	ldr	r2, [r7, #24]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d803      	bhi.n	800c506 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c4fe:	69bb      	ldr	r3, [r7, #24]
 800c500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c504:	d102      	bne.n	800c50c <SPI_WaitOnFlagUntilTimeout+0x30>
 800c506:	69bb      	ldr	r3, [r7, #24]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d101      	bne.n	800c510 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c50c:	2303      	movs	r3, #3
 800c50e:	e00f      	b.n	800c530 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	695a      	ldr	r2, [r3, #20]
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	4013      	ands	r3, r2
 800c51a:	68ba      	ldr	r2, [r7, #8]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	bf0c      	ite	eq
 800c520:	2301      	moveq	r3, #1
 800c522:	2300      	movne	r3, #0
 800c524:	b2db      	uxtb	r3, r3
 800c526:	461a      	mov	r2, r3
 800c528:	79fb      	ldrb	r3, [r7, #7]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d0df      	beq.n	800c4ee <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c52e:	2300      	movs	r3, #0
}
 800c530:	4618      	mov	r0, r3
 800c532:	3710      	adds	r7, #16
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c538:	b480      	push	{r7}
 800c53a:	b085      	sub	sp, #20
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c544:	095b      	lsrs	r3, r3, #5
 800c546:	3301      	adds	r3, #1
 800c548:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	3301      	adds	r3, #1
 800c550:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	3307      	adds	r3, #7
 800c556:	08db      	lsrs	r3, r3, #3
 800c558:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	68fa      	ldr	r2, [r7, #12]
 800c55e:	fb02 f303 	mul.w	r3, r2, r3
}
 800c562:	4618      	mov	r0, r3
 800c564:	3714      	adds	r7, #20
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr
	...

0800c570 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b084      	sub	sp, #16
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c57a:	2300      	movs	r3, #0
 800c57c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d109      	bne.n	800c598 <HAL_TIM_OC_Start_IT+0x28>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c58a:	b2db      	uxtb	r3, r3
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	bf14      	ite	ne
 800c590:	2301      	movne	r3, #1
 800c592:	2300      	moveq	r3, #0
 800c594:	b2db      	uxtb	r3, r3
 800c596:	e03c      	b.n	800c612 <HAL_TIM_OC_Start_IT+0xa2>
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	2b04      	cmp	r3, #4
 800c59c:	d109      	bne.n	800c5b2 <HAL_TIM_OC_Start_IT+0x42>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c5a4:	b2db      	uxtb	r3, r3
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	bf14      	ite	ne
 800c5aa:	2301      	movne	r3, #1
 800c5ac:	2300      	moveq	r3, #0
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	e02f      	b.n	800c612 <HAL_TIM_OC_Start_IT+0xa2>
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	2b08      	cmp	r3, #8
 800c5b6:	d109      	bne.n	800c5cc <HAL_TIM_OC_Start_IT+0x5c>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c5be:	b2db      	uxtb	r3, r3
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	bf14      	ite	ne
 800c5c4:	2301      	movne	r3, #1
 800c5c6:	2300      	moveq	r3, #0
 800c5c8:	b2db      	uxtb	r3, r3
 800c5ca:	e022      	b.n	800c612 <HAL_TIM_OC_Start_IT+0xa2>
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	2b0c      	cmp	r3, #12
 800c5d0:	d109      	bne.n	800c5e6 <HAL_TIM_OC_Start_IT+0x76>
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5d8:	b2db      	uxtb	r3, r3
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	bf14      	ite	ne
 800c5de:	2301      	movne	r3, #1
 800c5e0:	2300      	moveq	r3, #0
 800c5e2:	b2db      	uxtb	r3, r3
 800c5e4:	e015      	b.n	800c612 <HAL_TIM_OC_Start_IT+0xa2>
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	2b10      	cmp	r3, #16
 800c5ea:	d109      	bne.n	800c600 <HAL_TIM_OC_Start_IT+0x90>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	bf14      	ite	ne
 800c5f8:	2301      	movne	r3, #1
 800c5fa:	2300      	moveq	r3, #0
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	e008      	b.n	800c612 <HAL_TIM_OC_Start_IT+0xa2>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c606:	b2db      	uxtb	r3, r3
 800c608:	2b01      	cmp	r3, #1
 800c60a:	bf14      	ite	ne
 800c60c:	2301      	movne	r3, #1
 800c60e:	2300      	moveq	r3, #0
 800c610:	b2db      	uxtb	r3, r3
 800c612:	2b00      	cmp	r3, #0
 800c614:	d001      	beq.n	800c61a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c616:	2301      	movs	r3, #1
 800c618:	e0ec      	b.n	800c7f4 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d104      	bne.n	800c62a <HAL_TIM_OC_Start_IT+0xba>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2202      	movs	r2, #2
 800c624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c628:	e023      	b.n	800c672 <HAL_TIM_OC_Start_IT+0x102>
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	2b04      	cmp	r3, #4
 800c62e:	d104      	bne.n	800c63a <HAL_TIM_OC_Start_IT+0xca>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2202      	movs	r2, #2
 800c634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c638:	e01b      	b.n	800c672 <HAL_TIM_OC_Start_IT+0x102>
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	2b08      	cmp	r3, #8
 800c63e:	d104      	bne.n	800c64a <HAL_TIM_OC_Start_IT+0xda>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2202      	movs	r2, #2
 800c644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c648:	e013      	b.n	800c672 <HAL_TIM_OC_Start_IT+0x102>
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	2b0c      	cmp	r3, #12
 800c64e:	d104      	bne.n	800c65a <HAL_TIM_OC_Start_IT+0xea>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2202      	movs	r2, #2
 800c654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c658:	e00b      	b.n	800c672 <HAL_TIM_OC_Start_IT+0x102>
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	2b10      	cmp	r3, #16
 800c65e:	d104      	bne.n	800c66a <HAL_TIM_OC_Start_IT+0xfa>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2202      	movs	r2, #2
 800c664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c668:	e003      	b.n	800c672 <HAL_TIM_OC_Start_IT+0x102>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2202      	movs	r2, #2
 800c66e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	2b0c      	cmp	r3, #12
 800c676:	d841      	bhi.n	800c6fc <HAL_TIM_OC_Start_IT+0x18c>
 800c678:	a201      	add	r2, pc, #4	; (adr r2, 800c680 <HAL_TIM_OC_Start_IT+0x110>)
 800c67a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c67e:	bf00      	nop
 800c680:	0800c6b5 	.word	0x0800c6b5
 800c684:	0800c6fd 	.word	0x0800c6fd
 800c688:	0800c6fd 	.word	0x0800c6fd
 800c68c:	0800c6fd 	.word	0x0800c6fd
 800c690:	0800c6c7 	.word	0x0800c6c7
 800c694:	0800c6fd 	.word	0x0800c6fd
 800c698:	0800c6fd 	.word	0x0800c6fd
 800c69c:	0800c6fd 	.word	0x0800c6fd
 800c6a0:	0800c6d9 	.word	0x0800c6d9
 800c6a4:	0800c6fd 	.word	0x0800c6fd
 800c6a8:	0800c6fd 	.word	0x0800c6fd
 800c6ac:	0800c6fd 	.word	0x0800c6fd
 800c6b0:	0800c6eb 	.word	0x0800c6eb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	68da      	ldr	r2, [r3, #12]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f042 0202 	orr.w	r2, r2, #2
 800c6c2:	60da      	str	r2, [r3, #12]
      break;
 800c6c4:	e01d      	b.n	800c702 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	68da      	ldr	r2, [r3, #12]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f042 0204 	orr.w	r2, r2, #4
 800c6d4:	60da      	str	r2, [r3, #12]
      break;
 800c6d6:	e014      	b.n	800c702 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	68da      	ldr	r2, [r3, #12]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f042 0208 	orr.w	r2, r2, #8
 800c6e6:	60da      	str	r2, [r3, #12]
      break;
 800c6e8:	e00b      	b.n	800c702 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	68da      	ldr	r2, [r3, #12]
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f042 0210 	orr.w	r2, r2, #16
 800c6f8:	60da      	str	r2, [r3, #12]
      break;
 800c6fa:	e002      	b.n	800c702 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	73fb      	strb	r3, [r7, #15]
      break;
 800c700:	bf00      	nop
  }

  if (status == HAL_OK)
 800c702:	7bfb      	ldrb	r3, [r7, #15]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d174      	bne.n	800c7f2 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	2201      	movs	r2, #1
 800c70e:	6839      	ldr	r1, [r7, #0]
 800c710:	4618      	mov	r0, r3
 800c712:	f000 fea9 	bl	800d468 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a38      	ldr	r2, [pc, #224]	; (800c7fc <HAL_TIM_OC_Start_IT+0x28c>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d013      	beq.n	800c748 <HAL_TIM_OC_Start_IT+0x1d8>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4a36      	ldr	r2, [pc, #216]	; (800c800 <HAL_TIM_OC_Start_IT+0x290>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d00e      	beq.n	800c748 <HAL_TIM_OC_Start_IT+0x1d8>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4a35      	ldr	r2, [pc, #212]	; (800c804 <HAL_TIM_OC_Start_IT+0x294>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d009      	beq.n	800c748 <HAL_TIM_OC_Start_IT+0x1d8>
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4a33      	ldr	r2, [pc, #204]	; (800c808 <HAL_TIM_OC_Start_IT+0x298>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d004      	beq.n	800c748 <HAL_TIM_OC_Start_IT+0x1d8>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	4a32      	ldr	r2, [pc, #200]	; (800c80c <HAL_TIM_OC_Start_IT+0x29c>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d101      	bne.n	800c74c <HAL_TIM_OC_Start_IT+0x1dc>
 800c748:	2301      	movs	r3, #1
 800c74a:	e000      	b.n	800c74e <HAL_TIM_OC_Start_IT+0x1de>
 800c74c:	2300      	movs	r3, #0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d007      	beq.n	800c762 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c760:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4a25      	ldr	r2, [pc, #148]	; (800c7fc <HAL_TIM_OC_Start_IT+0x28c>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d022      	beq.n	800c7b2 <HAL_TIM_OC_Start_IT+0x242>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c774:	d01d      	beq.n	800c7b2 <HAL_TIM_OC_Start_IT+0x242>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a25      	ldr	r2, [pc, #148]	; (800c810 <HAL_TIM_OC_Start_IT+0x2a0>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d018      	beq.n	800c7b2 <HAL_TIM_OC_Start_IT+0x242>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4a23      	ldr	r2, [pc, #140]	; (800c814 <HAL_TIM_OC_Start_IT+0x2a4>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d013      	beq.n	800c7b2 <HAL_TIM_OC_Start_IT+0x242>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4a22      	ldr	r2, [pc, #136]	; (800c818 <HAL_TIM_OC_Start_IT+0x2a8>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d00e      	beq.n	800c7b2 <HAL_TIM_OC_Start_IT+0x242>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a19      	ldr	r2, [pc, #100]	; (800c800 <HAL_TIM_OC_Start_IT+0x290>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d009      	beq.n	800c7b2 <HAL_TIM_OC_Start_IT+0x242>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4a1e      	ldr	r2, [pc, #120]	; (800c81c <HAL_TIM_OC_Start_IT+0x2ac>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d004      	beq.n	800c7b2 <HAL_TIM_OC_Start_IT+0x242>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4a15      	ldr	r2, [pc, #84]	; (800c804 <HAL_TIM_OC_Start_IT+0x294>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d115      	bne.n	800c7de <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	689a      	ldr	r2, [r3, #8]
 800c7b8:	4b19      	ldr	r3, [pc, #100]	; (800c820 <HAL_TIM_OC_Start_IT+0x2b0>)
 800c7ba:	4013      	ands	r3, r2
 800c7bc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	2b06      	cmp	r3, #6
 800c7c2:	d015      	beq.n	800c7f0 <HAL_TIM_OC_Start_IT+0x280>
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7ca:	d011      	beq.n	800c7f0 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f042 0201 	orr.w	r2, r2, #1
 800c7da:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7dc:	e008      	b.n	800c7f0 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f042 0201 	orr.w	r2, r2, #1
 800c7ec:	601a      	str	r2, [r3, #0]
 800c7ee:	e000      	b.n	800c7f2 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7f0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c7f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3710      	adds	r7, #16
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	40010000 	.word	0x40010000
 800c800:	40010400 	.word	0x40010400
 800c804:	40014000 	.word	0x40014000
 800c808:	40014400 	.word	0x40014400
 800c80c:	40014800 	.word	0x40014800
 800c810:	40000400 	.word	0x40000400
 800c814:	40000800 	.word	0x40000800
 800c818:	40000c00 	.word	0x40000c00
 800c81c:	40001800 	.word	0x40001800
 800c820:	00010007 	.word	0x00010007

0800c824 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d101      	bne.n	800c836 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c832:	2301      	movs	r3, #1
 800c834:	e049      	b.n	800c8ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d106      	bne.n	800c850 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2200      	movs	r2, #0
 800c846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f7f5 fe02 	bl	8002454 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2202      	movs	r2, #2
 800c854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681a      	ldr	r2, [r3, #0]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	3304      	adds	r3, #4
 800c860:	4619      	mov	r1, r3
 800c862:	4610      	mov	r0, r2
 800c864:	f000 fa90 	bl	800cd88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2201      	movs	r2, #1
 800c86c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2201      	movs	r2, #1
 800c874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2201      	movs	r2, #1
 800c87c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2201      	movs	r2, #1
 800c884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2201      	movs	r2, #1
 800c88c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2201      	movs	r2, #1
 800c894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2201      	movs	r2, #1
 800c89c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c8c8:	2300      	movs	r3, #0
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3708      	adds	r7, #8
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}

0800c8d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c8d2:	b580      	push	{r7, lr}
 800c8d4:	b082      	sub	sp, #8
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	691b      	ldr	r3, [r3, #16]
 800c8e0:	f003 0302 	and.w	r3, r3, #2
 800c8e4:	2b02      	cmp	r3, #2
 800c8e6:	d122      	bne.n	800c92e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	68db      	ldr	r3, [r3, #12]
 800c8ee:	f003 0302 	and.w	r3, r3, #2
 800c8f2:	2b02      	cmp	r3, #2
 800c8f4:	d11b      	bne.n	800c92e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f06f 0202 	mvn.w	r2, #2
 800c8fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2201      	movs	r2, #1
 800c904:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	699b      	ldr	r3, [r3, #24]
 800c90c:	f003 0303 	and.w	r3, r3, #3
 800c910:	2b00      	cmp	r3, #0
 800c912:	d003      	beq.n	800c91c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f000 fa19 	bl	800cd4c <HAL_TIM_IC_CaptureCallback>
 800c91a:	e005      	b.n	800c928 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f7f4 f9d7 	bl	8000cd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 fa1c 	bl	800cd60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2200      	movs	r2, #0
 800c92c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	691b      	ldr	r3, [r3, #16]
 800c934:	f003 0304 	and.w	r3, r3, #4
 800c938:	2b04      	cmp	r3, #4
 800c93a:	d122      	bne.n	800c982 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	68db      	ldr	r3, [r3, #12]
 800c942:	f003 0304 	and.w	r3, r3, #4
 800c946:	2b04      	cmp	r3, #4
 800c948:	d11b      	bne.n	800c982 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f06f 0204 	mvn.w	r2, #4
 800c952:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2202      	movs	r2, #2
 800c958:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	699b      	ldr	r3, [r3, #24]
 800c960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c964:	2b00      	cmp	r3, #0
 800c966:	d003      	beq.n	800c970 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 f9ef 	bl	800cd4c <HAL_TIM_IC_CaptureCallback>
 800c96e:	e005      	b.n	800c97c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f7f4 f9ad 	bl	8000cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 f9f2 	bl	800cd60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2200      	movs	r2, #0
 800c980:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	691b      	ldr	r3, [r3, #16]
 800c988:	f003 0308 	and.w	r3, r3, #8
 800c98c:	2b08      	cmp	r3, #8
 800c98e:	d122      	bne.n	800c9d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	68db      	ldr	r3, [r3, #12]
 800c996:	f003 0308 	and.w	r3, r3, #8
 800c99a:	2b08      	cmp	r3, #8
 800c99c:	d11b      	bne.n	800c9d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f06f 0208 	mvn.w	r2, #8
 800c9a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2204      	movs	r2, #4
 800c9ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	69db      	ldr	r3, [r3, #28]
 800c9b4:	f003 0303 	and.w	r3, r3, #3
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d003      	beq.n	800c9c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f000 f9c5 	bl	800cd4c <HAL_TIM_IC_CaptureCallback>
 800c9c2:	e005      	b.n	800c9d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f7f4 f983 	bl	8000cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 f9c8 	bl	800cd60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	691b      	ldr	r3, [r3, #16]
 800c9dc:	f003 0310 	and.w	r3, r3, #16
 800c9e0:	2b10      	cmp	r3, #16
 800c9e2:	d122      	bne.n	800ca2a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	68db      	ldr	r3, [r3, #12]
 800c9ea:	f003 0310 	and.w	r3, r3, #16
 800c9ee:	2b10      	cmp	r3, #16
 800c9f0:	d11b      	bne.n	800ca2a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f06f 0210 	mvn.w	r2, #16
 800c9fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2208      	movs	r2, #8
 800ca00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	69db      	ldr	r3, [r3, #28]
 800ca08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d003      	beq.n	800ca18 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f000 f99b 	bl	800cd4c <HAL_TIM_IC_CaptureCallback>
 800ca16:	e005      	b.n	800ca24 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f7f4 f959 	bl	8000cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 f99e 	bl	800cd60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2200      	movs	r2, #0
 800ca28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	691b      	ldr	r3, [r3, #16]
 800ca30:	f003 0301 	and.w	r3, r3, #1
 800ca34:	2b01      	cmp	r3, #1
 800ca36:	d10e      	bne.n	800ca56 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	68db      	ldr	r3, [r3, #12]
 800ca3e:	f003 0301 	and.w	r3, r3, #1
 800ca42:	2b01      	cmp	r3, #1
 800ca44:	d107      	bne.n	800ca56 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f06f 0201 	mvn.w	r2, #1
 800ca4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f000 f971 	bl	800cd38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	691b      	ldr	r3, [r3, #16]
 800ca5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca60:	2b80      	cmp	r3, #128	; 0x80
 800ca62:	d10e      	bne.n	800ca82 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	68db      	ldr	r3, [r3, #12]
 800ca6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca6e:	2b80      	cmp	r3, #128	; 0x80
 800ca70:	d107      	bne.n	800ca82 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ca7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 fe2f 	bl	800d6e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	691b      	ldr	r3, [r3, #16]
 800ca88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca90:	d10e      	bne.n	800cab0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	68db      	ldr	r3, [r3, #12]
 800ca98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca9c:	2b80      	cmp	r3, #128	; 0x80
 800ca9e:	d107      	bne.n	800cab0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800caa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 fe22 	bl	800d6f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	691b      	ldr	r3, [r3, #16]
 800cab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caba:	2b40      	cmp	r3, #64	; 0x40
 800cabc:	d10e      	bne.n	800cadc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	68db      	ldr	r3, [r3, #12]
 800cac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cac8:	2b40      	cmp	r3, #64	; 0x40
 800caca:	d107      	bne.n	800cadc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f000 f94c 	bl	800cd74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	691b      	ldr	r3, [r3, #16]
 800cae2:	f003 0320 	and.w	r3, r3, #32
 800cae6:	2b20      	cmp	r3, #32
 800cae8:	d10e      	bne.n	800cb08 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	68db      	ldr	r3, [r3, #12]
 800caf0:	f003 0320 	and.w	r3, r3, #32
 800caf4:	2b20      	cmp	r3, #32
 800caf6:	d107      	bne.n	800cb08 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f06f 0220 	mvn.w	r2, #32
 800cb00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f000 fde2 	bl	800d6cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cb08:	bf00      	nop
 800cb0a:	3708      	adds	r7, #8
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b086      	sub	sp, #24
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb26:	2b01      	cmp	r3, #1
 800cb28:	d101      	bne.n	800cb2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cb2a:	2302      	movs	r3, #2
 800cb2c:	e0ff      	b.n	800cd2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	2201      	movs	r2, #1
 800cb32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2b14      	cmp	r3, #20
 800cb3a:	f200 80f0 	bhi.w	800cd1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cb3e:	a201      	add	r2, pc, #4	; (adr r2, 800cb44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cb40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb44:	0800cb99 	.word	0x0800cb99
 800cb48:	0800cd1f 	.word	0x0800cd1f
 800cb4c:	0800cd1f 	.word	0x0800cd1f
 800cb50:	0800cd1f 	.word	0x0800cd1f
 800cb54:	0800cbd9 	.word	0x0800cbd9
 800cb58:	0800cd1f 	.word	0x0800cd1f
 800cb5c:	0800cd1f 	.word	0x0800cd1f
 800cb60:	0800cd1f 	.word	0x0800cd1f
 800cb64:	0800cc1b 	.word	0x0800cc1b
 800cb68:	0800cd1f 	.word	0x0800cd1f
 800cb6c:	0800cd1f 	.word	0x0800cd1f
 800cb70:	0800cd1f 	.word	0x0800cd1f
 800cb74:	0800cc5b 	.word	0x0800cc5b
 800cb78:	0800cd1f 	.word	0x0800cd1f
 800cb7c:	0800cd1f 	.word	0x0800cd1f
 800cb80:	0800cd1f 	.word	0x0800cd1f
 800cb84:	0800cc9d 	.word	0x0800cc9d
 800cb88:	0800cd1f 	.word	0x0800cd1f
 800cb8c:	0800cd1f 	.word	0x0800cd1f
 800cb90:	0800cd1f 	.word	0x0800cd1f
 800cb94:	0800ccdd 	.word	0x0800ccdd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	68b9      	ldr	r1, [r7, #8]
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f000 f98c 	bl	800cebc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	699a      	ldr	r2, [r3, #24]
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f042 0208 	orr.w	r2, r2, #8
 800cbb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	699a      	ldr	r2, [r3, #24]
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	f022 0204 	bic.w	r2, r2, #4
 800cbc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	6999      	ldr	r1, [r3, #24]
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	691a      	ldr	r2, [r3, #16]
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	430a      	orrs	r2, r1
 800cbd4:	619a      	str	r2, [r3, #24]
      break;
 800cbd6:	e0a5      	b.n	800cd24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	68b9      	ldr	r1, [r7, #8]
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f000 f9fc 	bl	800cfdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	699a      	ldr	r2, [r3, #24]
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cbf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	699a      	ldr	r2, [r3, #24]
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	6999      	ldr	r1, [r3, #24]
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	691b      	ldr	r3, [r3, #16]
 800cc0e:	021a      	lsls	r2, r3, #8
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	430a      	orrs	r2, r1
 800cc16:	619a      	str	r2, [r3, #24]
      break;
 800cc18:	e084      	b.n	800cd24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	68b9      	ldr	r1, [r7, #8]
 800cc20:	4618      	mov	r0, r3
 800cc22:	f000 fa65 	bl	800d0f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	69da      	ldr	r2, [r3, #28]
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f042 0208 	orr.w	r2, r2, #8
 800cc34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	69da      	ldr	r2, [r3, #28]
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f022 0204 	bic.w	r2, r2, #4
 800cc44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	69d9      	ldr	r1, [r3, #28]
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	691a      	ldr	r2, [r3, #16]
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	430a      	orrs	r2, r1
 800cc56:	61da      	str	r2, [r3, #28]
      break;
 800cc58:	e064      	b.n	800cd24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	68b9      	ldr	r1, [r7, #8]
 800cc60:	4618      	mov	r0, r3
 800cc62:	f000 facd 	bl	800d200 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	69da      	ldr	r2, [r3, #28]
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	69da      	ldr	r2, [r3, #28]
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	69d9      	ldr	r1, [r3, #28]
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	691b      	ldr	r3, [r3, #16]
 800cc90:	021a      	lsls	r2, r3, #8
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	430a      	orrs	r2, r1
 800cc98:	61da      	str	r2, [r3, #28]
      break;
 800cc9a:	e043      	b.n	800cd24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	68b9      	ldr	r1, [r7, #8]
 800cca2:	4618      	mov	r0, r3
 800cca4:	f000 fb16 	bl	800d2d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f042 0208 	orr.w	r2, r2, #8
 800ccb6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f022 0204 	bic.w	r2, r2, #4
 800ccc6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	691a      	ldr	r2, [r3, #16]
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	430a      	orrs	r2, r1
 800ccd8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ccda:	e023      	b.n	800cd24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	68b9      	ldr	r1, [r7, #8]
 800cce2:	4618      	mov	r0, r3
 800cce4:	f000 fb5a 	bl	800d39c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ccf6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	691b      	ldr	r3, [r3, #16]
 800cd12:	021a      	lsls	r2, r3, #8
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	430a      	orrs	r2, r1
 800cd1a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cd1c:	e002      	b.n	800cd24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	75fb      	strb	r3, [r7, #23]
      break;
 800cd22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2200      	movs	r2, #0
 800cd28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cd2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3718      	adds	r7, #24
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop

0800cd38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b083      	sub	sp, #12
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cd40:	bf00      	nop
 800cd42:	370c      	adds	r7, #12
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr

0800cd4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b083      	sub	sp, #12
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cd54:	bf00      	nop
 800cd56:	370c      	adds	r7, #12
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr

0800cd60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b083      	sub	sp, #12
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cd68:	bf00      	nop
 800cd6a:	370c      	adds	r7, #12
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd72:	4770      	bx	lr

0800cd74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b083      	sub	sp, #12
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cd7c:	bf00      	nop
 800cd7e:	370c      	adds	r7, #12
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr

0800cd88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cd88:	b480      	push	{r7}
 800cd8a:	b085      	sub	sp, #20
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	4a40      	ldr	r2, [pc, #256]	; (800ce9c <TIM_Base_SetConfig+0x114>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d013      	beq.n	800cdc8 <TIM_Base_SetConfig+0x40>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cda6:	d00f      	beq.n	800cdc8 <TIM_Base_SetConfig+0x40>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	4a3d      	ldr	r2, [pc, #244]	; (800cea0 <TIM_Base_SetConfig+0x118>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d00b      	beq.n	800cdc8 <TIM_Base_SetConfig+0x40>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	4a3c      	ldr	r2, [pc, #240]	; (800cea4 <TIM_Base_SetConfig+0x11c>)
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	d007      	beq.n	800cdc8 <TIM_Base_SetConfig+0x40>
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	4a3b      	ldr	r2, [pc, #236]	; (800cea8 <TIM_Base_SetConfig+0x120>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d003      	beq.n	800cdc8 <TIM_Base_SetConfig+0x40>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	4a3a      	ldr	r2, [pc, #232]	; (800ceac <TIM_Base_SetConfig+0x124>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d108      	bne.n	800cdda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	68fa      	ldr	r2, [r7, #12]
 800cdd6:	4313      	orrs	r3, r2
 800cdd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	4a2f      	ldr	r2, [pc, #188]	; (800ce9c <TIM_Base_SetConfig+0x114>)
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d01f      	beq.n	800ce22 <TIM_Base_SetConfig+0x9a>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cde8:	d01b      	beq.n	800ce22 <TIM_Base_SetConfig+0x9a>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	4a2c      	ldr	r2, [pc, #176]	; (800cea0 <TIM_Base_SetConfig+0x118>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d017      	beq.n	800ce22 <TIM_Base_SetConfig+0x9a>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	4a2b      	ldr	r2, [pc, #172]	; (800cea4 <TIM_Base_SetConfig+0x11c>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d013      	beq.n	800ce22 <TIM_Base_SetConfig+0x9a>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	4a2a      	ldr	r2, [pc, #168]	; (800cea8 <TIM_Base_SetConfig+0x120>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d00f      	beq.n	800ce22 <TIM_Base_SetConfig+0x9a>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	4a29      	ldr	r2, [pc, #164]	; (800ceac <TIM_Base_SetConfig+0x124>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d00b      	beq.n	800ce22 <TIM_Base_SetConfig+0x9a>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	4a28      	ldr	r2, [pc, #160]	; (800ceb0 <TIM_Base_SetConfig+0x128>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d007      	beq.n	800ce22 <TIM_Base_SetConfig+0x9a>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	4a27      	ldr	r2, [pc, #156]	; (800ceb4 <TIM_Base_SetConfig+0x12c>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d003      	beq.n	800ce22 <TIM_Base_SetConfig+0x9a>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	4a26      	ldr	r2, [pc, #152]	; (800ceb8 <TIM_Base_SetConfig+0x130>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d108      	bne.n	800ce34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	68db      	ldr	r3, [r3, #12]
 800ce2e:	68fa      	ldr	r2, [r7, #12]
 800ce30:	4313      	orrs	r3, r2
 800ce32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	695b      	ldr	r3, [r3, #20]
 800ce3e:	4313      	orrs	r3, r2
 800ce40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	68fa      	ldr	r2, [r7, #12]
 800ce46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	689a      	ldr	r2, [r3, #8]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	4a10      	ldr	r2, [pc, #64]	; (800ce9c <TIM_Base_SetConfig+0x114>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d00f      	beq.n	800ce80 <TIM_Base_SetConfig+0xf8>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	4a12      	ldr	r2, [pc, #72]	; (800ceac <TIM_Base_SetConfig+0x124>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d00b      	beq.n	800ce80 <TIM_Base_SetConfig+0xf8>
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	4a11      	ldr	r2, [pc, #68]	; (800ceb0 <TIM_Base_SetConfig+0x128>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d007      	beq.n	800ce80 <TIM_Base_SetConfig+0xf8>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	4a10      	ldr	r2, [pc, #64]	; (800ceb4 <TIM_Base_SetConfig+0x12c>)
 800ce74:	4293      	cmp	r3, r2
 800ce76:	d003      	beq.n	800ce80 <TIM_Base_SetConfig+0xf8>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	4a0f      	ldr	r2, [pc, #60]	; (800ceb8 <TIM_Base_SetConfig+0x130>)
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	d103      	bne.n	800ce88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	691a      	ldr	r2, [r3, #16]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	615a      	str	r2, [r3, #20]
}
 800ce8e:	bf00      	nop
 800ce90:	3714      	adds	r7, #20
 800ce92:	46bd      	mov	sp, r7
 800ce94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce98:	4770      	bx	lr
 800ce9a:	bf00      	nop
 800ce9c:	40010000 	.word	0x40010000
 800cea0:	40000400 	.word	0x40000400
 800cea4:	40000800 	.word	0x40000800
 800cea8:	40000c00 	.word	0x40000c00
 800ceac:	40010400 	.word	0x40010400
 800ceb0:	40014000 	.word	0x40014000
 800ceb4:	40014400 	.word	0x40014400
 800ceb8:	40014800 	.word	0x40014800

0800cebc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b087      	sub	sp, #28
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6a1b      	ldr	r3, [r3, #32]
 800ceca:	f023 0201 	bic.w	r2, r3, #1
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6a1b      	ldr	r3, [r3, #32]
 800ced6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	685b      	ldr	r3, [r3, #4]
 800cedc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	699b      	ldr	r3, [r3, #24]
 800cee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cee4:	68fa      	ldr	r2, [r7, #12]
 800cee6:	4b37      	ldr	r3, [pc, #220]	; (800cfc4 <TIM_OC1_SetConfig+0x108>)
 800cee8:	4013      	ands	r3, r2
 800ceea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	f023 0303 	bic.w	r3, r3, #3
 800cef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	68fa      	ldr	r2, [r7, #12]
 800cefa:	4313      	orrs	r3, r2
 800cefc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	f023 0302 	bic.w	r3, r3, #2
 800cf04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	689b      	ldr	r3, [r3, #8]
 800cf0a:	697a      	ldr	r2, [r7, #20]
 800cf0c:	4313      	orrs	r3, r2
 800cf0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	4a2d      	ldr	r2, [pc, #180]	; (800cfc8 <TIM_OC1_SetConfig+0x10c>)
 800cf14:	4293      	cmp	r3, r2
 800cf16:	d00f      	beq.n	800cf38 <TIM_OC1_SetConfig+0x7c>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	4a2c      	ldr	r2, [pc, #176]	; (800cfcc <TIM_OC1_SetConfig+0x110>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d00b      	beq.n	800cf38 <TIM_OC1_SetConfig+0x7c>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	4a2b      	ldr	r2, [pc, #172]	; (800cfd0 <TIM_OC1_SetConfig+0x114>)
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d007      	beq.n	800cf38 <TIM_OC1_SetConfig+0x7c>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	4a2a      	ldr	r2, [pc, #168]	; (800cfd4 <TIM_OC1_SetConfig+0x118>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d003      	beq.n	800cf38 <TIM_OC1_SetConfig+0x7c>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	4a29      	ldr	r2, [pc, #164]	; (800cfd8 <TIM_OC1_SetConfig+0x11c>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d10c      	bne.n	800cf52 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	f023 0308 	bic.w	r3, r3, #8
 800cf3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	68db      	ldr	r3, [r3, #12]
 800cf44:	697a      	ldr	r2, [r7, #20]
 800cf46:	4313      	orrs	r3, r2
 800cf48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	f023 0304 	bic.w	r3, r3, #4
 800cf50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	4a1c      	ldr	r2, [pc, #112]	; (800cfc8 <TIM_OC1_SetConfig+0x10c>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d00f      	beq.n	800cf7a <TIM_OC1_SetConfig+0xbe>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	4a1b      	ldr	r2, [pc, #108]	; (800cfcc <TIM_OC1_SetConfig+0x110>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d00b      	beq.n	800cf7a <TIM_OC1_SetConfig+0xbe>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	4a1a      	ldr	r2, [pc, #104]	; (800cfd0 <TIM_OC1_SetConfig+0x114>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d007      	beq.n	800cf7a <TIM_OC1_SetConfig+0xbe>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	4a19      	ldr	r2, [pc, #100]	; (800cfd4 <TIM_OC1_SetConfig+0x118>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d003      	beq.n	800cf7a <TIM_OC1_SetConfig+0xbe>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	4a18      	ldr	r2, [pc, #96]	; (800cfd8 <TIM_OC1_SetConfig+0x11c>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d111      	bne.n	800cf9e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cf88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	695b      	ldr	r3, [r3, #20]
 800cf8e:	693a      	ldr	r2, [r7, #16]
 800cf90:	4313      	orrs	r3, r2
 800cf92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	699b      	ldr	r3, [r3, #24]
 800cf98:	693a      	ldr	r2, [r7, #16]
 800cf9a:	4313      	orrs	r3, r2
 800cf9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	693a      	ldr	r2, [r7, #16]
 800cfa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	68fa      	ldr	r2, [r7, #12]
 800cfa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	685a      	ldr	r2, [r3, #4]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	697a      	ldr	r2, [r7, #20]
 800cfb6:	621a      	str	r2, [r3, #32]
}
 800cfb8:	bf00      	nop
 800cfba:	371c      	adds	r7, #28
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr
 800cfc4:	fffeff8f 	.word	0xfffeff8f
 800cfc8:	40010000 	.word	0x40010000
 800cfcc:	40010400 	.word	0x40010400
 800cfd0:	40014000 	.word	0x40014000
 800cfd4:	40014400 	.word	0x40014400
 800cfd8:	40014800 	.word	0x40014800

0800cfdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b087      	sub	sp, #28
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6a1b      	ldr	r3, [r3, #32]
 800cfea:	f023 0210 	bic.w	r2, r3, #16
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6a1b      	ldr	r3, [r3, #32]
 800cff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	699b      	ldr	r3, [r3, #24]
 800d002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d004:	68fa      	ldr	r2, [r7, #12]
 800d006:	4b34      	ldr	r3, [pc, #208]	; (800d0d8 <TIM_OC2_SetConfig+0xfc>)
 800d008:	4013      	ands	r3, r2
 800d00a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	021b      	lsls	r3, r3, #8
 800d01a:	68fa      	ldr	r2, [r7, #12]
 800d01c:	4313      	orrs	r3, r2
 800d01e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	f023 0320 	bic.w	r3, r3, #32
 800d026:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	689b      	ldr	r3, [r3, #8]
 800d02c:	011b      	lsls	r3, r3, #4
 800d02e:	697a      	ldr	r2, [r7, #20]
 800d030:	4313      	orrs	r3, r2
 800d032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	4a29      	ldr	r2, [pc, #164]	; (800d0dc <TIM_OC2_SetConfig+0x100>)
 800d038:	4293      	cmp	r3, r2
 800d03a:	d003      	beq.n	800d044 <TIM_OC2_SetConfig+0x68>
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	4a28      	ldr	r2, [pc, #160]	; (800d0e0 <TIM_OC2_SetConfig+0x104>)
 800d040:	4293      	cmp	r3, r2
 800d042:	d10d      	bne.n	800d060 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d04a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	68db      	ldr	r3, [r3, #12]
 800d050:	011b      	lsls	r3, r3, #4
 800d052:	697a      	ldr	r2, [r7, #20]
 800d054:	4313      	orrs	r3, r2
 800d056:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d05e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	4a1e      	ldr	r2, [pc, #120]	; (800d0dc <TIM_OC2_SetConfig+0x100>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d00f      	beq.n	800d088 <TIM_OC2_SetConfig+0xac>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	4a1d      	ldr	r2, [pc, #116]	; (800d0e0 <TIM_OC2_SetConfig+0x104>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d00b      	beq.n	800d088 <TIM_OC2_SetConfig+0xac>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	4a1c      	ldr	r2, [pc, #112]	; (800d0e4 <TIM_OC2_SetConfig+0x108>)
 800d074:	4293      	cmp	r3, r2
 800d076:	d007      	beq.n	800d088 <TIM_OC2_SetConfig+0xac>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	4a1b      	ldr	r2, [pc, #108]	; (800d0e8 <TIM_OC2_SetConfig+0x10c>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d003      	beq.n	800d088 <TIM_OC2_SetConfig+0xac>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	4a1a      	ldr	r2, [pc, #104]	; (800d0ec <TIM_OC2_SetConfig+0x110>)
 800d084:	4293      	cmp	r3, r2
 800d086:	d113      	bne.n	800d0b0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d08e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d096:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	695b      	ldr	r3, [r3, #20]
 800d09c:	009b      	lsls	r3, r3, #2
 800d09e:	693a      	ldr	r2, [r7, #16]
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	699b      	ldr	r3, [r3, #24]
 800d0a8:	009b      	lsls	r3, r3, #2
 800d0aa:	693a      	ldr	r2, [r7, #16]
 800d0ac:	4313      	orrs	r3, r2
 800d0ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	693a      	ldr	r2, [r7, #16]
 800d0b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	68fa      	ldr	r2, [r7, #12]
 800d0ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	685a      	ldr	r2, [r3, #4]
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	697a      	ldr	r2, [r7, #20]
 800d0c8:	621a      	str	r2, [r3, #32]
}
 800d0ca:	bf00      	nop
 800d0cc:	371c      	adds	r7, #28
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d4:	4770      	bx	lr
 800d0d6:	bf00      	nop
 800d0d8:	feff8fff 	.word	0xfeff8fff
 800d0dc:	40010000 	.word	0x40010000
 800d0e0:	40010400 	.word	0x40010400
 800d0e4:	40014000 	.word	0x40014000
 800d0e8:	40014400 	.word	0x40014400
 800d0ec:	40014800 	.word	0x40014800

0800d0f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b087      	sub	sp, #28
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6a1b      	ldr	r3, [r3, #32]
 800d0fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6a1b      	ldr	r3, [r3, #32]
 800d10a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	69db      	ldr	r3, [r3, #28]
 800d116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d118:	68fa      	ldr	r2, [r7, #12]
 800d11a:	4b33      	ldr	r3, [pc, #204]	; (800d1e8 <TIM_OC3_SetConfig+0xf8>)
 800d11c:	4013      	ands	r3, r2
 800d11e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f023 0303 	bic.w	r3, r3, #3
 800d126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	68fa      	ldr	r2, [r7, #12]
 800d12e:	4313      	orrs	r3, r2
 800d130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	689b      	ldr	r3, [r3, #8]
 800d13e:	021b      	lsls	r3, r3, #8
 800d140:	697a      	ldr	r2, [r7, #20]
 800d142:	4313      	orrs	r3, r2
 800d144:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	4a28      	ldr	r2, [pc, #160]	; (800d1ec <TIM_OC3_SetConfig+0xfc>)
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d003      	beq.n	800d156 <TIM_OC3_SetConfig+0x66>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	4a27      	ldr	r2, [pc, #156]	; (800d1f0 <TIM_OC3_SetConfig+0x100>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d10d      	bne.n	800d172 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d15c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	68db      	ldr	r3, [r3, #12]
 800d162:	021b      	lsls	r3, r3, #8
 800d164:	697a      	ldr	r2, [r7, #20]
 800d166:	4313      	orrs	r3, r2
 800d168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	4a1d      	ldr	r2, [pc, #116]	; (800d1ec <TIM_OC3_SetConfig+0xfc>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d00f      	beq.n	800d19a <TIM_OC3_SetConfig+0xaa>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	4a1c      	ldr	r2, [pc, #112]	; (800d1f0 <TIM_OC3_SetConfig+0x100>)
 800d17e:	4293      	cmp	r3, r2
 800d180:	d00b      	beq.n	800d19a <TIM_OC3_SetConfig+0xaa>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	4a1b      	ldr	r2, [pc, #108]	; (800d1f4 <TIM_OC3_SetConfig+0x104>)
 800d186:	4293      	cmp	r3, r2
 800d188:	d007      	beq.n	800d19a <TIM_OC3_SetConfig+0xaa>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	4a1a      	ldr	r2, [pc, #104]	; (800d1f8 <TIM_OC3_SetConfig+0x108>)
 800d18e:	4293      	cmp	r3, r2
 800d190:	d003      	beq.n	800d19a <TIM_OC3_SetConfig+0xaa>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	4a19      	ldr	r2, [pc, #100]	; (800d1fc <TIM_OC3_SetConfig+0x10c>)
 800d196:	4293      	cmp	r3, r2
 800d198:	d113      	bne.n	800d1c2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d1a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d1a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	695b      	ldr	r3, [r3, #20]
 800d1ae:	011b      	lsls	r3, r3, #4
 800d1b0:	693a      	ldr	r2, [r7, #16]
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	699b      	ldr	r3, [r3, #24]
 800d1ba:	011b      	lsls	r3, r3, #4
 800d1bc:	693a      	ldr	r2, [r7, #16]
 800d1be:	4313      	orrs	r3, r2
 800d1c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	693a      	ldr	r2, [r7, #16]
 800d1c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	68fa      	ldr	r2, [r7, #12]
 800d1cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	685a      	ldr	r2, [r3, #4]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	697a      	ldr	r2, [r7, #20]
 800d1da:	621a      	str	r2, [r3, #32]
}
 800d1dc:	bf00      	nop
 800d1de:	371c      	adds	r7, #28
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	4770      	bx	lr
 800d1e8:	fffeff8f 	.word	0xfffeff8f
 800d1ec:	40010000 	.word	0x40010000
 800d1f0:	40010400 	.word	0x40010400
 800d1f4:	40014000 	.word	0x40014000
 800d1f8:	40014400 	.word	0x40014400
 800d1fc:	40014800 	.word	0x40014800

0800d200 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d200:	b480      	push	{r7}
 800d202:	b087      	sub	sp, #28
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6a1b      	ldr	r3, [r3, #32]
 800d20e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6a1b      	ldr	r3, [r3, #32]
 800d21a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	69db      	ldr	r3, [r3, #28]
 800d226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d228:	68fa      	ldr	r2, [r7, #12]
 800d22a:	4b24      	ldr	r3, [pc, #144]	; (800d2bc <TIM_OC4_SetConfig+0xbc>)
 800d22c:	4013      	ands	r3, r2
 800d22e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	021b      	lsls	r3, r3, #8
 800d23e:	68fa      	ldr	r2, [r7, #12]
 800d240:	4313      	orrs	r3, r2
 800d242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d24a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	689b      	ldr	r3, [r3, #8]
 800d250:	031b      	lsls	r3, r3, #12
 800d252:	693a      	ldr	r2, [r7, #16]
 800d254:	4313      	orrs	r3, r2
 800d256:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	4a19      	ldr	r2, [pc, #100]	; (800d2c0 <TIM_OC4_SetConfig+0xc0>)
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d00f      	beq.n	800d280 <TIM_OC4_SetConfig+0x80>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	4a18      	ldr	r2, [pc, #96]	; (800d2c4 <TIM_OC4_SetConfig+0xc4>)
 800d264:	4293      	cmp	r3, r2
 800d266:	d00b      	beq.n	800d280 <TIM_OC4_SetConfig+0x80>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	4a17      	ldr	r2, [pc, #92]	; (800d2c8 <TIM_OC4_SetConfig+0xc8>)
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d007      	beq.n	800d280 <TIM_OC4_SetConfig+0x80>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	4a16      	ldr	r2, [pc, #88]	; (800d2cc <TIM_OC4_SetConfig+0xcc>)
 800d274:	4293      	cmp	r3, r2
 800d276:	d003      	beq.n	800d280 <TIM_OC4_SetConfig+0x80>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	4a15      	ldr	r2, [pc, #84]	; (800d2d0 <TIM_OC4_SetConfig+0xd0>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d109      	bne.n	800d294 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d286:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	695b      	ldr	r3, [r3, #20]
 800d28c:	019b      	lsls	r3, r3, #6
 800d28e:	697a      	ldr	r2, [r7, #20]
 800d290:	4313      	orrs	r3, r2
 800d292:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	697a      	ldr	r2, [r7, #20]
 800d298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	68fa      	ldr	r2, [r7, #12]
 800d29e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	685a      	ldr	r2, [r3, #4]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	693a      	ldr	r2, [r7, #16]
 800d2ac:	621a      	str	r2, [r3, #32]
}
 800d2ae:	bf00      	nop
 800d2b0:	371c      	adds	r7, #28
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b8:	4770      	bx	lr
 800d2ba:	bf00      	nop
 800d2bc:	feff8fff 	.word	0xfeff8fff
 800d2c0:	40010000 	.word	0x40010000
 800d2c4:	40010400 	.word	0x40010400
 800d2c8:	40014000 	.word	0x40014000
 800d2cc:	40014400 	.word	0x40014400
 800d2d0:	40014800 	.word	0x40014800

0800d2d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b087      	sub	sp, #28
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6a1b      	ldr	r3, [r3, #32]
 800d2e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6a1b      	ldr	r3, [r3, #32]
 800d2ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d2fc:	68fa      	ldr	r2, [r7, #12]
 800d2fe:	4b21      	ldr	r3, [pc, #132]	; (800d384 <TIM_OC5_SetConfig+0xb0>)
 800d300:	4013      	ands	r3, r2
 800d302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	68fa      	ldr	r2, [r7, #12]
 800d30a:	4313      	orrs	r3, r2
 800d30c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d314:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	689b      	ldr	r3, [r3, #8]
 800d31a:	041b      	lsls	r3, r3, #16
 800d31c:	693a      	ldr	r2, [r7, #16]
 800d31e:	4313      	orrs	r3, r2
 800d320:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	4a18      	ldr	r2, [pc, #96]	; (800d388 <TIM_OC5_SetConfig+0xb4>)
 800d326:	4293      	cmp	r3, r2
 800d328:	d00f      	beq.n	800d34a <TIM_OC5_SetConfig+0x76>
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	4a17      	ldr	r2, [pc, #92]	; (800d38c <TIM_OC5_SetConfig+0xb8>)
 800d32e:	4293      	cmp	r3, r2
 800d330:	d00b      	beq.n	800d34a <TIM_OC5_SetConfig+0x76>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	4a16      	ldr	r2, [pc, #88]	; (800d390 <TIM_OC5_SetConfig+0xbc>)
 800d336:	4293      	cmp	r3, r2
 800d338:	d007      	beq.n	800d34a <TIM_OC5_SetConfig+0x76>
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	4a15      	ldr	r2, [pc, #84]	; (800d394 <TIM_OC5_SetConfig+0xc0>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	d003      	beq.n	800d34a <TIM_OC5_SetConfig+0x76>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	4a14      	ldr	r2, [pc, #80]	; (800d398 <TIM_OC5_SetConfig+0xc4>)
 800d346:	4293      	cmp	r3, r2
 800d348:	d109      	bne.n	800d35e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d350:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	695b      	ldr	r3, [r3, #20]
 800d356:	021b      	lsls	r3, r3, #8
 800d358:	697a      	ldr	r2, [r7, #20]
 800d35a:	4313      	orrs	r3, r2
 800d35c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	697a      	ldr	r2, [r7, #20]
 800d362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	68fa      	ldr	r2, [r7, #12]
 800d368:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	685a      	ldr	r2, [r3, #4]
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	693a      	ldr	r2, [r7, #16]
 800d376:	621a      	str	r2, [r3, #32]
}
 800d378:	bf00      	nop
 800d37a:	371c      	adds	r7, #28
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr
 800d384:	fffeff8f 	.word	0xfffeff8f
 800d388:	40010000 	.word	0x40010000
 800d38c:	40010400 	.word	0x40010400
 800d390:	40014000 	.word	0x40014000
 800d394:	40014400 	.word	0x40014400
 800d398:	40014800 	.word	0x40014800

0800d39c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b087      	sub	sp, #28
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6a1b      	ldr	r3, [r3, #32]
 800d3aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6a1b      	ldr	r3, [r3, #32]
 800d3b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	685b      	ldr	r3, [r3, #4]
 800d3bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d3c4:	68fa      	ldr	r2, [r7, #12]
 800d3c6:	4b22      	ldr	r3, [pc, #136]	; (800d450 <TIM_OC6_SetConfig+0xb4>)
 800d3c8:	4013      	ands	r3, r2
 800d3ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	021b      	lsls	r3, r3, #8
 800d3d2:	68fa      	ldr	r2, [r7, #12]
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d3de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	689b      	ldr	r3, [r3, #8]
 800d3e4:	051b      	lsls	r3, r3, #20
 800d3e6:	693a      	ldr	r2, [r7, #16]
 800d3e8:	4313      	orrs	r3, r2
 800d3ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	4a19      	ldr	r2, [pc, #100]	; (800d454 <TIM_OC6_SetConfig+0xb8>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d00f      	beq.n	800d414 <TIM_OC6_SetConfig+0x78>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	4a18      	ldr	r2, [pc, #96]	; (800d458 <TIM_OC6_SetConfig+0xbc>)
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	d00b      	beq.n	800d414 <TIM_OC6_SetConfig+0x78>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	4a17      	ldr	r2, [pc, #92]	; (800d45c <TIM_OC6_SetConfig+0xc0>)
 800d400:	4293      	cmp	r3, r2
 800d402:	d007      	beq.n	800d414 <TIM_OC6_SetConfig+0x78>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	4a16      	ldr	r2, [pc, #88]	; (800d460 <TIM_OC6_SetConfig+0xc4>)
 800d408:	4293      	cmp	r3, r2
 800d40a:	d003      	beq.n	800d414 <TIM_OC6_SetConfig+0x78>
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	4a15      	ldr	r2, [pc, #84]	; (800d464 <TIM_OC6_SetConfig+0xc8>)
 800d410:	4293      	cmp	r3, r2
 800d412:	d109      	bne.n	800d428 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d41a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	695b      	ldr	r3, [r3, #20]
 800d420:	029b      	lsls	r3, r3, #10
 800d422:	697a      	ldr	r2, [r7, #20]
 800d424:	4313      	orrs	r3, r2
 800d426:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	697a      	ldr	r2, [r7, #20]
 800d42c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	68fa      	ldr	r2, [r7, #12]
 800d432:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	685a      	ldr	r2, [r3, #4]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	693a      	ldr	r2, [r7, #16]
 800d440:	621a      	str	r2, [r3, #32]
}
 800d442:	bf00      	nop
 800d444:	371c      	adds	r7, #28
 800d446:	46bd      	mov	sp, r7
 800d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44c:	4770      	bx	lr
 800d44e:	bf00      	nop
 800d450:	feff8fff 	.word	0xfeff8fff
 800d454:	40010000 	.word	0x40010000
 800d458:	40010400 	.word	0x40010400
 800d45c:	40014000 	.word	0x40014000
 800d460:	40014400 	.word	0x40014400
 800d464:	40014800 	.word	0x40014800

0800d468 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d468:	b480      	push	{r7}
 800d46a:	b087      	sub	sp, #28
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	60f8      	str	r0, [r7, #12]
 800d470:	60b9      	str	r1, [r7, #8]
 800d472:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	f003 031f 	and.w	r3, r3, #31
 800d47a:	2201      	movs	r2, #1
 800d47c:	fa02 f303 	lsl.w	r3, r2, r3
 800d480:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	6a1a      	ldr	r2, [r3, #32]
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	43db      	mvns	r3, r3
 800d48a:	401a      	ands	r2, r3
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	6a1a      	ldr	r2, [r3, #32]
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	f003 031f 	and.w	r3, r3, #31
 800d49a:	6879      	ldr	r1, [r7, #4]
 800d49c:	fa01 f303 	lsl.w	r3, r1, r3
 800d4a0:	431a      	orrs	r2, r3
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	621a      	str	r2, [r3, #32]
}
 800d4a6:	bf00      	nop
 800d4a8:	371c      	adds	r7, #28
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b0:	4770      	bx	lr
	...

0800d4b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b085      	sub	sp, #20
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4c4:	2b01      	cmp	r3, #1
 800d4c6:	d101      	bne.n	800d4cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d4c8:	2302      	movs	r3, #2
 800d4ca:	e06d      	b.n	800d5a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2202      	movs	r2, #2
 800d4d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	689b      	ldr	r3, [r3, #8]
 800d4ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	4a30      	ldr	r2, [pc, #192]	; (800d5b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	d004      	beq.n	800d500 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	4a2f      	ldr	r2, [pc, #188]	; (800d5b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d4fc:	4293      	cmp	r3, r2
 800d4fe:	d108      	bne.n	800d512 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d506:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	685b      	ldr	r3, [r3, #4]
 800d50c:	68fa      	ldr	r2, [r7, #12]
 800d50e:	4313      	orrs	r3, r2
 800d510:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d518:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	68fa      	ldr	r2, [r7, #12]
 800d520:	4313      	orrs	r3, r2
 800d522:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	68fa      	ldr	r2, [r7, #12]
 800d52a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4a20      	ldr	r2, [pc, #128]	; (800d5b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d022      	beq.n	800d57c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d53e:	d01d      	beq.n	800d57c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	4a1d      	ldr	r2, [pc, #116]	; (800d5bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d018      	beq.n	800d57c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4a1c      	ldr	r2, [pc, #112]	; (800d5c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d550:	4293      	cmp	r3, r2
 800d552:	d013      	beq.n	800d57c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	4a1a      	ldr	r2, [pc, #104]	; (800d5c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d55a:	4293      	cmp	r3, r2
 800d55c:	d00e      	beq.n	800d57c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	4a15      	ldr	r2, [pc, #84]	; (800d5b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d009      	beq.n	800d57c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4a16      	ldr	r2, [pc, #88]	; (800d5c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d004      	beq.n	800d57c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4a15      	ldr	r2, [pc, #84]	; (800d5cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d578:	4293      	cmp	r3, r2
 800d57a:	d10c      	bne.n	800d596 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d582:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	689b      	ldr	r3, [r3, #8]
 800d588:	68ba      	ldr	r2, [r7, #8]
 800d58a:	4313      	orrs	r3, r2
 800d58c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	68ba      	ldr	r2, [r7, #8]
 800d594:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2201      	movs	r2, #1
 800d59a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d5a6:	2300      	movs	r3, #0
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3714      	adds	r7, #20
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr
 800d5b4:	40010000 	.word	0x40010000
 800d5b8:	40010400 	.word	0x40010400
 800d5bc:	40000400 	.word	0x40000400
 800d5c0:	40000800 	.word	0x40000800
 800d5c4:	40000c00 	.word	0x40000c00
 800d5c8:	40001800 	.word	0x40001800
 800d5cc:	40014000 	.word	0x40014000

0800d5d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b085      	sub	sp, #20
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d101      	bne.n	800d5ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d5e8:	2302      	movs	r3, #2
 800d5ea:	e065      	b.n	800d6b8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	68db      	ldr	r3, [r3, #12]
 800d5fe:	4313      	orrs	r3, r2
 800d600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	689b      	ldr	r3, [r3, #8]
 800d60c:	4313      	orrs	r3, r2
 800d60e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	4313      	orrs	r3, r2
 800d61c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	4313      	orrs	r3, r2
 800d62a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	691b      	ldr	r3, [r3, #16]
 800d636:	4313      	orrs	r3, r2
 800d638:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	695b      	ldr	r3, [r3, #20]
 800d644:	4313      	orrs	r3, r2
 800d646:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d652:	4313      	orrs	r3, r2
 800d654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	699b      	ldr	r3, [r3, #24]
 800d660:	041b      	lsls	r3, r3, #16
 800d662:	4313      	orrs	r3, r2
 800d664:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	4a16      	ldr	r2, [pc, #88]	; (800d6c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d66c:	4293      	cmp	r3, r2
 800d66e:	d004      	beq.n	800d67a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	4a14      	ldr	r2, [pc, #80]	; (800d6c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d115      	bne.n	800d6a6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d684:	051b      	lsls	r3, r3, #20
 800d686:	4313      	orrs	r3, r2
 800d688:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	69db      	ldr	r3, [r3, #28]
 800d694:	4313      	orrs	r3, r2
 800d696:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	6a1b      	ldr	r3, [r3, #32]
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	68fa      	ldr	r2, [r7, #12]
 800d6ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d6b6:	2300      	movs	r3, #0
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3714      	adds	r7, #20
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c2:	4770      	bx	lr
 800d6c4:	40010000 	.word	0x40010000
 800d6c8:	40010400 	.word	0x40010400

0800d6cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d6cc:	b480      	push	{r7}
 800d6ce:	b083      	sub	sp, #12
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d6d4:	bf00      	nop
 800d6d6:	370c      	adds	r7, #12
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr

0800d6e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b083      	sub	sp, #12
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d6e8:	bf00      	nop
 800d6ea:	370c      	adds	r7, #12
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr

0800d6f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b083      	sub	sp, #12
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d6fc:	bf00      	nop
 800d6fe:	370c      	adds	r7, #12
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr

0800d708 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d101      	bne.n	800d71a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d716:	2301      	movs	r3, #1
 800d718:	e042      	b.n	800d7a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d720:	2b00      	cmp	r3, #0
 800d722:	d106      	bne.n	800d732 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2200      	movs	r2, #0
 800d728:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f7f4 ff53 	bl	80025d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2224      	movs	r2, #36	; 0x24
 800d736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	681a      	ldr	r2, [r3, #0]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	f022 0201 	bic.w	r2, r2, #1
 800d748:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f000 fcd6 	bl	800e0fc <UART_SetConfig>
 800d750:	4603      	mov	r3, r0
 800d752:	2b01      	cmp	r3, #1
 800d754:	d101      	bne.n	800d75a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d756:	2301      	movs	r3, #1
 800d758:	e022      	b.n	800d7a0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d002      	beq.n	800d768 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f001 fa32 	bl	800ebcc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	685a      	ldr	r2, [r3, #4]
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d776:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	689a      	ldr	r2, [r3, #8]
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d786:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	681a      	ldr	r2, [r3, #0]
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f042 0201 	orr.w	r2, r2, #1
 800d796:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f001 fab9 	bl	800ed10 <UART_CheckIdleState>
 800d79e:	4603      	mov	r3, r0
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3708      	adds	r7, #8
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b08a      	sub	sp, #40	; 0x28
 800d7ac:	af02      	add	r7, sp, #8
 800d7ae:	60f8      	str	r0, [r7, #12]
 800d7b0:	60b9      	str	r1, [r7, #8]
 800d7b2:	603b      	str	r3, [r7, #0]
 800d7b4:	4613      	mov	r3, r2
 800d7b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7be:	2b20      	cmp	r3, #32
 800d7c0:	f040 8083 	bne.w	800d8ca <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d002      	beq.n	800d7d0 <HAL_UART_Transmit+0x28>
 800d7ca:	88fb      	ldrh	r3, [r7, #6]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d101      	bne.n	800d7d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	e07b      	b.n	800d8cc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d7da:	2b01      	cmp	r3, #1
 800d7dc:	d101      	bne.n	800d7e2 <HAL_UART_Transmit+0x3a>
 800d7de:	2302      	movs	r3, #2
 800d7e0:	e074      	b.n	800d8cc <HAL_UART_Transmit+0x124>
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2221      	movs	r2, #33	; 0x21
 800d7f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d7fa:	f7f5 f943 	bl	8002a84 <HAL_GetTick>
 800d7fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	88fa      	ldrh	r2, [r7, #6]
 800d804:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	88fa      	ldrh	r2, [r7, #6]
 800d80c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	689b      	ldr	r3, [r3, #8]
 800d814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d818:	d108      	bne.n	800d82c <HAL_UART_Transmit+0x84>
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	691b      	ldr	r3, [r3, #16]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d104      	bne.n	800d82c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d822:	2300      	movs	r3, #0
 800d824:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	61bb      	str	r3, [r7, #24]
 800d82a:	e003      	b.n	800d834 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d830:	2300      	movs	r3, #0
 800d832:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	2200      	movs	r2, #0
 800d838:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d83c:	e02c      	b.n	800d898 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	9300      	str	r3, [sp, #0]
 800d842:	697b      	ldr	r3, [r7, #20]
 800d844:	2200      	movs	r2, #0
 800d846:	2180      	movs	r1, #128	; 0x80
 800d848:	68f8      	ldr	r0, [r7, #12]
 800d84a:	f001 faac 	bl	800eda6 <UART_WaitOnFlagUntilTimeout>
 800d84e:	4603      	mov	r3, r0
 800d850:	2b00      	cmp	r3, #0
 800d852:	d001      	beq.n	800d858 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d854:	2303      	movs	r3, #3
 800d856:	e039      	b.n	800d8cc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d858:	69fb      	ldr	r3, [r7, #28]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d10b      	bne.n	800d876 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d85e:	69bb      	ldr	r3, [r7, #24]
 800d860:	881b      	ldrh	r3, [r3, #0]
 800d862:	461a      	mov	r2, r3
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d86c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d86e:	69bb      	ldr	r3, [r7, #24]
 800d870:	3302      	adds	r3, #2
 800d872:	61bb      	str	r3, [r7, #24]
 800d874:	e007      	b.n	800d886 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d876:	69fb      	ldr	r3, [r7, #28]
 800d878:	781a      	ldrb	r2, [r3, #0]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d880:	69fb      	ldr	r3, [r7, #28]
 800d882:	3301      	adds	r3, #1
 800d884:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d88c:	b29b      	uxth	r3, r3
 800d88e:	3b01      	subs	r3, #1
 800d890:	b29a      	uxth	r2, r3
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d1cc      	bne.n	800d83e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	9300      	str	r3, [sp, #0]
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	2140      	movs	r1, #64	; 0x40
 800d8ae:	68f8      	ldr	r0, [r7, #12]
 800d8b0:	f001 fa79 	bl	800eda6 <UART_WaitOnFlagUntilTimeout>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d001      	beq.n	800d8be <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d8ba:	2303      	movs	r3, #3
 800d8bc:	e006      	b.n	800d8cc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	2220      	movs	r2, #32
 800d8c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	e000      	b.n	800d8cc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d8ca:	2302      	movs	r3, #2
  }
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3720      	adds	r7, #32
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b08a      	sub	sp, #40	; 0x28
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	60f8      	str	r0, [r7, #12]
 800d8dc:	60b9      	str	r1, [r7, #8]
 800d8de:	4613      	mov	r3, r2
 800d8e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8e8:	2b20      	cmp	r3, #32
 800d8ea:	d142      	bne.n	800d972 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d002      	beq.n	800d8f8 <HAL_UART_Receive_IT+0x24>
 800d8f2:	88fb      	ldrh	r3, [r7, #6]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d101      	bne.n	800d8fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	e03b      	b.n	800d974 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d902:	2b01      	cmp	r3, #1
 800d904:	d101      	bne.n	800d90a <HAL_UART_Receive_IT+0x36>
 800d906:	2302      	movs	r3, #2
 800d908:	e034      	b.n	800d974 <HAL_UART_Receive_IT+0xa0>
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	2201      	movs	r2, #1
 800d90e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	2200      	movs	r2, #0
 800d916:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	4a17      	ldr	r2, [pc, #92]	; (800d97c <HAL_UART_Receive_IT+0xa8>)
 800d91e:	4293      	cmp	r3, r2
 800d920:	d01f      	beq.n	800d962 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	685b      	ldr	r3, [r3, #4]
 800d928:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d018      	beq.n	800d962 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	e853 3f00 	ldrex	r3, [r3]
 800d93c:	613b      	str	r3, [r7, #16]
   return(result);
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d944:	627b      	str	r3, [r7, #36]	; 0x24
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	461a      	mov	r2, r3
 800d94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d94e:	623b      	str	r3, [r7, #32]
 800d950:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d952:	69f9      	ldr	r1, [r7, #28]
 800d954:	6a3a      	ldr	r2, [r7, #32]
 800d956:	e841 2300 	strex	r3, r2, [r1]
 800d95a:	61bb      	str	r3, [r7, #24]
   return(result);
 800d95c:	69bb      	ldr	r3, [r7, #24]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d1e6      	bne.n	800d930 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d962:	88fb      	ldrh	r3, [r7, #6]
 800d964:	461a      	mov	r2, r3
 800d966:	68b9      	ldr	r1, [r7, #8]
 800d968:	68f8      	ldr	r0, [r7, #12]
 800d96a:	f001 fae5 	bl	800ef38 <UART_Start_Receive_IT>
 800d96e:	4603      	mov	r3, r0
 800d970:	e000      	b.n	800d974 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d972:	2302      	movs	r3, #2
  }
}
 800d974:	4618      	mov	r0, r3
 800d976:	3728      	adds	r7, #40	; 0x28
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}
 800d97c:	58000c00 	.word	0x58000c00

0800d980 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b0ba      	sub	sp, #232	; 0xe8
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	69db      	ldr	r3, [r3, #28]
 800d98e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	689b      	ldr	r3, [r3, #8]
 800d9a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d9a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d9aa:	f640 030f 	movw	r3, #2063	; 0x80f
 800d9ae:	4013      	ands	r3, r2
 800d9b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d9b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d11b      	bne.n	800d9f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d9bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9c0:	f003 0320 	and.w	r3, r3, #32
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d015      	beq.n	800d9f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d9c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9cc:	f003 0320 	and.w	r3, r3, #32
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d105      	bne.n	800d9e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d9d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d9d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d009      	beq.n	800d9f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	f000 835a 	beq.w	800e09e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	4798      	blx	r3
      }
      return;
 800d9f2:	e354      	b.n	800e09e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d9f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	f000 811f 	beq.w	800dc3c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d9fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800da02:	4b8b      	ldr	r3, [pc, #556]	; (800dc30 <HAL_UART_IRQHandler+0x2b0>)
 800da04:	4013      	ands	r3, r2
 800da06:	2b00      	cmp	r3, #0
 800da08:	d106      	bne.n	800da18 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800da0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800da0e:	4b89      	ldr	r3, [pc, #548]	; (800dc34 <HAL_UART_IRQHandler+0x2b4>)
 800da10:	4013      	ands	r3, r2
 800da12:	2b00      	cmp	r3, #0
 800da14:	f000 8112 	beq.w	800dc3c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800da18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da1c:	f003 0301 	and.w	r3, r3, #1
 800da20:	2b00      	cmp	r3, #0
 800da22:	d011      	beq.n	800da48 <HAL_UART_IRQHandler+0xc8>
 800da24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d00b      	beq.n	800da48 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2201      	movs	r2, #1
 800da36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da3e:	f043 0201 	orr.w	r2, r3, #1
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800da48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da4c:	f003 0302 	and.w	r3, r3, #2
 800da50:	2b00      	cmp	r3, #0
 800da52:	d011      	beq.n	800da78 <HAL_UART_IRQHandler+0xf8>
 800da54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da58:	f003 0301 	and.w	r3, r3, #1
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d00b      	beq.n	800da78 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	2202      	movs	r2, #2
 800da66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da6e:	f043 0204 	orr.w	r2, r3, #4
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800da78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da7c:	f003 0304 	and.w	r3, r3, #4
 800da80:	2b00      	cmp	r3, #0
 800da82:	d011      	beq.n	800daa8 <HAL_UART_IRQHandler+0x128>
 800da84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da88:	f003 0301 	and.w	r3, r3, #1
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d00b      	beq.n	800daa8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	2204      	movs	r2, #4
 800da96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da9e:	f043 0202 	orr.w	r2, r3, #2
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800daa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800daac:	f003 0308 	and.w	r3, r3, #8
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d017      	beq.n	800dae4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dab8:	f003 0320 	and.w	r3, r3, #32
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d105      	bne.n	800dacc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800dac0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800dac4:	4b5a      	ldr	r3, [pc, #360]	; (800dc30 <HAL_UART_IRQHandler+0x2b0>)
 800dac6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d00b      	beq.n	800dae4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	2208      	movs	r2, #8
 800dad2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dada:	f043 0208 	orr.w	r2, r3, #8
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800daec:	2b00      	cmp	r3, #0
 800daee:	d012      	beq.n	800db16 <HAL_UART_IRQHandler+0x196>
 800daf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800daf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d00c      	beq.n	800db16 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800db04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db0c:	f043 0220 	orr.w	r2, r3, #32
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	f000 82c0 	beq.w	800e0a2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800db22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db26:	f003 0320 	and.w	r3, r3, #32
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d013      	beq.n	800db56 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800db2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db32:	f003 0320 	and.w	r3, r3, #32
 800db36:	2b00      	cmp	r3, #0
 800db38:	d105      	bne.n	800db46 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800db3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800db42:	2b00      	cmp	r3, #0
 800db44:	d007      	beq.n	800db56 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d003      	beq.n	800db56 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	689b      	ldr	r3, [r3, #8]
 800db66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db6a:	2b40      	cmp	r3, #64	; 0x40
 800db6c:	d005      	beq.n	800db7a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800db6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800db72:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800db76:	2b00      	cmp	r3, #0
 800db78:	d04f      	beq.n	800dc1a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f001 fb06 	bl	800f18c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	689b      	ldr	r3, [r3, #8]
 800db86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db8a:	2b40      	cmp	r3, #64	; 0x40
 800db8c:	d141      	bne.n	800dc12 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	3308      	adds	r3, #8
 800db94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800db9c:	e853 3f00 	ldrex	r3, [r3]
 800dba0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800dba4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	3308      	adds	r3, #8
 800dbb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800dbba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800dbbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800dbc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800dbca:	e841 2300 	strex	r3, r2, [r1]
 800dbce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800dbd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d1d9      	bne.n	800db8e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d013      	beq.n	800dc0a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbe6:	4a14      	ldr	r2, [pc, #80]	; (800dc38 <HAL_UART_IRQHandler+0x2b8>)
 800dbe8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f7f8 f88a 	bl	8005d08 <HAL_DMA_Abort_IT>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d017      	beq.n	800dc2a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc00:	687a      	ldr	r2, [r7, #4]
 800dc02:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800dc04:	4610      	mov	r0, r2
 800dc06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc08:	e00f      	b.n	800dc2a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f000 fa60 	bl	800e0d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc10:	e00b      	b.n	800dc2a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f000 fa5c 	bl	800e0d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc18:	e007      	b.n	800dc2a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f000 fa58 	bl	800e0d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2200      	movs	r2, #0
 800dc24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800dc28:	e23b      	b.n	800e0a2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc2a:	bf00      	nop
    return;
 800dc2c:	e239      	b.n	800e0a2 <HAL_UART_IRQHandler+0x722>
 800dc2e:	bf00      	nop
 800dc30:	10000001 	.word	0x10000001
 800dc34:	04000120 	.word	0x04000120
 800dc38:	0800f259 	.word	0x0800f259

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc40:	2b01      	cmp	r3, #1
 800dc42:	f040 81ce 	bne.w	800dfe2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dc46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc4a:	f003 0310 	and.w	r3, r3, #16
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	f000 81c7 	beq.w	800dfe2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dc54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc58:	f003 0310 	and.w	r3, r3, #16
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	f000 81c0 	beq.w	800dfe2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	2210      	movs	r2, #16
 800dc68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	689b      	ldr	r3, [r3, #8]
 800dc70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc74:	2b40      	cmp	r3, #64	; 0x40
 800dc76:	f040 813b 	bne.w	800def0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a8b      	ldr	r2, [pc, #556]	; (800deb0 <HAL_UART_IRQHandler+0x530>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d059      	beq.n	800dd3a <HAL_UART_IRQHandler+0x3ba>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	4a89      	ldr	r2, [pc, #548]	; (800deb4 <HAL_UART_IRQHandler+0x534>)
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	d053      	beq.n	800dd3a <HAL_UART_IRQHandler+0x3ba>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	4a87      	ldr	r2, [pc, #540]	; (800deb8 <HAL_UART_IRQHandler+0x538>)
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d04d      	beq.n	800dd3a <HAL_UART_IRQHandler+0x3ba>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	4a85      	ldr	r2, [pc, #532]	; (800debc <HAL_UART_IRQHandler+0x53c>)
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d047      	beq.n	800dd3a <HAL_UART_IRQHandler+0x3ba>
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	4a83      	ldr	r2, [pc, #524]	; (800dec0 <HAL_UART_IRQHandler+0x540>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d041      	beq.n	800dd3a <HAL_UART_IRQHandler+0x3ba>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	4a81      	ldr	r2, [pc, #516]	; (800dec4 <HAL_UART_IRQHandler+0x544>)
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	d03b      	beq.n	800dd3a <HAL_UART_IRQHandler+0x3ba>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	4a7f      	ldr	r2, [pc, #508]	; (800dec8 <HAL_UART_IRQHandler+0x548>)
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d035      	beq.n	800dd3a <HAL_UART_IRQHandler+0x3ba>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	4a7d      	ldr	r2, [pc, #500]	; (800decc <HAL_UART_IRQHandler+0x54c>)
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d02f      	beq.n	800dd3a <HAL_UART_IRQHandler+0x3ba>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4a7b      	ldr	r2, [pc, #492]	; (800ded0 <HAL_UART_IRQHandler+0x550>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d029      	beq.n	800dd3a <HAL_UART_IRQHandler+0x3ba>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4a79      	ldr	r2, [pc, #484]	; (800ded4 <HAL_UART_IRQHandler+0x554>)
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d023      	beq.n	800dd3a <HAL_UART_IRQHandler+0x3ba>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	4a77      	ldr	r2, [pc, #476]	; (800ded8 <HAL_UART_IRQHandler+0x558>)
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d01d      	beq.n	800dd3a <HAL_UART_IRQHandler+0x3ba>
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	4a75      	ldr	r2, [pc, #468]	; (800dedc <HAL_UART_IRQHandler+0x55c>)
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d017      	beq.n	800dd3a <HAL_UART_IRQHandler+0x3ba>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4a73      	ldr	r2, [pc, #460]	; (800dee0 <HAL_UART_IRQHandler+0x560>)
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d011      	beq.n	800dd3a <HAL_UART_IRQHandler+0x3ba>
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	4a71      	ldr	r2, [pc, #452]	; (800dee4 <HAL_UART_IRQHandler+0x564>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d00b      	beq.n	800dd3a <HAL_UART_IRQHandler+0x3ba>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	4a6f      	ldr	r2, [pc, #444]	; (800dee8 <HAL_UART_IRQHandler+0x568>)
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d005      	beq.n	800dd3a <HAL_UART_IRQHandler+0x3ba>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	4a6d      	ldr	r2, [pc, #436]	; (800deec <HAL_UART_IRQHandler+0x56c>)
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d105      	bne.n	800dd46 <HAL_UART_IRQHandler+0x3c6>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	b29b      	uxth	r3, r3
 800dd44:	e004      	b.n	800dd50 <HAL_UART_IRQHandler+0x3d0>
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	685b      	ldr	r3, [r3, #4]
 800dd4e:	b29b      	uxth	r3, r3
 800dd50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dd54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	f000 81a4 	beq.w	800e0a6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dd64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	f080 819c 	bcs.w	800e0a6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dd74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd7c:	69db      	ldr	r3, [r3, #28]
 800dd7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd82:	f000 8086 	beq.w	800de92 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dd92:	e853 3f00 	ldrex	r3, [r3]
 800dd96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800dd9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dd9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dda2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	461a      	mov	r2, r3
 800ddac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ddb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ddb4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddb8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ddbc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ddc0:	e841 2300 	strex	r3, r2, [r1]
 800ddc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ddc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d1da      	bne.n	800dd86 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	3308      	adds	r3, #8
 800ddd6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ddda:	e853 3f00 	ldrex	r3, [r3]
 800ddde:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dde0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dde2:	f023 0301 	bic.w	r3, r3, #1
 800dde6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	3308      	adds	r3, #8
 800ddf0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ddf4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ddf8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddfa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ddfc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800de00:	e841 2300 	strex	r3, r2, [r1]
 800de04:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800de06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d1e1      	bne.n	800ddd0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	3308      	adds	r3, #8
 800de12:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de16:	e853 3f00 	ldrex	r3, [r3]
 800de1a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800de1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	3308      	adds	r3, #8
 800de2c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800de30:	66fa      	str	r2, [r7, #108]	; 0x6c
 800de32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de34:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800de36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800de38:	e841 2300 	strex	r3, r2, [r1]
 800de3c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800de3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800de40:	2b00      	cmp	r3, #0
 800de42:	d1e3      	bne.n	800de0c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2220      	movs	r2, #32
 800de48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2200      	movs	r2, #0
 800de50:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de5a:	e853 3f00 	ldrex	r3, [r3]
 800de5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800de60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de62:	f023 0310 	bic.w	r3, r3, #16
 800de66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	461a      	mov	r2, r3
 800de70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800de74:	65bb      	str	r3, [r7, #88]	; 0x58
 800de76:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800de7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800de7c:	e841 2300 	strex	r3, r2, [r1]
 800de80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800de82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de84:	2b00      	cmp	r3, #0
 800de86:	d1e4      	bne.n	800de52 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de8c:	4618      	mov	r0, r3
 800de8e:	f7f7 fc1d 	bl	80056cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de9e:	b29b      	uxth	r3, r3
 800dea0:	1ad3      	subs	r3, r2, r3
 800dea2:	b29b      	uxth	r3, r3
 800dea4:	4619      	mov	r1, r3
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f000 f91c 	bl	800e0e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800deac:	e0fb      	b.n	800e0a6 <HAL_UART_IRQHandler+0x726>
 800deae:	bf00      	nop
 800deb0:	40020010 	.word	0x40020010
 800deb4:	40020028 	.word	0x40020028
 800deb8:	40020040 	.word	0x40020040
 800debc:	40020058 	.word	0x40020058
 800dec0:	40020070 	.word	0x40020070
 800dec4:	40020088 	.word	0x40020088
 800dec8:	400200a0 	.word	0x400200a0
 800decc:	400200b8 	.word	0x400200b8
 800ded0:	40020410 	.word	0x40020410
 800ded4:	40020428 	.word	0x40020428
 800ded8:	40020440 	.word	0x40020440
 800dedc:	40020458 	.word	0x40020458
 800dee0:	40020470 	.word	0x40020470
 800dee4:	40020488 	.word	0x40020488
 800dee8:	400204a0 	.word	0x400204a0
 800deec:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800defc:	b29b      	uxth	r3, r3
 800defe:	1ad3      	subs	r3, r2, r3
 800df00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800df0a:	b29b      	uxth	r3, r3
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	f000 80cc 	beq.w	800e0aa <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800df12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800df16:	2b00      	cmp	r3, #0
 800df18:	f000 80c7 	beq.w	800e0aa <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df24:	e853 3f00 	ldrex	r3, [r3]
 800df28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800df2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800df30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	461a      	mov	r2, r3
 800df3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800df3e:	647b      	str	r3, [r7, #68]	; 0x44
 800df40:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800df44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df46:	e841 2300 	strex	r3, r2, [r1]
 800df4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800df4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d1e4      	bne.n	800df1c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	3308      	adds	r3, #8
 800df58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df5c:	e853 3f00 	ldrex	r3, [r3]
 800df60:	623b      	str	r3, [r7, #32]
   return(result);
 800df62:	6a3a      	ldr	r2, [r7, #32]
 800df64:	4b54      	ldr	r3, [pc, #336]	; (800e0b8 <HAL_UART_IRQHandler+0x738>)
 800df66:	4013      	ands	r3, r2
 800df68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	3308      	adds	r3, #8
 800df72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800df76:	633a      	str	r2, [r7, #48]	; 0x30
 800df78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df7e:	e841 2300 	strex	r3, r2, [r1]
 800df82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800df84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df86:	2b00      	cmp	r3, #0
 800df88:	d1e3      	bne.n	800df52 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2220      	movs	r2, #32
 800df8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2200      	movs	r2, #0
 800df96:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2200      	movs	r2, #0
 800df9c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	e853 3f00 	ldrex	r3, [r3]
 800dfaa:	60fb      	str	r3, [r7, #12]
   return(result);
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	f023 0310 	bic.w	r3, r3, #16
 800dfb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	461a      	mov	r2, r3
 800dfbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dfc0:	61fb      	str	r3, [r7, #28]
 800dfc2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfc4:	69b9      	ldr	r1, [r7, #24]
 800dfc6:	69fa      	ldr	r2, [r7, #28]
 800dfc8:	e841 2300 	strex	r3, r2, [r1]
 800dfcc:	617b      	str	r3, [r7, #20]
   return(result);
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d1e4      	bne.n	800df9e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dfd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dfd8:	4619      	mov	r1, r3
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f000 f882 	bl	800e0e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dfe0:	e063      	b.n	800e0aa <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dfe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d00e      	beq.n	800e00c <HAL_UART_IRQHandler+0x68c>
 800dfee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d008      	beq.n	800e00c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e002:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f001 fdc5 	bl	800fb94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e00a:	e051      	b.n	800e0b0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e00c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e014:	2b00      	cmp	r3, #0
 800e016:	d014      	beq.n	800e042 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e01c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e020:	2b00      	cmp	r3, #0
 800e022:	d105      	bne.n	800e030 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e028:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d008      	beq.n	800e042 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e034:	2b00      	cmp	r3, #0
 800e036:	d03a      	beq.n	800e0ae <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	4798      	blx	r3
    }
    return;
 800e040:	e035      	b.n	800e0ae <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d009      	beq.n	800e062 <HAL_UART_IRQHandler+0x6e2>
 800e04e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e056:	2b00      	cmp	r3, #0
 800e058:	d003      	beq.n	800e062 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f001 f912 	bl	800f284 <UART_EndTransmit_IT>
    return;
 800e060:	e026      	b.n	800e0b0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e066:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d009      	beq.n	800e082 <HAL_UART_IRQHandler+0x702>
 800e06e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e072:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e076:	2b00      	cmp	r3, #0
 800e078:	d003      	beq.n	800e082 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f001 fd9e 	bl	800fbbc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e080:	e016      	b.n	800e0b0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e086:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d010      	beq.n	800e0b0 <HAL_UART_IRQHandler+0x730>
 800e08e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e092:	2b00      	cmp	r3, #0
 800e094:	da0c      	bge.n	800e0b0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f001 fd86 	bl	800fba8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e09c:	e008      	b.n	800e0b0 <HAL_UART_IRQHandler+0x730>
      return;
 800e09e:	bf00      	nop
 800e0a0:	e006      	b.n	800e0b0 <HAL_UART_IRQHandler+0x730>
    return;
 800e0a2:	bf00      	nop
 800e0a4:	e004      	b.n	800e0b0 <HAL_UART_IRQHandler+0x730>
      return;
 800e0a6:	bf00      	nop
 800e0a8:	e002      	b.n	800e0b0 <HAL_UART_IRQHandler+0x730>
      return;
 800e0aa:	bf00      	nop
 800e0ac:	e000      	b.n	800e0b0 <HAL_UART_IRQHandler+0x730>
    return;
 800e0ae:	bf00      	nop
  }
}
 800e0b0:	37e8      	adds	r7, #232	; 0xe8
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
 800e0b6:	bf00      	nop
 800e0b8:	effffffe 	.word	0xeffffffe

0800e0bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b083      	sub	sp, #12
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e0c4:	bf00      	nop
 800e0c6:	370c      	adds	r7, #12
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ce:	4770      	bx	lr

0800e0d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b083      	sub	sp, #12
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e0d8:	bf00      	nop
 800e0da:	370c      	adds	r7, #12
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e2:	4770      	bx	lr

0800e0e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e0e4:	b480      	push	{r7}
 800e0e6:	b083      	sub	sp, #12
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	460b      	mov	r3, r1
 800e0ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e0f0:	bf00      	nop
 800e0f2:	370c      	adds	r7, #12
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr

0800e0fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e0fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e100:	b092      	sub	sp, #72	; 0x48
 800e102:	af00      	add	r7, sp, #0
 800e104:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e106:	2300      	movs	r3, #0
 800e108:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	689a      	ldr	r2, [r3, #8]
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	691b      	ldr	r3, [r3, #16]
 800e114:	431a      	orrs	r2, r3
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	695b      	ldr	r3, [r3, #20]
 800e11a:	431a      	orrs	r2, r3
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	69db      	ldr	r3, [r3, #28]
 800e120:	4313      	orrs	r3, r2
 800e122:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	4bbe      	ldr	r3, [pc, #760]	; (800e424 <UART_SetConfig+0x328>)
 800e12c:	4013      	ands	r3, r2
 800e12e:	697a      	ldr	r2, [r7, #20]
 800e130:	6812      	ldr	r2, [r2, #0]
 800e132:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e134:	430b      	orrs	r3, r1
 800e136:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	685b      	ldr	r3, [r3, #4]
 800e13e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	68da      	ldr	r2, [r3, #12]
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	430a      	orrs	r2, r1
 800e14c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	699b      	ldr	r3, [r3, #24]
 800e152:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	4ab3      	ldr	r2, [pc, #716]	; (800e428 <UART_SetConfig+0x32c>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d004      	beq.n	800e168 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	6a1b      	ldr	r3, [r3, #32]
 800e162:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e164:	4313      	orrs	r3, r2
 800e166:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	689a      	ldr	r2, [r3, #8]
 800e16e:	4baf      	ldr	r3, [pc, #700]	; (800e42c <UART_SetConfig+0x330>)
 800e170:	4013      	ands	r3, r2
 800e172:	697a      	ldr	r2, [r7, #20]
 800e174:	6812      	ldr	r2, [r2, #0]
 800e176:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e178:	430b      	orrs	r3, r1
 800e17a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e182:	f023 010f 	bic.w	r1, r3, #15
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	430a      	orrs	r2, r1
 800e190:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e192:	697b      	ldr	r3, [r7, #20]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	4aa6      	ldr	r2, [pc, #664]	; (800e430 <UART_SetConfig+0x334>)
 800e198:	4293      	cmp	r3, r2
 800e19a:	d177      	bne.n	800e28c <UART_SetConfig+0x190>
 800e19c:	4ba5      	ldr	r3, [pc, #660]	; (800e434 <UART_SetConfig+0x338>)
 800e19e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e1a4:	2b28      	cmp	r3, #40	; 0x28
 800e1a6:	d86d      	bhi.n	800e284 <UART_SetConfig+0x188>
 800e1a8:	a201      	add	r2, pc, #4	; (adr r2, 800e1b0 <UART_SetConfig+0xb4>)
 800e1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1ae:	bf00      	nop
 800e1b0:	0800e255 	.word	0x0800e255
 800e1b4:	0800e285 	.word	0x0800e285
 800e1b8:	0800e285 	.word	0x0800e285
 800e1bc:	0800e285 	.word	0x0800e285
 800e1c0:	0800e285 	.word	0x0800e285
 800e1c4:	0800e285 	.word	0x0800e285
 800e1c8:	0800e285 	.word	0x0800e285
 800e1cc:	0800e285 	.word	0x0800e285
 800e1d0:	0800e25d 	.word	0x0800e25d
 800e1d4:	0800e285 	.word	0x0800e285
 800e1d8:	0800e285 	.word	0x0800e285
 800e1dc:	0800e285 	.word	0x0800e285
 800e1e0:	0800e285 	.word	0x0800e285
 800e1e4:	0800e285 	.word	0x0800e285
 800e1e8:	0800e285 	.word	0x0800e285
 800e1ec:	0800e285 	.word	0x0800e285
 800e1f0:	0800e265 	.word	0x0800e265
 800e1f4:	0800e285 	.word	0x0800e285
 800e1f8:	0800e285 	.word	0x0800e285
 800e1fc:	0800e285 	.word	0x0800e285
 800e200:	0800e285 	.word	0x0800e285
 800e204:	0800e285 	.word	0x0800e285
 800e208:	0800e285 	.word	0x0800e285
 800e20c:	0800e285 	.word	0x0800e285
 800e210:	0800e26d 	.word	0x0800e26d
 800e214:	0800e285 	.word	0x0800e285
 800e218:	0800e285 	.word	0x0800e285
 800e21c:	0800e285 	.word	0x0800e285
 800e220:	0800e285 	.word	0x0800e285
 800e224:	0800e285 	.word	0x0800e285
 800e228:	0800e285 	.word	0x0800e285
 800e22c:	0800e285 	.word	0x0800e285
 800e230:	0800e275 	.word	0x0800e275
 800e234:	0800e285 	.word	0x0800e285
 800e238:	0800e285 	.word	0x0800e285
 800e23c:	0800e285 	.word	0x0800e285
 800e240:	0800e285 	.word	0x0800e285
 800e244:	0800e285 	.word	0x0800e285
 800e248:	0800e285 	.word	0x0800e285
 800e24c:	0800e285 	.word	0x0800e285
 800e250:	0800e27d 	.word	0x0800e27d
 800e254:	2301      	movs	r3, #1
 800e256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e25a:	e222      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e25c:	2304      	movs	r3, #4
 800e25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e262:	e21e      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e264:	2308      	movs	r3, #8
 800e266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e26a:	e21a      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e26c:	2310      	movs	r3, #16
 800e26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e272:	e216      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e274:	2320      	movs	r3, #32
 800e276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e27a:	e212      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e27c:	2340      	movs	r3, #64	; 0x40
 800e27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e282:	e20e      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e284:	2380      	movs	r3, #128	; 0x80
 800e286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e28a:	e20a      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	4a69      	ldr	r2, [pc, #420]	; (800e438 <UART_SetConfig+0x33c>)
 800e292:	4293      	cmp	r3, r2
 800e294:	d130      	bne.n	800e2f8 <UART_SetConfig+0x1fc>
 800e296:	4b67      	ldr	r3, [pc, #412]	; (800e434 <UART_SetConfig+0x338>)
 800e298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e29a:	f003 0307 	and.w	r3, r3, #7
 800e29e:	2b05      	cmp	r3, #5
 800e2a0:	d826      	bhi.n	800e2f0 <UART_SetConfig+0x1f4>
 800e2a2:	a201      	add	r2, pc, #4	; (adr r2, 800e2a8 <UART_SetConfig+0x1ac>)
 800e2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2a8:	0800e2c1 	.word	0x0800e2c1
 800e2ac:	0800e2c9 	.word	0x0800e2c9
 800e2b0:	0800e2d1 	.word	0x0800e2d1
 800e2b4:	0800e2d9 	.word	0x0800e2d9
 800e2b8:	0800e2e1 	.word	0x0800e2e1
 800e2bc:	0800e2e9 	.word	0x0800e2e9
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2c6:	e1ec      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e2c8:	2304      	movs	r3, #4
 800e2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ce:	e1e8      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e2d0:	2308      	movs	r3, #8
 800e2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2d6:	e1e4      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e2d8:	2310      	movs	r3, #16
 800e2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2de:	e1e0      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e2e0:	2320      	movs	r3, #32
 800e2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2e6:	e1dc      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e2e8:	2340      	movs	r3, #64	; 0x40
 800e2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ee:	e1d8      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e2f0:	2380      	movs	r3, #128	; 0x80
 800e2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2f6:	e1d4      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e2f8:	697b      	ldr	r3, [r7, #20]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	4a4f      	ldr	r2, [pc, #316]	; (800e43c <UART_SetConfig+0x340>)
 800e2fe:	4293      	cmp	r3, r2
 800e300:	d130      	bne.n	800e364 <UART_SetConfig+0x268>
 800e302:	4b4c      	ldr	r3, [pc, #304]	; (800e434 <UART_SetConfig+0x338>)
 800e304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e306:	f003 0307 	and.w	r3, r3, #7
 800e30a:	2b05      	cmp	r3, #5
 800e30c:	d826      	bhi.n	800e35c <UART_SetConfig+0x260>
 800e30e:	a201      	add	r2, pc, #4	; (adr r2, 800e314 <UART_SetConfig+0x218>)
 800e310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e314:	0800e32d 	.word	0x0800e32d
 800e318:	0800e335 	.word	0x0800e335
 800e31c:	0800e33d 	.word	0x0800e33d
 800e320:	0800e345 	.word	0x0800e345
 800e324:	0800e34d 	.word	0x0800e34d
 800e328:	0800e355 	.word	0x0800e355
 800e32c:	2300      	movs	r3, #0
 800e32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e332:	e1b6      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e334:	2304      	movs	r3, #4
 800e336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e33a:	e1b2      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e33c:	2308      	movs	r3, #8
 800e33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e342:	e1ae      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e344:	2310      	movs	r3, #16
 800e346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e34a:	e1aa      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e34c:	2320      	movs	r3, #32
 800e34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e352:	e1a6      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e354:	2340      	movs	r3, #64	; 0x40
 800e356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e35a:	e1a2      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e35c:	2380      	movs	r3, #128	; 0x80
 800e35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e362:	e19e      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e364:	697b      	ldr	r3, [r7, #20]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4a35      	ldr	r2, [pc, #212]	; (800e440 <UART_SetConfig+0x344>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d130      	bne.n	800e3d0 <UART_SetConfig+0x2d4>
 800e36e:	4b31      	ldr	r3, [pc, #196]	; (800e434 <UART_SetConfig+0x338>)
 800e370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e372:	f003 0307 	and.w	r3, r3, #7
 800e376:	2b05      	cmp	r3, #5
 800e378:	d826      	bhi.n	800e3c8 <UART_SetConfig+0x2cc>
 800e37a:	a201      	add	r2, pc, #4	; (adr r2, 800e380 <UART_SetConfig+0x284>)
 800e37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e380:	0800e399 	.word	0x0800e399
 800e384:	0800e3a1 	.word	0x0800e3a1
 800e388:	0800e3a9 	.word	0x0800e3a9
 800e38c:	0800e3b1 	.word	0x0800e3b1
 800e390:	0800e3b9 	.word	0x0800e3b9
 800e394:	0800e3c1 	.word	0x0800e3c1
 800e398:	2300      	movs	r3, #0
 800e39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e39e:	e180      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e3a0:	2304      	movs	r3, #4
 800e3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3a6:	e17c      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e3a8:	2308      	movs	r3, #8
 800e3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ae:	e178      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e3b0:	2310      	movs	r3, #16
 800e3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3b6:	e174      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e3b8:	2320      	movs	r3, #32
 800e3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3be:	e170      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e3c0:	2340      	movs	r3, #64	; 0x40
 800e3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3c6:	e16c      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e3c8:	2380      	movs	r3, #128	; 0x80
 800e3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ce:	e168      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e3d0:	697b      	ldr	r3, [r7, #20]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	4a1b      	ldr	r2, [pc, #108]	; (800e444 <UART_SetConfig+0x348>)
 800e3d6:	4293      	cmp	r3, r2
 800e3d8:	d142      	bne.n	800e460 <UART_SetConfig+0x364>
 800e3da:	4b16      	ldr	r3, [pc, #88]	; (800e434 <UART_SetConfig+0x338>)
 800e3dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3de:	f003 0307 	and.w	r3, r3, #7
 800e3e2:	2b05      	cmp	r3, #5
 800e3e4:	d838      	bhi.n	800e458 <UART_SetConfig+0x35c>
 800e3e6:	a201      	add	r2, pc, #4	; (adr r2, 800e3ec <UART_SetConfig+0x2f0>)
 800e3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ec:	0800e405 	.word	0x0800e405
 800e3f0:	0800e40d 	.word	0x0800e40d
 800e3f4:	0800e415 	.word	0x0800e415
 800e3f8:	0800e41d 	.word	0x0800e41d
 800e3fc:	0800e449 	.word	0x0800e449
 800e400:	0800e451 	.word	0x0800e451
 800e404:	2300      	movs	r3, #0
 800e406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e40a:	e14a      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e40c:	2304      	movs	r3, #4
 800e40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e412:	e146      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e414:	2308      	movs	r3, #8
 800e416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e41a:	e142      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e41c:	2310      	movs	r3, #16
 800e41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e422:	e13e      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e424:	cfff69f3 	.word	0xcfff69f3
 800e428:	58000c00 	.word	0x58000c00
 800e42c:	11fff4ff 	.word	0x11fff4ff
 800e430:	40011000 	.word	0x40011000
 800e434:	58024400 	.word	0x58024400
 800e438:	40004400 	.word	0x40004400
 800e43c:	40004800 	.word	0x40004800
 800e440:	40004c00 	.word	0x40004c00
 800e444:	40005000 	.word	0x40005000
 800e448:	2320      	movs	r3, #32
 800e44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e44e:	e128      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e450:	2340      	movs	r3, #64	; 0x40
 800e452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e456:	e124      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e458:	2380      	movs	r3, #128	; 0x80
 800e45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e45e:	e120      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	4acb      	ldr	r2, [pc, #812]	; (800e794 <UART_SetConfig+0x698>)
 800e466:	4293      	cmp	r3, r2
 800e468:	d176      	bne.n	800e558 <UART_SetConfig+0x45c>
 800e46a:	4bcb      	ldr	r3, [pc, #812]	; (800e798 <UART_SetConfig+0x69c>)
 800e46c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e46e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e472:	2b28      	cmp	r3, #40	; 0x28
 800e474:	d86c      	bhi.n	800e550 <UART_SetConfig+0x454>
 800e476:	a201      	add	r2, pc, #4	; (adr r2, 800e47c <UART_SetConfig+0x380>)
 800e478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e47c:	0800e521 	.word	0x0800e521
 800e480:	0800e551 	.word	0x0800e551
 800e484:	0800e551 	.word	0x0800e551
 800e488:	0800e551 	.word	0x0800e551
 800e48c:	0800e551 	.word	0x0800e551
 800e490:	0800e551 	.word	0x0800e551
 800e494:	0800e551 	.word	0x0800e551
 800e498:	0800e551 	.word	0x0800e551
 800e49c:	0800e529 	.word	0x0800e529
 800e4a0:	0800e551 	.word	0x0800e551
 800e4a4:	0800e551 	.word	0x0800e551
 800e4a8:	0800e551 	.word	0x0800e551
 800e4ac:	0800e551 	.word	0x0800e551
 800e4b0:	0800e551 	.word	0x0800e551
 800e4b4:	0800e551 	.word	0x0800e551
 800e4b8:	0800e551 	.word	0x0800e551
 800e4bc:	0800e531 	.word	0x0800e531
 800e4c0:	0800e551 	.word	0x0800e551
 800e4c4:	0800e551 	.word	0x0800e551
 800e4c8:	0800e551 	.word	0x0800e551
 800e4cc:	0800e551 	.word	0x0800e551
 800e4d0:	0800e551 	.word	0x0800e551
 800e4d4:	0800e551 	.word	0x0800e551
 800e4d8:	0800e551 	.word	0x0800e551
 800e4dc:	0800e539 	.word	0x0800e539
 800e4e0:	0800e551 	.word	0x0800e551
 800e4e4:	0800e551 	.word	0x0800e551
 800e4e8:	0800e551 	.word	0x0800e551
 800e4ec:	0800e551 	.word	0x0800e551
 800e4f0:	0800e551 	.word	0x0800e551
 800e4f4:	0800e551 	.word	0x0800e551
 800e4f8:	0800e551 	.word	0x0800e551
 800e4fc:	0800e541 	.word	0x0800e541
 800e500:	0800e551 	.word	0x0800e551
 800e504:	0800e551 	.word	0x0800e551
 800e508:	0800e551 	.word	0x0800e551
 800e50c:	0800e551 	.word	0x0800e551
 800e510:	0800e551 	.word	0x0800e551
 800e514:	0800e551 	.word	0x0800e551
 800e518:	0800e551 	.word	0x0800e551
 800e51c:	0800e549 	.word	0x0800e549
 800e520:	2301      	movs	r3, #1
 800e522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e526:	e0bc      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e528:	2304      	movs	r3, #4
 800e52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e52e:	e0b8      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e530:	2308      	movs	r3, #8
 800e532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e536:	e0b4      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e538:	2310      	movs	r3, #16
 800e53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e53e:	e0b0      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e540:	2320      	movs	r3, #32
 800e542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e546:	e0ac      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e548:	2340      	movs	r3, #64	; 0x40
 800e54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e54e:	e0a8      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e550:	2380      	movs	r3, #128	; 0x80
 800e552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e556:	e0a4      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	4a8f      	ldr	r2, [pc, #572]	; (800e79c <UART_SetConfig+0x6a0>)
 800e55e:	4293      	cmp	r3, r2
 800e560:	d130      	bne.n	800e5c4 <UART_SetConfig+0x4c8>
 800e562:	4b8d      	ldr	r3, [pc, #564]	; (800e798 <UART_SetConfig+0x69c>)
 800e564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e566:	f003 0307 	and.w	r3, r3, #7
 800e56a:	2b05      	cmp	r3, #5
 800e56c:	d826      	bhi.n	800e5bc <UART_SetConfig+0x4c0>
 800e56e:	a201      	add	r2, pc, #4	; (adr r2, 800e574 <UART_SetConfig+0x478>)
 800e570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e574:	0800e58d 	.word	0x0800e58d
 800e578:	0800e595 	.word	0x0800e595
 800e57c:	0800e59d 	.word	0x0800e59d
 800e580:	0800e5a5 	.word	0x0800e5a5
 800e584:	0800e5ad 	.word	0x0800e5ad
 800e588:	0800e5b5 	.word	0x0800e5b5
 800e58c:	2300      	movs	r3, #0
 800e58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e592:	e086      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e594:	2304      	movs	r3, #4
 800e596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e59a:	e082      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e59c:	2308      	movs	r3, #8
 800e59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5a2:	e07e      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e5a4:	2310      	movs	r3, #16
 800e5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5aa:	e07a      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e5ac:	2320      	movs	r3, #32
 800e5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5b2:	e076      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e5b4:	2340      	movs	r3, #64	; 0x40
 800e5b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ba:	e072      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e5bc:	2380      	movs	r3, #128	; 0x80
 800e5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5c2:	e06e      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4a75      	ldr	r2, [pc, #468]	; (800e7a0 <UART_SetConfig+0x6a4>)
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d130      	bne.n	800e630 <UART_SetConfig+0x534>
 800e5ce:	4b72      	ldr	r3, [pc, #456]	; (800e798 <UART_SetConfig+0x69c>)
 800e5d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5d2:	f003 0307 	and.w	r3, r3, #7
 800e5d6:	2b05      	cmp	r3, #5
 800e5d8:	d826      	bhi.n	800e628 <UART_SetConfig+0x52c>
 800e5da:	a201      	add	r2, pc, #4	; (adr r2, 800e5e0 <UART_SetConfig+0x4e4>)
 800e5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5e0:	0800e5f9 	.word	0x0800e5f9
 800e5e4:	0800e601 	.word	0x0800e601
 800e5e8:	0800e609 	.word	0x0800e609
 800e5ec:	0800e611 	.word	0x0800e611
 800e5f0:	0800e619 	.word	0x0800e619
 800e5f4:	0800e621 	.word	0x0800e621
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5fe:	e050      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e600:	2304      	movs	r3, #4
 800e602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e606:	e04c      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e608:	2308      	movs	r3, #8
 800e60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e60e:	e048      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e610:	2310      	movs	r3, #16
 800e612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e616:	e044      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e618:	2320      	movs	r3, #32
 800e61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e61e:	e040      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e620:	2340      	movs	r3, #64	; 0x40
 800e622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e626:	e03c      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e628:	2380      	movs	r3, #128	; 0x80
 800e62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e62e:	e038      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	4a5b      	ldr	r2, [pc, #364]	; (800e7a4 <UART_SetConfig+0x6a8>)
 800e636:	4293      	cmp	r3, r2
 800e638:	d130      	bne.n	800e69c <UART_SetConfig+0x5a0>
 800e63a:	4b57      	ldr	r3, [pc, #348]	; (800e798 <UART_SetConfig+0x69c>)
 800e63c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e63e:	f003 0307 	and.w	r3, r3, #7
 800e642:	2b05      	cmp	r3, #5
 800e644:	d826      	bhi.n	800e694 <UART_SetConfig+0x598>
 800e646:	a201      	add	r2, pc, #4	; (adr r2, 800e64c <UART_SetConfig+0x550>)
 800e648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e64c:	0800e665 	.word	0x0800e665
 800e650:	0800e66d 	.word	0x0800e66d
 800e654:	0800e675 	.word	0x0800e675
 800e658:	0800e67d 	.word	0x0800e67d
 800e65c:	0800e685 	.word	0x0800e685
 800e660:	0800e68d 	.word	0x0800e68d
 800e664:	2302      	movs	r3, #2
 800e666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e66a:	e01a      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e66c:	2304      	movs	r3, #4
 800e66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e672:	e016      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e674:	2308      	movs	r3, #8
 800e676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e67a:	e012      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e67c:	2310      	movs	r3, #16
 800e67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e682:	e00e      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e684:	2320      	movs	r3, #32
 800e686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e68a:	e00a      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e68c:	2340      	movs	r3, #64	; 0x40
 800e68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e692:	e006      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e694:	2380      	movs	r3, #128	; 0x80
 800e696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e69a:	e002      	b.n	800e6a2 <UART_SetConfig+0x5a6>
 800e69c:	2380      	movs	r3, #128	; 0x80
 800e69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	4a3f      	ldr	r2, [pc, #252]	; (800e7a4 <UART_SetConfig+0x6a8>)
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	f040 80f8 	bne.w	800e89e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e6ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e6b2:	2b20      	cmp	r3, #32
 800e6b4:	dc46      	bgt.n	800e744 <UART_SetConfig+0x648>
 800e6b6:	2b02      	cmp	r3, #2
 800e6b8:	f2c0 8082 	blt.w	800e7c0 <UART_SetConfig+0x6c4>
 800e6bc:	3b02      	subs	r3, #2
 800e6be:	2b1e      	cmp	r3, #30
 800e6c0:	d87e      	bhi.n	800e7c0 <UART_SetConfig+0x6c4>
 800e6c2:	a201      	add	r2, pc, #4	; (adr r2, 800e6c8 <UART_SetConfig+0x5cc>)
 800e6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6c8:	0800e74b 	.word	0x0800e74b
 800e6cc:	0800e7c1 	.word	0x0800e7c1
 800e6d0:	0800e753 	.word	0x0800e753
 800e6d4:	0800e7c1 	.word	0x0800e7c1
 800e6d8:	0800e7c1 	.word	0x0800e7c1
 800e6dc:	0800e7c1 	.word	0x0800e7c1
 800e6e0:	0800e763 	.word	0x0800e763
 800e6e4:	0800e7c1 	.word	0x0800e7c1
 800e6e8:	0800e7c1 	.word	0x0800e7c1
 800e6ec:	0800e7c1 	.word	0x0800e7c1
 800e6f0:	0800e7c1 	.word	0x0800e7c1
 800e6f4:	0800e7c1 	.word	0x0800e7c1
 800e6f8:	0800e7c1 	.word	0x0800e7c1
 800e6fc:	0800e7c1 	.word	0x0800e7c1
 800e700:	0800e773 	.word	0x0800e773
 800e704:	0800e7c1 	.word	0x0800e7c1
 800e708:	0800e7c1 	.word	0x0800e7c1
 800e70c:	0800e7c1 	.word	0x0800e7c1
 800e710:	0800e7c1 	.word	0x0800e7c1
 800e714:	0800e7c1 	.word	0x0800e7c1
 800e718:	0800e7c1 	.word	0x0800e7c1
 800e71c:	0800e7c1 	.word	0x0800e7c1
 800e720:	0800e7c1 	.word	0x0800e7c1
 800e724:	0800e7c1 	.word	0x0800e7c1
 800e728:	0800e7c1 	.word	0x0800e7c1
 800e72c:	0800e7c1 	.word	0x0800e7c1
 800e730:	0800e7c1 	.word	0x0800e7c1
 800e734:	0800e7c1 	.word	0x0800e7c1
 800e738:	0800e7c1 	.word	0x0800e7c1
 800e73c:	0800e7c1 	.word	0x0800e7c1
 800e740:	0800e7b3 	.word	0x0800e7b3
 800e744:	2b40      	cmp	r3, #64	; 0x40
 800e746:	d037      	beq.n	800e7b8 <UART_SetConfig+0x6bc>
 800e748:	e03a      	b.n	800e7c0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e74a:	f7fc fbe9 	bl	800af20 <HAL_RCCEx_GetD3PCLK1Freq>
 800e74e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e750:	e03c      	b.n	800e7cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e756:	4618      	mov	r0, r3
 800e758:	f7fc fbf8 	bl	800af4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e75e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e760:	e034      	b.n	800e7cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e762:	f107 0318 	add.w	r3, r7, #24
 800e766:	4618      	mov	r0, r3
 800e768:	f7fc fd44 	bl	800b1f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e76c:	69fb      	ldr	r3, [r7, #28]
 800e76e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e770:	e02c      	b.n	800e7cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e772:	4b09      	ldr	r3, [pc, #36]	; (800e798 <UART_SetConfig+0x69c>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	f003 0320 	and.w	r3, r3, #32
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d016      	beq.n	800e7ac <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e77e:	4b06      	ldr	r3, [pc, #24]	; (800e798 <UART_SetConfig+0x69c>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	08db      	lsrs	r3, r3, #3
 800e784:	f003 0303 	and.w	r3, r3, #3
 800e788:	4a07      	ldr	r2, [pc, #28]	; (800e7a8 <UART_SetConfig+0x6ac>)
 800e78a:	fa22 f303 	lsr.w	r3, r2, r3
 800e78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e790:	e01c      	b.n	800e7cc <UART_SetConfig+0x6d0>
 800e792:	bf00      	nop
 800e794:	40011400 	.word	0x40011400
 800e798:	58024400 	.word	0x58024400
 800e79c:	40007800 	.word	0x40007800
 800e7a0:	40007c00 	.word	0x40007c00
 800e7a4:	58000c00 	.word	0x58000c00
 800e7a8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e7ac:	4b9d      	ldr	r3, [pc, #628]	; (800ea24 <UART_SetConfig+0x928>)
 800e7ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7b0:	e00c      	b.n	800e7cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e7b2:	4b9d      	ldr	r3, [pc, #628]	; (800ea28 <UART_SetConfig+0x92c>)
 800e7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7b6:	e009      	b.n	800e7cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e7b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7be:	e005      	b.n	800e7cc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e7ca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e7cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	f000 81de 	beq.w	800eb90 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e7d4:	697b      	ldr	r3, [r7, #20]
 800e7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7d8:	4a94      	ldr	r2, [pc, #592]	; (800ea2c <UART_SetConfig+0x930>)
 800e7da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e7de:	461a      	mov	r2, r3
 800e7e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800e7e6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	685a      	ldr	r2, [r3, #4]
 800e7ec:	4613      	mov	r3, r2
 800e7ee:	005b      	lsls	r3, r3, #1
 800e7f0:	4413      	add	r3, r2
 800e7f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	d305      	bcc.n	800e804 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	685b      	ldr	r3, [r3, #4]
 800e7fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e7fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e800:	429a      	cmp	r2, r3
 800e802:	d903      	bls.n	800e80c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e804:	2301      	movs	r3, #1
 800e806:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e80a:	e1c1      	b.n	800eb90 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e80c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e80e:	2200      	movs	r2, #0
 800e810:	60bb      	str	r3, [r7, #8]
 800e812:	60fa      	str	r2, [r7, #12]
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e818:	4a84      	ldr	r2, [pc, #528]	; (800ea2c <UART_SetConfig+0x930>)
 800e81a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e81e:	b29b      	uxth	r3, r3
 800e820:	2200      	movs	r2, #0
 800e822:	603b      	str	r3, [r7, #0]
 800e824:	607a      	str	r2, [r7, #4]
 800e826:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e82a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e82e:	f7f1 fd53 	bl	80002d8 <__aeabi_uldivmod>
 800e832:	4602      	mov	r2, r0
 800e834:	460b      	mov	r3, r1
 800e836:	4610      	mov	r0, r2
 800e838:	4619      	mov	r1, r3
 800e83a:	f04f 0200 	mov.w	r2, #0
 800e83e:	f04f 0300 	mov.w	r3, #0
 800e842:	020b      	lsls	r3, r1, #8
 800e844:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e848:	0202      	lsls	r2, r0, #8
 800e84a:	6979      	ldr	r1, [r7, #20]
 800e84c:	6849      	ldr	r1, [r1, #4]
 800e84e:	0849      	lsrs	r1, r1, #1
 800e850:	2000      	movs	r0, #0
 800e852:	460c      	mov	r4, r1
 800e854:	4605      	mov	r5, r0
 800e856:	eb12 0804 	adds.w	r8, r2, r4
 800e85a:	eb43 0905 	adc.w	r9, r3, r5
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	685b      	ldr	r3, [r3, #4]
 800e862:	2200      	movs	r2, #0
 800e864:	469a      	mov	sl, r3
 800e866:	4693      	mov	fp, r2
 800e868:	4652      	mov	r2, sl
 800e86a:	465b      	mov	r3, fp
 800e86c:	4640      	mov	r0, r8
 800e86e:	4649      	mov	r1, r9
 800e870:	f7f1 fd32 	bl	80002d8 <__aeabi_uldivmod>
 800e874:	4602      	mov	r2, r0
 800e876:	460b      	mov	r3, r1
 800e878:	4613      	mov	r3, r2
 800e87a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e87e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e882:	d308      	bcc.n	800e896 <UART_SetConfig+0x79a>
 800e884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e88a:	d204      	bcs.n	800e896 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e88c:	697b      	ldr	r3, [r7, #20]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e892:	60da      	str	r2, [r3, #12]
 800e894:	e17c      	b.n	800eb90 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e896:	2301      	movs	r3, #1
 800e898:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e89c:	e178      	b.n	800eb90 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	69db      	ldr	r3, [r3, #28]
 800e8a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8a6:	f040 80c5 	bne.w	800ea34 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e8aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e8ae:	2b20      	cmp	r3, #32
 800e8b0:	dc48      	bgt.n	800e944 <UART_SetConfig+0x848>
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	db7b      	blt.n	800e9ae <UART_SetConfig+0x8b2>
 800e8b6:	2b20      	cmp	r3, #32
 800e8b8:	d879      	bhi.n	800e9ae <UART_SetConfig+0x8b2>
 800e8ba:	a201      	add	r2, pc, #4	; (adr r2, 800e8c0 <UART_SetConfig+0x7c4>)
 800e8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8c0:	0800e94b 	.word	0x0800e94b
 800e8c4:	0800e953 	.word	0x0800e953
 800e8c8:	0800e9af 	.word	0x0800e9af
 800e8cc:	0800e9af 	.word	0x0800e9af
 800e8d0:	0800e95b 	.word	0x0800e95b
 800e8d4:	0800e9af 	.word	0x0800e9af
 800e8d8:	0800e9af 	.word	0x0800e9af
 800e8dc:	0800e9af 	.word	0x0800e9af
 800e8e0:	0800e96b 	.word	0x0800e96b
 800e8e4:	0800e9af 	.word	0x0800e9af
 800e8e8:	0800e9af 	.word	0x0800e9af
 800e8ec:	0800e9af 	.word	0x0800e9af
 800e8f0:	0800e9af 	.word	0x0800e9af
 800e8f4:	0800e9af 	.word	0x0800e9af
 800e8f8:	0800e9af 	.word	0x0800e9af
 800e8fc:	0800e9af 	.word	0x0800e9af
 800e900:	0800e97b 	.word	0x0800e97b
 800e904:	0800e9af 	.word	0x0800e9af
 800e908:	0800e9af 	.word	0x0800e9af
 800e90c:	0800e9af 	.word	0x0800e9af
 800e910:	0800e9af 	.word	0x0800e9af
 800e914:	0800e9af 	.word	0x0800e9af
 800e918:	0800e9af 	.word	0x0800e9af
 800e91c:	0800e9af 	.word	0x0800e9af
 800e920:	0800e9af 	.word	0x0800e9af
 800e924:	0800e9af 	.word	0x0800e9af
 800e928:	0800e9af 	.word	0x0800e9af
 800e92c:	0800e9af 	.word	0x0800e9af
 800e930:	0800e9af 	.word	0x0800e9af
 800e934:	0800e9af 	.word	0x0800e9af
 800e938:	0800e9af 	.word	0x0800e9af
 800e93c:	0800e9af 	.word	0x0800e9af
 800e940:	0800e9a1 	.word	0x0800e9a1
 800e944:	2b40      	cmp	r3, #64	; 0x40
 800e946:	d02e      	beq.n	800e9a6 <UART_SetConfig+0x8aa>
 800e948:	e031      	b.n	800e9ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e94a:	f7fa fea5 	bl	8009698 <HAL_RCC_GetPCLK1Freq>
 800e94e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e950:	e033      	b.n	800e9ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e952:	f7fa feb7 	bl	80096c4 <HAL_RCC_GetPCLK2Freq>
 800e956:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e958:	e02f      	b.n	800e9ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e95a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e95e:	4618      	mov	r0, r3
 800e960:	f7fc faf4 	bl	800af4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e966:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e968:	e027      	b.n	800e9ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e96a:	f107 0318 	add.w	r3, r7, #24
 800e96e:	4618      	mov	r0, r3
 800e970:	f7fc fc40 	bl	800b1f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e974:	69fb      	ldr	r3, [r7, #28]
 800e976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e978:	e01f      	b.n	800e9ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e97a:	4b2d      	ldr	r3, [pc, #180]	; (800ea30 <UART_SetConfig+0x934>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	f003 0320 	and.w	r3, r3, #32
 800e982:	2b00      	cmp	r3, #0
 800e984:	d009      	beq.n	800e99a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e986:	4b2a      	ldr	r3, [pc, #168]	; (800ea30 <UART_SetConfig+0x934>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	08db      	lsrs	r3, r3, #3
 800e98c:	f003 0303 	and.w	r3, r3, #3
 800e990:	4a24      	ldr	r2, [pc, #144]	; (800ea24 <UART_SetConfig+0x928>)
 800e992:	fa22 f303 	lsr.w	r3, r2, r3
 800e996:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e998:	e00f      	b.n	800e9ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e99a:	4b22      	ldr	r3, [pc, #136]	; (800ea24 <UART_SetConfig+0x928>)
 800e99c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e99e:	e00c      	b.n	800e9ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e9a0:	4b21      	ldr	r3, [pc, #132]	; (800ea28 <UART_SetConfig+0x92c>)
 800e9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9a4:	e009      	b.n	800e9ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e9a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9ac:	e005      	b.n	800e9ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e9b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e9ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	f000 80e7 	beq.w	800eb90 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9c6:	4a19      	ldr	r2, [pc, #100]	; (800ea2c <UART_SetConfig+0x930>)
 800e9c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e9cc:	461a      	mov	r2, r3
 800e9ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e9d4:	005a      	lsls	r2, r3, #1
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	685b      	ldr	r3, [r3, #4]
 800e9da:	085b      	lsrs	r3, r3, #1
 800e9dc:	441a      	add	r2, r3
 800e9de:	697b      	ldr	r3, [r7, #20]
 800e9e0:	685b      	ldr	r3, [r3, #4]
 800e9e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9e6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ea:	2b0f      	cmp	r3, #15
 800e9ec:	d916      	bls.n	800ea1c <UART_SetConfig+0x920>
 800e9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9f4:	d212      	bcs.n	800ea1c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f8:	b29b      	uxth	r3, r3
 800e9fa:	f023 030f 	bic.w	r3, r3, #15
 800e9fe:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ea00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea02:	085b      	lsrs	r3, r3, #1
 800ea04:	b29b      	uxth	r3, r3
 800ea06:	f003 0307 	and.w	r3, r3, #7
 800ea0a:	b29a      	uxth	r2, r3
 800ea0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ea0e:	4313      	orrs	r3, r2
 800ea10:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ea18:	60da      	str	r2, [r3, #12]
 800ea1a:	e0b9      	b.n	800eb90 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ea1c:	2301      	movs	r3, #1
 800ea1e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ea22:	e0b5      	b.n	800eb90 <UART_SetConfig+0xa94>
 800ea24:	03d09000 	.word	0x03d09000
 800ea28:	003d0900 	.word	0x003d0900
 800ea2c:	0801021c 	.word	0x0801021c
 800ea30:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ea34:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ea38:	2b20      	cmp	r3, #32
 800ea3a:	dc49      	bgt.n	800ead0 <UART_SetConfig+0x9d4>
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	db7c      	blt.n	800eb3a <UART_SetConfig+0xa3e>
 800ea40:	2b20      	cmp	r3, #32
 800ea42:	d87a      	bhi.n	800eb3a <UART_SetConfig+0xa3e>
 800ea44:	a201      	add	r2, pc, #4	; (adr r2, 800ea4c <UART_SetConfig+0x950>)
 800ea46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea4a:	bf00      	nop
 800ea4c:	0800ead7 	.word	0x0800ead7
 800ea50:	0800eadf 	.word	0x0800eadf
 800ea54:	0800eb3b 	.word	0x0800eb3b
 800ea58:	0800eb3b 	.word	0x0800eb3b
 800ea5c:	0800eae7 	.word	0x0800eae7
 800ea60:	0800eb3b 	.word	0x0800eb3b
 800ea64:	0800eb3b 	.word	0x0800eb3b
 800ea68:	0800eb3b 	.word	0x0800eb3b
 800ea6c:	0800eaf7 	.word	0x0800eaf7
 800ea70:	0800eb3b 	.word	0x0800eb3b
 800ea74:	0800eb3b 	.word	0x0800eb3b
 800ea78:	0800eb3b 	.word	0x0800eb3b
 800ea7c:	0800eb3b 	.word	0x0800eb3b
 800ea80:	0800eb3b 	.word	0x0800eb3b
 800ea84:	0800eb3b 	.word	0x0800eb3b
 800ea88:	0800eb3b 	.word	0x0800eb3b
 800ea8c:	0800eb07 	.word	0x0800eb07
 800ea90:	0800eb3b 	.word	0x0800eb3b
 800ea94:	0800eb3b 	.word	0x0800eb3b
 800ea98:	0800eb3b 	.word	0x0800eb3b
 800ea9c:	0800eb3b 	.word	0x0800eb3b
 800eaa0:	0800eb3b 	.word	0x0800eb3b
 800eaa4:	0800eb3b 	.word	0x0800eb3b
 800eaa8:	0800eb3b 	.word	0x0800eb3b
 800eaac:	0800eb3b 	.word	0x0800eb3b
 800eab0:	0800eb3b 	.word	0x0800eb3b
 800eab4:	0800eb3b 	.word	0x0800eb3b
 800eab8:	0800eb3b 	.word	0x0800eb3b
 800eabc:	0800eb3b 	.word	0x0800eb3b
 800eac0:	0800eb3b 	.word	0x0800eb3b
 800eac4:	0800eb3b 	.word	0x0800eb3b
 800eac8:	0800eb3b 	.word	0x0800eb3b
 800eacc:	0800eb2d 	.word	0x0800eb2d
 800ead0:	2b40      	cmp	r3, #64	; 0x40
 800ead2:	d02e      	beq.n	800eb32 <UART_SetConfig+0xa36>
 800ead4:	e031      	b.n	800eb3a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ead6:	f7fa fddf 	bl	8009698 <HAL_RCC_GetPCLK1Freq>
 800eada:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eadc:	e033      	b.n	800eb46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eade:	f7fa fdf1 	bl	80096c4 <HAL_RCC_GetPCLK2Freq>
 800eae2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eae4:	e02f      	b.n	800eb46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eaea:	4618      	mov	r0, r3
 800eaec:	f7fc fa2e 	bl	800af4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eaf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eaf4:	e027      	b.n	800eb46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eaf6:	f107 0318 	add.w	r3, r7, #24
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7fc fb7a 	bl	800b1f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eb00:	69fb      	ldr	r3, [r7, #28]
 800eb02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb04:	e01f      	b.n	800eb46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eb06:	4b2d      	ldr	r3, [pc, #180]	; (800ebbc <UART_SetConfig+0xac0>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	f003 0320 	and.w	r3, r3, #32
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d009      	beq.n	800eb26 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eb12:	4b2a      	ldr	r3, [pc, #168]	; (800ebbc <UART_SetConfig+0xac0>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	08db      	lsrs	r3, r3, #3
 800eb18:	f003 0303 	and.w	r3, r3, #3
 800eb1c:	4a28      	ldr	r2, [pc, #160]	; (800ebc0 <UART_SetConfig+0xac4>)
 800eb1e:	fa22 f303 	lsr.w	r3, r2, r3
 800eb22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eb24:	e00f      	b.n	800eb46 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800eb26:	4b26      	ldr	r3, [pc, #152]	; (800ebc0 <UART_SetConfig+0xac4>)
 800eb28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb2a:	e00c      	b.n	800eb46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eb2c:	4b25      	ldr	r3, [pc, #148]	; (800ebc4 <UART_SetConfig+0xac8>)
 800eb2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb30:	e009      	b.n	800eb46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eb32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eb36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb38:	e005      	b.n	800eb46 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800eb3e:	2301      	movs	r3, #1
 800eb40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800eb44:	bf00      	nop
    }

    if (pclk != 0U)
 800eb46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d021      	beq.n	800eb90 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb50:	4a1d      	ldr	r2, [pc, #116]	; (800ebc8 <UART_SetConfig+0xacc>)
 800eb52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb56:	461a      	mov	r2, r3
 800eb58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb5a:	fbb3 f2f2 	udiv	r2, r3, r2
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	685b      	ldr	r3, [r3, #4]
 800eb62:	085b      	lsrs	r3, r3, #1
 800eb64:	441a      	add	r2, r3
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	685b      	ldr	r3, [r3, #4]
 800eb6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb6e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb72:	2b0f      	cmp	r3, #15
 800eb74:	d909      	bls.n	800eb8a <UART_SetConfig+0xa8e>
 800eb76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb7c:	d205      	bcs.n	800eb8a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800eb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb80:	b29a      	uxth	r2, r3
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	60da      	str	r2, [r3, #12]
 800eb88:	e002      	b.n	800eb90 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	2201      	movs	r2, #1
 800eb94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	2201      	movs	r2, #1
 800eb9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	2200      	movs	r2, #0
 800eba4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	2200      	movs	r2, #0
 800ebaa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ebac:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3748      	adds	r7, #72	; 0x48
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ebba:	bf00      	nop
 800ebbc:	58024400 	.word	0x58024400
 800ebc0:	03d09000 	.word	0x03d09000
 800ebc4:	003d0900 	.word	0x003d0900
 800ebc8:	0801021c 	.word	0x0801021c

0800ebcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b083      	sub	sp, #12
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebd8:	f003 0301 	and.w	r3, r3, #1
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d00a      	beq.n	800ebf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	685b      	ldr	r3, [r3, #4]
 800ebe6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	430a      	orrs	r2, r1
 800ebf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebfa:	f003 0302 	and.w	r3, r3, #2
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d00a      	beq.n	800ec18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	685b      	ldr	r3, [r3, #4]
 800ec08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	430a      	orrs	r2, r1
 800ec16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec1c:	f003 0304 	and.w	r3, r3, #4
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d00a      	beq.n	800ec3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	685b      	ldr	r3, [r3, #4]
 800ec2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	430a      	orrs	r2, r1
 800ec38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec3e:	f003 0308 	and.w	r3, r3, #8
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d00a      	beq.n	800ec5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	685b      	ldr	r3, [r3, #4]
 800ec4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	430a      	orrs	r2, r1
 800ec5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec60:	f003 0310 	and.w	r3, r3, #16
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d00a      	beq.n	800ec7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	689b      	ldr	r3, [r3, #8]
 800ec6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	430a      	orrs	r2, r1
 800ec7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec82:	f003 0320 	and.w	r3, r3, #32
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d00a      	beq.n	800eca0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	689b      	ldr	r3, [r3, #8]
 800ec90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	430a      	orrs	r2, r1
 800ec9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d01a      	beq.n	800ece2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	685b      	ldr	r3, [r3, #4]
 800ecb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	430a      	orrs	r2, r1
 800ecc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ecca:	d10a      	bne.n	800ece2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	685b      	ldr	r3, [r3, #4]
 800ecd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	430a      	orrs	r2, r1
 800ece0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ece6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d00a      	beq.n	800ed04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	685b      	ldr	r3, [r3, #4]
 800ecf4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	430a      	orrs	r2, r1
 800ed02:	605a      	str	r2, [r3, #4]
  }
}
 800ed04:	bf00      	nop
 800ed06:	370c      	adds	r7, #12
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0e:	4770      	bx	lr

0800ed10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b086      	sub	sp, #24
 800ed14:	af02      	add	r7, sp, #8
 800ed16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ed20:	f7f3 feb0 	bl	8002a84 <HAL_GetTick>
 800ed24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	f003 0308 	and.w	r3, r3, #8
 800ed30:	2b08      	cmp	r3, #8
 800ed32:	d10e      	bne.n	800ed52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ed34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ed38:	9300      	str	r3, [sp, #0]
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f000 f82f 	bl	800eda6 <UART_WaitOnFlagUntilTimeout>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d001      	beq.n	800ed52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ed4e:	2303      	movs	r3, #3
 800ed50:	e025      	b.n	800ed9e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	f003 0304 	and.w	r3, r3, #4
 800ed5c:	2b04      	cmp	r3, #4
 800ed5e:	d10e      	bne.n	800ed7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ed60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ed64:	9300      	str	r3, [sp, #0]
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	2200      	movs	r2, #0
 800ed6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f000 f819 	bl	800eda6 <UART_WaitOnFlagUntilTimeout>
 800ed74:	4603      	mov	r3, r0
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d001      	beq.n	800ed7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ed7a:	2303      	movs	r3, #3
 800ed7c:	e00f      	b.n	800ed9e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2220      	movs	r2, #32
 800ed82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2220      	movs	r2, #32
 800ed8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2200      	movs	r2, #0
 800ed92:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2200      	movs	r2, #0
 800ed98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ed9c:	2300      	movs	r3, #0
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3710      	adds	r7, #16
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}

0800eda6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eda6:	b580      	push	{r7, lr}
 800eda8:	b09c      	sub	sp, #112	; 0x70
 800edaa:	af00      	add	r7, sp, #0
 800edac:	60f8      	str	r0, [r7, #12]
 800edae:	60b9      	str	r1, [r7, #8]
 800edb0:	603b      	str	r3, [r7, #0]
 800edb2:	4613      	mov	r3, r2
 800edb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800edb6:	e0a9      	b.n	800ef0c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800edb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800edba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800edbe:	f000 80a5 	beq.w	800ef0c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800edc2:	f7f3 fe5f 	bl	8002a84 <HAL_GetTick>
 800edc6:	4602      	mov	r2, r0
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	1ad3      	subs	r3, r2, r3
 800edcc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800edce:	429a      	cmp	r2, r3
 800edd0:	d302      	bcc.n	800edd8 <UART_WaitOnFlagUntilTimeout+0x32>
 800edd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d140      	bne.n	800ee5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ede0:	e853 3f00 	ldrex	r3, [r3]
 800ede4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ede6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ede8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800edec:	667b      	str	r3, [r7, #100]	; 0x64
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	461a      	mov	r2, r3
 800edf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800edf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800edf8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800edfc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800edfe:	e841 2300 	strex	r3, r2, [r1]
 800ee02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ee04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d1e6      	bne.n	800edd8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	3308      	adds	r3, #8
 800ee10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee14:	e853 3f00 	ldrex	r3, [r3]
 800ee18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ee1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee1c:	f023 0301 	bic.w	r3, r3, #1
 800ee20:	663b      	str	r3, [r7, #96]	; 0x60
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	3308      	adds	r3, #8
 800ee28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ee2a:	64ba      	str	r2, [r7, #72]	; 0x48
 800ee2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee32:	e841 2300 	strex	r3, r2, [r1]
 800ee36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ee38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d1e5      	bne.n	800ee0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	2220      	movs	r2, #32
 800ee42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	2220      	movs	r2, #32
 800ee4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	2200      	movs	r2, #0
 800ee52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ee56:	2303      	movs	r3, #3
 800ee58:	e069      	b.n	800ef2e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	f003 0304 	and.w	r3, r3, #4
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d051      	beq.n	800ef0c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	69db      	ldr	r3, [r3, #28]
 800ee6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ee76:	d149      	bne.n	800ef0c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ee80:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee8a:	e853 3f00 	ldrex	r3, [r3]
 800ee8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ee90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ee96:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eea0:	637b      	str	r3, [r7, #52]	; 0x34
 800eea2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eea4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eea8:	e841 2300 	strex	r3, r2, [r1]
 800eeac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800eeae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d1e6      	bne.n	800ee82 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	3308      	adds	r3, #8
 800eeba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	e853 3f00 	ldrex	r3, [r3]
 800eec2:	613b      	str	r3, [r7, #16]
   return(result);
 800eec4:	693b      	ldr	r3, [r7, #16]
 800eec6:	f023 0301 	bic.w	r3, r3, #1
 800eeca:	66bb      	str	r3, [r7, #104]	; 0x68
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	3308      	adds	r3, #8
 800eed2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800eed4:	623a      	str	r2, [r7, #32]
 800eed6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eed8:	69f9      	ldr	r1, [r7, #28]
 800eeda:	6a3a      	ldr	r2, [r7, #32]
 800eedc:	e841 2300 	strex	r3, r2, [r1]
 800eee0:	61bb      	str	r3, [r7, #24]
   return(result);
 800eee2:	69bb      	ldr	r3, [r7, #24]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d1e5      	bne.n	800eeb4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	2220      	movs	r2, #32
 800eeec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	2220      	movs	r2, #32
 800eef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	2220      	movs	r2, #32
 800eefc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	2200      	movs	r2, #0
 800ef04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ef08:	2303      	movs	r3, #3
 800ef0a:	e010      	b.n	800ef2e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	69da      	ldr	r2, [r3, #28]
 800ef12:	68bb      	ldr	r3, [r7, #8]
 800ef14:	4013      	ands	r3, r2
 800ef16:	68ba      	ldr	r2, [r7, #8]
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	bf0c      	ite	eq
 800ef1c:	2301      	moveq	r3, #1
 800ef1e:	2300      	movne	r3, #0
 800ef20:	b2db      	uxtb	r3, r3
 800ef22:	461a      	mov	r2, r3
 800ef24:	79fb      	ldrb	r3, [r7, #7]
 800ef26:	429a      	cmp	r2, r3
 800ef28:	f43f af46 	beq.w	800edb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ef2c:	2300      	movs	r3, #0
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	3770      	adds	r7, #112	; 0x70
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}
	...

0800ef38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ef38:	b480      	push	{r7}
 800ef3a:	b0a3      	sub	sp, #140	; 0x8c
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	60f8      	str	r0, [r7, #12]
 800ef40:	60b9      	str	r1, [r7, #8]
 800ef42:	4613      	mov	r3, r2
 800ef44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	68ba      	ldr	r2, [r7, #8]
 800ef4a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	88fa      	ldrh	r2, [r7, #6]
 800ef50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	88fa      	ldrh	r2, [r7, #6]
 800ef58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	689b      	ldr	r3, [r3, #8]
 800ef66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef6a:	d10e      	bne.n	800ef8a <UART_Start_Receive_IT+0x52>
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	691b      	ldr	r3, [r3, #16]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d105      	bne.n	800ef80 <UART_Start_Receive_IT+0x48>
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ef7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef7e:	e02d      	b.n	800efdc <UART_Start_Receive_IT+0xa4>
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	22ff      	movs	r2, #255	; 0xff
 800ef84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef88:	e028      	b.n	800efdc <UART_Start_Receive_IT+0xa4>
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	689b      	ldr	r3, [r3, #8]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d10d      	bne.n	800efae <UART_Start_Receive_IT+0x76>
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	691b      	ldr	r3, [r3, #16]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d104      	bne.n	800efa4 <UART_Start_Receive_IT+0x6c>
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	22ff      	movs	r2, #255	; 0xff
 800ef9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800efa2:	e01b      	b.n	800efdc <UART_Start_Receive_IT+0xa4>
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	227f      	movs	r2, #127	; 0x7f
 800efa8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800efac:	e016      	b.n	800efdc <UART_Start_Receive_IT+0xa4>
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	689b      	ldr	r3, [r3, #8]
 800efb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800efb6:	d10d      	bne.n	800efd4 <UART_Start_Receive_IT+0x9c>
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	691b      	ldr	r3, [r3, #16]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d104      	bne.n	800efca <UART_Start_Receive_IT+0x92>
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	227f      	movs	r2, #127	; 0x7f
 800efc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800efc8:	e008      	b.n	800efdc <UART_Start_Receive_IT+0xa4>
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	223f      	movs	r2, #63	; 0x3f
 800efce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800efd2:	e003      	b.n	800efdc <UART_Start_Receive_IT+0xa4>
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2200      	movs	r2, #0
 800efd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	2200      	movs	r2, #0
 800efe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	2222      	movs	r2, #34	; 0x22
 800efe8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	3308      	adds	r3, #8
 800eff2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eff4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eff6:	e853 3f00 	ldrex	r3, [r3]
 800effa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800effc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800effe:	f043 0301 	orr.w	r3, r3, #1
 800f002:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	3308      	adds	r3, #8
 800f00c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f010:	673a      	str	r2, [r7, #112]	; 0x70
 800f012:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f014:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f016:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f018:	e841 2300 	strex	r3, r2, [r1]
 800f01c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800f01e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f020:	2b00      	cmp	r3, #0
 800f022:	d1e3      	bne.n	800efec <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f02c:	d153      	bne.n	800f0d6 <UART_Start_Receive_IT+0x19e>
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f034:	88fa      	ldrh	r2, [r7, #6]
 800f036:	429a      	cmp	r2, r3
 800f038:	d34d      	bcc.n	800f0d6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	689b      	ldr	r3, [r3, #8]
 800f03e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f042:	d107      	bne.n	800f054 <UART_Start_Receive_IT+0x11c>
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	691b      	ldr	r3, [r3, #16]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d103      	bne.n	800f054 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	4a4b      	ldr	r2, [pc, #300]	; (800f17c <UART_Start_Receive_IT+0x244>)
 800f050:	671a      	str	r2, [r3, #112]	; 0x70
 800f052:	e002      	b.n	800f05a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	4a4a      	ldr	r2, [pc, #296]	; (800f180 <UART_Start_Receive_IT+0x248>)
 800f058:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	2200      	movs	r2, #0
 800f05e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	691b      	ldr	r3, [r3, #16]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d01a      	beq.n	800f0a0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f072:	e853 3f00 	ldrex	r3, [r3]
 800f076:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f07a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f07e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	461a      	mov	r2, r3
 800f088:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f08c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f08e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f090:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f092:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f094:	e841 2300 	strex	r3, r2, [r1]
 800f098:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f09a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d1e4      	bne.n	800f06a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	3308      	adds	r3, #8
 800f0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0aa:	e853 3f00 	ldrex	r3, [r3]
 800f0ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f0b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	3308      	adds	r3, #8
 800f0be:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f0c0:	64ba      	str	r2, [r7, #72]	; 0x48
 800f0c2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f0c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f0c8:	e841 2300 	strex	r3, r2, [r1]
 800f0cc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f0ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d1e5      	bne.n	800f0a0 <UART_Start_Receive_IT+0x168>
 800f0d4:	e04a      	b.n	800f16c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	689b      	ldr	r3, [r3, #8]
 800f0da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0de:	d107      	bne.n	800f0f0 <UART_Start_Receive_IT+0x1b8>
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	691b      	ldr	r3, [r3, #16]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d103      	bne.n	800f0f0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	4a26      	ldr	r2, [pc, #152]	; (800f184 <UART_Start_Receive_IT+0x24c>)
 800f0ec:	671a      	str	r2, [r3, #112]	; 0x70
 800f0ee:	e002      	b.n	800f0f6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	4a25      	ldr	r2, [pc, #148]	; (800f188 <UART_Start_Receive_IT+0x250>)
 800f0f4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	691b      	ldr	r3, [r3, #16]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d019      	beq.n	800f13a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f10e:	e853 3f00 	ldrex	r3, [r3]
 800f112:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f116:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f11a:	677b      	str	r3, [r7, #116]	; 0x74
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	461a      	mov	r2, r3
 800f122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f124:	637b      	str	r3, [r7, #52]	; 0x34
 800f126:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f128:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f12a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f12c:	e841 2300 	strex	r3, r2, [r1]
 800f130:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f134:	2b00      	cmp	r3, #0
 800f136:	d1e6      	bne.n	800f106 <UART_Start_Receive_IT+0x1ce>
 800f138:	e018      	b.n	800f16c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	e853 3f00 	ldrex	r3, [r3]
 800f146:	613b      	str	r3, [r7, #16]
   return(result);
 800f148:	693b      	ldr	r3, [r7, #16]
 800f14a:	f043 0320 	orr.w	r3, r3, #32
 800f14e:	67bb      	str	r3, [r7, #120]	; 0x78
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	461a      	mov	r2, r3
 800f156:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f158:	623b      	str	r3, [r7, #32]
 800f15a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f15c:	69f9      	ldr	r1, [r7, #28]
 800f15e:	6a3a      	ldr	r2, [r7, #32]
 800f160:	e841 2300 	strex	r3, r2, [r1]
 800f164:	61bb      	str	r3, [r7, #24]
   return(result);
 800f166:	69bb      	ldr	r3, [r7, #24]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d1e6      	bne.n	800f13a <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800f16c:	2300      	movs	r3, #0
}
 800f16e:	4618      	mov	r0, r3
 800f170:	378c      	adds	r7, #140	; 0x8c
 800f172:	46bd      	mov	sp, r7
 800f174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f178:	4770      	bx	lr
 800f17a:	bf00      	nop
 800f17c:	0800f895 	.word	0x0800f895
 800f180:	0800f59d 	.word	0x0800f59d
 800f184:	0800f43b 	.word	0x0800f43b
 800f188:	0800f2db 	.word	0x0800f2db

0800f18c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f18c:	b480      	push	{r7}
 800f18e:	b095      	sub	sp, #84	; 0x54
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f19c:	e853 3f00 	ldrex	r3, [r3]
 800f1a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f1a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	461a      	mov	r2, r3
 800f1b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1b2:	643b      	str	r3, [r7, #64]	; 0x40
 800f1b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f1b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f1ba:	e841 2300 	strex	r3, r2, [r1]
 800f1be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d1e6      	bne.n	800f194 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	3308      	adds	r3, #8
 800f1cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1ce:	6a3b      	ldr	r3, [r7, #32]
 800f1d0:	e853 3f00 	ldrex	r3, [r3]
 800f1d4:	61fb      	str	r3, [r7, #28]
   return(result);
 800f1d6:	69fa      	ldr	r2, [r7, #28]
 800f1d8:	4b1e      	ldr	r3, [pc, #120]	; (800f254 <UART_EndRxTransfer+0xc8>)
 800f1da:	4013      	ands	r3, r2
 800f1dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	3308      	adds	r3, #8
 800f1e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f1e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f1e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f1ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1ee:	e841 2300 	strex	r3, r2, [r1]
 800f1f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d1e5      	bne.n	800f1c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1fe:	2b01      	cmp	r3, #1
 800f200:	d118      	bne.n	800f234 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	e853 3f00 	ldrex	r3, [r3]
 800f20e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	f023 0310 	bic.w	r3, r3, #16
 800f216:	647b      	str	r3, [r7, #68]	; 0x44
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	461a      	mov	r2, r3
 800f21e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f220:	61bb      	str	r3, [r7, #24]
 800f222:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f224:	6979      	ldr	r1, [r7, #20]
 800f226:	69ba      	ldr	r2, [r7, #24]
 800f228:	e841 2300 	strex	r3, r2, [r1]
 800f22c:	613b      	str	r3, [r7, #16]
   return(result);
 800f22e:	693b      	ldr	r3, [r7, #16]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d1e6      	bne.n	800f202 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2220      	movs	r2, #32
 800f238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2200      	movs	r2, #0
 800f240:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2200      	movs	r2, #0
 800f246:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f248:	bf00      	nop
 800f24a:	3754      	adds	r7, #84	; 0x54
 800f24c:	46bd      	mov	sp, r7
 800f24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f252:	4770      	bx	lr
 800f254:	effffffe 	.word	0xeffffffe

0800f258 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b084      	sub	sp, #16
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f264:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	2200      	movs	r2, #0
 800f26a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	2200      	movs	r2, #0
 800f272:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f276:	68f8      	ldr	r0, [r7, #12]
 800f278:	f7fe ff2a 	bl	800e0d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f27c:	bf00      	nop
 800f27e:	3710      	adds	r7, #16
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}

0800f284 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b088      	sub	sp, #32
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	e853 3f00 	ldrex	r3, [r3]
 800f298:	60bb      	str	r3, [r7, #8]
   return(result);
 800f29a:	68bb      	ldr	r3, [r7, #8]
 800f29c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f2a0:	61fb      	str	r3, [r7, #28]
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	69fb      	ldr	r3, [r7, #28]
 800f2aa:	61bb      	str	r3, [r7, #24]
 800f2ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2ae:	6979      	ldr	r1, [r7, #20]
 800f2b0:	69ba      	ldr	r2, [r7, #24]
 800f2b2:	e841 2300 	strex	r3, r2, [r1]
 800f2b6:	613b      	str	r3, [r7, #16]
   return(result);
 800f2b8:	693b      	ldr	r3, [r7, #16]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d1e6      	bne.n	800f28c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2220      	movs	r2, #32
 800f2c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f7fe fef5 	bl	800e0bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f2d2:	bf00      	nop
 800f2d4:	3720      	adds	r7, #32
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}

0800f2da <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f2da:	b580      	push	{r7, lr}
 800f2dc:	b096      	sub	sp, #88	; 0x58
 800f2de:	af00      	add	r7, sp, #0
 800f2e0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f2e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f2f2:	2b22      	cmp	r3, #34	; 0x22
 800f2f4:	f040 8095 	bne.w	800f422 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2fe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f302:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f306:	b2d9      	uxtb	r1, r3
 800f308:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f30c:	b2da      	uxtb	r2, r3
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f312:	400a      	ands	r2, r1
 800f314:	b2d2      	uxtb	r2, r2
 800f316:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f31c:	1c5a      	adds	r2, r3, #1
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f328:	b29b      	uxth	r3, r3
 800f32a:	3b01      	subs	r3, #1
 800f32c:	b29a      	uxth	r2, r3
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f33a:	b29b      	uxth	r3, r3
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d178      	bne.n	800f432 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f348:	e853 3f00 	ldrex	r3, [r3]
 800f34c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f34e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f350:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f354:	653b      	str	r3, [r7, #80]	; 0x50
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	461a      	mov	r2, r3
 800f35c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f35e:	647b      	str	r3, [r7, #68]	; 0x44
 800f360:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f362:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f364:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f366:	e841 2300 	strex	r3, r2, [r1]
 800f36a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f36c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d1e6      	bne.n	800f340 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	3308      	adds	r3, #8
 800f378:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f37c:	e853 3f00 	ldrex	r3, [r3]
 800f380:	623b      	str	r3, [r7, #32]
   return(result);
 800f382:	6a3b      	ldr	r3, [r7, #32]
 800f384:	f023 0301 	bic.w	r3, r3, #1
 800f388:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	3308      	adds	r3, #8
 800f390:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f392:	633a      	str	r2, [r7, #48]	; 0x30
 800f394:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f39a:	e841 2300 	strex	r3, r2, [r1]
 800f39e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d1e5      	bne.n	800f372 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2220      	movs	r2, #32
 800f3aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3b8:	2b01      	cmp	r3, #1
 800f3ba:	d12e      	bne.n	800f41a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3c8:	693b      	ldr	r3, [r7, #16]
 800f3ca:	e853 3f00 	ldrex	r3, [r3]
 800f3ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	f023 0310 	bic.w	r3, r3, #16
 800f3d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	461a      	mov	r2, r3
 800f3de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3e0:	61fb      	str	r3, [r7, #28]
 800f3e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3e4:	69b9      	ldr	r1, [r7, #24]
 800f3e6:	69fa      	ldr	r2, [r7, #28]
 800f3e8:	e841 2300 	strex	r3, r2, [r1]
 800f3ec:	617b      	str	r3, [r7, #20]
   return(result);
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d1e6      	bne.n	800f3c2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	69db      	ldr	r3, [r3, #28]
 800f3fa:	f003 0310 	and.w	r3, r3, #16
 800f3fe:	2b10      	cmp	r3, #16
 800f400:	d103      	bne.n	800f40a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	2210      	movs	r2, #16
 800f408:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f410:	4619      	mov	r1, r3
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f7fe fe66 	bl	800e0e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f418:	e00b      	b.n	800f432 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f7f1 fce8 	bl	8000df0 <HAL_UART_RxCpltCallback>
}
 800f420:	e007      	b.n	800f432 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	699a      	ldr	r2, [r3, #24]
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	f042 0208 	orr.w	r2, r2, #8
 800f430:	619a      	str	r2, [r3, #24]
}
 800f432:	bf00      	nop
 800f434:	3758      	adds	r7, #88	; 0x58
 800f436:	46bd      	mov	sp, r7
 800f438:	bd80      	pop	{r7, pc}

0800f43a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f43a:	b580      	push	{r7, lr}
 800f43c:	b096      	sub	sp, #88	; 0x58
 800f43e:	af00      	add	r7, sp, #0
 800f440:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f448:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f452:	2b22      	cmp	r3, #34	; 0x22
 800f454:	f040 8095 	bne.w	800f582 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f45e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f466:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f468:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f46c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f470:	4013      	ands	r3, r2
 800f472:	b29a      	uxth	r2, r3
 800f474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f476:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f47c:	1c9a      	adds	r2, r3, #2
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f488:	b29b      	uxth	r3, r3
 800f48a:	3b01      	subs	r3, #1
 800f48c:	b29a      	uxth	r2, r3
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f49a:	b29b      	uxth	r3, r3
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d178      	bne.n	800f592 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4a8:	e853 3f00 	ldrex	r3, [r3]
 800f4ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f4b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	461a      	mov	r2, r3
 800f4bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4be:	643b      	str	r3, [r7, #64]	; 0x40
 800f4c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f4c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f4c6:	e841 2300 	strex	r3, r2, [r1]
 800f4ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d1e6      	bne.n	800f4a0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	3308      	adds	r3, #8
 800f4d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4da:	6a3b      	ldr	r3, [r7, #32]
 800f4dc:	e853 3f00 	ldrex	r3, [r3]
 800f4e0:	61fb      	str	r3, [r7, #28]
   return(result);
 800f4e2:	69fb      	ldr	r3, [r7, #28]
 800f4e4:	f023 0301 	bic.w	r3, r3, #1
 800f4e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	3308      	adds	r3, #8
 800f4f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f4f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f4f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4fa:	e841 2300 	strex	r3, r2, [r1]
 800f4fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f502:	2b00      	cmp	r3, #0
 800f504:	d1e5      	bne.n	800f4d2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2220      	movs	r2, #32
 800f50a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2200      	movs	r2, #0
 800f512:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f518:	2b01      	cmp	r3, #1
 800f51a:	d12e      	bne.n	800f57a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2200      	movs	r2, #0
 800f520:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	e853 3f00 	ldrex	r3, [r3]
 800f52e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	f023 0310 	bic.w	r3, r3, #16
 800f536:	647b      	str	r3, [r7, #68]	; 0x44
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	461a      	mov	r2, r3
 800f53e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f540:	61bb      	str	r3, [r7, #24]
 800f542:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f544:	6979      	ldr	r1, [r7, #20]
 800f546:	69ba      	ldr	r2, [r7, #24]
 800f548:	e841 2300 	strex	r3, r2, [r1]
 800f54c:	613b      	str	r3, [r7, #16]
   return(result);
 800f54e:	693b      	ldr	r3, [r7, #16]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d1e6      	bne.n	800f522 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	69db      	ldr	r3, [r3, #28]
 800f55a:	f003 0310 	and.w	r3, r3, #16
 800f55e:	2b10      	cmp	r3, #16
 800f560:	d103      	bne.n	800f56a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	2210      	movs	r2, #16
 800f568:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f570:	4619      	mov	r1, r3
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	f7fe fdb6 	bl	800e0e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f578:	e00b      	b.n	800f592 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f57a:	6878      	ldr	r0, [r7, #4]
 800f57c:	f7f1 fc38 	bl	8000df0 <HAL_UART_RxCpltCallback>
}
 800f580:	e007      	b.n	800f592 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	699a      	ldr	r2, [r3, #24]
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	f042 0208 	orr.w	r2, r2, #8
 800f590:	619a      	str	r2, [r3, #24]
}
 800f592:	bf00      	nop
 800f594:	3758      	adds	r7, #88	; 0x58
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}
	...

0800f59c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b0a6      	sub	sp, #152	; 0x98
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f5aa:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	69db      	ldr	r3, [r3, #28]
 800f5b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	689b      	ldr	r3, [r3, #8]
 800f5c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f5d2:	2b22      	cmp	r3, #34	; 0x22
 800f5d4:	f040 814d 	bne.w	800f872 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f5de:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f5e2:	e0f4      	b.n	800f7ce <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5ea:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f5ee:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800f5f2:	b2d9      	uxtb	r1, r3
 800f5f4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800f5f8:	b2da      	uxtb	r2, r3
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5fe:	400a      	ands	r2, r1
 800f600:	b2d2      	uxtb	r2, r2
 800f602:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f608:	1c5a      	adds	r2, r3, #1
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f614:	b29b      	uxth	r3, r3
 800f616:	3b01      	subs	r3, #1
 800f618:	b29a      	uxth	r2, r3
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	69db      	ldr	r3, [r3, #28]
 800f626:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f62a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f62e:	f003 0307 	and.w	r3, r3, #7
 800f632:	2b00      	cmp	r3, #0
 800f634:	d053      	beq.n	800f6de <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f636:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f63a:	f003 0301 	and.w	r3, r3, #1
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d011      	beq.n	800f666 <UART_RxISR_8BIT_FIFOEN+0xca>
 800f642:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d00b      	beq.n	800f666 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	2201      	movs	r2, #1
 800f654:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f65c:	f043 0201 	orr.w	r2, r3, #1
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f666:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f66a:	f003 0302 	and.w	r3, r3, #2
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d011      	beq.n	800f696 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f672:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f676:	f003 0301 	and.w	r3, r3, #1
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d00b      	beq.n	800f696 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	2202      	movs	r2, #2
 800f684:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f68c:	f043 0204 	orr.w	r2, r3, #4
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f696:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f69a:	f003 0304 	and.w	r3, r3, #4
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d011      	beq.n	800f6c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f6a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f6a6:	f003 0301 	and.w	r3, r3, #1
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d00b      	beq.n	800f6c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	2204      	movs	r2, #4
 800f6b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f6bc:	f043 0202 	orr.w	r2, r3, #2
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d006      	beq.n	800f6de <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f6d0:	6878      	ldr	r0, [r7, #4]
 800f6d2:	f7fe fcfd 	bl	800e0d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2200      	movs	r2, #0
 800f6da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f6e4:	b29b      	uxth	r3, r3
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d171      	bne.n	800f7ce <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6f2:	e853 3f00 	ldrex	r3, [r3]
 800f6f6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f6f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f6fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	461a      	mov	r2, r3
 800f708:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f70c:	66bb      	str	r3, [r7, #104]	; 0x68
 800f70e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f710:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f712:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f714:	e841 2300 	strex	r3, r2, [r1]
 800f718:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f71a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d1e4      	bne.n	800f6ea <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	3308      	adds	r3, #8
 800f726:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f72a:	e853 3f00 	ldrex	r3, [r3]
 800f72e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f730:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f732:	4b56      	ldr	r3, [pc, #344]	; (800f88c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800f734:	4013      	ands	r3, r2
 800f736:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	3308      	adds	r3, #8
 800f73e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f740:	657a      	str	r2, [r7, #84]	; 0x54
 800f742:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f744:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f746:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f748:	e841 2300 	strex	r3, r2, [r1]
 800f74c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f74e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f750:	2b00      	cmp	r3, #0
 800f752:	d1e5      	bne.n	800f720 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2220      	movs	r2, #32
 800f758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2200      	movs	r2, #0
 800f760:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f766:	2b01      	cmp	r3, #1
 800f768:	d12e      	bne.n	800f7c8 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	2200      	movs	r2, #0
 800f76e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f778:	e853 3f00 	ldrex	r3, [r3]
 800f77c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f780:	f023 0310 	bic.w	r3, r3, #16
 800f784:	67bb      	str	r3, [r7, #120]	; 0x78
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	461a      	mov	r2, r3
 800f78c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f78e:	643b      	str	r3, [r7, #64]	; 0x40
 800f790:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f792:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f794:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f796:	e841 2300 	strex	r3, r2, [r1]
 800f79a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d1e6      	bne.n	800f770 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	69db      	ldr	r3, [r3, #28]
 800f7a8:	f003 0310 	and.w	r3, r3, #16
 800f7ac:	2b10      	cmp	r3, #16
 800f7ae:	d103      	bne.n	800f7b8 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	2210      	movs	r2, #16
 800f7b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f7be:	4619      	mov	r1, r3
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f7fe fc8f 	bl	800e0e4 <HAL_UARTEx_RxEventCallback>
 800f7c6:	e002      	b.n	800f7ce <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f7f1 fb11 	bl	8000df0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f7ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d006      	beq.n	800f7e4 <UART_RxISR_8BIT_FIFOEN+0x248>
 800f7d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f7da:	f003 0320 	and.w	r3, r3, #32
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	f47f af00 	bne.w	800f5e4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f7ea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f7ee:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d045      	beq.n	800f882 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f7fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f800:	429a      	cmp	r2, r3
 800f802:	d23e      	bcs.n	800f882 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	3308      	adds	r3, #8
 800f80a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f80c:	6a3b      	ldr	r3, [r7, #32]
 800f80e:	e853 3f00 	ldrex	r3, [r3]
 800f812:	61fb      	str	r3, [r7, #28]
   return(result);
 800f814:	69fb      	ldr	r3, [r7, #28]
 800f816:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f81a:	673b      	str	r3, [r7, #112]	; 0x70
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	3308      	adds	r3, #8
 800f822:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f824:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f826:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f82a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f82c:	e841 2300 	strex	r3, r2, [r1]
 800f830:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f834:	2b00      	cmp	r3, #0
 800f836:	d1e5      	bne.n	800f804 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	4a15      	ldr	r2, [pc, #84]	; (800f890 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800f83c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	e853 3f00 	ldrex	r3, [r3]
 800f84a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	f043 0320 	orr.w	r3, r3, #32
 800f852:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	461a      	mov	r2, r3
 800f85a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f85c:	61bb      	str	r3, [r7, #24]
 800f85e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f860:	6979      	ldr	r1, [r7, #20]
 800f862:	69ba      	ldr	r2, [r7, #24]
 800f864:	e841 2300 	strex	r3, r2, [r1]
 800f868:	613b      	str	r3, [r7, #16]
   return(result);
 800f86a:	693b      	ldr	r3, [r7, #16]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d1e6      	bne.n	800f83e <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f870:	e007      	b.n	800f882 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	699a      	ldr	r2, [r3, #24]
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	f042 0208 	orr.w	r2, r2, #8
 800f880:	619a      	str	r2, [r3, #24]
}
 800f882:	bf00      	nop
 800f884:	3798      	adds	r7, #152	; 0x98
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}
 800f88a:	bf00      	nop
 800f88c:	effffffe 	.word	0xeffffffe
 800f890:	0800f2db 	.word	0x0800f2db

0800f894 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b0a8      	sub	sp, #160	; 0xa0
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f8a2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	69db      	ldr	r3, [r3, #28]
 800f8ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	689b      	ldr	r3, [r3, #8]
 800f8c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f8ca:	2b22      	cmp	r3, #34	; 0x22
 800f8cc:	f040 8151 	bne.w	800fb72 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f8d6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f8da:	e0f8      	b.n	800face <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8e2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800f8ee:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800f8f2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800f8f6:	4013      	ands	r3, r2
 800f8f8:	b29a      	uxth	r2, r3
 800f8fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f904:	1c9a      	adds	r2, r3, #2
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f910:	b29b      	uxth	r3, r3
 800f912:	3b01      	subs	r3, #1
 800f914:	b29a      	uxth	r2, r3
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	69db      	ldr	r3, [r3, #28]
 800f922:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f926:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f92a:	f003 0307 	and.w	r3, r3, #7
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d053      	beq.n	800f9da <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f932:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f936:	f003 0301 	and.w	r3, r3, #1
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d011      	beq.n	800f962 <UART_RxISR_16BIT_FIFOEN+0xce>
 800f93e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f946:	2b00      	cmp	r3, #0
 800f948:	d00b      	beq.n	800f962 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	2201      	movs	r2, #1
 800f950:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f958:	f043 0201 	orr.w	r2, r3, #1
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f962:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f966:	f003 0302 	and.w	r3, r3, #2
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d011      	beq.n	800f992 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f96e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f972:	f003 0301 	and.w	r3, r3, #1
 800f976:	2b00      	cmp	r3, #0
 800f978:	d00b      	beq.n	800f992 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	2202      	movs	r2, #2
 800f980:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f988:	f043 0204 	orr.w	r2, r3, #4
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f992:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f996:	f003 0304 	and.w	r3, r3, #4
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d011      	beq.n	800f9c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f99e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f9a2:	f003 0301 	and.w	r3, r3, #1
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d00b      	beq.n	800f9c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	2204      	movs	r2, #4
 800f9b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9b8:	f043 0202 	orr.w	r2, r3, #2
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d006      	beq.n	800f9da <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	f7fe fb7f 	bl	800e0d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f9e0:	b29b      	uxth	r3, r3
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d173      	bne.n	800face <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f9ee:	e853 3f00 	ldrex	r3, [r3]
 800f9f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f9f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f9fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	461a      	mov	r2, r3
 800fa04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fa08:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fa0a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa0c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fa0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fa10:	e841 2300 	strex	r3, r2, [r1]
 800fa14:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fa16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d1e4      	bne.n	800f9e6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	3308      	adds	r3, #8
 800fa22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa26:	e853 3f00 	ldrex	r3, [r3]
 800fa2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fa2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa2e:	4b57      	ldr	r3, [pc, #348]	; (800fb8c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800fa30:	4013      	ands	r3, r2
 800fa32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	3308      	adds	r3, #8
 800fa3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fa40:	65ba      	str	r2, [r7, #88]	; 0x58
 800fa42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fa46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fa48:	e841 2300 	strex	r3, r2, [r1]
 800fa4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fa4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d1e3      	bne.n	800fa1c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2220      	movs	r2, #32
 800fa58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2200      	movs	r2, #0
 800fa60:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa66:	2b01      	cmp	r3, #1
 800fa68:	d12e      	bne.n	800fac8 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa78:	e853 3f00 	ldrex	r3, [r3]
 800fa7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fa7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa80:	f023 0310 	bic.w	r3, r3, #16
 800fa84:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	461a      	mov	r2, r3
 800fa8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fa8e:	647b      	str	r3, [r7, #68]	; 0x44
 800fa90:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fa94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa96:	e841 2300 	strex	r3, r2, [r1]
 800fa9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fa9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d1e6      	bne.n	800fa70 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	69db      	ldr	r3, [r3, #28]
 800faa8:	f003 0310 	and.w	r3, r3, #16
 800faac:	2b10      	cmp	r3, #16
 800faae:	d103      	bne.n	800fab8 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	2210      	movs	r2, #16
 800fab6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fabe:	4619      	mov	r1, r3
 800fac0:	6878      	ldr	r0, [r7, #4]
 800fac2:	f7fe fb0f 	bl	800e0e4 <HAL_UARTEx_RxEventCallback>
 800fac6:	e002      	b.n	800face <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	f7f1 f991 	bl	8000df0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800face:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d006      	beq.n	800fae4 <UART_RxISR_16BIT_FIFOEN+0x250>
 800fad6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fada:	f003 0320 	and.w	r3, r3, #32
 800fade:	2b00      	cmp	r3, #0
 800fae0:	f47f aefc 	bne.w	800f8dc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800faea:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800faee:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d045      	beq.n	800fb82 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fafc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800fb00:	429a      	cmp	r2, r3
 800fb02:	d23e      	bcs.n	800fb82 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	3308      	adds	r3, #8
 800fb0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb0e:	e853 3f00 	ldrex	r3, [r3]
 800fb12:	623b      	str	r3, [r7, #32]
   return(result);
 800fb14:	6a3b      	ldr	r3, [r7, #32]
 800fb16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fb1a:	677b      	str	r3, [r7, #116]	; 0x74
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	3308      	adds	r3, #8
 800fb22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fb24:	633a      	str	r2, [r7, #48]	; 0x30
 800fb26:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fb2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb2c:	e841 2300 	strex	r3, r2, [r1]
 800fb30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d1e5      	bne.n	800fb04 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	4a15      	ldr	r2, [pc, #84]	; (800fb90 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800fb3c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb44:	693b      	ldr	r3, [r7, #16]
 800fb46:	e853 3f00 	ldrex	r3, [r3]
 800fb4a:	60fb      	str	r3, [r7, #12]
   return(result);
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	f043 0320 	orr.w	r3, r3, #32
 800fb52:	673b      	str	r3, [r7, #112]	; 0x70
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	461a      	mov	r2, r3
 800fb5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb5c:	61fb      	str	r3, [r7, #28]
 800fb5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb60:	69b9      	ldr	r1, [r7, #24]
 800fb62:	69fa      	ldr	r2, [r7, #28]
 800fb64:	e841 2300 	strex	r3, r2, [r1]
 800fb68:	617b      	str	r3, [r7, #20]
   return(result);
 800fb6a:	697b      	ldr	r3, [r7, #20]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d1e6      	bne.n	800fb3e <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fb70:	e007      	b.n	800fb82 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	699a      	ldr	r2, [r3, #24]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	f042 0208 	orr.w	r2, r2, #8
 800fb80:	619a      	str	r2, [r3, #24]
}
 800fb82:	bf00      	nop
 800fb84:	37a0      	adds	r7, #160	; 0xa0
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}
 800fb8a:	bf00      	nop
 800fb8c:	effffffe 	.word	0xeffffffe
 800fb90:	0800f43b 	.word	0x0800f43b

0800fb94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fb94:	b480      	push	{r7}
 800fb96:	b083      	sub	sp, #12
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fb9c:	bf00      	nop
 800fb9e:	370c      	adds	r7, #12
 800fba0:	46bd      	mov	sp, r7
 800fba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba6:	4770      	bx	lr

0800fba8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fba8:	b480      	push	{r7}
 800fbaa:	b083      	sub	sp, #12
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fbb0:	bf00      	nop
 800fbb2:	370c      	adds	r7, #12
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbba:	4770      	bx	lr

0800fbbc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fbbc:	b480      	push	{r7}
 800fbbe:	b083      	sub	sp, #12
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fbc4:	bf00      	nop
 800fbc6:	370c      	adds	r7, #12
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbce:	4770      	bx	lr

0800fbd0 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b088      	sub	sp, #32
 800fbd4:	af02      	add	r7, sp, #8
 800fbd6:	60f8      	str	r0, [r7, #12]
 800fbd8:	1d3b      	adds	r3, r7, #4
 800fbda:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800fbde:	2300      	movs	r3, #0
 800fbe0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fbe8:	2b01      	cmp	r3, #1
 800fbea:	d101      	bne.n	800fbf0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800fbec:	2302      	movs	r3, #2
 800fbee:	e046      	b.n	800fc7e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	2201      	movs	r2, #1
 800fbf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	2224      	movs	r2, #36	; 0x24
 800fbfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	681a      	ldr	r2, [r3, #0]
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	f022 0201 	bic.w	r2, r2, #1
 800fc0e:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	689b      	ldr	r3, [r3, #8]
 800fc16:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800fc1a:	687a      	ldr	r2, [r7, #4]
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	430a      	orrs	r2, r1
 800fc22:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d105      	bne.n	800fc36 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800fc2a:	1d3b      	adds	r3, r7, #4
 800fc2c:	e893 0006 	ldmia.w	r3, {r1, r2}
 800fc30:	68f8      	ldr	r0, [r7, #12]
 800fc32:	f000 f910 	bl	800fe56 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	681a      	ldr	r2, [r3, #0]
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	f042 0201 	orr.w	r2, r2, #1
 800fc44:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fc46:	f7f2 ff1d 	bl	8002a84 <HAL_GetTick>
 800fc4a:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fc4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fc50:	9300      	str	r3, [sp, #0]
 800fc52:	693b      	ldr	r3, [r7, #16]
 800fc54:	2200      	movs	r2, #0
 800fc56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fc5a:	68f8      	ldr	r0, [r7, #12]
 800fc5c:	f7ff f8a3 	bl	800eda6 <UART_WaitOnFlagUntilTimeout>
 800fc60:	4603      	mov	r3, r0
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d002      	beq.n	800fc6c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800fc66:	2303      	movs	r3, #3
 800fc68:	75fb      	strb	r3, [r7, #23]
 800fc6a:	e003      	b.n	800fc74 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	2220      	movs	r2, #32
 800fc70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	2200      	movs	r2, #0
 800fc78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800fc7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc7e:	4618      	mov	r0, r3
 800fc80:	3718      	adds	r7, #24
 800fc82:	46bd      	mov	sp, r7
 800fc84:	bd80      	pop	{r7, pc}

0800fc86 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800fc86:	b480      	push	{r7}
 800fc88:	b089      	sub	sp, #36	; 0x24
 800fc8a:	af00      	add	r7, sp, #0
 800fc8c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fc94:	2b01      	cmp	r3, #1
 800fc96:	d101      	bne.n	800fc9c <HAL_UARTEx_EnableStopMode+0x16>
 800fc98:	2302      	movs	r3, #2
 800fc9a:	e021      	b.n	800fce0 <HAL_UARTEx_EnableStopMode+0x5a>
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	2201      	movs	r2, #1
 800fca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	e853 3f00 	ldrex	r3, [r3]
 800fcb0:	60bb      	str	r3, [r7, #8]
   return(result);
 800fcb2:	68bb      	ldr	r3, [r7, #8]
 800fcb4:	f043 0302 	orr.w	r3, r3, #2
 800fcb8:	61fb      	str	r3, [r7, #28]
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	461a      	mov	r2, r3
 800fcc0:	69fb      	ldr	r3, [r7, #28]
 800fcc2:	61bb      	str	r3, [r7, #24]
 800fcc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcc6:	6979      	ldr	r1, [r7, #20]
 800fcc8:	69ba      	ldr	r2, [r7, #24]
 800fcca:	e841 2300 	strex	r3, r2, [r1]
 800fcce:	613b      	str	r3, [r7, #16]
   return(result);
 800fcd0:	693b      	ldr	r3, [r7, #16]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d1e6      	bne.n	800fca4 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	2200      	movs	r2, #0
 800fcda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fcde:	2300      	movs	r3, #0
}
 800fce0:	4618      	mov	r0, r3
 800fce2:	3724      	adds	r7, #36	; 0x24
 800fce4:	46bd      	mov	sp, r7
 800fce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcea:	4770      	bx	lr

0800fcec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fcec:	b480      	push	{r7}
 800fcee:	b085      	sub	sp, #20
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fcfa:	2b01      	cmp	r3, #1
 800fcfc:	d101      	bne.n	800fd02 <HAL_UARTEx_DisableFifoMode+0x16>
 800fcfe:	2302      	movs	r3, #2
 800fd00:	e027      	b.n	800fd52 <HAL_UARTEx_DisableFifoMode+0x66>
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	2201      	movs	r2, #1
 800fd06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2224      	movs	r2, #36	; 0x24
 800fd0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	681a      	ldr	r2, [r3, #0]
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	f022 0201 	bic.w	r2, r2, #1
 800fd28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fd30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2200      	movs	r2, #0
 800fd36:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	68fa      	ldr	r2, [r7, #12]
 800fd3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2220      	movs	r2, #32
 800fd44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fd50:	2300      	movs	r3, #0
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	3714      	adds	r7, #20
 800fd56:	46bd      	mov	sp, r7
 800fd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5c:	4770      	bx	lr

0800fd5e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fd5e:	b580      	push	{r7, lr}
 800fd60:	b084      	sub	sp, #16
 800fd62:	af00      	add	r7, sp, #0
 800fd64:	6078      	str	r0, [r7, #4]
 800fd66:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fd6e:	2b01      	cmp	r3, #1
 800fd70:	d101      	bne.n	800fd76 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fd72:	2302      	movs	r3, #2
 800fd74:	e02d      	b.n	800fdd2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2201      	movs	r2, #1
 800fd7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	2224      	movs	r2, #36	; 0x24
 800fd82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	681a      	ldr	r2, [r3, #0]
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	f022 0201 	bic.w	r2, r2, #1
 800fd9c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	689b      	ldr	r3, [r3, #8]
 800fda4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	683a      	ldr	r2, [r7, #0]
 800fdae:	430a      	orrs	r2, r1
 800fdb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fdb2:	6878      	ldr	r0, [r7, #4]
 800fdb4:	f000 f872 	bl	800fe9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	68fa      	ldr	r2, [r7, #12]
 800fdbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2220      	movs	r2, #32
 800fdc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2200      	movs	r2, #0
 800fdcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fdd0:	2300      	movs	r3, #0
}
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	3710      	adds	r7, #16
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bd80      	pop	{r7, pc}

0800fdda <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fdda:	b580      	push	{r7, lr}
 800fddc:	b084      	sub	sp, #16
 800fdde:	af00      	add	r7, sp, #0
 800fde0:	6078      	str	r0, [r7, #4]
 800fde2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fdea:	2b01      	cmp	r3, #1
 800fdec:	d101      	bne.n	800fdf2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fdee:	2302      	movs	r3, #2
 800fdf0:	e02d      	b.n	800fe4e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2201      	movs	r2, #1
 800fdf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	2224      	movs	r2, #36	; 0x24
 800fdfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	681a      	ldr	r2, [r3, #0]
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	f022 0201 	bic.w	r2, r2, #1
 800fe18:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	689b      	ldr	r3, [r3, #8]
 800fe20:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	683a      	ldr	r2, [r7, #0]
 800fe2a:	430a      	orrs	r2, r1
 800fe2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fe2e:	6878      	ldr	r0, [r7, #4]
 800fe30:	f000 f834 	bl	800fe9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	68fa      	ldr	r2, [r7, #12]
 800fe3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2220      	movs	r2, #32
 800fe40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2200      	movs	r2, #0
 800fe48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fe4c:	2300      	movs	r3, #0
}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	3710      	adds	r7, #16
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}

0800fe56 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800fe56:	b480      	push	{r7}
 800fe58:	b085      	sub	sp, #20
 800fe5a:	af00      	add	r7, sp, #0
 800fe5c:	60f8      	str	r0, [r7, #12]
 800fe5e:	1d3b      	adds	r3, r7, #4
 800fe60:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	685b      	ldr	r3, [r3, #4]
 800fe6a:	f023 0210 	bic.w	r2, r3, #16
 800fe6e:	893b      	ldrh	r3, [r7, #8]
 800fe70:	4619      	mov	r1, r3
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	430a      	orrs	r2, r1
 800fe78:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	685b      	ldr	r3, [r3, #4]
 800fe80:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800fe84:	7abb      	ldrb	r3, [r7, #10]
 800fe86:	061a      	lsls	r2, r3, #24
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	430a      	orrs	r2, r1
 800fe8e:	605a      	str	r2, [r3, #4]
}
 800fe90:	bf00      	nop
 800fe92:	3714      	adds	r7, #20
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr

0800fe9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b085      	sub	sp, #20
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d108      	bne.n	800febe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2201      	movs	r2, #1
 800feb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2201      	movs	r2, #1
 800feb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800febc:	e031      	b.n	800ff22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800febe:	2310      	movs	r3, #16
 800fec0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fec2:	2310      	movs	r3, #16
 800fec4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	689b      	ldr	r3, [r3, #8]
 800fecc:	0e5b      	lsrs	r3, r3, #25
 800fece:	b2db      	uxtb	r3, r3
 800fed0:	f003 0307 	and.w	r3, r3, #7
 800fed4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	689b      	ldr	r3, [r3, #8]
 800fedc:	0f5b      	lsrs	r3, r3, #29
 800fede:	b2db      	uxtb	r3, r3
 800fee0:	f003 0307 	and.w	r3, r3, #7
 800fee4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fee6:	7bbb      	ldrb	r3, [r7, #14]
 800fee8:	7b3a      	ldrb	r2, [r7, #12]
 800feea:	4911      	ldr	r1, [pc, #68]	; (800ff30 <UARTEx_SetNbDataToProcess+0x94>)
 800feec:	5c8a      	ldrb	r2, [r1, r2]
 800feee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fef2:	7b3a      	ldrb	r2, [r7, #12]
 800fef4:	490f      	ldr	r1, [pc, #60]	; (800ff34 <UARTEx_SetNbDataToProcess+0x98>)
 800fef6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fef8:	fb93 f3f2 	sdiv	r3, r3, r2
 800fefc:	b29a      	uxth	r2, r3
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ff04:	7bfb      	ldrb	r3, [r7, #15]
 800ff06:	7b7a      	ldrb	r2, [r7, #13]
 800ff08:	4909      	ldr	r1, [pc, #36]	; (800ff30 <UARTEx_SetNbDataToProcess+0x94>)
 800ff0a:	5c8a      	ldrb	r2, [r1, r2]
 800ff0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ff10:	7b7a      	ldrb	r2, [r7, #13]
 800ff12:	4908      	ldr	r1, [pc, #32]	; (800ff34 <UARTEx_SetNbDataToProcess+0x98>)
 800ff14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ff16:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff1a:	b29a      	uxth	r2, r3
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ff22:	bf00      	nop
 800ff24:	3714      	adds	r7, #20
 800ff26:	46bd      	mov	sp, r7
 800ff28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2c:	4770      	bx	lr
 800ff2e:	bf00      	nop
 800ff30:	08010234 	.word	0x08010234
 800ff34:	0801023c 	.word	0x0801023c

0800ff38 <__errno>:
 800ff38:	4b01      	ldr	r3, [pc, #4]	; (800ff40 <__errno+0x8>)
 800ff3a:	6818      	ldr	r0, [r3, #0]
 800ff3c:	4770      	bx	lr
 800ff3e:	bf00      	nop
 800ff40:	24000034 	.word	0x24000034

0800ff44 <__libc_init_array>:
 800ff44:	b570      	push	{r4, r5, r6, lr}
 800ff46:	4d0d      	ldr	r5, [pc, #52]	; (800ff7c <__libc_init_array+0x38>)
 800ff48:	4c0d      	ldr	r4, [pc, #52]	; (800ff80 <__libc_init_array+0x3c>)
 800ff4a:	1b64      	subs	r4, r4, r5
 800ff4c:	10a4      	asrs	r4, r4, #2
 800ff4e:	2600      	movs	r6, #0
 800ff50:	42a6      	cmp	r6, r4
 800ff52:	d109      	bne.n	800ff68 <__libc_init_array+0x24>
 800ff54:	4d0b      	ldr	r5, [pc, #44]	; (800ff84 <__libc_init_array+0x40>)
 800ff56:	4c0c      	ldr	r4, [pc, #48]	; (800ff88 <__libc_init_array+0x44>)
 800ff58:	f000 f93c 	bl	80101d4 <_init>
 800ff5c:	1b64      	subs	r4, r4, r5
 800ff5e:	10a4      	asrs	r4, r4, #2
 800ff60:	2600      	movs	r6, #0
 800ff62:	42a6      	cmp	r6, r4
 800ff64:	d105      	bne.n	800ff72 <__libc_init_array+0x2e>
 800ff66:	bd70      	pop	{r4, r5, r6, pc}
 800ff68:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff6c:	4798      	blx	r3
 800ff6e:	3601      	adds	r6, #1
 800ff70:	e7ee      	b.n	800ff50 <__libc_init_array+0xc>
 800ff72:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff76:	4798      	blx	r3
 800ff78:	3601      	adds	r6, #1
 800ff7a:	e7f2      	b.n	800ff62 <__libc_init_array+0x1e>
 800ff7c:	0801024c 	.word	0x0801024c
 800ff80:	0801024c 	.word	0x0801024c
 800ff84:	0801024c 	.word	0x0801024c
 800ff88:	08010250 	.word	0x08010250

0800ff8c <malloc>:
 800ff8c:	4b02      	ldr	r3, [pc, #8]	; (800ff98 <malloc+0xc>)
 800ff8e:	4601      	mov	r1, r0
 800ff90:	6818      	ldr	r0, [r3, #0]
 800ff92:	f000 b88d 	b.w	80100b0 <_malloc_r>
 800ff96:	bf00      	nop
 800ff98:	24000034 	.word	0x24000034

0800ff9c <free>:
 800ff9c:	4b02      	ldr	r3, [pc, #8]	; (800ffa8 <free+0xc>)
 800ff9e:	4601      	mov	r1, r0
 800ffa0:	6818      	ldr	r0, [r3, #0]
 800ffa2:	f000 b819 	b.w	800ffd8 <_free_r>
 800ffa6:	bf00      	nop
 800ffa8:	24000034 	.word	0x24000034

0800ffac <memcpy>:
 800ffac:	440a      	add	r2, r1
 800ffae:	4291      	cmp	r1, r2
 800ffb0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ffb4:	d100      	bne.n	800ffb8 <memcpy+0xc>
 800ffb6:	4770      	bx	lr
 800ffb8:	b510      	push	{r4, lr}
 800ffba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ffc2:	4291      	cmp	r1, r2
 800ffc4:	d1f9      	bne.n	800ffba <memcpy+0xe>
 800ffc6:	bd10      	pop	{r4, pc}

0800ffc8 <memset>:
 800ffc8:	4402      	add	r2, r0
 800ffca:	4603      	mov	r3, r0
 800ffcc:	4293      	cmp	r3, r2
 800ffce:	d100      	bne.n	800ffd2 <memset+0xa>
 800ffd0:	4770      	bx	lr
 800ffd2:	f803 1b01 	strb.w	r1, [r3], #1
 800ffd6:	e7f9      	b.n	800ffcc <memset+0x4>

0800ffd8 <_free_r>:
 800ffd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ffda:	2900      	cmp	r1, #0
 800ffdc:	d044      	beq.n	8010068 <_free_r+0x90>
 800ffde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ffe2:	9001      	str	r0, [sp, #4]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	f1a1 0404 	sub.w	r4, r1, #4
 800ffea:	bfb8      	it	lt
 800ffec:	18e4      	addlt	r4, r4, r3
 800ffee:	f000 f8e3 	bl	80101b8 <__malloc_lock>
 800fff2:	4a1e      	ldr	r2, [pc, #120]	; (801006c <_free_r+0x94>)
 800fff4:	9801      	ldr	r0, [sp, #4]
 800fff6:	6813      	ldr	r3, [r2, #0]
 800fff8:	b933      	cbnz	r3, 8010008 <_free_r+0x30>
 800fffa:	6063      	str	r3, [r4, #4]
 800fffc:	6014      	str	r4, [r2, #0]
 800fffe:	b003      	add	sp, #12
 8010000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010004:	f000 b8de 	b.w	80101c4 <__malloc_unlock>
 8010008:	42a3      	cmp	r3, r4
 801000a:	d908      	bls.n	801001e <_free_r+0x46>
 801000c:	6825      	ldr	r5, [r4, #0]
 801000e:	1961      	adds	r1, r4, r5
 8010010:	428b      	cmp	r3, r1
 8010012:	bf01      	itttt	eq
 8010014:	6819      	ldreq	r1, [r3, #0]
 8010016:	685b      	ldreq	r3, [r3, #4]
 8010018:	1949      	addeq	r1, r1, r5
 801001a:	6021      	streq	r1, [r4, #0]
 801001c:	e7ed      	b.n	800fffa <_free_r+0x22>
 801001e:	461a      	mov	r2, r3
 8010020:	685b      	ldr	r3, [r3, #4]
 8010022:	b10b      	cbz	r3, 8010028 <_free_r+0x50>
 8010024:	42a3      	cmp	r3, r4
 8010026:	d9fa      	bls.n	801001e <_free_r+0x46>
 8010028:	6811      	ldr	r1, [r2, #0]
 801002a:	1855      	adds	r5, r2, r1
 801002c:	42a5      	cmp	r5, r4
 801002e:	d10b      	bne.n	8010048 <_free_r+0x70>
 8010030:	6824      	ldr	r4, [r4, #0]
 8010032:	4421      	add	r1, r4
 8010034:	1854      	adds	r4, r2, r1
 8010036:	42a3      	cmp	r3, r4
 8010038:	6011      	str	r1, [r2, #0]
 801003a:	d1e0      	bne.n	800fffe <_free_r+0x26>
 801003c:	681c      	ldr	r4, [r3, #0]
 801003e:	685b      	ldr	r3, [r3, #4]
 8010040:	6053      	str	r3, [r2, #4]
 8010042:	4421      	add	r1, r4
 8010044:	6011      	str	r1, [r2, #0]
 8010046:	e7da      	b.n	800fffe <_free_r+0x26>
 8010048:	d902      	bls.n	8010050 <_free_r+0x78>
 801004a:	230c      	movs	r3, #12
 801004c:	6003      	str	r3, [r0, #0]
 801004e:	e7d6      	b.n	800fffe <_free_r+0x26>
 8010050:	6825      	ldr	r5, [r4, #0]
 8010052:	1961      	adds	r1, r4, r5
 8010054:	428b      	cmp	r3, r1
 8010056:	bf04      	itt	eq
 8010058:	6819      	ldreq	r1, [r3, #0]
 801005a:	685b      	ldreq	r3, [r3, #4]
 801005c:	6063      	str	r3, [r4, #4]
 801005e:	bf04      	itt	eq
 8010060:	1949      	addeq	r1, r1, r5
 8010062:	6021      	streq	r1, [r4, #0]
 8010064:	6054      	str	r4, [r2, #4]
 8010066:	e7ca      	b.n	800fffe <_free_r+0x26>
 8010068:	b003      	add	sp, #12
 801006a:	bd30      	pop	{r4, r5, pc}
 801006c:	24000668 	.word	0x24000668

08010070 <sbrk_aligned>:
 8010070:	b570      	push	{r4, r5, r6, lr}
 8010072:	4e0e      	ldr	r6, [pc, #56]	; (80100ac <sbrk_aligned+0x3c>)
 8010074:	460c      	mov	r4, r1
 8010076:	6831      	ldr	r1, [r6, #0]
 8010078:	4605      	mov	r5, r0
 801007a:	b911      	cbnz	r1, 8010082 <sbrk_aligned+0x12>
 801007c:	f000 f88c 	bl	8010198 <_sbrk_r>
 8010080:	6030      	str	r0, [r6, #0]
 8010082:	4621      	mov	r1, r4
 8010084:	4628      	mov	r0, r5
 8010086:	f000 f887 	bl	8010198 <_sbrk_r>
 801008a:	1c43      	adds	r3, r0, #1
 801008c:	d00a      	beq.n	80100a4 <sbrk_aligned+0x34>
 801008e:	1cc4      	adds	r4, r0, #3
 8010090:	f024 0403 	bic.w	r4, r4, #3
 8010094:	42a0      	cmp	r0, r4
 8010096:	d007      	beq.n	80100a8 <sbrk_aligned+0x38>
 8010098:	1a21      	subs	r1, r4, r0
 801009a:	4628      	mov	r0, r5
 801009c:	f000 f87c 	bl	8010198 <_sbrk_r>
 80100a0:	3001      	adds	r0, #1
 80100a2:	d101      	bne.n	80100a8 <sbrk_aligned+0x38>
 80100a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80100a8:	4620      	mov	r0, r4
 80100aa:	bd70      	pop	{r4, r5, r6, pc}
 80100ac:	2400066c 	.word	0x2400066c

080100b0 <_malloc_r>:
 80100b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100b4:	1ccd      	adds	r5, r1, #3
 80100b6:	f025 0503 	bic.w	r5, r5, #3
 80100ba:	3508      	adds	r5, #8
 80100bc:	2d0c      	cmp	r5, #12
 80100be:	bf38      	it	cc
 80100c0:	250c      	movcc	r5, #12
 80100c2:	2d00      	cmp	r5, #0
 80100c4:	4607      	mov	r7, r0
 80100c6:	db01      	blt.n	80100cc <_malloc_r+0x1c>
 80100c8:	42a9      	cmp	r1, r5
 80100ca:	d905      	bls.n	80100d8 <_malloc_r+0x28>
 80100cc:	230c      	movs	r3, #12
 80100ce:	603b      	str	r3, [r7, #0]
 80100d0:	2600      	movs	r6, #0
 80100d2:	4630      	mov	r0, r6
 80100d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100d8:	4e2e      	ldr	r6, [pc, #184]	; (8010194 <_malloc_r+0xe4>)
 80100da:	f000 f86d 	bl	80101b8 <__malloc_lock>
 80100de:	6833      	ldr	r3, [r6, #0]
 80100e0:	461c      	mov	r4, r3
 80100e2:	bb34      	cbnz	r4, 8010132 <_malloc_r+0x82>
 80100e4:	4629      	mov	r1, r5
 80100e6:	4638      	mov	r0, r7
 80100e8:	f7ff ffc2 	bl	8010070 <sbrk_aligned>
 80100ec:	1c43      	adds	r3, r0, #1
 80100ee:	4604      	mov	r4, r0
 80100f0:	d14d      	bne.n	801018e <_malloc_r+0xde>
 80100f2:	6834      	ldr	r4, [r6, #0]
 80100f4:	4626      	mov	r6, r4
 80100f6:	2e00      	cmp	r6, #0
 80100f8:	d140      	bne.n	801017c <_malloc_r+0xcc>
 80100fa:	6823      	ldr	r3, [r4, #0]
 80100fc:	4631      	mov	r1, r6
 80100fe:	4638      	mov	r0, r7
 8010100:	eb04 0803 	add.w	r8, r4, r3
 8010104:	f000 f848 	bl	8010198 <_sbrk_r>
 8010108:	4580      	cmp	r8, r0
 801010a:	d13a      	bne.n	8010182 <_malloc_r+0xd2>
 801010c:	6821      	ldr	r1, [r4, #0]
 801010e:	3503      	adds	r5, #3
 8010110:	1a6d      	subs	r5, r5, r1
 8010112:	f025 0503 	bic.w	r5, r5, #3
 8010116:	3508      	adds	r5, #8
 8010118:	2d0c      	cmp	r5, #12
 801011a:	bf38      	it	cc
 801011c:	250c      	movcc	r5, #12
 801011e:	4629      	mov	r1, r5
 8010120:	4638      	mov	r0, r7
 8010122:	f7ff ffa5 	bl	8010070 <sbrk_aligned>
 8010126:	3001      	adds	r0, #1
 8010128:	d02b      	beq.n	8010182 <_malloc_r+0xd2>
 801012a:	6823      	ldr	r3, [r4, #0]
 801012c:	442b      	add	r3, r5
 801012e:	6023      	str	r3, [r4, #0]
 8010130:	e00e      	b.n	8010150 <_malloc_r+0xa0>
 8010132:	6822      	ldr	r2, [r4, #0]
 8010134:	1b52      	subs	r2, r2, r5
 8010136:	d41e      	bmi.n	8010176 <_malloc_r+0xc6>
 8010138:	2a0b      	cmp	r2, #11
 801013a:	d916      	bls.n	801016a <_malloc_r+0xba>
 801013c:	1961      	adds	r1, r4, r5
 801013e:	42a3      	cmp	r3, r4
 8010140:	6025      	str	r5, [r4, #0]
 8010142:	bf18      	it	ne
 8010144:	6059      	strne	r1, [r3, #4]
 8010146:	6863      	ldr	r3, [r4, #4]
 8010148:	bf08      	it	eq
 801014a:	6031      	streq	r1, [r6, #0]
 801014c:	5162      	str	r2, [r4, r5]
 801014e:	604b      	str	r3, [r1, #4]
 8010150:	4638      	mov	r0, r7
 8010152:	f104 060b 	add.w	r6, r4, #11
 8010156:	f000 f835 	bl	80101c4 <__malloc_unlock>
 801015a:	f026 0607 	bic.w	r6, r6, #7
 801015e:	1d23      	adds	r3, r4, #4
 8010160:	1af2      	subs	r2, r6, r3
 8010162:	d0b6      	beq.n	80100d2 <_malloc_r+0x22>
 8010164:	1b9b      	subs	r3, r3, r6
 8010166:	50a3      	str	r3, [r4, r2]
 8010168:	e7b3      	b.n	80100d2 <_malloc_r+0x22>
 801016a:	6862      	ldr	r2, [r4, #4]
 801016c:	42a3      	cmp	r3, r4
 801016e:	bf0c      	ite	eq
 8010170:	6032      	streq	r2, [r6, #0]
 8010172:	605a      	strne	r2, [r3, #4]
 8010174:	e7ec      	b.n	8010150 <_malloc_r+0xa0>
 8010176:	4623      	mov	r3, r4
 8010178:	6864      	ldr	r4, [r4, #4]
 801017a:	e7b2      	b.n	80100e2 <_malloc_r+0x32>
 801017c:	4634      	mov	r4, r6
 801017e:	6876      	ldr	r6, [r6, #4]
 8010180:	e7b9      	b.n	80100f6 <_malloc_r+0x46>
 8010182:	230c      	movs	r3, #12
 8010184:	603b      	str	r3, [r7, #0]
 8010186:	4638      	mov	r0, r7
 8010188:	f000 f81c 	bl	80101c4 <__malloc_unlock>
 801018c:	e7a1      	b.n	80100d2 <_malloc_r+0x22>
 801018e:	6025      	str	r5, [r4, #0]
 8010190:	e7de      	b.n	8010150 <_malloc_r+0xa0>
 8010192:	bf00      	nop
 8010194:	24000668 	.word	0x24000668

08010198 <_sbrk_r>:
 8010198:	b538      	push	{r3, r4, r5, lr}
 801019a:	4d06      	ldr	r5, [pc, #24]	; (80101b4 <_sbrk_r+0x1c>)
 801019c:	2300      	movs	r3, #0
 801019e:	4604      	mov	r4, r0
 80101a0:	4608      	mov	r0, r1
 80101a2:	602b      	str	r3, [r5, #0]
 80101a4:	f7f2 fb00 	bl	80027a8 <_sbrk>
 80101a8:	1c43      	adds	r3, r0, #1
 80101aa:	d102      	bne.n	80101b2 <_sbrk_r+0x1a>
 80101ac:	682b      	ldr	r3, [r5, #0]
 80101ae:	b103      	cbz	r3, 80101b2 <_sbrk_r+0x1a>
 80101b0:	6023      	str	r3, [r4, #0]
 80101b2:	bd38      	pop	{r3, r4, r5, pc}
 80101b4:	24000670 	.word	0x24000670

080101b8 <__malloc_lock>:
 80101b8:	4801      	ldr	r0, [pc, #4]	; (80101c0 <__malloc_lock+0x8>)
 80101ba:	f000 b809 	b.w	80101d0 <__retarget_lock_acquire_recursive>
 80101be:	bf00      	nop
 80101c0:	24000674 	.word	0x24000674

080101c4 <__malloc_unlock>:
 80101c4:	4801      	ldr	r0, [pc, #4]	; (80101cc <__malloc_unlock+0x8>)
 80101c6:	f000 b804 	b.w	80101d2 <__retarget_lock_release_recursive>
 80101ca:	bf00      	nop
 80101cc:	24000674 	.word	0x24000674

080101d0 <__retarget_lock_acquire_recursive>:
 80101d0:	4770      	bx	lr

080101d2 <__retarget_lock_release_recursive>:
 80101d2:	4770      	bx	lr

080101d4 <_init>:
 80101d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101d6:	bf00      	nop
 80101d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101da:	bc08      	pop	{r3}
 80101dc:	469e      	mov	lr, r3
 80101de:	4770      	bx	lr

080101e0 <_fini>:
 80101e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101e2:	bf00      	nop
 80101e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101e6:	bc08      	pop	{r3}
 80101e8:	469e      	mov	lr, r3
 80101ea:	4770      	bx	lr
