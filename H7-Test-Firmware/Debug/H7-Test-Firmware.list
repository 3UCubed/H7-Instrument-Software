
H7-Test-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd9c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08010034  08010034  00020034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801008c  0801008c  0002008c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010094  08010094  00020094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010098  08010098  00020098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  24000000  0801009c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000058c  240000a0  0801013c  000300a0  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400062c  0801013c  0003062c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023b37  00000000  00000000  000300ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000036dd  00000000  00000000  00053c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b58  00000000  00000000  000572e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001a10  00000000  00000000  00058e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b1ff  00000000  00000000  0005a850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000240cf  00000000  00000000  00095a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00180625  00000000  00000000  000b9b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023a143  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007958  00000000  00000000  0023a194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000a0 	.word	0x240000a0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0801001c 	.word	0x0801001c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000a4 	.word	0x240000a4
 80002d4:	0801001c 	.word	0x0801001c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ee:	4904      	ldr	r1, [pc, #16]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x28>)
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f6:	f3bf 8f4f 	dsb	sy
}
 80005fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <__NVIC_SystemReset+0x20>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	05fa0004 	.word	0x05fa0004

08000608 <poll_i2c_sensor>:
 *
 * @param TEMP_ADDR address of individual i2c sensor
 * @return int16_t integer result from sensor
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af02      	add	r7, sp, #8
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
  int16_t output;
  uint8_t buf[2];
  HAL_StatusTypeDef ret;
  buf[0] = REG_TEMP;
 8000612:	2300      	movs	r3, #0
 8000614:	723b      	strb	r3, [r7, #8]
  ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1,
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	b299      	uxth	r1, r3
 800061a:	f107 0208 	add.w	r2, r7, #8
 800061e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2301      	movs	r3, #1
 8000626:	481d      	ldr	r0, [pc, #116]	; (800069c <poll_i2c_sensor+0x94>)
 8000628:	f007 fb0c 	bl	8007c44 <HAL_I2C_Master_Transmit>
 800062c:	4603      	mov	r3, r0
 800062e:	737b      	strb	r3, [r7, #13]
                                1000);
  if (ret != HAL_OK)
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d009      	beq.n	800064a <poll_i2c_sensor+0x42>
  {
    strcpy((char *)buf, "Error Tx\r\n");
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	4a19      	ldr	r2, [pc, #100]	; (80006a0 <poll_i2c_sensor+0x98>)
 800063c:	ca07      	ldmia	r2, {r0, r1, r2}
 800063e:	c303      	stmia	r3!, {r0, r1}
 8000640:	801a      	strh	r2, [r3, #0]
 8000642:	3302      	adds	r3, #2
 8000644:	0c12      	lsrs	r2, r2, #16
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	e022      	b.n	8000690 <poll_i2c_sensor+0x88>
  }
  else
  {
    /* Read 2 bytes from the temperature register */
    ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2,
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	b299      	uxth	r1, r3
 800064e:	f107 0208 	add.w	r2, r7, #8
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2302      	movs	r3, #2
 800065a:	4810      	ldr	r0, [pc, #64]	; (800069c <poll_i2c_sensor+0x94>)
 800065c:	f007 fbe6 	bl	8007e2c <HAL_I2C_Master_Receive>
 8000660:	4603      	mov	r3, r0
 8000662:	737b      	strb	r3, [r7, #13]
                                 1000);
    if (ret != HAL_OK)
 8000664:	7b7b      	ldrb	r3, [r7, #13]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d009      	beq.n	800067e <poll_i2c_sensor+0x76>
    {
      strcpy((char *)buf, "Error Rx\r\n");
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <poll_i2c_sensor+0x9c>)
 8000670:	ca07      	ldmia	r2, {r0, r1, r2}
 8000672:	c303      	stmia	r3!, {r0, r1}
 8000674:	801a      	strh	r2, [r3, #0]
 8000676:	3302      	adds	r3, #2
 8000678:	0c12      	lsrs	r2, r2, #16
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	e008      	b.n	8000690 <poll_i2c_sensor+0x88>
    }
    else
    {
      output = (int16_t)(buf[0] << 8);
 800067e:	7a3b      	ldrb	r3, [r7, #8]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	81fb      	strh	r3, [r7, #14]
      output = (output | buf[1]) >> 3;
 8000684:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000688:	7a7a      	ldrb	r2, [r7, #9]
 800068a:	4313      	orrs	r3, r2
 800068c:	10db      	asrs	r3, r3, #3
 800068e:	81fb      	strh	r3, [r7, #14]
    }
  }
  return output;
 8000690:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	24000288 	.word	0x24000288
 80006a0:	08010034 	.word	0x08010034
 80006a4:	08010040 	.word	0x08010040

080006a8 <i2c>:
 * @brief called in hk routine to poll each i2c sensor
 *
 * @return int16_t* size 4 buffer to return i2c values
 */
int16_t *i2c()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
  int16_t output1 = poll_i2c_sensor(ADT7410_1);
 80006ae:	2390      	movs	r3, #144	; 0x90
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffa9 	bl	8000608 <poll_i2c_sensor>
 80006b6:	4603      	mov	r3, r0
 80006b8:	81fb      	strh	r3, [r7, #14]
  int16_t output2 = poll_i2c_sensor(ADT7410_2);
 80006ba:	2394      	movs	r3, #148	; 0x94
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffa3 	bl	8000608 <poll_i2c_sensor>
 80006c2:	4603      	mov	r3, r0
 80006c4:	81bb      	strh	r3, [r7, #12]
  int16_t output3 = poll_i2c_sensor(ADT7410_3);
 80006c6:	2392      	movs	r3, #146	; 0x92
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff9d 	bl	8000608 <poll_i2c_sensor>
 80006ce:	4603      	mov	r3, r0
 80006d0:	817b      	strh	r3, [r7, #10]
  int16_t output4 = poll_i2c_sensor(ADT7410_4);
 80006d2:	2396      	movs	r3, #150	; 0x96
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff97 	bl	8000608 <poll_i2c_sensor>
 80006da:	4603      	mov	r3, r0
 80006dc:	813b      	strh	r3, [r7, #8]

  int16_t *results = malloc(4 * sizeof(int16_t));
 80006de:	2008      	movs	r0, #8
 80006e0:	f00f fb78 	bl	800fdd4 <malloc>
 80006e4:	4603      	mov	r3, r0
 80006e6:	607b      	str	r3, [r7, #4]
  results[0] = output1;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	89fa      	ldrh	r2, [r7, #14]
 80006ec:	801a      	strh	r2, [r3, #0]
  results[1] = output2;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3302      	adds	r3, #2
 80006f2:	89ba      	ldrh	r2, [r7, #12]
 80006f4:	801a      	strh	r2, [r3, #0]
  results[2] = output3;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3304      	adds	r3, #4
 80006fa:	897a      	ldrh	r2, [r7, #10]
 80006fc:	801a      	strh	r2, [r3, #0]
  results[3] = output4;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3306      	adds	r3, #6
 8000702:	893a      	ldrh	r2, [r7, #8]
 8000704:	801a      	strh	r2, [r3, #0]
  return results;
 8000706:	687b      	ldr	r3, [r7, #4]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <do_auto_sweep>:
/**
 * @brief if auto sweep is enabled, will increase step
 *
 */
void do_auto_sweep()
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	if (step == 9)
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <do_auto_sweep+0x80>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b09      	cmp	r3, #9
 800071a:	d109      	bne.n	8000730 <do_auto_sweep+0x20>
	  {
		  is_increasing = 0;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <do_auto_sweep+0x84>)
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
		  step--;
 8000722:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <do_auto_sweep+0x80>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	3b01      	subs	r3, #1
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <do_auto_sweep+0x80>)
 800072c:	701a      	strb	r2, [r3, #0]
 800072e:	e00c      	b.n	800074a <do_auto_sweep+0x3a>
	  }
	  else if (step == 0)
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <do_auto_sweep+0x80>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d108      	bne.n	800074a <do_auto_sweep+0x3a>
	  {
	    is_increasing = 1;
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <do_auto_sweep+0x84>)
 800073a:	2201      	movs	r2, #1
 800073c:	601a      	str	r2, [r3, #0]
	    step++;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <do_auto_sweep+0x80>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	3301      	adds	r3, #1
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <do_auto_sweep+0x80>)
 8000748:	701a      	strb	r2, [r3, #0]
	  }

	  if (is_increasing)
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <do_auto_sweep+0x84>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d006      	beq.n	8000760 <do_auto_sweep+0x50>
	  {
	    step++;
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <do_auto_sweep+0x80>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <do_auto_sweep+0x80>)
 800075c:	701a      	strb	r2, [r3, #0]
 800075e:	e005      	b.n	800076c <do_auto_sweep+0x5c>
	  }
	  else
	  {
	    step--;
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <do_auto_sweep+0x80>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	3b01      	subs	r3, #1
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <do_auto_sweep+0x80>)
 800076a:	701a      	strb	r2, [r3, #0]
	  }

	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <do_auto_sweep+0x80>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <do_auto_sweep+0x88>)
 8000774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000778:	2200      	movs	r2, #0
 800077a:	2100      	movs	r1, #0
 800077c:	4807      	ldr	r0, [pc, #28]	; (800079c <do_auto_sweep+0x8c>)
 800077e:	f004 f85e 	bl	800483e <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000782:	2100      	movs	r1, #0
 8000784:	4805      	ldr	r0, [pc, #20]	; (800079c <do_auto_sweep+0x8c>)
 8000786:	f004 f808 	bl	800479a <HAL_DAC_Start>

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	24000600 	.word	0x24000600
 8000794:	24000028 	.word	0x24000028
 8000798:	24000000 	.word	0x24000000
 800079c:	24000274 	.word	0x24000274

080007a0 <spi>:
 *
 * @param spi given spi peripheral
 * @return uint16_t raw value from reading spi peripheral
 */
uint8_t* spi(SPI_HandleTypeDef spi)
{
 80007a0:	b084      	sub	sp, #16
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b084      	sub	sp, #16
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	f107 0c18 	add.w	ip, r7, #24
 80007ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiRxBuffer[2];
	HAL_SPI_Receive(&spi,(uint8_t *)spiRxBuffer, 1, 1);
 80007b0:	1d39      	adds	r1, r7, #4
 80007b2:	2301      	movs	r3, #1
 80007b4:	2201      	movs	r2, #1
 80007b6:	f107 0018 	add.w	r0, r7, #24
 80007ba:	f00b f9ff 	bl	800bbbc <HAL_SPI_Receive>
	uint8_t SPI_LSB = ((spiRxBuffer[0] & 0xFF00) >> 8);
 80007be:	2300      	movs	r3, #0
 80007c0:	73fb      	strb	r3, [r7, #15]
	uint8_t SPI_MSB = (spiRxBuffer[1] & 0xFF);
 80007c2:	797b      	ldrb	r3, [r7, #5]
 80007c4:	73bb      	strb	r3, [r7, #14]
	spi.Instance->CR1 |= 1<<10; // THIS IS NEEDED TO STOP SPI2_SCK FROM GENERATING CLOCK PULSES
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80007d0:	601a      	str	r2, [r3, #0]
	uint8_t* results = malloc(2 * sizeof(uint8_t));
 80007d2:	2002      	movs	r0, #2
 80007d4:	f00f fafe 	bl	800fdd4 <malloc>
 80007d8:	4603      	mov	r3, r0
 80007da:	60bb      	str	r3, [r7, #8]
	results[0] = SPI_MSB;
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	7bba      	ldrb	r2, [r7, #14]
 80007e0:	701a      	strb	r2, [r3, #0]
	results[1] = SPI_LSB;
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	3301      	adds	r3, #1
 80007e6:	7bfa      	ldrb	r2, [r7, #15]
 80007e8:	701a      	strb	r2, [r3, #0]
	return results;
 80007ea:	68bb      	ldr	r3, [r7, #8]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007f6:	b004      	add	sp, #16
 80007f8:	4770      	bx	lr
	...

080007fc <set_erpa_sweep>:
/**
 * @brief Set the erpa sweep value
 *
 */
void set_erpa_sweep()
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <set_erpa_sweep+0x28>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <set_erpa_sweep+0x2c>)
 8000808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800080c:	2200      	movs	r2, #0
 800080e:	2100      	movs	r1, #0
 8000810:	4806      	ldr	r0, [pc, #24]	; (800082c <set_erpa_sweep+0x30>)
 8000812:	f004 f814 	bl	800483e <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000816:	2100      	movs	r1, #0
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <set_erpa_sweep+0x30>)
 800081a:	f003 ffbe 	bl	800479a <HAL_DAC_Start>

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	24000600 	.word	0x24000600
 8000828:	24000000 	.word	0x24000000
 800082c:	24000274 	.word	0x24000274

08000830 <erpa_adc>:
/**
 * @brief polls erpa adcs
 *
 * @return uint16_t* results of erpa adcs
 */
uint16_t* erpa_adc() {
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0

	HAL_ADC_Stop_DMA(&hadc1);
 8000836:	4815      	ldr	r0, [pc, #84]	; (800088c <erpa_adc+0x5c>)
 8000838:	f002 fde2 	bl	8003400 <HAL_ADC_Stop_DMA>
	if (HAL_ADC_Start_DMA(&hadc1,
 800083c:	2220      	movs	r2, #32
 800083e:	4914      	ldr	r1, [pc, #80]	; (8000890 <erpa_adc+0x60>)
 8000840:	4812      	ldr	r0, [pc, #72]	; (800088c <erpa_adc+0x5c>)
 8000842:	f002 fd19 	bl	8003278 <HAL_ADC_Start_DMA>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <erpa_adc+0x20>
		(uint32_t *)ADC1Data,
		 ADC_CONVERTED_DATA_BUFFER_SIZE
	) != HAL_OK) {
		 Error_Handler();
 800084c:	f001 fb2a 	bl	8001ea4 <Error_Handler>
	}

	uint16_t PA0 = ADC1Data[10]; 			// ENDmon --
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <erpa_adc+0x60>)
 8000852:	8a9b      	ldrh	r3, [r3, #20]
 8000854:	81fb      	strh	r3, [r7, #14]
	uint16_t PA7 = ADC1Data[3]; 			// SWPmon -- verified
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <erpa_adc+0x60>)
 8000858:	88db      	ldrh	r3, [r3, #6]
 800085a:	81bb      	strh	r3, [r7, #12]
	uint16_t PB0 = ADC1Data[5]; 			// TEMP1 -- verified
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <erpa_adc+0x60>)
 800085e:	895b      	ldrh	r3, [r3, #10]
 8000860:	817b      	strh	r3, [r7, #10]

	uint16_t* results = malloc(3 * sizeof(uint16_t));
 8000862:	2006      	movs	r0, #6
 8000864:	f00f fab6 	bl	800fdd4 <malloc>
 8000868:	4603      	mov	r3, r0
 800086a:	607b      	str	r3, [r7, #4]
	results[0] = PA0;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	89fa      	ldrh	r2, [r7, #14]
 8000870:	801a      	strh	r2, [r3, #0]
	results[1] = PA7;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	3302      	adds	r3, #2
 8000876:	89ba      	ldrh	r2, [r7, #12]
 8000878:	801a      	strh	r2, [r3, #0]
	results[2] = PB0;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3304      	adds	r3, #4
 800087e:	897a      	ldrh	r2, [r7, #10]
 8000880:	801a      	strh	r2, [r3, #0]

	return results;
 8000882:	687b      	ldr	r3, [r7, #4]


}
 8000884:	4618      	mov	r0, r3
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	240000bc 	.word	0x240000bc
 8000890:	24000580 	.word	0x24000580

08000894 <hk_adc1>:

uint16_t* hk_adc1() {
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0

	HAL_ADC_Stop_DMA(&hadc1);
 800089a:	4831      	ldr	r0, [pc, #196]	; (8000960 <hk_adc1+0xcc>)
 800089c:	f002 fdb0 	bl	8003400 <HAL_ADC_Stop_DMA>
	if (HAL_ADC_Start_DMA(&hadc1,
 80008a0:	2220      	movs	r2, #32
 80008a2:	4930      	ldr	r1, [pc, #192]	; (8000964 <hk_adc1+0xd0>)
 80008a4:	482e      	ldr	r0, [pc, #184]	; (8000960 <hk_adc1+0xcc>)
 80008a6:	f002 fce7 	bl	8003278 <HAL_ADC_Start_DMA>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <hk_adc1+0x20>
			(uint32_t *)ADC1Data,
			ADC_CONVERTED_DATA_BUFFER_SIZE)
			!= HAL_OK) {
		Error_Handler();
 80008b0:	f001 faf8 	bl	8001ea4 <Error_Handler>
	}

	uint16_t PA1 = ADC1Data[14];			// BUSVmon -- NEEDS TO CHANGE FOR 100 PIN VERSION
 80008b4:	4b2b      	ldr	r3, [pc, #172]	; (8000964 <hk_adc1+0xd0>)
 80008b6:	8b9b      	ldrh	r3, [r3, #28]
 80008b8:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1Data[1];				// BUSImon --
 80008ba:	4b2a      	ldr	r3, [pc, #168]	; (8000964 <hk_adc1+0xd0>)
 80008bc:	885b      	ldrh	r3, [r3, #2]
 80008be:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1Data[4];				// 2v5mon --
 80008c0:	4b28      	ldr	r3, [pc, #160]	; (8000964 <hk_adc1+0xd0>)
 80008c2:	891b      	ldrh	r3, [r3, #8]
 80008c4:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1Data[5];				// 3v3mon --
 80008c6:	4b27      	ldr	r3, [pc, #156]	; (8000964 <hk_adc1+0xd0>)
 80008c8:	895b      	ldrh	r3, [r3, #10]
 80008ca:	833b      	strh	r3, [r7, #24]
	uint16_t PC2 = ADC1Data[6];				// 5vmon --
 80008cc:	4b25      	ldr	r3, [pc, #148]	; (8000964 <hk_adc1+0xd0>)
 80008ce:	899b      	ldrh	r3, [r3, #12]
 80008d0:	82fb      	strh	r3, [r7, #22]
	uint16_t PC3 = ADC1Data[7];				// n3v3mon --
 80008d2:	4b24      	ldr	r3, [pc, #144]	; (8000964 <hk_adc1+0xd0>)
 80008d4:	89db      	ldrh	r3, [r3, #14]
 80008d6:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1Data[8];				// n5vmon --
 80008d8:	4b22      	ldr	r3, [pc, #136]	; (8000964 <hk_adc1+0xd0>)
 80008da:	8a1b      	ldrh	r3, [r3, #16]
 80008dc:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1Data[9];				// 15vmon --
 80008de:	4b21      	ldr	r3, [pc, #132]	; (8000964 <hk_adc1+0xd0>)
 80008e0:	8a5b      	ldrh	r3, [r3, #18]
 80008e2:	823b      	strh	r3, [r7, #16]
	uint16_t PB1 = ADC1Data[10];			// 5vrefmon -- NEEDS TO CHANGE FOR 100 PIN VERSION
 80008e4:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <hk_adc1+0xd0>)
 80008e6:	8a9b      	ldrh	r3, [r3, #20]
 80008e8:	81fb      	strh	r3, [r7, #14]
	uint16_t PA5 = ADC1Data[11];			// n200vmon --
 80008ea:	4b1e      	ldr	r3, [pc, #120]	; (8000964 <hk_adc1+0xd0>)
 80008ec:	8adb      	ldrh	r3, [r3, #22]
 80008ee:	81bb      	strh	r3, [r7, #12]
	uint16_t PA6 = ADC1Data[12];			// n800vmon --
 80008f0:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <hk_adc1+0xd0>)
 80008f2:	8b1b      	ldrh	r3, [r3, #24]
 80008f4:	817b      	strh	r3, [r7, #10]

	uint16_t* results = malloc(11 * sizeof(uint16_t));
 80008f6:	2016      	movs	r0, #22
 80008f8:	f00f fa6c 	bl	800fdd4 <malloc>
 80008fc:	4603      	mov	r3, r0
 80008fe:	607b      	str	r3, [r7, #4]
	results[0] = PA1;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	8bfa      	ldrh	r2, [r7, #30]
 8000904:	801a      	strh	r2, [r3, #0]
	results[1] = PA2;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3302      	adds	r3, #2
 800090a:	8bba      	ldrh	r2, [r7, #28]
 800090c:	801a      	strh	r2, [r3, #0]
	results[2] = PC0;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	3304      	adds	r3, #4
 8000912:	8b7a      	ldrh	r2, [r7, #26]
 8000914:	801a      	strh	r2, [r3, #0]
	results[3] = PA3;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3306      	adds	r3, #6
 800091a:	8b3a      	ldrh	r2, [r7, #24]
 800091c:	801a      	strh	r2, [r3, #0]
	results[4] = PC2;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	3308      	adds	r3, #8
 8000922:	8afa      	ldrh	r2, [r7, #22]
 8000924:	801a      	strh	r2, [r3, #0]
	results[5] = PC3;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	330a      	adds	r3, #10
 800092a:	8aba      	ldrh	r2, [r7, #20]
 800092c:	801a      	strh	r2, [r3, #0]
	results[6] = PC1;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	330c      	adds	r3, #12
 8000932:	8a7a      	ldrh	r2, [r7, #18]
 8000934:	801a      	strh	r2, [r3, #0]
	results[7] = PC5;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	330e      	adds	r3, #14
 800093a:	8a3a      	ldrh	r2, [r7, #16]
 800093c:	801a      	strh	r2, [r3, #0]
	results[8] = PB1;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	3310      	adds	r3, #16
 8000942:	89fa      	ldrh	r2, [r7, #14]
 8000944:	801a      	strh	r2, [r3, #0]
	results[9] = PA5;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3312      	adds	r3, #18
 800094a:	89ba      	ldrh	r2, [r7, #12]
 800094c:	801a      	strh	r2, [r3, #0]
	results[10] = PA6;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3314      	adds	r3, #20
 8000952:	897a      	ldrh	r2, [r7, #10]
 8000954:	801a      	strh	r2, [r3, #0]

	return results;
 8000956:	687b      	ldr	r3, [r7, #4]

}
 8000958:	4618      	mov	r0, r3
 800095a:	3720      	adds	r7, #32
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	240000bc 	.word	0x240000bc
 8000964:	24000580 	.word	0x24000580

08000968 <hk_adc3>:

uint16_t* hk_adc3() {
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0

	HAL_ADC_Stop_DMA(&hadc3);
 800096e:	4819      	ldr	r0, [pc, #100]	; (80009d4 <hk_adc3+0x6c>)
 8000970:	f002 fd46 	bl	8003400 <HAL_ADC_Stop_DMA>
	if (HAL_ADC_Start_DMA(&hadc3,
 8000974:	2220      	movs	r2, #32
 8000976:	4918      	ldr	r1, [pc, #96]	; (80009d8 <hk_adc3+0x70>)
 8000978:	4816      	ldr	r0, [pc, #88]	; (80009d4 <hk_adc3+0x6c>)
 800097a:	f002 fc7d 	bl	8003278 <HAL_ADC_Start_DMA>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <hk_adc3+0x20>
			(uint32_t *)ADC3Data,
			ADC_CONVERTED_DATA_BUFFER_SIZE)
			!= HAL_OK) {
		Error_Handler();
 8000984:	f001 fa8e 	bl	8001ea4 <Error_Handler>
	}

	uint16_t vrefint = ADC3Data[1];
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <hk_adc3+0x70>)
 800098a:	885b      	ldrh	r3, [r3, #2]
 800098c:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3Data[2];
 800098e:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <hk_adc3+0x70>)
 8000990:	889b      	ldrh	r3, [r3, #4]
 8000992:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2_C = ADC3Data[0]; 		// -- NEEDS TO CHANGE FOR 100 PIN VERSION
 8000994:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <hk_adc3+0x70>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	817b      	strh	r3, [r7, #10]
	uint16_t PC3_C = ADC3Data[0];
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <hk_adc3+0x70>)
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	813b      	strh	r3, [r7, #8]

	uint16_t* results = malloc(4 * sizeof(uint16_t));
 80009a0:	2008      	movs	r0, #8
 80009a2:	f00f fa17 	bl	800fdd4 <malloc>
 80009a6:	4603      	mov	r3, r0
 80009a8:	607b      	str	r3, [r7, #4]
	results[0] = vrefint;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	89fa      	ldrh	r2, [r7, #14]
 80009ae:	801a      	strh	r2, [r3, #0]
	results[1] = vsense;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3302      	adds	r3, #2
 80009b4:	89ba      	ldrh	r2, [r7, #12]
 80009b6:	801a      	strh	r2, [r3, #0]
	results[2] = PC2_C;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3304      	adds	r3, #4
 80009bc:	897a      	ldrh	r2, [r7, #10]
 80009be:	801a      	strh	r2, [r3, #0]
	results[3] = PC3_C;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3306      	adds	r3, #6
 80009c4:	893a      	ldrh	r2, [r7, #8]
 80009c6:	801a      	strh	r2, [r3, #0]

	return results;
 80009c8:	687b      	ldr	r3, [r7, #4]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	24000120 	.word	0x24000120
 80009d8:	240005c0 	.word	0x240005c0

080009dc <send_erpa_packet>:
 *
 * @param erpa_spi erpa spi raw value
 * @param erpa_adc_results erpa adc results
 */
void send_erpa_packet(uint8_t* erpa_spi, uint16_t *erpa_adc_results)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
	uint8_t erpa_buf[14];
	erpa_buf[0] = erpa_sync;                  						// ERPA SYNC 0xAA MSB
 80009e6:	23aa      	movs	r3, #170	; 0xaa
 80009e8:	723b      	strb	r3, [r7, #8]
	erpa_buf[1] = erpa_sync;                  						// ERPA SYNC 0xAA LSB
 80009ea:	23aa      	movs	r3, #170	; 0xaa
 80009ec:	727b      	strb	r3, [r7, #9]
	erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 						// ERPA SEQ # MSB
 80009ee:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <send_erpa_packet+0xa0>)
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	0a1b      	lsrs	r3, r3, #8
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	72bb      	strb	r3, [r7, #10]
	erpa_buf[3] = (erpa_seq & 0xFF);          						// ERPA SEQ # MSB
 80009fa:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <send_erpa_packet+0xa0>)
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	72fb      	strb	r3, [r7, #11]
	erpa_buf[4] = ((erpa_adc_results[0] & 0xFF00) >> 8); 	  		// ENDmon MSB
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	0a1b      	lsrs	r3, r3, #8
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	733b      	strb	r3, [r7, #12]
	erpa_buf[5] = (erpa_adc_results[0] & 0xFF);               		// ENDmon LSB
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	737b      	strb	r3, [r7, #13]
	erpa_buf[6] = ((erpa_adc_results[1] & 0xFF00) >> 8);      		// SWP Monitored MSB
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	3302      	adds	r3, #2
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	73bb      	strb	r3, [r7, #14]
	erpa_buf[7] = (erpa_adc_results[1] & 0xFF);               		// SWP Monitored LSB
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	3302      	adds	r3, #2
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	73fb      	strb	r3, [r7, #15]
	erpa_buf[8] = ((erpa_adc_results[2] & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	3304      	adds	r3, #4
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	0a1b      	lsrs	r3, r3, #8
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	743b      	strb	r3, [r7, #16]
	erpa_buf[9] = (erpa_adc_results[2] & 0xFF);               		// TEMPURATURE 1 LSB
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	3304      	adds	r3, #4
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	747b      	strb	r3, [r7, #17]
	erpa_buf[10] = ((0 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 8000a46:	2300      	movs	r3, #0
 8000a48:	74bb      	strb	r3, [r7, #18]
	erpa_buf[11] = (0 & 0xFF);                    // TEMPURATURE 2 LSB
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	74fb      	strb	r3, [r7, #19]
	erpa_buf[12] = erpa_spi[0];									// ERPA eADC MSB
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	753b      	strb	r3, [r7, #20]
	erpa_buf[13] = erpa_spi[1];									// ERPA eADC LSB
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	785b      	ldrb	r3, [r3, #1]
 8000a58:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 8000a5a:	f107 0108 	add.w	r1, r7, #8
 8000a5e:	2364      	movs	r3, #100	; 0x64
 8000a60:	220e      	movs	r2, #14
 8000a62:	4807      	ldr	r0, [pc, #28]	; (8000a80 <send_erpa_packet+0xa4>)
 8000a64:	f00c fe74 	bl	800d750 <HAL_UART_Transmit>
	erpa_seq++;
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <send_erpa_packet+0xa0>)
 8000a6a:	881b      	ldrh	r3, [r3, #0]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	4b02      	ldr	r3, [pc, #8]	; (8000a7c <send_erpa_packet+0xa0>)
 8000a72:	801a      	strh	r2, [r3, #0]

}
 8000a74:	bf00      	nop
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	24000608 	.word	0x24000608
 8000a80:	2400047c 	.word	0x2400047c

08000a84 <send_hk_packet>:
 *
 * @param i2c_values values of all i2c sensors
 * @param hk_adc_results hk adc results
 */
void send_hk_packet(int16_t *i2c_values, uint16_t *hk_adc1_results, uint16_t *hk_adc3_results)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08e      	sub	sp, #56	; 0x38
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]

	uint8_t hk_buf[38];

	hk_buf[0] = hk_sync;                     		// HK SYNC 0xCC MSB					0 SYNC
 8000a90:	23cc      	movs	r3, #204	; 0xcc
 8000a92:	743b      	strb	r3, [r7, #16]
	hk_buf[1] = hk_sync;                     		// HK SYNC 0xCC LSB
 8000a94:	23cc      	movs	r3, #204	; 0xcc
 8000a96:	747b      	strb	r3, [r7, #17]
	hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    		// HK SEQ # MSB		1 SEQUENCE
 8000a98:	4b7d      	ldr	r3, [pc, #500]	; (8000c90 <send_hk_packet+0x20c>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	74bb      	strb	r3, [r7, #18]
	hk_buf[3] = (hk_seq & 0xFF);             		// HK SEQ # LSB
 8000aa4:	4b7a      	ldr	r3, [pc, #488]	; (8000c90 <send_hk_packet+0x20c>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	74fb      	strb	r3, [r7, #19]
	hk_buf[4] = ((hk_adc3_results[1] & 0xFF00) >> 8);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3302      	adds	r3, #2
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	0a1b      	lsrs	r3, r3, #8
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	753b      	strb	r3, [r7, #20]
	hk_buf[5] = (hk_adc3_results[1] & 0xFF);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	3302      	adds	r3, #2
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	757b      	strb	r3, [r7, #21]
	hk_buf[6] = ((hk_adc3_results[0] & 0xFF00) >> 8);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	0a1b      	lsrs	r3, r3, #8
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	75bb      	strb	r3, [r7, #22]
	hk_buf[7] = (hk_adc3_results[0] & 0xFF);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	75fb      	strb	r3, [r7, #23]
	hk_buf[8] = ((i2c_values[0] & 0xFF00) >> 8);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ade:	121b      	asrs	r3, r3, #8
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	763b      	strb	r3, [r7, #24]
	hk_buf[9] = (i2c_values[0] & 0xFF);
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	767b      	strb	r3, [r7, #25]
	hk_buf[10] = ((i2c_values[1] & 0xFF00) >> 8);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	3302      	adds	r3, #2
 8000af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000af6:	121b      	asrs	r3, r3, #8
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	76bb      	strb	r3, [r7, #26]
	hk_buf[11] = (i2c_values[1] & 0xFF);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	3302      	adds	r3, #2
 8000b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	76fb      	strb	r3, [r7, #27]
	hk_buf[12] = ((i2c_values[2] & 0xFF00) >> 8);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3304      	adds	r3, #4
 8000b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b10:	121b      	asrs	r3, r3, #8
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	773b      	strb	r3, [r7, #28]
	hk_buf[13] = (i2c_values[2] & 0xFF);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	3304      	adds	r3, #4
 8000b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	777b      	strb	r3, [r7, #29]
	hk_buf[14] = ((i2c_values[3] & 0xFF00) >> 8);
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	3306      	adds	r3, #6
 8000b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b2a:	121b      	asrs	r3, r3, #8
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	77bb      	strb	r3, [r7, #30]
	hk_buf[15] = (i2c_values[3] & 0xFF);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	3306      	adds	r3, #6
 8000b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	77fb      	strb	r3, [r7, #31]
	hk_buf[16] = ((hk_adc1_results[0] & 0xFF00) >> 8);
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	0a1b      	lsrs	r3, r3, #8
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	f887 3020 	strb.w	r3, [r7, #32]
	hk_buf[17] = (hk_adc1_results[0] & 0xFF);
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	hk_buf[18] = ((hk_adc1_results[1] & 0xFF00) >> 8);
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	3302      	adds	r3, #2
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	0a1b      	lsrs	r3, r3, #8
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	hk_buf[19] = (hk_adc1_results[1] & 0xFF);
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	3302      	adds	r3, #2
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	hk_buf[20] = ((hk_adc1_results[2] & 0xFF00) >> 8);
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	3304      	adds	r3, #4
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	0a1b      	lsrs	r3, r3, #8
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hk_buf[21] = (hk_adc1_results[2] & 0xFF);
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	3304      	adds	r3, #4
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hk_buf[22] = ((hk_adc1_results[3] & 0xFF00) >> 8);
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	3306      	adds	r3, #6
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	0a1b      	lsrs	r3, r3, #8
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hk_buf[23] = (hk_adc1_results[3] & 0xFF);
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	3306      	adds	r3, #6
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hk_buf[24] = ((hk_adc1_results[4] & 0xFF00) >> 8);
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	3308      	adds	r3, #8
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	0a1b      	lsrs	r3, r3, #8
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	hk_buf[25] = (hk_adc1_results[4] & 0xFF);
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	3308      	adds	r3, #8
 8000bbc:	881b      	ldrh	r3, [r3, #0]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	hk_buf[26] = ((hk_adc1_results[5] & 0xFF00) >> 8);
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	330a      	adds	r3, #10
 8000bc8:	881b      	ldrh	r3, [r3, #0]
 8000bca:	0a1b      	lsrs	r3, r3, #8
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	hk_buf[27] = (hk_adc1_results[5] & 0xFF);
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	330a      	adds	r3, #10
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	hk_buf[28] = ((hk_adc1_results[6] & 0xFF00) >> 8);
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	330c      	adds	r3, #12
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	0a1b      	lsrs	r3, r3, #8
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	hk_buf[29] = (hk_adc1_results[6] & 0xFF);
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	330c      	adds	r3, #12
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	hk_buf[30] = ((hk_adc1_results[7] & 0xFF00) >> 8);
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	330e      	adds	r3, #14
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	0a1b      	lsrs	r3, r3, #8
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	hk_buf[31] = (hk_adc1_results[7] & 0xFF);
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	330e      	adds	r3, #14
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	hk_buf[32] = ((hk_adc1_results[8] & 0xFF00) >> 8);
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	3310      	adds	r3, #16
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	0a1b      	lsrs	r3, r3, #8
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	hk_buf[33] = (hk_adc1_results[8] & 0xFF);
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	3310      	adds	r3, #16
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	hk_buf[34] = ((hk_adc1_results[9] & 0xFF00) >> 8);
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	3312      	adds	r3, #18
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	0a1b      	lsrs	r3, r3, #8
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	hk_buf[35] = (hk_adc1_results[9] & 0xFF);
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	3312      	adds	r3, #18
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	hk_buf[36] = ((hk_adc3_results[2] & 0xFF00) >> 8);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3304      	adds	r3, #4
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	0a1b      	lsrs	r3, r3, #8
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	hk_buf[37] = (hk_adc3_results[2] & 0xFF);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3304      	adds	r3, #4
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000c6c:	f107 0110 	add.w	r1, r7, #16
 8000c70:	2364      	movs	r3, #100	; 0x64
 8000c72:	2226      	movs	r2, #38	; 0x26
 8000c74:	4807      	ldr	r0, [pc, #28]	; (8000c94 <send_hk_packet+0x210>)
 8000c76:	f00c fd6b 	bl	800d750 <HAL_UART_Transmit>
	hk_seq++;
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <send_hk_packet+0x20c>)
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <send_hk_packet+0x20c>)
 8000c84:	801a      	strh	r2, [r3, #0]


}
 8000c86:	bf00      	nop
 8000c88:	3738      	adds	r7, #56	; 0x38
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2400060c 	.word	0x2400060c
 8000c94:	2400047c 	.word	0x2400047c

08000c98 <send_pmt_packet>:
 * @brief sends pmt packet via UART
 *
 * @param pmt_spi raw pmt spi value
 */
void send_pmt_packet(uint8_t* pmt_spi)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

	uint8_t pmt_buf[6];

	pmt_buf[0] = pmt_sync;
 8000ca0:	23bb      	movs	r3, #187	; 0xbb
 8000ca2:	723b      	strb	r3, [r7, #8]
	pmt_buf[1] = pmt_sync;
 8000ca4:	23bb      	movs	r3, #187	; 0xbb
 8000ca6:	727b      	strb	r3, [r7, #9]
	pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <send_pmt_packet+0x54>)
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	72bb      	strb	r3, [r7, #10]
	pmt_buf[3] = (pmt_seq & 0xFF);
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <send_pmt_packet+0x54>)
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	72fb      	strb	r3, [r7, #11]
	pmt_buf[4] = pmt_spi[0];
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	733b      	strb	r3, [r7, #12]
	pmt_buf[5] = pmt_spi[1];
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	785b      	ldrb	r3, [r3, #1]
 8000cc6:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000cc8:	f107 0108 	add.w	r1, r7, #8
 8000ccc:	2364      	movs	r3, #100	; 0x64
 8000cce:	2206      	movs	r2, #6
 8000cd0:	4807      	ldr	r0, [pc, #28]	; (8000cf0 <send_pmt_packet+0x58>)
 8000cd2:	f00c fd3d 	bl	800d750 <HAL_UART_Transmit>
	pmt_seq++;
 8000cd6:	4b05      	ldr	r3, [pc, #20]	; (8000cec <send_pmt_packet+0x54>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	4b03      	ldr	r3, [pc, #12]	; (8000cec <send_pmt_packet+0x54>)
 8000ce0:	801a      	strh	r2, [r3, #0]
}
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	2400060a 	.word	0x2400060a
 8000cf0:	2400047c 	.word	0x2400047c

08000cf4 <HAL_TIM_OC_DelayElapsedCallback>:


void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b0a7      	sub	sp, #156	; 0x9c
 8000cf8:	af1e      	add	r7, sp, #120	; 0x78
 8000cfa:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a3b      	ldr	r2, [pc, #236]	; (8000dec <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d14b      	bne.n	8000d9c <HAL_TIM_OC_DelayElapsedCallback+0xa8>
  {
      if (ERPA_ON)
 8000d04:	4b3a      	ldr	r3, [pc, #232]	; (8000df0 <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d02b      	beq.n	8000d64 <HAL_TIM_OC_DelayElapsedCallback+0x70>
      {


		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {}
 8000d0c:	bf00      	nop
 8000d0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d12:	4838      	ldr	r0, [pc, #224]	; (8000df4 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8000d14:	f006 fed4 	bl	8007ac0 <HAL_GPIO_ReadPin>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d1f7      	bne.n	8000d0e <HAL_TIM_OC_DelayElapsedCallback+0x1a>

		uint8_t* spi2_results = spi(hspi2);
 8000d1e:	4c36      	ldr	r4, [pc, #216]	; (8000df8 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8000d20:	4668      	mov	r0, sp
 8000d22:	f104 0310 	add.w	r3, r4, #16
 8000d26:	2278      	movs	r2, #120	; 0x78
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f00f f863 	bl	800fdf4 <memcpy>
 8000d2e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d32:	f7ff fd35 	bl	80007a0 <spi>
 8000d36:	61b8      	str	r0, [r7, #24]
        uint16_t *erpa_adc_results = erpa_adc();
 8000d38:	f7ff fd7a 	bl	8000830 <erpa_adc>
 8000d3c:	6178      	str	r0, [r7, #20]

        if (auto_sweep)
 8000d3e:	4b2f      	ldr	r3, [pc, #188]	; (8000dfc <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d002      	beq.n	8000d4c <HAL_TIM_OC_DelayElapsedCallback+0x58>
		{
		  do_auto_sweep();
 8000d46:	f7ff fce3 	bl	8000710 <do_auto_sweep>
 8000d4a:	e001      	b.n	8000d50 <HAL_TIM_OC_DelayElapsedCallback+0x5c>
		} else {
		  set_erpa_sweep();
 8000d4c:	f7ff fd56 	bl	80007fc <set_erpa_sweep>
		}


		send_erpa_packet(spi2_results, erpa_adc_results);
 8000d50:	6979      	ldr	r1, [r7, #20]
 8000d52:	69b8      	ldr	r0, [r7, #24]
 8000d54:	f7ff fe42 	bl	80009dc <send_erpa_packet>

		free(spi2_results);
 8000d58:	69b8      	ldr	r0, [r7, #24]
 8000d5a:	f00f f843 	bl	800fde4 <free>
		free(erpa_adc_results);
 8000d5e:	6978      	ldr	r0, [r7, #20]
 8000d60:	f00f f840 	bl	800fde4 <free>
      }
      if (HK_ON)
 8000d64:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d03b      	beq.n	8000de4 <HAL_TIM_OC_DelayElapsedCallback+0xf0>
      {
    	  int16_t *i2c_values = i2c();
 8000d6c:	f7ff fc9c 	bl	80006a8 <i2c>
 8000d70:	6138      	str	r0, [r7, #16]
    	  uint16_t* hk_adc1_results = hk_adc1();
 8000d72:	f7ff fd8f 	bl	8000894 <hk_adc1>
 8000d76:	60f8      	str	r0, [r7, #12]
    	  uint16_t* hk_adc3_results = hk_adc3();
 8000d78:	f7ff fdf6 	bl	8000968 <hk_adc3>
 8000d7c:	60b8      	str	r0, [r7, #8]


    	  send_hk_packet(i2c_values, hk_adc1_results, hk_adc3_results);
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	68f9      	ldr	r1, [r7, #12]
 8000d82:	6938      	ldr	r0, [r7, #16]
 8000d84:	f7ff fe7e 	bl	8000a84 <send_hk_packet>


          free(i2c_values);
 8000d88:	6938      	ldr	r0, [r7, #16]
 8000d8a:	f00f f82b 	bl	800fde4 <free>
          free(hk_adc1_results);
 8000d8e:	68f8      	ldr	r0, [r7, #12]
 8000d90:	f00f f828 	bl	800fde4 <free>
          free(hk_adc3_results);
 8000d94:	68b8      	ldr	r0, [r7, #8]
 8000d96:	f00f f825 	bl	800fde4 <free>
  		send_pmt_packet(spi1_results);

		free(spi1_results);
      }
  }
}
 8000d9a:	e023      	b.n	8000de4 <HAL_TIM_OC_DelayElapsedCallback+0xf0>
  else if (htim == &htim1)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d11f      	bne.n	8000de4 <HAL_TIM_OC_DelayElapsedCallback+0xf0>
      if (PMT_ON)
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d01b      	beq.n	8000de4 <HAL_TIM_OC_DelayElapsedCallback+0xf0>
    	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {}
 8000dac:	bf00      	nop
 8000dae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000db2:	4816      	ldr	r0, [pc, #88]	; (8000e0c <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8000db4:	f006 fe84 	bl	8007ac0 <HAL_GPIO_ReadPin>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f7      	bne.n	8000dae <HAL_TIM_OC_DelayElapsedCallback+0xba>
  		uint8_t* spi1_results = spi(hspi1);
 8000dbe:	4c14      	ldr	r4, [pc, #80]	; (8000e10 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8000dc0:	4668      	mov	r0, sp
 8000dc2:	f104 0310 	add.w	r3, r4, #16
 8000dc6:	2278      	movs	r2, #120	; 0x78
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f00f f813 	bl	800fdf4 <memcpy>
 8000dce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000dd2:	f7ff fce5 	bl	80007a0 <spi>
 8000dd6:	61f8      	str	r0, [r7, #28]
  		send_pmt_packet(spi1_results);
 8000dd8:	69f8      	ldr	r0, [r7, #28]
 8000dda:	f7ff ff5d 	bl	8000c98 <send_pmt_packet>
		free(spi1_results);
 8000dde:	69f8      	ldr	r0, [r7, #28]
 8000de0:	f00f f800 	bl	800fde4 <free>
}
 8000de4:	bf00      	nop
 8000de6:	3724      	adds	r7, #36	; 0x24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd90      	pop	{r4, r7, pc}
 8000dec:	24000430 	.word	0x24000430
 8000df0:	2400060f 	.word	0x2400060f
 8000df4:	58020400 	.word	0x58020400
 8000df8:	2400035c 	.word	0x2400035c
 8000dfc:	24000604 	.word	0x24000604
 8000e00:	24000610 	.word	0x24000610
 8000e04:	240003e4 	.word	0x240003e4
 8000e08:	2400060e 	.word	0x2400060e
 8000e0c:	58020000 	.word	0x58020000
 8000e10:	240002d4 	.word	0x240002d4

08000e14 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	4998      	ldr	r1, [pc, #608]	; (8001080 <HAL_UART_RxCpltCallback+0x26c>)
 8000e20:	4898      	ldr	r0, [pc, #608]	; (8001084 <HAL_UART_RxCpltCallback+0x270>)
 8000e22:	f00c fd2b 	bl	800d87c <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000e26:	4b96      	ldr	r3, [pc, #600]	; (8001080 <HAL_UART_RxCpltCallback+0x26c>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	73fb      	strb	r3, [r7, #15]

  switch (key)
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	2b1d      	cmp	r3, #29
 8000e30:	f200 8121 	bhi.w	8001076 <HAL_UART_RxCpltCallback+0x262>
 8000e34:	a201      	add	r2, pc, #4	; (adr r2, 8000e3c <HAL_UART_RxCpltCallback+0x28>)
 8000e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3a:	bf00      	nop
 8000e3c:	08000f41 	.word	0x08000f41
 8000e40:	08000f5d 	.word	0x08000f5d
 8000e44:	08000f79 	.word	0x08000f79
 8000e48:	08000f99 	.word	0x08000f99
 8000e4c:	08000fb9 	.word	0x08000fb9
 8000e50:	08000fd5 	.word	0x08000fd5
 8000e54:	08000ff5 	.word	0x08000ff5
 8000e58:	08001015 	.word	0x08001015
 8000e5c:	08000ed1 	.word	0x08000ed1
 8000e60:	08000edf 	.word	0x08000edf
 8000e64:	08000ec3 	.word	0x08000ec3
 8000e68:	08000eb5 	.word	0x08000eb5
 8000e6c:	08001031 	.word	0x08001031
 8000e70:	08001041 	.word	0x08001041
 8000e74:	08001051 	.word	0x08001051
 8000e78:	08001061 	.word	0x08001061
 8000e7c:	08001049 	.word	0x08001049
 8000e80:	08001059 	.word	0x08001059
 8000e84:	08001069 	.word	0x08001069
 8000e88:	08000f4f 	.word	0x08000f4f
 8000e8c:	08000f6b 	.word	0x08000f6b
 8000e90:	08000f89 	.word	0x08000f89
 8000e94:	08000fa9 	.word	0x08000fa9
 8000e98:	08000fc7 	.word	0x08000fc7
 8000e9c:	08000fe5 	.word	0x08000fe5
 8000ea0:	08001005 	.word	0x08001005
 8000ea4:	08001023 	.word	0x08001023
 8000ea8:	08000eed 	.word	0x08000eed
 8000eac:	08000f05 	.word	0x08000f05
 8000eb0:	08000f1d 	.word	0x08000f1d
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000eb4:	4b74      	ldr	r3, [pc, #464]	; (8001088 <HAL_UART_RxCpltCallback+0x274>)
 8000eb6:	2140      	movs	r1, #64	; 0x40
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f006 fe18 	bl	8007af0 <HAL_GPIO_WritePin>
    break;
 8000ec0:	e0d9      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000ec2:	4b71      	ldr	r3, [pc, #452]	; (8001088 <HAL_UART_RxCpltCallback+0x274>)
 8000ec4:	2140      	movs	r1, #64	; 0x40
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f006 fe11 	bl	8007af0 <HAL_GPIO_WritePin>
    break;
 8000ece:	e0d2      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
  }

  case 0x08:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 8000ed0:	4b6d      	ldr	r3, [pc, #436]	; (8001088 <HAL_UART_RxCpltCallback+0x274>)
 8000ed2:	2180      	movs	r1, #128	; 0x80
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f006 fe0a 	bl	8007af0 <HAL_GPIO_WritePin>
    break;
 8000edc:	e0cb      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x09:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 8000ede:	4b6a      	ldr	r3, [pc, #424]	; (8001088 <HAL_UART_RxCpltCallback+0x274>)
 8000ee0:	2180      	movs	r1, #128	; 0x80
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f006 fe03 	bl	8007af0 <HAL_GPIO_WritePin>
    break;
 8000eea:	e0c4      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x1B:
  {
	  if (step < 9)
 8000eec:	4b67      	ldr	r3, [pc, #412]	; (800108c <HAL_UART_RxCpltCallback+0x278>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b08      	cmp	r3, #8
 8000ef2:	f200 80bd 	bhi.w	8001070 <HAL_UART_RxCpltCallback+0x25c>
	  {
		step++;
 8000ef6:	4b65      	ldr	r3, [pc, #404]	; (800108c <HAL_UART_RxCpltCallback+0x278>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	3301      	adds	r3, #1
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4b63      	ldr	r3, [pc, #396]	; (800108c <HAL_UART_RxCpltCallback+0x278>)
 8000f00:	701a      	strb	r2, [r3, #0]
	  }
	  break;
 8000f02:	e0b5      	b.n	8001070 <HAL_UART_RxCpltCallback+0x25c>
  }
  case 0x1C:
  {
    if (step > 0)
 8000f04:	4b61      	ldr	r3, [pc, #388]	; (800108c <HAL_UART_RxCpltCallback+0x278>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 80b3 	beq.w	8001074 <HAL_UART_RxCpltCallback+0x260>
    {
      step--;
 8000f0e:	4b5f      	ldr	r3, [pc, #380]	; (800108c <HAL_UART_RxCpltCallback+0x278>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b5d      	ldr	r3, [pc, #372]	; (800108c <HAL_UART_RxCpltCallback+0x278>)
 8000f18:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000f1a:	e0ab      	b.n	8001074 <HAL_UART_RxCpltCallback+0x260>
  }
  case 0x1D: {
	if (!auto_sweep) {
 8000f1c:	4b5c      	ldr	r3, [pc, #368]	; (8001090 <HAL_UART_RxCpltCallback+0x27c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d106      	bne.n	8000f32 <HAL_UART_RxCpltCallback+0x11e>
		auto_sweep = 1;
 8000f24:	4b5a      	ldr	r3, [pc, #360]	; (8001090 <HAL_UART_RxCpltCallback+0x27c>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	601a      	str	r2, [r3, #0]
		step = 0;
 8000f2a:	4b58      	ldr	r3, [pc, #352]	; (800108c <HAL_UART_RxCpltCallback+0x278>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
	} else {
		auto_sweep = 0;
		step = 0;
	}
  	break;
 8000f30:	e0a1      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
		auto_sweep = 0;
 8000f32:	4b57      	ldr	r3, [pc, #348]	; (8001090 <HAL_UART_RxCpltCallback+0x27c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
		step = 0;
 8000f38:	4b54      	ldr	r3, [pc, #336]	; (800108c <HAL_UART_RxCpltCallback+0x278>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
  	break;
 8000f3e:	e09a      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
   }
  case 0x00:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000f40:	4b54      	ldr	r3, [pc, #336]	; (8001094 <HAL_UART_RxCpltCallback+0x280>)
 8000f42:	2120      	movs	r1, #32
 8000f44:	2201      	movs	r2, #1
 8000f46:	4618      	mov	r0, r3
 8000f48:	f006 fdd2 	bl	8007af0 <HAL_GPIO_WritePin>
    break;
 8000f4c:	e093      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x13:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000f4e:	4b51      	ldr	r3, [pc, #324]	; (8001094 <HAL_UART_RxCpltCallback+0x280>)
 8000f50:	2120      	movs	r1, #32
 8000f52:	2200      	movs	r2, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f006 fdcb 	bl	8007af0 <HAL_GPIO_WritePin>
    break;
 8000f5a:	e08c      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x01:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000f5c:	4b4d      	ldr	r3, [pc, #308]	; (8001094 <HAL_UART_RxCpltCallback+0x280>)
 8000f5e:	2140      	movs	r1, #64	; 0x40
 8000f60:	2201      	movs	r2, #1
 8000f62:	4618      	mov	r0, r3
 8000f64:	f006 fdc4 	bl	8007af0 <HAL_GPIO_WritePin>
    break;
 8000f68:	e085      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000f6a:	4b4a      	ldr	r3, [pc, #296]	; (8001094 <HAL_UART_RxCpltCallback+0x280>)
 8000f6c:	2140      	movs	r1, #64	; 0x40
 8000f6e:	2200      	movs	r2, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f006 fdbd 	bl	8007af0 <HAL_GPIO_WritePin>
    break;
 8000f76:	e07e      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000f78:	4b47      	ldr	r3, [pc, #284]	; (8001098 <HAL_UART_RxCpltCallback+0x284>)
 8000f7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4618      	mov	r0, r3
 8000f82:	f006 fdb5 	bl	8007af0 <HAL_GPIO_WritePin>
    break;
 8000f86:	e076      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000f88:	4b43      	ldr	r3, [pc, #268]	; (8001098 <HAL_UART_RxCpltCallback+0x284>)
 8000f8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f8e:	2200      	movs	r2, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f006 fdad 	bl	8007af0 <HAL_GPIO_WritePin>
    break;
 8000f96:	e06e      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000f98:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <HAL_UART_RxCpltCallback+0x284>)
 8000f9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f006 fda5 	bl	8007af0 <HAL_GPIO_WritePin>
    break;
 8000fa6:	e066      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000fa8:	4b3b      	ldr	r3, [pc, #236]	; (8001098 <HAL_UART_RxCpltCallback+0x284>)
 8000faa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fae:	2200      	movs	r2, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f006 fd9d 	bl	8007af0 <HAL_GPIO_WritePin>
    break;
 8000fb6:	e05e      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000fb8:	4b37      	ldr	r3, [pc, #220]	; (8001098 <HAL_UART_RxCpltCallback+0x284>)
 8000fba:	2180      	movs	r1, #128	; 0x80
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f006 fd96 	bl	8007af0 <HAL_GPIO_WritePin>
    break;
 8000fc4:	e057      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000fc6:	4b34      	ldr	r3, [pc, #208]	; (8001098 <HAL_UART_RxCpltCallback+0x284>)
 8000fc8:	2180      	movs	r1, #128	; 0x80
 8000fca:	2200      	movs	r2, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f006 fd8f 	bl	8007af0 <HAL_GPIO_WritePin>
    break;
 8000fd2:	e050      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000fd4:	4b30      	ldr	r3, [pc, #192]	; (8001098 <HAL_UART_RxCpltCallback+0x284>)
 8000fd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f006 fd87 	bl	8007af0 <HAL_GPIO_WritePin>
    break;
 8000fe2:	e048      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000fe4:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <HAL_UART_RxCpltCallback+0x284>)
 8000fe6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fea:	2200      	movs	r2, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f006 fd7f 	bl	8007af0 <HAL_GPIO_WritePin>
    break;
 8000ff2:	e040      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000ff4:	4b28      	ldr	r3, [pc, #160]	; (8001098 <HAL_UART_RxCpltCallback+0x284>)
 8000ff6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f006 fd77 	bl	8007af0 <HAL_GPIO_WritePin>
    break;
 8001002:	e038      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8001004:	4b24      	ldr	r3, [pc, #144]	; (8001098 <HAL_UART_RxCpltCallback+0x284>)
 8001006:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100a:	2200      	movs	r2, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f006 fd6f 	bl	8007af0 <HAL_GPIO_WritePin>
    break;
 8001012:	e030      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8001014:	4b20      	ldr	r3, [pc, #128]	; (8001098 <HAL_UART_RxCpltCallback+0x284>)
 8001016:	2140      	movs	r1, #64	; 0x40
 8001018:	2201      	movs	r2, #1
 800101a:	4618      	mov	r0, r3
 800101c:	f006 fd68 	bl	8007af0 <HAL_GPIO_WritePin>
    break;
 8001020:	e029      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <HAL_UART_RxCpltCallback+0x284>)
 8001024:	2140      	movs	r1, #64	; 0x40
 8001026:	2200      	movs	r2, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f006 fd61 	bl	8007af0 <HAL_GPIO_WritePin>
    break;
 800102e:	e022      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0C:
  {
      HAL_SuspendTick();
 8001030:	f001 fd16 	bl	8002a60 <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001034:	2101      	movs	r1, #1
 8001036:	2001      	movs	r0, #1
 8001038:	f007 fafe 	bl	8008638 <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 800103c:	f7ff face 	bl	80005dc <__NVIC_SystemReset>
      break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 8001040:	4b16      	ldr	r3, [pc, #88]	; (800109c <HAL_UART_RxCpltCallback+0x288>)
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
    break;
 8001046:	e016      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x10:
  {
    PMT_ON = 0;
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <HAL_UART_RxCpltCallback+0x288>)
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
    break;
 800104e:	e012      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <HAL_UART_RxCpltCallback+0x28c>)
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]
    break;
 8001056:	e00e      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <HAL_UART_RxCpltCallback+0x28c>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
    break;
 800105e:	e00a      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0F:
  {
    HK_ON = 1;
 8001060:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <HAL_UART_RxCpltCallback+0x290>)
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
    break;
 8001066:	e006      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x12:
  {
    HK_ON = 0;
 8001068:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <HAL_UART_RxCpltCallback+0x290>)
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
    break;
 800106e:	e002      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
	  break;
 8001070:	bf00      	nop
 8001072:	e000      	b.n	8001076 <HAL_UART_RxCpltCallback+0x262>
    break;
 8001074:	bf00      	nop
  }
  }
}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2400050c 	.word	0x2400050c
 8001084:	2400047c 	.word	0x2400047c
 8001088:	58021400 	.word	0x58021400
 800108c:	24000600 	.word	0x24000600
 8001090:	24000604 	.word	0x24000604
 8001094:	58020400 	.word	0x58020400
 8001098:	58020800 	.word	0x58020800
 800109c:	2400060e 	.word	0x2400060e
 80010a0:	2400060f 	.word	0x2400060f
 80010a4:	24000610 	.word	0x24000610

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ac:	f001 fc22 	bl	80028f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b0:	f000 f85c 	bl	800116c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80010b4:	f000 f8e0 	bl	8001278 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b8:	f000 fd5a 	bl	8001b70 <MX_GPIO_Init>
  MX_DAC1_Init();
 80010bc:	f000 face 	bl	800165c <MX_DAC1_Init>
  MX_TIM1_Init();
 80010c0:	f000 fbf8 	bl	80018b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010c4:	f000 fc86 	bl	80019d4 <MX_TIM2_Init>
  MX_I2C1_Init();
 80010c8:	f000 fb04 	bl	80016d4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80010cc:	f000 fb42 	bl	8001754 <MX_SPI1_Init>
  MX_DMA_Init();
 80010d0:	f000 fd26 	bl	8001b20 <MX_DMA_Init>
  MX_ADC1_Init();
 80010d4:	f000 f8fe 	bl	80012d4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80010d8:	f000 fcd6 	bl	8001a88 <MX_USART1_UART_Init>
  MX_ADC3_Init();
 80010dc:	f000 fa2c 	bl	8001538 <MX_ADC3_Init>
  MX_SPI2_Init();
 80010e0:	f000 fb90 	bl	8001804 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 80010e4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80010e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80010ec:	4819      	ldr	r0, [pc, #100]	; (8001154 <main+0xac>)
 80010ee:	f003 f8e1 	bl	80042b4 <HAL_ADCEx_Calibration_Start>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <main+0x54>
  {
    /* Calibration Error */
    Error_Handler();
 80010f8:	f000 fed4 	bl	8001ea4 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 80010fc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001100:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001104:	4814      	ldr	r0, [pc, #80]	; (8001158 <main+0xb0>)
 8001106:	f003 f8d5 	bl	80042b4 <HAL_ADCEx_Calibration_Start>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <main+0x6c>
  {
	/* Calibration Error */
	Error_Handler();
 8001110:	f000 fec8 	bl	8001ea4 <Error_Handler>
  }


  /* Start Timers with OC & Interrupt */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001114:	2100      	movs	r1, #0
 8001116:	4811      	ldr	r0, [pc, #68]	; (800115c <main+0xb4>)
 8001118:	f00b f9fe 	bl	800c518 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 800111c:	210c      	movs	r1, #12
 800111e:	4810      	ldr	r0, [pc, #64]	; (8001160 <main+0xb8>)
 8001120:	f00b f9fa 	bl	800c518 <HAL_TIM_OC_Start_IT>

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8001124:	bf00      	nop
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <main+0xbc>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001134:	d0f7      	beq.n	8001126 <main+0x7e>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8001136:	bf00      	nop
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <main+0xbc>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001142:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001146:	d1f7      	bne.n	8001138 <main+0x90>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8001148:	2201      	movs	r2, #1
 800114a:	4907      	ldr	r1, [pc, #28]	; (8001168 <main+0xc0>)
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <main+0xbc>)
 800114e:	f00c fb95 	bl	800d87c <HAL_UART_Receive_IT>
 8001152:	e7f9      	b.n	8001148 <main+0xa0>
 8001154:	240000bc 	.word	0x240000bc
 8001158:	24000120 	.word	0x24000120
 800115c:	240003e4 	.word	0x240003e4
 8001160:	24000430 	.word	0x24000430
 8001164:	2400047c 	.word	0x2400047c
 8001168:	2400050c 	.word	0x2400050c

0800116c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b09c      	sub	sp, #112	; 0x70
 8001170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001176:	224c      	movs	r2, #76	; 0x4c
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f00e fe48 	bl	800fe10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	2220      	movs	r2, #32
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f00e fe42 	bl	800fe10 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800118c:	2002      	movs	r0, #2
 800118e:	f007 fa8f 	bl	80086b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001192:	2300      	movs	r3, #0
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	4b35      	ldr	r3, [pc, #212]	; (800126c <SystemClock_Config+0x100>)
 8001198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119a:	4a34      	ldr	r2, [pc, #208]	; (800126c <SystemClock_Config+0x100>)
 800119c:	f023 0301 	bic.w	r3, r3, #1
 80011a0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80011a2:	4b32      	ldr	r3, [pc, #200]	; (800126c <SystemClock_Config+0x100>)
 80011a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	4b30      	ldr	r3, [pc, #192]	; (8001270 <SystemClock_Config+0x104>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011b4:	4a2e      	ldr	r2, [pc, #184]	; (8001270 <SystemClock_Config+0x104>)
 80011b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b2c      	ldr	r3, [pc, #176]	; (8001270 <SystemClock_Config+0x104>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011c8:	bf00      	nop
 80011ca:	4b29      	ldr	r3, [pc, #164]	; (8001270 <SystemClock_Config+0x104>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011d6:	d1f8      	bne.n	80011ca <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80011d8:	4b26      	ldr	r3, [pc, #152]	; (8001274 <SystemClock_Config+0x108>)
 80011da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011dc:	4a25      	ldr	r2, [pc, #148]	; (8001274 <SystemClock_Config+0x108>)
 80011de:	f023 0303 	bic.w	r3, r3, #3
 80011e2:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011e4:	2302      	movs	r3, #2
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011e8:	2301      	movs	r3, #1
 80011ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ec:	2340      	movs	r3, #64	; 0x40
 80011ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f0:	2302      	movs	r3, #2
 80011f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011f4:	2300      	movs	r3, #0
 80011f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011f8:	2304      	movs	r3, #4
 80011fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80011fc:	230c      	movs	r3, #12
 80011fe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001200:	2302      	movs	r3, #2
 8001202:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001204:	2302      	movs	r3, #2
 8001206:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001208:	2302      	movs	r3, #2
 800120a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800120c:	230c      	movs	r3, #12
 800120e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001210:	2300      	movs	r3, #0
 8001212:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121c:	4618      	mov	r0, r3
 800121e:	f007 fa81 	bl	8008724 <HAL_RCC_OscConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001228:	f000 fe3c 	bl	8001ea4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122c:	233f      	movs	r3, #63	; 0x3f
 800122e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001230:	2303      	movs	r3, #3
 8001232:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8001234:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001238:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800124a:	2300      	movs	r3, #0
 800124c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2101      	movs	r1, #1
 8001252:	4618      	mov	r0, r3
 8001254:	f007 fe94 	bl	8008f80 <HAL_RCC_ClockConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800125e:	f000 fe21 	bl	8001ea4 <Error_Handler>
  }
}
 8001262:	bf00      	nop
 8001264:	3770      	adds	r7, #112	; 0x70
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	58000400 	.word	0x58000400
 8001270:	58024800 	.word	0x58024800
 8001274:	58024400 	.word	0x58024400

08001278 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b0b0      	sub	sp, #192	; 0xc0
 800127c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	22bc      	movs	r2, #188	; 0xbc
 8001282:	2100      	movs	r1, #0
 8001284:	4618      	mov	r0, r3
 8001286:	f00e fdc3 	bl	800fe10 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800128a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800128e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001290:	2304      	movs	r3, #4
 8001292:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001294:	2309      	movs	r3, #9
 8001296:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001298:	2304      	movs	r3, #4
 800129a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800129c:	2302      	movs	r3, #2
 800129e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012a0:	2302      	movs	r3, #2
 80012a2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80012a4:	23c0      	movs	r3, #192	; 0xc0
 80012a6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80012a8:	2320      	movs	r3, #32
 80012aa:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80012ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	4618      	mov	r0, r3
 80012bc:	f008 f9ec 	bl	8009698 <HAL_RCCEx_PeriphCLKConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 80012c6:	f000 fded 	bl	8001ea4 <Error_Handler>
  }
}
 80012ca:	bf00      	nop
 80012cc:	37c0      	adds	r7, #192	; 0xc0
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	; 0x28
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012e6:	463b      	mov	r3, r7
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
 80012f4:	615a      	str	r2, [r3, #20]
 80012f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012f8:	4b81      	ldr	r3, [pc, #516]	; (8001500 <MX_ADC1_Init+0x22c>)
 80012fa:	4a82      	ldr	r2, [pc, #520]	; (8001504 <MX_ADC1_Init+0x230>)
 80012fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80012fe:	4b80      	ldr	r3, [pc, #512]	; (8001500 <MX_ADC1_Init+0x22c>)
 8001300:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001304:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001306:	4b7e      	ldr	r3, [pc, #504]	; (8001500 <MX_ADC1_Init+0x22c>)
 8001308:	2208      	movs	r2, #8
 800130a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800130c:	4b7c      	ldr	r3, [pc, #496]	; (8001500 <MX_ADC1_Init+0x22c>)
 800130e:	2201      	movs	r2, #1
 8001310:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001312:	4b7b      	ldr	r3, [pc, #492]	; (8001500 <MX_ADC1_Init+0x22c>)
 8001314:	2204      	movs	r2, #4
 8001316:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001318:	4b79      	ldr	r3, [pc, #484]	; (8001500 <MX_ADC1_Init+0x22c>)
 800131a:	2200      	movs	r2, #0
 800131c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800131e:	4b78      	ldr	r3, [pc, #480]	; (8001500 <MX_ADC1_Init+0x22c>)
 8001320:	2201      	movs	r2, #1
 8001322:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 12;
 8001324:	4b76      	ldr	r3, [pc, #472]	; (8001500 <MX_ADC1_Init+0x22c>)
 8001326:	220c      	movs	r2, #12
 8001328:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800132a:	4b75      	ldr	r3, [pc, #468]	; (8001500 <MX_ADC1_Init+0x22c>)
 800132c:	2200      	movs	r2, #0
 800132e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001330:	4b73      	ldr	r3, [pc, #460]	; (8001500 <MX_ADC1_Init+0x22c>)
 8001332:	2200      	movs	r2, #0
 8001334:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001336:	4b72      	ldr	r3, [pc, #456]	; (8001500 <MX_ADC1_Init+0x22c>)
 8001338:	2200      	movs	r2, #0
 800133a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800133c:	4b70      	ldr	r3, [pc, #448]	; (8001500 <MX_ADC1_Init+0x22c>)
 800133e:	2203      	movs	r2, #3
 8001340:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001342:	4b6f      	ldr	r3, [pc, #444]	; (8001500 <MX_ADC1_Init+0x22c>)
 8001344:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001348:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800134a:	4b6d      	ldr	r3, [pc, #436]	; (8001500 <MX_ADC1_Init+0x22c>)
 800134c:	2200      	movs	r2, #0
 800134e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001350:	4b6b      	ldr	r3, [pc, #428]	; (8001500 <MX_ADC1_Init+0x22c>)
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001358:	4869      	ldr	r0, [pc, #420]	; (8001500 <MX_ADC1_Init+0x22c>)
 800135a:	f001 fdeb 	bl	8002f34 <HAL_ADC_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001364:	f000 fd9e 	bl	8001ea4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	4863      	ldr	r0, [pc, #396]	; (8001500 <MX_ADC1_Init+0x22c>)
 8001374:	f003 f802 	bl	800437c <HAL_ADCEx_MultiModeConfigChannel>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800137e:	f000 fd91 	bl	8001ea4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001382:	4b61      	ldr	r3, [pc, #388]	; (8001508 <MX_ADC1_Init+0x234>)
 8001384:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001386:	2306      	movs	r3, #6
 8001388:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800138a:	2307      	movs	r3, #7
 800138c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800138e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001392:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001394:	2304      	movs	r3, #4
 8001396:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a0:	463b      	mov	r3, r7
 80013a2:	4619      	mov	r1, r3
 80013a4:	4856      	ldr	r0, [pc, #344]	; (8001500 <MX_ADC1_Init+0x22c>)
 80013a6:	f002 f897 	bl	80034d8 <HAL_ADC_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80013b0:	f000 fd78 	bl	8001ea4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013b4:	4b55      	ldr	r3, [pc, #340]	; (800150c <MX_ADC1_Init+0x238>)
 80013b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013b8:	230c      	movs	r3, #12
 80013ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013bc:	463b      	mov	r3, r7
 80013be:	4619      	mov	r1, r3
 80013c0:	484f      	ldr	r0, [pc, #316]	; (8001500 <MX_ADC1_Init+0x22c>)
 80013c2:	f002 f889 	bl	80034d8 <HAL_ADC_ConfigChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80013cc:	f000 fd6a 	bl	8001ea4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80013d0:	4b4f      	ldr	r3, [pc, #316]	; (8001510 <MX_ADC1_Init+0x23c>)
 80013d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013d4:	2312      	movs	r3, #18
 80013d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d8:	463b      	mov	r3, r7
 80013da:	4619      	mov	r1, r3
 80013dc:	4848      	ldr	r0, [pc, #288]	; (8001500 <MX_ADC1_Init+0x22c>)
 80013de:	f002 f87b 	bl	80034d8 <HAL_ADC_ConfigChannel>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80013e8:	f000 fd5c 	bl	8001ea4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80013ec:	4b49      	ldr	r3, [pc, #292]	; (8001514 <MX_ADC1_Init+0x240>)
 80013ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80013f0:	2318      	movs	r3, #24
 80013f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f4:	463b      	mov	r3, r7
 80013f6:	4619      	mov	r1, r3
 80013f8:	4841      	ldr	r0, [pc, #260]	; (8001500 <MX_ADC1_Init+0x22c>)
 80013fa:	f002 f86d 	bl	80034d8 <HAL_ADC_ConfigChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001404:	f000 fd4e 	bl	8001ea4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001408:	4b43      	ldr	r3, [pc, #268]	; (8001518 <MX_ADC1_Init+0x244>)
 800140a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800140c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001410:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001412:	463b      	mov	r3, r7
 8001414:	4619      	mov	r1, r3
 8001416:	483a      	ldr	r0, [pc, #232]	; (8001500 <MX_ADC1_Init+0x22c>)
 8001418:	f002 f85e 	bl	80034d8 <HAL_ADC_ConfigChannel>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8001422:	f000 fd3f 	bl	8001ea4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001426:	4b3d      	ldr	r3, [pc, #244]	; (800151c <MX_ADC1_Init+0x248>)
 8001428:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800142a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800142e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001430:	463b      	mov	r3, r7
 8001432:	4619      	mov	r1, r3
 8001434:	4832      	ldr	r0, [pc, #200]	; (8001500 <MX_ADC1_Init+0x22c>)
 8001436:	f002 f84f 	bl	80034d8 <HAL_ADC_ConfigChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001440:	f000 fd30 	bl	8001ea4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001444:	4b36      	ldr	r3, [pc, #216]	; (8001520 <MX_ADC1_Init+0x24c>)
 8001446:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001448:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800144c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800144e:	463b      	mov	r3, r7
 8001450:	4619      	mov	r1, r3
 8001452:	482b      	ldr	r0, [pc, #172]	; (8001500 <MX_ADC1_Init+0x22c>)
 8001454:	f002 f840 	bl	80034d8 <HAL_ADC_ConfigChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800145e:	f000 fd21 	bl	8001ea4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001462:	4b30      	ldr	r3, [pc, #192]	; (8001524 <MX_ADC1_Init+0x250>)
 8001464:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001466:	f44f 7389 	mov.w	r3, #274	; 0x112
 800146a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800146c:	463b      	mov	r3, r7
 800146e:	4619      	mov	r1, r3
 8001470:	4823      	ldr	r0, [pc, #140]	; (8001500 <MX_ADC1_Init+0x22c>)
 8001472:	f002 f831 	bl	80034d8 <HAL_ADC_ConfigChannel>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800147c:	f000 fd12 	bl	8001ea4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001480:	4b29      	ldr	r3, [pc, #164]	; (8001528 <MX_ADC1_Init+0x254>)
 8001482:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001484:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001488:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800148a:	463b      	mov	r3, r7
 800148c:	4619      	mov	r1, r3
 800148e:	481c      	ldr	r0, [pc, #112]	; (8001500 <MX_ADC1_Init+0x22c>)
 8001490:	f002 f822 	bl	80034d8 <HAL_ADC_ConfigChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 800149a:	f000 fd03 	bl	8001ea4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800149e:	4b23      	ldr	r3, [pc, #140]	; (800152c <MX_ADC1_Init+0x258>)
 80014a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80014a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a8:	463b      	mov	r3, r7
 80014aa:	4619      	mov	r1, r3
 80014ac:	4814      	ldr	r0, [pc, #80]	; (8001500 <MX_ADC1_Init+0x22c>)
 80014ae:	f002 f813 	bl	80034d8 <HAL_ADC_ConfigChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80014b8:	f000 fcf4 	bl	8001ea4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80014bc:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <MX_ADC1_Init+0x25c>)
 80014be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80014c0:	f240 2306 	movw	r3, #518	; 0x206
 80014c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c6:	463b      	mov	r3, r7
 80014c8:	4619      	mov	r1, r3
 80014ca:	480d      	ldr	r0, [pc, #52]	; (8001500 <MX_ADC1_Init+0x22c>)
 80014cc:	f002 f804 	bl	80034d8 <HAL_ADC_ConfigChannel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80014d6:	f000 fce5 	bl	8001ea4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <MX_ADC1_Init+0x260>)
 80014dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80014de:	f44f 7303 	mov.w	r3, #524	; 0x20c
 80014e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e4:	463b      	mov	r3, r7
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_ADC1_Init+0x22c>)
 80014ea:	f001 fff5 	bl	80034d8 <HAL_ADC_ConfigChannel>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_ADC1_Init+0x224>
  {
    Error_Handler();
 80014f4:	f000 fcd6 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	3728      	adds	r7, #40	; 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	240000bc 	.word	0x240000bc
 8001504:	40022000 	.word	0x40022000
 8001508:	0c900008 	.word	0x0c900008
 800150c:	10c00010 	.word	0x10c00010
 8001510:	14f00020 	.word	0x14f00020
 8001514:	1d500080 	.word	0x1d500080
 8001518:	21800100 	.word	0x21800100
 800151c:	25b00200 	.word	0x25b00200
 8001520:	2a000400 	.word	0x2a000400
 8001524:	2e300800 	.word	0x2e300800
 8001528:	3ac04000 	.word	0x3ac04000
 800152c:	3ef08000 	.word	0x3ef08000
 8001530:	43210000 	.word	0x43210000
 8001534:	47520000 	.word	0x47520000

08001538 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
 800154c:	615a      	str	r2, [r3, #20]
 800154e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001550:	4b3d      	ldr	r3, [pc, #244]	; (8001648 <MX_ADC3_Init+0x110>)
 8001552:	4a3e      	ldr	r2, [pc, #248]	; (800164c <MX_ADC3_Init+0x114>)
 8001554:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001556:	4b3c      	ldr	r3, [pc, #240]	; (8001648 <MX_ADC3_Init+0x110>)
 8001558:	2208      	movs	r2, #8
 800155a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800155c:	4b3a      	ldr	r3, [pc, #232]	; (8001648 <MX_ADC3_Init+0x110>)
 800155e:	2201      	movs	r2, #1
 8001560:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001562:	4b39      	ldr	r3, [pc, #228]	; (8001648 <MX_ADC3_Init+0x110>)
 8001564:	2204      	movs	r2, #4
 8001566:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001568:	4b37      	ldr	r3, [pc, #220]	; (8001648 <MX_ADC3_Init+0x110>)
 800156a:	2200      	movs	r2, #0
 800156c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800156e:	4b36      	ldr	r3, [pc, #216]	; (8001648 <MX_ADC3_Init+0x110>)
 8001570:	2201      	movs	r2, #1
 8001572:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8001574:	4b34      	ldr	r3, [pc, #208]	; (8001648 <MX_ADC3_Init+0x110>)
 8001576:	2204      	movs	r2, #4
 8001578:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800157a:	4b33      	ldr	r3, [pc, #204]	; (8001648 <MX_ADC3_Init+0x110>)
 800157c:	2200      	movs	r2, #0
 800157e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001580:	4b31      	ldr	r3, [pc, #196]	; (8001648 <MX_ADC3_Init+0x110>)
 8001582:	2200      	movs	r2, #0
 8001584:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001586:	4b30      	ldr	r3, [pc, #192]	; (8001648 <MX_ADC3_Init+0x110>)
 8001588:	2200      	movs	r2, #0
 800158a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800158c:	4b2e      	ldr	r3, [pc, #184]	; (8001648 <MX_ADC3_Init+0x110>)
 800158e:	2203      	movs	r2, #3
 8001590:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001592:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <MX_ADC3_Init+0x110>)
 8001594:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001598:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800159a:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <MX_ADC3_Init+0x110>)
 800159c:	2200      	movs	r2, #0
 800159e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80015a0:	4b29      	ldr	r3, [pc, #164]	; (8001648 <MX_ADC3_Init+0x110>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80015a8:	4827      	ldr	r0, [pc, #156]	; (8001648 <MX_ADC3_Init+0x110>)
 80015aa:	f001 fcc3 	bl	8002f34 <HAL_ADC_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80015b4:	f000 fc76 	bl	8001ea4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80015b8:	4b25      	ldr	r3, [pc, #148]	; (8001650 <MX_ADC3_Init+0x118>)
 80015ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015bc:	2306      	movs	r3, #6
 80015be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80015c0:	2307      	movs	r3, #7
 80015c2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015c4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80015c8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015ca:	2304      	movs	r3, #4
 80015cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	4619      	mov	r1, r3
 80015da:	481b      	ldr	r0, [pc, #108]	; (8001648 <MX_ADC3_Init+0x110>)
 80015dc:	f001 ff7c 	bl	80034d8 <HAL_ADC_ConfigChannel>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80015e6:	f000 fc5d 	bl	8001ea4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80015ea:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <MX_ADC3_Init+0x11c>)
 80015ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015ee:	230c      	movs	r3, #12
 80015f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	4619      	mov	r1, r3
 80015f6:	4814      	ldr	r0, [pc, #80]	; (8001648 <MX_ADC3_Init+0x110>)
 80015f8:	f001 ff6e 	bl	80034d8 <HAL_ADC_ConfigChannel>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8001602:	f000 fc4f 	bl	8001ea4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001606:	2301      	movs	r3, #1
 8001608:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800160a:	2312      	movs	r3, #18
 800160c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	4619      	mov	r1, r3
 8001612:	480d      	ldr	r0, [pc, #52]	; (8001648 <MX_ADC3_Init+0x110>)
 8001614:	f001 ff60 	bl	80034d8 <HAL_ADC_ConfigChannel>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800161e:	f000 fc41 	bl	8001ea4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <MX_ADC3_Init+0x120>)
 8001624:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001626:	2318      	movs	r3, #24
 8001628:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	4619      	mov	r1, r3
 800162e:	4806      	ldr	r0, [pc, #24]	; (8001648 <MX_ADC3_Init+0x110>)
 8001630:	f001 ff52 	bl	80034d8 <HAL_ADC_ConfigChannel>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800163a:	f000 fc33 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	3720      	adds	r7, #32
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	24000120 	.word	0x24000120
 800164c:	58026000 	.word	0x58026000
 8001650:	cfb80000 	.word	0xcfb80000
 8001654:	cb840000 	.word	0xcb840000
 8001658:	04300002 	.word	0x04300002

0800165c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2224      	movs	r2, #36	; 0x24
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f00e fbd1 	bl	800fe10 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <MX_DAC1_Init+0x70>)
 8001670:	4a17      	ldr	r2, [pc, #92]	; (80016d0 <MX_DAC1_Init+0x74>)
 8001672:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001674:	4815      	ldr	r0, [pc, #84]	; (80016cc <MX_DAC1_Init+0x70>)
 8001676:	f003 f86e 	bl	8004756 <HAL_DAC_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001680:	f000 fc10 	bl	8001ea4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001688:	2302      	movs	r3, #2
 800168a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001690:	2301      	movs	r3, #1
 8001692:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	2200      	movs	r2, #0
 800169c:	4619      	mov	r1, r3
 800169e:	480b      	ldr	r0, [pc, #44]	; (80016cc <MX_DAC1_Init+0x70>)
 80016a0:	f003 f8f2 	bl	8004888 <HAL_DAC_ConfigChannel>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80016aa:	f000 fbfb 	bl	8001ea4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	2210      	movs	r2, #16
 80016b2:	4619      	mov	r1, r3
 80016b4:	4805      	ldr	r0, [pc, #20]	; (80016cc <MX_DAC1_Init+0x70>)
 80016b6:	f003 f8e7 	bl	8004888 <HAL_DAC_ConfigChannel>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80016c0:	f000 fbf0 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	3728      	adds	r7, #40	; 0x28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	24000274 	.word	0x24000274
 80016d0:	40007400 	.word	0x40007400

080016d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <MX_I2C1_Init+0x74>)
 80016da:	4a1c      	ldr	r2, [pc, #112]	; (800174c <MX_I2C1_Init+0x78>)
 80016dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80016de:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <MX_I2C1_Init+0x74>)
 80016e0:	4a1b      	ldr	r2, [pc, #108]	; (8001750 <MX_I2C1_Init+0x7c>)
 80016e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <MX_I2C1_Init+0x74>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016ea:	4b17      	ldr	r3, [pc, #92]	; (8001748 <MX_I2C1_Init+0x74>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <MX_I2C1_Init+0x74>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <MX_I2C1_Init+0x74>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <MX_I2C1_Init+0x74>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_I2C1_Init+0x74>)
 8001704:	2200      	movs	r2, #0
 8001706:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_I2C1_Init+0x74>)
 800170a:	2200      	movs	r2, #0
 800170c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800170e:	480e      	ldr	r0, [pc, #56]	; (8001748 <MX_I2C1_Init+0x74>)
 8001710:	f006 fa08 	bl	8007b24 <HAL_I2C_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800171a:	f000 fbc3 	bl	8001ea4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800171e:	2100      	movs	r1, #0
 8001720:	4809      	ldr	r0, [pc, #36]	; (8001748 <MX_I2C1_Init+0x74>)
 8001722:	f006 fef1 	bl	8008508 <HAL_I2CEx_ConfigAnalogFilter>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800172c:	f000 fbba 	bl	8001ea4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001730:	2100      	movs	r1, #0
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_I2C1_Init+0x74>)
 8001734:	f006 ff33 	bl	800859e <HAL_I2CEx_ConfigDigitalFilter>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800173e:	f000 fbb1 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	24000288 	.word	0x24000288
 800174c:	40005400 	.word	0x40005400
 8001750:	20303e5d 	.word	0x20303e5d

08001754 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001758:	4b28      	ldr	r3, [pc, #160]	; (80017fc <MX_SPI1_Init+0xa8>)
 800175a:	4a29      	ldr	r2, [pc, #164]	; (8001800 <MX_SPI1_Init+0xac>)
 800175c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800175e:	4b27      	ldr	r3, [pc, #156]	; (80017fc <MX_SPI1_Init+0xa8>)
 8001760:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001764:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001766:	4b25      	ldr	r3, [pc, #148]	; (80017fc <MX_SPI1_Init+0xa8>)
 8001768:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800176c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800176e:	4b23      	ldr	r3, [pc, #140]	; (80017fc <MX_SPI1_Init+0xa8>)
 8001770:	220f      	movs	r2, #15
 8001772:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001774:	4b21      	ldr	r3, [pc, #132]	; (80017fc <MX_SPI1_Init+0xa8>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800177a:	4b20      	ldr	r3, [pc, #128]	; (80017fc <MX_SPI1_Init+0xa8>)
 800177c:	2200      	movs	r2, #0
 800177e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001780:	4b1e      	ldr	r3, [pc, #120]	; (80017fc <MX_SPI1_Init+0xa8>)
 8001782:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001786:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001788:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <MX_SPI1_Init+0xa8>)
 800178a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800178e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001790:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <MX_SPI1_Init+0xa8>)
 8001792:	2200      	movs	r2, #0
 8001794:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001796:	4b19      	ldr	r3, [pc, #100]	; (80017fc <MX_SPI1_Init+0xa8>)
 8001798:	2200      	movs	r2, #0
 800179a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800179c:	4b17      	ldr	r3, [pc, #92]	; (80017fc <MX_SPI1_Init+0xa8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <MX_SPI1_Init+0xa8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017a8:	4b14      	ldr	r3, [pc, #80]	; (80017fc <MX_SPI1_Init+0xa8>)
 80017aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ae:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <MX_SPI1_Init+0xa8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <MX_SPI1_Init+0xa8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <MX_SPI1_Init+0xa8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <MX_SPI1_Init+0xa8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <MX_SPI1_Init+0xa8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <MX_SPI1_Init+0xa8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <MX_SPI1_Init+0xa8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <MX_SPI1_Init+0xa8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <MX_SPI1_Init+0xa8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <MX_SPI1_Init+0xa8>)
 80017e8:	f00a f8e2 	bl	800b9b0 <HAL_SPI_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80017f2:	f000 fb57 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	240002d4 	.word	0x240002d4
 8001800:	40013000 	.word	0x40013000

08001804 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001808:	4b28      	ldr	r3, [pc, #160]	; (80018ac <MX_SPI2_Init+0xa8>)
 800180a:	4a29      	ldr	r2, [pc, #164]	; (80018b0 <MX_SPI2_Init+0xac>)
 800180c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800180e:	4b27      	ldr	r3, [pc, #156]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001810:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001814:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001816:	4b25      	ldr	r3, [pc, #148]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001818:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800181c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800181e:	4b23      	ldr	r3, [pc, #140]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001820:	220f      	movs	r2, #15
 8001822:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001824:	4b21      	ldr	r3, [pc, #132]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <MX_SPI2_Init+0xa8>)
 800182c:	2200      	movs	r2, #0
 800182e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001830:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001832:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001836:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001838:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <MX_SPI2_Init+0xa8>)
 800183a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800183e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001840:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001842:	2200      	movs	r2, #0
 8001844:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001846:	4b19      	ldr	r3, [pc, #100]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001848:	2200      	movs	r2, #0
 800184a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800184c:	4b17      	ldr	r3, [pc, #92]	; (80018ac <MX_SPI2_Init+0xa8>)
 800184e:	2200      	movs	r2, #0
 8001850:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001852:	4b16      	ldr	r3, [pc, #88]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001854:	2200      	movs	r2, #0
 8001856:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <MX_SPI2_Init+0xa8>)
 800185a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800185e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001862:	2200      	movs	r2, #0
 8001864:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001868:	2200      	movs	r2, #0
 800186a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <MX_SPI2_Init+0xa8>)
 800186e:	2200      	movs	r2, #0
 8001870:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001874:	2200      	movs	r2, #0
 8001876:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <MX_SPI2_Init+0xa8>)
 800187a:	2200      	movs	r2, #0
 800187c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001880:	2200      	movs	r2, #0
 8001882:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001886:	2200      	movs	r2, #0
 8001888:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <MX_SPI2_Init+0xa8>)
 800188c:	2200      	movs	r2, #0
 800188e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001892:	2200      	movs	r2, #0
 8001894:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001896:	4805      	ldr	r0, [pc, #20]	; (80018ac <MX_SPI2_Init+0xa8>)
 8001898:	f00a f88a 	bl	800b9b0 <HAL_SPI_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80018a2:	f000 faff 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	2400035c 	.word	0x2400035c
 80018b0:	40003800 	.word	0x40003800

080018b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b096      	sub	sp, #88	; 0x58
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	611a      	str	r2, [r3, #16]
 80018d6:	615a      	str	r2, [r3, #20]
 80018d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	222c      	movs	r2, #44	; 0x2c
 80018de:	2100      	movs	r1, #0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f00e fa95 	bl	800fe10 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018e6:	4b39      	ldr	r3, [pc, #228]	; (80019cc <MX_TIM1_Init+0x118>)
 80018e8:	4a39      	ldr	r2, [pc, #228]	; (80019d0 <MX_TIM1_Init+0x11c>)
 80018ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 80018ec:	4b37      	ldr	r3, [pc, #220]	; (80019cc <MX_TIM1_Init+0x118>)
 80018ee:	2263      	movs	r2, #99	; 0x63
 80018f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f2:	4b36      	ldr	r3, [pc, #216]	; (80019cc <MX_TIM1_Init+0x118>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000 - 1;
 80018f8:	4b34      	ldr	r3, [pc, #208]	; (80019cc <MX_TIM1_Init+0x118>)
 80018fa:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80018fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001900:	4b32      	ldr	r3, [pc, #200]	; (80019cc <MX_TIM1_Init+0x118>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001906:	4b31      	ldr	r3, [pc, #196]	; (80019cc <MX_TIM1_Init+0x118>)
 8001908:	2200      	movs	r2, #0
 800190a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190c:	4b2f      	ldr	r3, [pc, #188]	; (80019cc <MX_TIM1_Init+0x118>)
 800190e:	2200      	movs	r2, #0
 8001910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001912:	482e      	ldr	r0, [pc, #184]	; (80019cc <MX_TIM1_Init+0x118>)
 8001914:	f00a ff5a 	bl	800c7cc <HAL_TIM_PWM_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800191e:	f000 fac1 	bl	8001ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800192e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001932:	4619      	mov	r1, r3
 8001934:	4825      	ldr	r0, [pc, #148]	; (80019cc <MX_TIM1_Init+0x118>)
 8001936:	f00b fd91 	bl	800d45c <HAL_TIMEx_MasterConfigSynchronization>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001940:	f000 fab0 	bl	8001ea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001944:	2360      	movs	r3, #96	; 0x60
 8001946:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480 -1;
 8001948:	f240 13df 	movw	r3, #479	; 0x1df
 800194c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800194e:	2300      	movs	r3, #0
 8001950:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001952:	2300      	movs	r3, #0
 8001954:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001956:	2300      	movs	r3, #0
 8001958:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001962:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001966:	2200      	movs	r2, #0
 8001968:	4619      	mov	r1, r3
 800196a:	4818      	ldr	r0, [pc, #96]	; (80019cc <MX_TIM1_Init+0x118>)
 800196c:	f00b f8a4 	bl	800cab8 <HAL_TIM_PWM_ConfigChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001976:	f000 fa95 	bl	8001ea4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800198e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001992:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800199c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	4619      	mov	r1, r3
 80019ae:	4807      	ldr	r0, [pc, #28]	; (80019cc <MX_TIM1_Init+0x118>)
 80019b0:	f00b fde2 	bl	800d578 <HAL_TIMEx_ConfigBreakDeadTime>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80019ba:	f000 fa73 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019be:	4803      	ldr	r0, [pc, #12]	; (80019cc <MX_TIM1_Init+0x118>)
 80019c0:	f000 fd64 	bl	800248c <HAL_TIM_MspPostInit>

}
 80019c4:	bf00      	nop
 80019c6:	3758      	adds	r7, #88	; 0x58
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	240003e4 	.word	0x240003e4
 80019d0:	40010000 	.word	0x40010000

080019d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08a      	sub	sp, #40	; 0x28
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019da:	f107 031c 	add.w	r3, r7, #28
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019e6:	463b      	mov	r3, r7
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
 80019f4:	615a      	str	r2, [r3, #20]
 80019f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019f8:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <MX_TIM2_Init+0xb0>)
 80019fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 -1;
 8001a00:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <MX_TIM2_Init+0xb0>)
 8001a02:	2263      	movs	r2, #99	; 0x63
 8001a04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a06:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <MX_TIM2_Init+0xb0>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48000 - 1;
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <MX_TIM2_Init+0xb0>)
 8001a0e:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001a12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <MX_TIM2_Init+0xb0>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <MX_TIM2_Init+0xb0>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a20:	4818      	ldr	r0, [pc, #96]	; (8001a84 <MX_TIM2_Init+0xb0>)
 8001a22:	f00a fed3 	bl	800c7cc <HAL_TIM_PWM_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001a2c:	f000 fa3a 	bl	8001ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4811      	ldr	r0, [pc, #68]	; (8001a84 <MX_TIM2_Init+0xb0>)
 8001a40:	f00b fd0c 	bl	800d45c <HAL_TIMEx_MasterConfigSynchronization>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001a4a:	f000 fa2b 	bl	8001ea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a4e:	2360      	movs	r3, #96	; 0x60
 8001a50:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 480 - 1;
 8001a52:	f240 13df 	movw	r3, #479	; 0x1df
 8001a56:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a60:	463b      	mov	r3, r7
 8001a62:	220c      	movs	r2, #12
 8001a64:	4619      	mov	r1, r3
 8001a66:	4807      	ldr	r0, [pc, #28]	; (8001a84 <MX_TIM2_Init+0xb0>)
 8001a68:	f00b f826 	bl	800cab8 <HAL_TIM_PWM_ConfigChannel>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001a72:	f000 fa17 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a76:	4803      	ldr	r0, [pc, #12]	; (8001a84 <MX_TIM2_Init+0xb0>)
 8001a78:	f000 fd08 	bl	800248c <HAL_TIM_MspPostInit>

}
 8001a7c:	bf00      	nop
 8001a7e:	3728      	adds	r7, #40	; 0x28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	24000430 	.word	0x24000430

08001a88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a8c:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <MX_USART1_UART_Init+0x90>)
 8001a8e:	4a23      	ldr	r2, [pc, #140]	; (8001b1c <MX_USART1_UART_Init+0x94>)
 8001a90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001a92:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <MX_USART1_UART_Init+0x90>)
 8001a94:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001a98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9a:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <MX_USART1_UART_Init+0x90>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001aa0:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <MX_USART1_UART_Init+0x90>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <MX_USART1_UART_Init+0x90>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001aac:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <MX_USART1_UART_Init+0x90>)
 8001aae:	220c      	movs	r2, #12
 8001ab0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab2:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <MX_USART1_UART_Init+0x90>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <MX_USART1_UART_Init+0x90>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001abe:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <MX_USART1_UART_Init+0x90>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <MX_USART1_UART_Init+0x90>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aca:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <MX_USART1_UART_Init+0x90>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ad0:	4811      	ldr	r0, [pc, #68]	; (8001b18 <MX_USART1_UART_Init+0x90>)
 8001ad2:	f00b fded 	bl	800d6b0 <HAL_UART_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001adc:	f000 f9e2 	bl	8001ea4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	480d      	ldr	r0, [pc, #52]	; (8001b18 <MX_USART1_UART_Init+0x90>)
 8001ae4:	f00e f881 	bl	800fbea <HAL_UARTEx_SetTxFifoThreshold>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001aee:	f000 f9d9 	bl	8001ea4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001af2:	2100      	movs	r1, #0
 8001af4:	4808      	ldr	r0, [pc, #32]	; (8001b18 <MX_USART1_UART_Init+0x90>)
 8001af6:	f00e f8b6 	bl	800fc66 <HAL_UARTEx_SetRxFifoThreshold>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b00:	f000 f9d0 	bl	8001ea4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b04:	4804      	ldr	r0, [pc, #16]	; (8001b18 <MX_USART1_UART_Init+0x90>)
 8001b06:	f00e f837 	bl	800fb78 <HAL_UARTEx_DisableFifoMode>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b10:	f000 f9c8 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	2400047c 	.word	0x2400047c
 8001b1c:	40011000 	.word	0x40011000

08001b20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b26:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <MX_DMA_Init+0x4c>)
 8001b28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b2c:	4a0f      	ldr	r2, [pc, #60]	; (8001b6c <MX_DMA_Init+0x4c>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <MX_DMA_Init+0x4c>)
 8001b38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2100      	movs	r1, #0
 8001b48:	200b      	movs	r0, #11
 8001b4a:	f002 fdd0 	bl	80046ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b4e:	200b      	movs	r0, #11
 8001b50:	f002 fde7 	bl	8004722 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2100      	movs	r1, #0
 8001b58:	200c      	movs	r0, #12
 8001b5a:	f002 fdc8 	bl	80046ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b5e:	200c      	movs	r0, #12
 8001b60:	f002 fddf 	bl	8004722 <HAL_NVIC_EnableIRQ>

}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	58024400 	.word	0x58024400

08001b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08c      	sub	sp, #48	; 0x30
 8001b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
 8001b84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b86:	4b54      	ldr	r3, [pc, #336]	; (8001cd8 <MX_GPIO_Init+0x168>)
 8001b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8c:	4a52      	ldr	r2, [pc, #328]	; (8001cd8 <MX_GPIO_Init+0x168>)
 8001b8e:	f043 0304 	orr.w	r3, r3, #4
 8001b92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b96:	4b50      	ldr	r3, [pc, #320]	; (8001cd8 <MX_GPIO_Init+0x168>)
 8001b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ba4:	4b4c      	ldr	r3, [pc, #304]	; (8001cd8 <MX_GPIO_Init+0x168>)
 8001ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001baa:	4a4b      	ldr	r2, [pc, #300]	; (8001cd8 <MX_GPIO_Init+0x168>)
 8001bac:	f043 0320 	orr.w	r3, r3, #32
 8001bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb4:	4b48      	ldr	r3, [pc, #288]	; (8001cd8 <MX_GPIO_Init+0x168>)
 8001bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bba:	f003 0320 	and.w	r3, r3, #32
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bc2:	4b45      	ldr	r3, [pc, #276]	; (8001cd8 <MX_GPIO_Init+0x168>)
 8001bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc8:	4a43      	ldr	r2, [pc, #268]	; (8001cd8 <MX_GPIO_Init+0x168>)
 8001bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd2:	4b41      	ldr	r3, [pc, #260]	; (8001cd8 <MX_GPIO_Init+0x168>)
 8001bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be0:	4b3d      	ldr	r3, [pc, #244]	; (8001cd8 <MX_GPIO_Init+0x168>)
 8001be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be6:	4a3c      	ldr	r2, [pc, #240]	; (8001cd8 <MX_GPIO_Init+0x168>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bf0:	4b39      	ldr	r3, [pc, #228]	; (8001cd8 <MX_GPIO_Init+0x168>)
 8001bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	4b36      	ldr	r3, [pc, #216]	; (8001cd8 <MX_GPIO_Init+0x168>)
 8001c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c04:	4a34      	ldr	r2, [pc, #208]	; (8001cd8 <MX_GPIO_Init+0x168>)
 8001c06:	f043 0302 	orr.w	r3, r3, #2
 8001c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c0e:	4b32      	ldr	r3, [pc, #200]	; (8001cd8 <MX_GPIO_Init+0x168>)
 8001c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c1c:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <MX_GPIO_Init+0x168>)
 8001c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c22:	4a2d      	ldr	r2, [pc, #180]	; (8001cd8 <MX_GPIO_Init+0x168>)
 8001c24:	f043 0308 	orr.w	r3, r3, #8
 8001c28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c2c:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <MX_GPIO_Init+0x168>)
 8001c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	21c0      	movs	r1, #192	; 0xc0
 8001c3e:	4827      	ldr	r0, [pc, #156]	; (8001cdc <MX_GPIO_Init+0x16c>)
 8001c40:	f005 ff56 	bl	8007af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001c44:	2200      	movs	r2, #0
 8001c46:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8001c4a:	4825      	ldr	r0, [pc, #148]	; (8001ce0 <MX_GPIO_Init+0x170>)
 8001c4c:	f005 ff50 	bl	8007af0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c50:	2200      	movs	r2, #0
 8001c52:	2160      	movs	r1, #96	; 0x60
 8001c54:	4823      	ldr	r0, [pc, #140]	; (8001ce4 <MX_GPIO_Init+0x174>)
 8001c56:	f005 ff4b 	bl	8007af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c5a:	23c0      	movs	r3, #192	; 0xc0
 8001c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c6a:	f107 031c 	add.w	r3, r7, #28
 8001c6e:	4619      	mov	r1, r3
 8001c70:	481a      	ldr	r0, [pc, #104]	; (8001cdc <MX_GPIO_Init+0x16c>)
 8001c72:	f005 fd75 	bl	8007760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001c76:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001c7a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	2300      	movs	r3, #0
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c88:	f107 031c 	add.w	r3, r7, #28
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4814      	ldr	r0, [pc, #80]	; (8001ce0 <MX_GPIO_Init+0x170>)
 8001c90:	f005 fd66 	bl	8007760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c94:	2360      	movs	r3, #96	; 0x60
 8001c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ca4:	2307      	movs	r3, #7
 8001ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca8:	f107 031c 	add.w	r3, r7, #28
 8001cac:	4619      	mov	r1, r3
 8001cae:	480e      	ldr	r0, [pc, #56]	; (8001ce8 <MX_GPIO_Init+0x178>)
 8001cb0:	f005 fd56 	bl	8007760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001cb4:	2360      	movs	r3, #96	; 0x60
 8001cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4806      	ldr	r0, [pc, #24]	; (8001ce4 <MX_GPIO_Init+0x174>)
 8001ccc:	f005 fd48 	bl	8007760 <HAL_GPIO_Init>

}
 8001cd0:	bf00      	nop
 8001cd2:	3730      	adds	r7, #48	; 0x30
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	58024400 	.word	0x58024400
 8001cdc:	58021400 	.word	0x58021400
 8001ce0:	58020800 	.word	0x58020800
 8001ce4:	58020400 	.word	0x58020400
 8001ce8:	58020c00 	.word	0x58020c00

08001cec <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	; 0x28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]

	/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
	if (hadc == &hadc1) {
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a2f      	ldr	r2, [pc, #188]	; (8001db4 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d129      	bne.n	8001d50 <HAL_ADC_ConvHalfCpltCallback+0x64>
 8001cfc:	4b2e      	ldr	r3, [pc, #184]	; (8001db8 <HAL_ADC_ConvHalfCpltCallback+0xcc>)
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8001d00:	2320      	movs	r3, #32
 8001d02:	623b      	str	r3, [r7, #32]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	dd1d      	ble.n	8001d46 <HAL_ADC_ConvHalfCpltCallback+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	f003 021f 	and.w	r2, r3, #31
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	4413      	add	r3, r2
 8001d14:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d1a:	f3bf 8f4f 	dsb	sy
}
 8001d1e:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001d20:	4a26      	ldr	r2, [pc, #152]	; (8001dbc <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	3320      	adds	r3, #32
 8001d2c:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3b20      	subs	r3, #32
 8001d32:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	dcf2      	bgt.n	8001d20 <HAL_ADC_ConvHalfCpltCallback+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d3a:	f3bf 8f4f 	dsb	sy
}
 8001d3e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d40:	f3bf 8f6f 	isb	sy
}
 8001d44:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8001d46:	bf00      	nop
		SCB_InvalidateDCache_by_Addr((uint32_t *) &ADC1Data[0], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc1);
 8001d48:	481a      	ldr	r0, [pc, #104]	; (8001db4 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 8001d4a:	f001 fb59 	bl	8003400 <HAL_ADC_Stop_DMA>
	} else if (hadc == &hadc3) {
		SCB_InvalidateDCache_by_Addr((uint32_t *) &ADC3Data[0], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc3);
	}

}
 8001d4e:	e02c      	b.n	8001daa <HAL_ADC_ConvHalfCpltCallback+0xbe>
	} else if (hadc == &hadc3) {
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a1b      	ldr	r2, [pc, #108]	; (8001dc0 <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d128      	bne.n	8001daa <HAL_ADC_ConvHalfCpltCallback+0xbe>
 8001d58:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <HAL_ADC_ConvHalfCpltCallback+0xd8>)
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	2320      	movs	r3, #32
 8001d5e:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	dd1d      	ble.n	8001da2 <HAL_ADC_ConvHalfCpltCallback+0xb6>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f003 021f 	and.w	r2, r3, #31
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4413      	add	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d76:	f3bf 8f4f 	dsb	sy
}
 8001d7a:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001d7c:	4a0f      	ldr	r2, [pc, #60]	; (8001dbc <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	3320      	adds	r3, #32
 8001d88:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3b20      	subs	r3, #32
 8001d8e:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	dcf2      	bgt.n	8001d7c <HAL_ADC_ConvHalfCpltCallback+0x90>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d96:	f3bf 8f4f 	dsb	sy
}
 8001d9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d9c:	f3bf 8f6f 	isb	sy
}
 8001da0:	bf00      	nop
}
 8001da2:	bf00      	nop
		HAL_ADC_Stop_DMA(&hadc3);
 8001da4:	4806      	ldr	r0, [pc, #24]	; (8001dc0 <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 8001da6:	f001 fb2b 	bl	8003400 <HAL_ADC_Stop_DMA>
}
 8001daa:	bf00      	nop
 8001dac:	3728      	adds	r7, #40	; 0x28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	240000bc 	.word	0x240000bc
 8001db8:	24000580 	.word	0x24000580
 8001dbc:	e000ed00 	.word	0xe000ed00
 8001dc0:	24000120 	.word	0x24000120
 8001dc4:	240005c0 	.word	0x240005c0

08001dc8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	; 0x28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
	if (hadc == &hadc1) {
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a2f      	ldr	r2, [pc, #188]	; (8001e90 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d129      	bne.n	8001e2c <HAL_ADC_ConvCpltCallback+0x64>
 8001dd8:	4b2e      	ldr	r3, [pc, #184]	; (8001e94 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
 8001ddc:	2320      	movs	r3, #32
 8001dde:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	dd1d      	ble.n	8001e22 <HAL_ADC_ConvCpltCallback+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	f003 021f 	and.w	r2, r3, #31
 8001dec:	6a3b      	ldr	r3, [r7, #32]
 8001dee:	4413      	add	r3, r2
 8001df0:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001df6:	f3bf 8f4f 	dsb	sy
}
 8001dfa:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001dfc:	4a26      	ldr	r2, [pc, #152]	; (8001e98 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	3320      	adds	r3, #32
 8001e08:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3b20      	subs	r3, #32
 8001e0e:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	dcf2      	bgt.n	8001dfc <HAL_ADC_ConvCpltCallback+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e16:	f3bf 8f4f 	dsb	sy
}
 8001e1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e1c:	f3bf 8f6f 	isb	sy
}
 8001e20:	bf00      	nop
}
 8001e22:	bf00      	nop
		SCB_InvalidateDCache_by_Addr((uint32_t *) &ADC1Data[ADC_CONVERTED_DATA_BUFFER_SIZE/2], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc1);
 8001e24:	481a      	ldr	r0, [pc, #104]	; (8001e90 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001e26:	f001 faeb 	bl	8003400 <HAL_ADC_Stop_DMA>
		SCB_InvalidateDCache_by_Addr((uint32_t *) &ADC3Data[ADC_CONVERTED_DATA_BUFFER_SIZE/2], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc3);

	}

}
 8001e2a:	e02c      	b.n	8001e86 <HAL_ADC_ConvCpltCallback+0xbe>
	} else if (hadc == &hadc3) {
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a1b      	ldr	r2, [pc, #108]	; (8001e9c <HAL_ADC_ConvCpltCallback+0xd4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d128      	bne.n	8001e86 <HAL_ADC_ConvCpltCallback+0xbe>
 8001e34:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	2320      	movs	r3, #32
 8001e3a:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	dd1d      	ble.n	8001e7e <HAL_ADC_ConvCpltCallback+0xb6>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f003 021f 	and.w	r2, r3, #31
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e52:	f3bf 8f4f 	dsb	sy
}
 8001e56:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001e58:	4a0f      	ldr	r2, [pc, #60]	; (8001e98 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	3320      	adds	r3, #32
 8001e64:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	3b20      	subs	r3, #32
 8001e6a:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	dcf2      	bgt.n	8001e58 <HAL_ADC_ConvCpltCallback+0x90>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e72:	f3bf 8f4f 	dsb	sy
}
 8001e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e78:	f3bf 8f6f 	isb	sy
}
 8001e7c:	bf00      	nop
}
 8001e7e:	bf00      	nop
		HAL_ADC_Stop_DMA(&hadc3);
 8001e80:	4806      	ldr	r0, [pc, #24]	; (8001e9c <HAL_ADC_ConvCpltCallback+0xd4>)
 8001e82:	f001 fabd 	bl	8003400 <HAL_ADC_Stop_DMA>
}
 8001e86:	bf00      	nop
 8001e88:	3728      	adds	r7, #40	; 0x28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	240000bc 	.word	0x240000bc
 8001e94:	240005a0 	.word	0x240005a0
 8001e98:	e000ed00 	.word	0xe000ed00
 8001e9c:	24000120 	.word	0x24000120
 8001ea0:	240005e0 	.word	0x240005e0

08001ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea8:	b672      	cpsid	i
}
 8001eaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eac:	e7fe      	b.n	8001eac <Error_Handler+0x8>
	...

08001eb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_MspInit+0x30>)
 8001eb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ebc:	4a08      	ldr	r2, [pc, #32]	; (8001ee0 <HAL_MspInit+0x30>)
 8001ebe:	f043 0302 	orr.w	r3, r3, #2
 8001ec2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_MspInit+0x30>)
 8001ec8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	607b      	str	r3, [r7, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	58024400 	.word	0x58024400

08001ee4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08e      	sub	sp, #56	; 0x38
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a7b      	ldr	r2, [pc, #492]	; (80020f0 <HAL_ADC_MspInit+0x20c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	f040 8091 	bne.w	800202a <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001f08:	4b7a      	ldr	r3, [pc, #488]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8001f0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f0e:	4a79      	ldr	r2, [pc, #484]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8001f10:	f043 0320 	orr.w	r3, r3, #32
 8001f14:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f18:	4b76      	ldr	r3, [pc, #472]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8001f1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f1e:	f003 0320 	and.w	r3, r3, #32
 8001f22:	623b      	str	r3, [r7, #32]
 8001f24:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f26:	4b73      	ldr	r3, [pc, #460]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8001f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f2c:	4a71      	ldr	r2, [pc, #452]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8001f2e:	f043 0304 	orr.w	r3, r3, #4
 8001f32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f36:	4b6f      	ldr	r3, [pc, #444]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8001f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	61fb      	str	r3, [r7, #28]
 8001f42:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f44:	4b6b      	ldr	r3, [pc, #428]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8001f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f4a:	4a6a      	ldr	r2, [pc, #424]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f54:	4b67      	ldr	r3, [pc, #412]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8001f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	61bb      	str	r3, [r7, #24]
 8001f60:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f62:	4b64      	ldr	r3, [pc, #400]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8001f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f68:	4a62      	ldr	r2, [pc, #392]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8001f6a:	f043 0302 	orr.w	r3, r3, #2
 8001f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f72:	4b60      	ldr	r3, [pc, #384]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8001f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001f80:	2333      	movs	r3, #51	; 0x33
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f84:	2303      	movs	r3, #3
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f90:	4619      	mov	r1, r3
 8001f92:	4859      	ldr	r0, [pc, #356]	; (80020f8 <HAL_ADC_MspInit+0x214>)
 8001f94:	f005 fbe4 	bl	8007760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001f98:	23cf      	movs	r3, #207	; 0xcf
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4854      	ldr	r0, [pc, #336]	; (80020fc <HAL_ADC_MspInit+0x218>)
 8001fac:	f005 fbd8 	bl	8007760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	484f      	ldr	r0, [pc, #316]	; (8002100 <HAL_ADC_MspInit+0x21c>)
 8001fc4:	f005 fbcc 	bl	8007760 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001fc8:	4b4e      	ldr	r3, [pc, #312]	; (8002104 <HAL_ADC_MspInit+0x220>)
 8001fca:	4a4f      	ldr	r2, [pc, #316]	; (8002108 <HAL_ADC_MspInit+0x224>)
 8001fcc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001fce:	4b4d      	ldr	r3, [pc, #308]	; (8002104 <HAL_ADC_MspInit+0x220>)
 8001fd0:	2209      	movs	r2, #9
 8001fd2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fd4:	4b4b      	ldr	r3, [pc, #300]	; (8002104 <HAL_ADC_MspInit+0x220>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fda:	4b4a      	ldr	r3, [pc, #296]	; (8002104 <HAL_ADC_MspInit+0x220>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fe0:	4b48      	ldr	r3, [pc, #288]	; (8002104 <HAL_ADC_MspInit+0x220>)
 8001fe2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fe6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fe8:	4b46      	ldr	r3, [pc, #280]	; (8002104 <HAL_ADC_MspInit+0x220>)
 8001fea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ff0:	4b44      	ldr	r3, [pc, #272]	; (8002104 <HAL_ADC_MspInit+0x220>)
 8001ff2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ff6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ff8:	4b42      	ldr	r3, [pc, #264]	; (8002104 <HAL_ADC_MspInit+0x220>)
 8001ffa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ffe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002000:	4b40      	ldr	r3, [pc, #256]	; (8002104 <HAL_ADC_MspInit+0x220>)
 8002002:	2200      	movs	r2, #0
 8002004:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002006:	4b3f      	ldr	r3, [pc, #252]	; (8002104 <HAL_ADC_MspInit+0x220>)
 8002008:	2200      	movs	r2, #0
 800200a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800200c:	483d      	ldr	r0, [pc, #244]	; (8002104 <HAL_ADC_MspInit+0x220>)
 800200e:	f002 fd6b 	bl	8004ae8 <HAL_DMA_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8002018:	f7ff ff44 	bl	8001ea4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a39      	ldr	r2, [pc, #228]	; (8002104 <HAL_ADC_MspInit+0x220>)
 8002020:	64da      	str	r2, [r3, #76]	; 0x4c
 8002022:	4a38      	ldr	r2, [pc, #224]	; (8002104 <HAL_ADC_MspInit+0x220>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002028:	e05e      	b.n	80020e8 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a37      	ldr	r2, [pc, #220]	; (800210c <HAL_ADC_MspInit+0x228>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d159      	bne.n	80020e8 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002034:	4b2f      	ldr	r3, [pc, #188]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8002036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800203a:	4a2e      	ldr	r2, [pc, #184]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 800203c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002040:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002044:	4b2b      	ldr	r3, [pc, #172]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8002046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800204a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002052:	4b28      	ldr	r3, [pc, #160]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8002054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002058:	4a26      	ldr	r2, [pc, #152]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 800205a:	f043 0304 	orr.w	r3, r3, #4
 800205e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002062:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8002064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002070:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002074:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002078:	f000 fd0e 	bl	8002a98 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800207c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002080:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002084:	f000 fd08 	bl	8002a98 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002088:	4b21      	ldr	r3, [pc, #132]	; (8002110 <HAL_ADC_MspInit+0x22c>)
 800208a:	4a22      	ldr	r2, [pc, #136]	; (8002114 <HAL_ADC_MspInit+0x230>)
 800208c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800208e:	4b20      	ldr	r3, [pc, #128]	; (8002110 <HAL_ADC_MspInit+0x22c>)
 8002090:	2273      	movs	r2, #115	; 0x73
 8002092:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002094:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <HAL_ADC_MspInit+0x22c>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <HAL_ADC_MspInit+0x22c>)
 800209c:	2200      	movs	r2, #0
 800209e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80020a0:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <HAL_ADC_MspInit+0x22c>)
 80020a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020a6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020a8:	4b19      	ldr	r3, [pc, #100]	; (8002110 <HAL_ADC_MspInit+0x22c>)
 80020aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020ae:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020b0:	4b17      	ldr	r3, [pc, #92]	; (8002110 <HAL_ADC_MspInit+0x22c>)
 80020b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020b6:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80020b8:	4b15      	ldr	r3, [pc, #84]	; (8002110 <HAL_ADC_MspInit+0x22c>)
 80020ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020be:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80020c0:	4b13      	ldr	r3, [pc, #76]	; (8002110 <HAL_ADC_MspInit+0x22c>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020c6:	4b12      	ldr	r3, [pc, #72]	; (8002110 <HAL_ADC_MspInit+0x22c>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80020cc:	4810      	ldr	r0, [pc, #64]	; (8002110 <HAL_ADC_MspInit+0x22c>)
 80020ce:	f002 fd0b 	bl	8004ae8 <HAL_DMA_Init>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 80020d8:	f7ff fee4 	bl	8001ea4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a0c      	ldr	r2, [pc, #48]	; (8002110 <HAL_ADC_MspInit+0x22c>)
 80020e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80020e2:	4a0b      	ldr	r2, [pc, #44]	; (8002110 <HAL_ADC_MspInit+0x22c>)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80020e8:	bf00      	nop
 80020ea:	3738      	adds	r7, #56	; 0x38
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40022000 	.word	0x40022000
 80020f4:	58024400 	.word	0x58024400
 80020f8:	58020800 	.word	0x58020800
 80020fc:	58020000 	.word	0x58020000
 8002100:	58020400 	.word	0x58020400
 8002104:	24000184 	.word	0x24000184
 8002108:	40020010 	.word	0x40020010
 800210c:	58026000 	.word	0x58026000
 8002110:	240001fc 	.word	0x240001fc
 8002114:	40020028 	.word	0x40020028

08002118 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08a      	sub	sp, #40	; 0x28
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a18      	ldr	r2, [pc, #96]	; (8002198 <HAL_DAC_MspInit+0x80>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d129      	bne.n	800218e <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800213a:	4b18      	ldr	r3, [pc, #96]	; (800219c <HAL_DAC_MspInit+0x84>)
 800213c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002140:	4a16      	ldr	r2, [pc, #88]	; (800219c <HAL_DAC_MspInit+0x84>)
 8002142:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002146:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800214a:	4b14      	ldr	r3, [pc, #80]	; (800219c <HAL_DAC_MspInit+0x84>)
 800214c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002150:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002158:	4b10      	ldr	r3, [pc, #64]	; (800219c <HAL_DAC_MspInit+0x84>)
 800215a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215e:	4a0f      	ldr	r2, [pc, #60]	; (800219c <HAL_DAC_MspInit+0x84>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <HAL_DAC_MspInit+0x84>)
 800216a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002176:	2330      	movs	r3, #48	; 0x30
 8002178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800217a:	2303      	movs	r3, #3
 800217c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002182:	f107 0314 	add.w	r3, r7, #20
 8002186:	4619      	mov	r1, r3
 8002188:	4805      	ldr	r0, [pc, #20]	; (80021a0 <HAL_DAC_MspInit+0x88>)
 800218a:	f005 fae9 	bl	8007760 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800218e:	bf00      	nop
 8002190:	3728      	adds	r7, #40	; 0x28
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40007400 	.word	0x40007400
 800219c:	58024400 	.word	0x58024400
 80021a0:	58020000 	.word	0x58020000

080021a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b0b8      	sub	sp, #224	; 0xe0
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021bc:	f107 0310 	add.w	r3, r7, #16
 80021c0:	22bc      	movs	r2, #188	; 0xbc
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f00d fe23 	bl	800fe10 <memset>
  if(hi2c->Instance==I2C1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a25      	ldr	r2, [pc, #148]	; (8002264 <HAL_I2C_MspInit+0xc0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d142      	bne.n	800225a <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80021d4:	2308      	movs	r3, #8
 80021d6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80021d8:	2300      	movs	r3, #0
 80021da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021de:	f107 0310 	add.w	r3, r7, #16
 80021e2:	4618      	mov	r0, r3
 80021e4:	f007 fa58 	bl	8009698 <HAL_RCCEx_PeriphCLKConfig>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80021ee:	f7ff fe59 	bl	8001ea4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f2:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <HAL_I2C_MspInit+0xc4>)
 80021f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f8:	4a1b      	ldr	r2, [pc, #108]	; (8002268 <HAL_I2C_MspInit+0xc4>)
 80021fa:	f043 0302 	orr.w	r3, r3, #2
 80021fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002202:	4b19      	ldr	r3, [pc, #100]	; (8002268 <HAL_I2C_MspInit+0xc4>)
 8002204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002210:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002214:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002218:	2312      	movs	r3, #18
 800221a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	2300      	movs	r3, #0
 8002226:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800222a:	2304      	movs	r3, #4
 800222c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002230:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002234:	4619      	mov	r1, r3
 8002236:	480d      	ldr	r0, [pc, #52]	; (800226c <HAL_I2C_MspInit+0xc8>)
 8002238:	f005 fa92 	bl	8007760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800223c:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <HAL_I2C_MspInit+0xc4>)
 800223e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002242:	4a09      	ldr	r2, [pc, #36]	; (8002268 <HAL_I2C_MspInit+0xc4>)
 8002244:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002248:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_I2C_MspInit+0xc4>)
 800224e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800225a:	bf00      	nop
 800225c:	37e0      	adds	r7, #224	; 0xe0
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40005400 	.word	0x40005400
 8002268:	58024400 	.word	0x58024400
 800226c:	58020400 	.word	0x58020400

08002270 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b0ba      	sub	sp, #232	; 0xe8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002288:	f107 0318 	add.w	r3, r7, #24
 800228c:	22bc      	movs	r2, #188	; 0xbc
 800228e:	2100      	movs	r1, #0
 8002290:	4618      	mov	r0, r3
 8002292:	f00d fdbd 	bl	800fe10 <memset>
  if(hspi->Instance==SPI1)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a49      	ldr	r2, [pc, #292]	; (80023c0 <HAL_SPI_MspInit+0x150>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d142      	bne.n	8002326 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80022a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022aa:	f107 0318 	add.w	r3, r7, #24
 80022ae:	4618      	mov	r0, r3
 80022b0:	f007 f9f2 	bl	8009698 <HAL_RCCEx_PeriphCLKConfig>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80022ba:	f7ff fdf3 	bl	8001ea4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022be:	4b41      	ldr	r3, [pc, #260]	; (80023c4 <HAL_SPI_MspInit+0x154>)
 80022c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022c4:	4a3f      	ldr	r2, [pc, #252]	; (80023c4 <HAL_SPI_MspInit+0x154>)
 80022c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022ce:	4b3d      	ldr	r3, [pc, #244]	; (80023c4 <HAL_SPI_MspInit+0x154>)
 80022d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022dc:	4b39      	ldr	r3, [pc, #228]	; (80023c4 <HAL_SPI_MspInit+0x154>)
 80022de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e2:	4a38      	ldr	r2, [pc, #224]	; (80023c4 <HAL_SPI_MspInit+0x154>)
 80022e4:	f043 0302 	orr.w	r3, r3, #2
 80022e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022ec:	4b35      	ldr	r3, [pc, #212]	; (80023c4 <HAL_SPI_MspInit+0x154>)
 80022ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80022fa:	2318      	movs	r3, #24
 80022fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230c:	2300      	movs	r3, #0
 800230e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002312:	2305      	movs	r3, #5
 8002314:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002318:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800231c:	4619      	mov	r1, r3
 800231e:	482a      	ldr	r0, [pc, #168]	; (80023c8 <HAL_SPI_MspInit+0x158>)
 8002320:	f005 fa1e 	bl	8007760 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002324:	e047      	b.n	80023b6 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a28      	ldr	r2, [pc, #160]	; (80023cc <HAL_SPI_MspInit+0x15c>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d142      	bne.n	80023b6 <HAL_SPI_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002334:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002336:	2300      	movs	r3, #0
 8002338:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800233a:	f107 0318 	add.w	r3, r7, #24
 800233e:	4618      	mov	r0, r3
 8002340:	f007 f9aa 	bl	8009698 <HAL_RCCEx_PeriphCLKConfig>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_SPI_MspInit+0xde>
      Error_Handler();
 800234a:	f7ff fdab 	bl	8001ea4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800234e:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <HAL_SPI_MspInit+0x154>)
 8002350:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002354:	4a1b      	ldr	r2, [pc, #108]	; (80023c4 <HAL_SPI_MspInit+0x154>)
 8002356:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800235a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800235e:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <HAL_SPI_MspInit+0x154>)
 8002360:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800236c:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <HAL_SPI_MspInit+0x154>)
 800236e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002372:	4a14      	ldr	r2, [pc, #80]	; (80023c4 <HAL_SPI_MspInit+0x154>)
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <HAL_SPI_MspInit+0x154>)
 800237e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800238a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800238e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	2302      	movs	r3, #2
 8002394:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239e:	2300      	movs	r3, #0
 80023a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023a4:	2305      	movs	r3, #5
 80023a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023ae:	4619      	mov	r1, r3
 80023b0:	4805      	ldr	r0, [pc, #20]	; (80023c8 <HAL_SPI_MspInit+0x158>)
 80023b2:	f005 f9d5 	bl	8007760 <HAL_GPIO_Init>
}
 80023b6:	bf00      	nop
 80023b8:	37e8      	adds	r7, #232	; 0xe8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40013000 	.word	0x40013000
 80023c4:	58024400 	.word	0x58024400
 80023c8:	58020400 	.word	0x58020400
 80023cc:	40003800 	.word	0x40003800

080023d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a29      	ldr	r2, [pc, #164]	; (8002484 <HAL_TIM_PWM_MspInit+0xb4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d12f      	bne.n	8002442 <HAL_TIM_PWM_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023e2:	4b29      	ldr	r3, [pc, #164]	; (8002488 <HAL_TIM_PWM_MspInit+0xb8>)
 80023e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023e8:	4a27      	ldr	r2, [pc, #156]	; (8002488 <HAL_TIM_PWM_MspInit+0xb8>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023f2:	4b25      	ldr	r3, [pc, #148]	; (8002488 <HAL_TIM_PWM_MspInit+0xb8>)
 80023f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002400:	2200      	movs	r2, #0
 8002402:	2100      	movs	r1, #0
 8002404:	2018      	movs	r0, #24
 8002406:	f002 f972 	bl	80046ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800240a:	2018      	movs	r0, #24
 800240c:	f002 f989 	bl	8004722 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002410:	2200      	movs	r2, #0
 8002412:	2100      	movs	r1, #0
 8002414:	2019      	movs	r0, #25
 8002416:	f002 f96a 	bl	80046ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800241a:	2019      	movs	r0, #25
 800241c:	f002 f981 	bl	8004722 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002420:	2200      	movs	r2, #0
 8002422:	2100      	movs	r1, #0
 8002424:	201a      	movs	r0, #26
 8002426:	f002 f962 	bl	80046ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800242a:	201a      	movs	r0, #26
 800242c:	f002 f979 	bl	8004722 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002430:	2200      	movs	r2, #0
 8002432:	2100      	movs	r1, #0
 8002434:	201b      	movs	r0, #27
 8002436:	f002 f95a 	bl	80046ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800243a:	201b      	movs	r0, #27
 800243c:	f002 f971 	bl	8004722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002440:	e01b      	b.n	800247a <HAL_TIM_PWM_MspInit+0xaa>
  else if(htim_pwm->Instance==TIM2)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244a:	d116      	bne.n	800247a <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800244c:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <HAL_TIM_PWM_MspInit+0xb8>)
 800244e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002452:	4a0d      	ldr	r2, [pc, #52]	; (8002488 <HAL_TIM_PWM_MspInit+0xb8>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800245c:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <HAL_TIM_PWM_MspInit+0xb8>)
 800245e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	2100      	movs	r1, #0
 800246e:	201c      	movs	r0, #28
 8002470:	f002 f93d 	bl	80046ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002474:	201c      	movs	r0, #28
 8002476:	f002 f954 	bl	8004722 <HAL_NVIC_EnableIRQ>
}
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40010000 	.word	0x40010000
 8002488:	58024400 	.word	0x58024400

0800248c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08a      	sub	sp, #40	; 0x28
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a26      	ldr	r2, [pc, #152]	; (8002544 <HAL_TIM_MspPostInit+0xb8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d120      	bne.n	80024f0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ae:	4b26      	ldr	r3, [pc, #152]	; (8002548 <HAL_TIM_MspPostInit+0xbc>)
 80024b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024b4:	4a24      	ldr	r2, [pc, #144]	; (8002548 <HAL_TIM_MspPostInit+0xbc>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024be:	4b22      	ldr	r3, [pc, #136]	; (8002548 <HAL_TIM_MspPostInit+0xbc>)
 80024c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80024cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d2:	2302      	movs	r3, #2
 80024d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024da:	2300      	movs	r3, #0
 80024dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024de:	2301      	movs	r3, #1
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e2:	f107 0314 	add.w	r3, r7, #20
 80024e6:	4619      	mov	r1, r3
 80024e8:	4818      	ldr	r0, [pc, #96]	; (800254c <HAL_TIM_MspPostInit+0xc0>)
 80024ea:	f005 f939 	bl	8007760 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80024ee:	e024      	b.n	800253a <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f8:	d11f      	bne.n	800253a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fa:	4b13      	ldr	r3, [pc, #76]	; (8002548 <HAL_TIM_MspPostInit+0xbc>)
 80024fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002500:	4a11      	ldr	r2, [pc, #68]	; (8002548 <HAL_TIM_MspPostInit+0xbc>)
 8002502:	f043 0302 	orr.w	r3, r3, #2
 8002506:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800250a:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <HAL_TIM_MspPostInit+0xbc>)
 800250c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002518:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800251c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251e:	2302      	movs	r3, #2
 8002520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002526:	2300      	movs	r3, #0
 8002528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800252a:	2301      	movs	r3, #1
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252e:	f107 0314 	add.w	r3, r7, #20
 8002532:	4619      	mov	r1, r3
 8002534:	4806      	ldr	r0, [pc, #24]	; (8002550 <HAL_TIM_MspPostInit+0xc4>)
 8002536:	f005 f913 	bl	8007760 <HAL_GPIO_Init>
}
 800253a:	bf00      	nop
 800253c:	3728      	adds	r7, #40	; 0x28
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40010000 	.word	0x40010000
 8002548:	58024400 	.word	0x58024400
 800254c:	58020000 	.word	0x58020000
 8002550:	58020400 	.word	0x58020400

08002554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b0b8      	sub	sp, #224	; 0xe0
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800256c:	f107 0310 	add.w	r3, r7, #16
 8002570:	22bc      	movs	r2, #188	; 0xbc
 8002572:	2100      	movs	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f00d fc4b 	bl	800fe10 <memset>
  if(huart->Instance==USART1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a29      	ldr	r2, [pc, #164]	; (8002624 <HAL_UART_MspInit+0xd0>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d14a      	bne.n	800261a <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002584:	2301      	movs	r3, #1
 8002586:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002588:	2300      	movs	r3, #0
 800258a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800258e:	f107 0310 	add.w	r3, r7, #16
 8002592:	4618      	mov	r0, r3
 8002594:	f007 f880 	bl	8009698 <HAL_RCCEx_PeriphCLKConfig>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800259e:	f7ff fc81 	bl	8001ea4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025a2:	4b21      	ldr	r3, [pc, #132]	; (8002628 <HAL_UART_MspInit+0xd4>)
 80025a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025a8:	4a1f      	ldr	r2, [pc, #124]	; (8002628 <HAL_UART_MspInit+0xd4>)
 80025aa:	f043 0310 	orr.w	r3, r3, #16
 80025ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80025b2:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <HAL_UART_MspInit+0xd4>)
 80025b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025b8:	f003 0310 	and.w	r3, r3, #16
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_UART_MspInit+0xd4>)
 80025c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025c6:	4a18      	ldr	r2, [pc, #96]	; (8002628 <HAL_UART_MspInit+0xd4>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025d0:	4b15      	ldr	r3, [pc, #84]	; (8002628 <HAL_UART_MspInit+0xd4>)
 80025d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e6:	2302      	movs	r3, #2
 80025e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025f8:	2307      	movs	r3, #7
 80025fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002602:	4619      	mov	r1, r3
 8002604:	4809      	ldr	r0, [pc, #36]	; (800262c <HAL_UART_MspInit+0xd8>)
 8002606:	f005 f8ab 	bl	8007760 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	2100      	movs	r1, #0
 800260e:	2025      	movs	r0, #37	; 0x25
 8002610:	f002 f86d 	bl	80046ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002614:	2025      	movs	r0, #37	; 0x25
 8002616:	f002 f884 	bl	8004722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800261a:	bf00      	nop
 800261c:	37e0      	adds	r7, #224	; 0xe0
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40011000 	.word	0x40011000
 8002628:	58024400 	.word	0x58024400
 800262c:	58020000 	.word	0x58020000

08002630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002634:	e7fe      	b.n	8002634 <NMI_Handler+0x4>

08002636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800263a:	e7fe      	b.n	800263a <HardFault_Handler+0x4>

0800263c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002640:	e7fe      	b.n	8002640 <MemManage_Handler+0x4>

08002642 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002646:	e7fe      	b.n	8002646 <BusFault_Handler+0x4>

08002648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800264c:	e7fe      	b.n	800264c <UsageFault_Handler+0x4>

0800264e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002660:	bf00      	nop
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800267c:	f000 f9ac 	bl	80029d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}

08002684 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002688:	4802      	ldr	r0, [pc, #8]	; (8002694 <DMA1_Stream0_IRQHandler+0x10>)
 800268a:	f003 fd57 	bl	800613c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	24000184 	.word	0x24000184

08002698 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800269c:	4802      	ldr	r0, [pc, #8]	; (80026a8 <DMA1_Stream1_IRQHandler+0x10>)
 800269e:	f003 fd4d 	bl	800613c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	240001fc 	.word	0x240001fc

080026ac <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026b0:	4802      	ldr	r0, [pc, #8]	; (80026bc <TIM1_BRK_IRQHandler+0x10>)
 80026b2:	f00a f8e2 	bl	800c87a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	240003e4 	.word	0x240003e4

080026c0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026c4:	4802      	ldr	r0, [pc, #8]	; (80026d0 <TIM1_UP_IRQHandler+0x10>)
 80026c6:	f00a f8d8 	bl	800c87a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	240003e4 	.word	0x240003e4

080026d4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026d8:	4802      	ldr	r0, [pc, #8]	; (80026e4 <TIM1_TRG_COM_IRQHandler+0x10>)
 80026da:	f00a f8ce 	bl	800c87a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	240003e4 	.word	0x240003e4

080026e8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026ec:	4802      	ldr	r0, [pc, #8]	; (80026f8 <TIM1_CC_IRQHandler+0x10>)
 80026ee:	f00a f8c4 	bl	800c87a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	240003e4 	.word	0x240003e4

080026fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002700:	4802      	ldr	r0, [pc, #8]	; (800270c <TIM2_IRQHandler+0x10>)
 8002702:	f00a f8ba 	bl	800c87a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	24000430 	.word	0x24000430

08002710 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002714:	4802      	ldr	r0, [pc, #8]	; (8002720 <USART1_IRQHandler+0x10>)
 8002716:	f00b f907 	bl	800d928 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	2400047c 	.word	0x2400047c

08002724 <_sbrk>:
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	4a14      	ldr	r2, [pc, #80]	; (8002780 <_sbrk+0x5c>)
 800272e:	4b15      	ldr	r3, [pc, #84]	; (8002784 <_sbrk+0x60>)
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	4b13      	ldr	r3, [pc, #76]	; (8002788 <_sbrk+0x64>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d102      	bne.n	8002746 <_sbrk+0x22>
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <_sbrk+0x64>)
 8002742:	4a12      	ldr	r2, [pc, #72]	; (800278c <_sbrk+0x68>)
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <_sbrk+0x64>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4413      	add	r3, r2
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	429a      	cmp	r2, r3
 8002752:	d207      	bcs.n	8002764 <_sbrk+0x40>
 8002754:	f00d fb14 	bl	800fd80 <__errno>
 8002758:	4603      	mov	r3, r0
 800275a:	220c      	movs	r2, #12
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002762:	e009      	b.n	8002778 <_sbrk+0x54>
 8002764:	4b08      	ldr	r3, [pc, #32]	; (8002788 <_sbrk+0x64>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	4b07      	ldr	r3, [pc, #28]	; (8002788 <_sbrk+0x64>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4413      	add	r3, r2
 8002772:	4a05      	ldr	r2, [pc, #20]	; (8002788 <_sbrk+0x64>)
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	24080000 	.word	0x24080000
 8002784:	00000400 	.word	0x00000400
 8002788:	24000614 	.word	0x24000614
 800278c:	24000630 	.word	0x24000630

08002790 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002794:	4b37      	ldr	r3, [pc, #220]	; (8002874 <SystemInit+0xe4>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279a:	4a36      	ldr	r2, [pc, #216]	; (8002874 <SystemInit+0xe4>)
 800279c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027a4:	4b34      	ldr	r3, [pc, #208]	; (8002878 <SystemInit+0xe8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 030f 	and.w	r3, r3, #15
 80027ac:	2b06      	cmp	r3, #6
 80027ae:	d807      	bhi.n	80027c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027b0:	4b31      	ldr	r3, [pc, #196]	; (8002878 <SystemInit+0xe8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f023 030f 	bic.w	r3, r3, #15
 80027b8:	4a2f      	ldr	r2, [pc, #188]	; (8002878 <SystemInit+0xe8>)
 80027ba:	f043 0307 	orr.w	r3, r3, #7
 80027be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80027c0:	4b2e      	ldr	r3, [pc, #184]	; (800287c <SystemInit+0xec>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a2d      	ldr	r2, [pc, #180]	; (800287c <SystemInit+0xec>)
 80027c6:	f043 0301 	orr.w	r3, r3, #1
 80027ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80027cc:	4b2b      	ldr	r3, [pc, #172]	; (800287c <SystemInit+0xec>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80027d2:	4b2a      	ldr	r3, [pc, #168]	; (800287c <SystemInit+0xec>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	4929      	ldr	r1, [pc, #164]	; (800287c <SystemInit+0xec>)
 80027d8:	4b29      	ldr	r3, [pc, #164]	; (8002880 <SystemInit+0xf0>)
 80027da:	4013      	ands	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027de:	4b26      	ldr	r3, [pc, #152]	; (8002878 <SystemInit+0xe8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d007      	beq.n	80027fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027ea:	4b23      	ldr	r3, [pc, #140]	; (8002878 <SystemInit+0xe8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 030f 	bic.w	r3, r3, #15
 80027f2:	4a21      	ldr	r2, [pc, #132]	; (8002878 <SystemInit+0xe8>)
 80027f4:	f043 0307 	orr.w	r3, r3, #7
 80027f8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80027fa:	4b20      	ldr	r3, [pc, #128]	; (800287c <SystemInit+0xec>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002800:	4b1e      	ldr	r3, [pc, #120]	; (800287c <SystemInit+0xec>)
 8002802:	2200      	movs	r2, #0
 8002804:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002806:	4b1d      	ldr	r3, [pc, #116]	; (800287c <SystemInit+0xec>)
 8002808:	2200      	movs	r2, #0
 800280a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800280c:	4b1b      	ldr	r3, [pc, #108]	; (800287c <SystemInit+0xec>)
 800280e:	4a1d      	ldr	r2, [pc, #116]	; (8002884 <SystemInit+0xf4>)
 8002810:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002812:	4b1a      	ldr	r3, [pc, #104]	; (800287c <SystemInit+0xec>)
 8002814:	4a1c      	ldr	r2, [pc, #112]	; (8002888 <SystemInit+0xf8>)
 8002816:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002818:	4b18      	ldr	r3, [pc, #96]	; (800287c <SystemInit+0xec>)
 800281a:	4a1c      	ldr	r2, [pc, #112]	; (800288c <SystemInit+0xfc>)
 800281c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800281e:	4b17      	ldr	r3, [pc, #92]	; (800287c <SystemInit+0xec>)
 8002820:	2200      	movs	r2, #0
 8002822:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002824:	4b15      	ldr	r3, [pc, #84]	; (800287c <SystemInit+0xec>)
 8002826:	4a19      	ldr	r2, [pc, #100]	; (800288c <SystemInit+0xfc>)
 8002828:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800282a:	4b14      	ldr	r3, [pc, #80]	; (800287c <SystemInit+0xec>)
 800282c:	2200      	movs	r2, #0
 800282e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002830:	4b12      	ldr	r3, [pc, #72]	; (800287c <SystemInit+0xec>)
 8002832:	4a16      	ldr	r2, [pc, #88]	; (800288c <SystemInit+0xfc>)
 8002834:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002836:	4b11      	ldr	r3, [pc, #68]	; (800287c <SystemInit+0xec>)
 8002838:	2200      	movs	r2, #0
 800283a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <SystemInit+0xec>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0e      	ldr	r2, [pc, #56]	; (800287c <SystemInit+0xec>)
 8002842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002846:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <SystemInit+0xec>)
 800284a:	2200      	movs	r2, #0
 800284c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800284e:	4b10      	ldr	r3, [pc, #64]	; (8002890 <SystemInit+0x100>)
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <SystemInit+0x104>)
 8002854:	4013      	ands	r3, r2
 8002856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800285a:	d202      	bcs.n	8002862 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <SystemInit+0x108>)
 800285e:	2201      	movs	r2, #1
 8002860:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002862:	4b0e      	ldr	r3, [pc, #56]	; (800289c <SystemInit+0x10c>)
 8002864:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002868:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800286a:	bf00      	nop
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	e000ed00 	.word	0xe000ed00
 8002878:	52002000 	.word	0x52002000
 800287c:	58024400 	.word	0x58024400
 8002880:	eaf6ed7f 	.word	0xeaf6ed7f
 8002884:	02020200 	.word	0x02020200
 8002888:	01ff0000 	.word	0x01ff0000
 800288c:	01010280 	.word	0x01010280
 8002890:	5c001000 	.word	0x5c001000
 8002894:	ffff0000 	.word	0xffff0000
 8002898:	51008108 	.word	0x51008108
 800289c:	52004000 	.word	0x52004000

080028a0 <Reset_Handler>:
 80028a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028d8 <LoopFillZerobss+0xe>
 80028a4:	f7ff ff74 	bl	8002790 <SystemInit>
 80028a8:	480c      	ldr	r0, [pc, #48]	; (80028dc <LoopFillZerobss+0x12>)
 80028aa:	490d      	ldr	r1, [pc, #52]	; (80028e0 <LoopFillZerobss+0x16>)
 80028ac:	4a0d      	ldr	r2, [pc, #52]	; (80028e4 <LoopFillZerobss+0x1a>)
 80028ae:	2300      	movs	r3, #0
 80028b0:	e002      	b.n	80028b8 <LoopCopyDataInit>

080028b2 <CopyDataInit>:
 80028b2:	58d4      	ldr	r4, [r2, r3]
 80028b4:	50c4      	str	r4, [r0, r3]
 80028b6:	3304      	adds	r3, #4

080028b8 <LoopCopyDataInit>:
 80028b8:	18c4      	adds	r4, r0, r3
 80028ba:	428c      	cmp	r4, r1
 80028bc:	d3f9      	bcc.n	80028b2 <CopyDataInit>
 80028be:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <LoopFillZerobss+0x1e>)
 80028c0:	4c0a      	ldr	r4, [pc, #40]	; (80028ec <LoopFillZerobss+0x22>)
 80028c2:	2300      	movs	r3, #0
 80028c4:	e001      	b.n	80028ca <LoopFillZerobss>

080028c6 <FillZerobss>:
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	3204      	adds	r2, #4

080028ca <LoopFillZerobss>:
 80028ca:	42a2      	cmp	r2, r4
 80028cc:	d3fb      	bcc.n	80028c6 <FillZerobss>
 80028ce:	f00d fa5d 	bl	800fd8c <__libc_init_array>
 80028d2:	f7fe fbe9 	bl	80010a8 <main>
 80028d6:	4770      	bx	lr
 80028d8:	24080000 	.word	0x24080000
 80028dc:	24000000 	.word	0x24000000
 80028e0:	240000a0 	.word	0x240000a0
 80028e4:	0801009c 	.word	0x0801009c
 80028e8:	240000a0 	.word	0x240000a0
 80028ec:	2400062c 	.word	0x2400062c

080028f0 <ADC3_IRQHandler>:
 80028f0:	e7fe      	b.n	80028f0 <ADC3_IRQHandler>
	...

080028f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028fa:	2003      	movs	r0, #3
 80028fc:	f001 feec 	bl	80046d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002900:	f006 fcf4 	bl	80092ec <HAL_RCC_GetSysClockFreq>
 8002904:	4602      	mov	r2, r0
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <HAL_Init+0x68>)
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	0a1b      	lsrs	r3, r3, #8
 800290c:	f003 030f 	and.w	r3, r3, #15
 8002910:	4913      	ldr	r1, [pc, #76]	; (8002960 <HAL_Init+0x6c>)
 8002912:	5ccb      	ldrb	r3, [r1, r3]
 8002914:	f003 031f 	and.w	r3, r3, #31
 8002918:	fa22 f303 	lsr.w	r3, r2, r3
 800291c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800291e:	4b0f      	ldr	r3, [pc, #60]	; (800295c <HAL_Init+0x68>)
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	4a0e      	ldr	r2, [pc, #56]	; (8002960 <HAL_Init+0x6c>)
 8002928:	5cd3      	ldrb	r3, [r2, r3]
 800292a:	f003 031f 	and.w	r3, r3, #31
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
 8002934:	4a0b      	ldr	r2, [pc, #44]	; (8002964 <HAL_Init+0x70>)
 8002936:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002938:	4a0b      	ldr	r2, [pc, #44]	; (8002968 <HAL_Init+0x74>)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800293e:	200f      	movs	r0, #15
 8002940:	f000 f814 	bl	800296c <HAL_InitTick>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e002      	b.n	8002954 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800294e:	f7ff faaf 	bl	8001eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	58024400 	.word	0x58024400
 8002960:	0801004c 	.word	0x0801004c
 8002964:	24000030 	.word	0x24000030
 8002968:	2400002c 	.word	0x2400002c

0800296c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002974:	4b15      	ldr	r3, [pc, #84]	; (80029cc <HAL_InitTick+0x60>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e021      	b.n	80029c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002980:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <HAL_InitTick+0x64>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b11      	ldr	r3, [pc, #68]	; (80029cc <HAL_InitTick+0x60>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	4619      	mov	r1, r3
 800298a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800298e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002992:	fbb2 f3f3 	udiv	r3, r2, r3
 8002996:	4618      	mov	r0, r3
 8002998:	f001 fed1 	bl	800473e <HAL_SYSTICK_Config>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e00e      	b.n	80029c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b0f      	cmp	r3, #15
 80029aa:	d80a      	bhi.n	80029c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029ac:	2200      	movs	r2, #0
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029b4:	f001 fe9b 	bl	80046ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029b8:	4a06      	ldr	r2, [pc, #24]	; (80029d4 <HAL_InitTick+0x68>)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	e000      	b.n	80029c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	24000038 	.word	0x24000038
 80029d0:	2400002c 	.word	0x2400002c
 80029d4:	24000034 	.word	0x24000034

080029d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_IncTick+0x20>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_IncTick+0x24>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4413      	add	r3, r2
 80029e8:	4a04      	ldr	r2, [pc, #16]	; (80029fc <HAL_IncTick+0x24>)
 80029ea:	6013      	str	r3, [r2, #0]
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	24000038 	.word	0x24000038
 80029fc:	24000618 	.word	0x24000618

08002a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return uwTick;
 8002a04:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <HAL_GetTick+0x14>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	24000618 	.word	0x24000618

08002a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a20:	f7ff ffee 	bl	8002a00 <HAL_GetTick>
 8002a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a30:	d005      	beq.n	8002a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a32:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <HAL_Delay+0x44>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a3e:	bf00      	nop
 8002a40:	f7ff ffde 	bl	8002a00 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d8f7      	bhi.n	8002a40 <HAL_Delay+0x28>
  {
  }
}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	24000038 	.word	0x24000038

08002a60 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HAL_SuspendTick+0x1c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a04      	ldr	r2, [pc, #16]	; (8002a7c <HAL_SuspendTick+0x1c>)
 8002a6a:	f023 0302 	bic.w	r3, r3, #2
 8002a6e:	6013      	str	r3, [r2, #0]
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	e000e010 	.word	0xe000e010

08002a80 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002a84:	4b03      	ldr	r3, [pc, #12]	; (8002a94 <HAL_GetREVID+0x14>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	0c1b      	lsrs	r3, r3, #16
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	5c001000 	.word	0x5c001000

08002a98 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002aa2:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	401a      	ands	r2, r3
 8002aac:	4904      	ldr	r1, [pc, #16]	; (8002ac0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	58000400 	.word	0x58000400

08002ac4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	609a      	str	r2, [r3, #8]
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	609a      	str	r2, [r3, #8]
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	3360      	adds	r3, #96	; 0x60
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002b60:	bf00      	nop
 8002b62:	371c      	adds	r7, #28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f003 031f 	and.w	r3, r3, #31
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	611a      	str	r2, [r3, #16]
}
 8002b92:	bf00      	nop
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b087      	sub	sp, #28
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	3360      	adds	r3, #96	; 0x60
 8002bae:	461a      	mov	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	601a      	str	r2, [r3, #0]
  }
}
 8002bc8:	bf00      	nop
 8002bca:	371c      	adds	r7, #28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002be8:	2301      	movs	r3, #1
 8002bea:	e000      	b.n	8002bee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b087      	sub	sp, #28
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	60f8      	str	r0, [r7, #12]
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	3330      	adds	r3, #48	; 0x30
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	0a1b      	lsrs	r3, r3, #8
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	4413      	add	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	f003 031f 	and.w	r3, r3, #31
 8002c24:	211f      	movs	r1, #31
 8002c26:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	401a      	ands	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	0e9b      	lsrs	r3, r3, #26
 8002c32:	f003 011f 	and.w	r1, r3, #31
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c40:	431a      	orrs	r2, r3
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c46:	bf00      	nop
 8002c48:	371c      	adds	r7, #28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f023 0203 	bic.w	r2, r3, #3
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	60da      	str	r2, [r3, #12]
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	3314      	adds	r3, #20
 8002c88:	461a      	mov	r2, r3
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	0e5b      	lsrs	r3, r3, #25
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	4413      	add	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	0d1b      	lsrs	r3, r3, #20
 8002ca0:	f003 031f 	and.w	r3, r3, #31
 8002ca4:	2107      	movs	r1, #7
 8002ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	401a      	ands	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	0d1b      	lsrs	r3, r3, #20
 8002cb2:	f003 031f 	and.w	r3, r3, #31
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002cc2:	bf00      	nop
 8002cc4:	371c      	adds	r7, #28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	401a      	ands	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f003 0318 	and.w	r3, r3, #24
 8002cf2:	4908      	ldr	r1, [pc, #32]	; (8002d14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002cf4:	40d9      	lsrs	r1, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	400b      	ands	r3, r1
 8002cfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002d06:	bf00      	nop
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	000fffff 	.word	0x000fffff

08002d18 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 031f 	and.w	r3, r3, #31
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6093      	str	r3, [r2, #8]
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	5fffffc0 	.word	0x5fffffc0

08002d58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d6c:	d101      	bne.n	8002d72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <LL_ADC_EnableInternalRegulator+0x24>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	6fffffc0 	.word	0x6fffffc0

08002da8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dbc:	d101      	bne.n	8002dc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <LL_ADC_Enable+0x24>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	f043 0201 	orr.w	r2, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	7fffffc0 	.word	0x7fffffc0

08002df8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <LL_ADC_Disable+0x24>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	f043 0202 	orr.w	r2, r3, #2
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	7fffffc0 	.word	0x7fffffc0

08002e20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <LL_ADC_IsEnabled+0x18>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <LL_ADC_IsEnabled+0x1a>
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d101      	bne.n	8002e5e <LL_ADC_IsDisableOngoing+0x18>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <LL_ADC_IsDisableOngoing+0x1a>
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <LL_ADC_REG_StartConversion+0x24>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	f043 0204 	orr.w	r2, r3, #4
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	7fffffc0 	.word	0x7fffffc0

08002e94 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <LL_ADC_REG_StopConversion+0x24>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	f043 0210 	orr.w	r2, r3, #16
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	7fffffc0 	.word	0x7fffffc0

08002ebc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d101      	bne.n	8002ed4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
	...

08002ee4 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <LL_ADC_INJ_StopConversion+0x24>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	f043 0220 	orr.w	r2, r3, #32
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	7fffffc0 	.word	0x7fffffc0

08002f0c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d101      	bne.n	8002f24 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
	...

08002f34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f34:	b590      	push	{r4, r7, lr}
 8002f36:	b089      	sub	sp, #36	; 0x24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e18f      	b.n	800326e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d109      	bne.n	8002f70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7fe ffc1 	bl	8001ee4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff feef 	bl	8002d58 <LL_ADC_IsDeepPowerDownEnabled>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d004      	beq.n	8002f8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff fed5 	bl	8002d34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff ff0a 	bl	8002da8 <LL_ADC_IsInternalRegulatorEnabled>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d114      	bne.n	8002fc4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff feee 	bl	8002d80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fa4:	4b87      	ldr	r3, [pc, #540]	; (80031c4 <HAL_ADC_Init+0x290>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	099b      	lsrs	r3, r3, #6
 8002faa:	4a87      	ldr	r2, [pc, #540]	; (80031c8 <HAL_ADC_Init+0x294>)
 8002fac:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb0:	099b      	lsrs	r3, r3, #6
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fb6:	e002      	b.n	8002fbe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f9      	bne.n	8002fb8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff feed 	bl	8002da8 <LL_ADC_IsInternalRegulatorEnabled>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10d      	bne.n	8002ff0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd8:	f043 0210 	orr.w	r2, r3, #16
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe4:	f043 0201 	orr.w	r2, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff ff61 	bl	8002ebc <LL_ADC_REG_IsConversionOngoing>
 8002ffa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2b00      	cmp	r3, #0
 8003006:	f040 8129 	bne.w	800325c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2b00      	cmp	r3, #0
 800300e:	f040 8125 	bne.w	800325c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003016:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800301a:	f043 0202 	orr.w	r2, r3, #2
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fefa 	bl	8002e20 <LL_ADC_IsEnabled>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d136      	bne.n	80030a0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a65      	ldr	r2, [pc, #404]	; (80031cc <HAL_ADC_Init+0x298>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d004      	beq.n	8003046 <HAL_ADC_Init+0x112>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a63      	ldr	r2, [pc, #396]	; (80031d0 <HAL_ADC_Init+0x29c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d10e      	bne.n	8003064 <HAL_ADC_Init+0x130>
 8003046:	4861      	ldr	r0, [pc, #388]	; (80031cc <HAL_ADC_Init+0x298>)
 8003048:	f7ff feea 	bl	8002e20 <LL_ADC_IsEnabled>
 800304c:	4604      	mov	r4, r0
 800304e:	4860      	ldr	r0, [pc, #384]	; (80031d0 <HAL_ADC_Init+0x29c>)
 8003050:	f7ff fee6 	bl	8002e20 <LL_ADC_IsEnabled>
 8003054:	4603      	mov	r3, r0
 8003056:	4323      	orrs	r3, r4
 8003058:	2b00      	cmp	r3, #0
 800305a:	bf0c      	ite	eq
 800305c:	2301      	moveq	r3, #1
 800305e:	2300      	movne	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	e008      	b.n	8003076 <HAL_ADC_Init+0x142>
 8003064:	485b      	ldr	r0, [pc, #364]	; (80031d4 <HAL_ADC_Init+0x2a0>)
 8003066:	f7ff fedb 	bl	8002e20 <LL_ADC_IsEnabled>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf0c      	ite	eq
 8003070:	2301      	moveq	r3, #1
 8003072:	2300      	movne	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d012      	beq.n	80030a0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a53      	ldr	r2, [pc, #332]	; (80031cc <HAL_ADC_Init+0x298>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d004      	beq.n	800308e <HAL_ADC_Init+0x15a>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a51      	ldr	r2, [pc, #324]	; (80031d0 <HAL_ADC_Init+0x29c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d101      	bne.n	8003092 <HAL_ADC_Init+0x15e>
 800308e:	4a52      	ldr	r2, [pc, #328]	; (80031d8 <HAL_ADC_Init+0x2a4>)
 8003090:	e000      	b.n	8003094 <HAL_ADC_Init+0x160>
 8003092:	4a52      	ldr	r2, [pc, #328]	; (80031dc <HAL_ADC_Init+0x2a8>)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4619      	mov	r1, r3
 800309a:	4610      	mov	r0, r2
 800309c:	f7ff fd12 	bl	8002ac4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80030a0:	f7ff fcee 	bl	8002a80 <HAL_GetREVID>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d914      	bls.n	80030d8 <HAL_ADC_Init+0x1a4>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2b10      	cmp	r3, #16
 80030b4:	d110      	bne.n	80030d8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	7d5b      	ldrb	r3, [r3, #21]
 80030ba:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030c0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80030c6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	7f1b      	ldrb	r3, [r3, #28]
 80030cc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80030ce:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030d0:	f043 030c 	orr.w	r3, r3, #12
 80030d4:	61bb      	str	r3, [r7, #24]
 80030d6:	e00d      	b.n	80030f4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	7d5b      	ldrb	r3, [r3, #21]
 80030dc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030e2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80030e8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	7f1b      	ldrb	r3, [r3, #28]
 80030ee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030f0:	4313      	orrs	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	7f1b      	ldrb	r3, [r3, #28]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d106      	bne.n	800310a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	3b01      	subs	r3, #1
 8003102:	045b      	lsls	r3, r3, #17
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4313      	orrs	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	2b00      	cmp	r3, #0
 8003110:	d009      	beq.n	8003126 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	4b2c      	ldr	r3, [pc, #176]	; (80031e0 <HAL_ADC_Init+0x2ac>)
 800312e:	4013      	ands	r3, r2
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6812      	ldr	r2, [r2, #0]
 8003134:	69b9      	ldr	r1, [r7, #24]
 8003136:	430b      	orrs	r3, r1
 8003138:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff febc 	bl	8002ebc <LL_ADC_REG_IsConversionOngoing>
 8003144:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff fede 	bl	8002f0c <LL_ADC_INJ_IsConversionOngoing>
 8003150:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d15f      	bne.n	8003218 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d15c      	bne.n	8003218 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	7d1b      	ldrb	r3, [r3, #20]
 8003162:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	4b1c      	ldr	r3, [pc, #112]	; (80031e4 <HAL_ADC_Init+0x2b0>)
 8003174:	4013      	ands	r3, r2
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	69b9      	ldr	r1, [r7, #24]
 800317c:	430b      	orrs	r3, r1
 800317e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003186:	2b01      	cmp	r3, #1
 8003188:	d130      	bne.n	80031ec <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	4b14      	ldr	r3, [pc, #80]	; (80031e8 <HAL_ADC_Init+0x2b4>)
 8003198:	4013      	ands	r3, r2
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800319e:	3a01      	subs	r2, #1
 80031a0:	0411      	lsls	r1, r2, #16
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031a6:	4311      	orrs	r1, r2
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80031ac:	4311      	orrs	r1, r2
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80031b2:	430a      	orrs	r2, r1
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0201 	orr.w	r2, r2, #1
 80031be:	611a      	str	r2, [r3, #16]
 80031c0:	e01c      	b.n	80031fc <HAL_ADC_Init+0x2c8>
 80031c2:	bf00      	nop
 80031c4:	2400002c 	.word	0x2400002c
 80031c8:	053e2d63 	.word	0x053e2d63
 80031cc:	40022000 	.word	0x40022000
 80031d0:	40022100 	.word	0x40022100
 80031d4:	58026000 	.word	0x58026000
 80031d8:	40022300 	.word	0x40022300
 80031dc:	58026300 	.word	0x58026300
 80031e0:	fff0c003 	.word	0xfff0c003
 80031e4:	ffffbffc 	.word	0xffffbffc
 80031e8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691a      	ldr	r2, [r3, #16]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0201 	bic.w	r2, r2, #1
 80031fa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 feea 	bl	8003fec <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d10c      	bne.n	800323a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	f023 010f 	bic.w	r1, r3, #15
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	1e5a      	subs	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
 8003238:	e007      	b.n	800324a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 020f 	bic.w	r2, r2, #15
 8003248:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324e:	f023 0303 	bic.w	r3, r3, #3
 8003252:	f043 0201 	orr.w	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	655a      	str	r2, [r3, #84]	; 0x54
 800325a:	e007      	b.n	800326c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003260:	f043 0210 	orr.w	r2, r3, #16
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800326c:	7ffb      	ldrb	r3, [r7, #31]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3724      	adds	r7, #36	; 0x24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd90      	pop	{r4, r7, pc}
 8003276:	bf00      	nop

08003278 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a55      	ldr	r2, [pc, #340]	; (80033e0 <HAL_ADC_Start_DMA+0x168>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d004      	beq.n	8003298 <HAL_ADC_Start_DMA+0x20>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a54      	ldr	r2, [pc, #336]	; (80033e4 <HAL_ADC_Start_DMA+0x16c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d101      	bne.n	800329c <HAL_ADC_Start_DMA+0x24>
 8003298:	4b53      	ldr	r3, [pc, #332]	; (80033e8 <HAL_ADC_Start_DMA+0x170>)
 800329a:	e000      	b.n	800329e <HAL_ADC_Start_DMA+0x26>
 800329c:	4b53      	ldr	r3, [pc, #332]	; (80033ec <HAL_ADC_Start_DMA+0x174>)
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff fd3a 	bl	8002d18 <LL_ADC_GetMultimode>
 80032a4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff fe06 	bl	8002ebc <LL_ADC_REG_IsConversionOngoing>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f040 808c 	bne.w	80033d0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_ADC_Start_DMA+0x4e>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e087      	b.n	80033d6 <HAL_ADC_Start_DMA+0x15e>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	2b05      	cmp	r3, #5
 80032d8:	d002      	beq.n	80032e0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	2b09      	cmp	r3, #9
 80032de:	d170      	bne.n	80033c2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 fd05 	bl	8003cf0 <ADC_Enable>
 80032e6:	4603      	mov	r3, r0
 80032e8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80032ea:	7dfb      	ldrb	r3, [r7, #23]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d163      	bne.n	80033b8 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032f4:	4b3e      	ldr	r3, [pc, #248]	; (80033f0 <HAL_ADC_Start_DMA+0x178>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a37      	ldr	r2, [pc, #220]	; (80033e4 <HAL_ADC_Start_DMA+0x16c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d002      	beq.n	8003310 <HAL_ADC_Start_DMA+0x98>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	e000      	b.n	8003312 <HAL_ADC_Start_DMA+0x9a>
 8003310:	4b33      	ldr	r3, [pc, #204]	; (80033e0 <HAL_ADC_Start_DMA+0x168>)
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	6812      	ldr	r2, [r2, #0]
 8003316:	4293      	cmp	r3, r2
 8003318:	d002      	beq.n	8003320 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d105      	bne.n	800332c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003324:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d006      	beq.n	8003346 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333c:	f023 0206 	bic.w	r2, r3, #6
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	659a      	str	r2, [r3, #88]	; 0x58
 8003344:	e002      	b.n	800334c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003350:	4a28      	ldr	r2, [pc, #160]	; (80033f4 <HAL_ADC_Start_DMA+0x17c>)
 8003352:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003358:	4a27      	ldr	r2, [pc, #156]	; (80033f8 <HAL_ADC_Start_DMA+0x180>)
 800335a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003360:	4a26      	ldr	r2, [pc, #152]	; (80033fc <HAL_ADC_Start_DMA+0x184>)
 8003362:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	221c      	movs	r2, #28
 800336a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0210 	orr.w	r2, r2, #16
 8003382:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	4619      	mov	r1, r3
 800338e:	4610      	mov	r0, r2
 8003390:	f7ff fc5f 	bl	8002c52 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3340      	adds	r3, #64	; 0x40
 800339e:	4619      	mov	r1, r3
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f001 fefc 	bl	80051a0 <HAL_DMA_Start_IT>
 80033a8:	4603      	mov	r3, r0
 80033aa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff fd5b 	bl	8002e6c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80033b6:	e00d      	b.n	80033d4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80033c0:	e008      	b.n	80033d4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80033ce:	e001      	b.n	80033d4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033d0:	2302      	movs	r3, #2
 80033d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80033d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40022000 	.word	0x40022000
 80033e4:	40022100 	.word	0x40022100
 80033e8:	40022300 	.word	0x40022300
 80033ec:	58026300 	.word	0x58026300
 80033f0:	fffff0fe 	.word	0xfffff0fe
 80033f4:	08003ec3 	.word	0x08003ec3
 80033f8:	08003f9b 	.word	0x08003f9b
 80033fc:	08003fb7 	.word	0x08003fb7

08003400 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_ADC_Stop_DMA+0x16>
 8003412:	2302      	movs	r3, #2
 8003414:	e04f      	b.n	80034b6 <HAL_ADC_Stop_DMA+0xb6>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800341e:	2103      	movs	r1, #3
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 fba9 	bl	8003b78 <ADC_ConversionStop>
 8003426:	4603      	mov	r3, r0
 8003428:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d13d      	bne.n	80034ac <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0203 	bic.w	r2, r2, #3
 800343e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003444:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d10f      	bne.n	800346e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003452:	4618      	mov	r0, r3
 8003454:	f002 f90e 	bl	8005674 <HAL_DMA_Abort>
 8003458:	4603      	mov	r3, r0
 800345a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800345c:	7bfb      	ldrb	r3, [r7, #15]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d005      	beq.n	800346e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003466:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0210 	bic.w	r2, r2, #16
 800347c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800347e:	7bfb      	ldrb	r3, [r7, #15]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d105      	bne.n	8003490 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fcbd 	bl	8003e04 <ADC_Disable>
 800348a:	4603      	mov	r3, r0
 800348c:	73fb      	strb	r3, [r7, #15]
 800348e:	e002      	b.n	8003496 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fcb7 	bl	8003e04 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003496:	7bfb      	ldrb	r3, [r7, #15]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d107      	bne.n	80034ac <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034a0:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <HAL_ADC_Stop_DMA+0xc0>)
 80034a2:	4013      	ands	r3, r2
 80034a4:	f043 0201 	orr.w	r2, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	ffffeefe 	.word	0xffffeefe

080034c4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b0a1      	sub	sp, #132	; 0x84
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	4a9d      	ldr	r2, [pc, #628]	; (8003768 <HAL_ADC_ConfigChannel+0x290>)
 80034f2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <HAL_ADC_ConfigChannel+0x2a>
 80034fe:	2302      	movs	r3, #2
 8003500:	e321      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x66e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff fcd4 	bl	8002ebc <LL_ADC_REG_IsConversionOngoing>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	f040 8306 	bne.w	8003b28 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003524:	2b00      	cmp	r3, #0
 8003526:	d108      	bne.n	800353a <HAL_ADC_ConfigChannel+0x62>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	0e9b      	lsrs	r3, r3, #26
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	2201      	movs	r2, #1
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	e016      	b.n	8003568 <HAL_ADC_ConfigChannel+0x90>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003540:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003542:	fa93 f3a3 	rbit	r3, r3
 8003546:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003548:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800354a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800354c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003552:	2320      	movs	r3, #32
 8003554:	e003      	b.n	800355e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003556:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003558:	fab3 f383 	clz	r3, r3
 800355c:	b2db      	uxtb	r3, r3
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	2201      	movs	r2, #1
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	69d1      	ldr	r1, [r2, #28]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6812      	ldr	r2, [r2, #0]
 8003572:	430b      	orrs	r3, r1
 8003574:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	6859      	ldr	r1, [r3, #4]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	f7ff fb39 	bl	8002bfa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fc95 	bl	8002ebc <LL_ADC_REG_IsConversionOngoing>
 8003592:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff fcb7 	bl	8002f0c <LL_ADC_INJ_IsConversionOngoing>
 800359e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f040 80b3 	bne.w	800370e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f040 80af 	bne.w	800370e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6818      	ldr	r0, [r3, #0]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	6819      	ldr	r1, [r3, #0]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	461a      	mov	r2, r3
 80035be:	f7ff fb5b 	bl	8002c78 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80035c2:	4b6a      	ldr	r3, [pc, #424]	; (800376c <HAL_ADC_ConfigChannel+0x294>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80035ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035ce:	d10b      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x110>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	695a      	ldr	r2, [r3, #20]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	089b      	lsrs	r3, r3, #2
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	e01d      	b.n	8003624 <HAL_ADC_ConfigChannel+0x14c>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f003 0310 	and.w	r3, r3, #16
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10b      	bne.n	800360e <HAL_ADC_ConfigChannel+0x136>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	695a      	ldr	r2, [r3, #20]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	089b      	lsrs	r3, r3, #2
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	e00a      	b.n	8003624 <HAL_ADC_ConfigChannel+0x14c>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	695a      	ldr	r2, [r3, #20]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	089b      	lsrs	r3, r3, #2
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	2b04      	cmp	r3, #4
 800362c:	d027      	beq.n	800367e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	6919      	ldr	r1, [r3, #16]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800363c:	f7ff fa76 	bl	8002b2c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6818      	ldr	r0, [r3, #0]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	6919      	ldr	r1, [r3, #16]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	7e5b      	ldrb	r3, [r3, #25]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d102      	bne.n	8003656 <HAL_ADC_ConfigChannel+0x17e>
 8003650:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003654:	e000      	b.n	8003658 <HAL_ADC_ConfigChannel+0x180>
 8003656:	2300      	movs	r3, #0
 8003658:	461a      	mov	r2, r3
 800365a:	f7ff faa0 	bl	8002b9e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	6919      	ldr	r1, [r3, #16]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	7e1b      	ldrb	r3, [r3, #24]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d102      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x19c>
 800366e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003672:	e000      	b.n	8003676 <HAL_ADC_ConfigChannel+0x19e>
 8003674:	2300      	movs	r3, #0
 8003676:	461a      	mov	r2, r3
 8003678:	f7ff fa78 	bl	8002b6c <LL_ADC_SetDataRightShift>
 800367c:	e047      	b.n	800370e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003684:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	069b      	lsls	r3, r3, #26
 800368e:	429a      	cmp	r2, r3
 8003690:	d107      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036a0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	069b      	lsls	r3, r3, #26
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d107      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036c4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	069b      	lsls	r3, r3, #26
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d107      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036e8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	069b      	lsls	r3, r3, #26
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d107      	bne.n	800370e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800370c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff fb84 	bl	8002e20 <LL_ADC_IsEnabled>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	f040 820d 	bne.w	8003b3a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6818      	ldr	r0, [r3, #0]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	6819      	ldr	r1, [r3, #0]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	461a      	mov	r2, r3
 800372e:	f7ff facf 	bl	8002cd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	4a0c      	ldr	r2, [pc, #48]	; (8003768 <HAL_ADC_ConfigChannel+0x290>)
 8003738:	4293      	cmp	r3, r2
 800373a:	f040 8133 	bne.w	80039a4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800374a:	2b00      	cmp	r3, #0
 800374c:	d110      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x298>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	0e9b      	lsrs	r3, r3, #26
 8003754:	3301      	adds	r3, #1
 8003756:	f003 031f 	and.w	r3, r3, #31
 800375a:	2b09      	cmp	r3, #9
 800375c:	bf94      	ite	ls
 800375e:	2301      	movls	r3, #1
 8003760:	2300      	movhi	r3, #0
 8003762:	b2db      	uxtb	r3, r3
 8003764:	e01e      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x2cc>
 8003766:	bf00      	nop
 8003768:	47ff0000 	.word	0x47ff0000
 800376c:	5c001000 	.word	0x5c001000
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003776:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003778:	fa93 f3a3 	rbit	r3, r3
 800377c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800377e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003780:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003788:	2320      	movs	r3, #32
 800378a:	e003      	b.n	8003794 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800378c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800378e:	fab3 f383 	clz	r3, r3
 8003792:	b2db      	uxtb	r3, r3
 8003794:	3301      	adds	r3, #1
 8003796:	f003 031f 	and.w	r3, r3, #31
 800379a:	2b09      	cmp	r3, #9
 800379c:	bf94      	ite	ls
 800379e:	2301      	movls	r3, #1
 80037a0:	2300      	movhi	r3, #0
 80037a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d079      	beq.n	800389c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d107      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x2ec>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	0e9b      	lsrs	r3, r3, #26
 80037ba:	3301      	adds	r3, #1
 80037bc:	069b      	lsls	r3, r3, #26
 80037be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037c2:	e015      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x318>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037cc:	fa93 f3a3 	rbit	r3, r3
 80037d0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80037d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037d4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80037d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80037dc:	2320      	movs	r3, #32
 80037de:	e003      	b.n	80037e8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80037e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037e2:	fab3 f383 	clz	r3, r3
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	3301      	adds	r3, #1
 80037ea:	069b      	lsls	r3, r3, #26
 80037ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d109      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x338>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	0e9b      	lsrs	r3, r3, #26
 8003802:	3301      	adds	r3, #1
 8003804:	f003 031f 	and.w	r3, r3, #31
 8003808:	2101      	movs	r1, #1
 800380a:	fa01 f303 	lsl.w	r3, r1, r3
 800380e:	e017      	b.n	8003840 <HAL_ADC_ConfigChannel+0x368>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003818:	fa93 f3a3 	rbit	r3, r3
 800381c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800381e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003820:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003828:	2320      	movs	r3, #32
 800382a:	e003      	b.n	8003834 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800382c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800382e:	fab3 f383 	clz	r3, r3
 8003832:	b2db      	uxtb	r3, r3
 8003834:	3301      	adds	r3, #1
 8003836:	f003 031f 	and.w	r3, r3, #31
 800383a:	2101      	movs	r1, #1
 800383c:	fa01 f303 	lsl.w	r3, r1, r3
 8003840:	ea42 0103 	orr.w	r1, r2, r3
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10a      	bne.n	8003866 <HAL_ADC_ConfigChannel+0x38e>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	0e9b      	lsrs	r3, r3, #26
 8003856:	3301      	adds	r3, #1
 8003858:	f003 021f 	and.w	r2, r3, #31
 800385c:	4613      	mov	r3, r2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	051b      	lsls	r3, r3, #20
 8003864:	e018      	b.n	8003898 <HAL_ADC_ConfigChannel+0x3c0>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386e:	fa93 f3a3 	rbit	r3, r3
 8003872:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003876:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800387e:	2320      	movs	r3, #32
 8003880:	e003      	b.n	800388a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003884:	fab3 f383 	clz	r3, r3
 8003888:	b2db      	uxtb	r3, r3
 800388a:	3301      	adds	r3, #1
 800388c:	f003 021f 	and.w	r2, r3, #31
 8003890:	4613      	mov	r3, r2
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	4413      	add	r3, r2
 8003896:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003898:	430b      	orrs	r3, r1
 800389a:	e07e      	b.n	800399a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d107      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x3e0>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	0e9b      	lsrs	r3, r3, #26
 80038ae:	3301      	adds	r3, #1
 80038b0:	069b      	lsls	r3, r3, #26
 80038b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038b6:	e015      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x40c>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c0:	fa93 f3a3 	rbit	r3, r3
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80038ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80038d0:	2320      	movs	r3, #32
 80038d2:	e003      	b.n	80038dc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80038d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d6:	fab3 f383 	clz	r3, r3
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	3301      	adds	r3, #1
 80038de:	069b      	lsls	r3, r3, #26
 80038e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d109      	bne.n	8003904 <HAL_ADC_ConfigChannel+0x42c>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	0e9b      	lsrs	r3, r3, #26
 80038f6:	3301      	adds	r3, #1
 80038f8:	f003 031f 	and.w	r3, r3, #31
 80038fc:	2101      	movs	r1, #1
 80038fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003902:	e017      	b.n	8003934 <HAL_ADC_ConfigChannel+0x45c>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	fa93 f3a3 	rbit	r3, r3
 8003910:	61bb      	str	r3, [r7, #24]
  return result;
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800391c:	2320      	movs	r3, #32
 800391e:	e003      	b.n	8003928 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	fab3 f383 	clz	r3, r3
 8003926:	b2db      	uxtb	r3, r3
 8003928:	3301      	adds	r3, #1
 800392a:	f003 031f 	and.w	r3, r3, #31
 800392e:	2101      	movs	r1, #1
 8003930:	fa01 f303 	lsl.w	r3, r1, r3
 8003934:	ea42 0103 	orr.w	r1, r2, r3
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10d      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x488>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	0e9b      	lsrs	r3, r3, #26
 800394a:	3301      	adds	r3, #1
 800394c:	f003 021f 	and.w	r2, r3, #31
 8003950:	4613      	mov	r3, r2
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	4413      	add	r3, r2
 8003956:	3b1e      	subs	r3, #30
 8003958:	051b      	lsls	r3, r3, #20
 800395a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800395e:	e01b      	b.n	8003998 <HAL_ADC_ConfigChannel+0x4c0>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	fa93 f3a3 	rbit	r3, r3
 800396c:	60fb      	str	r3, [r7, #12]
  return result;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003978:	2320      	movs	r3, #32
 800397a:	e003      	b.n	8003984 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	fab3 f383 	clz	r3, r3
 8003982:	b2db      	uxtb	r3, r3
 8003984:	3301      	adds	r3, #1
 8003986:	f003 021f 	and.w	r2, r3, #31
 800398a:	4613      	mov	r3, r2
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	4413      	add	r3, r2
 8003990:	3b1e      	subs	r3, #30
 8003992:	051b      	lsls	r3, r3, #20
 8003994:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003998:	430b      	orrs	r3, r1
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	6892      	ldr	r2, [r2, #8]
 800399e:	4619      	mov	r1, r3
 80039a0:	f7ff f96a 	bl	8002c78 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f280 80c6 	bge.w	8003b3a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a67      	ldr	r2, [pc, #412]	; (8003b50 <HAL_ADC_ConfigChannel+0x678>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d004      	beq.n	80039c2 <HAL_ADC_ConfigChannel+0x4ea>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a65      	ldr	r2, [pc, #404]	; (8003b54 <HAL_ADC_ConfigChannel+0x67c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d101      	bne.n	80039c6 <HAL_ADC_ConfigChannel+0x4ee>
 80039c2:	4b65      	ldr	r3, [pc, #404]	; (8003b58 <HAL_ADC_ConfigChannel+0x680>)
 80039c4:	e000      	b.n	80039c8 <HAL_ADC_ConfigChannel+0x4f0>
 80039c6:	4b65      	ldr	r3, [pc, #404]	; (8003b5c <HAL_ADC_ConfigChannel+0x684>)
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff f8a1 	bl	8002b10 <LL_ADC_GetCommonPathInternalCh>
 80039ce:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a5e      	ldr	r2, [pc, #376]	; (8003b50 <HAL_ADC_ConfigChannel+0x678>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d004      	beq.n	80039e4 <HAL_ADC_ConfigChannel+0x50c>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a5d      	ldr	r2, [pc, #372]	; (8003b54 <HAL_ADC_ConfigChannel+0x67c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d10e      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x52a>
 80039e4:	485a      	ldr	r0, [pc, #360]	; (8003b50 <HAL_ADC_ConfigChannel+0x678>)
 80039e6:	f7ff fa1b 	bl	8002e20 <LL_ADC_IsEnabled>
 80039ea:	4604      	mov	r4, r0
 80039ec:	4859      	ldr	r0, [pc, #356]	; (8003b54 <HAL_ADC_ConfigChannel+0x67c>)
 80039ee:	f7ff fa17 	bl	8002e20 <LL_ADC_IsEnabled>
 80039f2:	4603      	mov	r3, r0
 80039f4:	4323      	orrs	r3, r4
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	bf0c      	ite	eq
 80039fa:	2301      	moveq	r3, #1
 80039fc:	2300      	movne	r3, #0
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	e008      	b.n	8003a14 <HAL_ADC_ConfigChannel+0x53c>
 8003a02:	4857      	ldr	r0, [pc, #348]	; (8003b60 <HAL_ADC_ConfigChannel+0x688>)
 8003a04:	f7ff fa0c 	bl	8002e20 <LL_ADC_IsEnabled>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	bf0c      	ite	eq
 8003a0e:	2301      	moveq	r3, #1
 8003a10:	2300      	movne	r3, #0
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d07d      	beq.n	8003b14 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a51      	ldr	r2, [pc, #324]	; (8003b64 <HAL_ADC_ConfigChannel+0x68c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d130      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x5ac>
 8003a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d12b      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a4b      	ldr	r2, [pc, #300]	; (8003b60 <HAL_ADC_ConfigChannel+0x688>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	f040 8081 	bne.w	8003b3a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a44      	ldr	r2, [pc, #272]	; (8003b50 <HAL_ADC_ConfigChannel+0x678>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d004      	beq.n	8003a4c <HAL_ADC_ConfigChannel+0x574>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a43      	ldr	r2, [pc, #268]	; (8003b54 <HAL_ADC_ConfigChannel+0x67c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d101      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x578>
 8003a4c:	4a42      	ldr	r2, [pc, #264]	; (8003b58 <HAL_ADC_ConfigChannel+0x680>)
 8003a4e:	e000      	b.n	8003a52 <HAL_ADC_ConfigChannel+0x57a>
 8003a50:	4a42      	ldr	r2, [pc, #264]	; (8003b5c <HAL_ADC_ConfigChannel+0x684>)
 8003a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	f7ff f845 	bl	8002aea <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a60:	4b41      	ldr	r3, [pc, #260]	; (8003b68 <HAL_ADC_ConfigChannel+0x690>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	099b      	lsrs	r3, r3, #6
 8003a66:	4a41      	ldr	r2, [pc, #260]	; (8003b6c <HAL_ADC_ConfigChannel+0x694>)
 8003a68:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6c:	099b      	lsrs	r3, r3, #6
 8003a6e:	3301      	adds	r3, #1
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003a74:	e002      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f9      	bne.n	8003a76 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a82:	e05a      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a39      	ldr	r2, [pc, #228]	; (8003b70 <HAL_ADC_ConfigChannel+0x698>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d11e      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x5f4>
 8003a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d119      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a30      	ldr	r2, [pc, #192]	; (8003b60 <HAL_ADC_ConfigChannel+0x688>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d14b      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a2a      	ldr	r2, [pc, #168]	; (8003b50 <HAL_ADC_ConfigChannel+0x678>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d004      	beq.n	8003ab6 <HAL_ADC_ConfigChannel+0x5de>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a28      	ldr	r2, [pc, #160]	; (8003b54 <HAL_ADC_ConfigChannel+0x67c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d101      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x5e2>
 8003ab6:	4a28      	ldr	r2, [pc, #160]	; (8003b58 <HAL_ADC_ConfigChannel+0x680>)
 8003ab8:	e000      	b.n	8003abc <HAL_ADC_ConfigChannel+0x5e4>
 8003aba:	4a28      	ldr	r2, [pc, #160]	; (8003b5c <HAL_ADC_ConfigChannel+0x684>)
 8003abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	f7ff f810 	bl	8002aea <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003aca:	e036      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a28      	ldr	r2, [pc, #160]	; (8003b74 <HAL_ADC_ConfigChannel+0x69c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d131      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x662>
 8003ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d12c      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1e      	ldr	r2, [pc, #120]	; (8003b60 <HAL_ADC_ConfigChannel+0x688>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d127      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a18      	ldr	r2, [pc, #96]	; (8003b50 <HAL_ADC_ConfigChannel+0x678>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d004      	beq.n	8003afe <HAL_ADC_ConfigChannel+0x626>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a16      	ldr	r2, [pc, #88]	; (8003b54 <HAL_ADC_ConfigChannel+0x67c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d101      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x62a>
 8003afe:	4a16      	ldr	r2, [pc, #88]	; (8003b58 <HAL_ADC_ConfigChannel+0x680>)
 8003b00:	e000      	b.n	8003b04 <HAL_ADC_ConfigChannel+0x62c>
 8003b02:	4a16      	ldr	r2, [pc, #88]	; (8003b5c <HAL_ADC_ConfigChannel+0x684>)
 8003b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	f7fe ffec 	bl	8002aea <LL_ADC_SetCommonPathInternalCh>
 8003b12:	e012      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b18:	f043 0220 	orr.w	r2, r3, #32
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003b26:	e008      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2c:	f043 0220 	orr.w	r2, r3, #32
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b42:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3784      	adds	r7, #132	; 0x84
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd90      	pop	{r4, r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40022000 	.word	0x40022000
 8003b54:	40022100 	.word	0x40022100
 8003b58:	40022300 	.word	0x40022300
 8003b5c:	58026300 	.word	0x58026300
 8003b60:	58026000 	.word	0x58026000
 8003b64:	cb840000 	.word	0xcb840000
 8003b68:	2400002c 	.word	0x2400002c
 8003b6c:	053e2d63 	.word	0x053e2d63
 8003b70:	c7520000 	.word	0xc7520000
 8003b74:	cfb80000 	.word	0xcfb80000

08003b78 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff f994 	bl	8002ebc <LL_ADC_REG_IsConversionOngoing>
 8003b94:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff f9b6 	bl	8002f0c <LL_ADC_INJ_IsConversionOngoing>
 8003ba0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d103      	bne.n	8003bb0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 8098 	beq.w	8003ce0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d02a      	beq.n	8003c14 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	7d5b      	ldrb	r3, [r3, #21]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d126      	bne.n	8003c14 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	7d1b      	ldrb	r3, [r3, #20]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d122      	bne.n	8003c14 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003bd2:	e014      	b.n	8003bfe <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	4a45      	ldr	r2, [pc, #276]	; (8003cec <ADC_ConversionStop+0x174>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d90d      	bls.n	8003bf8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be0:	f043 0210 	orr.w	r2, r3, #16
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bec:	f043 0201 	orr.w	r2, r3, #1
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e074      	b.n	8003ce2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c08:	2b40      	cmp	r3, #64	; 0x40
 8003c0a:	d1e3      	bne.n	8003bd4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2240      	movs	r2, #64	; 0x40
 8003c12:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d014      	beq.n	8003c44 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff f94c 	bl	8002ebc <LL_ADC_REG_IsConversionOngoing>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00c      	beq.n	8003c44 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff f909 	bl	8002e46 <LL_ADC_IsDisableOngoing>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d104      	bne.n	8003c44 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff f928 	bl	8002e94 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d014      	beq.n	8003c74 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff f95c 	bl	8002f0c <LL_ADC_INJ_IsConversionOngoing>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00c      	beq.n	8003c74 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff f8f1 	bl	8002e46 <LL_ADC_IsDisableOngoing>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d104      	bne.n	8003c74 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff f938 	bl	8002ee4 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d005      	beq.n	8003c86 <ADC_ConversionStop+0x10e>
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	d105      	bne.n	8003c8c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003c80:	230c      	movs	r3, #12
 8003c82:	617b      	str	r3, [r7, #20]
        break;
 8003c84:	e005      	b.n	8003c92 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003c86:	2308      	movs	r3, #8
 8003c88:	617b      	str	r3, [r7, #20]
        break;
 8003c8a:	e002      	b.n	8003c92 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003c8c:	2304      	movs	r3, #4
 8003c8e:	617b      	str	r3, [r7, #20]
        break;
 8003c90:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003c92:	f7fe feb5 	bl	8002a00 <HAL_GetTick>
 8003c96:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c98:	e01b      	b.n	8003cd2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c9a:	f7fe feb1 	bl	8002a00 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b05      	cmp	r3, #5
 8003ca6:	d914      	bls.n	8003cd2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00d      	beq.n	8003cd2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cba:	f043 0210 	orr.w	r2, r3, #16
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc6:	f043 0201 	orr.w	r2, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e007      	b.n	8003ce2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1dc      	bne.n	8003c9a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3720      	adds	r7, #32
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	000cdbff 	.word	0x000cdbff

08003cf0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff f88f 	bl	8002e20 <LL_ADC_IsEnabled>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d16e      	bne.n	8003de6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	4b38      	ldr	r3, [pc, #224]	; (8003df0 <ADC_Enable+0x100>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00d      	beq.n	8003d32 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1a:	f043 0210 	orr.w	r2, r3, #16
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d26:	f043 0201 	orr.w	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e05a      	b.n	8003de8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff f84a 	bl	8002dd0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d3c:	f7fe fe60 	bl	8002a00 <HAL_GetTick>
 8003d40:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a2b      	ldr	r2, [pc, #172]	; (8003df4 <ADC_Enable+0x104>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d004      	beq.n	8003d56 <ADC_Enable+0x66>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a29      	ldr	r2, [pc, #164]	; (8003df8 <ADC_Enable+0x108>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d101      	bne.n	8003d5a <ADC_Enable+0x6a>
 8003d56:	4b29      	ldr	r3, [pc, #164]	; (8003dfc <ADC_Enable+0x10c>)
 8003d58:	e000      	b.n	8003d5c <ADC_Enable+0x6c>
 8003d5a:	4b29      	ldr	r3, [pc, #164]	; (8003e00 <ADC_Enable+0x110>)
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fe ffdb 	bl	8002d18 <LL_ADC_GetMultimode>
 8003d62:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a23      	ldr	r2, [pc, #140]	; (8003df8 <ADC_Enable+0x108>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d002      	beq.n	8003d74 <ADC_Enable+0x84>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	e000      	b.n	8003d76 <ADC_Enable+0x86>
 8003d74:	4b1f      	ldr	r3, [pc, #124]	; (8003df4 <ADC_Enable+0x104>)
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d02c      	beq.n	8003dd8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d130      	bne.n	8003de6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d84:	e028      	b.n	8003dd8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff f848 	bl	8002e20 <LL_ADC_IsEnabled>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d104      	bne.n	8003da0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff f818 	bl	8002dd0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003da0:	f7fe fe2e 	bl	8002a00 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d914      	bls.n	8003dd8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d00d      	beq.n	8003dd8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc0:	f043 0210 	orr.w	r2, r3, #16
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dcc:	f043 0201 	orr.w	r2, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e007      	b.n	8003de8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d1cf      	bne.n	8003d86 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	8000003f 	.word	0x8000003f
 8003df4:	40022000 	.word	0x40022000
 8003df8:	40022100 	.word	0x40022100
 8003dfc:	40022300 	.word	0x40022300
 8003e00:	58026300 	.word	0x58026300

08003e04 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff f818 	bl	8002e46 <LL_ADC_IsDisableOngoing>
 8003e16:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fe ffff 	bl	8002e20 <LL_ADC_IsEnabled>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d047      	beq.n	8003eb8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d144      	bne.n	8003eb8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 030d 	and.w	r3, r3, #13
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d10c      	bne.n	8003e56 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fe ffd9 	bl	8002df8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2203      	movs	r2, #3
 8003e4c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e4e:	f7fe fdd7 	bl	8002a00 <HAL_GetTick>
 8003e52:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e54:	e029      	b.n	8003eaa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5a:	f043 0210 	orr.w	r2, r3, #16
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e66:	f043 0201 	orr.w	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e023      	b.n	8003eba <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e72:	f7fe fdc5 	bl	8002a00 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d914      	bls.n	8003eaa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00d      	beq.n	8003eaa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e92:	f043 0210 	orr.w	r2, r3, #16
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9e:	f043 0201 	orr.w	r2, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e007      	b.n	8003eba <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1dc      	bne.n	8003e72 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d14b      	bne.n	8003f74 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d021      	beq.n	8003f3a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fe fe6a 	bl	8002bd4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d032      	beq.n	8003f6c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d12b      	bne.n	8003f6c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d11f      	bne.n	8003f6c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f30:	f043 0201 	orr.w	r2, r3, #1
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	655a      	str	r2, [r3, #84]	; 0x54
 8003f38:	e018      	b.n	8003f6c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d111      	bne.n	8003f6c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d105      	bne.n	8003f6c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f64:	f043 0201 	orr.w	r2, r3, #1
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f7fd ff2b 	bl	8001dc8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f72:	e00e      	b.n	8003f92 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f7ff fa9f 	bl	80034c4 <HAL_ADC_ErrorCallback>
}
 8003f86:	e004      	b.n	8003f92 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	4798      	blx	r3
}
 8003f92:	bf00      	nop
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f7fd fe9f 	bl	8001cec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fae:	bf00      	nop
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b084      	sub	sp, #16
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd4:	f043 0204 	orr.w	r2, r3, #4
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f7ff fa71 	bl	80034c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fe2:	bf00      	nop
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
	...

08003fec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a79      	ldr	r2, [pc, #484]	; (80041e0 <ADC_ConfigureBoostMode+0x1f4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d004      	beq.n	8004008 <ADC_ConfigureBoostMode+0x1c>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a78      	ldr	r2, [pc, #480]	; (80041e4 <ADC_ConfigureBoostMode+0x1f8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d109      	bne.n	800401c <ADC_ConfigureBoostMode+0x30>
 8004008:	4b77      	ldr	r3, [pc, #476]	; (80041e8 <ADC_ConfigureBoostMode+0x1fc>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004010:	2b00      	cmp	r3, #0
 8004012:	bf14      	ite	ne
 8004014:	2301      	movne	r3, #1
 8004016:	2300      	moveq	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	e008      	b.n	800402e <ADC_ConfigureBoostMode+0x42>
 800401c:	4b73      	ldr	r3, [pc, #460]	; (80041ec <ADC_ConfigureBoostMode+0x200>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004024:	2b00      	cmp	r3, #0
 8004026:	bf14      	ite	ne
 8004028:	2301      	movne	r3, #1
 800402a:	2300      	moveq	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d01c      	beq.n	800406c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004032:	f005 fad5 	bl	80095e0 <HAL_RCC_GetHCLKFreq>
 8004036:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004040:	d010      	beq.n	8004064 <ADC_ConfigureBoostMode+0x78>
 8004042:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004046:	d871      	bhi.n	800412c <ADC_ConfigureBoostMode+0x140>
 8004048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800404c:	d002      	beq.n	8004054 <ADC_ConfigureBoostMode+0x68>
 800404e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004052:	d16b      	bne.n	800412c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	0c1b      	lsrs	r3, r3, #16
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004060:	60fb      	str	r3, [r7, #12]
        break;
 8004062:	e066      	b.n	8004132 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	089b      	lsrs	r3, r3, #2
 8004068:	60fb      	str	r3, [r7, #12]
        break;
 800406a:	e062      	b.n	8004132 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800406c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004070:	f006 fa58 	bl	800a524 <HAL_RCCEx_GetPeriphCLKFreq>
 8004074:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800407e:	d051      	beq.n	8004124 <ADC_ConfigureBoostMode+0x138>
 8004080:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004084:	d854      	bhi.n	8004130 <ADC_ConfigureBoostMode+0x144>
 8004086:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800408a:	d047      	beq.n	800411c <ADC_ConfigureBoostMode+0x130>
 800408c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004090:	d84e      	bhi.n	8004130 <ADC_ConfigureBoostMode+0x144>
 8004092:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004096:	d03d      	beq.n	8004114 <ADC_ConfigureBoostMode+0x128>
 8004098:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800409c:	d848      	bhi.n	8004130 <ADC_ConfigureBoostMode+0x144>
 800409e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040a2:	d033      	beq.n	800410c <ADC_ConfigureBoostMode+0x120>
 80040a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040a8:	d842      	bhi.n	8004130 <ADC_ConfigureBoostMode+0x144>
 80040aa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80040ae:	d029      	beq.n	8004104 <ADC_ConfigureBoostMode+0x118>
 80040b0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80040b4:	d83c      	bhi.n	8004130 <ADC_ConfigureBoostMode+0x144>
 80040b6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80040ba:	d01a      	beq.n	80040f2 <ADC_ConfigureBoostMode+0x106>
 80040bc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80040c0:	d836      	bhi.n	8004130 <ADC_ConfigureBoostMode+0x144>
 80040c2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80040c6:	d014      	beq.n	80040f2 <ADC_ConfigureBoostMode+0x106>
 80040c8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80040cc:	d830      	bhi.n	8004130 <ADC_ConfigureBoostMode+0x144>
 80040ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040d2:	d00e      	beq.n	80040f2 <ADC_ConfigureBoostMode+0x106>
 80040d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040d8:	d82a      	bhi.n	8004130 <ADC_ConfigureBoostMode+0x144>
 80040da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80040de:	d008      	beq.n	80040f2 <ADC_ConfigureBoostMode+0x106>
 80040e0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80040e4:	d824      	bhi.n	8004130 <ADC_ConfigureBoostMode+0x144>
 80040e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040ea:	d002      	beq.n	80040f2 <ADC_ConfigureBoostMode+0x106>
 80040ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040f0:	d11e      	bne.n	8004130 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	0c9b      	lsrs	r3, r3, #18
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004100:	60fb      	str	r3, [r7, #12]
        break;
 8004102:	e016      	b.n	8004132 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	091b      	lsrs	r3, r3, #4
 8004108:	60fb      	str	r3, [r7, #12]
        break;
 800410a:	e012      	b.n	8004132 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	60fb      	str	r3, [r7, #12]
        break;
 8004112:	e00e      	b.n	8004132 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	099b      	lsrs	r3, r3, #6
 8004118:	60fb      	str	r3, [r7, #12]
        break;
 800411a:	e00a      	b.n	8004132 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	09db      	lsrs	r3, r3, #7
 8004120:	60fb      	str	r3, [r7, #12]
        break;
 8004122:	e006      	b.n	8004132 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	0a1b      	lsrs	r3, r3, #8
 8004128:	60fb      	str	r3, [r7, #12]
        break;
 800412a:	e002      	b.n	8004132 <ADC_ConfigureBoostMode+0x146>
        break;
 800412c:	bf00      	nop
 800412e:	e000      	b.n	8004132 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004130:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004132:	f7fe fca5 	bl	8002a80 <HAL_GetREVID>
 8004136:	4603      	mov	r3, r0
 8004138:	f241 0203 	movw	r2, #4099	; 0x1003
 800413c:	4293      	cmp	r3, r2
 800413e:	d815      	bhi.n	800416c <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4a2b      	ldr	r2, [pc, #172]	; (80041f0 <ADC_ConfigureBoostMode+0x204>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d908      	bls.n	800415a <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004156:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004158:	e03e      	b.n	80041d8 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004168:	609a      	str	r2, [r3, #8]
}
 800416a:	e035      	b.n	80041d8 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	085b      	lsrs	r3, r3, #1
 8004170:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4a1f      	ldr	r2, [pc, #124]	; (80041f4 <ADC_ConfigureBoostMode+0x208>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d808      	bhi.n	800418c <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004188:	609a      	str	r2, [r3, #8]
}
 800418a:	e025      	b.n	80041d8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4a1a      	ldr	r2, [pc, #104]	; (80041f8 <ADC_ConfigureBoostMode+0x20c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d80a      	bhi.n	80041aa <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041a6:	609a      	str	r2, [r3, #8]
}
 80041a8:	e016      	b.n	80041d8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4a13      	ldr	r2, [pc, #76]	; (80041fc <ADC_ConfigureBoostMode+0x210>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d80a      	bhi.n	80041c8 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c4:	609a      	str	r2, [r3, #8]
}
 80041c6:	e007      	b.n	80041d8 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689a      	ldr	r2, [r3, #8]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80041d6:	609a      	str	r2, [r3, #8]
}
 80041d8:	bf00      	nop
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40022000 	.word	0x40022000
 80041e4:	40022100 	.word	0x40022100
 80041e8:	40022300 	.word	0x40022300
 80041ec:	58026300 	.word	0x58026300
 80041f0:	01312d00 	.word	0x01312d00
 80041f4:	005f5e10 	.word	0x005f5e10
 80041f8:	00bebc20 	.word	0x00bebc20
 80041fc:	017d7840 	.word	0x017d7840

08004200 <LL_ADC_IsEnabled>:
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <LL_ADC_IsEnabled+0x18>
 8004214:	2301      	movs	r3, #1
 8004216:	e000      	b.n	800421a <LL_ADC_IsEnabled+0x1a>
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
	...

08004228 <LL_ADC_StartCalibration>:
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	4b09      	ldr	r3, [pc, #36]	; (8004260 <LL_ADC_StartCalibration+0x38>)
 800423a:	4013      	ands	r3, r2
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004248:	430a      	orrs	r2, r1
 800424a:	4313      	orrs	r3, r2
 800424c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	609a      	str	r2, [r3, #8]
}
 8004254:	bf00      	nop
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	3ffeffc0 	.word	0x3ffeffc0

08004264 <LL_ADC_IsCalibrationOnGoing>:
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004274:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004278:	d101      	bne.n	800427e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <LL_ADC_REG_IsConversionOngoing>:
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b04      	cmp	r3, #4
 800429e:	d101      	bne.n	80042a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
	...

080042b4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80042c0:	2300      	movs	r3, #0
 80042c2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <HAL_ADCEx_Calibration_Start+0x1e>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e04c      	b.n	800436c <HAL_ADCEx_Calibration_Start+0xb8>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f7ff fd92 	bl	8003e04 <ADC_Disable>
 80042e0:	4603      	mov	r3, r0
 80042e2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d135      	bne.n	8004356 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042ee:	4b21      	ldr	r3, [pc, #132]	; (8004374 <HAL_ADCEx_Calibration_Start+0xc0>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	f043 0202 	orr.w	r2, r3, #2
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff ff90 	bl	8004228 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004308:	e014      	b.n	8004334 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	3301      	adds	r3, #1
 800430e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	4a19      	ldr	r2, [pc, #100]	; (8004378 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d30d      	bcc.n	8004334 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431c:	f023 0312 	bic.w	r3, r3, #18
 8004320:	f043 0210 	orr.w	r2, r3, #16
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e01b      	b.n	800436c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff ff93 	bl	8004264 <LL_ADC_IsCalibrationOnGoing>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e2      	bne.n	800430a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004348:	f023 0303 	bic.w	r3, r3, #3
 800434c:	f043 0201 	orr.w	r2, r3, #1
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	655a      	str	r2, [r3, #84]	; 0x54
 8004354:	e005      	b.n	8004362 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435a:	f043 0210 	orr.w	r2, r3, #16
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800436a:	7dfb      	ldrb	r3, [r7, #23]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	ffffeefd 	.word	0xffffeefd
 8004378:	25c3f800 	.word	0x25c3f800

0800437c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800437c:	b590      	push	{r4, r7, lr}
 800437e:	b09f      	sub	sp, #124	; 0x7c
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004392:	2b01      	cmp	r3, #1
 8004394:	d101      	bne.n	800439a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004396:	2302      	movs	r3, #2
 8004398:	e0be      	b.n	8004518 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80043a2:	2300      	movs	r3, #0
 80043a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80043a6:	2300      	movs	r3, #0
 80043a8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a5c      	ldr	r2, [pc, #368]	; (8004520 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d102      	bne.n	80043ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80043b4:	4b5b      	ldr	r3, [pc, #364]	; (8004524 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80043b6:	60bb      	str	r3, [r7, #8]
 80043b8:	e001      	b.n	80043be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80043ba:	2300      	movs	r3, #0
 80043bc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10b      	bne.n	80043dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c8:	f043 0220 	orr.w	r2, r3, #32
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e09d      	b.n	8004518 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff ff54 	bl	800428c <LL_ADC_REG_IsConversionOngoing>
 80043e4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff ff4e 	bl	800428c <LL_ADC_REG_IsConversionOngoing>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d17f      	bne.n	80044f6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80043f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d17c      	bne.n	80044f6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a47      	ldr	r2, [pc, #284]	; (8004520 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d004      	beq.n	8004410 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a46      	ldr	r2, [pc, #280]	; (8004524 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d101      	bne.n	8004414 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004410:	4b45      	ldr	r3, [pc, #276]	; (8004528 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004412:	e000      	b.n	8004416 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004414:	4b45      	ldr	r3, [pc, #276]	; (800452c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004416:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d039      	beq.n	8004494 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	431a      	orrs	r2, r3
 800442e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004430:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a3a      	ldr	r2, [pc, #232]	; (8004520 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d004      	beq.n	8004446 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a38      	ldr	r2, [pc, #224]	; (8004524 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d10e      	bne.n	8004464 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004446:	4836      	ldr	r0, [pc, #216]	; (8004520 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004448:	f7ff feda 	bl	8004200 <LL_ADC_IsEnabled>
 800444c:	4604      	mov	r4, r0
 800444e:	4835      	ldr	r0, [pc, #212]	; (8004524 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004450:	f7ff fed6 	bl	8004200 <LL_ADC_IsEnabled>
 8004454:	4603      	mov	r3, r0
 8004456:	4323      	orrs	r3, r4
 8004458:	2b00      	cmp	r3, #0
 800445a:	bf0c      	ite	eq
 800445c:	2301      	moveq	r3, #1
 800445e:	2300      	movne	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	e008      	b.n	8004476 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004464:	4832      	ldr	r0, [pc, #200]	; (8004530 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004466:	f7ff fecb 	bl	8004200 <LL_ADC_IsEnabled>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	bf0c      	ite	eq
 8004470:	2301      	moveq	r3, #1
 8004472:	2300      	movne	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d047      	beq.n	800450a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800447a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	4b2d      	ldr	r3, [pc, #180]	; (8004534 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004480:	4013      	ands	r3, r2
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	6811      	ldr	r1, [r2, #0]
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	6892      	ldr	r2, [r2, #8]
 800448a:	430a      	orrs	r2, r1
 800448c:	431a      	orrs	r2, r3
 800448e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004490:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004492:	e03a      	b.n	800450a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800449c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800449e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a1e      	ldr	r2, [pc, #120]	; (8004520 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d004      	beq.n	80044b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a1d      	ldr	r2, [pc, #116]	; (8004524 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d10e      	bne.n	80044d2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80044b4:	481a      	ldr	r0, [pc, #104]	; (8004520 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80044b6:	f7ff fea3 	bl	8004200 <LL_ADC_IsEnabled>
 80044ba:	4604      	mov	r4, r0
 80044bc:	4819      	ldr	r0, [pc, #100]	; (8004524 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80044be:	f7ff fe9f 	bl	8004200 <LL_ADC_IsEnabled>
 80044c2:	4603      	mov	r3, r0
 80044c4:	4323      	orrs	r3, r4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	bf0c      	ite	eq
 80044ca:	2301      	moveq	r3, #1
 80044cc:	2300      	movne	r3, #0
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	e008      	b.n	80044e4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80044d2:	4817      	ldr	r0, [pc, #92]	; (8004530 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80044d4:	f7ff fe94 	bl	8004200 <LL_ADC_IsEnabled>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	bf0c      	ite	eq
 80044de:	2301      	moveq	r3, #1
 80044e0:	2300      	movne	r3, #0
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d010      	beq.n	800450a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80044e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	4b11      	ldr	r3, [pc, #68]	; (8004534 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80044ee:	4013      	ands	r3, r2
 80044f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044f2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044f4:	e009      	b.n	800450a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fa:	f043 0220 	orr.w	r2, r3, #32
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004508:	e000      	b.n	800450c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800450a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004514:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004518:	4618      	mov	r0, r3
 800451a:	377c      	adds	r7, #124	; 0x7c
 800451c:	46bd      	mov	sp, r7
 800451e:	bd90      	pop	{r4, r7, pc}
 8004520:	40022000 	.word	0x40022000
 8004524:	40022100 	.word	0x40022100
 8004528:	40022300 	.word	0x40022300
 800452c:	58026300 	.word	0x58026300
 8004530:	58026000 	.word	0x58026000
 8004534:	fffff0e0 	.word	0xfffff0e0

08004538 <__NVIC_SetPriorityGrouping>:
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f003 0307 	and.w	r3, r3, #7
 8004546:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004548:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <__NVIC_SetPriorityGrouping+0x40>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004554:	4013      	ands	r3, r2
 8004556:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004560:	4b06      	ldr	r3, [pc, #24]	; (800457c <__NVIC_SetPriorityGrouping+0x44>)
 8004562:	4313      	orrs	r3, r2
 8004564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004566:	4a04      	ldr	r2, [pc, #16]	; (8004578 <__NVIC_SetPriorityGrouping+0x40>)
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	60d3      	str	r3, [r2, #12]
}
 800456c:	bf00      	nop
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	e000ed00 	.word	0xe000ed00
 800457c:	05fa0000 	.word	0x05fa0000

08004580 <__NVIC_GetPriorityGrouping>:
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004584:	4b04      	ldr	r3, [pc, #16]	; (8004598 <__NVIC_GetPriorityGrouping+0x18>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	0a1b      	lsrs	r3, r3, #8
 800458a:	f003 0307 	and.w	r3, r3, #7
}
 800458e:	4618      	mov	r0, r3
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	e000ed00 	.word	0xe000ed00

0800459c <__NVIC_EnableIRQ>:
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	4603      	mov	r3, r0
 80045a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80045a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	db0b      	blt.n	80045c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045ae:	88fb      	ldrh	r3, [r7, #6]
 80045b0:	f003 021f 	and.w	r2, r3, #31
 80045b4:	4907      	ldr	r1, [pc, #28]	; (80045d4 <__NVIC_EnableIRQ+0x38>)
 80045b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045ba:	095b      	lsrs	r3, r3, #5
 80045bc:	2001      	movs	r0, #1
 80045be:	fa00 f202 	lsl.w	r2, r0, r2
 80045c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	e000e100 	.word	0xe000e100

080045d8 <__NVIC_SetPriority>:
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4603      	mov	r3, r0
 80045e0:	6039      	str	r1, [r7, #0]
 80045e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80045e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	db0a      	blt.n	8004602 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	490c      	ldr	r1, [pc, #48]	; (8004624 <__NVIC_SetPriority+0x4c>)
 80045f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045f6:	0112      	lsls	r2, r2, #4
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	440b      	add	r3, r1
 80045fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004600:	e00a      	b.n	8004618 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	b2da      	uxtb	r2, r3
 8004606:	4908      	ldr	r1, [pc, #32]	; (8004628 <__NVIC_SetPriority+0x50>)
 8004608:	88fb      	ldrh	r3, [r7, #6]
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	3b04      	subs	r3, #4
 8004610:	0112      	lsls	r2, r2, #4
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	440b      	add	r3, r1
 8004616:	761a      	strb	r2, [r3, #24]
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	e000e100 	.word	0xe000e100
 8004628:	e000ed00 	.word	0xe000ed00

0800462c <NVIC_EncodePriority>:
{
 800462c:	b480      	push	{r7}
 800462e:	b089      	sub	sp, #36	; 0x24
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	f1c3 0307 	rsb	r3, r3, #7
 8004646:	2b04      	cmp	r3, #4
 8004648:	bf28      	it	cs
 800464a:	2304      	movcs	r3, #4
 800464c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	3304      	adds	r3, #4
 8004652:	2b06      	cmp	r3, #6
 8004654:	d902      	bls.n	800465c <NVIC_EncodePriority+0x30>
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	3b03      	subs	r3, #3
 800465a:	e000      	b.n	800465e <NVIC_EncodePriority+0x32>
 800465c:	2300      	movs	r3, #0
 800465e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43da      	mvns	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	401a      	ands	r2, r3
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004674:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	fa01 f303 	lsl.w	r3, r1, r3
 800467e:	43d9      	mvns	r1, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004684:	4313      	orrs	r3, r2
}
 8004686:	4618      	mov	r0, r3
 8004688:	3724      	adds	r7, #36	; 0x24
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
	...

08004694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3b01      	subs	r3, #1
 80046a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046a4:	d301      	bcc.n	80046aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046a6:	2301      	movs	r3, #1
 80046a8:	e00f      	b.n	80046ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046aa:	4a0a      	ldr	r2, [pc, #40]	; (80046d4 <SysTick_Config+0x40>)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046b2:	210f      	movs	r1, #15
 80046b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046b8:	f7ff ff8e 	bl	80045d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046bc:	4b05      	ldr	r3, [pc, #20]	; (80046d4 <SysTick_Config+0x40>)
 80046be:	2200      	movs	r2, #0
 80046c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046c2:	4b04      	ldr	r3, [pc, #16]	; (80046d4 <SysTick_Config+0x40>)
 80046c4:	2207      	movs	r2, #7
 80046c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	e000e010 	.word	0xe000e010

080046d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7ff ff29 	bl	8004538 <__NVIC_SetPriorityGrouping>
}
 80046e6:	bf00      	nop
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b086      	sub	sp, #24
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	4603      	mov	r3, r0
 80046f6:	60b9      	str	r1, [r7, #8]
 80046f8:	607a      	str	r2, [r7, #4]
 80046fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80046fc:	f7ff ff40 	bl	8004580 <__NVIC_GetPriorityGrouping>
 8004700:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	68b9      	ldr	r1, [r7, #8]
 8004706:	6978      	ldr	r0, [r7, #20]
 8004708:	f7ff ff90 	bl	800462c <NVIC_EncodePriority>
 800470c:	4602      	mov	r2, r0
 800470e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004712:	4611      	mov	r1, r2
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff ff5f 	bl	80045d8 <__NVIC_SetPriority>
}
 800471a:	bf00      	nop
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b082      	sub	sp, #8
 8004726:	af00      	add	r7, sp, #0
 8004728:	4603      	mov	r3, r0
 800472a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800472c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff ff33 	bl	800459c <__NVIC_EnableIRQ>
}
 8004736:	bf00      	nop
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b082      	sub	sp, #8
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7ff ffa4 	bl	8004694 <SysTick_Config>
 800474c:	4603      	mov	r3, r0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b082      	sub	sp, #8
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e014      	b.n	8004792 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	791b      	ldrb	r3, [r3, #4]
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d105      	bne.n	800477e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7fd fccd 	bl	8002118 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2202      	movs	r2, #2
 8004782:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	795b      	ldrb	r3, [r3, #5]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d101      	bne.n	80047b0 <HAL_DAC_Start+0x16>
 80047ac:	2302      	movs	r3, #2
 80047ae:	e040      	b.n	8004832 <HAL_DAC_Start+0x98>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2202      	movs	r2, #2
 80047ba:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6819      	ldr	r1, [r3, #0]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	f003 0310 	and.w	r3, r3, #16
 80047c8:	2201      	movs	r2, #1
 80047ca:	409a      	lsls	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10f      	bne.n	80047fa <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d11d      	bne.n	8004824 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	605a      	str	r2, [r3, #4]
 80047f8:	e014      	b.n	8004824 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	f003 0310 	and.w	r3, r3, #16
 800480a:	2102      	movs	r1, #2
 800480c:	fa01 f303 	lsl.w	r3, r1, r3
 8004810:	429a      	cmp	r2, r3
 8004812:	d107      	bne.n	8004824 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0202 	orr.w	r2, r2, #2
 8004822:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800483e:	b480      	push	{r7}
 8004840:	b087      	sub	sp, #28
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	607a      	str	r2, [r7, #4]
 800484a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d105      	bne.n	8004868 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4413      	add	r3, r2
 8004862:	3308      	adds	r3, #8
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	e004      	b.n	8004872 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4413      	add	r3, r2
 800486e:	3314      	adds	r3, #20
 8004870:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	461a      	mov	r2, r3
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	371c      	adds	r7, #28
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b088      	sub	sp, #32
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	795b      	ldrb	r3, [r3, #5]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d101      	bne.n	80048a0 <HAL_DAC_ConfigChannel+0x18>
 800489c:	2302      	movs	r3, #2
 800489e:	e11d      	b.n	8004adc <HAL_DAC_ConfigChannel+0x254>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2201      	movs	r2, #1
 80048a4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2202      	movs	r2, #2
 80048aa:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b04      	cmp	r3, #4
 80048b2:	d174      	bne.n	800499e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80048b4:	f7fe f8a4 	bl	8002a00 <HAL_GetTick>
 80048b8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d134      	bne.n	800492a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80048c0:	e011      	b.n	80048e6 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80048c2:	f7fe f89d 	bl	8002a00 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d90a      	bls.n	80048e6 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f043 0208 	orr.w	r2, r3, #8
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2203      	movs	r2, #3
 80048e0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e0fa      	b.n	8004adc <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048ec:	4b7d      	ldr	r3, [pc, #500]	; (8004ae4 <HAL_DAC_ConfigChannel+0x25c>)
 80048ee:	4013      	ands	r3, r2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1e6      	bne.n	80048c2 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80048f4:	2001      	movs	r0, #1
 80048f6:	f7fe f88f 	bl	8002a18 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	6992      	ldr	r2, [r2, #24]
 8004902:	641a      	str	r2, [r3, #64]	; 0x40
 8004904:	e01e      	b.n	8004944 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004906:	f7fe f87b 	bl	8002a00 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b01      	cmp	r3, #1
 8004912:	d90a      	bls.n	800492a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	f043 0208 	orr.w	r2, r3, #8
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2203      	movs	r2, #3
 8004924:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e0d8      	b.n	8004adc <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004930:	2b00      	cmp	r3, #0
 8004932:	dbe8      	blt.n	8004906 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004934:	2001      	movs	r0, #1
 8004936:	f7fe f86f 	bl	8002a18 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	6992      	ldr	r2, [r2, #24]
 8004942:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f003 0310 	and.w	r3, r3, #16
 8004950:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004954:	fa01 f303 	lsl.w	r3, r1, r3
 8004958:	43db      	mvns	r3, r3
 800495a:	ea02 0103 	and.w	r1, r2, r3
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	69da      	ldr	r2, [r3, #28]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f003 0310 	and.w	r3, r3, #16
 8004968:	409a      	lsls	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f003 0310 	and.w	r3, r3, #16
 800497e:	21ff      	movs	r1, #255	; 0xff
 8004980:	fa01 f303 	lsl.w	r3, r1, r3
 8004984:	43db      	mvns	r3, r3
 8004986:	ea02 0103 	and.w	r1, r2, r3
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	6a1a      	ldr	r2, [r3, #32]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f003 0310 	and.w	r3, r3, #16
 8004994:	409a      	lsls	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d11d      	bne.n	80049e2 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ac:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	221f      	movs	r2, #31
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	43db      	mvns	r3, r3
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	4013      	ands	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f003 0310 	and.w	r3, r3, #16
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	fa02 f303 	lsl.w	r3, r2, r3
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e8:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f003 0310 	and.w	r3, r3, #16
 80049f0:	2207      	movs	r2, #7
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	43db      	mvns	r3, r3
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	4013      	ands	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d102      	bne.n	8004a0c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61fb      	str	r3, [r7, #28]
 8004a0a:	e00f      	b.n	8004a2c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d102      	bne.n	8004a1a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004a14:	2301      	movs	r3, #1
 8004a16:	61fb      	str	r3, [r7, #28]
 8004a18:	e008      	b.n	8004a2c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d102      	bne.n	8004a28 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004a22:	2301      	movs	r3, #1
 8004a24:	61fb      	str	r3, [r7, #28]
 8004a26:	e001      	b.n	8004a2c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	69fa      	ldr	r2, [r7, #28]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f003 0310 	and.w	r3, r3, #16
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6819      	ldr	r1, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f003 0310 	and.w	r3, r3, #16
 8004a62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	43da      	mvns	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	400a      	ands	r2, r1
 8004a72:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f003 0310 	and.w	r3, r3, #16
 8004a82:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004a86:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8a:	43db      	mvns	r3, r3
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f003 0310 	and.w	r3, r3, #16
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6819      	ldr	r1, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f003 0310 	and.w	r3, r3, #16
 8004abe:	22c0      	movs	r2, #192	; 0xc0
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	43da      	mvns	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	400a      	ands	r2, r1
 8004acc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3720      	adds	r7, #32
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	20008000 	.word	0x20008000

08004ae8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004af0:	f7fd ff86 	bl	8002a00 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e316      	b.n	800512e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a66      	ldr	r2, [pc, #408]	; (8004ca0 <HAL_DMA_Init+0x1b8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d04a      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a65      	ldr	r2, [pc, #404]	; (8004ca4 <HAL_DMA_Init+0x1bc>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d045      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a63      	ldr	r2, [pc, #396]	; (8004ca8 <HAL_DMA_Init+0x1c0>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d040      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a62      	ldr	r2, [pc, #392]	; (8004cac <HAL_DMA_Init+0x1c4>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d03b      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a60      	ldr	r2, [pc, #384]	; (8004cb0 <HAL_DMA_Init+0x1c8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d036      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a5f      	ldr	r2, [pc, #380]	; (8004cb4 <HAL_DMA_Init+0x1cc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d031      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a5d      	ldr	r2, [pc, #372]	; (8004cb8 <HAL_DMA_Init+0x1d0>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d02c      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a5c      	ldr	r2, [pc, #368]	; (8004cbc <HAL_DMA_Init+0x1d4>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d027      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a5a      	ldr	r2, [pc, #360]	; (8004cc0 <HAL_DMA_Init+0x1d8>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d022      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a59      	ldr	r2, [pc, #356]	; (8004cc4 <HAL_DMA_Init+0x1dc>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d01d      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a57      	ldr	r2, [pc, #348]	; (8004cc8 <HAL_DMA_Init+0x1e0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d018      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a56      	ldr	r2, [pc, #344]	; (8004ccc <HAL_DMA_Init+0x1e4>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d013      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a54      	ldr	r2, [pc, #336]	; (8004cd0 <HAL_DMA_Init+0x1e8>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d00e      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a53      	ldr	r2, [pc, #332]	; (8004cd4 <HAL_DMA_Init+0x1ec>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d009      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a51      	ldr	r2, [pc, #324]	; (8004cd8 <HAL_DMA_Init+0x1f0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d004      	beq.n	8004ba0 <HAL_DMA_Init+0xb8>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a50      	ldr	r2, [pc, #320]	; (8004cdc <HAL_DMA_Init+0x1f4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d101      	bne.n	8004ba4 <HAL_DMA_Init+0xbc>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <HAL_DMA_Init+0xbe>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 813b 	beq.w	8004e22 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a37      	ldr	r2, [pc, #220]	; (8004ca0 <HAL_DMA_Init+0x1b8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d04a      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a36      	ldr	r2, [pc, #216]	; (8004ca4 <HAL_DMA_Init+0x1bc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d045      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a34      	ldr	r2, [pc, #208]	; (8004ca8 <HAL_DMA_Init+0x1c0>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d040      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a33      	ldr	r2, [pc, #204]	; (8004cac <HAL_DMA_Init+0x1c4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d03b      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a31      	ldr	r2, [pc, #196]	; (8004cb0 <HAL_DMA_Init+0x1c8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d036      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a30      	ldr	r2, [pc, #192]	; (8004cb4 <HAL_DMA_Init+0x1cc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d031      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a2e      	ldr	r2, [pc, #184]	; (8004cb8 <HAL_DMA_Init+0x1d0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d02c      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a2d      	ldr	r2, [pc, #180]	; (8004cbc <HAL_DMA_Init+0x1d4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d027      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a2b      	ldr	r2, [pc, #172]	; (8004cc0 <HAL_DMA_Init+0x1d8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d022      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a2a      	ldr	r2, [pc, #168]	; (8004cc4 <HAL_DMA_Init+0x1dc>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d01d      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a28      	ldr	r2, [pc, #160]	; (8004cc8 <HAL_DMA_Init+0x1e0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d018      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a27      	ldr	r2, [pc, #156]	; (8004ccc <HAL_DMA_Init+0x1e4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d013      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a25      	ldr	r2, [pc, #148]	; (8004cd0 <HAL_DMA_Init+0x1e8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00e      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a24      	ldr	r2, [pc, #144]	; (8004cd4 <HAL_DMA_Init+0x1ec>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d009      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a22      	ldr	r2, [pc, #136]	; (8004cd8 <HAL_DMA_Init+0x1f0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d004      	beq.n	8004c5c <HAL_DMA_Init+0x174>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a21      	ldr	r2, [pc, #132]	; (8004cdc <HAL_DMA_Init+0x1f4>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d108      	bne.n	8004c6e <HAL_DMA_Init+0x186>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0201 	bic.w	r2, r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	e007      	b.n	8004c7e <HAL_DMA_Init+0x196>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 0201 	bic.w	r2, r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c7e:	e02f      	b.n	8004ce0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c80:	f7fd febe 	bl	8002a00 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b05      	cmp	r3, #5
 8004c8c:	d928      	bls.n	8004ce0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2220      	movs	r2, #32
 8004c92:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2203      	movs	r2, #3
 8004c98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e246      	b.n	800512e <HAL_DMA_Init+0x646>
 8004ca0:	40020010 	.word	0x40020010
 8004ca4:	40020028 	.word	0x40020028
 8004ca8:	40020040 	.word	0x40020040
 8004cac:	40020058 	.word	0x40020058
 8004cb0:	40020070 	.word	0x40020070
 8004cb4:	40020088 	.word	0x40020088
 8004cb8:	400200a0 	.word	0x400200a0
 8004cbc:	400200b8 	.word	0x400200b8
 8004cc0:	40020410 	.word	0x40020410
 8004cc4:	40020428 	.word	0x40020428
 8004cc8:	40020440 	.word	0x40020440
 8004ccc:	40020458 	.word	0x40020458
 8004cd0:	40020470 	.word	0x40020470
 8004cd4:	40020488 	.word	0x40020488
 8004cd8:	400204a0 	.word	0x400204a0
 8004cdc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1c8      	bne.n	8004c80 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4b83      	ldr	r3, [pc, #524]	; (8004f08 <HAL_DMA_Init+0x420>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004d06:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d12:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d1e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d107      	bne.n	8004d44 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004d44:	4b71      	ldr	r3, [pc, #452]	; (8004f0c <HAL_DMA_Init+0x424>)
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	4b71      	ldr	r3, [pc, #452]	; (8004f10 <HAL_DMA_Init+0x428>)
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d50:	d328      	bcc.n	8004da4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2b28      	cmp	r3, #40	; 0x28
 8004d58:	d903      	bls.n	8004d62 <HAL_DMA_Init+0x27a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2b2e      	cmp	r3, #46	; 0x2e
 8004d60:	d917      	bls.n	8004d92 <HAL_DMA_Init+0x2aa>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b3e      	cmp	r3, #62	; 0x3e
 8004d68:	d903      	bls.n	8004d72 <HAL_DMA_Init+0x28a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b42      	cmp	r3, #66	; 0x42
 8004d70:	d90f      	bls.n	8004d92 <HAL_DMA_Init+0x2aa>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b46      	cmp	r3, #70	; 0x46
 8004d78:	d903      	bls.n	8004d82 <HAL_DMA_Init+0x29a>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b48      	cmp	r3, #72	; 0x48
 8004d80:	d907      	bls.n	8004d92 <HAL_DMA_Init+0x2aa>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b4e      	cmp	r3, #78	; 0x4e
 8004d88:	d905      	bls.n	8004d96 <HAL_DMA_Init+0x2ae>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b52      	cmp	r3, #82	; 0x52
 8004d90:	d801      	bhi.n	8004d96 <HAL_DMA_Init+0x2ae>
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <HAL_DMA_Init+0x2b0>
 8004d96:	2300      	movs	r3, #0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004da2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f023 0307 	bic.w	r3, r3, #7
 8004dba:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d117      	bne.n	8004dfe <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00e      	beq.n	8004dfe <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f002 fb33 	bl	800744c <DMA_CheckFifoParam>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d008      	beq.n	8004dfe <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2240      	movs	r2, #64	; 0x40
 8004df0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e197      	b.n	800512e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f002 fa6e 	bl	80072e8 <DMA_CalcBaseAndBitshift>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e14:	f003 031f 	and.w	r3, r3, #31
 8004e18:	223f      	movs	r2, #63	; 0x3f
 8004e1a:	409a      	lsls	r2, r3
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	609a      	str	r2, [r3, #8]
 8004e20:	e0cd      	b.n	8004fbe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a3b      	ldr	r2, [pc, #236]	; (8004f14 <HAL_DMA_Init+0x42c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d022      	beq.n	8004e72 <HAL_DMA_Init+0x38a>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a39      	ldr	r2, [pc, #228]	; (8004f18 <HAL_DMA_Init+0x430>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d01d      	beq.n	8004e72 <HAL_DMA_Init+0x38a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a38      	ldr	r2, [pc, #224]	; (8004f1c <HAL_DMA_Init+0x434>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d018      	beq.n	8004e72 <HAL_DMA_Init+0x38a>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a36      	ldr	r2, [pc, #216]	; (8004f20 <HAL_DMA_Init+0x438>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d013      	beq.n	8004e72 <HAL_DMA_Init+0x38a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a35      	ldr	r2, [pc, #212]	; (8004f24 <HAL_DMA_Init+0x43c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d00e      	beq.n	8004e72 <HAL_DMA_Init+0x38a>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a33      	ldr	r2, [pc, #204]	; (8004f28 <HAL_DMA_Init+0x440>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d009      	beq.n	8004e72 <HAL_DMA_Init+0x38a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a32      	ldr	r2, [pc, #200]	; (8004f2c <HAL_DMA_Init+0x444>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d004      	beq.n	8004e72 <HAL_DMA_Init+0x38a>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a30      	ldr	r2, [pc, #192]	; (8004f30 <HAL_DMA_Init+0x448>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d101      	bne.n	8004e76 <HAL_DMA_Init+0x38e>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e000      	b.n	8004e78 <HAL_DMA_Init+0x390>
 8004e76:	2300      	movs	r3, #0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 8097 	beq.w	8004fac <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a24      	ldr	r2, [pc, #144]	; (8004f14 <HAL_DMA_Init+0x42c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d021      	beq.n	8004ecc <HAL_DMA_Init+0x3e4>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a22      	ldr	r2, [pc, #136]	; (8004f18 <HAL_DMA_Init+0x430>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d01c      	beq.n	8004ecc <HAL_DMA_Init+0x3e4>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a21      	ldr	r2, [pc, #132]	; (8004f1c <HAL_DMA_Init+0x434>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d017      	beq.n	8004ecc <HAL_DMA_Init+0x3e4>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a1f      	ldr	r2, [pc, #124]	; (8004f20 <HAL_DMA_Init+0x438>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d012      	beq.n	8004ecc <HAL_DMA_Init+0x3e4>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a1e      	ldr	r2, [pc, #120]	; (8004f24 <HAL_DMA_Init+0x43c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00d      	beq.n	8004ecc <HAL_DMA_Init+0x3e4>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a1c      	ldr	r2, [pc, #112]	; (8004f28 <HAL_DMA_Init+0x440>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d008      	beq.n	8004ecc <HAL_DMA_Init+0x3e4>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a1b      	ldr	r2, [pc, #108]	; (8004f2c <HAL_DMA_Init+0x444>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d003      	beq.n	8004ecc <HAL_DMA_Init+0x3e4>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a19      	ldr	r2, [pc, #100]	; (8004f30 <HAL_DMA_Init+0x448>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	4b12      	ldr	r3, [pc, #72]	; (8004f34 <HAL_DMA_Init+0x44c>)
 8004eea:	4013      	ands	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	2b40      	cmp	r3, #64	; 0x40
 8004ef4:	d020      	beq.n	8004f38 <HAL_DMA_Init+0x450>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	2b80      	cmp	r3, #128	; 0x80
 8004efc:	d102      	bne.n	8004f04 <HAL_DMA_Init+0x41c>
 8004efe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f02:	e01a      	b.n	8004f3a <HAL_DMA_Init+0x452>
 8004f04:	2300      	movs	r3, #0
 8004f06:	e018      	b.n	8004f3a <HAL_DMA_Init+0x452>
 8004f08:	fe10803f 	.word	0xfe10803f
 8004f0c:	5c001000 	.word	0x5c001000
 8004f10:	ffff0000 	.word	0xffff0000
 8004f14:	58025408 	.word	0x58025408
 8004f18:	5802541c 	.word	0x5802541c
 8004f1c:	58025430 	.word	0x58025430
 8004f20:	58025444 	.word	0x58025444
 8004f24:	58025458 	.word	0x58025458
 8004f28:	5802546c 	.word	0x5802546c
 8004f2c:	58025480 	.word	0x58025480
 8004f30:	58025494 	.word	0x58025494
 8004f34:	fffe000f 	.word	0xfffe000f
 8004f38:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	68d2      	ldr	r2, [r2, #12]
 8004f3e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004f48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004f50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004f58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004f60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004f68:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	4b6e      	ldr	r3, [pc, #440]	; (8005138 <HAL_DMA_Init+0x650>)
 8004f80:	4413      	add	r3, r2
 8004f82:	4a6e      	ldr	r2, [pc, #440]	; (800513c <HAL_DMA_Init+0x654>)
 8004f84:	fba2 2303 	umull	r2, r3, r2, r3
 8004f88:	091b      	lsrs	r3, r3, #4
 8004f8a:	009a      	lsls	r2, r3, #2
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f002 f9a9 	bl	80072e8 <DMA_CalcBaseAndBitshift>
 8004f96:	4603      	mov	r3, r0
 8004f98:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f9e:	f003 031f 	and.w	r3, r3, #31
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	409a      	lsls	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	605a      	str	r2, [r3, #4]
 8004faa:	e008      	b.n	8004fbe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2240      	movs	r2, #64	; 0x40
 8004fb0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2203      	movs	r2, #3
 8004fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e0b7      	b.n	800512e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a5f      	ldr	r2, [pc, #380]	; (8005140 <HAL_DMA_Init+0x658>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d072      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a5d      	ldr	r2, [pc, #372]	; (8005144 <HAL_DMA_Init+0x65c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d06d      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a5c      	ldr	r2, [pc, #368]	; (8005148 <HAL_DMA_Init+0x660>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d068      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a5a      	ldr	r2, [pc, #360]	; (800514c <HAL_DMA_Init+0x664>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d063      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a59      	ldr	r2, [pc, #356]	; (8005150 <HAL_DMA_Init+0x668>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d05e      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a57      	ldr	r2, [pc, #348]	; (8005154 <HAL_DMA_Init+0x66c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d059      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a56      	ldr	r2, [pc, #344]	; (8005158 <HAL_DMA_Init+0x670>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d054      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a54      	ldr	r2, [pc, #336]	; (800515c <HAL_DMA_Init+0x674>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d04f      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a53      	ldr	r2, [pc, #332]	; (8005160 <HAL_DMA_Init+0x678>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d04a      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a51      	ldr	r2, [pc, #324]	; (8005164 <HAL_DMA_Init+0x67c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d045      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a50      	ldr	r2, [pc, #320]	; (8005168 <HAL_DMA_Init+0x680>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d040      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a4e      	ldr	r2, [pc, #312]	; (800516c <HAL_DMA_Init+0x684>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d03b      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a4d      	ldr	r2, [pc, #308]	; (8005170 <HAL_DMA_Init+0x688>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d036      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a4b      	ldr	r2, [pc, #300]	; (8005174 <HAL_DMA_Init+0x68c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d031      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a4a      	ldr	r2, [pc, #296]	; (8005178 <HAL_DMA_Init+0x690>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d02c      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a48      	ldr	r2, [pc, #288]	; (800517c <HAL_DMA_Init+0x694>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d027      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a47      	ldr	r2, [pc, #284]	; (8005180 <HAL_DMA_Init+0x698>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d022      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a45      	ldr	r2, [pc, #276]	; (8005184 <HAL_DMA_Init+0x69c>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d01d      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a44      	ldr	r2, [pc, #272]	; (8005188 <HAL_DMA_Init+0x6a0>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d018      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a42      	ldr	r2, [pc, #264]	; (800518c <HAL_DMA_Init+0x6a4>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d013      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a41      	ldr	r2, [pc, #260]	; (8005190 <HAL_DMA_Init+0x6a8>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d00e      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a3f      	ldr	r2, [pc, #252]	; (8005194 <HAL_DMA_Init+0x6ac>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d009      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a3e      	ldr	r2, [pc, #248]	; (8005198 <HAL_DMA_Init+0x6b0>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d004      	beq.n	80050ae <HAL_DMA_Init+0x5c6>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a3c      	ldr	r2, [pc, #240]	; (800519c <HAL_DMA_Init+0x6b4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d101      	bne.n	80050b2 <HAL_DMA_Init+0x5ca>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e000      	b.n	80050b4 <HAL_DMA_Init+0x5cc>
 80050b2:	2300      	movs	r3, #0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d032      	beq.n	800511e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f002 fa43 	bl	8007544 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	2b80      	cmp	r3, #128	; 0x80
 80050c4:	d102      	bne.n	80050cc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80050e0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d010      	beq.n	800510c <HAL_DMA_Init+0x624>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	2b08      	cmp	r3, #8
 80050f0:	d80c      	bhi.n	800510c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f002 fac0 	bl	8007678 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050fc:	2200      	movs	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005108:	605a      	str	r2, [r3, #4]
 800510a:	e008      	b.n	800511e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	a7fdabf8 	.word	0xa7fdabf8
 800513c:	cccccccd 	.word	0xcccccccd
 8005140:	40020010 	.word	0x40020010
 8005144:	40020028 	.word	0x40020028
 8005148:	40020040 	.word	0x40020040
 800514c:	40020058 	.word	0x40020058
 8005150:	40020070 	.word	0x40020070
 8005154:	40020088 	.word	0x40020088
 8005158:	400200a0 	.word	0x400200a0
 800515c:	400200b8 	.word	0x400200b8
 8005160:	40020410 	.word	0x40020410
 8005164:	40020428 	.word	0x40020428
 8005168:	40020440 	.word	0x40020440
 800516c:	40020458 	.word	0x40020458
 8005170:	40020470 	.word	0x40020470
 8005174:	40020488 	.word	0x40020488
 8005178:	400204a0 	.word	0x400204a0
 800517c:	400204b8 	.word	0x400204b8
 8005180:	58025408 	.word	0x58025408
 8005184:	5802541c 	.word	0x5802541c
 8005188:	58025430 	.word	0x58025430
 800518c:	58025444 	.word	0x58025444
 8005190:	58025458 	.word	0x58025458
 8005194:	5802546c 	.word	0x5802546c
 8005198:	58025480 	.word	0x58025480
 800519c:	58025494 	.word	0x58025494

080051a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e226      	b.n	800560a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d101      	bne.n	80051ca <HAL_DMA_Start_IT+0x2a>
 80051c6:	2302      	movs	r3, #2
 80051c8:	e21f      	b.n	800560a <HAL_DMA_Start_IT+0x46a>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b01      	cmp	r3, #1
 80051dc:	f040 820a 	bne.w	80055f4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a68      	ldr	r2, [pc, #416]	; (8005394 <HAL_DMA_Start_IT+0x1f4>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d04a      	beq.n	800528e <HAL_DMA_Start_IT+0xee>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a66      	ldr	r2, [pc, #408]	; (8005398 <HAL_DMA_Start_IT+0x1f8>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d045      	beq.n	800528e <HAL_DMA_Start_IT+0xee>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a65      	ldr	r2, [pc, #404]	; (800539c <HAL_DMA_Start_IT+0x1fc>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d040      	beq.n	800528e <HAL_DMA_Start_IT+0xee>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a63      	ldr	r2, [pc, #396]	; (80053a0 <HAL_DMA_Start_IT+0x200>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d03b      	beq.n	800528e <HAL_DMA_Start_IT+0xee>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a62      	ldr	r2, [pc, #392]	; (80053a4 <HAL_DMA_Start_IT+0x204>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d036      	beq.n	800528e <HAL_DMA_Start_IT+0xee>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a60      	ldr	r2, [pc, #384]	; (80053a8 <HAL_DMA_Start_IT+0x208>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d031      	beq.n	800528e <HAL_DMA_Start_IT+0xee>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a5f      	ldr	r2, [pc, #380]	; (80053ac <HAL_DMA_Start_IT+0x20c>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d02c      	beq.n	800528e <HAL_DMA_Start_IT+0xee>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a5d      	ldr	r2, [pc, #372]	; (80053b0 <HAL_DMA_Start_IT+0x210>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d027      	beq.n	800528e <HAL_DMA_Start_IT+0xee>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a5c      	ldr	r2, [pc, #368]	; (80053b4 <HAL_DMA_Start_IT+0x214>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d022      	beq.n	800528e <HAL_DMA_Start_IT+0xee>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a5a      	ldr	r2, [pc, #360]	; (80053b8 <HAL_DMA_Start_IT+0x218>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d01d      	beq.n	800528e <HAL_DMA_Start_IT+0xee>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a59      	ldr	r2, [pc, #356]	; (80053bc <HAL_DMA_Start_IT+0x21c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d018      	beq.n	800528e <HAL_DMA_Start_IT+0xee>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a57      	ldr	r2, [pc, #348]	; (80053c0 <HAL_DMA_Start_IT+0x220>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d013      	beq.n	800528e <HAL_DMA_Start_IT+0xee>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a56      	ldr	r2, [pc, #344]	; (80053c4 <HAL_DMA_Start_IT+0x224>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d00e      	beq.n	800528e <HAL_DMA_Start_IT+0xee>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a54      	ldr	r2, [pc, #336]	; (80053c8 <HAL_DMA_Start_IT+0x228>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d009      	beq.n	800528e <HAL_DMA_Start_IT+0xee>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a53      	ldr	r2, [pc, #332]	; (80053cc <HAL_DMA_Start_IT+0x22c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d004      	beq.n	800528e <HAL_DMA_Start_IT+0xee>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a51      	ldr	r2, [pc, #324]	; (80053d0 <HAL_DMA_Start_IT+0x230>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d108      	bne.n	80052a0 <HAL_DMA_Start_IT+0x100>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0201 	bic.w	r2, r2, #1
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	e007      	b.n	80052b0 <HAL_DMA_Start_IT+0x110>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0201 	bic.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	68b9      	ldr	r1, [r7, #8]
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f001 fe6a 	bl	8006f90 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a34      	ldr	r2, [pc, #208]	; (8005394 <HAL_DMA_Start_IT+0x1f4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d04a      	beq.n	800535c <HAL_DMA_Start_IT+0x1bc>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a33      	ldr	r2, [pc, #204]	; (8005398 <HAL_DMA_Start_IT+0x1f8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d045      	beq.n	800535c <HAL_DMA_Start_IT+0x1bc>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a31      	ldr	r2, [pc, #196]	; (800539c <HAL_DMA_Start_IT+0x1fc>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d040      	beq.n	800535c <HAL_DMA_Start_IT+0x1bc>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a30      	ldr	r2, [pc, #192]	; (80053a0 <HAL_DMA_Start_IT+0x200>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d03b      	beq.n	800535c <HAL_DMA_Start_IT+0x1bc>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a2e      	ldr	r2, [pc, #184]	; (80053a4 <HAL_DMA_Start_IT+0x204>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d036      	beq.n	800535c <HAL_DMA_Start_IT+0x1bc>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a2d      	ldr	r2, [pc, #180]	; (80053a8 <HAL_DMA_Start_IT+0x208>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d031      	beq.n	800535c <HAL_DMA_Start_IT+0x1bc>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a2b      	ldr	r2, [pc, #172]	; (80053ac <HAL_DMA_Start_IT+0x20c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d02c      	beq.n	800535c <HAL_DMA_Start_IT+0x1bc>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a2a      	ldr	r2, [pc, #168]	; (80053b0 <HAL_DMA_Start_IT+0x210>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d027      	beq.n	800535c <HAL_DMA_Start_IT+0x1bc>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a28      	ldr	r2, [pc, #160]	; (80053b4 <HAL_DMA_Start_IT+0x214>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d022      	beq.n	800535c <HAL_DMA_Start_IT+0x1bc>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a27      	ldr	r2, [pc, #156]	; (80053b8 <HAL_DMA_Start_IT+0x218>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d01d      	beq.n	800535c <HAL_DMA_Start_IT+0x1bc>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a25      	ldr	r2, [pc, #148]	; (80053bc <HAL_DMA_Start_IT+0x21c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d018      	beq.n	800535c <HAL_DMA_Start_IT+0x1bc>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a24      	ldr	r2, [pc, #144]	; (80053c0 <HAL_DMA_Start_IT+0x220>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d013      	beq.n	800535c <HAL_DMA_Start_IT+0x1bc>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a22      	ldr	r2, [pc, #136]	; (80053c4 <HAL_DMA_Start_IT+0x224>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00e      	beq.n	800535c <HAL_DMA_Start_IT+0x1bc>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a21      	ldr	r2, [pc, #132]	; (80053c8 <HAL_DMA_Start_IT+0x228>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d009      	beq.n	800535c <HAL_DMA_Start_IT+0x1bc>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a1f      	ldr	r2, [pc, #124]	; (80053cc <HAL_DMA_Start_IT+0x22c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d004      	beq.n	800535c <HAL_DMA_Start_IT+0x1bc>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a1e      	ldr	r2, [pc, #120]	; (80053d0 <HAL_DMA_Start_IT+0x230>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d101      	bne.n	8005360 <HAL_DMA_Start_IT+0x1c0>
 800535c:	2301      	movs	r3, #1
 800535e:	e000      	b.n	8005362 <HAL_DMA_Start_IT+0x1c2>
 8005360:	2300      	movs	r3, #0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d036      	beq.n	80053d4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f023 021e 	bic.w	r2, r3, #30
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f042 0216 	orr.w	r2, r2, #22
 8005378:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	2b00      	cmp	r3, #0
 8005380:	d03e      	beq.n	8005400 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f042 0208 	orr.w	r2, r2, #8
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	e035      	b.n	8005400 <HAL_DMA_Start_IT+0x260>
 8005394:	40020010 	.word	0x40020010
 8005398:	40020028 	.word	0x40020028
 800539c:	40020040 	.word	0x40020040
 80053a0:	40020058 	.word	0x40020058
 80053a4:	40020070 	.word	0x40020070
 80053a8:	40020088 	.word	0x40020088
 80053ac:	400200a0 	.word	0x400200a0
 80053b0:	400200b8 	.word	0x400200b8
 80053b4:	40020410 	.word	0x40020410
 80053b8:	40020428 	.word	0x40020428
 80053bc:	40020440 	.word	0x40020440
 80053c0:	40020458 	.word	0x40020458
 80053c4:	40020470 	.word	0x40020470
 80053c8:	40020488 	.word	0x40020488
 80053cc:	400204a0 	.word	0x400204a0
 80053d0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f023 020e 	bic.w	r2, r3, #14
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 020a 	orr.w	r2, r2, #10
 80053e6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d007      	beq.n	8005400 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0204 	orr.w	r2, r2, #4
 80053fe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a83      	ldr	r2, [pc, #524]	; (8005614 <HAL_DMA_Start_IT+0x474>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d072      	beq.n	80054f0 <HAL_DMA_Start_IT+0x350>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a82      	ldr	r2, [pc, #520]	; (8005618 <HAL_DMA_Start_IT+0x478>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d06d      	beq.n	80054f0 <HAL_DMA_Start_IT+0x350>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a80      	ldr	r2, [pc, #512]	; (800561c <HAL_DMA_Start_IT+0x47c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d068      	beq.n	80054f0 <HAL_DMA_Start_IT+0x350>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a7f      	ldr	r2, [pc, #508]	; (8005620 <HAL_DMA_Start_IT+0x480>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d063      	beq.n	80054f0 <HAL_DMA_Start_IT+0x350>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a7d      	ldr	r2, [pc, #500]	; (8005624 <HAL_DMA_Start_IT+0x484>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d05e      	beq.n	80054f0 <HAL_DMA_Start_IT+0x350>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a7c      	ldr	r2, [pc, #496]	; (8005628 <HAL_DMA_Start_IT+0x488>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d059      	beq.n	80054f0 <HAL_DMA_Start_IT+0x350>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a7a      	ldr	r2, [pc, #488]	; (800562c <HAL_DMA_Start_IT+0x48c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d054      	beq.n	80054f0 <HAL_DMA_Start_IT+0x350>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a79      	ldr	r2, [pc, #484]	; (8005630 <HAL_DMA_Start_IT+0x490>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d04f      	beq.n	80054f0 <HAL_DMA_Start_IT+0x350>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a77      	ldr	r2, [pc, #476]	; (8005634 <HAL_DMA_Start_IT+0x494>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d04a      	beq.n	80054f0 <HAL_DMA_Start_IT+0x350>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a76      	ldr	r2, [pc, #472]	; (8005638 <HAL_DMA_Start_IT+0x498>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d045      	beq.n	80054f0 <HAL_DMA_Start_IT+0x350>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a74      	ldr	r2, [pc, #464]	; (800563c <HAL_DMA_Start_IT+0x49c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d040      	beq.n	80054f0 <HAL_DMA_Start_IT+0x350>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a73      	ldr	r2, [pc, #460]	; (8005640 <HAL_DMA_Start_IT+0x4a0>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d03b      	beq.n	80054f0 <HAL_DMA_Start_IT+0x350>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a71      	ldr	r2, [pc, #452]	; (8005644 <HAL_DMA_Start_IT+0x4a4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d036      	beq.n	80054f0 <HAL_DMA_Start_IT+0x350>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a70      	ldr	r2, [pc, #448]	; (8005648 <HAL_DMA_Start_IT+0x4a8>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d031      	beq.n	80054f0 <HAL_DMA_Start_IT+0x350>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a6e      	ldr	r2, [pc, #440]	; (800564c <HAL_DMA_Start_IT+0x4ac>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d02c      	beq.n	80054f0 <HAL_DMA_Start_IT+0x350>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a6d      	ldr	r2, [pc, #436]	; (8005650 <HAL_DMA_Start_IT+0x4b0>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d027      	beq.n	80054f0 <HAL_DMA_Start_IT+0x350>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a6b      	ldr	r2, [pc, #428]	; (8005654 <HAL_DMA_Start_IT+0x4b4>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d022      	beq.n	80054f0 <HAL_DMA_Start_IT+0x350>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a6a      	ldr	r2, [pc, #424]	; (8005658 <HAL_DMA_Start_IT+0x4b8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d01d      	beq.n	80054f0 <HAL_DMA_Start_IT+0x350>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a68      	ldr	r2, [pc, #416]	; (800565c <HAL_DMA_Start_IT+0x4bc>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d018      	beq.n	80054f0 <HAL_DMA_Start_IT+0x350>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a67      	ldr	r2, [pc, #412]	; (8005660 <HAL_DMA_Start_IT+0x4c0>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d013      	beq.n	80054f0 <HAL_DMA_Start_IT+0x350>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a65      	ldr	r2, [pc, #404]	; (8005664 <HAL_DMA_Start_IT+0x4c4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00e      	beq.n	80054f0 <HAL_DMA_Start_IT+0x350>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a64      	ldr	r2, [pc, #400]	; (8005668 <HAL_DMA_Start_IT+0x4c8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d009      	beq.n	80054f0 <HAL_DMA_Start_IT+0x350>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a62      	ldr	r2, [pc, #392]	; (800566c <HAL_DMA_Start_IT+0x4cc>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d004      	beq.n	80054f0 <HAL_DMA_Start_IT+0x350>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a61      	ldr	r2, [pc, #388]	; (8005670 <HAL_DMA_Start_IT+0x4d0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d101      	bne.n	80054f4 <HAL_DMA_Start_IT+0x354>
 80054f0:	2301      	movs	r3, #1
 80054f2:	e000      	b.n	80054f6 <HAL_DMA_Start_IT+0x356>
 80054f4:	2300      	movs	r3, #0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d01a      	beq.n	8005530 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d007      	beq.n	8005518 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005516:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800551c:	2b00      	cmp	r3, #0
 800551e:	d007      	beq.n	8005530 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800552a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800552e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a37      	ldr	r2, [pc, #220]	; (8005614 <HAL_DMA_Start_IT+0x474>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d04a      	beq.n	80055d0 <HAL_DMA_Start_IT+0x430>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a36      	ldr	r2, [pc, #216]	; (8005618 <HAL_DMA_Start_IT+0x478>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d045      	beq.n	80055d0 <HAL_DMA_Start_IT+0x430>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a34      	ldr	r2, [pc, #208]	; (800561c <HAL_DMA_Start_IT+0x47c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d040      	beq.n	80055d0 <HAL_DMA_Start_IT+0x430>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a33      	ldr	r2, [pc, #204]	; (8005620 <HAL_DMA_Start_IT+0x480>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d03b      	beq.n	80055d0 <HAL_DMA_Start_IT+0x430>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a31      	ldr	r2, [pc, #196]	; (8005624 <HAL_DMA_Start_IT+0x484>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d036      	beq.n	80055d0 <HAL_DMA_Start_IT+0x430>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a30      	ldr	r2, [pc, #192]	; (8005628 <HAL_DMA_Start_IT+0x488>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d031      	beq.n	80055d0 <HAL_DMA_Start_IT+0x430>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a2e      	ldr	r2, [pc, #184]	; (800562c <HAL_DMA_Start_IT+0x48c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d02c      	beq.n	80055d0 <HAL_DMA_Start_IT+0x430>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a2d      	ldr	r2, [pc, #180]	; (8005630 <HAL_DMA_Start_IT+0x490>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d027      	beq.n	80055d0 <HAL_DMA_Start_IT+0x430>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a2b      	ldr	r2, [pc, #172]	; (8005634 <HAL_DMA_Start_IT+0x494>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d022      	beq.n	80055d0 <HAL_DMA_Start_IT+0x430>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a2a      	ldr	r2, [pc, #168]	; (8005638 <HAL_DMA_Start_IT+0x498>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d01d      	beq.n	80055d0 <HAL_DMA_Start_IT+0x430>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a28      	ldr	r2, [pc, #160]	; (800563c <HAL_DMA_Start_IT+0x49c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d018      	beq.n	80055d0 <HAL_DMA_Start_IT+0x430>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a27      	ldr	r2, [pc, #156]	; (8005640 <HAL_DMA_Start_IT+0x4a0>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d013      	beq.n	80055d0 <HAL_DMA_Start_IT+0x430>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a25      	ldr	r2, [pc, #148]	; (8005644 <HAL_DMA_Start_IT+0x4a4>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00e      	beq.n	80055d0 <HAL_DMA_Start_IT+0x430>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a24      	ldr	r2, [pc, #144]	; (8005648 <HAL_DMA_Start_IT+0x4a8>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d009      	beq.n	80055d0 <HAL_DMA_Start_IT+0x430>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a22      	ldr	r2, [pc, #136]	; (800564c <HAL_DMA_Start_IT+0x4ac>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d004      	beq.n	80055d0 <HAL_DMA_Start_IT+0x430>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a21      	ldr	r2, [pc, #132]	; (8005650 <HAL_DMA_Start_IT+0x4b0>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d108      	bne.n	80055e2 <HAL_DMA_Start_IT+0x442>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0201 	orr.w	r2, r2, #1
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	e012      	b.n	8005608 <HAL_DMA_Start_IT+0x468>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 0201 	orr.w	r2, r2, #1
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	e009      	b.n	8005608 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005608:	7dfb      	ldrb	r3, [r7, #23]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3718      	adds	r7, #24
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	40020010 	.word	0x40020010
 8005618:	40020028 	.word	0x40020028
 800561c:	40020040 	.word	0x40020040
 8005620:	40020058 	.word	0x40020058
 8005624:	40020070 	.word	0x40020070
 8005628:	40020088 	.word	0x40020088
 800562c:	400200a0 	.word	0x400200a0
 8005630:	400200b8 	.word	0x400200b8
 8005634:	40020410 	.word	0x40020410
 8005638:	40020428 	.word	0x40020428
 800563c:	40020440 	.word	0x40020440
 8005640:	40020458 	.word	0x40020458
 8005644:	40020470 	.word	0x40020470
 8005648:	40020488 	.word	0x40020488
 800564c:	400204a0 	.word	0x400204a0
 8005650:	400204b8 	.word	0x400204b8
 8005654:	58025408 	.word	0x58025408
 8005658:	5802541c 	.word	0x5802541c
 800565c:	58025430 	.word	0x58025430
 8005660:	58025444 	.word	0x58025444
 8005664:	58025458 	.word	0x58025458
 8005668:	5802546c 	.word	0x5802546c
 800566c:	58025480 	.word	0x58025480
 8005670:	58025494 	.word	0x58025494

08005674 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800567c:	f7fd f9c0 	bl	8002a00 <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e2dc      	b.n	8005c46 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b02      	cmp	r3, #2
 8005696:	d008      	beq.n	80056aa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2280      	movs	r2, #128	; 0x80
 800569c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e2cd      	b.n	8005c46 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a76      	ldr	r2, [pc, #472]	; (8005888 <HAL_DMA_Abort+0x214>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d04a      	beq.n	800574a <HAL_DMA_Abort+0xd6>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a74      	ldr	r2, [pc, #464]	; (800588c <HAL_DMA_Abort+0x218>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d045      	beq.n	800574a <HAL_DMA_Abort+0xd6>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a73      	ldr	r2, [pc, #460]	; (8005890 <HAL_DMA_Abort+0x21c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d040      	beq.n	800574a <HAL_DMA_Abort+0xd6>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a71      	ldr	r2, [pc, #452]	; (8005894 <HAL_DMA_Abort+0x220>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d03b      	beq.n	800574a <HAL_DMA_Abort+0xd6>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a70      	ldr	r2, [pc, #448]	; (8005898 <HAL_DMA_Abort+0x224>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d036      	beq.n	800574a <HAL_DMA_Abort+0xd6>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a6e      	ldr	r2, [pc, #440]	; (800589c <HAL_DMA_Abort+0x228>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d031      	beq.n	800574a <HAL_DMA_Abort+0xd6>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a6d      	ldr	r2, [pc, #436]	; (80058a0 <HAL_DMA_Abort+0x22c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d02c      	beq.n	800574a <HAL_DMA_Abort+0xd6>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a6b      	ldr	r2, [pc, #428]	; (80058a4 <HAL_DMA_Abort+0x230>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d027      	beq.n	800574a <HAL_DMA_Abort+0xd6>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a6a      	ldr	r2, [pc, #424]	; (80058a8 <HAL_DMA_Abort+0x234>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d022      	beq.n	800574a <HAL_DMA_Abort+0xd6>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a68      	ldr	r2, [pc, #416]	; (80058ac <HAL_DMA_Abort+0x238>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d01d      	beq.n	800574a <HAL_DMA_Abort+0xd6>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a67      	ldr	r2, [pc, #412]	; (80058b0 <HAL_DMA_Abort+0x23c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d018      	beq.n	800574a <HAL_DMA_Abort+0xd6>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a65      	ldr	r2, [pc, #404]	; (80058b4 <HAL_DMA_Abort+0x240>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d013      	beq.n	800574a <HAL_DMA_Abort+0xd6>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a64      	ldr	r2, [pc, #400]	; (80058b8 <HAL_DMA_Abort+0x244>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d00e      	beq.n	800574a <HAL_DMA_Abort+0xd6>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a62      	ldr	r2, [pc, #392]	; (80058bc <HAL_DMA_Abort+0x248>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d009      	beq.n	800574a <HAL_DMA_Abort+0xd6>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a61      	ldr	r2, [pc, #388]	; (80058c0 <HAL_DMA_Abort+0x24c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d004      	beq.n	800574a <HAL_DMA_Abort+0xd6>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a5f      	ldr	r2, [pc, #380]	; (80058c4 <HAL_DMA_Abort+0x250>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d101      	bne.n	800574e <HAL_DMA_Abort+0xda>
 800574a:	2301      	movs	r3, #1
 800574c:	e000      	b.n	8005750 <HAL_DMA_Abort+0xdc>
 800574e:	2300      	movs	r3, #0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d013      	beq.n	800577c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 021e 	bic.w	r2, r2, #30
 8005762:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695a      	ldr	r2, [r3, #20]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005772:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	e00a      	b.n	8005792 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 020e 	bic.w	r2, r2, #14
 800578a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a3c      	ldr	r2, [pc, #240]	; (8005888 <HAL_DMA_Abort+0x214>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d072      	beq.n	8005882 <HAL_DMA_Abort+0x20e>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a3a      	ldr	r2, [pc, #232]	; (800588c <HAL_DMA_Abort+0x218>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d06d      	beq.n	8005882 <HAL_DMA_Abort+0x20e>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a39      	ldr	r2, [pc, #228]	; (8005890 <HAL_DMA_Abort+0x21c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d068      	beq.n	8005882 <HAL_DMA_Abort+0x20e>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a37      	ldr	r2, [pc, #220]	; (8005894 <HAL_DMA_Abort+0x220>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d063      	beq.n	8005882 <HAL_DMA_Abort+0x20e>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a36      	ldr	r2, [pc, #216]	; (8005898 <HAL_DMA_Abort+0x224>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d05e      	beq.n	8005882 <HAL_DMA_Abort+0x20e>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a34      	ldr	r2, [pc, #208]	; (800589c <HAL_DMA_Abort+0x228>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d059      	beq.n	8005882 <HAL_DMA_Abort+0x20e>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a33      	ldr	r2, [pc, #204]	; (80058a0 <HAL_DMA_Abort+0x22c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d054      	beq.n	8005882 <HAL_DMA_Abort+0x20e>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a31      	ldr	r2, [pc, #196]	; (80058a4 <HAL_DMA_Abort+0x230>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d04f      	beq.n	8005882 <HAL_DMA_Abort+0x20e>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a30      	ldr	r2, [pc, #192]	; (80058a8 <HAL_DMA_Abort+0x234>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d04a      	beq.n	8005882 <HAL_DMA_Abort+0x20e>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a2e      	ldr	r2, [pc, #184]	; (80058ac <HAL_DMA_Abort+0x238>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d045      	beq.n	8005882 <HAL_DMA_Abort+0x20e>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a2d      	ldr	r2, [pc, #180]	; (80058b0 <HAL_DMA_Abort+0x23c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d040      	beq.n	8005882 <HAL_DMA_Abort+0x20e>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a2b      	ldr	r2, [pc, #172]	; (80058b4 <HAL_DMA_Abort+0x240>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d03b      	beq.n	8005882 <HAL_DMA_Abort+0x20e>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a2a      	ldr	r2, [pc, #168]	; (80058b8 <HAL_DMA_Abort+0x244>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d036      	beq.n	8005882 <HAL_DMA_Abort+0x20e>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a28      	ldr	r2, [pc, #160]	; (80058bc <HAL_DMA_Abort+0x248>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d031      	beq.n	8005882 <HAL_DMA_Abort+0x20e>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a27      	ldr	r2, [pc, #156]	; (80058c0 <HAL_DMA_Abort+0x24c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d02c      	beq.n	8005882 <HAL_DMA_Abort+0x20e>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a25      	ldr	r2, [pc, #148]	; (80058c4 <HAL_DMA_Abort+0x250>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d027      	beq.n	8005882 <HAL_DMA_Abort+0x20e>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a24      	ldr	r2, [pc, #144]	; (80058c8 <HAL_DMA_Abort+0x254>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d022      	beq.n	8005882 <HAL_DMA_Abort+0x20e>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a22      	ldr	r2, [pc, #136]	; (80058cc <HAL_DMA_Abort+0x258>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d01d      	beq.n	8005882 <HAL_DMA_Abort+0x20e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a21      	ldr	r2, [pc, #132]	; (80058d0 <HAL_DMA_Abort+0x25c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d018      	beq.n	8005882 <HAL_DMA_Abort+0x20e>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a1f      	ldr	r2, [pc, #124]	; (80058d4 <HAL_DMA_Abort+0x260>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d013      	beq.n	8005882 <HAL_DMA_Abort+0x20e>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a1e      	ldr	r2, [pc, #120]	; (80058d8 <HAL_DMA_Abort+0x264>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d00e      	beq.n	8005882 <HAL_DMA_Abort+0x20e>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a1c      	ldr	r2, [pc, #112]	; (80058dc <HAL_DMA_Abort+0x268>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d009      	beq.n	8005882 <HAL_DMA_Abort+0x20e>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a1b      	ldr	r2, [pc, #108]	; (80058e0 <HAL_DMA_Abort+0x26c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d004      	beq.n	8005882 <HAL_DMA_Abort+0x20e>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a19      	ldr	r2, [pc, #100]	; (80058e4 <HAL_DMA_Abort+0x270>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d132      	bne.n	80058e8 <HAL_DMA_Abort+0x274>
 8005882:	2301      	movs	r3, #1
 8005884:	e031      	b.n	80058ea <HAL_DMA_Abort+0x276>
 8005886:	bf00      	nop
 8005888:	40020010 	.word	0x40020010
 800588c:	40020028 	.word	0x40020028
 8005890:	40020040 	.word	0x40020040
 8005894:	40020058 	.word	0x40020058
 8005898:	40020070 	.word	0x40020070
 800589c:	40020088 	.word	0x40020088
 80058a0:	400200a0 	.word	0x400200a0
 80058a4:	400200b8 	.word	0x400200b8
 80058a8:	40020410 	.word	0x40020410
 80058ac:	40020428 	.word	0x40020428
 80058b0:	40020440 	.word	0x40020440
 80058b4:	40020458 	.word	0x40020458
 80058b8:	40020470 	.word	0x40020470
 80058bc:	40020488 	.word	0x40020488
 80058c0:	400204a0 	.word	0x400204a0
 80058c4:	400204b8 	.word	0x400204b8
 80058c8:	58025408 	.word	0x58025408
 80058cc:	5802541c 	.word	0x5802541c
 80058d0:	58025430 	.word	0x58025430
 80058d4:	58025444 	.word	0x58025444
 80058d8:	58025458 	.word	0x58025458
 80058dc:	5802546c 	.word	0x5802546c
 80058e0:	58025480 	.word	0x58025480
 80058e4:	58025494 	.word	0x58025494
 80058e8:	2300      	movs	r3, #0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d007      	beq.n	80058fe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a6d      	ldr	r2, [pc, #436]	; (8005ab8 <HAL_DMA_Abort+0x444>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d04a      	beq.n	800599e <HAL_DMA_Abort+0x32a>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a6b      	ldr	r2, [pc, #428]	; (8005abc <HAL_DMA_Abort+0x448>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d045      	beq.n	800599e <HAL_DMA_Abort+0x32a>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a6a      	ldr	r2, [pc, #424]	; (8005ac0 <HAL_DMA_Abort+0x44c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d040      	beq.n	800599e <HAL_DMA_Abort+0x32a>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a68      	ldr	r2, [pc, #416]	; (8005ac4 <HAL_DMA_Abort+0x450>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d03b      	beq.n	800599e <HAL_DMA_Abort+0x32a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a67      	ldr	r2, [pc, #412]	; (8005ac8 <HAL_DMA_Abort+0x454>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d036      	beq.n	800599e <HAL_DMA_Abort+0x32a>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a65      	ldr	r2, [pc, #404]	; (8005acc <HAL_DMA_Abort+0x458>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d031      	beq.n	800599e <HAL_DMA_Abort+0x32a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a64      	ldr	r2, [pc, #400]	; (8005ad0 <HAL_DMA_Abort+0x45c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d02c      	beq.n	800599e <HAL_DMA_Abort+0x32a>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a62      	ldr	r2, [pc, #392]	; (8005ad4 <HAL_DMA_Abort+0x460>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d027      	beq.n	800599e <HAL_DMA_Abort+0x32a>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a61      	ldr	r2, [pc, #388]	; (8005ad8 <HAL_DMA_Abort+0x464>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d022      	beq.n	800599e <HAL_DMA_Abort+0x32a>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a5f      	ldr	r2, [pc, #380]	; (8005adc <HAL_DMA_Abort+0x468>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d01d      	beq.n	800599e <HAL_DMA_Abort+0x32a>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a5e      	ldr	r2, [pc, #376]	; (8005ae0 <HAL_DMA_Abort+0x46c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d018      	beq.n	800599e <HAL_DMA_Abort+0x32a>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a5c      	ldr	r2, [pc, #368]	; (8005ae4 <HAL_DMA_Abort+0x470>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d013      	beq.n	800599e <HAL_DMA_Abort+0x32a>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a5b      	ldr	r2, [pc, #364]	; (8005ae8 <HAL_DMA_Abort+0x474>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00e      	beq.n	800599e <HAL_DMA_Abort+0x32a>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a59      	ldr	r2, [pc, #356]	; (8005aec <HAL_DMA_Abort+0x478>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d009      	beq.n	800599e <HAL_DMA_Abort+0x32a>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a58      	ldr	r2, [pc, #352]	; (8005af0 <HAL_DMA_Abort+0x47c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d004      	beq.n	800599e <HAL_DMA_Abort+0x32a>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a56      	ldr	r2, [pc, #344]	; (8005af4 <HAL_DMA_Abort+0x480>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d108      	bne.n	80059b0 <HAL_DMA_Abort+0x33c>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0201 	bic.w	r2, r2, #1
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	e007      	b.n	80059c0 <HAL_DMA_Abort+0x34c>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0201 	bic.w	r2, r2, #1
 80059be:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80059c0:	e013      	b.n	80059ea <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059c2:	f7fd f81d 	bl	8002a00 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	2b05      	cmp	r3, #5
 80059ce:	d90c      	bls.n	80059ea <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2220      	movs	r2, #32
 80059d4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2203      	movs	r2, #3
 80059da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e12d      	b.n	8005c46 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1e5      	bne.n	80059c2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a2f      	ldr	r2, [pc, #188]	; (8005ab8 <HAL_DMA_Abort+0x444>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d04a      	beq.n	8005a96 <HAL_DMA_Abort+0x422>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a2d      	ldr	r2, [pc, #180]	; (8005abc <HAL_DMA_Abort+0x448>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d045      	beq.n	8005a96 <HAL_DMA_Abort+0x422>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a2c      	ldr	r2, [pc, #176]	; (8005ac0 <HAL_DMA_Abort+0x44c>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d040      	beq.n	8005a96 <HAL_DMA_Abort+0x422>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a2a      	ldr	r2, [pc, #168]	; (8005ac4 <HAL_DMA_Abort+0x450>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d03b      	beq.n	8005a96 <HAL_DMA_Abort+0x422>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a29      	ldr	r2, [pc, #164]	; (8005ac8 <HAL_DMA_Abort+0x454>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d036      	beq.n	8005a96 <HAL_DMA_Abort+0x422>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a27      	ldr	r2, [pc, #156]	; (8005acc <HAL_DMA_Abort+0x458>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d031      	beq.n	8005a96 <HAL_DMA_Abort+0x422>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a26      	ldr	r2, [pc, #152]	; (8005ad0 <HAL_DMA_Abort+0x45c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d02c      	beq.n	8005a96 <HAL_DMA_Abort+0x422>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a24      	ldr	r2, [pc, #144]	; (8005ad4 <HAL_DMA_Abort+0x460>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d027      	beq.n	8005a96 <HAL_DMA_Abort+0x422>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a23      	ldr	r2, [pc, #140]	; (8005ad8 <HAL_DMA_Abort+0x464>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d022      	beq.n	8005a96 <HAL_DMA_Abort+0x422>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a21      	ldr	r2, [pc, #132]	; (8005adc <HAL_DMA_Abort+0x468>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d01d      	beq.n	8005a96 <HAL_DMA_Abort+0x422>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a20      	ldr	r2, [pc, #128]	; (8005ae0 <HAL_DMA_Abort+0x46c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d018      	beq.n	8005a96 <HAL_DMA_Abort+0x422>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a1e      	ldr	r2, [pc, #120]	; (8005ae4 <HAL_DMA_Abort+0x470>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d013      	beq.n	8005a96 <HAL_DMA_Abort+0x422>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a1d      	ldr	r2, [pc, #116]	; (8005ae8 <HAL_DMA_Abort+0x474>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d00e      	beq.n	8005a96 <HAL_DMA_Abort+0x422>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a1b      	ldr	r2, [pc, #108]	; (8005aec <HAL_DMA_Abort+0x478>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d009      	beq.n	8005a96 <HAL_DMA_Abort+0x422>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a1a      	ldr	r2, [pc, #104]	; (8005af0 <HAL_DMA_Abort+0x47c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d004      	beq.n	8005a96 <HAL_DMA_Abort+0x422>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a18      	ldr	r2, [pc, #96]	; (8005af4 <HAL_DMA_Abort+0x480>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d101      	bne.n	8005a9a <HAL_DMA_Abort+0x426>
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <HAL_DMA_Abort+0x428>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d02b      	beq.n	8005af8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aaa:	f003 031f 	and.w	r3, r3, #31
 8005aae:	223f      	movs	r2, #63	; 0x3f
 8005ab0:	409a      	lsls	r2, r3
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	609a      	str	r2, [r3, #8]
 8005ab6:	e02a      	b.n	8005b0e <HAL_DMA_Abort+0x49a>
 8005ab8:	40020010 	.word	0x40020010
 8005abc:	40020028 	.word	0x40020028
 8005ac0:	40020040 	.word	0x40020040
 8005ac4:	40020058 	.word	0x40020058
 8005ac8:	40020070 	.word	0x40020070
 8005acc:	40020088 	.word	0x40020088
 8005ad0:	400200a0 	.word	0x400200a0
 8005ad4:	400200b8 	.word	0x400200b8
 8005ad8:	40020410 	.word	0x40020410
 8005adc:	40020428 	.word	0x40020428
 8005ae0:	40020440 	.word	0x40020440
 8005ae4:	40020458 	.word	0x40020458
 8005ae8:	40020470 	.word	0x40020470
 8005aec:	40020488 	.word	0x40020488
 8005af0:	400204a0 	.word	0x400204a0
 8005af4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b02:	f003 031f 	and.w	r3, r3, #31
 8005b06:	2201      	movs	r2, #1
 8005b08:	409a      	lsls	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a4f      	ldr	r2, [pc, #316]	; (8005c50 <HAL_DMA_Abort+0x5dc>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d072      	beq.n	8005bfe <HAL_DMA_Abort+0x58a>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a4d      	ldr	r2, [pc, #308]	; (8005c54 <HAL_DMA_Abort+0x5e0>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d06d      	beq.n	8005bfe <HAL_DMA_Abort+0x58a>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a4c      	ldr	r2, [pc, #304]	; (8005c58 <HAL_DMA_Abort+0x5e4>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d068      	beq.n	8005bfe <HAL_DMA_Abort+0x58a>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a4a      	ldr	r2, [pc, #296]	; (8005c5c <HAL_DMA_Abort+0x5e8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d063      	beq.n	8005bfe <HAL_DMA_Abort+0x58a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a49      	ldr	r2, [pc, #292]	; (8005c60 <HAL_DMA_Abort+0x5ec>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d05e      	beq.n	8005bfe <HAL_DMA_Abort+0x58a>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a47      	ldr	r2, [pc, #284]	; (8005c64 <HAL_DMA_Abort+0x5f0>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d059      	beq.n	8005bfe <HAL_DMA_Abort+0x58a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a46      	ldr	r2, [pc, #280]	; (8005c68 <HAL_DMA_Abort+0x5f4>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d054      	beq.n	8005bfe <HAL_DMA_Abort+0x58a>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a44      	ldr	r2, [pc, #272]	; (8005c6c <HAL_DMA_Abort+0x5f8>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d04f      	beq.n	8005bfe <HAL_DMA_Abort+0x58a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a43      	ldr	r2, [pc, #268]	; (8005c70 <HAL_DMA_Abort+0x5fc>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d04a      	beq.n	8005bfe <HAL_DMA_Abort+0x58a>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a41      	ldr	r2, [pc, #260]	; (8005c74 <HAL_DMA_Abort+0x600>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d045      	beq.n	8005bfe <HAL_DMA_Abort+0x58a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a40      	ldr	r2, [pc, #256]	; (8005c78 <HAL_DMA_Abort+0x604>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d040      	beq.n	8005bfe <HAL_DMA_Abort+0x58a>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a3e      	ldr	r2, [pc, #248]	; (8005c7c <HAL_DMA_Abort+0x608>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d03b      	beq.n	8005bfe <HAL_DMA_Abort+0x58a>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a3d      	ldr	r2, [pc, #244]	; (8005c80 <HAL_DMA_Abort+0x60c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d036      	beq.n	8005bfe <HAL_DMA_Abort+0x58a>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a3b      	ldr	r2, [pc, #236]	; (8005c84 <HAL_DMA_Abort+0x610>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d031      	beq.n	8005bfe <HAL_DMA_Abort+0x58a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a3a      	ldr	r2, [pc, #232]	; (8005c88 <HAL_DMA_Abort+0x614>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d02c      	beq.n	8005bfe <HAL_DMA_Abort+0x58a>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a38      	ldr	r2, [pc, #224]	; (8005c8c <HAL_DMA_Abort+0x618>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d027      	beq.n	8005bfe <HAL_DMA_Abort+0x58a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a37      	ldr	r2, [pc, #220]	; (8005c90 <HAL_DMA_Abort+0x61c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d022      	beq.n	8005bfe <HAL_DMA_Abort+0x58a>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a35      	ldr	r2, [pc, #212]	; (8005c94 <HAL_DMA_Abort+0x620>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d01d      	beq.n	8005bfe <HAL_DMA_Abort+0x58a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a34      	ldr	r2, [pc, #208]	; (8005c98 <HAL_DMA_Abort+0x624>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d018      	beq.n	8005bfe <HAL_DMA_Abort+0x58a>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a32      	ldr	r2, [pc, #200]	; (8005c9c <HAL_DMA_Abort+0x628>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d013      	beq.n	8005bfe <HAL_DMA_Abort+0x58a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a31      	ldr	r2, [pc, #196]	; (8005ca0 <HAL_DMA_Abort+0x62c>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d00e      	beq.n	8005bfe <HAL_DMA_Abort+0x58a>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a2f      	ldr	r2, [pc, #188]	; (8005ca4 <HAL_DMA_Abort+0x630>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d009      	beq.n	8005bfe <HAL_DMA_Abort+0x58a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a2e      	ldr	r2, [pc, #184]	; (8005ca8 <HAL_DMA_Abort+0x634>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d004      	beq.n	8005bfe <HAL_DMA_Abort+0x58a>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a2c      	ldr	r2, [pc, #176]	; (8005cac <HAL_DMA_Abort+0x638>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d101      	bne.n	8005c02 <HAL_DMA_Abort+0x58e>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e000      	b.n	8005c04 <HAL_DMA_Abort+0x590>
 8005c02:	2300      	movs	r3, #0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d015      	beq.n	8005c34 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c10:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00c      	beq.n	8005c34 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c28:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c32:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	40020010 	.word	0x40020010
 8005c54:	40020028 	.word	0x40020028
 8005c58:	40020040 	.word	0x40020040
 8005c5c:	40020058 	.word	0x40020058
 8005c60:	40020070 	.word	0x40020070
 8005c64:	40020088 	.word	0x40020088
 8005c68:	400200a0 	.word	0x400200a0
 8005c6c:	400200b8 	.word	0x400200b8
 8005c70:	40020410 	.word	0x40020410
 8005c74:	40020428 	.word	0x40020428
 8005c78:	40020440 	.word	0x40020440
 8005c7c:	40020458 	.word	0x40020458
 8005c80:	40020470 	.word	0x40020470
 8005c84:	40020488 	.word	0x40020488
 8005c88:	400204a0 	.word	0x400204a0
 8005c8c:	400204b8 	.word	0x400204b8
 8005c90:	58025408 	.word	0x58025408
 8005c94:	5802541c 	.word	0x5802541c
 8005c98:	58025430 	.word	0x58025430
 8005c9c:	58025444 	.word	0x58025444
 8005ca0:	58025458 	.word	0x58025458
 8005ca4:	5802546c 	.word	0x5802546c
 8005ca8:	58025480 	.word	0x58025480
 8005cac:	58025494 	.word	0x58025494

08005cb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e237      	b.n	8006132 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d004      	beq.n	8005cd8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2280      	movs	r2, #128	; 0x80
 8005cd2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e22c      	b.n	8006132 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a5c      	ldr	r2, [pc, #368]	; (8005e50 <HAL_DMA_Abort_IT+0x1a0>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d04a      	beq.n	8005d78 <HAL_DMA_Abort_IT+0xc8>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a5b      	ldr	r2, [pc, #364]	; (8005e54 <HAL_DMA_Abort_IT+0x1a4>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d045      	beq.n	8005d78 <HAL_DMA_Abort_IT+0xc8>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a59      	ldr	r2, [pc, #356]	; (8005e58 <HAL_DMA_Abort_IT+0x1a8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d040      	beq.n	8005d78 <HAL_DMA_Abort_IT+0xc8>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a58      	ldr	r2, [pc, #352]	; (8005e5c <HAL_DMA_Abort_IT+0x1ac>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d03b      	beq.n	8005d78 <HAL_DMA_Abort_IT+0xc8>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a56      	ldr	r2, [pc, #344]	; (8005e60 <HAL_DMA_Abort_IT+0x1b0>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d036      	beq.n	8005d78 <HAL_DMA_Abort_IT+0xc8>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a55      	ldr	r2, [pc, #340]	; (8005e64 <HAL_DMA_Abort_IT+0x1b4>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d031      	beq.n	8005d78 <HAL_DMA_Abort_IT+0xc8>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a53      	ldr	r2, [pc, #332]	; (8005e68 <HAL_DMA_Abort_IT+0x1b8>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d02c      	beq.n	8005d78 <HAL_DMA_Abort_IT+0xc8>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a52      	ldr	r2, [pc, #328]	; (8005e6c <HAL_DMA_Abort_IT+0x1bc>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d027      	beq.n	8005d78 <HAL_DMA_Abort_IT+0xc8>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a50      	ldr	r2, [pc, #320]	; (8005e70 <HAL_DMA_Abort_IT+0x1c0>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d022      	beq.n	8005d78 <HAL_DMA_Abort_IT+0xc8>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a4f      	ldr	r2, [pc, #316]	; (8005e74 <HAL_DMA_Abort_IT+0x1c4>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d01d      	beq.n	8005d78 <HAL_DMA_Abort_IT+0xc8>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a4d      	ldr	r2, [pc, #308]	; (8005e78 <HAL_DMA_Abort_IT+0x1c8>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d018      	beq.n	8005d78 <HAL_DMA_Abort_IT+0xc8>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a4c      	ldr	r2, [pc, #304]	; (8005e7c <HAL_DMA_Abort_IT+0x1cc>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d013      	beq.n	8005d78 <HAL_DMA_Abort_IT+0xc8>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a4a      	ldr	r2, [pc, #296]	; (8005e80 <HAL_DMA_Abort_IT+0x1d0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00e      	beq.n	8005d78 <HAL_DMA_Abort_IT+0xc8>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a49      	ldr	r2, [pc, #292]	; (8005e84 <HAL_DMA_Abort_IT+0x1d4>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d009      	beq.n	8005d78 <HAL_DMA_Abort_IT+0xc8>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a47      	ldr	r2, [pc, #284]	; (8005e88 <HAL_DMA_Abort_IT+0x1d8>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d004      	beq.n	8005d78 <HAL_DMA_Abort_IT+0xc8>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a46      	ldr	r2, [pc, #280]	; (8005e8c <HAL_DMA_Abort_IT+0x1dc>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d101      	bne.n	8005d7c <HAL_DMA_Abort_IT+0xcc>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e000      	b.n	8005d7e <HAL_DMA_Abort_IT+0xce>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 8086 	beq.w	8005e90 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2204      	movs	r2, #4
 8005d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a2f      	ldr	r2, [pc, #188]	; (8005e50 <HAL_DMA_Abort_IT+0x1a0>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d04a      	beq.n	8005e2c <HAL_DMA_Abort_IT+0x17c>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a2e      	ldr	r2, [pc, #184]	; (8005e54 <HAL_DMA_Abort_IT+0x1a4>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d045      	beq.n	8005e2c <HAL_DMA_Abort_IT+0x17c>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a2c      	ldr	r2, [pc, #176]	; (8005e58 <HAL_DMA_Abort_IT+0x1a8>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d040      	beq.n	8005e2c <HAL_DMA_Abort_IT+0x17c>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a2b      	ldr	r2, [pc, #172]	; (8005e5c <HAL_DMA_Abort_IT+0x1ac>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d03b      	beq.n	8005e2c <HAL_DMA_Abort_IT+0x17c>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a29      	ldr	r2, [pc, #164]	; (8005e60 <HAL_DMA_Abort_IT+0x1b0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d036      	beq.n	8005e2c <HAL_DMA_Abort_IT+0x17c>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a28      	ldr	r2, [pc, #160]	; (8005e64 <HAL_DMA_Abort_IT+0x1b4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d031      	beq.n	8005e2c <HAL_DMA_Abort_IT+0x17c>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a26      	ldr	r2, [pc, #152]	; (8005e68 <HAL_DMA_Abort_IT+0x1b8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d02c      	beq.n	8005e2c <HAL_DMA_Abort_IT+0x17c>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a25      	ldr	r2, [pc, #148]	; (8005e6c <HAL_DMA_Abort_IT+0x1bc>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d027      	beq.n	8005e2c <HAL_DMA_Abort_IT+0x17c>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a23      	ldr	r2, [pc, #140]	; (8005e70 <HAL_DMA_Abort_IT+0x1c0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d022      	beq.n	8005e2c <HAL_DMA_Abort_IT+0x17c>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a22      	ldr	r2, [pc, #136]	; (8005e74 <HAL_DMA_Abort_IT+0x1c4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d01d      	beq.n	8005e2c <HAL_DMA_Abort_IT+0x17c>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a20      	ldr	r2, [pc, #128]	; (8005e78 <HAL_DMA_Abort_IT+0x1c8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d018      	beq.n	8005e2c <HAL_DMA_Abort_IT+0x17c>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a1f      	ldr	r2, [pc, #124]	; (8005e7c <HAL_DMA_Abort_IT+0x1cc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d013      	beq.n	8005e2c <HAL_DMA_Abort_IT+0x17c>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a1d      	ldr	r2, [pc, #116]	; (8005e80 <HAL_DMA_Abort_IT+0x1d0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00e      	beq.n	8005e2c <HAL_DMA_Abort_IT+0x17c>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a1c      	ldr	r2, [pc, #112]	; (8005e84 <HAL_DMA_Abort_IT+0x1d4>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d009      	beq.n	8005e2c <HAL_DMA_Abort_IT+0x17c>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a1a      	ldr	r2, [pc, #104]	; (8005e88 <HAL_DMA_Abort_IT+0x1d8>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d004      	beq.n	8005e2c <HAL_DMA_Abort_IT+0x17c>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a19      	ldr	r2, [pc, #100]	; (8005e8c <HAL_DMA_Abort_IT+0x1dc>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d108      	bne.n	8005e3e <HAL_DMA_Abort_IT+0x18e>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 0201 	bic.w	r2, r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	e178      	b.n	8006130 <HAL_DMA_Abort_IT+0x480>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0201 	bic.w	r2, r2, #1
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	e16f      	b.n	8006130 <HAL_DMA_Abort_IT+0x480>
 8005e50:	40020010 	.word	0x40020010
 8005e54:	40020028 	.word	0x40020028
 8005e58:	40020040 	.word	0x40020040
 8005e5c:	40020058 	.word	0x40020058
 8005e60:	40020070 	.word	0x40020070
 8005e64:	40020088 	.word	0x40020088
 8005e68:	400200a0 	.word	0x400200a0
 8005e6c:	400200b8 	.word	0x400200b8
 8005e70:	40020410 	.word	0x40020410
 8005e74:	40020428 	.word	0x40020428
 8005e78:	40020440 	.word	0x40020440
 8005e7c:	40020458 	.word	0x40020458
 8005e80:	40020470 	.word	0x40020470
 8005e84:	40020488 	.word	0x40020488
 8005e88:	400204a0 	.word	0x400204a0
 8005e8c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 020e 	bic.w	r2, r2, #14
 8005e9e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a6c      	ldr	r2, [pc, #432]	; (8006058 <HAL_DMA_Abort_IT+0x3a8>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d04a      	beq.n	8005f40 <HAL_DMA_Abort_IT+0x290>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a6b      	ldr	r2, [pc, #428]	; (800605c <HAL_DMA_Abort_IT+0x3ac>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d045      	beq.n	8005f40 <HAL_DMA_Abort_IT+0x290>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a69      	ldr	r2, [pc, #420]	; (8006060 <HAL_DMA_Abort_IT+0x3b0>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d040      	beq.n	8005f40 <HAL_DMA_Abort_IT+0x290>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a68      	ldr	r2, [pc, #416]	; (8006064 <HAL_DMA_Abort_IT+0x3b4>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d03b      	beq.n	8005f40 <HAL_DMA_Abort_IT+0x290>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a66      	ldr	r2, [pc, #408]	; (8006068 <HAL_DMA_Abort_IT+0x3b8>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d036      	beq.n	8005f40 <HAL_DMA_Abort_IT+0x290>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a65      	ldr	r2, [pc, #404]	; (800606c <HAL_DMA_Abort_IT+0x3bc>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d031      	beq.n	8005f40 <HAL_DMA_Abort_IT+0x290>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a63      	ldr	r2, [pc, #396]	; (8006070 <HAL_DMA_Abort_IT+0x3c0>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d02c      	beq.n	8005f40 <HAL_DMA_Abort_IT+0x290>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a62      	ldr	r2, [pc, #392]	; (8006074 <HAL_DMA_Abort_IT+0x3c4>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d027      	beq.n	8005f40 <HAL_DMA_Abort_IT+0x290>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a60      	ldr	r2, [pc, #384]	; (8006078 <HAL_DMA_Abort_IT+0x3c8>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d022      	beq.n	8005f40 <HAL_DMA_Abort_IT+0x290>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a5f      	ldr	r2, [pc, #380]	; (800607c <HAL_DMA_Abort_IT+0x3cc>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d01d      	beq.n	8005f40 <HAL_DMA_Abort_IT+0x290>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a5d      	ldr	r2, [pc, #372]	; (8006080 <HAL_DMA_Abort_IT+0x3d0>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d018      	beq.n	8005f40 <HAL_DMA_Abort_IT+0x290>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a5c      	ldr	r2, [pc, #368]	; (8006084 <HAL_DMA_Abort_IT+0x3d4>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d013      	beq.n	8005f40 <HAL_DMA_Abort_IT+0x290>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a5a      	ldr	r2, [pc, #360]	; (8006088 <HAL_DMA_Abort_IT+0x3d8>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d00e      	beq.n	8005f40 <HAL_DMA_Abort_IT+0x290>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a59      	ldr	r2, [pc, #356]	; (800608c <HAL_DMA_Abort_IT+0x3dc>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d009      	beq.n	8005f40 <HAL_DMA_Abort_IT+0x290>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a57      	ldr	r2, [pc, #348]	; (8006090 <HAL_DMA_Abort_IT+0x3e0>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d004      	beq.n	8005f40 <HAL_DMA_Abort_IT+0x290>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a56      	ldr	r2, [pc, #344]	; (8006094 <HAL_DMA_Abort_IT+0x3e4>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d108      	bne.n	8005f52 <HAL_DMA_Abort_IT+0x2a2>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 0201 	bic.w	r2, r2, #1
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	e007      	b.n	8005f62 <HAL_DMA_Abort_IT+0x2b2>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0201 	bic.w	r2, r2, #1
 8005f60:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a3c      	ldr	r2, [pc, #240]	; (8006058 <HAL_DMA_Abort_IT+0x3a8>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d072      	beq.n	8006052 <HAL_DMA_Abort_IT+0x3a2>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a3a      	ldr	r2, [pc, #232]	; (800605c <HAL_DMA_Abort_IT+0x3ac>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d06d      	beq.n	8006052 <HAL_DMA_Abort_IT+0x3a2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a39      	ldr	r2, [pc, #228]	; (8006060 <HAL_DMA_Abort_IT+0x3b0>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d068      	beq.n	8006052 <HAL_DMA_Abort_IT+0x3a2>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a37      	ldr	r2, [pc, #220]	; (8006064 <HAL_DMA_Abort_IT+0x3b4>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d063      	beq.n	8006052 <HAL_DMA_Abort_IT+0x3a2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a36      	ldr	r2, [pc, #216]	; (8006068 <HAL_DMA_Abort_IT+0x3b8>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d05e      	beq.n	8006052 <HAL_DMA_Abort_IT+0x3a2>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a34      	ldr	r2, [pc, #208]	; (800606c <HAL_DMA_Abort_IT+0x3bc>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d059      	beq.n	8006052 <HAL_DMA_Abort_IT+0x3a2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a33      	ldr	r2, [pc, #204]	; (8006070 <HAL_DMA_Abort_IT+0x3c0>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d054      	beq.n	8006052 <HAL_DMA_Abort_IT+0x3a2>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a31      	ldr	r2, [pc, #196]	; (8006074 <HAL_DMA_Abort_IT+0x3c4>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d04f      	beq.n	8006052 <HAL_DMA_Abort_IT+0x3a2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a30      	ldr	r2, [pc, #192]	; (8006078 <HAL_DMA_Abort_IT+0x3c8>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d04a      	beq.n	8006052 <HAL_DMA_Abort_IT+0x3a2>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a2e      	ldr	r2, [pc, #184]	; (800607c <HAL_DMA_Abort_IT+0x3cc>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d045      	beq.n	8006052 <HAL_DMA_Abort_IT+0x3a2>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a2d      	ldr	r2, [pc, #180]	; (8006080 <HAL_DMA_Abort_IT+0x3d0>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d040      	beq.n	8006052 <HAL_DMA_Abort_IT+0x3a2>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a2b      	ldr	r2, [pc, #172]	; (8006084 <HAL_DMA_Abort_IT+0x3d4>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d03b      	beq.n	8006052 <HAL_DMA_Abort_IT+0x3a2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a2a      	ldr	r2, [pc, #168]	; (8006088 <HAL_DMA_Abort_IT+0x3d8>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d036      	beq.n	8006052 <HAL_DMA_Abort_IT+0x3a2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a28      	ldr	r2, [pc, #160]	; (800608c <HAL_DMA_Abort_IT+0x3dc>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d031      	beq.n	8006052 <HAL_DMA_Abort_IT+0x3a2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a27      	ldr	r2, [pc, #156]	; (8006090 <HAL_DMA_Abort_IT+0x3e0>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d02c      	beq.n	8006052 <HAL_DMA_Abort_IT+0x3a2>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a25      	ldr	r2, [pc, #148]	; (8006094 <HAL_DMA_Abort_IT+0x3e4>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d027      	beq.n	8006052 <HAL_DMA_Abort_IT+0x3a2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a24      	ldr	r2, [pc, #144]	; (8006098 <HAL_DMA_Abort_IT+0x3e8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d022      	beq.n	8006052 <HAL_DMA_Abort_IT+0x3a2>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a22      	ldr	r2, [pc, #136]	; (800609c <HAL_DMA_Abort_IT+0x3ec>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d01d      	beq.n	8006052 <HAL_DMA_Abort_IT+0x3a2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a21      	ldr	r2, [pc, #132]	; (80060a0 <HAL_DMA_Abort_IT+0x3f0>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d018      	beq.n	8006052 <HAL_DMA_Abort_IT+0x3a2>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a1f      	ldr	r2, [pc, #124]	; (80060a4 <HAL_DMA_Abort_IT+0x3f4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d013      	beq.n	8006052 <HAL_DMA_Abort_IT+0x3a2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a1e      	ldr	r2, [pc, #120]	; (80060a8 <HAL_DMA_Abort_IT+0x3f8>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d00e      	beq.n	8006052 <HAL_DMA_Abort_IT+0x3a2>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a1c      	ldr	r2, [pc, #112]	; (80060ac <HAL_DMA_Abort_IT+0x3fc>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d009      	beq.n	8006052 <HAL_DMA_Abort_IT+0x3a2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a1b      	ldr	r2, [pc, #108]	; (80060b0 <HAL_DMA_Abort_IT+0x400>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d004      	beq.n	8006052 <HAL_DMA_Abort_IT+0x3a2>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a19      	ldr	r2, [pc, #100]	; (80060b4 <HAL_DMA_Abort_IT+0x404>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d132      	bne.n	80060b8 <HAL_DMA_Abort_IT+0x408>
 8006052:	2301      	movs	r3, #1
 8006054:	e031      	b.n	80060ba <HAL_DMA_Abort_IT+0x40a>
 8006056:	bf00      	nop
 8006058:	40020010 	.word	0x40020010
 800605c:	40020028 	.word	0x40020028
 8006060:	40020040 	.word	0x40020040
 8006064:	40020058 	.word	0x40020058
 8006068:	40020070 	.word	0x40020070
 800606c:	40020088 	.word	0x40020088
 8006070:	400200a0 	.word	0x400200a0
 8006074:	400200b8 	.word	0x400200b8
 8006078:	40020410 	.word	0x40020410
 800607c:	40020428 	.word	0x40020428
 8006080:	40020440 	.word	0x40020440
 8006084:	40020458 	.word	0x40020458
 8006088:	40020470 	.word	0x40020470
 800608c:	40020488 	.word	0x40020488
 8006090:	400204a0 	.word	0x400204a0
 8006094:	400204b8 	.word	0x400204b8
 8006098:	58025408 	.word	0x58025408
 800609c:	5802541c 	.word	0x5802541c
 80060a0:	58025430 	.word	0x58025430
 80060a4:	58025444 	.word	0x58025444
 80060a8:	58025458 	.word	0x58025458
 80060ac:	5802546c 	.word	0x5802546c
 80060b0:	58025480 	.word	0x58025480
 80060b4:	58025494 	.word	0x58025494
 80060b8:	2300      	movs	r3, #0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d028      	beq.n	8006110 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060cc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d8:	f003 031f 	and.w	r3, r3, #31
 80060dc:	2201      	movs	r2, #1
 80060de:	409a      	lsls	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80060ec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00c      	beq.n	8006110 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006104:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800610e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop

0800613c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08a      	sub	sp, #40	; 0x28
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006148:	4b67      	ldr	r3, [pc, #412]	; (80062e8 <HAL_DMA_IRQHandler+0x1ac>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a67      	ldr	r2, [pc, #412]	; (80062ec <HAL_DMA_IRQHandler+0x1b0>)
 800614e:	fba2 2303 	umull	r2, r3, r2, r3
 8006152:	0a9b      	lsrs	r3, r3, #10
 8006154:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800615a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006160:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a5f      	ldr	r2, [pc, #380]	; (80062f0 <HAL_DMA_IRQHandler+0x1b4>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d04a      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a5d      	ldr	r2, [pc, #372]	; (80062f4 <HAL_DMA_IRQHandler+0x1b8>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d045      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a5c      	ldr	r2, [pc, #368]	; (80062f8 <HAL_DMA_IRQHandler+0x1bc>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d040      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a5a      	ldr	r2, [pc, #360]	; (80062fc <HAL_DMA_IRQHandler+0x1c0>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d03b      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a59      	ldr	r2, [pc, #356]	; (8006300 <HAL_DMA_IRQHandler+0x1c4>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d036      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a57      	ldr	r2, [pc, #348]	; (8006304 <HAL_DMA_IRQHandler+0x1c8>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d031      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a56      	ldr	r2, [pc, #344]	; (8006308 <HAL_DMA_IRQHandler+0x1cc>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d02c      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a54      	ldr	r2, [pc, #336]	; (800630c <HAL_DMA_IRQHandler+0x1d0>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d027      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a53      	ldr	r2, [pc, #332]	; (8006310 <HAL_DMA_IRQHandler+0x1d4>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d022      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a51      	ldr	r2, [pc, #324]	; (8006314 <HAL_DMA_IRQHandler+0x1d8>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d01d      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a50      	ldr	r2, [pc, #320]	; (8006318 <HAL_DMA_IRQHandler+0x1dc>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d018      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a4e      	ldr	r2, [pc, #312]	; (800631c <HAL_DMA_IRQHandler+0x1e0>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d013      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a4d      	ldr	r2, [pc, #308]	; (8006320 <HAL_DMA_IRQHandler+0x1e4>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d00e      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a4b      	ldr	r2, [pc, #300]	; (8006324 <HAL_DMA_IRQHandler+0x1e8>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d009      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a4a      	ldr	r2, [pc, #296]	; (8006328 <HAL_DMA_IRQHandler+0x1ec>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d004      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a48      	ldr	r2, [pc, #288]	; (800632c <HAL_DMA_IRQHandler+0x1f0>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d101      	bne.n	8006212 <HAL_DMA_IRQHandler+0xd6>
 800620e:	2301      	movs	r3, #1
 8006210:	e000      	b.n	8006214 <HAL_DMA_IRQHandler+0xd8>
 8006212:	2300      	movs	r3, #0
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 842b 	beq.w	8006a70 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800621e:	f003 031f 	and.w	r3, r3, #31
 8006222:	2208      	movs	r2, #8
 8006224:	409a      	lsls	r2, r3
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	4013      	ands	r3, r2
 800622a:	2b00      	cmp	r3, #0
 800622c:	f000 80a2 	beq.w	8006374 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a2e      	ldr	r2, [pc, #184]	; (80062f0 <HAL_DMA_IRQHandler+0x1b4>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d04a      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a2d      	ldr	r2, [pc, #180]	; (80062f4 <HAL_DMA_IRQHandler+0x1b8>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d045      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a2b      	ldr	r2, [pc, #172]	; (80062f8 <HAL_DMA_IRQHandler+0x1bc>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d040      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a2a      	ldr	r2, [pc, #168]	; (80062fc <HAL_DMA_IRQHandler+0x1c0>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d03b      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a28      	ldr	r2, [pc, #160]	; (8006300 <HAL_DMA_IRQHandler+0x1c4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d036      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a27      	ldr	r2, [pc, #156]	; (8006304 <HAL_DMA_IRQHandler+0x1c8>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d031      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a25      	ldr	r2, [pc, #148]	; (8006308 <HAL_DMA_IRQHandler+0x1cc>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d02c      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a24      	ldr	r2, [pc, #144]	; (800630c <HAL_DMA_IRQHandler+0x1d0>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d027      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a22      	ldr	r2, [pc, #136]	; (8006310 <HAL_DMA_IRQHandler+0x1d4>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d022      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a21      	ldr	r2, [pc, #132]	; (8006314 <HAL_DMA_IRQHandler+0x1d8>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d01d      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a1f      	ldr	r2, [pc, #124]	; (8006318 <HAL_DMA_IRQHandler+0x1dc>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d018      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a1e      	ldr	r2, [pc, #120]	; (800631c <HAL_DMA_IRQHandler+0x1e0>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d013      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a1c      	ldr	r2, [pc, #112]	; (8006320 <HAL_DMA_IRQHandler+0x1e4>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d00e      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a1b      	ldr	r2, [pc, #108]	; (8006324 <HAL_DMA_IRQHandler+0x1e8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d009      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a19      	ldr	r2, [pc, #100]	; (8006328 <HAL_DMA_IRQHandler+0x1ec>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d004      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a18      	ldr	r2, [pc, #96]	; (800632c <HAL_DMA_IRQHandler+0x1f0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d12f      	bne.n	8006330 <HAL_DMA_IRQHandler+0x1f4>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0304 	and.w	r3, r3, #4
 80062da:	2b00      	cmp	r3, #0
 80062dc:	bf14      	ite	ne
 80062de:	2301      	movne	r3, #1
 80062e0:	2300      	moveq	r3, #0
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	e02e      	b.n	8006344 <HAL_DMA_IRQHandler+0x208>
 80062e6:	bf00      	nop
 80062e8:	2400002c 	.word	0x2400002c
 80062ec:	1b4e81b5 	.word	0x1b4e81b5
 80062f0:	40020010 	.word	0x40020010
 80062f4:	40020028 	.word	0x40020028
 80062f8:	40020040 	.word	0x40020040
 80062fc:	40020058 	.word	0x40020058
 8006300:	40020070 	.word	0x40020070
 8006304:	40020088 	.word	0x40020088
 8006308:	400200a0 	.word	0x400200a0
 800630c:	400200b8 	.word	0x400200b8
 8006310:	40020410 	.word	0x40020410
 8006314:	40020428 	.word	0x40020428
 8006318:	40020440 	.word	0x40020440
 800631c:	40020458 	.word	0x40020458
 8006320:	40020470 	.word	0x40020470
 8006324:	40020488 	.word	0x40020488
 8006328:	400204a0 	.word	0x400204a0
 800632c:	400204b8 	.word	0x400204b8
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0308 	and.w	r3, r3, #8
 800633a:	2b00      	cmp	r3, #0
 800633c:	bf14      	ite	ne
 800633e:	2301      	movne	r3, #1
 8006340:	2300      	moveq	r3, #0
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b00      	cmp	r3, #0
 8006346:	d015      	beq.n	8006374 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f022 0204 	bic.w	r2, r2, #4
 8006356:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800635c:	f003 031f 	and.w	r3, r3, #31
 8006360:	2208      	movs	r2, #8
 8006362:	409a      	lsls	r2, r3
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636c:	f043 0201 	orr.w	r2, r3, #1
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006378:	f003 031f 	and.w	r3, r3, #31
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	fa22 f303 	lsr.w	r3, r2, r3
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d06e      	beq.n	8006468 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a69      	ldr	r2, [pc, #420]	; (8006534 <HAL_DMA_IRQHandler+0x3f8>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d04a      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a67      	ldr	r2, [pc, #412]	; (8006538 <HAL_DMA_IRQHandler+0x3fc>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d045      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a66      	ldr	r2, [pc, #408]	; (800653c <HAL_DMA_IRQHandler+0x400>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d040      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a64      	ldr	r2, [pc, #400]	; (8006540 <HAL_DMA_IRQHandler+0x404>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d03b      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a63      	ldr	r2, [pc, #396]	; (8006544 <HAL_DMA_IRQHandler+0x408>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d036      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a61      	ldr	r2, [pc, #388]	; (8006548 <HAL_DMA_IRQHandler+0x40c>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d031      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a60      	ldr	r2, [pc, #384]	; (800654c <HAL_DMA_IRQHandler+0x410>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d02c      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a5e      	ldr	r2, [pc, #376]	; (8006550 <HAL_DMA_IRQHandler+0x414>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d027      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a5d      	ldr	r2, [pc, #372]	; (8006554 <HAL_DMA_IRQHandler+0x418>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d022      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a5b      	ldr	r2, [pc, #364]	; (8006558 <HAL_DMA_IRQHandler+0x41c>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d01d      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a5a      	ldr	r2, [pc, #360]	; (800655c <HAL_DMA_IRQHandler+0x420>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d018      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a58      	ldr	r2, [pc, #352]	; (8006560 <HAL_DMA_IRQHandler+0x424>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d013      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a57      	ldr	r2, [pc, #348]	; (8006564 <HAL_DMA_IRQHandler+0x428>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d00e      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a55      	ldr	r2, [pc, #340]	; (8006568 <HAL_DMA_IRQHandler+0x42c>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d009      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a54      	ldr	r2, [pc, #336]	; (800656c <HAL_DMA_IRQHandler+0x430>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d004      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a52      	ldr	r2, [pc, #328]	; (8006570 <HAL_DMA_IRQHandler+0x434>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d10a      	bne.n	8006440 <HAL_DMA_IRQHandler+0x304>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006434:	2b00      	cmp	r3, #0
 8006436:	bf14      	ite	ne
 8006438:	2301      	movne	r3, #1
 800643a:	2300      	moveq	r3, #0
 800643c:	b2db      	uxtb	r3, r3
 800643e:	e003      	b.n	8006448 <HAL_DMA_IRQHandler+0x30c>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2300      	movs	r3, #0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00d      	beq.n	8006468 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006450:	f003 031f 	and.w	r3, r3, #31
 8006454:	2201      	movs	r2, #1
 8006456:	409a      	lsls	r2, r3
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006460:	f043 0202 	orr.w	r2, r3, #2
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800646c:	f003 031f 	and.w	r3, r3, #31
 8006470:	2204      	movs	r2, #4
 8006472:	409a      	lsls	r2, r3
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	4013      	ands	r3, r2
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 808f 	beq.w	800659c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a2c      	ldr	r2, [pc, #176]	; (8006534 <HAL_DMA_IRQHandler+0x3f8>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d04a      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a2a      	ldr	r2, [pc, #168]	; (8006538 <HAL_DMA_IRQHandler+0x3fc>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d045      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a29      	ldr	r2, [pc, #164]	; (800653c <HAL_DMA_IRQHandler+0x400>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d040      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a27      	ldr	r2, [pc, #156]	; (8006540 <HAL_DMA_IRQHandler+0x404>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d03b      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a26      	ldr	r2, [pc, #152]	; (8006544 <HAL_DMA_IRQHandler+0x408>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d036      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a24      	ldr	r2, [pc, #144]	; (8006548 <HAL_DMA_IRQHandler+0x40c>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d031      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a23      	ldr	r2, [pc, #140]	; (800654c <HAL_DMA_IRQHandler+0x410>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d02c      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a21      	ldr	r2, [pc, #132]	; (8006550 <HAL_DMA_IRQHandler+0x414>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d027      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a20      	ldr	r2, [pc, #128]	; (8006554 <HAL_DMA_IRQHandler+0x418>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d022      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a1e      	ldr	r2, [pc, #120]	; (8006558 <HAL_DMA_IRQHandler+0x41c>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d01d      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a1d      	ldr	r2, [pc, #116]	; (800655c <HAL_DMA_IRQHandler+0x420>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d018      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a1b      	ldr	r2, [pc, #108]	; (8006560 <HAL_DMA_IRQHandler+0x424>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d013      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a1a      	ldr	r2, [pc, #104]	; (8006564 <HAL_DMA_IRQHandler+0x428>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d00e      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a18      	ldr	r2, [pc, #96]	; (8006568 <HAL_DMA_IRQHandler+0x42c>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d009      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a17      	ldr	r2, [pc, #92]	; (800656c <HAL_DMA_IRQHandler+0x430>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d004      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a15      	ldr	r2, [pc, #84]	; (8006570 <HAL_DMA_IRQHandler+0x434>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d12a      	bne.n	8006574 <HAL_DMA_IRQHandler+0x438>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b00      	cmp	r3, #0
 800652a:	bf14      	ite	ne
 800652c:	2301      	movne	r3, #1
 800652e:	2300      	moveq	r3, #0
 8006530:	b2db      	uxtb	r3, r3
 8006532:	e023      	b.n	800657c <HAL_DMA_IRQHandler+0x440>
 8006534:	40020010 	.word	0x40020010
 8006538:	40020028 	.word	0x40020028
 800653c:	40020040 	.word	0x40020040
 8006540:	40020058 	.word	0x40020058
 8006544:	40020070 	.word	0x40020070
 8006548:	40020088 	.word	0x40020088
 800654c:	400200a0 	.word	0x400200a0
 8006550:	400200b8 	.word	0x400200b8
 8006554:	40020410 	.word	0x40020410
 8006558:	40020428 	.word	0x40020428
 800655c:	40020440 	.word	0x40020440
 8006560:	40020458 	.word	0x40020458
 8006564:	40020470 	.word	0x40020470
 8006568:	40020488 	.word	0x40020488
 800656c:	400204a0 	.word	0x400204a0
 8006570:	400204b8 	.word	0x400204b8
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2300      	movs	r3, #0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00d      	beq.n	800659c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006584:	f003 031f 	and.w	r3, r3, #31
 8006588:	2204      	movs	r2, #4
 800658a:	409a      	lsls	r2, r3
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006594:	f043 0204 	orr.w	r2, r3, #4
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a0:	f003 031f 	and.w	r3, r3, #31
 80065a4:	2210      	movs	r2, #16
 80065a6:	409a      	lsls	r2, r3
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	4013      	ands	r3, r2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 80a6 	beq.w	80066fe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a85      	ldr	r2, [pc, #532]	; (80067cc <HAL_DMA_IRQHandler+0x690>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d04a      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a83      	ldr	r2, [pc, #524]	; (80067d0 <HAL_DMA_IRQHandler+0x694>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d045      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a82      	ldr	r2, [pc, #520]	; (80067d4 <HAL_DMA_IRQHandler+0x698>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d040      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a80      	ldr	r2, [pc, #512]	; (80067d8 <HAL_DMA_IRQHandler+0x69c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d03b      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a7f      	ldr	r2, [pc, #508]	; (80067dc <HAL_DMA_IRQHandler+0x6a0>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d036      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a7d      	ldr	r2, [pc, #500]	; (80067e0 <HAL_DMA_IRQHandler+0x6a4>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d031      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a7c      	ldr	r2, [pc, #496]	; (80067e4 <HAL_DMA_IRQHandler+0x6a8>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d02c      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a7a      	ldr	r2, [pc, #488]	; (80067e8 <HAL_DMA_IRQHandler+0x6ac>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d027      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a79      	ldr	r2, [pc, #484]	; (80067ec <HAL_DMA_IRQHandler+0x6b0>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d022      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a77      	ldr	r2, [pc, #476]	; (80067f0 <HAL_DMA_IRQHandler+0x6b4>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d01d      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a76      	ldr	r2, [pc, #472]	; (80067f4 <HAL_DMA_IRQHandler+0x6b8>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d018      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a74      	ldr	r2, [pc, #464]	; (80067f8 <HAL_DMA_IRQHandler+0x6bc>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d013      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a73      	ldr	r2, [pc, #460]	; (80067fc <HAL_DMA_IRQHandler+0x6c0>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d00e      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a71      	ldr	r2, [pc, #452]	; (8006800 <HAL_DMA_IRQHandler+0x6c4>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d009      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a70      	ldr	r2, [pc, #448]	; (8006804 <HAL_DMA_IRQHandler+0x6c8>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d004      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a6e      	ldr	r2, [pc, #440]	; (8006808 <HAL_DMA_IRQHandler+0x6cc>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d10a      	bne.n	8006668 <HAL_DMA_IRQHandler+0x52c>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0308 	and.w	r3, r3, #8
 800665c:	2b00      	cmp	r3, #0
 800665e:	bf14      	ite	ne
 8006660:	2301      	movne	r3, #1
 8006662:	2300      	moveq	r3, #0
 8006664:	b2db      	uxtb	r3, r3
 8006666:	e009      	b.n	800667c <HAL_DMA_IRQHandler+0x540>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0304 	and.w	r3, r3, #4
 8006672:	2b00      	cmp	r3, #0
 8006674:	bf14      	ite	ne
 8006676:	2301      	movne	r3, #1
 8006678:	2300      	moveq	r3, #0
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	d03e      	beq.n	80066fe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006684:	f003 031f 	and.w	r3, r3, #31
 8006688:	2210      	movs	r2, #16
 800668a:	409a      	lsls	r2, r3
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d018      	beq.n	80066d0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d108      	bne.n	80066be <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d024      	beq.n	80066fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	4798      	blx	r3
 80066bc:	e01f      	b.n	80066fe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d01b      	beq.n	80066fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	4798      	blx	r3
 80066ce:	e016      	b.n	80066fe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d107      	bne.n	80066ee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0208 	bic.w	r2, r2, #8
 80066ec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006702:	f003 031f 	and.w	r3, r3, #31
 8006706:	2220      	movs	r2, #32
 8006708:	409a      	lsls	r2, r3
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	4013      	ands	r3, r2
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 8110 	beq.w	8006934 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a2c      	ldr	r2, [pc, #176]	; (80067cc <HAL_DMA_IRQHandler+0x690>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d04a      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a2b      	ldr	r2, [pc, #172]	; (80067d0 <HAL_DMA_IRQHandler+0x694>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d045      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a29      	ldr	r2, [pc, #164]	; (80067d4 <HAL_DMA_IRQHandler+0x698>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d040      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a28      	ldr	r2, [pc, #160]	; (80067d8 <HAL_DMA_IRQHandler+0x69c>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d03b      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a26      	ldr	r2, [pc, #152]	; (80067dc <HAL_DMA_IRQHandler+0x6a0>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d036      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a25      	ldr	r2, [pc, #148]	; (80067e0 <HAL_DMA_IRQHandler+0x6a4>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d031      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a23      	ldr	r2, [pc, #140]	; (80067e4 <HAL_DMA_IRQHandler+0x6a8>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d02c      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a22      	ldr	r2, [pc, #136]	; (80067e8 <HAL_DMA_IRQHandler+0x6ac>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d027      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a20      	ldr	r2, [pc, #128]	; (80067ec <HAL_DMA_IRQHandler+0x6b0>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d022      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a1f      	ldr	r2, [pc, #124]	; (80067f0 <HAL_DMA_IRQHandler+0x6b4>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d01d      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a1d      	ldr	r2, [pc, #116]	; (80067f4 <HAL_DMA_IRQHandler+0x6b8>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d018      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a1c      	ldr	r2, [pc, #112]	; (80067f8 <HAL_DMA_IRQHandler+0x6bc>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d013      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a1a      	ldr	r2, [pc, #104]	; (80067fc <HAL_DMA_IRQHandler+0x6c0>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d00e      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a19      	ldr	r2, [pc, #100]	; (8006800 <HAL_DMA_IRQHandler+0x6c4>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d009      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a17      	ldr	r2, [pc, #92]	; (8006804 <HAL_DMA_IRQHandler+0x6c8>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d004      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a16      	ldr	r2, [pc, #88]	; (8006808 <HAL_DMA_IRQHandler+0x6cc>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d12b      	bne.n	800680c <HAL_DMA_IRQHandler+0x6d0>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0310 	and.w	r3, r3, #16
 80067be:	2b00      	cmp	r3, #0
 80067c0:	bf14      	ite	ne
 80067c2:	2301      	movne	r3, #1
 80067c4:	2300      	moveq	r3, #0
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	e02a      	b.n	8006820 <HAL_DMA_IRQHandler+0x6e4>
 80067ca:	bf00      	nop
 80067cc:	40020010 	.word	0x40020010
 80067d0:	40020028 	.word	0x40020028
 80067d4:	40020040 	.word	0x40020040
 80067d8:	40020058 	.word	0x40020058
 80067dc:	40020070 	.word	0x40020070
 80067e0:	40020088 	.word	0x40020088
 80067e4:	400200a0 	.word	0x400200a0
 80067e8:	400200b8 	.word	0x400200b8
 80067ec:	40020410 	.word	0x40020410
 80067f0:	40020428 	.word	0x40020428
 80067f4:	40020440 	.word	0x40020440
 80067f8:	40020458 	.word	0x40020458
 80067fc:	40020470 	.word	0x40020470
 8006800:	40020488 	.word	0x40020488
 8006804:	400204a0 	.word	0x400204a0
 8006808:	400204b8 	.word	0x400204b8
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	bf14      	ite	ne
 800681a:	2301      	movne	r3, #1
 800681c:	2300      	moveq	r3, #0
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 8087 	beq.w	8006934 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800682a:	f003 031f 	and.w	r3, r3, #31
 800682e:	2220      	movs	r2, #32
 8006830:	409a      	lsls	r2, r3
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b04      	cmp	r3, #4
 8006840:	d139      	bne.n	80068b6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f022 0216 	bic.w	r2, r2, #22
 8006850:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	695a      	ldr	r2, [r3, #20]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006860:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006866:	2b00      	cmp	r3, #0
 8006868:	d103      	bne.n	8006872 <HAL_DMA_IRQHandler+0x736>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800686e:	2b00      	cmp	r3, #0
 8006870:	d007      	beq.n	8006882 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f022 0208 	bic.w	r2, r2, #8
 8006880:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006886:	f003 031f 	and.w	r3, r3, #31
 800688a:	223f      	movs	r2, #63	; 0x3f
 800688c:	409a      	lsls	r2, r3
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 834a 	beq.w	8006f40 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	4798      	blx	r3
          }
          return;
 80068b4:	e344      	b.n	8006f40 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d018      	beq.n	80068f6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d108      	bne.n	80068e4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d02c      	beq.n	8006934 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	4798      	blx	r3
 80068e2:	e027      	b.n	8006934 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d023      	beq.n	8006934 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	4798      	blx	r3
 80068f4:	e01e      	b.n	8006934 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10f      	bne.n	8006924 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f022 0210 	bic.w	r2, r2, #16
 8006912:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 8306 	beq.w	8006f4a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 8088 	beq.w	8006a5c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2204      	movs	r2, #4
 8006950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a7a      	ldr	r2, [pc, #488]	; (8006b44 <HAL_DMA_IRQHandler+0xa08>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d04a      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a79      	ldr	r2, [pc, #484]	; (8006b48 <HAL_DMA_IRQHandler+0xa0c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d045      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a77      	ldr	r2, [pc, #476]	; (8006b4c <HAL_DMA_IRQHandler+0xa10>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d040      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a76      	ldr	r2, [pc, #472]	; (8006b50 <HAL_DMA_IRQHandler+0xa14>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d03b      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a74      	ldr	r2, [pc, #464]	; (8006b54 <HAL_DMA_IRQHandler+0xa18>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d036      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a73      	ldr	r2, [pc, #460]	; (8006b58 <HAL_DMA_IRQHandler+0xa1c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d031      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a71      	ldr	r2, [pc, #452]	; (8006b5c <HAL_DMA_IRQHandler+0xa20>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d02c      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a70      	ldr	r2, [pc, #448]	; (8006b60 <HAL_DMA_IRQHandler+0xa24>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d027      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a6e      	ldr	r2, [pc, #440]	; (8006b64 <HAL_DMA_IRQHandler+0xa28>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d022      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a6d      	ldr	r2, [pc, #436]	; (8006b68 <HAL_DMA_IRQHandler+0xa2c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d01d      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a6b      	ldr	r2, [pc, #428]	; (8006b6c <HAL_DMA_IRQHandler+0xa30>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d018      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a6a      	ldr	r2, [pc, #424]	; (8006b70 <HAL_DMA_IRQHandler+0xa34>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d013      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a68      	ldr	r2, [pc, #416]	; (8006b74 <HAL_DMA_IRQHandler+0xa38>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d00e      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a67      	ldr	r2, [pc, #412]	; (8006b78 <HAL_DMA_IRQHandler+0xa3c>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d009      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a65      	ldr	r2, [pc, #404]	; (8006b7c <HAL_DMA_IRQHandler+0xa40>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d004      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a64      	ldr	r2, [pc, #400]	; (8006b80 <HAL_DMA_IRQHandler+0xa44>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d108      	bne.n	8006a06 <HAL_DMA_IRQHandler+0x8ca>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 0201 	bic.w	r2, r2, #1
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	e007      	b.n	8006a16 <HAL_DMA_IRQHandler+0x8da>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 0201 	bic.w	r2, r2, #1
 8006a14:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d307      	bcc.n	8006a32 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1f2      	bne.n	8006a16 <HAL_DMA_IRQHandler+0x8da>
 8006a30:	e000      	b.n	8006a34 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006a32:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d004      	beq.n	8006a4c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2203      	movs	r2, #3
 8006a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006a4a:	e003      	b.n	8006a54 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 8272 	beq.w	8006f4a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3
 8006a6e:	e26c      	b.n	8006f4a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a43      	ldr	r2, [pc, #268]	; (8006b84 <HAL_DMA_IRQHandler+0xa48>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d022      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0x984>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a42      	ldr	r2, [pc, #264]	; (8006b88 <HAL_DMA_IRQHandler+0xa4c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d01d      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0x984>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a40      	ldr	r2, [pc, #256]	; (8006b8c <HAL_DMA_IRQHandler+0xa50>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d018      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0x984>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a3f      	ldr	r2, [pc, #252]	; (8006b90 <HAL_DMA_IRQHandler+0xa54>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d013      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0x984>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a3d      	ldr	r2, [pc, #244]	; (8006b94 <HAL_DMA_IRQHandler+0xa58>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00e      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0x984>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a3c      	ldr	r2, [pc, #240]	; (8006b98 <HAL_DMA_IRQHandler+0xa5c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d009      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0x984>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a3a      	ldr	r2, [pc, #232]	; (8006b9c <HAL_DMA_IRQHandler+0xa60>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d004      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0x984>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a39      	ldr	r2, [pc, #228]	; (8006ba0 <HAL_DMA_IRQHandler+0xa64>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d101      	bne.n	8006ac4 <HAL_DMA_IRQHandler+0x988>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e000      	b.n	8006ac6 <HAL_DMA_IRQHandler+0x98a>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 823f 	beq.w	8006f4a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad8:	f003 031f 	and.w	r3, r3, #31
 8006adc:	2204      	movs	r2, #4
 8006ade:	409a      	lsls	r2, r3
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 80cd 	beq.w	8006c84 <HAL_DMA_IRQHandler+0xb48>
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 80c7 	beq.w	8006c84 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006afa:	f003 031f 	and.w	r3, r3, #31
 8006afe:	2204      	movs	r2, #4
 8006b00:	409a      	lsls	r2, r3
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d049      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d109      	bne.n	8006b2e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 8210 	beq.w	8006f44 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b2c:	e20a      	b.n	8006f44 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f000 8206 	beq.w	8006f44 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b40:	e200      	b.n	8006f44 <HAL_DMA_IRQHandler+0xe08>
 8006b42:	bf00      	nop
 8006b44:	40020010 	.word	0x40020010
 8006b48:	40020028 	.word	0x40020028
 8006b4c:	40020040 	.word	0x40020040
 8006b50:	40020058 	.word	0x40020058
 8006b54:	40020070 	.word	0x40020070
 8006b58:	40020088 	.word	0x40020088
 8006b5c:	400200a0 	.word	0x400200a0
 8006b60:	400200b8 	.word	0x400200b8
 8006b64:	40020410 	.word	0x40020410
 8006b68:	40020428 	.word	0x40020428
 8006b6c:	40020440 	.word	0x40020440
 8006b70:	40020458 	.word	0x40020458
 8006b74:	40020470 	.word	0x40020470
 8006b78:	40020488 	.word	0x40020488
 8006b7c:	400204a0 	.word	0x400204a0
 8006b80:	400204b8 	.word	0x400204b8
 8006b84:	58025408 	.word	0x58025408
 8006b88:	5802541c 	.word	0x5802541c
 8006b8c:	58025430 	.word	0x58025430
 8006b90:	58025444 	.word	0x58025444
 8006b94:	58025458 	.word	0x58025458
 8006b98:	5802546c 	.word	0x5802546c
 8006b9c:	58025480 	.word	0x58025480
 8006ba0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	f003 0320 	and.w	r3, r3, #32
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d160      	bne.n	8006c70 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a7f      	ldr	r2, [pc, #508]	; (8006db0 <HAL_DMA_IRQHandler+0xc74>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d04a      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a7d      	ldr	r2, [pc, #500]	; (8006db4 <HAL_DMA_IRQHandler+0xc78>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d045      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a7c      	ldr	r2, [pc, #496]	; (8006db8 <HAL_DMA_IRQHandler+0xc7c>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d040      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a7a      	ldr	r2, [pc, #488]	; (8006dbc <HAL_DMA_IRQHandler+0xc80>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d03b      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a79      	ldr	r2, [pc, #484]	; (8006dc0 <HAL_DMA_IRQHandler+0xc84>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d036      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a77      	ldr	r2, [pc, #476]	; (8006dc4 <HAL_DMA_IRQHandler+0xc88>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d031      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a76      	ldr	r2, [pc, #472]	; (8006dc8 <HAL_DMA_IRQHandler+0xc8c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d02c      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a74      	ldr	r2, [pc, #464]	; (8006dcc <HAL_DMA_IRQHandler+0xc90>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d027      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a73      	ldr	r2, [pc, #460]	; (8006dd0 <HAL_DMA_IRQHandler+0xc94>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d022      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a71      	ldr	r2, [pc, #452]	; (8006dd4 <HAL_DMA_IRQHandler+0xc98>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d01d      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a70      	ldr	r2, [pc, #448]	; (8006dd8 <HAL_DMA_IRQHandler+0xc9c>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d018      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a6e      	ldr	r2, [pc, #440]	; (8006ddc <HAL_DMA_IRQHandler+0xca0>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d013      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a6d      	ldr	r2, [pc, #436]	; (8006de0 <HAL_DMA_IRQHandler+0xca4>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d00e      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a6b      	ldr	r2, [pc, #428]	; (8006de4 <HAL_DMA_IRQHandler+0xca8>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d009      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a6a      	ldr	r2, [pc, #424]	; (8006de8 <HAL_DMA_IRQHandler+0xcac>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d004      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a68      	ldr	r2, [pc, #416]	; (8006dec <HAL_DMA_IRQHandler+0xcb0>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d108      	bne.n	8006c60 <HAL_DMA_IRQHandler+0xb24>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f022 0208 	bic.w	r2, r2, #8
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	e007      	b.n	8006c70 <HAL_DMA_IRQHandler+0xb34>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f022 0204 	bic.w	r2, r2, #4
 8006c6e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 8165 	beq.w	8006f44 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c82:	e15f      	b.n	8006f44 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c88:	f003 031f 	and.w	r3, r3, #31
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	409a      	lsls	r2, r3
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	4013      	ands	r3, r2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 80c5 	beq.w	8006e24 <HAL_DMA_IRQHandler+0xce8>
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	f003 0302 	and.w	r3, r3, #2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 80bf 	beq.w	8006e24 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006caa:	f003 031f 	and.w	r3, r3, #31
 8006cae:	2202      	movs	r2, #2
 8006cb0:	409a      	lsls	r2, r3
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d018      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d109      	bne.n	8006cde <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 813a 	beq.w	8006f48 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cdc:	e134      	b.n	8006f48 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 8130 	beq.w	8006f48 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cf0:	e12a      	b.n	8006f48 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	f003 0320 	and.w	r3, r3, #32
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f040 8089 	bne.w	8006e10 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a2b      	ldr	r2, [pc, #172]	; (8006db0 <HAL_DMA_IRQHandler+0xc74>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d04a      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a29      	ldr	r2, [pc, #164]	; (8006db4 <HAL_DMA_IRQHandler+0xc78>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d045      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a28      	ldr	r2, [pc, #160]	; (8006db8 <HAL_DMA_IRQHandler+0xc7c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d040      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a26      	ldr	r2, [pc, #152]	; (8006dbc <HAL_DMA_IRQHandler+0xc80>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d03b      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a25      	ldr	r2, [pc, #148]	; (8006dc0 <HAL_DMA_IRQHandler+0xc84>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d036      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a23      	ldr	r2, [pc, #140]	; (8006dc4 <HAL_DMA_IRQHandler+0xc88>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d031      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a22      	ldr	r2, [pc, #136]	; (8006dc8 <HAL_DMA_IRQHandler+0xc8c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d02c      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a20      	ldr	r2, [pc, #128]	; (8006dcc <HAL_DMA_IRQHandler+0xc90>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d027      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a1f      	ldr	r2, [pc, #124]	; (8006dd0 <HAL_DMA_IRQHandler+0xc94>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d022      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a1d      	ldr	r2, [pc, #116]	; (8006dd4 <HAL_DMA_IRQHandler+0xc98>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d01d      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a1c      	ldr	r2, [pc, #112]	; (8006dd8 <HAL_DMA_IRQHandler+0xc9c>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d018      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a1a      	ldr	r2, [pc, #104]	; (8006ddc <HAL_DMA_IRQHandler+0xca0>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d013      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a19      	ldr	r2, [pc, #100]	; (8006de0 <HAL_DMA_IRQHandler+0xca4>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d00e      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a17      	ldr	r2, [pc, #92]	; (8006de4 <HAL_DMA_IRQHandler+0xca8>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d009      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a16      	ldr	r2, [pc, #88]	; (8006de8 <HAL_DMA_IRQHandler+0xcac>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d004      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a14      	ldr	r2, [pc, #80]	; (8006dec <HAL_DMA_IRQHandler+0xcb0>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d128      	bne.n	8006df0 <HAL_DMA_IRQHandler+0xcb4>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f022 0214 	bic.w	r2, r2, #20
 8006dac:	601a      	str	r2, [r3, #0]
 8006dae:	e027      	b.n	8006e00 <HAL_DMA_IRQHandler+0xcc4>
 8006db0:	40020010 	.word	0x40020010
 8006db4:	40020028 	.word	0x40020028
 8006db8:	40020040 	.word	0x40020040
 8006dbc:	40020058 	.word	0x40020058
 8006dc0:	40020070 	.word	0x40020070
 8006dc4:	40020088 	.word	0x40020088
 8006dc8:	400200a0 	.word	0x400200a0
 8006dcc:	400200b8 	.word	0x400200b8
 8006dd0:	40020410 	.word	0x40020410
 8006dd4:	40020428 	.word	0x40020428
 8006dd8:	40020440 	.word	0x40020440
 8006ddc:	40020458 	.word	0x40020458
 8006de0:	40020470 	.word	0x40020470
 8006de4:	40020488 	.word	0x40020488
 8006de8:	400204a0 	.word	0x400204a0
 8006dec:	400204b8 	.word	0x400204b8
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 020a 	bic.w	r2, r2, #10
 8006dfe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 8097 	beq.w	8006f48 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e22:	e091      	b.n	8006f48 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e28:	f003 031f 	and.w	r3, r3, #31
 8006e2c:	2208      	movs	r2, #8
 8006e2e:	409a      	lsls	r2, r3
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	4013      	ands	r3, r2
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 8088 	beq.w	8006f4a <HAL_DMA_IRQHandler+0xe0e>
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	f003 0308 	and.w	r3, r3, #8
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 8082 	beq.w	8006f4a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a41      	ldr	r2, [pc, #260]	; (8006f50 <HAL_DMA_IRQHandler+0xe14>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d04a      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a3f      	ldr	r2, [pc, #252]	; (8006f54 <HAL_DMA_IRQHandler+0xe18>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d045      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a3e      	ldr	r2, [pc, #248]	; (8006f58 <HAL_DMA_IRQHandler+0xe1c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d040      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a3c      	ldr	r2, [pc, #240]	; (8006f5c <HAL_DMA_IRQHandler+0xe20>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d03b      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a3b      	ldr	r2, [pc, #236]	; (8006f60 <HAL_DMA_IRQHandler+0xe24>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d036      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a39      	ldr	r2, [pc, #228]	; (8006f64 <HAL_DMA_IRQHandler+0xe28>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d031      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a38      	ldr	r2, [pc, #224]	; (8006f68 <HAL_DMA_IRQHandler+0xe2c>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d02c      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a36      	ldr	r2, [pc, #216]	; (8006f6c <HAL_DMA_IRQHandler+0xe30>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d027      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a35      	ldr	r2, [pc, #212]	; (8006f70 <HAL_DMA_IRQHandler+0xe34>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d022      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a33      	ldr	r2, [pc, #204]	; (8006f74 <HAL_DMA_IRQHandler+0xe38>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d01d      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a32      	ldr	r2, [pc, #200]	; (8006f78 <HAL_DMA_IRQHandler+0xe3c>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d018      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a30      	ldr	r2, [pc, #192]	; (8006f7c <HAL_DMA_IRQHandler+0xe40>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d013      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a2f      	ldr	r2, [pc, #188]	; (8006f80 <HAL_DMA_IRQHandler+0xe44>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d00e      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a2d      	ldr	r2, [pc, #180]	; (8006f84 <HAL_DMA_IRQHandler+0xe48>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d009      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a2c      	ldr	r2, [pc, #176]	; (8006f88 <HAL_DMA_IRQHandler+0xe4c>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d004      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a2a      	ldr	r2, [pc, #168]	; (8006f8c <HAL_DMA_IRQHandler+0xe50>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d108      	bne.n	8006ef8 <HAL_DMA_IRQHandler+0xdbc>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f022 021c 	bic.w	r2, r2, #28
 8006ef4:	601a      	str	r2, [r3, #0]
 8006ef6:	e007      	b.n	8006f08 <HAL_DMA_IRQHandler+0xdcc>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f022 020e 	bic.w	r2, r2, #14
 8006f06:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f0c:	f003 031f 	and.w	r3, r3, #31
 8006f10:	2201      	movs	r2, #1
 8006f12:	409a      	lsls	r2, r3
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d009      	beq.n	8006f4a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	4798      	blx	r3
 8006f3e:	e004      	b.n	8006f4a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006f40:	bf00      	nop
 8006f42:	e002      	b.n	8006f4a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f44:	bf00      	nop
 8006f46:	e000      	b.n	8006f4a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f48:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f4a:	3728      	adds	r7, #40	; 0x28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	40020010 	.word	0x40020010
 8006f54:	40020028 	.word	0x40020028
 8006f58:	40020040 	.word	0x40020040
 8006f5c:	40020058 	.word	0x40020058
 8006f60:	40020070 	.word	0x40020070
 8006f64:	40020088 	.word	0x40020088
 8006f68:	400200a0 	.word	0x400200a0
 8006f6c:	400200b8 	.word	0x400200b8
 8006f70:	40020410 	.word	0x40020410
 8006f74:	40020428 	.word	0x40020428
 8006f78:	40020440 	.word	0x40020440
 8006f7c:	40020458 	.word	0x40020458
 8006f80:	40020470 	.word	0x40020470
 8006f84:	40020488 	.word	0x40020488
 8006f88:	400204a0 	.word	0x400204a0
 8006f8c:	400204b8 	.word	0x400204b8

08006f90 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
 8006f9c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a7f      	ldr	r2, [pc, #508]	; (80071ac <DMA_SetConfig+0x21c>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d072      	beq.n	800709a <DMA_SetConfig+0x10a>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a7d      	ldr	r2, [pc, #500]	; (80071b0 <DMA_SetConfig+0x220>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d06d      	beq.n	800709a <DMA_SetConfig+0x10a>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a7c      	ldr	r2, [pc, #496]	; (80071b4 <DMA_SetConfig+0x224>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d068      	beq.n	800709a <DMA_SetConfig+0x10a>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a7a      	ldr	r2, [pc, #488]	; (80071b8 <DMA_SetConfig+0x228>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d063      	beq.n	800709a <DMA_SetConfig+0x10a>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a79      	ldr	r2, [pc, #484]	; (80071bc <DMA_SetConfig+0x22c>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d05e      	beq.n	800709a <DMA_SetConfig+0x10a>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a77      	ldr	r2, [pc, #476]	; (80071c0 <DMA_SetConfig+0x230>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d059      	beq.n	800709a <DMA_SetConfig+0x10a>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a76      	ldr	r2, [pc, #472]	; (80071c4 <DMA_SetConfig+0x234>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d054      	beq.n	800709a <DMA_SetConfig+0x10a>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a74      	ldr	r2, [pc, #464]	; (80071c8 <DMA_SetConfig+0x238>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d04f      	beq.n	800709a <DMA_SetConfig+0x10a>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a73      	ldr	r2, [pc, #460]	; (80071cc <DMA_SetConfig+0x23c>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d04a      	beq.n	800709a <DMA_SetConfig+0x10a>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a71      	ldr	r2, [pc, #452]	; (80071d0 <DMA_SetConfig+0x240>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d045      	beq.n	800709a <DMA_SetConfig+0x10a>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a70      	ldr	r2, [pc, #448]	; (80071d4 <DMA_SetConfig+0x244>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d040      	beq.n	800709a <DMA_SetConfig+0x10a>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a6e      	ldr	r2, [pc, #440]	; (80071d8 <DMA_SetConfig+0x248>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d03b      	beq.n	800709a <DMA_SetConfig+0x10a>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a6d      	ldr	r2, [pc, #436]	; (80071dc <DMA_SetConfig+0x24c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d036      	beq.n	800709a <DMA_SetConfig+0x10a>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a6b      	ldr	r2, [pc, #428]	; (80071e0 <DMA_SetConfig+0x250>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d031      	beq.n	800709a <DMA_SetConfig+0x10a>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a6a      	ldr	r2, [pc, #424]	; (80071e4 <DMA_SetConfig+0x254>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d02c      	beq.n	800709a <DMA_SetConfig+0x10a>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a68      	ldr	r2, [pc, #416]	; (80071e8 <DMA_SetConfig+0x258>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d027      	beq.n	800709a <DMA_SetConfig+0x10a>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a67      	ldr	r2, [pc, #412]	; (80071ec <DMA_SetConfig+0x25c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d022      	beq.n	800709a <DMA_SetConfig+0x10a>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a65      	ldr	r2, [pc, #404]	; (80071f0 <DMA_SetConfig+0x260>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d01d      	beq.n	800709a <DMA_SetConfig+0x10a>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a64      	ldr	r2, [pc, #400]	; (80071f4 <DMA_SetConfig+0x264>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d018      	beq.n	800709a <DMA_SetConfig+0x10a>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a62      	ldr	r2, [pc, #392]	; (80071f8 <DMA_SetConfig+0x268>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d013      	beq.n	800709a <DMA_SetConfig+0x10a>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a61      	ldr	r2, [pc, #388]	; (80071fc <DMA_SetConfig+0x26c>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d00e      	beq.n	800709a <DMA_SetConfig+0x10a>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a5f      	ldr	r2, [pc, #380]	; (8007200 <DMA_SetConfig+0x270>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d009      	beq.n	800709a <DMA_SetConfig+0x10a>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a5e      	ldr	r2, [pc, #376]	; (8007204 <DMA_SetConfig+0x274>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d004      	beq.n	800709a <DMA_SetConfig+0x10a>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a5c      	ldr	r2, [pc, #368]	; (8007208 <DMA_SetConfig+0x278>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d101      	bne.n	800709e <DMA_SetConfig+0x10e>
 800709a:	2301      	movs	r3, #1
 800709c:	e000      	b.n	80070a0 <DMA_SetConfig+0x110>
 800709e:	2300      	movs	r3, #0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00d      	beq.n	80070c0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80070ac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d004      	beq.n	80070c0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80070be:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a39      	ldr	r2, [pc, #228]	; (80071ac <DMA_SetConfig+0x21c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d04a      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a38      	ldr	r2, [pc, #224]	; (80071b0 <DMA_SetConfig+0x220>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d045      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a36      	ldr	r2, [pc, #216]	; (80071b4 <DMA_SetConfig+0x224>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d040      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a35      	ldr	r2, [pc, #212]	; (80071b8 <DMA_SetConfig+0x228>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d03b      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a33      	ldr	r2, [pc, #204]	; (80071bc <DMA_SetConfig+0x22c>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d036      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a32      	ldr	r2, [pc, #200]	; (80071c0 <DMA_SetConfig+0x230>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d031      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a30      	ldr	r2, [pc, #192]	; (80071c4 <DMA_SetConfig+0x234>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d02c      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a2f      	ldr	r2, [pc, #188]	; (80071c8 <DMA_SetConfig+0x238>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d027      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a2d      	ldr	r2, [pc, #180]	; (80071cc <DMA_SetConfig+0x23c>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d022      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a2c      	ldr	r2, [pc, #176]	; (80071d0 <DMA_SetConfig+0x240>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d01d      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a2a      	ldr	r2, [pc, #168]	; (80071d4 <DMA_SetConfig+0x244>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d018      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a29      	ldr	r2, [pc, #164]	; (80071d8 <DMA_SetConfig+0x248>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d013      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a27      	ldr	r2, [pc, #156]	; (80071dc <DMA_SetConfig+0x24c>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d00e      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a26      	ldr	r2, [pc, #152]	; (80071e0 <DMA_SetConfig+0x250>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d009      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a24      	ldr	r2, [pc, #144]	; (80071e4 <DMA_SetConfig+0x254>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d004      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a23      	ldr	r2, [pc, #140]	; (80071e8 <DMA_SetConfig+0x258>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d101      	bne.n	8007164 <DMA_SetConfig+0x1d4>
 8007160:	2301      	movs	r3, #1
 8007162:	e000      	b.n	8007166 <DMA_SetConfig+0x1d6>
 8007164:	2300      	movs	r3, #0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d059      	beq.n	800721e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800716e:	f003 031f 	and.w	r3, r3, #31
 8007172:	223f      	movs	r2, #63	; 0x3f
 8007174:	409a      	lsls	r2, r3
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007188:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	2b40      	cmp	r3, #64	; 0x40
 8007198:	d138      	bne.n	800720c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80071aa:	e086      	b.n	80072ba <DMA_SetConfig+0x32a>
 80071ac:	40020010 	.word	0x40020010
 80071b0:	40020028 	.word	0x40020028
 80071b4:	40020040 	.word	0x40020040
 80071b8:	40020058 	.word	0x40020058
 80071bc:	40020070 	.word	0x40020070
 80071c0:	40020088 	.word	0x40020088
 80071c4:	400200a0 	.word	0x400200a0
 80071c8:	400200b8 	.word	0x400200b8
 80071cc:	40020410 	.word	0x40020410
 80071d0:	40020428 	.word	0x40020428
 80071d4:	40020440 	.word	0x40020440
 80071d8:	40020458 	.word	0x40020458
 80071dc:	40020470 	.word	0x40020470
 80071e0:	40020488 	.word	0x40020488
 80071e4:	400204a0 	.word	0x400204a0
 80071e8:	400204b8 	.word	0x400204b8
 80071ec:	58025408 	.word	0x58025408
 80071f0:	5802541c 	.word	0x5802541c
 80071f4:	58025430 	.word	0x58025430
 80071f8:	58025444 	.word	0x58025444
 80071fc:	58025458 	.word	0x58025458
 8007200:	5802546c 	.word	0x5802546c
 8007204:	58025480 	.word	0x58025480
 8007208:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	60da      	str	r2, [r3, #12]
}
 800721c:	e04d      	b.n	80072ba <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a29      	ldr	r2, [pc, #164]	; (80072c8 <DMA_SetConfig+0x338>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d022      	beq.n	800726e <DMA_SetConfig+0x2de>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a27      	ldr	r2, [pc, #156]	; (80072cc <DMA_SetConfig+0x33c>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d01d      	beq.n	800726e <DMA_SetConfig+0x2de>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a26      	ldr	r2, [pc, #152]	; (80072d0 <DMA_SetConfig+0x340>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d018      	beq.n	800726e <DMA_SetConfig+0x2de>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a24      	ldr	r2, [pc, #144]	; (80072d4 <DMA_SetConfig+0x344>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d013      	beq.n	800726e <DMA_SetConfig+0x2de>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a23      	ldr	r2, [pc, #140]	; (80072d8 <DMA_SetConfig+0x348>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00e      	beq.n	800726e <DMA_SetConfig+0x2de>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a21      	ldr	r2, [pc, #132]	; (80072dc <DMA_SetConfig+0x34c>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d009      	beq.n	800726e <DMA_SetConfig+0x2de>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a20      	ldr	r2, [pc, #128]	; (80072e0 <DMA_SetConfig+0x350>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d004      	beq.n	800726e <DMA_SetConfig+0x2de>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a1e      	ldr	r2, [pc, #120]	; (80072e4 <DMA_SetConfig+0x354>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d101      	bne.n	8007272 <DMA_SetConfig+0x2e2>
 800726e:	2301      	movs	r3, #1
 8007270:	e000      	b.n	8007274 <DMA_SetConfig+0x2e4>
 8007272:	2300      	movs	r3, #0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d020      	beq.n	80072ba <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800727c:	f003 031f 	and.w	r3, r3, #31
 8007280:	2201      	movs	r2, #1
 8007282:	409a      	lsls	r2, r3
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	2b40      	cmp	r3, #64	; 0x40
 8007296:	d108      	bne.n	80072aa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	60da      	str	r2, [r3, #12]
}
 80072a8:	e007      	b.n	80072ba <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	60da      	str	r2, [r3, #12]
}
 80072ba:	bf00      	nop
 80072bc:	371c      	adds	r7, #28
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	58025408 	.word	0x58025408
 80072cc:	5802541c 	.word	0x5802541c
 80072d0:	58025430 	.word	0x58025430
 80072d4:	58025444 	.word	0x58025444
 80072d8:	58025458 	.word	0x58025458
 80072dc:	5802546c 	.word	0x5802546c
 80072e0:	58025480 	.word	0x58025480
 80072e4:	58025494 	.word	0x58025494

080072e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a42      	ldr	r2, [pc, #264]	; (8007400 <DMA_CalcBaseAndBitshift+0x118>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d04a      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a41      	ldr	r2, [pc, #260]	; (8007404 <DMA_CalcBaseAndBitshift+0x11c>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d045      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a3f      	ldr	r2, [pc, #252]	; (8007408 <DMA_CalcBaseAndBitshift+0x120>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d040      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a3e      	ldr	r2, [pc, #248]	; (800740c <DMA_CalcBaseAndBitshift+0x124>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d03b      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a3c      	ldr	r2, [pc, #240]	; (8007410 <DMA_CalcBaseAndBitshift+0x128>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d036      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a3b      	ldr	r2, [pc, #236]	; (8007414 <DMA_CalcBaseAndBitshift+0x12c>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d031      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a39      	ldr	r2, [pc, #228]	; (8007418 <DMA_CalcBaseAndBitshift+0x130>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d02c      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a38      	ldr	r2, [pc, #224]	; (800741c <DMA_CalcBaseAndBitshift+0x134>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d027      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a36      	ldr	r2, [pc, #216]	; (8007420 <DMA_CalcBaseAndBitshift+0x138>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d022      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a35      	ldr	r2, [pc, #212]	; (8007424 <DMA_CalcBaseAndBitshift+0x13c>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d01d      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a33      	ldr	r2, [pc, #204]	; (8007428 <DMA_CalcBaseAndBitshift+0x140>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d018      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a32      	ldr	r2, [pc, #200]	; (800742c <DMA_CalcBaseAndBitshift+0x144>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d013      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a30      	ldr	r2, [pc, #192]	; (8007430 <DMA_CalcBaseAndBitshift+0x148>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d00e      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a2f      	ldr	r2, [pc, #188]	; (8007434 <DMA_CalcBaseAndBitshift+0x14c>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d009      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a2d      	ldr	r2, [pc, #180]	; (8007438 <DMA_CalcBaseAndBitshift+0x150>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d004      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a2c      	ldr	r2, [pc, #176]	; (800743c <DMA_CalcBaseAndBitshift+0x154>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d101      	bne.n	8007394 <DMA_CalcBaseAndBitshift+0xac>
 8007390:	2301      	movs	r3, #1
 8007392:	e000      	b.n	8007396 <DMA_CalcBaseAndBitshift+0xae>
 8007394:	2300      	movs	r3, #0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d024      	beq.n	80073e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	3b10      	subs	r3, #16
 80073a2:	4a27      	ldr	r2, [pc, #156]	; (8007440 <DMA_CalcBaseAndBitshift+0x158>)
 80073a4:	fba2 2303 	umull	r2, r3, r2, r3
 80073a8:	091b      	lsrs	r3, r3, #4
 80073aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f003 0307 	and.w	r3, r3, #7
 80073b2:	4a24      	ldr	r2, [pc, #144]	; (8007444 <DMA_CalcBaseAndBitshift+0x15c>)
 80073b4:	5cd3      	ldrb	r3, [r2, r3]
 80073b6:	461a      	mov	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d908      	bls.n	80073d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	461a      	mov	r2, r3
 80073c8:	4b1f      	ldr	r3, [pc, #124]	; (8007448 <DMA_CalcBaseAndBitshift+0x160>)
 80073ca:	4013      	ands	r3, r2
 80073cc:	1d1a      	adds	r2, r3, #4
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	659a      	str	r2, [r3, #88]	; 0x58
 80073d2:	e00d      	b.n	80073f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	461a      	mov	r2, r3
 80073da:	4b1b      	ldr	r3, [pc, #108]	; (8007448 <DMA_CalcBaseAndBitshift+0x160>)
 80073dc:	4013      	ands	r3, r2
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	6593      	str	r3, [r2, #88]	; 0x58
 80073e2:	e005      	b.n	80073f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	40020010 	.word	0x40020010
 8007404:	40020028 	.word	0x40020028
 8007408:	40020040 	.word	0x40020040
 800740c:	40020058 	.word	0x40020058
 8007410:	40020070 	.word	0x40020070
 8007414:	40020088 	.word	0x40020088
 8007418:	400200a0 	.word	0x400200a0
 800741c:	400200b8 	.word	0x400200b8
 8007420:	40020410 	.word	0x40020410
 8007424:	40020428 	.word	0x40020428
 8007428:	40020440 	.word	0x40020440
 800742c:	40020458 	.word	0x40020458
 8007430:	40020470 	.word	0x40020470
 8007434:	40020488 	.word	0x40020488
 8007438:	400204a0 	.word	0x400204a0
 800743c:	400204b8 	.word	0x400204b8
 8007440:	aaaaaaab 	.word	0xaaaaaaab
 8007444:	0801005c 	.word	0x0801005c
 8007448:	fffffc00 	.word	0xfffffc00

0800744c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007454:	2300      	movs	r3, #0
 8007456:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d120      	bne.n	80074a2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007464:	2b03      	cmp	r3, #3
 8007466:	d858      	bhi.n	800751a <DMA_CheckFifoParam+0xce>
 8007468:	a201      	add	r2, pc, #4	; (adr r2, 8007470 <DMA_CheckFifoParam+0x24>)
 800746a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746e:	bf00      	nop
 8007470:	08007481 	.word	0x08007481
 8007474:	08007493 	.word	0x08007493
 8007478:	08007481 	.word	0x08007481
 800747c:	0800751b 	.word	0x0800751b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007484:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d048      	beq.n	800751e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007490:	e045      	b.n	800751e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007496:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800749a:	d142      	bne.n	8007522 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074a0:	e03f      	b.n	8007522 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074aa:	d123      	bne.n	80074f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b0:	2b03      	cmp	r3, #3
 80074b2:	d838      	bhi.n	8007526 <DMA_CheckFifoParam+0xda>
 80074b4:	a201      	add	r2, pc, #4	; (adr r2, 80074bc <DMA_CheckFifoParam+0x70>)
 80074b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ba:	bf00      	nop
 80074bc:	080074cd 	.word	0x080074cd
 80074c0:	080074d3 	.word	0x080074d3
 80074c4:	080074cd 	.word	0x080074cd
 80074c8:	080074e5 	.word	0x080074e5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	73fb      	strb	r3, [r7, #15]
        break;
 80074d0:	e030      	b.n	8007534 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d025      	beq.n	800752a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074e2:	e022      	b.n	800752a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80074ec:	d11f      	bne.n	800752e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074f2:	e01c      	b.n	800752e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d902      	bls.n	8007502 <DMA_CheckFifoParam+0xb6>
 80074fc:	2b03      	cmp	r3, #3
 80074fe:	d003      	beq.n	8007508 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007500:	e018      	b.n	8007534 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	73fb      	strb	r3, [r7, #15]
        break;
 8007506:	e015      	b.n	8007534 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00e      	beq.n	8007532 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	73fb      	strb	r3, [r7, #15]
    break;
 8007518:	e00b      	b.n	8007532 <DMA_CheckFifoParam+0xe6>
        break;
 800751a:	bf00      	nop
 800751c:	e00a      	b.n	8007534 <DMA_CheckFifoParam+0xe8>
        break;
 800751e:	bf00      	nop
 8007520:	e008      	b.n	8007534 <DMA_CheckFifoParam+0xe8>
        break;
 8007522:	bf00      	nop
 8007524:	e006      	b.n	8007534 <DMA_CheckFifoParam+0xe8>
        break;
 8007526:	bf00      	nop
 8007528:	e004      	b.n	8007534 <DMA_CheckFifoParam+0xe8>
        break;
 800752a:	bf00      	nop
 800752c:	e002      	b.n	8007534 <DMA_CheckFifoParam+0xe8>
        break;
 800752e:	bf00      	nop
 8007530:	e000      	b.n	8007534 <DMA_CheckFifoParam+0xe8>
    break;
 8007532:	bf00      	nop
    }
  }

  return status;
 8007534:	7bfb      	ldrb	r3, [r7, #15]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3714      	adds	r7, #20
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop

08007544 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a38      	ldr	r2, [pc, #224]	; (8007638 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d022      	beq.n	80075a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a36      	ldr	r2, [pc, #216]	; (800763c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d01d      	beq.n	80075a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a35      	ldr	r2, [pc, #212]	; (8007640 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d018      	beq.n	80075a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a33      	ldr	r2, [pc, #204]	; (8007644 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d013      	beq.n	80075a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a32      	ldr	r2, [pc, #200]	; (8007648 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d00e      	beq.n	80075a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a30      	ldr	r2, [pc, #192]	; (800764c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d009      	beq.n	80075a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a2f      	ldr	r2, [pc, #188]	; (8007650 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d004      	beq.n	80075a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a2d      	ldr	r2, [pc, #180]	; (8007654 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d101      	bne.n	80075a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80075a2:	2301      	movs	r3, #1
 80075a4:	e000      	b.n	80075a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80075a6:	2300      	movs	r3, #0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d01a      	beq.n	80075e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	3b08      	subs	r3, #8
 80075b4:	4a28      	ldr	r2, [pc, #160]	; (8007658 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80075b6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ba:	091b      	lsrs	r3, r3, #4
 80075bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	4b26      	ldr	r3, [pc, #152]	; (800765c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	461a      	mov	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a24      	ldr	r2, [pc, #144]	; (8007660 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80075d0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f003 031f 	and.w	r3, r3, #31
 80075d8:	2201      	movs	r2, #1
 80075da:	409a      	lsls	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80075e0:	e024      	b.n	800762c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	3b10      	subs	r3, #16
 80075ea:	4a1e      	ldr	r2, [pc, #120]	; (8007664 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80075ec:	fba2 2303 	umull	r2, r3, r2, r3
 80075f0:	091b      	lsrs	r3, r3, #4
 80075f2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	4a1c      	ldr	r2, [pc, #112]	; (8007668 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d806      	bhi.n	800760a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	4a1b      	ldr	r2, [pc, #108]	; (800766c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d902      	bls.n	800760a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	3308      	adds	r3, #8
 8007608:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	4b18      	ldr	r3, [pc, #96]	; (8007670 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800760e:	4413      	add	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	461a      	mov	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a16      	ldr	r2, [pc, #88]	; (8007674 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800761c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f003 031f 	and.w	r3, r3, #31
 8007624:	2201      	movs	r2, #1
 8007626:	409a      	lsls	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800762c:	bf00      	nop
 800762e:	3714      	adds	r7, #20
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr
 8007638:	58025408 	.word	0x58025408
 800763c:	5802541c 	.word	0x5802541c
 8007640:	58025430 	.word	0x58025430
 8007644:	58025444 	.word	0x58025444
 8007648:	58025458 	.word	0x58025458
 800764c:	5802546c 	.word	0x5802546c
 8007650:	58025480 	.word	0x58025480
 8007654:	58025494 	.word	0x58025494
 8007658:	cccccccd 	.word	0xcccccccd
 800765c:	16009600 	.word	0x16009600
 8007660:	58025880 	.word	0x58025880
 8007664:	aaaaaaab 	.word	0xaaaaaaab
 8007668:	400204b8 	.word	0x400204b8
 800766c:	4002040f 	.word	0x4002040f
 8007670:	10008200 	.word	0x10008200
 8007674:	40020880 	.word	0x40020880

08007678 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	b2db      	uxtb	r3, r3
 8007686:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d04a      	beq.n	8007724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2b08      	cmp	r3, #8
 8007692:	d847      	bhi.n	8007724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a25      	ldr	r2, [pc, #148]	; (8007730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d022      	beq.n	80076e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a24      	ldr	r2, [pc, #144]	; (8007734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d01d      	beq.n	80076e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a22      	ldr	r2, [pc, #136]	; (8007738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d018      	beq.n	80076e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a21      	ldr	r2, [pc, #132]	; (800773c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d013      	beq.n	80076e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a1f      	ldr	r2, [pc, #124]	; (8007740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d00e      	beq.n	80076e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a1e      	ldr	r2, [pc, #120]	; (8007744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d009      	beq.n	80076e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a1c      	ldr	r2, [pc, #112]	; (8007748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d004      	beq.n	80076e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a1b      	ldr	r2, [pc, #108]	; (800774c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d101      	bne.n	80076e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80076e4:	2301      	movs	r3, #1
 80076e6:	e000      	b.n	80076ea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80076e8:	2300      	movs	r3, #0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00a      	beq.n	8007704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	4b17      	ldr	r3, [pc, #92]	; (8007750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80076f2:	4413      	add	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	461a      	mov	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a15      	ldr	r2, [pc, #84]	; (8007754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007700:	671a      	str	r2, [r3, #112]	; 0x70
 8007702:	e009      	b.n	8007718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	4b14      	ldr	r3, [pc, #80]	; (8007758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007708:	4413      	add	r3, r2
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	461a      	mov	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a11      	ldr	r2, [pc, #68]	; (800775c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007716:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	3b01      	subs	r3, #1
 800771c:	2201      	movs	r2, #1
 800771e:	409a      	lsls	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007724:	bf00      	nop
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	58025408 	.word	0x58025408
 8007734:	5802541c 	.word	0x5802541c
 8007738:	58025430 	.word	0x58025430
 800773c:	58025444 	.word	0x58025444
 8007740:	58025458 	.word	0x58025458
 8007744:	5802546c 	.word	0x5802546c
 8007748:	58025480 	.word	0x58025480
 800774c:	58025494 	.word	0x58025494
 8007750:	1600963f 	.word	0x1600963f
 8007754:	58025940 	.word	0x58025940
 8007758:	1000823f 	.word	0x1000823f
 800775c:	40020940 	.word	0x40020940

08007760 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007760:	b480      	push	{r7}
 8007762:	b089      	sub	sp, #36	; 0x24
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800776a:	2300      	movs	r3, #0
 800776c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800776e:	4b89      	ldr	r3, [pc, #548]	; (8007994 <HAL_GPIO_Init+0x234>)
 8007770:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007772:	e194      	b.n	8007a9e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	2101      	movs	r1, #1
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	fa01 f303 	lsl.w	r3, r1, r3
 8007780:	4013      	ands	r3, r2
 8007782:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	2b00      	cmp	r3, #0
 8007788:	f000 8186 	beq.w	8007a98 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f003 0303 	and.w	r3, r3, #3
 8007794:	2b01      	cmp	r3, #1
 8007796:	d005      	beq.n	80077a4 <HAL_GPIO_Init+0x44>
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	f003 0303 	and.w	r3, r3, #3
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d130      	bne.n	8007806 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	005b      	lsls	r3, r3, #1
 80077ae:	2203      	movs	r2, #3
 80077b0:	fa02 f303 	lsl.w	r3, r2, r3
 80077b4:	43db      	mvns	r3, r3
 80077b6:	69ba      	ldr	r2, [r7, #24]
 80077b8:	4013      	ands	r3, r2
 80077ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	68da      	ldr	r2, [r3, #12]
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	005b      	lsls	r3, r3, #1
 80077c4:	fa02 f303 	lsl.w	r3, r2, r3
 80077c8:	69ba      	ldr	r2, [r7, #24]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	69ba      	ldr	r2, [r7, #24]
 80077d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80077da:	2201      	movs	r2, #1
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	fa02 f303 	lsl.w	r3, r2, r3
 80077e2:	43db      	mvns	r3, r3
 80077e4:	69ba      	ldr	r2, [r7, #24]
 80077e6:	4013      	ands	r3, r2
 80077e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	091b      	lsrs	r3, r3, #4
 80077f0:	f003 0201 	and.w	r2, r3, #1
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	fa02 f303 	lsl.w	r3, r2, r3
 80077fa:	69ba      	ldr	r2, [r7, #24]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	69ba      	ldr	r2, [r7, #24]
 8007804:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	f003 0303 	and.w	r3, r3, #3
 800780e:	2b03      	cmp	r3, #3
 8007810:	d017      	beq.n	8007842 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	005b      	lsls	r3, r3, #1
 800781c:	2203      	movs	r2, #3
 800781e:	fa02 f303 	lsl.w	r3, r2, r3
 8007822:	43db      	mvns	r3, r3
 8007824:	69ba      	ldr	r2, [r7, #24]
 8007826:	4013      	ands	r3, r2
 8007828:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	689a      	ldr	r2, [r3, #8]
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	005b      	lsls	r3, r3, #1
 8007832:	fa02 f303 	lsl.w	r3, r2, r3
 8007836:	69ba      	ldr	r2, [r7, #24]
 8007838:	4313      	orrs	r3, r2
 800783a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	69ba      	ldr	r2, [r7, #24]
 8007840:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f003 0303 	and.w	r3, r3, #3
 800784a:	2b02      	cmp	r3, #2
 800784c:	d123      	bne.n	8007896 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	08da      	lsrs	r2, r3, #3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	3208      	adds	r2, #8
 8007856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800785a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	f003 0307 	and.w	r3, r3, #7
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	220f      	movs	r2, #15
 8007866:	fa02 f303 	lsl.w	r3, r2, r3
 800786a:	43db      	mvns	r3, r3
 800786c:	69ba      	ldr	r2, [r7, #24]
 800786e:	4013      	ands	r3, r2
 8007870:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	691a      	ldr	r2, [r3, #16]
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	f003 0307 	and.w	r3, r3, #7
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	fa02 f303 	lsl.w	r3, r2, r3
 8007882:	69ba      	ldr	r2, [r7, #24]
 8007884:	4313      	orrs	r3, r2
 8007886:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	08da      	lsrs	r2, r3, #3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	3208      	adds	r2, #8
 8007890:	69b9      	ldr	r1, [r7, #24]
 8007892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	005b      	lsls	r3, r3, #1
 80078a0:	2203      	movs	r2, #3
 80078a2:	fa02 f303 	lsl.w	r3, r2, r3
 80078a6:	43db      	mvns	r3, r3
 80078a8:	69ba      	ldr	r2, [r7, #24]
 80078aa:	4013      	ands	r3, r2
 80078ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f003 0203 	and.w	r2, r3, #3
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	005b      	lsls	r3, r3, #1
 80078ba:	fa02 f303 	lsl.w	r3, r2, r3
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	69ba      	ldr	r2, [r7, #24]
 80078c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f000 80e0 	beq.w	8007a98 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078d8:	4b2f      	ldr	r3, [pc, #188]	; (8007998 <HAL_GPIO_Init+0x238>)
 80078da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80078de:	4a2e      	ldr	r2, [pc, #184]	; (8007998 <HAL_GPIO_Init+0x238>)
 80078e0:	f043 0302 	orr.w	r3, r3, #2
 80078e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80078e8:	4b2b      	ldr	r3, [pc, #172]	; (8007998 <HAL_GPIO_Init+0x238>)
 80078ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80078ee:	f003 0302 	and.w	r3, r3, #2
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80078f6:	4a29      	ldr	r2, [pc, #164]	; (800799c <HAL_GPIO_Init+0x23c>)
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	089b      	lsrs	r3, r3, #2
 80078fc:	3302      	adds	r3, #2
 80078fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	f003 0303 	and.w	r3, r3, #3
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	220f      	movs	r2, #15
 800790e:	fa02 f303 	lsl.w	r3, r2, r3
 8007912:	43db      	mvns	r3, r3
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	4013      	ands	r3, r2
 8007918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a20      	ldr	r2, [pc, #128]	; (80079a0 <HAL_GPIO_Init+0x240>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d052      	beq.n	80079c8 <HAL_GPIO_Init+0x268>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a1f      	ldr	r2, [pc, #124]	; (80079a4 <HAL_GPIO_Init+0x244>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d031      	beq.n	800798e <HAL_GPIO_Init+0x22e>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a1e      	ldr	r2, [pc, #120]	; (80079a8 <HAL_GPIO_Init+0x248>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d02b      	beq.n	800798a <HAL_GPIO_Init+0x22a>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a1d      	ldr	r2, [pc, #116]	; (80079ac <HAL_GPIO_Init+0x24c>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d025      	beq.n	8007986 <HAL_GPIO_Init+0x226>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a1c      	ldr	r2, [pc, #112]	; (80079b0 <HAL_GPIO_Init+0x250>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d01f      	beq.n	8007982 <HAL_GPIO_Init+0x222>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a1b      	ldr	r2, [pc, #108]	; (80079b4 <HAL_GPIO_Init+0x254>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d019      	beq.n	800797e <HAL_GPIO_Init+0x21e>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a1a      	ldr	r2, [pc, #104]	; (80079b8 <HAL_GPIO_Init+0x258>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d013      	beq.n	800797a <HAL_GPIO_Init+0x21a>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a19      	ldr	r2, [pc, #100]	; (80079bc <HAL_GPIO_Init+0x25c>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d00d      	beq.n	8007976 <HAL_GPIO_Init+0x216>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a18      	ldr	r2, [pc, #96]	; (80079c0 <HAL_GPIO_Init+0x260>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d007      	beq.n	8007972 <HAL_GPIO_Init+0x212>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a17      	ldr	r2, [pc, #92]	; (80079c4 <HAL_GPIO_Init+0x264>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d101      	bne.n	800796e <HAL_GPIO_Init+0x20e>
 800796a:	2309      	movs	r3, #9
 800796c:	e02d      	b.n	80079ca <HAL_GPIO_Init+0x26a>
 800796e:	230a      	movs	r3, #10
 8007970:	e02b      	b.n	80079ca <HAL_GPIO_Init+0x26a>
 8007972:	2308      	movs	r3, #8
 8007974:	e029      	b.n	80079ca <HAL_GPIO_Init+0x26a>
 8007976:	2307      	movs	r3, #7
 8007978:	e027      	b.n	80079ca <HAL_GPIO_Init+0x26a>
 800797a:	2306      	movs	r3, #6
 800797c:	e025      	b.n	80079ca <HAL_GPIO_Init+0x26a>
 800797e:	2305      	movs	r3, #5
 8007980:	e023      	b.n	80079ca <HAL_GPIO_Init+0x26a>
 8007982:	2304      	movs	r3, #4
 8007984:	e021      	b.n	80079ca <HAL_GPIO_Init+0x26a>
 8007986:	2303      	movs	r3, #3
 8007988:	e01f      	b.n	80079ca <HAL_GPIO_Init+0x26a>
 800798a:	2302      	movs	r3, #2
 800798c:	e01d      	b.n	80079ca <HAL_GPIO_Init+0x26a>
 800798e:	2301      	movs	r3, #1
 8007990:	e01b      	b.n	80079ca <HAL_GPIO_Init+0x26a>
 8007992:	bf00      	nop
 8007994:	58000080 	.word	0x58000080
 8007998:	58024400 	.word	0x58024400
 800799c:	58000400 	.word	0x58000400
 80079a0:	58020000 	.word	0x58020000
 80079a4:	58020400 	.word	0x58020400
 80079a8:	58020800 	.word	0x58020800
 80079ac:	58020c00 	.word	0x58020c00
 80079b0:	58021000 	.word	0x58021000
 80079b4:	58021400 	.word	0x58021400
 80079b8:	58021800 	.word	0x58021800
 80079bc:	58021c00 	.word	0x58021c00
 80079c0:	58022000 	.word	0x58022000
 80079c4:	58022400 	.word	0x58022400
 80079c8:	2300      	movs	r3, #0
 80079ca:	69fa      	ldr	r2, [r7, #28]
 80079cc:	f002 0203 	and.w	r2, r2, #3
 80079d0:	0092      	lsls	r2, r2, #2
 80079d2:	4093      	lsls	r3, r2
 80079d4:	69ba      	ldr	r2, [r7, #24]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80079da:	4938      	ldr	r1, [pc, #224]	; (8007abc <HAL_GPIO_Init+0x35c>)
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	089b      	lsrs	r3, r3, #2
 80079e0:	3302      	adds	r3, #2
 80079e2:	69ba      	ldr	r2, [r7, #24]
 80079e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80079e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	43db      	mvns	r3, r3
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	4013      	ands	r3, r2
 80079f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007a06:	69ba      	ldr	r2, [r7, #24]
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007a0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	43db      	mvns	r3, r3
 8007a22:	69ba      	ldr	r2, [r7, #24]
 8007a24:	4013      	ands	r3, r2
 8007a26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d003      	beq.n	8007a3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007a3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	43db      	mvns	r3, r3
 8007a4e:	69ba      	ldr	r2, [r7, #24]
 8007a50:	4013      	ands	r3, r2
 8007a52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d003      	beq.n	8007a68 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007a60:	69ba      	ldr	r2, [r7, #24]
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	69ba      	ldr	r2, [r7, #24]
 8007a6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	43db      	mvns	r3, r3
 8007a78:	69ba      	ldr	r2, [r7, #24]
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007a8a:	69ba      	ldr	r2, [r7, #24]
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	69ba      	ldr	r2, [r7, #24]
 8007a96:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f47f ae63 	bne.w	8007774 <HAL_GPIO_Init+0x14>
  }
}
 8007aae:	bf00      	nop
 8007ab0:	bf00      	nop
 8007ab2:	3724      	adds	r7, #36	; 0x24
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	58000400 	.word	0x58000400

08007ac0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	691a      	ldr	r2, [r3, #16]
 8007ad0:	887b      	ldrh	r3, [r7, #2]
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d002      	beq.n	8007ade <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	73fb      	strb	r3, [r7, #15]
 8007adc:	e001      	b.n	8007ae2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	460b      	mov	r3, r1
 8007afa:	807b      	strh	r3, [r7, #2]
 8007afc:	4613      	mov	r3, r2
 8007afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007b00:	787b      	ldrb	r3, [r7, #1]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d003      	beq.n	8007b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b06:	887a      	ldrh	r2, [r7, #2]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007b0c:	e003      	b.n	8007b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007b0e:	887b      	ldrh	r3, [r7, #2]
 8007b10:	041a      	lsls	r2, r3, #16
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	619a      	str	r2, [r3, #24]
}
 8007b16:	bf00      	nop
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
	...

08007b24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e07f      	b.n	8007c36 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d106      	bne.n	8007b50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7fa fb2a 	bl	80021a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2224      	movs	r2, #36	; 0x24
 8007b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f022 0201 	bic.w	r2, r2, #1
 8007b66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	685a      	ldr	r2, [r3, #4]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007b74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	689a      	ldr	r2, [r3, #8]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d107      	bne.n	8007b9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	689a      	ldr	r2, [r3, #8]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b9a:	609a      	str	r2, [r3, #8]
 8007b9c:	e006      	b.n	8007bac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	689a      	ldr	r2, [r3, #8]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007baa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d104      	bne.n	8007bbe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	6859      	ldr	r1, [r3, #4]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	4b1d      	ldr	r3, [pc, #116]	; (8007c40 <HAL_I2C_Init+0x11c>)
 8007bca:	430b      	orrs	r3, r1
 8007bcc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68da      	ldr	r2, [r3, #12]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007bdc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	691a      	ldr	r2, [r3, #16]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	430a      	orrs	r2, r1
 8007bf6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	69d9      	ldr	r1, [r3, #28]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a1a      	ldr	r2, [r3, #32]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	430a      	orrs	r2, r1
 8007c06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f042 0201 	orr.w	r2, r2, #1
 8007c16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2220      	movs	r2, #32
 8007c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	02008000 	.word	0x02008000

08007c44 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b088      	sub	sp, #32
 8007c48:	af02      	add	r7, sp, #8
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	607a      	str	r2, [r7, #4]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	460b      	mov	r3, r1
 8007c52:	817b      	strh	r3, [r7, #10]
 8007c54:	4613      	mov	r3, r2
 8007c56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	2b20      	cmp	r3, #32
 8007c62:	f040 80da 	bne.w	8007e1a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d101      	bne.n	8007c74 <HAL_I2C_Master_Transmit+0x30>
 8007c70:	2302      	movs	r3, #2
 8007c72:	e0d3      	b.n	8007e1c <HAL_I2C_Master_Transmit+0x1d8>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007c7c:	f7fa fec0 	bl	8002a00 <HAL_GetTick>
 8007c80:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	2319      	movs	r3, #25
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f000 f9e6 	bl	8008060 <I2C_WaitOnFlagUntilTimeout>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d001      	beq.n	8007c9e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e0be      	b.n	8007e1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2221      	movs	r2, #33	; 0x21
 8007ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2210      	movs	r2, #16
 8007caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	893a      	ldrh	r2, [r7, #8]
 8007cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	2bff      	cmp	r3, #255	; 0xff
 8007cce:	d90e      	bls.n	8007cee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	22ff      	movs	r2, #255	; 0xff
 8007cd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cda:	b2da      	uxtb	r2, r3
 8007cdc:	8979      	ldrh	r1, [r7, #10]
 8007cde:	4b51      	ldr	r3, [pc, #324]	; (8007e24 <HAL_I2C_Master_Transmit+0x1e0>)
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f000 fbdc 	bl	80084a4 <I2C_TransferConfig>
 8007cec:	e06c      	b.n	8007dc8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	8979      	ldrh	r1, [r7, #10]
 8007d00:	4b48      	ldr	r3, [pc, #288]	; (8007e24 <HAL_I2C_Master_Transmit+0x1e0>)
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f000 fbcb 	bl	80084a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007d0e:	e05b      	b.n	8007dc8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d10:	697a      	ldr	r2, [r7, #20]
 8007d12:	6a39      	ldr	r1, [r7, #32]
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 f9e3 	bl	80080e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e07b      	b.n	8007e1c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d28:	781a      	ldrb	r2, [r3, #0]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d34:	1c5a      	adds	r2, r3, #1
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	3b01      	subs	r3, #1
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d034      	beq.n	8007dc8 <HAL_I2C_Master_Transmit+0x184>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d130      	bne.n	8007dc8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	9300      	str	r3, [sp, #0]
 8007d6a:	6a3b      	ldr	r3, [r7, #32]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	2180      	movs	r1, #128	; 0x80
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f000 f975 	bl	8008060 <I2C_WaitOnFlagUntilTimeout>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d001      	beq.n	8007d80 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e04d      	b.n	8007e1c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	2bff      	cmp	r3, #255	; 0xff
 8007d88:	d90e      	bls.n	8007da8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	22ff      	movs	r2, #255	; 0xff
 8007d8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	8979      	ldrh	r1, [r7, #10]
 8007d98:	2300      	movs	r3, #0
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f000 fb7f 	bl	80084a4 <I2C_TransferConfig>
 8007da6:	e00f      	b.n	8007dc8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	8979      	ldrh	r1, [r7, #10]
 8007dba:	2300      	movs	r3, #0
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f000 fb6e 	bl	80084a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d19e      	bne.n	8007d10 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	6a39      	ldr	r1, [r7, #32]
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f000 f9c2 	bl	8008160 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d001      	beq.n	8007de6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e01a      	b.n	8007e1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2220      	movs	r2, #32
 8007dec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	6859      	ldr	r1, [r3, #4]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	4b0b      	ldr	r3, [pc, #44]	; (8007e28 <HAL_I2C_Master_Transmit+0x1e4>)
 8007dfa:	400b      	ands	r3, r1
 8007dfc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2220      	movs	r2, #32
 8007e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	e000      	b.n	8007e1c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007e1a:	2302      	movs	r3, #2
  }
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3718      	adds	r7, #24
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	80002000 	.word	0x80002000
 8007e28:	fe00e800 	.word	0xfe00e800

08007e2c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b088      	sub	sp, #32
 8007e30:	af02      	add	r7, sp, #8
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	607a      	str	r2, [r7, #4]
 8007e36:	461a      	mov	r2, r3
 8007e38:	460b      	mov	r3, r1
 8007e3a:	817b      	strh	r3, [r7, #10]
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b20      	cmp	r3, #32
 8007e4a:	f040 80db 	bne.w	8008004 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d101      	bne.n	8007e5c <HAL_I2C_Master_Receive+0x30>
 8007e58:	2302      	movs	r3, #2
 8007e5a:	e0d4      	b.n	8008006 <HAL_I2C_Master_Receive+0x1da>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007e64:	f7fa fdcc 	bl	8002a00 <HAL_GetTick>
 8007e68:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	2319      	movs	r3, #25
 8007e70:	2201      	movs	r2, #1
 8007e72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f000 f8f2 	bl	8008060 <I2C_WaitOnFlagUntilTimeout>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e0bf      	b.n	8008006 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2222      	movs	r2, #34	; 0x22
 8007e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2210      	movs	r2, #16
 8007e92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	893a      	ldrh	r2, [r7, #8]
 8007ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	2bff      	cmp	r3, #255	; 0xff
 8007eb6:	d90e      	bls.n	8007ed6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	22ff      	movs	r2, #255	; 0xff
 8007ebc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	8979      	ldrh	r1, [r7, #10]
 8007ec6:	4b52      	ldr	r3, [pc, #328]	; (8008010 <HAL_I2C_Master_Receive+0x1e4>)
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 fae8 	bl	80084a4 <I2C_TransferConfig>
 8007ed4:	e06d      	b.n	8007fb2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eda:	b29a      	uxth	r2, r3
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ee4:	b2da      	uxtb	r2, r3
 8007ee6:	8979      	ldrh	r1, [r7, #10]
 8007ee8:	4b49      	ldr	r3, [pc, #292]	; (8008010 <HAL_I2C_Master_Receive+0x1e4>)
 8007eea:	9300      	str	r3, [sp, #0]
 8007eec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f000 fad7 	bl	80084a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007ef6:	e05c      	b.n	8007fb2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	6a39      	ldr	r1, [r7, #32]
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f000 f96b 	bl	80081d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e07c      	b.n	8008006 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f16:	b2d2      	uxtb	r2, r2
 8007f18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1e:	1c5a      	adds	r2, r3, #1
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	3b01      	subs	r3, #1
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d034      	beq.n	8007fb2 <HAL_I2C_Master_Receive+0x186>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d130      	bne.n	8007fb2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	6a3b      	ldr	r3, [r7, #32]
 8007f56:	2200      	movs	r2, #0
 8007f58:	2180      	movs	r1, #128	; 0x80
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f000 f880 	bl	8008060 <I2C_WaitOnFlagUntilTimeout>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e04d      	b.n	8008006 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	2bff      	cmp	r3, #255	; 0xff
 8007f72:	d90e      	bls.n	8007f92 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	22ff      	movs	r2, #255	; 0xff
 8007f78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	8979      	ldrh	r1, [r7, #10]
 8007f82:	2300      	movs	r3, #0
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f000 fa8a 	bl	80084a4 <I2C_TransferConfig>
 8007f90:	e00f      	b.n	8007fb2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	8979      	ldrh	r1, [r7, #10]
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f000 fa79 	bl	80084a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d19d      	bne.n	8007ef8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fbc:	697a      	ldr	r2, [r7, #20]
 8007fbe:	6a39      	ldr	r1, [r7, #32]
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 f8cd 	bl	8008160 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e01a      	b.n	8008006 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6859      	ldr	r1, [r3, #4]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	4b0c      	ldr	r3, [pc, #48]	; (8008014 <HAL_I2C_Master_Receive+0x1e8>)
 8007fe4:	400b      	ands	r3, r1
 8007fe6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2220      	movs	r2, #32
 8007fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008000:	2300      	movs	r3, #0
 8008002:	e000      	b.n	8008006 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008004:	2302      	movs	r3, #2
  }
}
 8008006:	4618      	mov	r0, r3
 8008008:	3718      	adds	r7, #24
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	80002400 	.word	0x80002400
 8008014:	fe00e800 	.word	0xfe00e800

08008018 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	f003 0302 	and.w	r3, r3, #2
 800802a:	2b02      	cmp	r3, #2
 800802c:	d103      	bne.n	8008036 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2200      	movs	r2, #0
 8008034:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	f003 0301 	and.w	r3, r3, #1
 8008040:	2b01      	cmp	r3, #1
 8008042:	d007      	beq.n	8008054 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	699a      	ldr	r2, [r3, #24]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f042 0201 	orr.w	r2, r2, #1
 8008052:	619a      	str	r2, [r3, #24]
  }
}
 8008054:	bf00      	nop
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	603b      	str	r3, [r7, #0]
 800806c:	4613      	mov	r3, r2
 800806e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008070:	e022      	b.n	80080b8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008078:	d01e      	beq.n	80080b8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800807a:	f7fa fcc1 	bl	8002a00 <HAL_GetTick>
 800807e:	4602      	mov	r2, r0
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	683a      	ldr	r2, [r7, #0]
 8008086:	429a      	cmp	r2, r3
 8008088:	d302      	bcc.n	8008090 <I2C_WaitOnFlagUntilTimeout+0x30>
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d113      	bne.n	80080b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008094:	f043 0220 	orr.w	r2, r3, #32
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2220      	movs	r2, #32
 80080a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e00f      	b.n	80080d8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	699a      	ldr	r2, [r3, #24]
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	4013      	ands	r3, r2
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	bf0c      	ite	eq
 80080c8:	2301      	moveq	r3, #1
 80080ca:	2300      	movne	r3, #0
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	461a      	mov	r2, r3
 80080d0:	79fb      	ldrb	r3, [r7, #7]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d0cd      	beq.n	8008072 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80080ec:	e02c      	b.n	8008148 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	68b9      	ldr	r1, [r7, #8]
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f000 f8ea 	bl	80082cc <I2C_IsErrorOccurred>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e02a      	b.n	8008158 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008108:	d01e      	beq.n	8008148 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800810a:	f7fa fc79 	bl	8002a00 <HAL_GetTick>
 800810e:	4602      	mov	r2, r0
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	429a      	cmp	r2, r3
 8008118:	d302      	bcc.n	8008120 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d113      	bne.n	8008148 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008124:	f043 0220 	orr.w	r2, r3, #32
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2220      	movs	r2, #32
 8008130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	e007      	b.n	8008158 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	699b      	ldr	r3, [r3, #24]
 800814e:	f003 0302 	and.w	r3, r3, #2
 8008152:	2b02      	cmp	r3, #2
 8008154:	d1cb      	bne.n	80080ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800816c:	e028      	b.n	80081c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	68b9      	ldr	r1, [r7, #8]
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f000 f8aa 	bl	80082cc <I2C_IsErrorOccurred>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e026      	b.n	80081d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008182:	f7fa fc3d 	bl	8002a00 <HAL_GetTick>
 8008186:	4602      	mov	r2, r0
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	68ba      	ldr	r2, [r7, #8]
 800818e:	429a      	cmp	r2, r3
 8008190:	d302      	bcc.n	8008198 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d113      	bne.n	80081c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800819c:	f043 0220 	orr.w	r2, r3, #32
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2220      	movs	r2, #32
 80081a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e007      	b.n	80081d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	f003 0320 	and.w	r3, r3, #32
 80081ca:	2b20      	cmp	r3, #32
 80081cc:	d1cf      	bne.n	800816e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80081e4:	e064      	b.n	80082b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	68b9      	ldr	r1, [r7, #8]
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f000 f86e 	bl	80082cc <I2C_IsErrorOccurred>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e062      	b.n	80082c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	f003 0320 	and.w	r3, r3, #32
 8008204:	2b20      	cmp	r3, #32
 8008206:	d138      	bne.n	800827a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	f003 0304 	and.w	r3, r3, #4
 8008212:	2b04      	cmp	r3, #4
 8008214:	d105      	bne.n	8008222 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	e04e      	b.n	80082c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	f003 0310 	and.w	r3, r3, #16
 800822c:	2b10      	cmp	r3, #16
 800822e:	d107      	bne.n	8008240 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2210      	movs	r2, #16
 8008236:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2204      	movs	r2, #4
 800823c:	645a      	str	r2, [r3, #68]	; 0x44
 800823e:	e002      	b.n	8008246 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2220      	movs	r2, #32
 800824c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	6859      	ldr	r1, [r3, #4]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	4b1b      	ldr	r3, [pc, #108]	; (80082c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800825a:	400b      	ands	r3, r1
 800825c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2220      	movs	r2, #32
 8008262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e022      	b.n	80082c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800827a:	f7fa fbc1 	bl	8002a00 <HAL_GetTick>
 800827e:	4602      	mov	r2, r0
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	1ad3      	subs	r3, r2, r3
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	429a      	cmp	r2, r3
 8008288:	d302      	bcc.n	8008290 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10f      	bne.n	80082b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008294:	f043 0220 	orr.w	r2, r3, #32
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2220      	movs	r2, #32
 80082a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e007      	b.n	80082c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	f003 0304 	and.w	r3, r3, #4
 80082ba:	2b04      	cmp	r3, #4
 80082bc:	d193      	bne.n	80081e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	fe00e800 	.word	0xfe00e800

080082cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b08a      	sub	sp, #40	; 0x28
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082d8:	2300      	movs	r3, #0
 80082da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80082e6:	2300      	movs	r3, #0
 80082e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	f003 0310 	and.w	r3, r3, #16
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d075      	beq.n	80083e4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2210      	movs	r2, #16
 80082fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008300:	e056      	b.n	80083b0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008308:	d052      	beq.n	80083b0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800830a:	f7fa fb79 	bl	8002a00 <HAL_GetTick>
 800830e:	4602      	mov	r2, r0
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	429a      	cmp	r2, r3
 8008318:	d302      	bcc.n	8008320 <I2C_IsErrorOccurred+0x54>
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d147      	bne.n	80083b0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800832a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008332:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800833e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008342:	d12e      	bne.n	80083a2 <I2C_IsErrorOccurred+0xd6>
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800834a:	d02a      	beq.n	80083a2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800834c:	7cfb      	ldrb	r3, [r7, #19]
 800834e:	2b20      	cmp	r3, #32
 8008350:	d027      	beq.n	80083a2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	685a      	ldr	r2, [r3, #4]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008360:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008362:	f7fa fb4d 	bl	8002a00 <HAL_GetTick>
 8008366:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008368:	e01b      	b.n	80083a2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800836a:	f7fa fb49 	bl	8002a00 <HAL_GetTick>
 800836e:	4602      	mov	r2, r0
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	2b19      	cmp	r3, #25
 8008376:	d914      	bls.n	80083a2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800837c:	f043 0220 	orr.w	r2, r3, #32
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2220      	movs	r2, #32
 8008388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	f003 0320 	and.w	r3, r3, #32
 80083ac:	2b20      	cmp	r3, #32
 80083ae:	d1dc      	bne.n	800836a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	f003 0320 	and.w	r3, r3, #32
 80083ba:	2b20      	cmp	r3, #32
 80083bc:	d003      	beq.n	80083c6 <I2C_IsErrorOccurred+0xfa>
 80083be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d09d      	beq.n	8008302 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80083c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d103      	bne.n	80083d6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2220      	movs	r2, #32
 80083d4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80083d6:	6a3b      	ldr	r3, [r7, #32]
 80083d8:	f043 0304 	orr.w	r3, r3, #4
 80083dc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	699b      	ldr	r3, [r3, #24]
 80083ea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00b      	beq.n	800840e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80083f6:	6a3b      	ldr	r3, [r7, #32]
 80083f8:	f043 0301 	orr.w	r3, r3, #1
 80083fc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008406:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00b      	beq.n	8008430 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008418:	6a3b      	ldr	r3, [r7, #32]
 800841a:	f043 0308 	orr.w	r3, r3, #8
 800841e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008428:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00b      	beq.n	8008452 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800843a:	6a3b      	ldr	r3, [r7, #32]
 800843c:	f043 0302 	orr.w	r3, r3, #2
 8008440:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800844a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008452:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008456:	2b00      	cmp	r3, #0
 8008458:	d01c      	beq.n	8008494 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f7ff fddc 	bl	8008018 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6859      	ldr	r1, [r3, #4]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	4b0d      	ldr	r3, [pc, #52]	; (80084a0 <I2C_IsErrorOccurred+0x1d4>)
 800846c:	400b      	ands	r3, r1
 800846e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008474:	6a3b      	ldr	r3, [r7, #32]
 8008476:	431a      	orrs	r2, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2220      	movs	r2, #32
 8008480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008498:	4618      	mov	r0, r3
 800849a:	3728      	adds	r7, #40	; 0x28
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	fe00e800 	.word	0xfe00e800

080084a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b087      	sub	sp, #28
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	607b      	str	r3, [r7, #4]
 80084ae:	460b      	mov	r3, r1
 80084b0:	817b      	strh	r3, [r7, #10]
 80084b2:	4613      	mov	r3, r2
 80084b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084b6:	897b      	ldrh	r3, [r7, #10]
 80084b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80084bc:	7a7b      	ldrb	r3, [r7, #9]
 80084be:	041b      	lsls	r3, r3, #16
 80084c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084c4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084d2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	685a      	ldr	r2, [r3, #4]
 80084da:	6a3b      	ldr	r3, [r7, #32]
 80084dc:	0d5b      	lsrs	r3, r3, #21
 80084de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80084e2:	4b08      	ldr	r3, [pc, #32]	; (8008504 <I2C_TransferConfig+0x60>)
 80084e4:	430b      	orrs	r3, r1
 80084e6:	43db      	mvns	r3, r3
 80084e8:	ea02 0103 	and.w	r1, r2, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	697a      	ldr	r2, [r7, #20]
 80084f2:	430a      	orrs	r2, r1
 80084f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80084f6:	bf00      	nop
 80084f8:	371c      	adds	r7, #28
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	03ff63ff 	.word	0x03ff63ff

08008508 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008518:	b2db      	uxtb	r3, r3
 800851a:	2b20      	cmp	r3, #32
 800851c:	d138      	bne.n	8008590 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008524:	2b01      	cmp	r3, #1
 8008526:	d101      	bne.n	800852c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008528:	2302      	movs	r3, #2
 800852a:	e032      	b.n	8008592 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2224      	movs	r2, #36	; 0x24
 8008538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f022 0201 	bic.w	r2, r2, #1
 800854a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800855a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6819      	ldr	r1, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	430a      	orrs	r2, r1
 800856a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f042 0201 	orr.w	r2, r2, #1
 800857a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2220      	movs	r2, #32
 8008580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800858c:	2300      	movs	r3, #0
 800858e:	e000      	b.n	8008592 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008590:	2302      	movs	r3, #2
  }
}
 8008592:	4618      	mov	r0, r3
 8008594:	370c      	adds	r7, #12
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800859e:	b480      	push	{r7}
 80085a0:	b085      	sub	sp, #20
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	2b20      	cmp	r3, #32
 80085b2:	d139      	bne.n	8008628 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d101      	bne.n	80085c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80085be:	2302      	movs	r3, #2
 80085c0:	e033      	b.n	800862a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2224      	movs	r2, #36	; 0x24
 80085ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f022 0201 	bic.w	r2, r2, #1
 80085e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80085f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	021b      	lsls	r3, r3, #8
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f042 0201 	orr.w	r2, r2, #1
 8008612:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2220      	movs	r2, #32
 8008618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	e000      	b.n	800862a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008628:	2302      	movs	r3, #2
  }
}
 800862a:	4618      	mov	r0, r3
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
	...

08008638 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	460b      	mov	r3, r1
 8008642:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8008644:	4b18      	ldr	r3, [pc, #96]	; (80086a8 <HAL_PWR_EnterSTOPMode+0x70>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f023 0201 	bic.w	r2, r3, #1
 800864c:	4916      	ldr	r1, [pc, #88]	; (80086a8 <HAL_PWR_EnterSTOPMode+0x70>)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4313      	orrs	r3, r2
 8008652:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8008654:	4b14      	ldr	r3, [pc, #80]	; (80086a8 <HAL_PWR_EnterSTOPMode+0x70>)
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	4a13      	ldr	r2, [pc, #76]	; (80086a8 <HAL_PWR_EnterSTOPMode+0x70>)
 800865a:	f023 0305 	bic.w	r3, r3, #5
 800865e:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8008660:	4b11      	ldr	r3, [pc, #68]	; (80086a8 <HAL_PWR_EnterSTOPMode+0x70>)
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	4a10      	ldr	r2, [pc, #64]	; (80086a8 <HAL_PWR_EnterSTOPMode+0x70>)
 8008666:	f023 0302 	bic.w	r3, r3, #2
 800866a:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800866c:	4b0f      	ldr	r3, [pc, #60]	; (80086ac <HAL_PWR_EnterSTOPMode+0x74>)
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	4a0e      	ldr	r2, [pc, #56]	; (80086ac <HAL_PWR_EnterSTOPMode+0x74>)
 8008672:	f043 0304 	orr.w	r3, r3, #4
 8008676:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8008678:	f3bf 8f4f 	dsb	sy
}
 800867c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800867e:	f3bf 8f6f 	isb	sy
}
 8008682:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8008684:	78fb      	ldrb	r3, [r7, #3]
 8008686:	2b01      	cmp	r3, #1
 8008688:	d101      	bne.n	800868e <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800868a:	bf30      	wfi
 800868c:	e000      	b.n	8008690 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800868e:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008690:	4b06      	ldr	r3, [pc, #24]	; (80086ac <HAL_PWR_EnterSTOPMode+0x74>)
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	4a05      	ldr	r2, [pc, #20]	; (80086ac <HAL_PWR_EnterSTOPMode+0x74>)
 8008696:	f023 0304 	bic.w	r3, r3, #4
 800869a:	6113      	str	r3, [r2, #16]
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr
 80086a8:	58024800 	.word	0x58024800
 80086ac:	e000ed00 	.word	0xe000ed00

080086b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80086b8:	4b19      	ldr	r3, [pc, #100]	; (8008720 <HAL_PWREx_ConfigSupply+0x70>)
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	f003 0304 	and.w	r3, r3, #4
 80086c0:	2b04      	cmp	r3, #4
 80086c2:	d00a      	beq.n	80086da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80086c4:	4b16      	ldr	r3, [pc, #88]	; (8008720 <HAL_PWREx_ConfigSupply+0x70>)
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	f003 0307 	and.w	r3, r3, #7
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d001      	beq.n	80086d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e01f      	b.n	8008716 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	e01d      	b.n	8008716 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80086da:	4b11      	ldr	r3, [pc, #68]	; (8008720 <HAL_PWREx_ConfigSupply+0x70>)
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	f023 0207 	bic.w	r2, r3, #7
 80086e2:	490f      	ldr	r1, [pc, #60]	; (8008720 <HAL_PWREx_ConfigSupply+0x70>)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80086ea:	f7fa f989 	bl	8002a00 <HAL_GetTick>
 80086ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80086f0:	e009      	b.n	8008706 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80086f2:	f7fa f985 	bl	8002a00 <HAL_GetTick>
 80086f6:	4602      	mov	r2, r0
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	1ad3      	subs	r3, r2, r3
 80086fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008700:	d901      	bls.n	8008706 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	e007      	b.n	8008716 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008706:	4b06      	ldr	r3, [pc, #24]	; (8008720 <HAL_PWREx_ConfigSupply+0x70>)
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800870e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008712:	d1ee      	bne.n	80086f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	58024800 	.word	0x58024800

08008724 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b08c      	sub	sp, #48	; 0x30
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d102      	bne.n	8008738 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	f000 bc1d 	b.w	8008f72 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f003 0301 	and.w	r3, r3, #1
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 8087 	beq.w	8008854 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008746:	4b99      	ldr	r3, [pc, #612]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800874e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008750:	4b96      	ldr	r3, [pc, #600]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008754:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008758:	2b10      	cmp	r3, #16
 800875a:	d007      	beq.n	800876c <HAL_RCC_OscConfig+0x48>
 800875c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875e:	2b18      	cmp	r3, #24
 8008760:	d110      	bne.n	8008784 <HAL_RCC_OscConfig+0x60>
 8008762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008764:	f003 0303 	and.w	r3, r3, #3
 8008768:	2b02      	cmp	r3, #2
 800876a:	d10b      	bne.n	8008784 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800876c:	4b8f      	ldr	r3, [pc, #572]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008774:	2b00      	cmp	r3, #0
 8008776:	d06c      	beq.n	8008852 <HAL_RCC_OscConfig+0x12e>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d168      	bne.n	8008852 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	e3f6      	b.n	8008f72 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800878c:	d106      	bne.n	800879c <HAL_RCC_OscConfig+0x78>
 800878e:	4b87      	ldr	r3, [pc, #540]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a86      	ldr	r2, [pc, #536]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008798:	6013      	str	r3, [r2, #0]
 800879a:	e02e      	b.n	80087fa <HAL_RCC_OscConfig+0xd6>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d10c      	bne.n	80087be <HAL_RCC_OscConfig+0x9a>
 80087a4:	4b81      	ldr	r3, [pc, #516]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a80      	ldr	r2, [pc, #512]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80087aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087ae:	6013      	str	r3, [r2, #0]
 80087b0:	4b7e      	ldr	r3, [pc, #504]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a7d      	ldr	r2, [pc, #500]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80087b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087ba:	6013      	str	r3, [r2, #0]
 80087bc:	e01d      	b.n	80087fa <HAL_RCC_OscConfig+0xd6>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087c6:	d10c      	bne.n	80087e2 <HAL_RCC_OscConfig+0xbe>
 80087c8:	4b78      	ldr	r3, [pc, #480]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a77      	ldr	r2, [pc, #476]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80087ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087d2:	6013      	str	r3, [r2, #0]
 80087d4:	4b75      	ldr	r3, [pc, #468]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a74      	ldr	r2, [pc, #464]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80087da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087de:	6013      	str	r3, [r2, #0]
 80087e0:	e00b      	b.n	80087fa <HAL_RCC_OscConfig+0xd6>
 80087e2:	4b72      	ldr	r3, [pc, #456]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a71      	ldr	r2, [pc, #452]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80087e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087ec:	6013      	str	r3, [r2, #0]
 80087ee:	4b6f      	ldr	r3, [pc, #444]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a6e      	ldr	r2, [pc, #440]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80087f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d013      	beq.n	800882a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008802:	f7fa f8fd 	bl	8002a00 <HAL_GetTick>
 8008806:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008808:	e008      	b.n	800881c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800880a:	f7fa f8f9 	bl	8002a00 <HAL_GetTick>
 800880e:	4602      	mov	r2, r0
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	2b64      	cmp	r3, #100	; 0x64
 8008816:	d901      	bls.n	800881c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008818:	2303      	movs	r3, #3
 800881a:	e3aa      	b.n	8008f72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800881c:	4b63      	ldr	r3, [pc, #396]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d0f0      	beq.n	800880a <HAL_RCC_OscConfig+0xe6>
 8008828:	e014      	b.n	8008854 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800882a:	f7fa f8e9 	bl	8002a00 <HAL_GetTick>
 800882e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008830:	e008      	b.n	8008844 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008832:	f7fa f8e5 	bl	8002a00 <HAL_GetTick>
 8008836:	4602      	mov	r2, r0
 8008838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	2b64      	cmp	r3, #100	; 0x64
 800883e:	d901      	bls.n	8008844 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008840:	2303      	movs	r3, #3
 8008842:	e396      	b.n	8008f72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008844:	4b59      	ldr	r3, [pc, #356]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1f0      	bne.n	8008832 <HAL_RCC_OscConfig+0x10e>
 8008850:	e000      	b.n	8008854 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008852:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 0302 	and.w	r3, r3, #2
 800885c:	2b00      	cmp	r3, #0
 800885e:	f000 80cb 	beq.w	80089f8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008862:	4b52      	ldr	r3, [pc, #328]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800886a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800886c:	4b4f      	ldr	r3, [pc, #316]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 800886e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008870:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008872:	6a3b      	ldr	r3, [r7, #32]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d007      	beq.n	8008888 <HAL_RCC_OscConfig+0x164>
 8008878:	6a3b      	ldr	r3, [r7, #32]
 800887a:	2b18      	cmp	r3, #24
 800887c:	d156      	bne.n	800892c <HAL_RCC_OscConfig+0x208>
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	f003 0303 	and.w	r3, r3, #3
 8008884:	2b00      	cmp	r3, #0
 8008886:	d151      	bne.n	800892c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008888:	4b48      	ldr	r3, [pc, #288]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 0304 	and.w	r3, r3, #4
 8008890:	2b00      	cmp	r3, #0
 8008892:	d005      	beq.n	80088a0 <HAL_RCC_OscConfig+0x17c>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d101      	bne.n	80088a0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e368      	b.n	8008f72 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80088a0:	4b42      	ldr	r3, [pc, #264]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f023 0219 	bic.w	r2, r3, #25
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	493f      	ldr	r1, [pc, #252]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80088ae:	4313      	orrs	r3, r2
 80088b0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80088b2:	f7fa f8a5 	bl	8002a00 <HAL_GetTick>
 80088b6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088b8:	e008      	b.n	80088cc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088ba:	f7fa f8a1 	bl	8002a00 <HAL_GetTick>
 80088be:	4602      	mov	r2, r0
 80088c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d901      	bls.n	80088cc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80088c8:	2303      	movs	r3, #3
 80088ca:	e352      	b.n	8008f72 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088cc:	4b37      	ldr	r3, [pc, #220]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 0304 	and.w	r3, r3, #4
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d0f0      	beq.n	80088ba <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088d8:	f7fa f8d2 	bl	8002a80 <HAL_GetREVID>
 80088dc:	4603      	mov	r3, r0
 80088de:	f241 0203 	movw	r2, #4099	; 0x1003
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d817      	bhi.n	8008916 <HAL_RCC_OscConfig+0x1f2>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	2b40      	cmp	r3, #64	; 0x40
 80088ec:	d108      	bne.n	8008900 <HAL_RCC_OscConfig+0x1dc>
 80088ee:	4b2f      	ldr	r3, [pc, #188]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80088f6:	4a2d      	ldr	r2, [pc, #180]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80088f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088fc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088fe:	e07b      	b.n	80089f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008900:	4b2a      	ldr	r3, [pc, #168]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	031b      	lsls	r3, r3, #12
 800890e:	4927      	ldr	r1, [pc, #156]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008910:	4313      	orrs	r3, r2
 8008912:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008914:	e070      	b.n	80089f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008916:	4b25      	ldr	r3, [pc, #148]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	061b      	lsls	r3, r3, #24
 8008924:	4921      	ldr	r1, [pc, #132]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008926:	4313      	orrs	r3, r2
 8008928:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800892a:	e065      	b.n	80089f8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d048      	beq.n	80089c6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008934:	4b1d      	ldr	r3, [pc, #116]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f023 0219 	bic.w	r2, r3, #25
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	491a      	ldr	r1, [pc, #104]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008942:	4313      	orrs	r3, r2
 8008944:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008946:	f7fa f85b 	bl	8002a00 <HAL_GetTick>
 800894a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800894c:	e008      	b.n	8008960 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800894e:	f7fa f857 	bl	8002a00 <HAL_GetTick>
 8008952:	4602      	mov	r2, r0
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	2b02      	cmp	r3, #2
 800895a:	d901      	bls.n	8008960 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	e308      	b.n	8008f72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008960:	4b12      	ldr	r3, [pc, #72]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 0304 	and.w	r3, r3, #4
 8008968:	2b00      	cmp	r3, #0
 800896a:	d0f0      	beq.n	800894e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800896c:	f7fa f888 	bl	8002a80 <HAL_GetREVID>
 8008970:	4603      	mov	r3, r0
 8008972:	f241 0203 	movw	r2, #4099	; 0x1003
 8008976:	4293      	cmp	r3, r2
 8008978:	d81a      	bhi.n	80089b0 <HAL_RCC_OscConfig+0x28c>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	2b40      	cmp	r3, #64	; 0x40
 8008980:	d108      	bne.n	8008994 <HAL_RCC_OscConfig+0x270>
 8008982:	4b0a      	ldr	r3, [pc, #40]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800898a:	4a08      	ldr	r2, [pc, #32]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 800898c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008990:	6053      	str	r3, [r2, #4]
 8008992:	e031      	b.n	80089f8 <HAL_RCC_OscConfig+0x2d4>
 8008994:	4b05      	ldr	r3, [pc, #20]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	031b      	lsls	r3, r3, #12
 80089a2:	4902      	ldr	r1, [pc, #8]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80089a4:	4313      	orrs	r3, r2
 80089a6:	604b      	str	r3, [r1, #4]
 80089a8:	e026      	b.n	80089f8 <HAL_RCC_OscConfig+0x2d4>
 80089aa:	bf00      	nop
 80089ac:	58024400 	.word	0x58024400
 80089b0:	4b9a      	ldr	r3, [pc, #616]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	061b      	lsls	r3, r3, #24
 80089be:	4997      	ldr	r1, [pc, #604]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 80089c0:	4313      	orrs	r3, r2
 80089c2:	604b      	str	r3, [r1, #4]
 80089c4:	e018      	b.n	80089f8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089c6:	4b95      	ldr	r3, [pc, #596]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a94      	ldr	r2, [pc, #592]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 80089cc:	f023 0301 	bic.w	r3, r3, #1
 80089d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089d2:	f7fa f815 	bl	8002a00 <HAL_GetTick>
 80089d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80089d8:	e008      	b.n	80089ec <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089da:	f7fa f811 	bl	8002a00 <HAL_GetTick>
 80089de:	4602      	mov	r2, r0
 80089e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d901      	bls.n	80089ec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e2c2      	b.n	8008f72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80089ec:	4b8b      	ldr	r3, [pc, #556]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 0304 	and.w	r3, r3, #4
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d1f0      	bne.n	80089da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 0310 	and.w	r3, r3, #16
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f000 80a9 	beq.w	8008b58 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a06:	4b85      	ldr	r3, [pc, #532]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a0e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008a10:	4b82      	ldr	r3, [pc, #520]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a14:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	2b08      	cmp	r3, #8
 8008a1a:	d007      	beq.n	8008a2c <HAL_RCC_OscConfig+0x308>
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	2b18      	cmp	r3, #24
 8008a20:	d13a      	bne.n	8008a98 <HAL_RCC_OscConfig+0x374>
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	f003 0303 	and.w	r3, r3, #3
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d135      	bne.n	8008a98 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a2c:	4b7b      	ldr	r3, [pc, #492]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d005      	beq.n	8008a44 <HAL_RCC_OscConfig+0x320>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	69db      	ldr	r3, [r3, #28]
 8008a3c:	2b80      	cmp	r3, #128	; 0x80
 8008a3e:	d001      	beq.n	8008a44 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	e296      	b.n	8008f72 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a44:	f7fa f81c 	bl	8002a80 <HAL_GetREVID>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	f241 0203 	movw	r2, #4099	; 0x1003
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d817      	bhi.n	8008a82 <HAL_RCC_OscConfig+0x35e>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a1b      	ldr	r3, [r3, #32]
 8008a56:	2b20      	cmp	r3, #32
 8008a58:	d108      	bne.n	8008a6c <HAL_RCC_OscConfig+0x348>
 8008a5a:	4b70      	ldr	r3, [pc, #448]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008a62:	4a6e      	ldr	r2, [pc, #440]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008a64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a68:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a6a:	e075      	b.n	8008b58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a6c:	4b6b      	ldr	r3, [pc, #428]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a1b      	ldr	r3, [r3, #32]
 8008a78:	069b      	lsls	r3, r3, #26
 8008a7a:	4968      	ldr	r1, [pc, #416]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a80:	e06a      	b.n	8008b58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a82:	4b66      	ldr	r3, [pc, #408]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	061b      	lsls	r3, r3, #24
 8008a90:	4962      	ldr	r1, [pc, #392]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008a92:	4313      	orrs	r3, r2
 8008a94:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a96:	e05f      	b.n	8008b58 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	69db      	ldr	r3, [r3, #28]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d042      	beq.n	8008b26 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008aa0:	4b5e      	ldr	r3, [pc, #376]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a5d      	ldr	r2, [pc, #372]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aac:	f7f9 ffa8 	bl	8002a00 <HAL_GetTick>
 8008ab0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ab2:	e008      	b.n	8008ac6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008ab4:	f7f9 ffa4 	bl	8002a00 <HAL_GetTick>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d901      	bls.n	8008ac6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e255      	b.n	8008f72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ac6:	4b55      	ldr	r3, [pc, #340]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d0f0      	beq.n	8008ab4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ad2:	f7f9 ffd5 	bl	8002a80 <HAL_GetREVID>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	f241 0203 	movw	r2, #4099	; 0x1003
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d817      	bhi.n	8008b10 <HAL_RCC_OscConfig+0x3ec>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a1b      	ldr	r3, [r3, #32]
 8008ae4:	2b20      	cmp	r3, #32
 8008ae6:	d108      	bne.n	8008afa <HAL_RCC_OscConfig+0x3d6>
 8008ae8:	4b4c      	ldr	r3, [pc, #304]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008af0:	4a4a      	ldr	r2, [pc, #296]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008af2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008af6:	6053      	str	r3, [r2, #4]
 8008af8:	e02e      	b.n	8008b58 <HAL_RCC_OscConfig+0x434>
 8008afa:	4b48      	ldr	r3, [pc, #288]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a1b      	ldr	r3, [r3, #32]
 8008b06:	069b      	lsls	r3, r3, #26
 8008b08:	4944      	ldr	r1, [pc, #272]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	604b      	str	r3, [r1, #4]
 8008b0e:	e023      	b.n	8008b58 <HAL_RCC_OscConfig+0x434>
 8008b10:	4b42      	ldr	r3, [pc, #264]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a1b      	ldr	r3, [r3, #32]
 8008b1c:	061b      	lsls	r3, r3, #24
 8008b1e:	493f      	ldr	r1, [pc, #252]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008b20:	4313      	orrs	r3, r2
 8008b22:	60cb      	str	r3, [r1, #12]
 8008b24:	e018      	b.n	8008b58 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008b26:	4b3d      	ldr	r3, [pc, #244]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a3c      	ldr	r2, [pc, #240]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008b2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b32:	f7f9 ff65 	bl	8002a00 <HAL_GetTick>
 8008b36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b38:	e008      	b.n	8008b4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008b3a:	f7f9 ff61 	bl	8002a00 <HAL_GetTick>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b42:	1ad3      	subs	r3, r2, r3
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d901      	bls.n	8008b4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	e212      	b.n	8008f72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b4c:	4b33      	ldr	r3, [pc, #204]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d1f0      	bne.n	8008b3a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 0308 	and.w	r3, r3, #8
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d036      	beq.n	8008bd2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	695b      	ldr	r3, [r3, #20]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d019      	beq.n	8008ba0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b6c:	4b2b      	ldr	r3, [pc, #172]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b70:	4a2a      	ldr	r2, [pc, #168]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008b72:	f043 0301 	orr.w	r3, r3, #1
 8008b76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b78:	f7f9 ff42 	bl	8002a00 <HAL_GetTick>
 8008b7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b7e:	e008      	b.n	8008b92 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b80:	f7f9 ff3e 	bl	8002a00 <HAL_GetTick>
 8008b84:	4602      	mov	r2, r0
 8008b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d901      	bls.n	8008b92 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	e1ef      	b.n	8008f72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b92:	4b22      	ldr	r3, [pc, #136]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b96:	f003 0302 	and.w	r3, r3, #2
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d0f0      	beq.n	8008b80 <HAL_RCC_OscConfig+0x45c>
 8008b9e:	e018      	b.n	8008bd2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ba0:	4b1e      	ldr	r3, [pc, #120]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ba4:	4a1d      	ldr	r2, [pc, #116]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008ba6:	f023 0301 	bic.w	r3, r3, #1
 8008baa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bac:	f7f9 ff28 	bl	8002a00 <HAL_GetTick>
 8008bb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008bb2:	e008      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008bb4:	f7f9 ff24 	bl	8002a00 <HAL_GetTick>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbc:	1ad3      	subs	r3, r2, r3
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	d901      	bls.n	8008bc6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	e1d5      	b.n	8008f72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008bc6:	4b15      	ldr	r3, [pc, #84]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bca:	f003 0302 	and.w	r3, r3, #2
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1f0      	bne.n	8008bb4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 0320 	and.w	r3, r3, #32
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d039      	beq.n	8008c52 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	699b      	ldr	r3, [r3, #24]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d01c      	beq.n	8008c20 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008be6:	4b0d      	ldr	r3, [pc, #52]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a0c      	ldr	r2, [pc, #48]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008bec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008bf0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008bf2:	f7f9 ff05 	bl	8002a00 <HAL_GetTick>
 8008bf6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008bf8:	e008      	b.n	8008c0c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008bfa:	f7f9 ff01 	bl	8002a00 <HAL_GetTick>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d901      	bls.n	8008c0c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e1b2      	b.n	8008f72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008c0c:	4b03      	ldr	r3, [pc, #12]	; (8008c1c <HAL_RCC_OscConfig+0x4f8>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d0f0      	beq.n	8008bfa <HAL_RCC_OscConfig+0x4d6>
 8008c18:	e01b      	b.n	8008c52 <HAL_RCC_OscConfig+0x52e>
 8008c1a:	bf00      	nop
 8008c1c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008c20:	4b9b      	ldr	r3, [pc, #620]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a9a      	ldr	r2, [pc, #616]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008c26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c2a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008c2c:	f7f9 fee8 	bl	8002a00 <HAL_GetTick>
 8008c30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c32:	e008      	b.n	8008c46 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008c34:	f7f9 fee4 	bl	8002a00 <HAL_GetTick>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d901      	bls.n	8008c46 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008c42:	2303      	movs	r3, #3
 8008c44:	e195      	b.n	8008f72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c46:	4b92      	ldr	r3, [pc, #584]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1f0      	bne.n	8008c34 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 0304 	and.w	r3, r3, #4
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f000 8081 	beq.w	8008d62 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008c60:	4b8c      	ldr	r3, [pc, #560]	; (8008e94 <HAL_RCC_OscConfig+0x770>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a8b      	ldr	r2, [pc, #556]	; (8008e94 <HAL_RCC_OscConfig+0x770>)
 8008c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c6c:	f7f9 fec8 	bl	8002a00 <HAL_GetTick>
 8008c70:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c72:	e008      	b.n	8008c86 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008c74:	f7f9 fec4 	bl	8002a00 <HAL_GetTick>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	2b64      	cmp	r3, #100	; 0x64
 8008c80:	d901      	bls.n	8008c86 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008c82:	2303      	movs	r3, #3
 8008c84:	e175      	b.n	8008f72 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c86:	4b83      	ldr	r3, [pc, #524]	; (8008e94 <HAL_RCC_OscConfig+0x770>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d0f0      	beq.n	8008c74 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d106      	bne.n	8008ca8 <HAL_RCC_OscConfig+0x584>
 8008c9a:	4b7d      	ldr	r3, [pc, #500]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c9e:	4a7c      	ldr	r2, [pc, #496]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008ca0:	f043 0301 	orr.w	r3, r3, #1
 8008ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8008ca6:	e02d      	b.n	8008d04 <HAL_RCC_OscConfig+0x5e0>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10c      	bne.n	8008cca <HAL_RCC_OscConfig+0x5a6>
 8008cb0:	4b77      	ldr	r3, [pc, #476]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cb4:	4a76      	ldr	r2, [pc, #472]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008cb6:	f023 0301 	bic.w	r3, r3, #1
 8008cba:	6713      	str	r3, [r2, #112]	; 0x70
 8008cbc:	4b74      	ldr	r3, [pc, #464]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cc0:	4a73      	ldr	r2, [pc, #460]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008cc2:	f023 0304 	bic.w	r3, r3, #4
 8008cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8008cc8:	e01c      	b.n	8008d04 <HAL_RCC_OscConfig+0x5e0>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	2b05      	cmp	r3, #5
 8008cd0:	d10c      	bne.n	8008cec <HAL_RCC_OscConfig+0x5c8>
 8008cd2:	4b6f      	ldr	r3, [pc, #444]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cd6:	4a6e      	ldr	r2, [pc, #440]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008cd8:	f043 0304 	orr.w	r3, r3, #4
 8008cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8008cde:	4b6c      	ldr	r3, [pc, #432]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ce2:	4a6b      	ldr	r2, [pc, #428]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008ce4:	f043 0301 	orr.w	r3, r3, #1
 8008ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8008cea:	e00b      	b.n	8008d04 <HAL_RCC_OscConfig+0x5e0>
 8008cec:	4b68      	ldr	r3, [pc, #416]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf0:	4a67      	ldr	r2, [pc, #412]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008cf2:	f023 0301 	bic.w	r3, r3, #1
 8008cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8008cf8:	4b65      	ldr	r3, [pc, #404]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cfc:	4a64      	ldr	r2, [pc, #400]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008cfe:	f023 0304 	bic.w	r3, r3, #4
 8008d02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d015      	beq.n	8008d38 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d0c:	f7f9 fe78 	bl	8002a00 <HAL_GetTick>
 8008d10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d12:	e00a      	b.n	8008d2a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d14:	f7f9 fe74 	bl	8002a00 <HAL_GetTick>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d901      	bls.n	8008d2a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008d26:	2303      	movs	r3, #3
 8008d28:	e123      	b.n	8008f72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d2a:	4b59      	ldr	r3, [pc, #356]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d2e:	f003 0302 	and.w	r3, r3, #2
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d0ee      	beq.n	8008d14 <HAL_RCC_OscConfig+0x5f0>
 8008d36:	e014      	b.n	8008d62 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d38:	f7f9 fe62 	bl	8002a00 <HAL_GetTick>
 8008d3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d3e:	e00a      	b.n	8008d56 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d40:	f7f9 fe5e 	bl	8002a00 <HAL_GetTick>
 8008d44:	4602      	mov	r2, r0
 8008d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d901      	bls.n	8008d56 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008d52:	2303      	movs	r3, #3
 8008d54:	e10d      	b.n	8008f72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d56:	4b4e      	ldr	r3, [pc, #312]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d5a:	f003 0302 	and.w	r3, r3, #2
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1ee      	bne.n	8008d40 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f000 8102 	beq.w	8008f70 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008d6c:	4b48      	ldr	r3, [pc, #288]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d74:	2b18      	cmp	r3, #24
 8008d76:	f000 80bd 	beq.w	8008ef4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	f040 809e 	bne.w	8008ec0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d84:	4b42      	ldr	r3, [pc, #264]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a41      	ldr	r2, [pc, #260]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d90:	f7f9 fe36 	bl	8002a00 <HAL_GetTick>
 8008d94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d96:	e008      	b.n	8008daa <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d98:	f7f9 fe32 	bl	8002a00 <HAL_GetTick>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d901      	bls.n	8008daa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e0e3      	b.n	8008f72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008daa:	4b39      	ldr	r3, [pc, #228]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1f0      	bne.n	8008d98 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008db6:	4b36      	ldr	r3, [pc, #216]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008dba:	4b37      	ldr	r3, [pc, #220]	; (8008e98 <HAL_RCC_OscConfig+0x774>)
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008dc6:	0112      	lsls	r2, r2, #4
 8008dc8:	430a      	orrs	r2, r1
 8008dca:	4931      	ldr	r1, [pc, #196]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	628b      	str	r3, [r1, #40]	; 0x28
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dde:	3b01      	subs	r3, #1
 8008de0:	025b      	lsls	r3, r3, #9
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	431a      	orrs	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dea:	3b01      	subs	r3, #1
 8008dec:	041b      	lsls	r3, r3, #16
 8008dee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008df2:	431a      	orrs	r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	061b      	lsls	r3, r3, #24
 8008dfc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e00:	4923      	ldr	r1, [pc, #140]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008e02:	4313      	orrs	r3, r2
 8008e04:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008e06:	4b22      	ldr	r3, [pc, #136]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0a:	4a21      	ldr	r2, [pc, #132]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008e0c:	f023 0301 	bic.w	r3, r3, #1
 8008e10:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008e12:	4b1f      	ldr	r3, [pc, #124]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008e14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e16:	4b21      	ldr	r3, [pc, #132]	; (8008e9c <HAL_RCC_OscConfig+0x778>)
 8008e18:	4013      	ands	r3, r2
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008e1e:	00d2      	lsls	r2, r2, #3
 8008e20:	491b      	ldr	r1, [pc, #108]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008e22:	4313      	orrs	r3, r2
 8008e24:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008e26:	4b1a      	ldr	r3, [pc, #104]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2a:	f023 020c 	bic.w	r2, r3, #12
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e32:	4917      	ldr	r1, [pc, #92]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008e34:	4313      	orrs	r3, r2
 8008e36:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008e38:	4b15      	ldr	r3, [pc, #84]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3c:	f023 0202 	bic.w	r2, r3, #2
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e44:	4912      	ldr	r1, [pc, #72]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008e46:	4313      	orrs	r3, r2
 8008e48:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008e4a:	4b11      	ldr	r3, [pc, #68]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4e:	4a10      	ldr	r2, [pc, #64]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e56:	4b0e      	ldr	r3, [pc, #56]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5a:	4a0d      	ldr	r2, [pc, #52]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008e62:	4b0b      	ldr	r3, [pc, #44]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e66:	4a0a      	ldr	r2, [pc, #40]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008e6e:	4b08      	ldr	r3, [pc, #32]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e72:	4a07      	ldr	r2, [pc, #28]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008e74:	f043 0301 	orr.w	r3, r3, #1
 8008e78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e7a:	4b05      	ldr	r3, [pc, #20]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a04      	ldr	r2, [pc, #16]	; (8008e90 <HAL_RCC_OscConfig+0x76c>)
 8008e80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e86:	f7f9 fdbb 	bl	8002a00 <HAL_GetTick>
 8008e8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e8c:	e011      	b.n	8008eb2 <HAL_RCC_OscConfig+0x78e>
 8008e8e:	bf00      	nop
 8008e90:	58024400 	.word	0x58024400
 8008e94:	58024800 	.word	0x58024800
 8008e98:	fffffc0c 	.word	0xfffffc0c
 8008e9c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ea0:	f7f9 fdae 	bl	8002a00 <HAL_GetTick>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d901      	bls.n	8008eb2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	e05f      	b.n	8008f72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008eb2:	4b32      	ldr	r3, [pc, #200]	; (8008f7c <HAL_RCC_OscConfig+0x858>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d0f0      	beq.n	8008ea0 <HAL_RCC_OscConfig+0x77c>
 8008ebe:	e057      	b.n	8008f70 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ec0:	4b2e      	ldr	r3, [pc, #184]	; (8008f7c <HAL_RCC_OscConfig+0x858>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a2d      	ldr	r2, [pc, #180]	; (8008f7c <HAL_RCC_OscConfig+0x858>)
 8008ec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ecc:	f7f9 fd98 	bl	8002a00 <HAL_GetTick>
 8008ed0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ed2:	e008      	b.n	8008ee6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ed4:	f7f9 fd94 	bl	8002a00 <HAL_GetTick>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d901      	bls.n	8008ee6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	e045      	b.n	8008f72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ee6:	4b25      	ldr	r3, [pc, #148]	; (8008f7c <HAL_RCC_OscConfig+0x858>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1f0      	bne.n	8008ed4 <HAL_RCC_OscConfig+0x7b0>
 8008ef2:	e03d      	b.n	8008f70 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008ef4:	4b21      	ldr	r3, [pc, #132]	; (8008f7c <HAL_RCC_OscConfig+0x858>)
 8008ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008efa:	4b20      	ldr	r3, [pc, #128]	; (8008f7c <HAL_RCC_OscConfig+0x858>)
 8008efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efe:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d031      	beq.n	8008f6c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	f003 0203 	and.w	r2, r3, #3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d12a      	bne.n	8008f6c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	091b      	lsrs	r3, r3, #4
 8008f1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d122      	bne.n	8008f6c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f30:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d11a      	bne.n	8008f6c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	0a5b      	lsrs	r3, r3, #9
 8008f3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f42:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d111      	bne.n	8008f6c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	0c1b      	lsrs	r3, r3, #16
 8008f4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f54:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d108      	bne.n	8008f6c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	0e1b      	lsrs	r3, r3, #24
 8008f5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f66:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d001      	beq.n	8008f70 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e000      	b.n	8008f72 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3730      	adds	r7, #48	; 0x30
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	58024400 	.word	0x58024400

08008f80 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b086      	sub	sp, #24
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d101      	bne.n	8008f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e19c      	b.n	80092ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008f94:	4b8a      	ldr	r3, [pc, #552]	; (80091c0 <HAL_RCC_ClockConfig+0x240>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 030f 	and.w	r3, r3, #15
 8008f9c:	683a      	ldr	r2, [r7, #0]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d910      	bls.n	8008fc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fa2:	4b87      	ldr	r3, [pc, #540]	; (80091c0 <HAL_RCC_ClockConfig+0x240>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f023 020f 	bic.w	r2, r3, #15
 8008faa:	4985      	ldr	r1, [pc, #532]	; (80091c0 <HAL_RCC_ClockConfig+0x240>)
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fb2:	4b83      	ldr	r3, [pc, #524]	; (80091c0 <HAL_RCC_ClockConfig+0x240>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 030f 	and.w	r3, r3, #15
 8008fba:	683a      	ldr	r2, [r7, #0]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d001      	beq.n	8008fc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e184      	b.n	80092ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 0304 	and.w	r3, r3, #4
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d010      	beq.n	8008ff2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	691a      	ldr	r2, [r3, #16]
 8008fd4:	4b7b      	ldr	r3, [pc, #492]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d908      	bls.n	8008ff2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008fe0:	4b78      	ldr	r3, [pc, #480]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	4975      	ldr	r1, [pc, #468]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 0308 	and.w	r3, r3, #8
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d010      	beq.n	8009020 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	695a      	ldr	r2, [r3, #20]
 8009002:	4b70      	ldr	r3, [pc, #448]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 8009004:	69db      	ldr	r3, [r3, #28]
 8009006:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800900a:	429a      	cmp	r2, r3
 800900c:	d908      	bls.n	8009020 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800900e:	4b6d      	ldr	r3, [pc, #436]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 8009010:	69db      	ldr	r3, [r3, #28]
 8009012:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	695b      	ldr	r3, [r3, #20]
 800901a:	496a      	ldr	r1, [pc, #424]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 800901c:	4313      	orrs	r3, r2
 800901e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f003 0310 	and.w	r3, r3, #16
 8009028:	2b00      	cmp	r3, #0
 800902a:	d010      	beq.n	800904e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	699a      	ldr	r2, [r3, #24]
 8009030:	4b64      	ldr	r3, [pc, #400]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 8009032:	69db      	ldr	r3, [r3, #28]
 8009034:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009038:	429a      	cmp	r2, r3
 800903a:	d908      	bls.n	800904e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800903c:	4b61      	ldr	r3, [pc, #388]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 800903e:	69db      	ldr	r3, [r3, #28]
 8009040:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	495e      	ldr	r1, [pc, #376]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 800904a:	4313      	orrs	r3, r2
 800904c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f003 0320 	and.w	r3, r3, #32
 8009056:	2b00      	cmp	r3, #0
 8009058:	d010      	beq.n	800907c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	69da      	ldr	r2, [r3, #28]
 800905e:	4b59      	ldr	r3, [pc, #356]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 8009060:	6a1b      	ldr	r3, [r3, #32]
 8009062:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009066:	429a      	cmp	r2, r3
 8009068:	d908      	bls.n	800907c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800906a:	4b56      	ldr	r3, [pc, #344]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 800906c:	6a1b      	ldr	r3, [r3, #32]
 800906e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	69db      	ldr	r3, [r3, #28]
 8009076:	4953      	ldr	r1, [pc, #332]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 8009078:	4313      	orrs	r3, r2
 800907a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 0302 	and.w	r3, r3, #2
 8009084:	2b00      	cmp	r3, #0
 8009086:	d010      	beq.n	80090aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	68da      	ldr	r2, [r3, #12]
 800908c:	4b4d      	ldr	r3, [pc, #308]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	f003 030f 	and.w	r3, r3, #15
 8009094:	429a      	cmp	r2, r3
 8009096:	d908      	bls.n	80090aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009098:	4b4a      	ldr	r3, [pc, #296]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 800909a:	699b      	ldr	r3, [r3, #24]
 800909c:	f023 020f 	bic.w	r2, r3, #15
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	4947      	ldr	r1, [pc, #284]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 80090a6:	4313      	orrs	r3, r2
 80090a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 0301 	and.w	r3, r3, #1
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d055      	beq.n	8009162 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80090b6:	4b43      	ldr	r3, [pc, #268]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	4940      	ldr	r1, [pc, #256]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 80090c4:	4313      	orrs	r3, r2
 80090c6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d107      	bne.n	80090e0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80090d0:	4b3c      	ldr	r3, [pc, #240]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d121      	bne.n	8009120 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	e0f6      	b.n	80092ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	2b03      	cmp	r3, #3
 80090e6:	d107      	bne.n	80090f8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80090e8:	4b36      	ldr	r3, [pc, #216]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d115      	bne.n	8009120 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	e0ea      	b.n	80092ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d107      	bne.n	8009110 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009100:	4b30      	ldr	r3, [pc, #192]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009108:	2b00      	cmp	r3, #0
 800910a:	d109      	bne.n	8009120 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	e0de      	b.n	80092ce <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009110:	4b2c      	ldr	r3, [pc, #176]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f003 0304 	and.w	r3, r3, #4
 8009118:	2b00      	cmp	r3, #0
 800911a:	d101      	bne.n	8009120 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	e0d6      	b.n	80092ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009120:	4b28      	ldr	r3, [pc, #160]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	f023 0207 	bic.w	r2, r3, #7
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	4925      	ldr	r1, [pc, #148]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 800912e:	4313      	orrs	r3, r2
 8009130:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009132:	f7f9 fc65 	bl	8002a00 <HAL_GetTick>
 8009136:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009138:	e00a      	b.n	8009150 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800913a:	f7f9 fc61 	bl	8002a00 <HAL_GetTick>
 800913e:	4602      	mov	r2, r0
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	f241 3288 	movw	r2, #5000	; 0x1388
 8009148:	4293      	cmp	r3, r2
 800914a:	d901      	bls.n	8009150 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800914c:	2303      	movs	r3, #3
 800914e:	e0be      	b.n	80092ce <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009150:	4b1c      	ldr	r3, [pc, #112]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	00db      	lsls	r3, r3, #3
 800915e:	429a      	cmp	r2, r3
 8009160:	d1eb      	bne.n	800913a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 0302 	and.w	r3, r3, #2
 800916a:	2b00      	cmp	r3, #0
 800916c:	d010      	beq.n	8009190 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	68da      	ldr	r2, [r3, #12]
 8009172:	4b14      	ldr	r3, [pc, #80]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 8009174:	699b      	ldr	r3, [r3, #24]
 8009176:	f003 030f 	and.w	r3, r3, #15
 800917a:	429a      	cmp	r2, r3
 800917c:	d208      	bcs.n	8009190 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800917e:	4b11      	ldr	r3, [pc, #68]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 8009180:	699b      	ldr	r3, [r3, #24]
 8009182:	f023 020f 	bic.w	r2, r3, #15
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	490e      	ldr	r1, [pc, #56]	; (80091c4 <HAL_RCC_ClockConfig+0x244>)
 800918c:	4313      	orrs	r3, r2
 800918e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009190:	4b0b      	ldr	r3, [pc, #44]	; (80091c0 <HAL_RCC_ClockConfig+0x240>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f003 030f 	and.w	r3, r3, #15
 8009198:	683a      	ldr	r2, [r7, #0]
 800919a:	429a      	cmp	r2, r3
 800919c:	d214      	bcs.n	80091c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800919e:	4b08      	ldr	r3, [pc, #32]	; (80091c0 <HAL_RCC_ClockConfig+0x240>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f023 020f 	bic.w	r2, r3, #15
 80091a6:	4906      	ldr	r1, [pc, #24]	; (80091c0 <HAL_RCC_ClockConfig+0x240>)
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091ae:	4b04      	ldr	r3, [pc, #16]	; (80091c0 <HAL_RCC_ClockConfig+0x240>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 030f 	and.w	r3, r3, #15
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d005      	beq.n	80091c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	e086      	b.n	80092ce <HAL_RCC_ClockConfig+0x34e>
 80091c0:	52002000 	.word	0x52002000
 80091c4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0304 	and.w	r3, r3, #4
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d010      	beq.n	80091f6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	691a      	ldr	r2, [r3, #16]
 80091d8:	4b3f      	ldr	r3, [pc, #252]	; (80092d8 <HAL_RCC_ClockConfig+0x358>)
 80091da:	699b      	ldr	r3, [r3, #24]
 80091dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d208      	bcs.n	80091f6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80091e4:	4b3c      	ldr	r3, [pc, #240]	; (80092d8 <HAL_RCC_ClockConfig+0x358>)
 80091e6:	699b      	ldr	r3, [r3, #24]
 80091e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	691b      	ldr	r3, [r3, #16]
 80091f0:	4939      	ldr	r1, [pc, #228]	; (80092d8 <HAL_RCC_ClockConfig+0x358>)
 80091f2:	4313      	orrs	r3, r2
 80091f4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 0308 	and.w	r3, r3, #8
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d010      	beq.n	8009224 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	695a      	ldr	r2, [r3, #20]
 8009206:	4b34      	ldr	r3, [pc, #208]	; (80092d8 <HAL_RCC_ClockConfig+0x358>)
 8009208:	69db      	ldr	r3, [r3, #28]
 800920a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800920e:	429a      	cmp	r2, r3
 8009210:	d208      	bcs.n	8009224 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009212:	4b31      	ldr	r3, [pc, #196]	; (80092d8 <HAL_RCC_ClockConfig+0x358>)
 8009214:	69db      	ldr	r3, [r3, #28]
 8009216:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	695b      	ldr	r3, [r3, #20]
 800921e:	492e      	ldr	r1, [pc, #184]	; (80092d8 <HAL_RCC_ClockConfig+0x358>)
 8009220:	4313      	orrs	r3, r2
 8009222:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f003 0310 	and.w	r3, r3, #16
 800922c:	2b00      	cmp	r3, #0
 800922e:	d010      	beq.n	8009252 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	699a      	ldr	r2, [r3, #24]
 8009234:	4b28      	ldr	r3, [pc, #160]	; (80092d8 <HAL_RCC_ClockConfig+0x358>)
 8009236:	69db      	ldr	r3, [r3, #28]
 8009238:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800923c:	429a      	cmp	r2, r3
 800923e:	d208      	bcs.n	8009252 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009240:	4b25      	ldr	r3, [pc, #148]	; (80092d8 <HAL_RCC_ClockConfig+0x358>)
 8009242:	69db      	ldr	r3, [r3, #28]
 8009244:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	699b      	ldr	r3, [r3, #24]
 800924c:	4922      	ldr	r1, [pc, #136]	; (80092d8 <HAL_RCC_ClockConfig+0x358>)
 800924e:	4313      	orrs	r3, r2
 8009250:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f003 0320 	and.w	r3, r3, #32
 800925a:	2b00      	cmp	r3, #0
 800925c:	d010      	beq.n	8009280 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	69da      	ldr	r2, [r3, #28]
 8009262:	4b1d      	ldr	r3, [pc, #116]	; (80092d8 <HAL_RCC_ClockConfig+0x358>)
 8009264:	6a1b      	ldr	r3, [r3, #32]
 8009266:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800926a:	429a      	cmp	r2, r3
 800926c:	d208      	bcs.n	8009280 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800926e:	4b1a      	ldr	r3, [pc, #104]	; (80092d8 <HAL_RCC_ClockConfig+0x358>)
 8009270:	6a1b      	ldr	r3, [r3, #32]
 8009272:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	69db      	ldr	r3, [r3, #28]
 800927a:	4917      	ldr	r1, [pc, #92]	; (80092d8 <HAL_RCC_ClockConfig+0x358>)
 800927c:	4313      	orrs	r3, r2
 800927e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009280:	f000 f834 	bl	80092ec <HAL_RCC_GetSysClockFreq>
 8009284:	4602      	mov	r2, r0
 8009286:	4b14      	ldr	r3, [pc, #80]	; (80092d8 <HAL_RCC_ClockConfig+0x358>)
 8009288:	699b      	ldr	r3, [r3, #24]
 800928a:	0a1b      	lsrs	r3, r3, #8
 800928c:	f003 030f 	and.w	r3, r3, #15
 8009290:	4912      	ldr	r1, [pc, #72]	; (80092dc <HAL_RCC_ClockConfig+0x35c>)
 8009292:	5ccb      	ldrb	r3, [r1, r3]
 8009294:	f003 031f 	and.w	r3, r3, #31
 8009298:	fa22 f303 	lsr.w	r3, r2, r3
 800929c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800929e:	4b0e      	ldr	r3, [pc, #56]	; (80092d8 <HAL_RCC_ClockConfig+0x358>)
 80092a0:	699b      	ldr	r3, [r3, #24]
 80092a2:	f003 030f 	and.w	r3, r3, #15
 80092a6:	4a0d      	ldr	r2, [pc, #52]	; (80092dc <HAL_RCC_ClockConfig+0x35c>)
 80092a8:	5cd3      	ldrb	r3, [r2, r3]
 80092aa:	f003 031f 	and.w	r3, r3, #31
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	fa22 f303 	lsr.w	r3, r2, r3
 80092b4:	4a0a      	ldr	r2, [pc, #40]	; (80092e0 <HAL_RCC_ClockConfig+0x360>)
 80092b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80092b8:	4a0a      	ldr	r2, [pc, #40]	; (80092e4 <HAL_RCC_ClockConfig+0x364>)
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80092be:	4b0a      	ldr	r3, [pc, #40]	; (80092e8 <HAL_RCC_ClockConfig+0x368>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7f9 fb52 	bl	800296c <HAL_InitTick>
 80092c8:	4603      	mov	r3, r0
 80092ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3718      	adds	r7, #24
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	58024400 	.word	0x58024400
 80092dc:	0801004c 	.word	0x0801004c
 80092e0:	24000030 	.word	0x24000030
 80092e4:	2400002c 	.word	0x2400002c
 80092e8:	24000034 	.word	0x24000034

080092ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b089      	sub	sp, #36	; 0x24
 80092f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092f2:	4bb3      	ldr	r3, [pc, #716]	; (80095c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092fa:	2b18      	cmp	r3, #24
 80092fc:	f200 8155 	bhi.w	80095aa <HAL_RCC_GetSysClockFreq+0x2be>
 8009300:	a201      	add	r2, pc, #4	; (adr r2, 8009308 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009306:	bf00      	nop
 8009308:	0800936d 	.word	0x0800936d
 800930c:	080095ab 	.word	0x080095ab
 8009310:	080095ab 	.word	0x080095ab
 8009314:	080095ab 	.word	0x080095ab
 8009318:	080095ab 	.word	0x080095ab
 800931c:	080095ab 	.word	0x080095ab
 8009320:	080095ab 	.word	0x080095ab
 8009324:	080095ab 	.word	0x080095ab
 8009328:	08009393 	.word	0x08009393
 800932c:	080095ab 	.word	0x080095ab
 8009330:	080095ab 	.word	0x080095ab
 8009334:	080095ab 	.word	0x080095ab
 8009338:	080095ab 	.word	0x080095ab
 800933c:	080095ab 	.word	0x080095ab
 8009340:	080095ab 	.word	0x080095ab
 8009344:	080095ab 	.word	0x080095ab
 8009348:	08009399 	.word	0x08009399
 800934c:	080095ab 	.word	0x080095ab
 8009350:	080095ab 	.word	0x080095ab
 8009354:	080095ab 	.word	0x080095ab
 8009358:	080095ab 	.word	0x080095ab
 800935c:	080095ab 	.word	0x080095ab
 8009360:	080095ab 	.word	0x080095ab
 8009364:	080095ab 	.word	0x080095ab
 8009368:	0800939f 	.word	0x0800939f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800936c:	4b94      	ldr	r3, [pc, #592]	; (80095c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f003 0320 	and.w	r3, r3, #32
 8009374:	2b00      	cmp	r3, #0
 8009376:	d009      	beq.n	800938c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009378:	4b91      	ldr	r3, [pc, #580]	; (80095c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	08db      	lsrs	r3, r3, #3
 800937e:	f003 0303 	and.w	r3, r3, #3
 8009382:	4a90      	ldr	r2, [pc, #576]	; (80095c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009384:	fa22 f303 	lsr.w	r3, r2, r3
 8009388:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800938a:	e111      	b.n	80095b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800938c:	4b8d      	ldr	r3, [pc, #564]	; (80095c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800938e:	61bb      	str	r3, [r7, #24]
    break;
 8009390:	e10e      	b.n	80095b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009392:	4b8d      	ldr	r3, [pc, #564]	; (80095c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009394:	61bb      	str	r3, [r7, #24]
    break;
 8009396:	e10b      	b.n	80095b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009398:	4b8c      	ldr	r3, [pc, #560]	; (80095cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800939a:	61bb      	str	r3, [r7, #24]
    break;
 800939c:	e108      	b.n	80095b0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800939e:	4b88      	ldr	r3, [pc, #544]	; (80095c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a2:	f003 0303 	and.w	r3, r3, #3
 80093a6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80093a8:	4b85      	ldr	r3, [pc, #532]	; (80095c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ac:	091b      	lsrs	r3, r3, #4
 80093ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093b2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80093b4:	4b82      	ldr	r3, [pc, #520]	; (80095c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b8:	f003 0301 	and.w	r3, r3, #1
 80093bc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80093be:	4b80      	ldr	r3, [pc, #512]	; (80095c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c2:	08db      	lsrs	r3, r3, #3
 80093c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	fb02 f303 	mul.w	r3, r2, r3
 80093ce:	ee07 3a90 	vmov	s15, r3
 80093d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093d6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f000 80e1 	beq.w	80095a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	f000 8083 	beq.w	80094f0 <HAL_RCC_GetSysClockFreq+0x204>
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	f200 80a1 	bhi.w	8009534 <HAL_RCC_GetSysClockFreq+0x248>
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d003      	beq.n	8009400 <HAL_RCC_GetSysClockFreq+0x114>
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d056      	beq.n	80094ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80093fe:	e099      	b.n	8009534 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009400:	4b6f      	ldr	r3, [pc, #444]	; (80095c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 0320 	and.w	r3, r3, #32
 8009408:	2b00      	cmp	r3, #0
 800940a:	d02d      	beq.n	8009468 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800940c:	4b6c      	ldr	r3, [pc, #432]	; (80095c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	08db      	lsrs	r3, r3, #3
 8009412:	f003 0303 	and.w	r3, r3, #3
 8009416:	4a6b      	ldr	r2, [pc, #428]	; (80095c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009418:	fa22 f303 	lsr.w	r3, r2, r3
 800941c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	ee07 3a90 	vmov	s15, r3
 8009424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	ee07 3a90 	vmov	s15, r3
 800942e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009436:	4b62      	ldr	r3, [pc, #392]	; (80095c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800943a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800943e:	ee07 3a90 	vmov	s15, r3
 8009442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009446:	ed97 6a02 	vldr	s12, [r7, #8]
 800944a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80095d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800944e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800945a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800945e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009462:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009466:	e087      	b.n	8009578 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	ee07 3a90 	vmov	s15, r3
 800946e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009472:	eddf 6a58 	vldr	s13, [pc, #352]	; 80095d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800947a:	4b51      	ldr	r3, [pc, #324]	; (80095c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800947c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800947e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009482:	ee07 3a90 	vmov	s15, r3
 8009486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800948a:	ed97 6a02 	vldr	s12, [r7, #8]
 800948e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80095d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800949a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800949e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094aa:	e065      	b.n	8009578 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	ee07 3a90 	vmov	s15, r3
 80094b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80095d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80094ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094be:	4b40      	ldr	r3, [pc, #256]	; (80095c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094c6:	ee07 3a90 	vmov	s15, r3
 80094ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80094d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80095d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094ee:	e043      	b.n	8009578 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	ee07 3a90 	vmov	s15, r3
 80094f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 80095dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80094fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009502:	4b2f      	ldr	r3, [pc, #188]	; (80095c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800950a:	ee07 3a90 	vmov	s15, r3
 800950e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009512:	ed97 6a02 	vldr	s12, [r7, #8]
 8009516:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80095d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800951a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800951e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800952a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800952e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009532:	e021      	b.n	8009578 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	ee07 3a90 	vmov	s15, r3
 800953a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800953e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80095d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009546:	4b1e      	ldr	r3, [pc, #120]	; (80095c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800954a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800954e:	ee07 3a90 	vmov	s15, r3
 8009552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009556:	ed97 6a02 	vldr	s12, [r7, #8]
 800955a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80095d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800955e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800956a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800956e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009572:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009576:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009578:	4b11      	ldr	r3, [pc, #68]	; (80095c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800957a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800957c:	0a5b      	lsrs	r3, r3, #9
 800957e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009582:	3301      	adds	r3, #1
 8009584:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	ee07 3a90 	vmov	s15, r3
 800958c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009590:	edd7 6a07 	vldr	s13, [r7, #28]
 8009594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800959c:	ee17 3a90 	vmov	r3, s15
 80095a0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80095a2:	e005      	b.n	80095b0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80095a4:	2300      	movs	r3, #0
 80095a6:	61bb      	str	r3, [r7, #24]
    break;
 80095a8:	e002      	b.n	80095b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80095aa:	4b07      	ldr	r3, [pc, #28]	; (80095c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80095ac:	61bb      	str	r3, [r7, #24]
    break;
 80095ae:	bf00      	nop
  }

  return sysclockfreq;
 80095b0:	69bb      	ldr	r3, [r7, #24]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3724      	adds	r7, #36	; 0x24
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	58024400 	.word	0x58024400
 80095c4:	03d09000 	.word	0x03d09000
 80095c8:	003d0900 	.word	0x003d0900
 80095cc:	017d7840 	.word	0x017d7840
 80095d0:	46000000 	.word	0x46000000
 80095d4:	4c742400 	.word	0x4c742400
 80095d8:	4a742400 	.word	0x4a742400
 80095dc:	4bbebc20 	.word	0x4bbebc20

080095e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80095e6:	f7ff fe81 	bl	80092ec <HAL_RCC_GetSysClockFreq>
 80095ea:	4602      	mov	r2, r0
 80095ec:	4b10      	ldr	r3, [pc, #64]	; (8009630 <HAL_RCC_GetHCLKFreq+0x50>)
 80095ee:	699b      	ldr	r3, [r3, #24]
 80095f0:	0a1b      	lsrs	r3, r3, #8
 80095f2:	f003 030f 	and.w	r3, r3, #15
 80095f6:	490f      	ldr	r1, [pc, #60]	; (8009634 <HAL_RCC_GetHCLKFreq+0x54>)
 80095f8:	5ccb      	ldrb	r3, [r1, r3]
 80095fa:	f003 031f 	and.w	r3, r3, #31
 80095fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009602:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009604:	4b0a      	ldr	r3, [pc, #40]	; (8009630 <HAL_RCC_GetHCLKFreq+0x50>)
 8009606:	699b      	ldr	r3, [r3, #24]
 8009608:	f003 030f 	and.w	r3, r3, #15
 800960c:	4a09      	ldr	r2, [pc, #36]	; (8009634 <HAL_RCC_GetHCLKFreq+0x54>)
 800960e:	5cd3      	ldrb	r3, [r2, r3]
 8009610:	f003 031f 	and.w	r3, r3, #31
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	fa22 f303 	lsr.w	r3, r2, r3
 800961a:	4a07      	ldr	r2, [pc, #28]	; (8009638 <HAL_RCC_GetHCLKFreq+0x58>)
 800961c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800961e:	4a07      	ldr	r2, [pc, #28]	; (800963c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009624:	4b04      	ldr	r3, [pc, #16]	; (8009638 <HAL_RCC_GetHCLKFreq+0x58>)
 8009626:	681b      	ldr	r3, [r3, #0]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	58024400 	.word	0x58024400
 8009634:	0801004c 	.word	0x0801004c
 8009638:	24000030 	.word	0x24000030
 800963c:	2400002c 	.word	0x2400002c

08009640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009644:	f7ff ffcc 	bl	80095e0 <HAL_RCC_GetHCLKFreq>
 8009648:	4602      	mov	r2, r0
 800964a:	4b06      	ldr	r3, [pc, #24]	; (8009664 <HAL_RCC_GetPCLK1Freq+0x24>)
 800964c:	69db      	ldr	r3, [r3, #28]
 800964e:	091b      	lsrs	r3, r3, #4
 8009650:	f003 0307 	and.w	r3, r3, #7
 8009654:	4904      	ldr	r1, [pc, #16]	; (8009668 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009656:	5ccb      	ldrb	r3, [r1, r3]
 8009658:	f003 031f 	and.w	r3, r3, #31
 800965c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009660:	4618      	mov	r0, r3
 8009662:	bd80      	pop	{r7, pc}
 8009664:	58024400 	.word	0x58024400
 8009668:	0801004c 	.word	0x0801004c

0800966c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009670:	f7ff ffb6 	bl	80095e0 <HAL_RCC_GetHCLKFreq>
 8009674:	4602      	mov	r2, r0
 8009676:	4b06      	ldr	r3, [pc, #24]	; (8009690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009678:	69db      	ldr	r3, [r3, #28]
 800967a:	0a1b      	lsrs	r3, r3, #8
 800967c:	f003 0307 	and.w	r3, r3, #7
 8009680:	4904      	ldr	r1, [pc, #16]	; (8009694 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009682:	5ccb      	ldrb	r3, [r1, r3]
 8009684:	f003 031f 	and.w	r3, r3, #31
 8009688:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800968c:	4618      	mov	r0, r3
 800968e:	bd80      	pop	{r7, pc}
 8009690:	58024400 	.word	0x58024400
 8009694:	0801004c 	.word	0x0801004c

08009698 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b086      	sub	sp, #24
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80096a0:	2300      	movs	r3, #0
 80096a2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80096a4:	2300      	movs	r3, #0
 80096a6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d03f      	beq.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096bc:	d02a      	beq.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80096be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096c2:	d824      	bhi.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80096c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096c8:	d018      	beq.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80096ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096ce:	d81e      	bhi.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d003      	beq.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80096d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096d8:	d007      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80096da:	e018      	b.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096dc:	4ba3      	ldr	r3, [pc, #652]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80096de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e0:	4aa2      	ldr	r2, [pc, #648]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80096e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80096e8:	e015      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	3304      	adds	r3, #4
 80096ee:	2102      	movs	r1, #2
 80096f0:	4618      	mov	r0, r3
 80096f2:	f001 fff9 	bl	800b6e8 <RCCEx_PLL2_Config>
 80096f6:	4603      	mov	r3, r0
 80096f8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80096fa:	e00c      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	3324      	adds	r3, #36	; 0x24
 8009700:	2102      	movs	r1, #2
 8009702:	4618      	mov	r0, r3
 8009704:	f002 f8a2 	bl	800b84c <RCCEx_PLL3_Config>
 8009708:	4603      	mov	r3, r0
 800970a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800970c:	e003      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	75fb      	strb	r3, [r7, #23]
      break;
 8009712:	e000      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009714:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009716:	7dfb      	ldrb	r3, [r7, #23]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d109      	bne.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800971c:	4b93      	ldr	r3, [pc, #588]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800971e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009720:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009728:	4990      	ldr	r1, [pc, #576]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800972a:	4313      	orrs	r3, r2
 800972c:	650b      	str	r3, [r1, #80]	; 0x50
 800972e:	e001      	b.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009730:	7dfb      	ldrb	r3, [r7, #23]
 8009732:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800973c:	2b00      	cmp	r3, #0
 800973e:	d03d      	beq.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009744:	2b04      	cmp	r3, #4
 8009746:	d826      	bhi.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009748:	a201      	add	r2, pc, #4	; (adr r2, 8009750 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800974a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974e:	bf00      	nop
 8009750:	08009765 	.word	0x08009765
 8009754:	08009773 	.word	0x08009773
 8009758:	08009785 	.word	0x08009785
 800975c:	0800979d 	.word	0x0800979d
 8009760:	0800979d 	.word	0x0800979d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009764:	4b81      	ldr	r3, [pc, #516]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009768:	4a80      	ldr	r2, [pc, #512]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800976a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800976e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009770:	e015      	b.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	3304      	adds	r3, #4
 8009776:	2100      	movs	r1, #0
 8009778:	4618      	mov	r0, r3
 800977a:	f001 ffb5 	bl	800b6e8 <RCCEx_PLL2_Config>
 800977e:	4603      	mov	r3, r0
 8009780:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009782:	e00c      	b.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	3324      	adds	r3, #36	; 0x24
 8009788:	2100      	movs	r1, #0
 800978a:	4618      	mov	r0, r3
 800978c:	f002 f85e 	bl	800b84c <RCCEx_PLL3_Config>
 8009790:	4603      	mov	r3, r0
 8009792:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009794:	e003      	b.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	75fb      	strb	r3, [r7, #23]
      break;
 800979a:	e000      	b.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800979c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800979e:	7dfb      	ldrb	r3, [r7, #23]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d109      	bne.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80097a4:	4b71      	ldr	r3, [pc, #452]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097a8:	f023 0207 	bic.w	r2, r3, #7
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097b0:	496e      	ldr	r1, [pc, #440]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097b2:	4313      	orrs	r3, r2
 80097b4:	650b      	str	r3, [r1, #80]	; 0x50
 80097b6:	e001      	b.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097b8:	7dfb      	ldrb	r3, [r7, #23]
 80097ba:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d042      	beq.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097d0:	d02b      	beq.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80097d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097d6:	d825      	bhi.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80097d8:	2bc0      	cmp	r3, #192	; 0xc0
 80097da:	d028      	beq.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80097dc:	2bc0      	cmp	r3, #192	; 0xc0
 80097de:	d821      	bhi.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80097e0:	2b80      	cmp	r3, #128	; 0x80
 80097e2:	d016      	beq.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80097e4:	2b80      	cmp	r3, #128	; 0x80
 80097e6:	d81d      	bhi.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d002      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80097ec:	2b40      	cmp	r3, #64	; 0x40
 80097ee:	d007      	beq.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80097f0:	e018      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097f2:	4b5e      	ldr	r3, [pc, #376]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f6:	4a5d      	ldr	r2, [pc, #372]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80097fe:	e017      	b.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	3304      	adds	r3, #4
 8009804:	2100      	movs	r1, #0
 8009806:	4618      	mov	r0, r3
 8009808:	f001 ff6e 	bl	800b6e8 <RCCEx_PLL2_Config>
 800980c:	4603      	mov	r3, r0
 800980e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009810:	e00e      	b.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	3324      	adds	r3, #36	; 0x24
 8009816:	2100      	movs	r1, #0
 8009818:	4618      	mov	r0, r3
 800981a:	f002 f817 	bl	800b84c <RCCEx_PLL3_Config>
 800981e:	4603      	mov	r3, r0
 8009820:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009822:	e005      	b.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	75fb      	strb	r3, [r7, #23]
      break;
 8009828:	e002      	b.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800982a:	bf00      	nop
 800982c:	e000      	b.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800982e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009830:	7dfb      	ldrb	r3, [r7, #23]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d109      	bne.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009836:	4b4d      	ldr	r3, [pc, #308]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800983a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009842:	494a      	ldr	r1, [pc, #296]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009844:	4313      	orrs	r3, r2
 8009846:	650b      	str	r3, [r1, #80]	; 0x50
 8009848:	e001      	b.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800984a:	7dfb      	ldrb	r3, [r7, #23]
 800984c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009856:	2b00      	cmp	r3, #0
 8009858:	d049      	beq.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009860:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009864:	d030      	beq.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009866:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800986a:	d82a      	bhi.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800986c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009870:	d02c      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009872:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009876:	d824      	bhi.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009878:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800987c:	d018      	beq.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800987e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009882:	d81e      	bhi.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009884:	2b00      	cmp	r3, #0
 8009886:	d003      	beq.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009888:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800988c:	d007      	beq.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800988e:	e018      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009890:	4b36      	ldr	r3, [pc, #216]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009894:	4a35      	ldr	r2, [pc, #212]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800989a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800989c:	e017      	b.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	3304      	adds	r3, #4
 80098a2:	2100      	movs	r1, #0
 80098a4:	4618      	mov	r0, r3
 80098a6:	f001 ff1f 	bl	800b6e8 <RCCEx_PLL2_Config>
 80098aa:	4603      	mov	r3, r0
 80098ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80098ae:	e00e      	b.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	3324      	adds	r3, #36	; 0x24
 80098b4:	2100      	movs	r1, #0
 80098b6:	4618      	mov	r0, r3
 80098b8:	f001 ffc8 	bl	800b84c <RCCEx_PLL3_Config>
 80098bc:	4603      	mov	r3, r0
 80098be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098c0:	e005      	b.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	75fb      	strb	r3, [r7, #23]
      break;
 80098c6:	e002      	b.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80098c8:	bf00      	nop
 80098ca:	e000      	b.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80098cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098ce:	7dfb      	ldrb	r3, [r7, #23]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d10a      	bne.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80098d4:	4b25      	ldr	r3, [pc, #148]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80098d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098d8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80098e2:	4922      	ldr	r1, [pc, #136]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80098e4:	4313      	orrs	r3, r2
 80098e6:	658b      	str	r3, [r1, #88]	; 0x58
 80098e8:	e001      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ea:	7dfb      	ldrb	r3, [r7, #23]
 80098ec:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d04b      	beq.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009900:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009904:	d030      	beq.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009906:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800990a:	d82a      	bhi.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800990c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009910:	d02e      	beq.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8009912:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009916:	d824      	bhi.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009918:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800991c:	d018      	beq.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800991e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009922:	d81e      	bhi.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009924:	2b00      	cmp	r3, #0
 8009926:	d003      	beq.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800992c:	d007      	beq.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800992e:	e018      	b.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009930:	4b0e      	ldr	r3, [pc, #56]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009934:	4a0d      	ldr	r2, [pc, #52]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800993a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800993c:	e019      	b.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	3304      	adds	r3, #4
 8009942:	2100      	movs	r1, #0
 8009944:	4618      	mov	r0, r3
 8009946:	f001 fecf 	bl	800b6e8 <RCCEx_PLL2_Config>
 800994a:	4603      	mov	r3, r0
 800994c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800994e:	e010      	b.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	3324      	adds	r3, #36	; 0x24
 8009954:	2100      	movs	r1, #0
 8009956:	4618      	mov	r0, r3
 8009958:	f001 ff78 	bl	800b84c <RCCEx_PLL3_Config>
 800995c:	4603      	mov	r3, r0
 800995e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009960:	e007      	b.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	75fb      	strb	r3, [r7, #23]
      break;
 8009966:	e004      	b.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8009968:	bf00      	nop
 800996a:	e002      	b.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800996c:	58024400 	.word	0x58024400
      break;
 8009970:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009972:	7dfb      	ldrb	r3, [r7, #23]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d10a      	bne.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009978:	4b99      	ldr	r3, [pc, #612]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800997a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800997c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009986:	4996      	ldr	r1, [pc, #600]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009988:	4313      	orrs	r3, r2
 800998a:	658b      	str	r3, [r1, #88]	; 0x58
 800998c:	e001      	b.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800998e:	7dfb      	ldrb	r3, [r7, #23]
 8009990:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800999a:	2b00      	cmp	r3, #0
 800999c:	d032      	beq.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099a2:	2b30      	cmp	r3, #48	; 0x30
 80099a4:	d01c      	beq.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80099a6:	2b30      	cmp	r3, #48	; 0x30
 80099a8:	d817      	bhi.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x342>
 80099aa:	2b20      	cmp	r3, #32
 80099ac:	d00c      	beq.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80099ae:	2b20      	cmp	r3, #32
 80099b0:	d813      	bhi.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x342>
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d016      	beq.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80099b6:	2b10      	cmp	r3, #16
 80099b8:	d10f      	bne.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099ba:	4b89      	ldr	r3, [pc, #548]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099be:	4a88      	ldr	r2, [pc, #544]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80099c6:	e00e      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	3304      	adds	r3, #4
 80099cc:	2102      	movs	r1, #2
 80099ce:	4618      	mov	r0, r3
 80099d0:	f001 fe8a 	bl	800b6e8 <RCCEx_PLL2_Config>
 80099d4:	4603      	mov	r3, r0
 80099d6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80099d8:	e005      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	75fb      	strb	r3, [r7, #23]
      break;
 80099de:	e002      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80099e0:	bf00      	nop
 80099e2:	e000      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80099e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099e6:	7dfb      	ldrb	r3, [r7, #23]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d109      	bne.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80099ec:	4b7c      	ldr	r3, [pc, #496]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099f8:	4979      	ldr	r1, [pc, #484]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099fa:	4313      	orrs	r3, r2
 80099fc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80099fe:	e001      	b.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a00:	7dfb      	ldrb	r3, [r7, #23]
 8009a02:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d047      	beq.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a18:	d030      	beq.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009a1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a1e:	d82a      	bhi.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009a20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a24:	d02c      	beq.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009a26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a2a:	d824      	bhi.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a30:	d018      	beq.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8009a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a36:	d81e      	bhi.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d003      	beq.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8009a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a40:	d007      	beq.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8009a42:	e018      	b.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a44:	4b66      	ldr	r3, [pc, #408]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a48:	4a65      	ldr	r2, [pc, #404]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a50:	e017      	b.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	3304      	adds	r3, #4
 8009a56:	2100      	movs	r1, #0
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f001 fe45 	bl	800b6e8 <RCCEx_PLL2_Config>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a62:	e00e      	b.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	3324      	adds	r3, #36	; 0x24
 8009a68:	2100      	movs	r1, #0
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f001 feee 	bl	800b84c <RCCEx_PLL3_Config>
 8009a70:	4603      	mov	r3, r0
 8009a72:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a74:	e005      	b.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	75fb      	strb	r3, [r7, #23]
      break;
 8009a7a:	e002      	b.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009a7c:	bf00      	nop
 8009a7e:	e000      	b.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009a80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a82:	7dfb      	ldrb	r3, [r7, #23]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d109      	bne.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009a88:	4b55      	ldr	r3, [pc, #340]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a8c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a94:	4952      	ldr	r1, [pc, #328]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a96:	4313      	orrs	r3, r2
 8009a98:	650b      	str	r3, [r1, #80]	; 0x50
 8009a9a:	e001      	b.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a9c:	7dfb      	ldrb	r3, [r7, #23]
 8009a9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d049      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ab4:	d02e      	beq.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009ab6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009aba:	d828      	bhi.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009abc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ac0:	d02a      	beq.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8009ac2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ac6:	d822      	bhi.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009ac8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009acc:	d026      	beq.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8009ace:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ad2:	d81c      	bhi.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009ad4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ad8:	d010      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009ada:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ade:	d816      	bhi.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d01d      	beq.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ae8:	d111      	bne.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	3304      	adds	r3, #4
 8009aee:	2101      	movs	r1, #1
 8009af0:	4618      	mov	r0, r3
 8009af2:	f001 fdf9 	bl	800b6e8 <RCCEx_PLL2_Config>
 8009af6:	4603      	mov	r3, r0
 8009af8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009afa:	e012      	b.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	3324      	adds	r3, #36	; 0x24
 8009b00:	2101      	movs	r1, #1
 8009b02:	4618      	mov	r0, r3
 8009b04:	f001 fea2 	bl	800b84c <RCCEx_PLL3_Config>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009b0c:	e009      	b.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	75fb      	strb	r3, [r7, #23]
      break;
 8009b12:	e006      	b.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009b14:	bf00      	nop
 8009b16:	e004      	b.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009b18:	bf00      	nop
 8009b1a:	e002      	b.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009b1c:	bf00      	nop
 8009b1e:	e000      	b.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009b20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b22:	7dfb      	ldrb	r3, [r7, #23]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d109      	bne.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009b28:	4b2d      	ldr	r3, [pc, #180]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b2c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b34:	492a      	ldr	r1, [pc, #168]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009b36:	4313      	orrs	r3, r2
 8009b38:	650b      	str	r3, [r1, #80]	; 0x50
 8009b3a:	e001      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b3c:	7dfb      	ldrb	r3, [r7, #23]
 8009b3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d04d      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b56:	d02e      	beq.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8009b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b5c:	d828      	bhi.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b62:	d02a      	beq.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b68:	d822      	bhi.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009b6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b6e:	d026      	beq.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009b70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b74:	d81c      	bhi.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009b76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b7a:	d010      	beq.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009b7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b80:	d816      	bhi.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d01d      	beq.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009b86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b8a:	d111      	bne.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	3304      	adds	r3, #4
 8009b90:	2101      	movs	r1, #1
 8009b92:	4618      	mov	r0, r3
 8009b94:	f001 fda8 	bl	800b6e8 <RCCEx_PLL2_Config>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009b9c:	e012      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	3324      	adds	r3, #36	; 0x24
 8009ba2:	2101      	movs	r1, #1
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f001 fe51 	bl	800b84c <RCCEx_PLL3_Config>
 8009baa:	4603      	mov	r3, r0
 8009bac:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009bae:	e009      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8009bb4:	e006      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009bb6:	bf00      	nop
 8009bb8:	e004      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009bba:	bf00      	nop
 8009bbc:	e002      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009bbe:	bf00      	nop
 8009bc0:	e000      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009bc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bc4:	7dfb      	ldrb	r3, [r7, #23]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d10c      	bne.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009bca:	4b05      	ldr	r3, [pc, #20]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009bd8:	4901      	ldr	r1, [pc, #4]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	658b      	str	r3, [r1, #88]	; 0x58
 8009bde:	e003      	b.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009be0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009be4:	7dfb      	ldrb	r3, [r7, #23]
 8009be6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d02f      	beq.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bfc:	d00e      	beq.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8009bfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c02:	d814      	bhi.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d015      	beq.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8009c08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c0c:	d10f      	bne.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c0e:	4baf      	ldr	r3, [pc, #700]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c12:	4aae      	ldr	r2, [pc, #696]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009c1a:	e00c      	b.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	3304      	adds	r3, #4
 8009c20:	2101      	movs	r1, #1
 8009c22:	4618      	mov	r0, r3
 8009c24:	f001 fd60 	bl	800b6e8 <RCCEx_PLL2_Config>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009c2c:	e003      	b.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	75fb      	strb	r3, [r7, #23]
      break;
 8009c32:	e000      	b.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8009c34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c36:	7dfb      	ldrb	r3, [r7, #23]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d109      	bne.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009c3c:	4ba3      	ldr	r3, [pc, #652]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c48:	49a0      	ldr	r1, [pc, #640]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	650b      	str	r3, [r1, #80]	; 0x50
 8009c4e:	e001      	b.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c50:	7dfb      	ldrb	r3, [r7, #23]
 8009c52:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d032      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c64:	2b03      	cmp	r3, #3
 8009c66:	d81b      	bhi.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009c68:	a201      	add	r2, pc, #4	; (adr r2, 8009c70 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8009c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6e:	bf00      	nop
 8009c70:	08009ca7 	.word	0x08009ca7
 8009c74:	08009c81 	.word	0x08009c81
 8009c78:	08009c8f 	.word	0x08009c8f
 8009c7c:	08009ca7 	.word	0x08009ca7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c80:	4b92      	ldr	r3, [pc, #584]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c84:	4a91      	ldr	r2, [pc, #580]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009c8c:	e00c      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	3304      	adds	r3, #4
 8009c92:	2102      	movs	r1, #2
 8009c94:	4618      	mov	r0, r3
 8009c96:	f001 fd27 	bl	800b6e8 <RCCEx_PLL2_Config>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009c9e:	e003      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ca4:	e000      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009ca6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ca8:	7dfb      	ldrb	r3, [r7, #23]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d109      	bne.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009cae:	4b87      	ldr	r3, [pc, #540]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cb2:	f023 0203 	bic.w	r2, r3, #3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cba:	4984      	ldr	r1, [pc, #528]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009cc0:	e001      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cc2:	7dfb      	ldrb	r3, [r7, #23]
 8009cc4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f000 8086 	beq.w	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009cd4:	4b7e      	ldr	r3, [pc, #504]	; (8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a7d      	ldr	r2, [pc, #500]	; (8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ce0:	f7f8 fe8e 	bl	8002a00 <HAL_GetTick>
 8009ce4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ce6:	e009      	b.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ce8:	f7f8 fe8a 	bl	8002a00 <HAL_GetTick>
 8009cec:	4602      	mov	r2, r0
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	2b64      	cmp	r3, #100	; 0x64
 8009cf4:	d902      	bls.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009cf6:	2303      	movs	r3, #3
 8009cf8:	75fb      	strb	r3, [r7, #23]
        break;
 8009cfa:	e005      	b.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cfc:	4b74      	ldr	r3, [pc, #464]	; (8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d0ef      	beq.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009d08:	7dfb      	ldrb	r3, [r7, #23]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d166      	bne.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009d0e:	4b6f      	ldr	r3, [pc, #444]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d18:	4053      	eors	r3, r2
 8009d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d013      	beq.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009d22:	4b6a      	ldr	r3, [pc, #424]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d2a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009d2c:	4b67      	ldr	r3, [pc, #412]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d30:	4a66      	ldr	r2, [pc, #408]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d36:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009d38:	4b64      	ldr	r3, [pc, #400]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d3c:	4a63      	ldr	r2, [pc, #396]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d42:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009d44:	4a61      	ldr	r2, [pc, #388]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d54:	d115      	bne.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d56:	f7f8 fe53 	bl	8002a00 <HAL_GetTick>
 8009d5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d5c:	e00b      	b.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d5e:	f7f8 fe4f 	bl	8002a00 <HAL_GetTick>
 8009d62:	4602      	mov	r2, r0
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d902      	bls.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009d70:	2303      	movs	r3, #3
 8009d72:	75fb      	strb	r3, [r7, #23]
            break;
 8009d74:	e005      	b.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d76:	4b55      	ldr	r3, [pc, #340]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d7a:	f003 0302 	and.w	r3, r3, #2
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d0ed      	beq.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009d82:	7dfb      	ldrb	r3, [r7, #23]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d126      	bne.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d96:	d10d      	bne.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009d98:	4b4c      	ldr	r3, [pc, #304]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d9a:	691b      	ldr	r3, [r3, #16]
 8009d9c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009da6:	0919      	lsrs	r1, r3, #4
 8009da8:	4b4a      	ldr	r3, [pc, #296]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8009daa:	400b      	ands	r3, r1
 8009dac:	4947      	ldr	r1, [pc, #284]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009dae:	4313      	orrs	r3, r2
 8009db0:	610b      	str	r3, [r1, #16]
 8009db2:	e005      	b.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009db4:	4b45      	ldr	r3, [pc, #276]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009db6:	691b      	ldr	r3, [r3, #16]
 8009db8:	4a44      	ldr	r2, [pc, #272]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009dba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009dbe:	6113      	str	r3, [r2, #16]
 8009dc0:	4b42      	ldr	r3, [pc, #264]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009dc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009dce:	493f      	ldr	r1, [pc, #252]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	670b      	str	r3, [r1, #112]	; 0x70
 8009dd4:	e004      	b.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009dd6:	7dfb      	ldrb	r3, [r7, #23]
 8009dd8:	75bb      	strb	r3, [r7, #22]
 8009dda:	e001      	b.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ddc:	7dfb      	ldrb	r3, [r7, #23]
 8009dde:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f003 0301 	and.w	r3, r3, #1
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 8085 	beq.w	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009df2:	2b28      	cmp	r3, #40	; 0x28
 8009df4:	d866      	bhi.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009df6:	a201      	add	r2, pc, #4	; (adr r2, 8009dfc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfc:	08009ed9 	.word	0x08009ed9
 8009e00:	08009ec5 	.word	0x08009ec5
 8009e04:	08009ec5 	.word	0x08009ec5
 8009e08:	08009ec5 	.word	0x08009ec5
 8009e0c:	08009ec5 	.word	0x08009ec5
 8009e10:	08009ec5 	.word	0x08009ec5
 8009e14:	08009ec5 	.word	0x08009ec5
 8009e18:	08009ec5 	.word	0x08009ec5
 8009e1c:	08009ea1 	.word	0x08009ea1
 8009e20:	08009ec5 	.word	0x08009ec5
 8009e24:	08009ec5 	.word	0x08009ec5
 8009e28:	08009ec5 	.word	0x08009ec5
 8009e2c:	08009ec5 	.word	0x08009ec5
 8009e30:	08009ec5 	.word	0x08009ec5
 8009e34:	08009ec5 	.word	0x08009ec5
 8009e38:	08009ec5 	.word	0x08009ec5
 8009e3c:	08009eb3 	.word	0x08009eb3
 8009e40:	08009ec5 	.word	0x08009ec5
 8009e44:	08009ec5 	.word	0x08009ec5
 8009e48:	08009ec5 	.word	0x08009ec5
 8009e4c:	08009ec5 	.word	0x08009ec5
 8009e50:	08009ec5 	.word	0x08009ec5
 8009e54:	08009ec5 	.word	0x08009ec5
 8009e58:	08009ec5 	.word	0x08009ec5
 8009e5c:	08009ed9 	.word	0x08009ed9
 8009e60:	08009ec5 	.word	0x08009ec5
 8009e64:	08009ec5 	.word	0x08009ec5
 8009e68:	08009ec5 	.word	0x08009ec5
 8009e6c:	08009ec5 	.word	0x08009ec5
 8009e70:	08009ec5 	.word	0x08009ec5
 8009e74:	08009ec5 	.word	0x08009ec5
 8009e78:	08009ec5 	.word	0x08009ec5
 8009e7c:	08009ed9 	.word	0x08009ed9
 8009e80:	08009ec5 	.word	0x08009ec5
 8009e84:	08009ec5 	.word	0x08009ec5
 8009e88:	08009ec5 	.word	0x08009ec5
 8009e8c:	08009ec5 	.word	0x08009ec5
 8009e90:	08009ec5 	.word	0x08009ec5
 8009e94:	08009ec5 	.word	0x08009ec5
 8009e98:	08009ec5 	.word	0x08009ec5
 8009e9c:	08009ed9 	.word	0x08009ed9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	3304      	adds	r3, #4
 8009ea4:	2101      	movs	r1, #1
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f001 fc1e 	bl	800b6e8 <RCCEx_PLL2_Config>
 8009eac:	4603      	mov	r3, r0
 8009eae:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009eb0:	e013      	b.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	3324      	adds	r3, #36	; 0x24
 8009eb6:	2101      	movs	r1, #1
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f001 fcc7 	bl	800b84c <RCCEx_PLL3_Config>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009ec2:	e00a      	b.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ec8:	e007      	b.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009eca:	bf00      	nop
 8009ecc:	58024400 	.word	0x58024400
 8009ed0:	58024800 	.word	0x58024800
 8009ed4:	00ffffcf 	.word	0x00ffffcf
      break;
 8009ed8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009eda:	7dfb      	ldrb	r3, [r7, #23]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d109      	bne.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009ee0:	4b96      	ldr	r3, [pc, #600]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ee4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009eec:	4993      	ldr	r1, [pc, #588]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	654b      	str	r3, [r1, #84]	; 0x54
 8009ef2:	e001      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ef4:	7dfb      	ldrb	r3, [r7, #23]
 8009ef6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f003 0302 	and.w	r3, r3, #2
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d038      	beq.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f08:	2b05      	cmp	r3, #5
 8009f0a:	d821      	bhi.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009f0c:	a201      	add	r2, pc, #4	; (adr r2, 8009f14 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f12:	bf00      	nop
 8009f14:	08009f57 	.word	0x08009f57
 8009f18:	08009f2d 	.word	0x08009f2d
 8009f1c:	08009f3f 	.word	0x08009f3f
 8009f20:	08009f57 	.word	0x08009f57
 8009f24:	08009f57 	.word	0x08009f57
 8009f28:	08009f57 	.word	0x08009f57
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	3304      	adds	r3, #4
 8009f30:	2101      	movs	r1, #1
 8009f32:	4618      	mov	r0, r3
 8009f34:	f001 fbd8 	bl	800b6e8 <RCCEx_PLL2_Config>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009f3c:	e00c      	b.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	3324      	adds	r3, #36	; 0x24
 8009f42:	2101      	movs	r1, #1
 8009f44:	4618      	mov	r0, r3
 8009f46:	f001 fc81 	bl	800b84c <RCCEx_PLL3_Config>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009f4e:	e003      	b.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	75fb      	strb	r3, [r7, #23]
      break;
 8009f54:	e000      	b.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009f56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f58:	7dfb      	ldrb	r3, [r7, #23]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d109      	bne.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009f5e:	4b77      	ldr	r3, [pc, #476]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f62:	f023 0207 	bic.w	r2, r3, #7
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f6a:	4974      	ldr	r1, [pc, #464]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	654b      	str	r3, [r1, #84]	; 0x54
 8009f70:	e001      	b.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f72:	7dfb      	ldrb	r3, [r7, #23]
 8009f74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f003 0304 	and.w	r3, r3, #4
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d03a      	beq.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f88:	2b05      	cmp	r3, #5
 8009f8a:	d821      	bhi.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009f8c:	a201      	add	r2, pc, #4	; (adr r2, 8009f94 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f92:	bf00      	nop
 8009f94:	08009fd7 	.word	0x08009fd7
 8009f98:	08009fad 	.word	0x08009fad
 8009f9c:	08009fbf 	.word	0x08009fbf
 8009fa0:	08009fd7 	.word	0x08009fd7
 8009fa4:	08009fd7 	.word	0x08009fd7
 8009fa8:	08009fd7 	.word	0x08009fd7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	3304      	adds	r3, #4
 8009fb0:	2101      	movs	r1, #1
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f001 fb98 	bl	800b6e8 <RCCEx_PLL2_Config>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009fbc:	e00c      	b.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	3324      	adds	r3, #36	; 0x24
 8009fc2:	2101      	movs	r1, #1
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f001 fc41 	bl	800b84c <RCCEx_PLL3_Config>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009fce:	e003      	b.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8009fd4:	e000      	b.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009fd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fd8:	7dfb      	ldrb	r3, [r7, #23]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10a      	bne.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009fde:	4b57      	ldr	r3, [pc, #348]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fe2:	f023 0207 	bic.w	r2, r3, #7
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fec:	4953      	ldr	r1, [pc, #332]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	658b      	str	r3, [r1, #88]	; 0x58
 8009ff2:	e001      	b.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ff4:	7dfb      	ldrb	r3, [r7, #23]
 8009ff6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f003 0320 	and.w	r3, r3, #32
 800a000:	2b00      	cmp	r3, #0
 800a002:	d04b      	beq.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a00a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a00e:	d02e      	beq.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a010:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a014:	d828      	bhi.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a01a:	d02a      	beq.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a01c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a020:	d822      	bhi.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a022:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a026:	d026      	beq.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a028:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a02c:	d81c      	bhi.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a02e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a032:	d010      	beq.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800a034:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a038:	d816      	bhi.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d01d      	beq.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800a03e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a042:	d111      	bne.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	3304      	adds	r3, #4
 800a048:	2100      	movs	r1, #0
 800a04a:	4618      	mov	r0, r3
 800a04c:	f001 fb4c 	bl	800b6e8 <RCCEx_PLL2_Config>
 800a050:	4603      	mov	r3, r0
 800a052:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a054:	e012      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	3324      	adds	r3, #36	; 0x24
 800a05a:	2102      	movs	r1, #2
 800a05c:	4618      	mov	r0, r3
 800a05e:	f001 fbf5 	bl	800b84c <RCCEx_PLL3_Config>
 800a062:	4603      	mov	r3, r0
 800a064:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a066:	e009      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	75fb      	strb	r3, [r7, #23]
      break;
 800a06c:	e006      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a06e:	bf00      	nop
 800a070:	e004      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a072:	bf00      	nop
 800a074:	e002      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a076:	bf00      	nop
 800a078:	e000      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a07a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a07c:	7dfb      	ldrb	r3, [r7, #23]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d10a      	bne.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a082:	4b2e      	ldr	r3, [pc, #184]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a086:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a090:	492a      	ldr	r1, [pc, #168]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a092:	4313      	orrs	r3, r2
 800a094:	654b      	str	r3, [r1, #84]	; 0x54
 800a096:	e001      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a098:	7dfb      	ldrb	r3, [r7, #23]
 800a09a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d04d      	beq.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a0ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a0b2:	d02e      	beq.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a0b4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a0b8:	d828      	bhi.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a0ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0be:	d02a      	beq.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a0c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0c4:	d822      	bhi.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a0c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0ca:	d026      	beq.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a0cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0d0:	d81c      	bhi.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a0d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0d6:	d010      	beq.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800a0d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0dc:	d816      	bhi.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d01d      	beq.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800a0e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0e6:	d111      	bne.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	3304      	adds	r3, #4
 800a0ec:	2100      	movs	r1, #0
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f001 fafa 	bl	800b6e8 <RCCEx_PLL2_Config>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a0f8:	e012      	b.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	3324      	adds	r3, #36	; 0x24
 800a0fe:	2102      	movs	r1, #2
 800a100:	4618      	mov	r0, r3
 800a102:	f001 fba3 	bl	800b84c <RCCEx_PLL3_Config>
 800a106:	4603      	mov	r3, r0
 800a108:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a10a:	e009      	b.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a10c:	2301      	movs	r3, #1
 800a10e:	75fb      	strb	r3, [r7, #23]
      break;
 800a110:	e006      	b.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a112:	bf00      	nop
 800a114:	e004      	b.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a116:	bf00      	nop
 800a118:	e002      	b.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a11a:	bf00      	nop
 800a11c:	e000      	b.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a11e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a120:	7dfb      	ldrb	r3, [r7, #23]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d10c      	bne.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a126:	4b05      	ldr	r3, [pc, #20]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a12a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a134:	4901      	ldr	r1, [pc, #4]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a136:	4313      	orrs	r3, r2
 800a138:	658b      	str	r3, [r1, #88]	; 0x58
 800a13a:	e003      	b.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800a13c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a140:	7dfb      	ldrb	r3, [r7, #23]
 800a142:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d04b      	beq.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a156:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a15a:	d02e      	beq.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a15c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a160:	d828      	bhi.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a166:	d02a      	beq.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a16c:	d822      	bhi.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a16e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a172:	d026      	beq.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800a174:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a178:	d81c      	bhi.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a17a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a17e:	d010      	beq.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800a180:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a184:	d816      	bhi.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a186:	2b00      	cmp	r3, #0
 800a188:	d01d      	beq.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800a18a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a18e:	d111      	bne.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	3304      	adds	r3, #4
 800a194:	2100      	movs	r1, #0
 800a196:	4618      	mov	r0, r3
 800a198:	f001 faa6 	bl	800b6e8 <RCCEx_PLL2_Config>
 800a19c:	4603      	mov	r3, r0
 800a19e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a1a0:	e012      	b.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	3324      	adds	r3, #36	; 0x24
 800a1a6:	2102      	movs	r1, #2
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f001 fb4f 	bl	800b84c <RCCEx_PLL3_Config>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a1b2:	e009      	b.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	75fb      	strb	r3, [r7, #23]
      break;
 800a1b8:	e006      	b.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a1ba:	bf00      	nop
 800a1bc:	e004      	b.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a1be:	bf00      	nop
 800a1c0:	e002      	b.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a1c2:	bf00      	nop
 800a1c4:	e000      	b.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a1c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1c8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d10a      	bne.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a1ce:	4b9d      	ldr	r3, [pc, #628]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a1d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a1dc:	4999      	ldr	r1, [pc, #612]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	658b      	str	r3, [r1, #88]	; 0x58
 800a1e2:	e001      	b.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1e4:	7dfb      	ldrb	r3, [r7, #23]
 800a1e6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f003 0308 	and.w	r3, r3, #8
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d01a      	beq.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1fe:	d10a      	bne.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	3324      	adds	r3, #36	; 0x24
 800a204:	2102      	movs	r1, #2
 800a206:	4618      	mov	r0, r3
 800a208:	f001 fb20 	bl	800b84c <RCCEx_PLL3_Config>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d001      	beq.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800a212:	2301      	movs	r3, #1
 800a214:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a216:	4b8b      	ldr	r3, [pc, #556]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a21a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a224:	4987      	ldr	r1, [pc, #540]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a226:	4313      	orrs	r3, r2
 800a228:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f003 0310 	and.w	r3, r3, #16
 800a232:	2b00      	cmp	r3, #0
 800a234:	d01a      	beq.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a23c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a240:	d10a      	bne.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	3324      	adds	r3, #36	; 0x24
 800a246:	2102      	movs	r1, #2
 800a248:	4618      	mov	r0, r3
 800a24a:	f001 faff 	bl	800b84c <RCCEx_PLL3_Config>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d001      	beq.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a258:	4b7a      	ldr	r3, [pc, #488]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a25a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a25c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a266:	4977      	ldr	r1, [pc, #476]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a268:	4313      	orrs	r3, r2
 800a26a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a274:	2b00      	cmp	r3, #0
 800a276:	d034      	beq.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a27e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a282:	d01d      	beq.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800a284:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a288:	d817      	bhi.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d003      	beq.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a28e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a292:	d009      	beq.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800a294:	e011      	b.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	3304      	adds	r3, #4
 800a29a:	2100      	movs	r1, #0
 800a29c:	4618      	mov	r0, r3
 800a29e:	f001 fa23 	bl	800b6e8 <RCCEx_PLL2_Config>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a2a6:	e00c      	b.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	3324      	adds	r3, #36	; 0x24
 800a2ac:	2102      	movs	r1, #2
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f001 facc 	bl	800b84c <RCCEx_PLL3_Config>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a2b8:	e003      	b.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	75fb      	strb	r3, [r7, #23]
      break;
 800a2be:	e000      	b.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800a2c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2c2:	7dfb      	ldrb	r3, [r7, #23]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10a      	bne.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a2c8:	4b5e      	ldr	r3, [pc, #376]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a2ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a2d6:	495b      	ldr	r1, [pc, #364]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	658b      	str	r3, [r1, #88]	; 0x58
 800a2dc:	e001      	b.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2de:	7dfb      	ldrb	r3, [r7, #23]
 800a2e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d033      	beq.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a2f8:	d01c      	beq.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800a2fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a2fe:	d816      	bhi.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800a300:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a304:	d003      	beq.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800a306:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a30a:	d007      	beq.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800a30c:	e00f      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a30e:	4b4d      	ldr	r3, [pc, #308]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a312:	4a4c      	ldr	r2, [pc, #304]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a318:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a31a:	e00c      	b.n	800a336 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	3324      	adds	r3, #36	; 0x24
 800a320:	2101      	movs	r1, #1
 800a322:	4618      	mov	r0, r3
 800a324:	f001 fa92 	bl	800b84c <RCCEx_PLL3_Config>
 800a328:	4603      	mov	r3, r0
 800a32a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a32c:	e003      	b.n	800a336 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	75fb      	strb	r3, [r7, #23]
      break;
 800a332:	e000      	b.n	800a336 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800a334:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a336:	7dfb      	ldrb	r3, [r7, #23]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10a      	bne.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a33c:	4b41      	ldr	r3, [pc, #260]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a33e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a340:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a34a:	493e      	ldr	r1, [pc, #248]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a34c:	4313      	orrs	r3, r2
 800a34e:	654b      	str	r3, [r1, #84]	; 0x54
 800a350:	e001      	b.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a352:	7dfb      	ldrb	r3, [r7, #23]
 800a354:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d029      	beq.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a366:	2b00      	cmp	r3, #0
 800a368:	d003      	beq.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800a36a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a36e:	d007      	beq.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800a370:	e00f      	b.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a372:	4b34      	ldr	r3, [pc, #208]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a376:	4a33      	ldr	r2, [pc, #204]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a37c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a37e:	e00b      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	3304      	adds	r3, #4
 800a384:	2102      	movs	r1, #2
 800a386:	4618      	mov	r0, r3
 800a388:	f001 f9ae 	bl	800b6e8 <RCCEx_PLL2_Config>
 800a38c:	4603      	mov	r3, r0
 800a38e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a390:	e002      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	75fb      	strb	r3, [r7, #23]
      break;
 800a396:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a398:	7dfb      	ldrb	r3, [r7, #23]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d109      	bne.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a39e:	4b29      	ldr	r3, [pc, #164]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a3a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3aa:	4926      	ldr	r1, [pc, #152]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a3b0:	e001      	b.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3b2:	7dfb      	ldrb	r3, [r7, #23]
 800a3b4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00a      	beq.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	3324      	adds	r3, #36	; 0x24
 800a3c6:	2102      	movs	r1, #2
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f001 fa3f 	bl	800b84c <RCCEx_PLL3_Config>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d001      	beq.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d033      	beq.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3ec:	d017      	beq.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a3ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3f2:	d811      	bhi.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a3f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3f8:	d013      	beq.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a3fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3fe:	d80b      	bhi.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a400:	2b00      	cmp	r3, #0
 800a402:	d010      	beq.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800a404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a408:	d106      	bne.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a40a:	4b0e      	ldr	r3, [pc, #56]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40e:	4a0d      	ldr	r2, [pc, #52]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a414:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a416:	e007      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	75fb      	strb	r3, [r7, #23]
      break;
 800a41c:	e004      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a41e:	bf00      	nop
 800a420:	e002      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a422:	bf00      	nop
 800a424:	e000      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a426:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a428:	7dfb      	ldrb	r3, [r7, #23]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d10c      	bne.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a42e:	4b05      	ldr	r3, [pc, #20]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a432:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a43a:	4902      	ldr	r1, [pc, #8]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a43c:	4313      	orrs	r3, r2
 800a43e:	654b      	str	r3, [r1, #84]	; 0x54
 800a440:	e004      	b.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800a442:	bf00      	nop
 800a444:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a448:	7dfb      	ldrb	r3, [r7, #23]
 800a44a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a454:	2b00      	cmp	r3, #0
 800a456:	d008      	beq.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a458:	4b31      	ldr	r3, [pc, #196]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a45a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a45c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a464:	492e      	ldr	r1, [pc, #184]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a466:	4313      	orrs	r3, r2
 800a468:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a472:	2b00      	cmp	r3, #0
 800a474:	d009      	beq.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a476:	4b2a      	ldr	r3, [pc, #168]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a484:	4926      	ldr	r1, [pc, #152]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a486:	4313      	orrs	r3, r2
 800a488:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a492:	2b00      	cmp	r3, #0
 800a494:	d008      	beq.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a496:	4b22      	ldr	r3, [pc, #136]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a49a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4a2:	491f      	ldr	r1, [pc, #124]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00d      	beq.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a4b4:	4b1a      	ldr	r3, [pc, #104]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4b6:	691b      	ldr	r3, [r3, #16]
 800a4b8:	4a19      	ldr	r2, [pc, #100]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a4be:	6113      	str	r3, [r2, #16]
 800a4c0:	4b17      	ldr	r3, [pc, #92]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4c2:	691a      	ldr	r2, [r3, #16]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a4ca:	4915      	ldr	r1, [pc, #84]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	da08      	bge.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a4d8:	4b11      	ldr	r3, [pc, #68]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4dc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4e4:	490e      	ldr	r1, [pc, #56]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d009      	beq.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a4f6:	4b0a      	ldr	r3, [pc, #40]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a504:	4906      	ldr	r1, [pc, #24]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a506:	4313      	orrs	r3, r2
 800a508:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a50a:	7dbb      	ldrb	r3, [r7, #22]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d101      	bne.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800a510:	2300      	movs	r3, #0
 800a512:	e000      	b.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800a514:	2301      	movs	r3, #1
}
 800a516:	4618      	mov	r0, r3
 800a518:	3718      	adds	r7, #24
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	58024400 	.word	0x58024400

0800a524 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b090      	sub	sp, #64	; 0x40
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a532:	f040 8095 	bne.w	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a536:	4b97      	ldr	r3, [pc, #604]	; (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a53a:	f003 0307 	and.w	r3, r3, #7
 800a53e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a542:	2b04      	cmp	r3, #4
 800a544:	f200 8088 	bhi.w	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a548:	a201      	add	r2, pc, #4	; (adr r2, 800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a54e:	bf00      	nop
 800a550:	0800a565 	.word	0x0800a565
 800a554:	0800a58d 	.word	0x0800a58d
 800a558:	0800a5b5 	.word	0x0800a5b5
 800a55c:	0800a651 	.word	0x0800a651
 800a560:	0800a5dd 	.word	0x0800a5dd
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a564:	4b8b      	ldr	r3, [pc, #556]	; (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a56c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a570:	d108      	bne.n	800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a576:	4618      	mov	r0, r3
 800a578:	f000 ff64 	bl	800b444 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a580:	f000 bc94 	b.w	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a584:	2300      	movs	r3, #0
 800a586:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a588:	f000 bc90 	b.w	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a58c:	4b81      	ldr	r3, [pc, #516]	; (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a594:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a598:	d108      	bne.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a59a:	f107 0318 	add.w	r3, r7, #24
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f000 fca8 	bl	800aef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5a4:	69bb      	ldr	r3, [r7, #24]
 800a5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5a8:	f000 bc80 	b.w	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5b0:	f000 bc7c 	b.w	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5b4:	4b77      	ldr	r3, [pc, #476]	; (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5c0:	d108      	bne.n	800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5c2:	f107 030c 	add.w	r3, r7, #12
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f000 fde8 	bl	800b19c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5d0:	f000 bc6c 	b.w	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5d8:	f000 bc68 	b.w	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a5dc:	4b6d      	ldr	r3, [pc, #436]	; (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a5e4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5e6:	4b6b      	ldr	r3, [pc, #428]	; (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f003 0304 	and.w	r3, r3, #4
 800a5ee:	2b04      	cmp	r3, #4
 800a5f0:	d10c      	bne.n	800a60c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a5f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d109      	bne.n	800a60c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a5f8:	4b66      	ldr	r3, [pc, #408]	; (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	08db      	lsrs	r3, r3, #3
 800a5fe:	f003 0303 	and.w	r3, r3, #3
 800a602:	4a65      	ldr	r2, [pc, #404]	; (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a604:	fa22 f303 	lsr.w	r3, r2, r3
 800a608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a60a:	e01f      	b.n	800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a60c:	4b61      	ldr	r3, [pc, #388]	; (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a618:	d106      	bne.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a61a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a61c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a620:	d102      	bne.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a622:	4b5e      	ldr	r3, [pc, #376]	; (800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a624:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a626:	e011      	b.n	800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a628:	4b5a      	ldr	r3, [pc, #360]	; (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a630:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a634:	d106      	bne.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a638:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a63c:	d102      	bne.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a63e:	4b58      	ldr	r3, [pc, #352]	; (800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a640:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a642:	e003      	b.n	800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a644:	2300      	movs	r3, #0
 800a646:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a648:	f000 bc30 	b.w	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a64c:	f000 bc2e 	b.w	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a650:	4b54      	ldr	r3, [pc, #336]	; (800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a652:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a654:	f000 bc2a 	b.w	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a658:	2300      	movs	r3, #0
 800a65a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a65c:	f000 bc26 	b.w	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a666:	f040 809f 	bne.w	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a66a:	4b4a      	ldr	r3, [pc, #296]	; (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a66c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a66e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a672:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a67a:	d04d      	beq.n	800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a682:	f200 8084 	bhi.w	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a688:	2bc0      	cmp	r3, #192	; 0xc0
 800a68a:	d07d      	beq.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68e:	2bc0      	cmp	r3, #192	; 0xc0
 800a690:	d87d      	bhi.n	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a694:	2b80      	cmp	r3, #128	; 0x80
 800a696:	d02d      	beq.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69a:	2b80      	cmp	r3, #128	; 0x80
 800a69c:	d877      	bhi.n	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d003      	beq.n	800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a6:	2b40      	cmp	r3, #64	; 0x40
 800a6a8:	d012      	beq.n	800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a6aa:	e070      	b.n	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6ac:	4b39      	ldr	r3, [pc, #228]	; (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6b8:	d107      	bne.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f000 fec0 	bl	800b444 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a6c8:	e3f0      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6ce:	e3ed      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6d0:	4b30      	ldr	r3, [pc, #192]	; (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6dc:	d107      	bne.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6de:	f107 0318 	add.w	r3, r7, #24
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f000 fc06 	bl	800aef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a6ec:	e3de      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6f2:	e3db      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6f4:	4b27      	ldr	r3, [pc, #156]	; (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a700:	d107      	bne.n	800a712 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a702:	f107 030c 	add.w	r3, r7, #12
 800a706:	4618      	mov	r0, r3
 800a708:	f000 fd48 	bl	800b19c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a710:	e3cc      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a712:	2300      	movs	r3, #0
 800a714:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a716:	e3c9      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a718:	4b1e      	ldr	r3, [pc, #120]	; (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a71a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a71c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a720:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a722:	4b1c      	ldr	r3, [pc, #112]	; (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f003 0304 	and.w	r3, r3, #4
 800a72a:	2b04      	cmp	r3, #4
 800a72c:	d10c      	bne.n	800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a72e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a730:	2b00      	cmp	r3, #0
 800a732:	d109      	bne.n	800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a734:	4b17      	ldr	r3, [pc, #92]	; (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	08db      	lsrs	r3, r3, #3
 800a73a:	f003 0303 	and.w	r3, r3, #3
 800a73e:	4a16      	ldr	r2, [pc, #88]	; (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a740:	fa22 f303 	lsr.w	r3, r2, r3
 800a744:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a746:	e01e      	b.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a748:	4b12      	ldr	r3, [pc, #72]	; (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a754:	d106      	bne.n	800a764 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a758:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a75c:	d102      	bne.n	800a764 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a75e:	4b0f      	ldr	r3, [pc, #60]	; (800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a760:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a762:	e010      	b.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a764:	4b0b      	ldr	r3, [pc, #44]	; (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a76c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a770:	d106      	bne.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a778:	d102      	bne.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a77a:	4b09      	ldr	r3, [pc, #36]	; (800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a77c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a77e:	e002      	b.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a780:	2300      	movs	r3, #0
 800a782:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a784:	e392      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a786:	e391      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a788:	4b06      	ldr	r3, [pc, #24]	; (800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a78a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a78c:	e38e      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a78e:	2300      	movs	r3, #0
 800a790:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a792:	e38b      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a794:	58024400 	.word	0x58024400
 800a798:	03d09000 	.word	0x03d09000
 800a79c:	003d0900 	.word	0x003d0900
 800a7a0:	017d7840 	.word	0x017d7840
 800a7a4:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7ae:	f040 809c 	bne.w	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a7b2:	4b9d      	ldr	r3, [pc, #628]	; (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a7b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7b6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a7ba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a7c2:	d054      	beq.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800a7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a7ca:	f200 808b 	bhi.w	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a7d4:	f000 8083 	beq.w	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a7de:	f200 8081 	bhi.w	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7e8:	d02f      	beq.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800a7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7f0:	d878      	bhi.n	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d004      	beq.n	800a802 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800a7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7fe:	d012      	beq.n	800a826 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800a800:	e070      	b.n	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a802:	4b89      	ldr	r3, [pc, #548]	; (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a80a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a80e:	d107      	bne.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a814:	4618      	mov	r0, r3
 800a816:	f000 fe15 	bl	800b444 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a81e:	e345      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a820:	2300      	movs	r3, #0
 800a822:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a824:	e342      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a826:	4b80      	ldr	r3, [pc, #512]	; (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a82e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a832:	d107      	bne.n	800a844 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a834:	f107 0318 	add.w	r3, r7, #24
 800a838:	4618      	mov	r0, r3
 800a83a:	f000 fb5b 	bl	800aef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a842:	e333      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a844:	2300      	movs	r3, #0
 800a846:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a848:	e330      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a84a:	4b77      	ldr	r3, [pc, #476]	; (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a852:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a856:	d107      	bne.n	800a868 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a858:	f107 030c 	add.w	r3, r7, #12
 800a85c:	4618      	mov	r0, r3
 800a85e:	f000 fc9d 	bl	800b19c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a866:	e321      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a868:	2300      	movs	r3, #0
 800a86a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a86c:	e31e      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a86e:	4b6e      	ldr	r3, [pc, #440]	; (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a872:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a876:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a878:	4b6b      	ldr	r3, [pc, #428]	; (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f003 0304 	and.w	r3, r3, #4
 800a880:	2b04      	cmp	r3, #4
 800a882:	d10c      	bne.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800a884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a886:	2b00      	cmp	r3, #0
 800a888:	d109      	bne.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a88a:	4b67      	ldr	r3, [pc, #412]	; (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	08db      	lsrs	r3, r3, #3
 800a890:	f003 0303 	and.w	r3, r3, #3
 800a894:	4a65      	ldr	r2, [pc, #404]	; (800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a896:	fa22 f303 	lsr.w	r3, r2, r3
 800a89a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a89c:	e01e      	b.n	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a89e:	4b62      	ldr	r3, [pc, #392]	; (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8aa:	d106      	bne.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a8ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8b2:	d102      	bne.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a8b4:	4b5e      	ldr	r3, [pc, #376]	; (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8b8:	e010      	b.n	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8ba:	4b5b      	ldr	r3, [pc, #364]	; (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8c6:	d106      	bne.n	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8ce:	d102      	bne.n	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a8d0:	4b58      	ldr	r3, [pc, #352]	; (800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8d4:	e002      	b.n	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a8da:	e2e7      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a8dc:	e2e6      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a8de:	4b56      	ldr	r3, [pc, #344]	; (800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a8e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8e2:	e2e3      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8e8:	e2e0      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8f0:	f040 80a7 	bne.w	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a8f4:	4b4c      	ldr	r3, [pc, #304]	; (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8f8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a8fc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a900:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a904:	d055      	beq.n	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a908:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a90c:	f200 8096 	bhi.w	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a912:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a916:	f000 8084 	beq.w	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a920:	f200 808c 	bhi.w	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a926:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a92a:	d030      	beq.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a932:	f200 8083 	bhi.w	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d004      	beq.n	800a946 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a942:	d012      	beq.n	800a96a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a944:	e07a      	b.n	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a946:	4b38      	ldr	r3, [pc, #224]	; (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a94e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a952:	d107      	bne.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a958:	4618      	mov	r0, r3
 800a95a:	f000 fd73 	bl	800b444 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a960:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a962:	e2a3      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a964:	2300      	movs	r3, #0
 800a966:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a968:	e2a0      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a96a:	4b2f      	ldr	r3, [pc, #188]	; (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a972:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a976:	d107      	bne.n	800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a978:	f107 0318 	add.w	r3, r7, #24
 800a97c:	4618      	mov	r0, r3
 800a97e:	f000 fab9 	bl	800aef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a982:	69bb      	ldr	r3, [r7, #24]
 800a984:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a986:	e291      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a988:	2300      	movs	r3, #0
 800a98a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a98c:	e28e      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a98e:	4b26      	ldr	r3, [pc, #152]	; (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a996:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a99a:	d107      	bne.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a99c:	f107 030c 	add.w	r3, r7, #12
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f000 fbfb 	bl	800b19c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a9aa:	e27f      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9b0:	e27c      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a9b2:	4b1d      	ldr	r3, [pc, #116]	; (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a9b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a9ba:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9bc:	4b1a      	ldr	r3, [pc, #104]	; (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 0304 	and.w	r3, r3, #4
 800a9c4:	2b04      	cmp	r3, #4
 800a9c6:	d10c      	bne.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d109      	bne.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9ce:	4b16      	ldr	r3, [pc, #88]	; (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	08db      	lsrs	r3, r3, #3
 800a9d4:	f003 0303 	and.w	r3, r3, #3
 800a9d8:	4a14      	ldr	r2, [pc, #80]	; (800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a9da:	fa22 f303 	lsr.w	r3, r2, r3
 800a9de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9e0:	e01e      	b.n	800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a9e2:	4b11      	ldr	r3, [pc, #68]	; (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9ee:	d106      	bne.n	800a9fe <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a9f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9f6:	d102      	bne.n	800a9fe <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a9f8:	4b0d      	ldr	r3, [pc, #52]	; (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9fc:	e010      	b.n	800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a9fe:	4b0a      	ldr	r3, [pc, #40]	; (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa0a:	d106      	bne.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800aa0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa12:	d102      	bne.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aa14:	4b07      	ldr	r3, [pc, #28]	; (800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800aa16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa18:	e002      	b.n	800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800aa1e:	e245      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800aa20:	e244      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800aa22:	4b05      	ldr	r3, [pc, #20]	; (800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aa24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa26:	e241      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800aa28:	58024400 	.word	0x58024400
 800aa2c:	03d09000 	.word	0x03d09000
 800aa30:	003d0900 	.word	0x003d0900
 800aa34:	017d7840 	.word	0x017d7840
 800aa38:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa40:	e234      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa48:	f040 809c 	bne.w	800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800aa4c:	4b9b      	ldr	r3, [pc, #620]	; (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa50:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800aa54:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aa56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa5c:	d054      	beq.n	800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800aa5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa64:	f200 808b 	bhi.w	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800aa68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa6e:	f000 8083 	beq.w	800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800aa72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa78:	f200 8081 	bhi.w	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800aa7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa82:	d02f      	beq.n	800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800aa84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa8a:	d878      	bhi.n	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800aa8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d004      	beq.n	800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800aa92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa98:	d012      	beq.n	800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800aa9a:	e070      	b.n	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa9c:	4b87      	ldr	r3, [pc, #540]	; (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaa4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aaa8:	d107      	bne.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aaaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aaae:	4618      	mov	r0, r3
 800aab0:	f000 fcc8 	bl	800b444 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aab8:	e1f8      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aaba:	2300      	movs	r3, #0
 800aabc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aabe:	e1f5      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aac0:	4b7e      	ldr	r3, [pc, #504]	; (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aac8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aacc:	d107      	bne.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aace:	f107 0318 	add.w	r3, r7, #24
 800aad2:	4618      	mov	r0, r3
 800aad4:	f000 fa0e 	bl	800aef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aadc:	e1e6      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aade:	2300      	movs	r3, #0
 800aae0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aae2:	e1e3      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aae4:	4b75      	ldr	r3, [pc, #468]	; (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aaec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aaf0:	d107      	bne.n	800ab02 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aaf2:	f107 030c 	add.w	r3, r7, #12
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f000 fb50 	bl	800b19c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ab00:	e1d4      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ab02:	2300      	movs	r3, #0
 800ab04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab06:	e1d1      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ab08:	4b6c      	ldr	r3, [pc, #432]	; (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab10:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab12:	4b6a      	ldr	r3, [pc, #424]	; (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f003 0304 	and.w	r3, r3, #4
 800ab1a:	2b04      	cmp	r3, #4
 800ab1c:	d10c      	bne.n	800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ab1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d109      	bne.n	800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab24:	4b65      	ldr	r3, [pc, #404]	; (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	08db      	lsrs	r3, r3, #3
 800ab2a:	f003 0303 	and.w	r3, r3, #3
 800ab2e:	4a64      	ldr	r2, [pc, #400]	; (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800ab30:	fa22 f303 	lsr.w	r3, r2, r3
 800ab34:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab36:	e01e      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab38:	4b60      	ldr	r3, [pc, #384]	; (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab44:	d106      	bne.n	800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800ab46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab4c:	d102      	bne.n	800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ab4e:	4b5d      	ldr	r3, [pc, #372]	; (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800ab50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab52:	e010      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab54:	4b59      	ldr	r3, [pc, #356]	; (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab60:	d106      	bne.n	800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800ab62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab68:	d102      	bne.n	800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ab6a:	4b57      	ldr	r3, [pc, #348]	; (800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800ab6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab6e:	e002      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ab70:	2300      	movs	r3, #0
 800ab72:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ab74:	e19a      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ab76:	e199      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ab78:	4b54      	ldr	r3, [pc, #336]	; (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab7c:	e196      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab82:	e193      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ab8a:	d173      	bne.n	800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800ab8c:	4b4b      	ldr	r3, [pc, #300]	; (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ab94:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ab96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab9c:	d02f      	beq.n	800abfe <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800ab9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aba4:	d863      	bhi.n	800ac6e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800aba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d004      	beq.n	800abb6 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800abac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abb2:	d012      	beq.n	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800abb4:	e05b      	b.n	800ac6e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abb6:	4b41      	ldr	r3, [pc, #260]	; (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abc2:	d107      	bne.n	800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abc4:	f107 0318 	add.w	r3, r7, #24
 800abc8:	4618      	mov	r0, r3
 800abca:	f000 f993 	bl	800aef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800abd2:	e16b      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800abd4:	2300      	movs	r3, #0
 800abd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abd8:	e168      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abda:	4b38      	ldr	r3, [pc, #224]	; (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abe2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abe6:	d107      	bne.n	800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abe8:	f107 030c 	add.w	r3, r7, #12
 800abec:	4618      	mov	r0, r3
 800abee:	f000 fad5 	bl	800b19c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800abf6:	e159      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800abf8:	2300      	movs	r3, #0
 800abfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abfc:	e156      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800abfe:	4b2f      	ldr	r3, [pc, #188]	; (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac06:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac08:	4b2c      	ldr	r3, [pc, #176]	; (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f003 0304 	and.w	r3, r3, #4
 800ac10:	2b04      	cmp	r3, #4
 800ac12:	d10c      	bne.n	800ac2e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800ac14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d109      	bne.n	800ac2e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac1a:	4b28      	ldr	r3, [pc, #160]	; (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	08db      	lsrs	r3, r3, #3
 800ac20:	f003 0303 	and.w	r3, r3, #3
 800ac24:	4a26      	ldr	r2, [pc, #152]	; (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800ac26:	fa22 f303 	lsr.w	r3, r2, r3
 800ac2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac2c:	e01e      	b.n	800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac2e:	4b23      	ldr	r3, [pc, #140]	; (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac3a:	d106      	bne.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800ac3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac42:	d102      	bne.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ac44:	4b1f      	ldr	r3, [pc, #124]	; (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800ac46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac48:	e010      	b.n	800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac4a:	4b1c      	ldr	r3, [pc, #112]	; (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac56:	d106      	bne.n	800ac66 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800ac58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac5e:	d102      	bne.n	800ac66 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ac60:	4b19      	ldr	r3, [pc, #100]	; (800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800ac62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac64:	e002      	b.n	800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ac66:	2300      	movs	r3, #0
 800ac68:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ac6a:	e11f      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ac6c:	e11e      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac72:	e11b      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac7a:	d13e      	bne.n	800acfa <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800ac7c:	4b0f      	ldr	r3, [pc, #60]	; (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac84:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ac86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d004      	beq.n	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800ac8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac92:	d01d      	beq.n	800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800ac94:	e02e      	b.n	800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac96:	4b09      	ldr	r3, [pc, #36]	; (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aca2:	d107      	bne.n	800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aca8:	4618      	mov	r0, r3
 800acaa:	f000 fbcb 	bl	800b444 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800acae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800acb2:	e0fb      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800acb4:	2300      	movs	r3, #0
 800acb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acb8:	e0f8      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800acba:	bf00      	nop
 800acbc:	58024400 	.word	0x58024400
 800acc0:	03d09000 	.word	0x03d09000
 800acc4:	003d0900 	.word	0x003d0900
 800acc8:	017d7840 	.word	0x017d7840
 800accc:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acd0:	4b79      	ldr	r3, [pc, #484]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acdc:	d107      	bne.n	800acee <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acde:	f107 0318 	add.w	r3, r7, #24
 800ace2:	4618      	mov	r0, r3
 800ace4:	f000 f906 	bl	800aef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ace8:	6a3b      	ldr	r3, [r7, #32]
 800acea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800acec:	e0de      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800acee:	2300      	movs	r3, #0
 800acf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acf2:	e0db      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800acf4:	2300      	movs	r3, #0
 800acf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acf8:	e0d8      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad00:	f040 8085 	bne.w	800ae0e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800ad04:	4b6c      	ldr	r3, [pc, #432]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad08:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ad0c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ad0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad14:	d06b      	beq.n	800adee <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800ad16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad1c:	d874      	bhi.n	800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ad1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad24:	d056      	beq.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800ad26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad2c:	d86c      	bhi.n	800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ad2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad34:	d03b      	beq.n	800adae <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800ad36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad3c:	d864      	bhi.n	800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ad3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad44:	d021      	beq.n	800ad8a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800ad46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad4c:	d85c      	bhi.n	800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ad4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d004      	beq.n	800ad5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ad54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad5a:	d004      	beq.n	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800ad5c:	e054      	b.n	800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ad5e:	f000 f8b3 	bl	800aec8 <HAL_RCCEx_GetD3PCLK1Freq>
 800ad62:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800ad64:	e0a2      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad66:	4b54      	ldr	r3, [pc, #336]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad72:	d107      	bne.n	800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad74:	f107 0318 	add.w	r3, r7, #24
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f000 f8bb 	bl	800aef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad7e:	69fb      	ldr	r3, [r7, #28]
 800ad80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad82:	e093      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ad84:	2300      	movs	r3, #0
 800ad86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad88:	e090      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad8a:	4b4b      	ldr	r3, [pc, #300]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad96:	d107      	bne.n	800ada8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad98:	f107 030c 	add.w	r3, r7, #12
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f000 f9fd 	bl	800b19c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ada6:	e081      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ada8:	2300      	movs	r3, #0
 800adaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adac:	e07e      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800adae:	4b42      	ldr	r3, [pc, #264]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f003 0304 	and.w	r3, r3, #4
 800adb6:	2b04      	cmp	r3, #4
 800adb8:	d109      	bne.n	800adce <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800adba:	4b3f      	ldr	r3, [pc, #252]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	08db      	lsrs	r3, r3, #3
 800adc0:	f003 0303 	and.w	r3, r3, #3
 800adc4:	4a3d      	ldr	r2, [pc, #244]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800adc6:	fa22 f303 	lsr.w	r3, r2, r3
 800adca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800adcc:	e06e      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800adce:	2300      	movs	r3, #0
 800add0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800add2:	e06b      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800add4:	4b38      	ldr	r3, [pc, #224]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800addc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ade0:	d102      	bne.n	800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800ade2:	4b37      	ldr	r3, [pc, #220]	; (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ade4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ade6:	e061      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ade8:	2300      	movs	r3, #0
 800adea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adec:	e05e      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800adee:	4b32      	ldr	r3, [pc, #200]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adfa:	d102      	bne.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800adfc:	4b31      	ldr	r3, [pc, #196]	; (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800adfe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae00:	e054      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ae02:	2300      	movs	r3, #0
 800ae04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae06:	e051      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae0c:	e04e      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae14:	d148      	bne.n	800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800ae16:	4b28      	ldr	r3, [pc, #160]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae1e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ae20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae26:	d02a      	beq.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800ae28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae2e:	d838      	bhi.n	800aea2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800ae30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d004      	beq.n	800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800ae36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae3c:	d00d      	beq.n	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800ae3e:	e030      	b.n	800aea2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae40:	4b1d      	ldr	r3, [pc, #116]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae4c:	d102      	bne.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800ae4e:	4b1d      	ldr	r3, [pc, #116]	; (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ae50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae52:	e02b      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ae54:	2300      	movs	r3, #0
 800ae56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae58:	e028      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae5a:	4b17      	ldr	r3, [pc, #92]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae66:	d107      	bne.n	800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f000 fae9 	bl	800b444 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae76:	e019      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae7c:	e016      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae7e:	4b0e      	ldr	r3, [pc, #56]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae8a:	d107      	bne.n	800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae8c:	f107 0318 	add.w	r3, r7, #24
 800ae90:	4618      	mov	r0, r3
 800ae92:	f000 f82f 	bl	800aef4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae9a:	e007      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aea0:	e004      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800aea2:	2300      	movs	r3, #0
 800aea4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aea6:	e001      	b.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800aeac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3740      	adds	r7, #64	; 0x40
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	58024400 	.word	0x58024400
 800aebc:	03d09000 	.word	0x03d09000
 800aec0:	003d0900 	.word	0x003d0900
 800aec4:	017d7840 	.word	0x017d7840

0800aec8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aecc:	f7fe fb88 	bl	80095e0 <HAL_RCC_GetHCLKFreq>
 800aed0:	4602      	mov	r2, r0
 800aed2:	4b06      	ldr	r3, [pc, #24]	; (800aeec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aed4:	6a1b      	ldr	r3, [r3, #32]
 800aed6:	091b      	lsrs	r3, r3, #4
 800aed8:	f003 0307 	and.w	r3, r3, #7
 800aedc:	4904      	ldr	r1, [pc, #16]	; (800aef0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aede:	5ccb      	ldrb	r3, [r1, r3]
 800aee0:	f003 031f 	and.w	r3, r3, #31
 800aee4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	58024400 	.word	0x58024400
 800aef0:	0801004c 	.word	0x0801004c

0800aef4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b089      	sub	sp, #36	; 0x24
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aefc:	4ba1      	ldr	r3, [pc, #644]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aefe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af00:	f003 0303 	and.w	r3, r3, #3
 800af04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800af06:	4b9f      	ldr	r3, [pc, #636]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af0a:	0b1b      	lsrs	r3, r3, #12
 800af0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800af12:	4b9c      	ldr	r3, [pc, #624]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af16:	091b      	lsrs	r3, r3, #4
 800af18:	f003 0301 	and.w	r3, r3, #1
 800af1c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800af1e:	4b99      	ldr	r3, [pc, #612]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af22:	08db      	lsrs	r3, r3, #3
 800af24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af28:	693a      	ldr	r2, [r7, #16]
 800af2a:	fb02 f303 	mul.w	r3, r2, r3
 800af2e:	ee07 3a90 	vmov	s15, r3
 800af32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f000 8111 	beq.w	800b164 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800af42:	69bb      	ldr	r3, [r7, #24]
 800af44:	2b02      	cmp	r3, #2
 800af46:	f000 8083 	beq.w	800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	f200 80a1 	bhi.w	800b094 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d003      	beq.n	800af60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800af58:	69bb      	ldr	r3, [r7, #24]
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d056      	beq.n	800b00c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800af5e:	e099      	b.n	800b094 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af60:	4b88      	ldr	r3, [pc, #544]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f003 0320 	and.w	r3, r3, #32
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d02d      	beq.n	800afc8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af6c:	4b85      	ldr	r3, [pc, #532]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	08db      	lsrs	r3, r3, #3
 800af72:	f003 0303 	and.w	r3, r3, #3
 800af76:	4a84      	ldr	r2, [pc, #528]	; (800b188 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800af78:	fa22 f303 	lsr.w	r3, r2, r3
 800af7c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	ee07 3a90 	vmov	s15, r3
 800af84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	ee07 3a90 	vmov	s15, r3
 800af8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af96:	4b7b      	ldr	r3, [pc, #492]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af9e:	ee07 3a90 	vmov	s15, r3
 800afa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afa6:	ed97 6a03 	vldr	s12, [r7, #12]
 800afaa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afc2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800afc6:	e087      	b.n	800b0d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	ee07 3a90 	vmov	s15, r3
 800afce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afd2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b190 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800afd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afda:	4b6a      	ldr	r3, [pc, #424]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afe2:	ee07 3a90 	vmov	s15, r3
 800afe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afea:	ed97 6a03 	vldr	s12, [r7, #12]
 800afee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800affa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800affe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b002:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b006:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b00a:	e065      	b.n	800b0d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	ee07 3a90 	vmov	s15, r3
 800b012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b016:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b194 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b01a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b01e:	4b59      	ldr	r3, [pc, #356]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b026:	ee07 3a90 	vmov	s15, r3
 800b02a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b02e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b032:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b03a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b03e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b04a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b04e:	e043      	b.n	800b0d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	ee07 3a90 	vmov	s15, r3
 800b056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b05a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b05e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b062:	4b48      	ldr	r3, [pc, #288]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b06a:	ee07 3a90 	vmov	s15, r3
 800b06e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b072:	ed97 6a03 	vldr	s12, [r7, #12]
 800b076:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b07a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b07e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b08a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b08e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b092:	e021      	b.n	800b0d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	ee07 3a90 	vmov	s15, r3
 800b09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b09e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b194 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b0a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0a6:	4b37      	ldr	r3, [pc, #220]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0ae:	ee07 3a90 	vmov	s15, r3
 800b0b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b18c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b0d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b0d8:	4b2a      	ldr	r3, [pc, #168]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0dc:	0a5b      	lsrs	r3, r3, #9
 800b0de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0e2:	ee07 3a90 	vmov	s15, r3
 800b0e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0fe:	ee17 2a90 	vmov	r2, s15
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b106:	4b1f      	ldr	r3, [pc, #124]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b10a:	0c1b      	lsrs	r3, r3, #16
 800b10c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b110:	ee07 3a90 	vmov	s15, r3
 800b114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b118:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b11c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b120:	edd7 6a07 	vldr	s13, [r7, #28]
 800b124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b12c:	ee17 2a90 	vmov	r2, s15
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b134:	4b13      	ldr	r3, [pc, #76]	; (800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b138:	0e1b      	lsrs	r3, r3, #24
 800b13a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b13e:	ee07 3a90 	vmov	s15, r3
 800b142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b146:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b14a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b14e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b15a:	ee17 2a90 	vmov	r2, s15
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b162:	e008      	b.n	800b176 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	609a      	str	r2, [r3, #8]
}
 800b176:	bf00      	nop
 800b178:	3724      	adds	r7, #36	; 0x24
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr
 800b182:	bf00      	nop
 800b184:	58024400 	.word	0x58024400
 800b188:	03d09000 	.word	0x03d09000
 800b18c:	46000000 	.word	0x46000000
 800b190:	4c742400 	.word	0x4c742400
 800b194:	4a742400 	.word	0x4a742400
 800b198:	4bbebc20 	.word	0x4bbebc20

0800b19c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b089      	sub	sp, #36	; 0x24
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b1a4:	4ba1      	ldr	r3, [pc, #644]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a8:	f003 0303 	and.w	r3, r3, #3
 800b1ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b1ae:	4b9f      	ldr	r3, [pc, #636]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1b2:	0d1b      	lsrs	r3, r3, #20
 800b1b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b1ba:	4b9c      	ldr	r3, [pc, #624]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1be:	0a1b      	lsrs	r3, r3, #8
 800b1c0:	f003 0301 	and.w	r3, r3, #1
 800b1c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b1c6:	4b99      	ldr	r3, [pc, #612]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ca:	08db      	lsrs	r3, r3, #3
 800b1cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1d0:	693a      	ldr	r2, [r7, #16]
 800b1d2:	fb02 f303 	mul.w	r3, r2, r3
 800b1d6:	ee07 3a90 	vmov	s15, r3
 800b1da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f000 8111 	beq.w	800b40c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	2b02      	cmp	r3, #2
 800b1ee:	f000 8083 	beq.w	800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	2b02      	cmp	r3, #2
 800b1f6:	f200 80a1 	bhi.w	800b33c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d003      	beq.n	800b208 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	2b01      	cmp	r3, #1
 800b204:	d056      	beq.n	800b2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b206:	e099      	b.n	800b33c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b208:	4b88      	ldr	r3, [pc, #544]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f003 0320 	and.w	r3, r3, #32
 800b210:	2b00      	cmp	r3, #0
 800b212:	d02d      	beq.n	800b270 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b214:	4b85      	ldr	r3, [pc, #532]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	08db      	lsrs	r3, r3, #3
 800b21a:	f003 0303 	and.w	r3, r3, #3
 800b21e:	4a84      	ldr	r2, [pc, #528]	; (800b430 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b220:	fa22 f303 	lsr.w	r3, r2, r3
 800b224:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	ee07 3a90 	vmov	s15, r3
 800b22c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	ee07 3a90 	vmov	s15, r3
 800b236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b23a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b23e:	4b7b      	ldr	r3, [pc, #492]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b246:	ee07 3a90 	vmov	s15, r3
 800b24a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b24e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b252:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b25a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b25e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b26a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b26e:	e087      	b.n	800b380 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	ee07 3a90 	vmov	s15, r3
 800b276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b27a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b438 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b27e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b282:	4b6a      	ldr	r3, [pc, #424]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b28a:	ee07 3a90 	vmov	s15, r3
 800b28e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b292:	ed97 6a03 	vldr	s12, [r7, #12]
 800b296:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b29a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b29e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2b2:	e065      	b.n	800b380 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	ee07 3a90 	vmov	s15, r3
 800b2ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b43c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b2c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2c6:	4b59      	ldr	r3, [pc, #356]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2ce:	ee07 3a90 	vmov	s15, r3
 800b2d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2da:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2f6:	e043      	b.n	800b380 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	ee07 3a90 	vmov	s15, r3
 800b2fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b302:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b30a:	4b48      	ldr	r3, [pc, #288]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b30e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b312:	ee07 3a90 	vmov	s15, r3
 800b316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b31a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b31e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b32a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b32e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b332:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b336:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b33a:	e021      	b.n	800b380 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	ee07 3a90 	vmov	s15, r3
 800b342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b346:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b43c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b34a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b34e:	4b37      	ldr	r3, [pc, #220]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b356:	ee07 3a90 	vmov	s15, r3
 800b35a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b35e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b362:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b434 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b36a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b36e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b37a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b37e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b380:	4b2a      	ldr	r3, [pc, #168]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b384:	0a5b      	lsrs	r3, r3, #9
 800b386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b38a:	ee07 3a90 	vmov	s15, r3
 800b38e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b392:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b396:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b39a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b39e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3a6:	ee17 2a90 	vmov	r2, s15
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b3ae:	4b1f      	ldr	r3, [pc, #124]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3b2:	0c1b      	lsrs	r3, r3, #16
 800b3b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3b8:	ee07 3a90 	vmov	s15, r3
 800b3bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3d4:	ee17 2a90 	vmov	r2, s15
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b3dc:	4b13      	ldr	r3, [pc, #76]	; (800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e0:	0e1b      	lsrs	r3, r3, #24
 800b3e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3e6:	ee07 3a90 	vmov	s15, r3
 800b3ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b402:	ee17 2a90 	vmov	r2, s15
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b40a:	e008      	b.n	800b41e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2200      	movs	r2, #0
 800b410:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	609a      	str	r2, [r3, #8]
}
 800b41e:	bf00      	nop
 800b420:	3724      	adds	r7, #36	; 0x24
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr
 800b42a:	bf00      	nop
 800b42c:	58024400 	.word	0x58024400
 800b430:	03d09000 	.word	0x03d09000
 800b434:	46000000 	.word	0x46000000
 800b438:	4c742400 	.word	0x4c742400
 800b43c:	4a742400 	.word	0x4a742400
 800b440:	4bbebc20 	.word	0x4bbebc20

0800b444 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b444:	b480      	push	{r7}
 800b446:	b089      	sub	sp, #36	; 0x24
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b44c:	4ba0      	ldr	r3, [pc, #640]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b44e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b450:	f003 0303 	and.w	r3, r3, #3
 800b454:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b456:	4b9e      	ldr	r3, [pc, #632]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b45a:	091b      	lsrs	r3, r3, #4
 800b45c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b460:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b462:	4b9b      	ldr	r3, [pc, #620]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b466:	f003 0301 	and.w	r3, r3, #1
 800b46a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b46c:	4b98      	ldr	r3, [pc, #608]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b470:	08db      	lsrs	r3, r3, #3
 800b472:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b476:	693a      	ldr	r2, [r7, #16]
 800b478:	fb02 f303 	mul.w	r3, r2, r3
 800b47c:	ee07 3a90 	vmov	s15, r3
 800b480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b484:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	f000 8111 	beq.w	800b6b2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b490:	69bb      	ldr	r3, [r7, #24]
 800b492:	2b02      	cmp	r3, #2
 800b494:	f000 8083 	beq.w	800b59e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	2b02      	cmp	r3, #2
 800b49c:	f200 80a1 	bhi.w	800b5e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d003      	beq.n	800b4ae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d056      	beq.n	800b55a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b4ac:	e099      	b.n	800b5e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4ae:	4b88      	ldr	r3, [pc, #544]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f003 0320 	and.w	r3, r3, #32
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d02d      	beq.n	800b516 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b4ba:	4b85      	ldr	r3, [pc, #532]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	08db      	lsrs	r3, r3, #3
 800b4c0:	f003 0303 	and.w	r3, r3, #3
 800b4c4:	4a83      	ldr	r2, [pc, #524]	; (800b6d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b4c6:	fa22 f303 	lsr.w	r3, r2, r3
 800b4ca:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	ee07 3a90 	vmov	s15, r3
 800b4d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	ee07 3a90 	vmov	s15, r3
 800b4dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4e4:	4b7a      	ldr	r3, [pc, #488]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4ec:	ee07 3a90 	vmov	s15, r3
 800b4f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4f8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b4fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b500:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b504:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b508:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b50c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b510:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b514:	e087      	b.n	800b626 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	ee07 3a90 	vmov	s15, r3
 800b51c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b520:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b6dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b524:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b528:	4b69      	ldr	r3, [pc, #420]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b52a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b52c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b530:	ee07 3a90 	vmov	s15, r3
 800b534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b538:	ed97 6a03 	vldr	s12, [r7, #12]
 800b53c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b540:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b544:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b548:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b54c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b550:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b554:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b558:	e065      	b.n	800b626 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	ee07 3a90 	vmov	s15, r3
 800b560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b564:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b6e0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b568:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b56c:	4b58      	ldr	r3, [pc, #352]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b56e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b574:	ee07 3a90 	vmov	s15, r3
 800b578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b57c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b580:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b584:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b588:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b58c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b590:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b594:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b598:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b59c:	e043      	b.n	800b626 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	ee07 3a90 	vmov	s15, r3
 800b5a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5a8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b5ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5b0:	4b47      	ldr	r3, [pc, #284]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5b8:	ee07 3a90 	vmov	s15, r3
 800b5bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5c4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b5e0:	e021      	b.n	800b626 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	ee07 3a90 	vmov	s15, r3
 800b5e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ec:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b6dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b5f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5f4:	4b36      	ldr	r3, [pc, #216]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5fc:	ee07 3a90 	vmov	s15, r3
 800b600:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b604:	ed97 6a03 	vldr	s12, [r7, #12]
 800b608:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b60c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b610:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b614:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b618:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b61c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b620:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b624:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b626:	4b2a      	ldr	r3, [pc, #168]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b62a:	0a5b      	lsrs	r3, r3, #9
 800b62c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b630:	ee07 3a90 	vmov	s15, r3
 800b634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b638:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b63c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b640:	edd7 6a07 	vldr	s13, [r7, #28]
 800b644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b64c:	ee17 2a90 	vmov	r2, s15
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b654:	4b1e      	ldr	r3, [pc, #120]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b658:	0c1b      	lsrs	r3, r3, #16
 800b65a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b65e:	ee07 3a90 	vmov	s15, r3
 800b662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b666:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b66a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b66e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b67a:	ee17 2a90 	vmov	r2, s15
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b682:	4b13      	ldr	r3, [pc, #76]	; (800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b686:	0e1b      	lsrs	r3, r3, #24
 800b688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b68c:	ee07 3a90 	vmov	s15, r3
 800b690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b694:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b698:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b69c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6a8:	ee17 2a90 	vmov	r2, s15
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b6b0:	e008      	b.n	800b6c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	609a      	str	r2, [r3, #8]
}
 800b6c4:	bf00      	nop
 800b6c6:	3724      	adds	r7, #36	; 0x24
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr
 800b6d0:	58024400 	.word	0x58024400
 800b6d4:	03d09000 	.word	0x03d09000
 800b6d8:	46000000 	.word	0x46000000
 800b6dc:	4c742400 	.word	0x4c742400
 800b6e0:	4a742400 	.word	0x4a742400
 800b6e4:	4bbebc20 	.word	0x4bbebc20

0800b6e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b6f6:	4b53      	ldr	r3, [pc, #332]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6fa:	f003 0303 	and.w	r3, r3, #3
 800b6fe:	2b03      	cmp	r3, #3
 800b700:	d101      	bne.n	800b706 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b702:	2301      	movs	r3, #1
 800b704:	e099      	b.n	800b83a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b706:	4b4f      	ldr	r3, [pc, #316]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a4e      	ldr	r2, [pc, #312]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b70c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b712:	f7f7 f975 	bl	8002a00 <HAL_GetTick>
 800b716:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b718:	e008      	b.n	800b72c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b71a:	f7f7 f971 	bl	8002a00 <HAL_GetTick>
 800b71e:	4602      	mov	r2, r0
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	1ad3      	subs	r3, r2, r3
 800b724:	2b02      	cmp	r3, #2
 800b726:	d901      	bls.n	800b72c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b728:	2303      	movs	r3, #3
 800b72a:	e086      	b.n	800b83a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b72c:	4b45      	ldr	r3, [pc, #276]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b734:	2b00      	cmp	r3, #0
 800b736:	d1f0      	bne.n	800b71a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b738:	4b42      	ldr	r3, [pc, #264]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b73c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	031b      	lsls	r3, r3, #12
 800b746:	493f      	ldr	r1, [pc, #252]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b748:	4313      	orrs	r3, r2
 800b74a:	628b      	str	r3, [r1, #40]	; 0x28
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	3b01      	subs	r3, #1
 800b752:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	3b01      	subs	r3, #1
 800b75c:	025b      	lsls	r3, r3, #9
 800b75e:	b29b      	uxth	r3, r3
 800b760:	431a      	orrs	r2, r3
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	68db      	ldr	r3, [r3, #12]
 800b766:	3b01      	subs	r3, #1
 800b768:	041b      	lsls	r3, r3, #16
 800b76a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b76e:	431a      	orrs	r2, r3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	691b      	ldr	r3, [r3, #16]
 800b774:	3b01      	subs	r3, #1
 800b776:	061b      	lsls	r3, r3, #24
 800b778:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b77c:	4931      	ldr	r1, [pc, #196]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b77e:	4313      	orrs	r3, r2
 800b780:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b782:	4b30      	ldr	r3, [pc, #192]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b786:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	695b      	ldr	r3, [r3, #20]
 800b78e:	492d      	ldr	r1, [pc, #180]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b790:	4313      	orrs	r3, r2
 800b792:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b794:	4b2b      	ldr	r3, [pc, #172]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b798:	f023 0220 	bic.w	r2, r3, #32
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	699b      	ldr	r3, [r3, #24]
 800b7a0:	4928      	ldr	r1, [pc, #160]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b7a6:	4b27      	ldr	r3, [pc, #156]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7aa:	4a26      	ldr	r2, [pc, #152]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b7ac:	f023 0310 	bic.w	r3, r3, #16
 800b7b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b7b2:	4b24      	ldr	r3, [pc, #144]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b7b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7b6:	4b24      	ldr	r3, [pc, #144]	; (800b848 <RCCEx_PLL2_Config+0x160>)
 800b7b8:	4013      	ands	r3, r2
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	69d2      	ldr	r2, [r2, #28]
 800b7be:	00d2      	lsls	r2, r2, #3
 800b7c0:	4920      	ldr	r1, [pc, #128]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b7c6:	4b1f      	ldr	r3, [pc, #124]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ca:	4a1e      	ldr	r2, [pc, #120]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b7cc:	f043 0310 	orr.w	r3, r3, #16
 800b7d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d106      	bne.n	800b7e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b7d8:	4b1a      	ldr	r3, [pc, #104]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7dc:	4a19      	ldr	r2, [pc, #100]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b7de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b7e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b7e4:	e00f      	b.n	800b806 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d106      	bne.n	800b7fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b7ec:	4b15      	ldr	r3, [pc, #84]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f0:	4a14      	ldr	r2, [pc, #80]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b7f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b7f8:	e005      	b.n	800b806 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b7fa:	4b12      	ldr	r3, [pc, #72]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fe:	4a11      	ldr	r2, [pc, #68]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b800:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b804:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b806:	4b0f      	ldr	r3, [pc, #60]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4a0e      	ldr	r2, [pc, #56]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b80c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b810:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b812:	f7f7 f8f5 	bl	8002a00 <HAL_GetTick>
 800b816:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b818:	e008      	b.n	800b82c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b81a:	f7f7 f8f1 	bl	8002a00 <HAL_GetTick>
 800b81e:	4602      	mov	r2, r0
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	1ad3      	subs	r3, r2, r3
 800b824:	2b02      	cmp	r3, #2
 800b826:	d901      	bls.n	800b82c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b828:	2303      	movs	r3, #3
 800b82a:	e006      	b.n	800b83a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b82c:	4b05      	ldr	r3, [pc, #20]	; (800b844 <RCCEx_PLL2_Config+0x15c>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b834:	2b00      	cmp	r3, #0
 800b836:	d0f0      	beq.n	800b81a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b838:	7bfb      	ldrb	r3, [r7, #15]
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	58024400 	.word	0x58024400
 800b848:	ffff0007 	.word	0xffff0007

0800b84c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b856:	2300      	movs	r3, #0
 800b858:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b85a:	4b53      	ldr	r3, [pc, #332]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b85e:	f003 0303 	and.w	r3, r3, #3
 800b862:	2b03      	cmp	r3, #3
 800b864:	d101      	bne.n	800b86a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b866:	2301      	movs	r3, #1
 800b868:	e099      	b.n	800b99e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b86a:	4b4f      	ldr	r3, [pc, #316]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a4e      	ldr	r2, [pc, #312]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b874:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b876:	f7f7 f8c3 	bl	8002a00 <HAL_GetTick>
 800b87a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b87c:	e008      	b.n	800b890 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b87e:	f7f7 f8bf 	bl	8002a00 <HAL_GetTick>
 800b882:	4602      	mov	r2, r0
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	1ad3      	subs	r3, r2, r3
 800b888:	2b02      	cmp	r3, #2
 800b88a:	d901      	bls.n	800b890 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b88c:	2303      	movs	r3, #3
 800b88e:	e086      	b.n	800b99e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b890:	4b45      	ldr	r3, [pc, #276]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1f0      	bne.n	800b87e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b89c:	4b42      	ldr	r3, [pc, #264]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b89e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	051b      	lsls	r3, r3, #20
 800b8aa:	493f      	ldr	r1, [pc, #252]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	628b      	str	r3, [r1, #40]	; 0x28
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	3b01      	subs	r3, #1
 800b8b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	025b      	lsls	r3, r3, #9
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	431a      	orrs	r2, r3
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	68db      	ldr	r3, [r3, #12]
 800b8ca:	3b01      	subs	r3, #1
 800b8cc:	041b      	lsls	r3, r3, #16
 800b8ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b8d2:	431a      	orrs	r2, r3
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	691b      	ldr	r3, [r3, #16]
 800b8d8:	3b01      	subs	r3, #1
 800b8da:	061b      	lsls	r3, r3, #24
 800b8dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b8e0:	4931      	ldr	r1, [pc, #196]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b8e6:	4b30      	ldr	r3, [pc, #192]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	695b      	ldr	r3, [r3, #20]
 800b8f2:	492d      	ldr	r1, [pc, #180]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b8f8:	4b2b      	ldr	r3, [pc, #172]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	699b      	ldr	r3, [r3, #24]
 800b904:	4928      	ldr	r1, [pc, #160]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b906:	4313      	orrs	r3, r2
 800b908:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b90a:	4b27      	ldr	r3, [pc, #156]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b90e:	4a26      	ldr	r2, [pc, #152]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b914:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b916:	4b24      	ldr	r3, [pc, #144]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b91a:	4b24      	ldr	r3, [pc, #144]	; (800b9ac <RCCEx_PLL3_Config+0x160>)
 800b91c:	4013      	ands	r3, r2
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	69d2      	ldr	r2, [r2, #28]
 800b922:	00d2      	lsls	r2, r2, #3
 800b924:	4920      	ldr	r1, [pc, #128]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b926:	4313      	orrs	r3, r2
 800b928:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b92a:	4b1f      	ldr	r3, [pc, #124]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b92e:	4a1e      	ldr	r2, [pc, #120]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b934:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d106      	bne.n	800b94a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b93c:	4b1a      	ldr	r3, [pc, #104]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b940:	4a19      	ldr	r2, [pc, #100]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b942:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b946:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b948:	e00f      	b.n	800b96a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d106      	bne.n	800b95e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b950:	4b15      	ldr	r3, [pc, #84]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b954:	4a14      	ldr	r2, [pc, #80]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b956:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b95a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b95c:	e005      	b.n	800b96a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b95e:	4b12      	ldr	r3, [pc, #72]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b962:	4a11      	ldr	r2, [pc, #68]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b964:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b968:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b96a:	4b0f      	ldr	r3, [pc, #60]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a0e      	ldr	r2, [pc, #56]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b974:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b976:	f7f7 f843 	bl	8002a00 <HAL_GetTick>
 800b97a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b97c:	e008      	b.n	800b990 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b97e:	f7f7 f83f 	bl	8002a00 <HAL_GetTick>
 800b982:	4602      	mov	r2, r0
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	1ad3      	subs	r3, r2, r3
 800b988:	2b02      	cmp	r3, #2
 800b98a:	d901      	bls.n	800b990 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b98c:	2303      	movs	r3, #3
 800b98e:	e006      	b.n	800b99e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b990:	4b05      	ldr	r3, [pc, #20]	; (800b9a8 <RCCEx_PLL3_Config+0x15c>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d0f0      	beq.n	800b97e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b99c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	58024400 	.word	0x58024400
 800b9ac:	ffff0007 	.word	0xffff0007

0800b9b0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d101      	bne.n	800b9c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e0f1      	b.n	800bba6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a78      	ldr	r2, [pc, #480]	; (800bbb0 <HAL_SPI_Init+0x200>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d00f      	beq.n	800b9f2 <HAL_SPI_Init+0x42>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4a77      	ldr	r2, [pc, #476]	; (800bbb4 <HAL_SPI_Init+0x204>)
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d00a      	beq.n	800b9f2 <HAL_SPI_Init+0x42>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a75      	ldr	r2, [pc, #468]	; (800bbb8 <HAL_SPI_Init+0x208>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d005      	beq.n	800b9f2 <HAL_SPI_Init+0x42>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	68db      	ldr	r3, [r3, #12]
 800b9ea:	2b0f      	cmp	r3, #15
 800b9ec:	d901      	bls.n	800b9f2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e0d9      	b.n	800bba6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 fd74 	bl	800c4e0 <SPI_GetPacketSize>
 800b9f8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4a6c      	ldr	r2, [pc, #432]	; (800bbb0 <HAL_SPI_Init+0x200>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d00c      	beq.n	800ba1e <HAL_SPI_Init+0x6e>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a6a      	ldr	r2, [pc, #424]	; (800bbb4 <HAL_SPI_Init+0x204>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d007      	beq.n	800ba1e <HAL_SPI_Init+0x6e>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4a69      	ldr	r2, [pc, #420]	; (800bbb8 <HAL_SPI_Init+0x208>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d002      	beq.n	800ba1e <HAL_SPI_Init+0x6e>
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2b08      	cmp	r3, #8
 800ba1c:	d811      	bhi.n	800ba42 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ba22:	4a63      	ldr	r2, [pc, #396]	; (800bbb0 <HAL_SPI_Init+0x200>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d009      	beq.n	800ba3c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	4a61      	ldr	r2, [pc, #388]	; (800bbb4 <HAL_SPI_Init+0x204>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d004      	beq.n	800ba3c <HAL_SPI_Init+0x8c>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a60      	ldr	r2, [pc, #384]	; (800bbb8 <HAL_SPI_Init+0x208>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d104      	bne.n	800ba46 <HAL_SPI_Init+0x96>
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2b10      	cmp	r3, #16
 800ba40:	d901      	bls.n	800ba46 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ba42:	2301      	movs	r3, #1
 800ba44:	e0af      	b.n	800bba6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d106      	bne.n	800ba60 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f7f6 fc08 	bl	8002270 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2202      	movs	r2, #2
 800ba64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f022 0201 	bic.w	r2, r2, #1
 800ba76:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ba82:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	699b      	ldr	r3, [r3, #24]
 800ba88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba8c:	d119      	bne.n	800bac2 <HAL_SPI_Init+0x112>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba96:	d103      	bne.n	800baa0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d008      	beq.n	800bab2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d10c      	bne.n	800bac2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800baac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bab0:	d107      	bne.n	800bac2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bac0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	69da      	ldr	r2, [r3, #28]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baca:	431a      	orrs	r2, r3
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	431a      	orrs	r2, r3
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bad4:	ea42 0103 	orr.w	r1, r2, r3
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	68da      	ldr	r2, [r3, #12]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	430a      	orrs	r2, r1
 800bae2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baec:	431a      	orrs	r2, r3
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf2:	431a      	orrs	r2, r3
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	699b      	ldr	r3, [r3, #24]
 800baf8:	431a      	orrs	r2, r3
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	691b      	ldr	r3, [r3, #16]
 800bafe:	431a      	orrs	r2, r3
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	695b      	ldr	r3, [r3, #20]
 800bb04:	431a      	orrs	r2, r3
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6a1b      	ldr	r3, [r3, #32]
 800bb0a:	431a      	orrs	r2, r3
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	431a      	orrs	r2, r3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb16:	431a      	orrs	r2, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	431a      	orrs	r2, r3
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb22:	ea42 0103 	orr.w	r1, r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	430a      	orrs	r2, r1
 800bb30:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d113      	bne.n	800bb62 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb4c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bb60:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f022 0201 	bic.w	r2, r2, #1
 800bb70:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d00a      	beq.n	800bb94 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	430a      	orrs	r2, r1
 800bb92:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2200      	movs	r2, #0
 800bb98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800bba4:	2300      	movs	r3, #0
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3710      	adds	r7, #16
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	40013000 	.word	0x40013000
 800bbb4:	40003800 	.word	0x40003800
 800bbb8:	40003c00 	.word	0x40003c00

0800bbbc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b08a      	sub	sp, #40	; 0x28
 800bbc0:	af02      	add	r7, sp, #8
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	60b9      	str	r1, [r7, #8]
 800bbc6:	603b      	str	r3, [r7, #0]
 800bbc8:	4613      	mov	r3, r2
 800bbca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	3330      	adds	r3, #48	; 0x30
 800bbd6:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bbe0:	d112      	bne.n	800bc08 <HAL_SPI_Receive+0x4c>
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d10e      	bne.n	800bc08 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2204      	movs	r2, #4
 800bbee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bbf2:	88fa      	ldrh	r2, [r7, #6]
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	9300      	str	r3, [sp, #0]
 800bbf8:	4613      	mov	r3, r2
 800bbfa:	68ba      	ldr	r2, [r7, #8]
 800bbfc:	68b9      	ldr	r1, [r7, #8]
 800bbfe:	68f8      	ldr	r0, [r7, #12]
 800bc00:	f000 f978 	bl	800bef4 <HAL_SPI_TransmitReceive>
 800bc04:	4603      	mov	r3, r0
 800bc06:	e16f      	b.n	800bee8 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d101      	bne.n	800bc16 <HAL_SPI_Receive+0x5a>
 800bc12:	2302      	movs	r3, #2
 800bc14:	e168      	b.n	800bee8 <HAL_SPI_Receive+0x32c>
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2201      	movs	r2, #1
 800bc1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bc1e:	f7f6 feef 	bl	8002a00 <HAL_GetTick>
 800bc22:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d007      	beq.n	800bc40 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800bc30:	2302      	movs	r3, #2
 800bc32:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2200      	movs	r2, #0
 800bc38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bc3c:	7ffb      	ldrb	r3, [r7, #31]
 800bc3e:	e153      	b.n	800bee8 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d002      	beq.n	800bc4c <HAL_SPI_Receive+0x90>
 800bc46:	88fb      	ldrh	r3, [r7, #6]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d107      	bne.n	800bc5c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2200      	movs	r2, #0
 800bc54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bc58:	7ffb      	ldrb	r3, [r7, #31]
 800bc5a:	e145      	b.n	800bee8 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2204      	movs	r2, #4
 800bc60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	68ba      	ldr	r2, [r7, #8]
 800bc70:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	88fa      	ldrh	r2, [r7, #6]
 800bc76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	88fa      	ldrh	r2, [r7, #6]
 800bc7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2200      	movs	r2, #0
 800bc86:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	2200      	movs	r2, #0
 800bc94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2200      	movs	r2, #0
 800bca2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	689b      	ldr	r3, [r3, #8]
 800bca8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800bcac:	d107      	bne.n	800bcbe <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bcbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	685a      	ldr	r2, [r3, #4]
 800bcc4:	4b8a      	ldr	r3, [pc, #552]	; (800bef0 <HAL_SPI_Receive+0x334>)
 800bcc6:	4013      	ands	r3, r2
 800bcc8:	88f9      	ldrh	r1, [r7, #6]
 800bcca:	68fa      	ldr	r2, [r7, #12]
 800bccc:	6812      	ldr	r2, [r2, #0]
 800bcce:	430b      	orrs	r3, r1
 800bcd0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f042 0201 	orr.w	r2, r2, #1
 800bce0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bcea:	d107      	bne.n	800bcfc <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	681a      	ldr	r2, [r3, #0]
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcfa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	68db      	ldr	r3, [r3, #12]
 800bd00:	2b0f      	cmp	r3, #15
 800bd02:	d948      	bls.n	800bd96 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bd04:	e040      	b.n	800bd88 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	695a      	ldr	r2, [r3, #20]
 800bd0c:	f248 0308 	movw	r3, #32776	; 0x8008
 800bd10:	4013      	ands	r3, r2
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d014      	beq.n	800bd40 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bd20:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd26:	1d1a      	adds	r2, r3, #4
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	3b01      	subs	r3, #1
 800bd36:	b29a      	uxth	r2, r3
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bd3e:	e023      	b.n	800bd88 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd40:	f7f6 fe5e 	bl	8002a00 <HAL_GetTick>
 800bd44:	4602      	mov	r2, r0
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	1ad3      	subs	r3, r2, r3
 800bd4a:	683a      	ldr	r2, [r7, #0]
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d803      	bhi.n	800bd58 <HAL_SPI_Receive+0x19c>
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd56:	d102      	bne.n	800bd5e <HAL_SPI_Receive+0x1a2>
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d114      	bne.n	800bd88 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bd5e:	68f8      	ldr	r0, [r7, #12]
 800bd60:	f000 faf0 	bl	800c344 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2200      	movs	r2, #0
 800bd68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2201      	movs	r2, #1
 800bd80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bd84:	2303      	movs	r3, #3
 800bd86:	e0af      	b.n	800bee8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1b8      	bne.n	800bd06 <HAL_SPI_Receive+0x14a>
 800bd94:	e095      	b.n	800bec2 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	2b07      	cmp	r3, #7
 800bd9c:	f240 808b 	bls.w	800beb6 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bda0:	e03f      	b.n	800be22 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	695b      	ldr	r3, [r3, #20]
 800bda8:	f003 0301 	and.w	r3, r3, #1
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d114      	bne.n	800bdda <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdb4:	69ba      	ldr	r2, [r7, #24]
 800bdb6:	8812      	ldrh	r2, [r2, #0]
 800bdb8:	b292      	uxth	r2, r2
 800bdba:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdc0:	1c9a      	adds	r2, r3, #2
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	b29a      	uxth	r2, r3
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bdd8:	e023      	b.n	800be22 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bdda:	f7f6 fe11 	bl	8002a00 <HAL_GetTick>
 800bdde:	4602      	mov	r2, r0
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	1ad3      	subs	r3, r2, r3
 800bde4:	683a      	ldr	r2, [r7, #0]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d803      	bhi.n	800bdf2 <HAL_SPI_Receive+0x236>
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bdf0:	d102      	bne.n	800bdf8 <HAL_SPI_Receive+0x23c>
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d114      	bne.n	800be22 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bdf8:	68f8      	ldr	r0, [r7, #12]
 800bdfa:	f000 faa3 	bl	800c344 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2200      	movs	r2, #0
 800be02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2201      	movs	r2, #1
 800be1a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800be1e:	2303      	movs	r3, #3
 800be20:	e062      	b.n	800bee8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be28:	b29b      	uxth	r3, r3
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d1b9      	bne.n	800bda2 <HAL_SPI_Receive+0x1e6>
 800be2e:	e048      	b.n	800bec2 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	695b      	ldr	r3, [r3, #20]
 800be36:	f003 0301 	and.w	r3, r3, #1
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d117      	bne.n	800be6e <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be4a:	7812      	ldrb	r2, [r2, #0]
 800be4c:	b2d2      	uxtb	r2, r2
 800be4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be54:	1c5a      	adds	r2, r3, #1
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be60:	b29b      	uxth	r3, r3
 800be62:	3b01      	subs	r3, #1
 800be64:	b29a      	uxth	r2, r3
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800be6c:	e023      	b.n	800beb6 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be6e:	f7f6 fdc7 	bl	8002a00 <HAL_GetTick>
 800be72:	4602      	mov	r2, r0
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	1ad3      	subs	r3, r2, r3
 800be78:	683a      	ldr	r2, [r7, #0]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d803      	bhi.n	800be86 <HAL_SPI_Receive+0x2ca>
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be84:	d102      	bne.n	800be8c <HAL_SPI_Receive+0x2d0>
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d114      	bne.n	800beb6 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800be8c:	68f8      	ldr	r0, [r7, #12]
 800be8e:	f000 fa59 	bl	800c344 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2200      	movs	r2, #0
 800be96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bea0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2201      	movs	r2, #1
 800beae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800beb2:	2303      	movs	r3, #3
 800beb4:	e018      	b.n	800bee8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d1b6      	bne.n	800be30 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bec2:	68f8      	ldr	r0, [r7, #12]
 800bec4:	f000 fa3e 	bl	800c344 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2200      	movs	r2, #0
 800becc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2201      	movs	r2, #1
 800bed4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d001      	beq.n	800bee6 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800bee2:	2301      	movs	r3, #1
 800bee4:	e000      	b.n	800bee8 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800bee6:	7ffb      	ldrb	r3, [r7, #31]
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3720      	adds	r7, #32
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}
 800bef0:	ffff0000 	.word	0xffff0000

0800bef4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b08e      	sub	sp, #56	; 0x38
 800bef8:	af02      	add	r7, sp, #8
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	607a      	str	r2, [r7, #4]
 800bf00:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bf02:	2300      	movs	r3, #0
 800bf04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	3320      	adds	r3, #32
 800bf0e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	3330      	adds	r3, #48	; 0x30
 800bf16:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	d101      	bne.n	800bf26 <HAL_SPI_TransmitReceive+0x32>
 800bf22:	2302      	movs	r3, #2
 800bf24:	e209      	b.n	800c33a <HAL_SPI_TransmitReceive+0x446>
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2201      	movs	r2, #1
 800bf2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bf2e:	f7f6 fd67 	bl	8002a00 <HAL_GetTick>
 800bf32:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800bf34:	887b      	ldrh	r3, [r7, #2]
 800bf36:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800bf38:	887b      	ldrh	r3, [r7, #2]
 800bf3a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bf42:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bf4a:	7efb      	ldrb	r3, [r7, #27]
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d014      	beq.n	800bf7a <HAL_SPI_TransmitReceive+0x86>
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf56:	d106      	bne.n	800bf66 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d102      	bne.n	800bf66 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bf60:	7efb      	ldrb	r3, [r7, #27]
 800bf62:	2b04      	cmp	r3, #4
 800bf64:	d009      	beq.n	800bf7a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800bf66:	2302      	movs	r3, #2
 800bf68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bf74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf78:	e1df      	b.n	800c33a <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d005      	beq.n	800bf8c <HAL_SPI_TransmitReceive+0x98>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d002      	beq.n	800bf8c <HAL_SPI_TransmitReceive+0x98>
 800bf86:	887b      	ldrh	r3, [r7, #2]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d109      	bne.n	800bfa0 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2200      	movs	r2, #0
 800bf96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bf9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf9e:	e1cc      	b.n	800c33a <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bfa6:	b2db      	uxtb	r3, r3
 800bfa8:	2b04      	cmp	r3, #4
 800bfaa:	d003      	beq.n	800bfb4 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2205      	movs	r2, #5
 800bfb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	887a      	ldrh	r2, [r7, #2]
 800bfc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	887a      	ldrh	r2, [r7, #2]
 800bfce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	68ba      	ldr	r2, [r7, #8]
 800bfd6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	887a      	ldrh	r2, [r7, #2]
 800bfdc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	887a      	ldrh	r2, [r7, #2]
 800bfe4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2200      	movs	r2, #0
 800bfec:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2200      	movs	r2, #0
 800bff2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	685a      	ldr	r2, [r3, #4]
 800bffa:	4b82      	ldr	r3, [pc, #520]	; (800c204 <HAL_SPI_TransmitReceive+0x310>)
 800bffc:	4013      	ands	r3, r2
 800bffe:	8879      	ldrh	r1, [r7, #2]
 800c000:	68fa      	ldr	r2, [r7, #12]
 800c002:	6812      	ldr	r2, [r2, #0]
 800c004:	430b      	orrs	r3, r1
 800c006:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f042 0201 	orr.w	r2, r2, #1
 800c016:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	685b      	ldr	r3, [r3, #4]
 800c01c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c020:	d107      	bne.n	800c032 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c030:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	68db      	ldr	r3, [r3, #12]
 800c036:	2b0f      	cmp	r3, #15
 800c038:	d970      	bls.n	800c11c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c03a:	e068      	b.n	800c10e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	695b      	ldr	r3, [r3, #20]
 800c042:	f003 0302 	and.w	r3, r3, #2
 800c046:	2b02      	cmp	r3, #2
 800c048:	d11a      	bne.n	800c080 <HAL_SPI_TransmitReceive+0x18c>
 800c04a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d017      	beq.n	800c080 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	6812      	ldr	r2, [r2, #0]
 800c05a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c060:	1d1a      	adds	r2, r3, #4
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	3b01      	subs	r3, #1
 800c070:	b29a      	uxth	r2, r3
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c07e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	695a      	ldr	r2, [r3, #20]
 800c086:	f248 0308 	movw	r3, #32776	; 0x8008
 800c08a:	4013      	ands	r3, r2
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d01a      	beq.n	800c0c6 <HAL_SPI_TransmitReceive+0x1d2>
 800c090:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c092:	2b00      	cmp	r3, #0
 800c094:	d017      	beq.n	800c0c6 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681a      	ldr	r2, [r3, #0]
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c09e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c0a0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0a6:	1d1a      	adds	r2, r3, #4
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c0b2:	b29b      	uxth	r3, r3
 800c0b4:	3b01      	subs	r3, #1
 800c0b6:	b29a      	uxth	r2, r3
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c0c4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0c6:	f7f6 fc9b 	bl	8002a00 <HAL_GetTick>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	69fb      	ldr	r3, [r7, #28]
 800c0ce:	1ad3      	subs	r3, r2, r3
 800c0d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d803      	bhi.n	800c0de <HAL_SPI_TransmitReceive+0x1ea>
 800c0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0dc:	d102      	bne.n	800c0e4 <HAL_SPI_TransmitReceive+0x1f0>
 800c0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d114      	bne.n	800c10e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c0e4:	68f8      	ldr	r0, [r7, #12]
 800c0e6:	f000 f92d 	bl	800c344 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2201      	movs	r2, #1
 800c106:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c10a:	2303      	movs	r3, #3
 800c10c:	e115      	b.n	800c33a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c10e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c110:	2b00      	cmp	r3, #0
 800c112:	d193      	bne.n	800c03c <HAL_SPI_TransmitReceive+0x148>
 800c114:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c116:	2b00      	cmp	r3, #0
 800c118:	d190      	bne.n	800c03c <HAL_SPI_TransmitReceive+0x148>
 800c11a:	e0e7      	b.n	800c2ec <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	68db      	ldr	r3, [r3, #12]
 800c120:	2b07      	cmp	r3, #7
 800c122:	f240 80dd 	bls.w	800c2e0 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c126:	e066      	b.n	800c1f6 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	695b      	ldr	r3, [r3, #20]
 800c12e:	f003 0302 	and.w	r3, r3, #2
 800c132:	2b02      	cmp	r3, #2
 800c134:	d119      	bne.n	800c16a <HAL_SPI_TransmitReceive+0x276>
 800c136:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d016      	beq.n	800c16a <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c140:	881a      	ldrh	r2, [r3, #0]
 800c142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c144:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c14a:	1c9a      	adds	r2, r3, #2
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c156:	b29b      	uxth	r3, r3
 800c158:	3b01      	subs	r3, #1
 800c15a:	b29a      	uxth	r2, r3
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c168:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	695b      	ldr	r3, [r3, #20]
 800c170:	f003 0301 	and.w	r3, r3, #1
 800c174:	2b01      	cmp	r3, #1
 800c176:	d11a      	bne.n	800c1ae <HAL_SPI_TransmitReceive+0x2ba>
 800c178:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d017      	beq.n	800c1ae <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c182:	6a3a      	ldr	r2, [r7, #32]
 800c184:	8812      	ldrh	r2, [r2, #0]
 800c186:	b292      	uxth	r2, r2
 800c188:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c18e:	1c9a      	adds	r2, r3, #2
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	3b01      	subs	r3, #1
 800c19e:	b29a      	uxth	r2, r3
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c1ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1ae:	f7f6 fc27 	bl	8002a00 <HAL_GetTick>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	69fb      	ldr	r3, [r7, #28]
 800c1b6:	1ad3      	subs	r3, r2, r3
 800c1b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d803      	bhi.n	800c1c6 <HAL_SPI_TransmitReceive+0x2d2>
 800c1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1c4:	d102      	bne.n	800c1cc <HAL_SPI_TransmitReceive+0x2d8>
 800c1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d114      	bne.n	800c1f6 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c1cc:	68f8      	ldr	r0, [r7, #12]
 800c1ce:	f000 f8b9 	bl	800c344 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c1f2:	2303      	movs	r3, #3
 800c1f4:	e0a1      	b.n	800c33a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c1f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d195      	bne.n	800c128 <HAL_SPI_TransmitReceive+0x234>
 800c1fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d192      	bne.n	800c128 <HAL_SPI_TransmitReceive+0x234>
 800c202:	e073      	b.n	800c2ec <HAL_SPI_TransmitReceive+0x3f8>
 800c204:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	695b      	ldr	r3, [r3, #20]
 800c20e:	f003 0302 	and.w	r3, r3, #2
 800c212:	2b02      	cmp	r3, #2
 800c214:	d11b      	bne.n	800c24e <HAL_SPI_TransmitReceive+0x35a>
 800c216:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d018      	beq.n	800c24e <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	3320      	adds	r3, #32
 800c226:	7812      	ldrb	r2, [r2, #0]
 800c228:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c22e:	1c5a      	adds	r2, r3, #1
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	3b01      	subs	r3, #1
 800c23e:	b29a      	uxth	r2, r3
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c24c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	695b      	ldr	r3, [r3, #20]
 800c254:	f003 0301 	and.w	r3, r3, #1
 800c258:	2b01      	cmp	r3, #1
 800c25a:	d11d      	bne.n	800c298 <HAL_SPI_TransmitReceive+0x3a4>
 800c25c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d01a      	beq.n	800c298 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c26e:	7812      	ldrb	r2, [r2, #0]
 800c270:	b2d2      	uxtb	r2, r2
 800c272:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c278:	1c5a      	adds	r2, r3, #1
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c284:	b29b      	uxth	r3, r3
 800c286:	3b01      	subs	r3, #1
 800c288:	b29a      	uxth	r2, r3
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c296:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c298:	f7f6 fbb2 	bl	8002a00 <HAL_GetTick>
 800c29c:	4602      	mov	r2, r0
 800c29e:	69fb      	ldr	r3, [r7, #28]
 800c2a0:	1ad3      	subs	r3, r2, r3
 800c2a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d803      	bhi.n	800c2b0 <HAL_SPI_TransmitReceive+0x3bc>
 800c2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2ae:	d102      	bne.n	800c2b6 <HAL_SPI_TransmitReceive+0x3c2>
 800c2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d114      	bne.n	800c2e0 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c2b6:	68f8      	ldr	r0, [r7, #12]
 800c2b8:	f000 f844 	bl	800c344 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c2dc:	2303      	movs	r3, #3
 800c2de:	e02c      	b.n	800c33a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c2e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d190      	bne.n	800c208 <HAL_SPI_TransmitReceive+0x314>
 800c2e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d18d      	bne.n	800c208 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ee:	9300      	str	r3, [sp, #0]
 800c2f0:	69fb      	ldr	r3, [r7, #28]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	2108      	movs	r1, #8
 800c2f6:	68f8      	ldr	r0, [r7, #12]
 800c2f8:	f000 f8c4 	bl	800c484 <SPI_WaitOnFlagUntilTimeout>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d007      	beq.n	800c312 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c308:	f043 0220 	orr.w	r2, r3, #32
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c312:	68f8      	ldr	r0, [r7, #12]
 800c314:	f000 f816 	bl	800c344 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2200      	movs	r2, #0
 800c31c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2201      	movs	r2, #1
 800c324:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d001      	beq.n	800c336 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800c332:	2301      	movs	r3, #1
 800c334:	e001      	b.n	800c33a <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800c336:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3730      	adds	r7, #48	; 0x30
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop

0800c344 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c344:	b480      	push	{r7}
 800c346:	b085      	sub	sp, #20
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	695b      	ldr	r3, [r3, #20]
 800c352:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	699a      	ldr	r2, [r3, #24]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f042 0208 	orr.w	r2, r2, #8
 800c362:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	699a      	ldr	r2, [r3, #24]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f042 0210 	orr.w	r2, r2, #16
 800c372:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f022 0201 	bic.w	r2, r2, #1
 800c382:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	6919      	ldr	r1, [r3, #16]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681a      	ldr	r2, [r3, #0]
 800c38e:	4b3c      	ldr	r3, [pc, #240]	; (800c480 <SPI_CloseTransfer+0x13c>)
 800c390:	400b      	ands	r3, r1
 800c392:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	689a      	ldr	r2, [r3, #8]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c3a2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c3aa:	b2db      	uxtb	r3, r3
 800c3ac:	2b04      	cmp	r3, #4
 800c3ae:	d014      	beq.n	800c3da <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f003 0320 	and.w	r3, r3, #32
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d00f      	beq.n	800c3da <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	699a      	ldr	r2, [r3, #24]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f042 0220 	orr.w	r2, r2, #32
 800c3d8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	2b03      	cmp	r3, #3
 800c3e4:	d014      	beq.n	800c410 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d00f      	beq.n	800c410 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3f6:	f043 0204 	orr.w	r2, r3, #4
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	699a      	ldr	r2, [r3, #24]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c40e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c416:	2b00      	cmp	r3, #0
 800c418:	d00f      	beq.n	800c43a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c420:	f043 0201 	orr.w	r2, r3, #1
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	699a      	ldr	r2, [r3, #24]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c438:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c440:	2b00      	cmp	r3, #0
 800c442:	d00f      	beq.n	800c464 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c44a:	f043 0208 	orr.w	r2, r3, #8
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	699a      	ldr	r2, [r3, #24]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c462:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2200      	movs	r2, #0
 800c468:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2200      	movs	r2, #0
 800c470:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c474:	bf00      	nop
 800c476:	3714      	adds	r7, #20
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr
 800c480:	fffffc90 	.word	0xfffffc90

0800c484 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	60f8      	str	r0, [r7, #12]
 800c48c:	60b9      	str	r1, [r7, #8]
 800c48e:	603b      	str	r3, [r7, #0]
 800c490:	4613      	mov	r3, r2
 800c492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c494:	e010      	b.n	800c4b8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c496:	f7f6 fab3 	bl	8002a00 <HAL_GetTick>
 800c49a:	4602      	mov	r2, r0
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	1ad3      	subs	r3, r2, r3
 800c4a0:	69ba      	ldr	r2, [r7, #24]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d803      	bhi.n	800c4ae <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c4a6:	69bb      	ldr	r3, [r7, #24]
 800c4a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4ac:	d102      	bne.n	800c4b4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c4ae:	69bb      	ldr	r3, [r7, #24]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d101      	bne.n	800c4b8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c4b4:	2303      	movs	r3, #3
 800c4b6:	e00f      	b.n	800c4d8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	695a      	ldr	r2, [r3, #20]
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	4013      	ands	r3, r2
 800c4c2:	68ba      	ldr	r2, [r7, #8]
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	bf0c      	ite	eq
 800c4c8:	2301      	moveq	r3, #1
 800c4ca:	2300      	movne	r3, #0
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	79fb      	ldrb	r3, [r7, #7]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d0df      	beq.n	800c496 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c4d6:	2300      	movs	r3, #0
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3710      	adds	r7, #16
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b085      	sub	sp, #20
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ec:	095b      	lsrs	r3, r3, #5
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	68db      	ldr	r3, [r3, #12]
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	3307      	adds	r3, #7
 800c4fe:	08db      	lsrs	r3, r3, #3
 800c500:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	68fa      	ldr	r2, [r7, #12]
 800c506:	fb02 f303 	mul.w	r3, r2, r3
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3714      	adds	r7, #20
 800c50e:	46bd      	mov	sp, r7
 800c510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c514:	4770      	bx	lr
	...

0800c518 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b084      	sub	sp, #16
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c522:	2300      	movs	r3, #0
 800c524:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d109      	bne.n	800c540 <HAL_TIM_OC_Start_IT+0x28>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c532:	b2db      	uxtb	r3, r3
 800c534:	2b01      	cmp	r3, #1
 800c536:	bf14      	ite	ne
 800c538:	2301      	movne	r3, #1
 800c53a:	2300      	moveq	r3, #0
 800c53c:	b2db      	uxtb	r3, r3
 800c53e:	e03c      	b.n	800c5ba <HAL_TIM_OC_Start_IT+0xa2>
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	2b04      	cmp	r3, #4
 800c544:	d109      	bne.n	800c55a <HAL_TIM_OC_Start_IT+0x42>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c54c:	b2db      	uxtb	r3, r3
 800c54e:	2b01      	cmp	r3, #1
 800c550:	bf14      	ite	ne
 800c552:	2301      	movne	r3, #1
 800c554:	2300      	moveq	r3, #0
 800c556:	b2db      	uxtb	r3, r3
 800c558:	e02f      	b.n	800c5ba <HAL_TIM_OC_Start_IT+0xa2>
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	2b08      	cmp	r3, #8
 800c55e:	d109      	bne.n	800c574 <HAL_TIM_OC_Start_IT+0x5c>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c566:	b2db      	uxtb	r3, r3
 800c568:	2b01      	cmp	r3, #1
 800c56a:	bf14      	ite	ne
 800c56c:	2301      	movne	r3, #1
 800c56e:	2300      	moveq	r3, #0
 800c570:	b2db      	uxtb	r3, r3
 800c572:	e022      	b.n	800c5ba <HAL_TIM_OC_Start_IT+0xa2>
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	2b0c      	cmp	r3, #12
 800c578:	d109      	bne.n	800c58e <HAL_TIM_OC_Start_IT+0x76>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c580:	b2db      	uxtb	r3, r3
 800c582:	2b01      	cmp	r3, #1
 800c584:	bf14      	ite	ne
 800c586:	2301      	movne	r3, #1
 800c588:	2300      	moveq	r3, #0
 800c58a:	b2db      	uxtb	r3, r3
 800c58c:	e015      	b.n	800c5ba <HAL_TIM_OC_Start_IT+0xa2>
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	2b10      	cmp	r3, #16
 800c592:	d109      	bne.n	800c5a8 <HAL_TIM_OC_Start_IT+0x90>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c59a:	b2db      	uxtb	r3, r3
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	bf14      	ite	ne
 800c5a0:	2301      	movne	r3, #1
 800c5a2:	2300      	moveq	r3, #0
 800c5a4:	b2db      	uxtb	r3, r3
 800c5a6:	e008      	b.n	800c5ba <HAL_TIM_OC_Start_IT+0xa2>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	bf14      	ite	ne
 800c5b4:	2301      	movne	r3, #1
 800c5b6:	2300      	moveq	r3, #0
 800c5b8:	b2db      	uxtb	r3, r3
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d001      	beq.n	800c5c2 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e0ec      	b.n	800c79c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d104      	bne.n	800c5d2 <HAL_TIM_OC_Start_IT+0xba>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2202      	movs	r2, #2
 800c5cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c5d0:	e023      	b.n	800c61a <HAL_TIM_OC_Start_IT+0x102>
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	2b04      	cmp	r3, #4
 800c5d6:	d104      	bne.n	800c5e2 <HAL_TIM_OC_Start_IT+0xca>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2202      	movs	r2, #2
 800c5dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c5e0:	e01b      	b.n	800c61a <HAL_TIM_OC_Start_IT+0x102>
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	2b08      	cmp	r3, #8
 800c5e6:	d104      	bne.n	800c5f2 <HAL_TIM_OC_Start_IT+0xda>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2202      	movs	r2, #2
 800c5ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c5f0:	e013      	b.n	800c61a <HAL_TIM_OC_Start_IT+0x102>
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	2b0c      	cmp	r3, #12
 800c5f6:	d104      	bne.n	800c602 <HAL_TIM_OC_Start_IT+0xea>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2202      	movs	r2, #2
 800c5fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c600:	e00b      	b.n	800c61a <HAL_TIM_OC_Start_IT+0x102>
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	2b10      	cmp	r3, #16
 800c606:	d104      	bne.n	800c612 <HAL_TIM_OC_Start_IT+0xfa>
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2202      	movs	r2, #2
 800c60c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c610:	e003      	b.n	800c61a <HAL_TIM_OC_Start_IT+0x102>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2202      	movs	r2, #2
 800c616:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	2b0c      	cmp	r3, #12
 800c61e:	d841      	bhi.n	800c6a4 <HAL_TIM_OC_Start_IT+0x18c>
 800c620:	a201      	add	r2, pc, #4	; (adr r2, 800c628 <HAL_TIM_OC_Start_IT+0x110>)
 800c622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c626:	bf00      	nop
 800c628:	0800c65d 	.word	0x0800c65d
 800c62c:	0800c6a5 	.word	0x0800c6a5
 800c630:	0800c6a5 	.word	0x0800c6a5
 800c634:	0800c6a5 	.word	0x0800c6a5
 800c638:	0800c66f 	.word	0x0800c66f
 800c63c:	0800c6a5 	.word	0x0800c6a5
 800c640:	0800c6a5 	.word	0x0800c6a5
 800c644:	0800c6a5 	.word	0x0800c6a5
 800c648:	0800c681 	.word	0x0800c681
 800c64c:	0800c6a5 	.word	0x0800c6a5
 800c650:	0800c6a5 	.word	0x0800c6a5
 800c654:	0800c6a5 	.word	0x0800c6a5
 800c658:	0800c693 	.word	0x0800c693
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	68da      	ldr	r2, [r3, #12]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f042 0202 	orr.w	r2, r2, #2
 800c66a:	60da      	str	r2, [r3, #12]
      break;
 800c66c:	e01d      	b.n	800c6aa <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	68da      	ldr	r2, [r3, #12]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f042 0204 	orr.w	r2, r2, #4
 800c67c:	60da      	str	r2, [r3, #12]
      break;
 800c67e:	e014      	b.n	800c6aa <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	68da      	ldr	r2, [r3, #12]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f042 0208 	orr.w	r2, r2, #8
 800c68e:	60da      	str	r2, [r3, #12]
      break;
 800c690:	e00b      	b.n	800c6aa <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	68da      	ldr	r2, [r3, #12]
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f042 0210 	orr.w	r2, r2, #16
 800c6a0:	60da      	str	r2, [r3, #12]
      break;
 800c6a2:	e002      	b.n	800c6aa <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	73fb      	strb	r3, [r7, #15]
      break;
 800c6a8:	bf00      	nop
  }

  if (status == HAL_OK)
 800c6aa:	7bfb      	ldrb	r3, [r7, #15]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d174      	bne.n	800c79a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	6839      	ldr	r1, [r7, #0]
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f000 fea9 	bl	800d410 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	4a38      	ldr	r2, [pc, #224]	; (800c7a4 <HAL_TIM_OC_Start_IT+0x28c>)
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d013      	beq.n	800c6f0 <HAL_TIM_OC_Start_IT+0x1d8>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	4a36      	ldr	r2, [pc, #216]	; (800c7a8 <HAL_TIM_OC_Start_IT+0x290>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d00e      	beq.n	800c6f0 <HAL_TIM_OC_Start_IT+0x1d8>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	4a35      	ldr	r2, [pc, #212]	; (800c7ac <HAL_TIM_OC_Start_IT+0x294>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d009      	beq.n	800c6f0 <HAL_TIM_OC_Start_IT+0x1d8>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4a33      	ldr	r2, [pc, #204]	; (800c7b0 <HAL_TIM_OC_Start_IT+0x298>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d004      	beq.n	800c6f0 <HAL_TIM_OC_Start_IT+0x1d8>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a32      	ldr	r2, [pc, #200]	; (800c7b4 <HAL_TIM_OC_Start_IT+0x29c>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d101      	bne.n	800c6f4 <HAL_TIM_OC_Start_IT+0x1dc>
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	e000      	b.n	800c6f6 <HAL_TIM_OC_Start_IT+0x1de>
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d007      	beq.n	800c70a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c708:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4a25      	ldr	r2, [pc, #148]	; (800c7a4 <HAL_TIM_OC_Start_IT+0x28c>)
 800c710:	4293      	cmp	r3, r2
 800c712:	d022      	beq.n	800c75a <HAL_TIM_OC_Start_IT+0x242>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c71c:	d01d      	beq.n	800c75a <HAL_TIM_OC_Start_IT+0x242>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	4a25      	ldr	r2, [pc, #148]	; (800c7b8 <HAL_TIM_OC_Start_IT+0x2a0>)
 800c724:	4293      	cmp	r3, r2
 800c726:	d018      	beq.n	800c75a <HAL_TIM_OC_Start_IT+0x242>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4a23      	ldr	r2, [pc, #140]	; (800c7bc <HAL_TIM_OC_Start_IT+0x2a4>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d013      	beq.n	800c75a <HAL_TIM_OC_Start_IT+0x242>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4a22      	ldr	r2, [pc, #136]	; (800c7c0 <HAL_TIM_OC_Start_IT+0x2a8>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d00e      	beq.n	800c75a <HAL_TIM_OC_Start_IT+0x242>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a19      	ldr	r2, [pc, #100]	; (800c7a8 <HAL_TIM_OC_Start_IT+0x290>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d009      	beq.n	800c75a <HAL_TIM_OC_Start_IT+0x242>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	4a1e      	ldr	r2, [pc, #120]	; (800c7c4 <HAL_TIM_OC_Start_IT+0x2ac>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d004      	beq.n	800c75a <HAL_TIM_OC_Start_IT+0x242>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4a15      	ldr	r2, [pc, #84]	; (800c7ac <HAL_TIM_OC_Start_IT+0x294>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d115      	bne.n	800c786 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	689a      	ldr	r2, [r3, #8]
 800c760:	4b19      	ldr	r3, [pc, #100]	; (800c7c8 <HAL_TIM_OC_Start_IT+0x2b0>)
 800c762:	4013      	ands	r3, r2
 800c764:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	2b06      	cmp	r3, #6
 800c76a:	d015      	beq.n	800c798 <HAL_TIM_OC_Start_IT+0x280>
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c772:	d011      	beq.n	800c798 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	681a      	ldr	r2, [r3, #0]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f042 0201 	orr.w	r2, r2, #1
 800c782:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c784:	e008      	b.n	800c798 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f042 0201 	orr.w	r2, r2, #1
 800c794:	601a      	str	r2, [r3, #0]
 800c796:	e000      	b.n	800c79a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c798:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c79a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3710      	adds	r7, #16
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	40010000 	.word	0x40010000
 800c7a8:	40010400 	.word	0x40010400
 800c7ac:	40014000 	.word	0x40014000
 800c7b0:	40014400 	.word	0x40014400
 800c7b4:	40014800 	.word	0x40014800
 800c7b8:	40000400 	.word	0x40000400
 800c7bc:	40000800 	.word	0x40000800
 800c7c0:	40000c00 	.word	0x40000c00
 800c7c4:	40001800 	.word	0x40001800
 800c7c8:	00010007 	.word	0x00010007

0800c7cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d101      	bne.n	800c7de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	e049      	b.n	800c872 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7e4:	b2db      	uxtb	r3, r3
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d106      	bne.n	800c7f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f7f5 fdec 	bl	80023d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2202      	movs	r2, #2
 800c7fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	3304      	adds	r3, #4
 800c808:	4619      	mov	r1, r3
 800c80a:	4610      	mov	r0, r2
 800c80c:	f000 fa90 	bl	800cd30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2201      	movs	r2, #1
 800c814:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2201      	movs	r2, #1
 800c81c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2201      	movs	r2, #1
 800c824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2201      	movs	r2, #1
 800c82c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2201      	movs	r2, #1
 800c834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2201      	movs	r2, #1
 800c83c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2201      	movs	r2, #1
 800c844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2201      	movs	r2, #1
 800c84c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2201      	movs	r2, #1
 800c854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2201      	movs	r2, #1
 800c85c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2201      	movs	r2, #1
 800c864:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2201      	movs	r2, #1
 800c86c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c870:	2300      	movs	r3, #0
}
 800c872:	4618      	mov	r0, r3
 800c874:	3708      	adds	r7, #8
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}

0800c87a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b082      	sub	sp, #8
 800c87e:	af00      	add	r7, sp, #0
 800c880:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	691b      	ldr	r3, [r3, #16]
 800c888:	f003 0302 	and.w	r3, r3, #2
 800c88c:	2b02      	cmp	r3, #2
 800c88e:	d122      	bne.n	800c8d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	68db      	ldr	r3, [r3, #12]
 800c896:	f003 0302 	and.w	r3, r3, #2
 800c89a:	2b02      	cmp	r3, #2
 800c89c:	d11b      	bne.n	800c8d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f06f 0202 	mvn.w	r2, #2
 800c8a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	699b      	ldr	r3, [r3, #24]
 800c8b4:	f003 0303 	and.w	r3, r3, #3
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d003      	beq.n	800c8c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 fa19 	bl	800ccf4 <HAL_TIM_IC_CaptureCallback>
 800c8c2:	e005      	b.n	800c8d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f7f4 fa15 	bl	8000cf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f000 fa1c 	bl	800cd08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	691b      	ldr	r3, [r3, #16]
 800c8dc:	f003 0304 	and.w	r3, r3, #4
 800c8e0:	2b04      	cmp	r3, #4
 800c8e2:	d122      	bne.n	800c92a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	f003 0304 	and.w	r3, r3, #4
 800c8ee:	2b04      	cmp	r3, #4
 800c8f0:	d11b      	bne.n	800c92a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f06f 0204 	mvn.w	r2, #4
 800c8fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2202      	movs	r2, #2
 800c900:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	699b      	ldr	r3, [r3, #24]
 800c908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d003      	beq.n	800c918 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f000 f9ef 	bl	800ccf4 <HAL_TIM_IC_CaptureCallback>
 800c916:	e005      	b.n	800c924 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f7f4 f9eb 	bl	8000cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 f9f2 	bl	800cd08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2200      	movs	r2, #0
 800c928:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	691b      	ldr	r3, [r3, #16]
 800c930:	f003 0308 	and.w	r3, r3, #8
 800c934:	2b08      	cmp	r3, #8
 800c936:	d122      	bne.n	800c97e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	68db      	ldr	r3, [r3, #12]
 800c93e:	f003 0308 	and.w	r3, r3, #8
 800c942:	2b08      	cmp	r3, #8
 800c944:	d11b      	bne.n	800c97e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f06f 0208 	mvn.w	r2, #8
 800c94e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2204      	movs	r2, #4
 800c954:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	69db      	ldr	r3, [r3, #28]
 800c95c:	f003 0303 	and.w	r3, r3, #3
 800c960:	2b00      	cmp	r3, #0
 800c962:	d003      	beq.n	800c96c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 f9c5 	bl	800ccf4 <HAL_TIM_IC_CaptureCallback>
 800c96a:	e005      	b.n	800c978 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f7f4 f9c1 	bl	8000cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f000 f9c8 	bl	800cd08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2200      	movs	r2, #0
 800c97c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	691b      	ldr	r3, [r3, #16]
 800c984:	f003 0310 	and.w	r3, r3, #16
 800c988:	2b10      	cmp	r3, #16
 800c98a:	d122      	bne.n	800c9d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	68db      	ldr	r3, [r3, #12]
 800c992:	f003 0310 	and.w	r3, r3, #16
 800c996:	2b10      	cmp	r3, #16
 800c998:	d11b      	bne.n	800c9d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f06f 0210 	mvn.w	r2, #16
 800c9a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2208      	movs	r2, #8
 800c9a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	69db      	ldr	r3, [r3, #28]
 800c9b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d003      	beq.n	800c9c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 f99b 	bl	800ccf4 <HAL_TIM_IC_CaptureCallback>
 800c9be:	e005      	b.n	800c9cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f7f4 f997 	bl	8000cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 f99e 	bl	800cd08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	691b      	ldr	r3, [r3, #16]
 800c9d8:	f003 0301 	and.w	r3, r3, #1
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d10e      	bne.n	800c9fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	68db      	ldr	r3, [r3, #12]
 800c9e6:	f003 0301 	and.w	r3, r3, #1
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	d107      	bne.n	800c9fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f06f 0201 	mvn.w	r2, #1
 800c9f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f000 f971 	bl	800cce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	691b      	ldr	r3, [r3, #16]
 800ca04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca08:	2b80      	cmp	r3, #128	; 0x80
 800ca0a:	d10e      	bne.n	800ca2a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	68db      	ldr	r3, [r3, #12]
 800ca12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca16:	2b80      	cmp	r3, #128	; 0x80
 800ca18:	d107      	bne.n	800ca2a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ca22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f000 fe2f 	bl	800d688 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	691b      	ldr	r3, [r3, #16]
 800ca30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca38:	d10e      	bne.n	800ca58 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	68db      	ldr	r3, [r3, #12]
 800ca40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca44:	2b80      	cmp	r3, #128	; 0x80
 800ca46:	d107      	bne.n	800ca58 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ca50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f000 fe22 	bl	800d69c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	691b      	ldr	r3, [r3, #16]
 800ca5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca62:	2b40      	cmp	r3, #64	; 0x40
 800ca64:	d10e      	bne.n	800ca84 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	68db      	ldr	r3, [r3, #12]
 800ca6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca70:	2b40      	cmp	r3, #64	; 0x40
 800ca72:	d107      	bne.n	800ca84 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ca7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 f94c 	bl	800cd1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	691b      	ldr	r3, [r3, #16]
 800ca8a:	f003 0320 	and.w	r3, r3, #32
 800ca8e:	2b20      	cmp	r3, #32
 800ca90:	d10e      	bne.n	800cab0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	68db      	ldr	r3, [r3, #12]
 800ca98:	f003 0320 	and.w	r3, r3, #32
 800ca9c:	2b20      	cmp	r3, #32
 800ca9e:	d107      	bne.n	800cab0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f06f 0220 	mvn.w	r2, #32
 800caa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 fde2 	bl	800d674 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cab0:	bf00      	nop
 800cab2:	3708      	adds	r7, #8
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b086      	sub	sp, #24
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	60f8      	str	r0, [r7, #12]
 800cac0:	60b9      	str	r1, [r7, #8]
 800cac2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cac4:	2300      	movs	r3, #0
 800cac6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cace:	2b01      	cmp	r3, #1
 800cad0:	d101      	bne.n	800cad6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cad2:	2302      	movs	r3, #2
 800cad4:	e0ff      	b.n	800ccd6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2201      	movs	r2, #1
 800cada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2b14      	cmp	r3, #20
 800cae2:	f200 80f0 	bhi.w	800ccc6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cae6:	a201      	add	r2, pc, #4	; (adr r2, 800caec <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caec:	0800cb41 	.word	0x0800cb41
 800caf0:	0800ccc7 	.word	0x0800ccc7
 800caf4:	0800ccc7 	.word	0x0800ccc7
 800caf8:	0800ccc7 	.word	0x0800ccc7
 800cafc:	0800cb81 	.word	0x0800cb81
 800cb00:	0800ccc7 	.word	0x0800ccc7
 800cb04:	0800ccc7 	.word	0x0800ccc7
 800cb08:	0800ccc7 	.word	0x0800ccc7
 800cb0c:	0800cbc3 	.word	0x0800cbc3
 800cb10:	0800ccc7 	.word	0x0800ccc7
 800cb14:	0800ccc7 	.word	0x0800ccc7
 800cb18:	0800ccc7 	.word	0x0800ccc7
 800cb1c:	0800cc03 	.word	0x0800cc03
 800cb20:	0800ccc7 	.word	0x0800ccc7
 800cb24:	0800ccc7 	.word	0x0800ccc7
 800cb28:	0800ccc7 	.word	0x0800ccc7
 800cb2c:	0800cc45 	.word	0x0800cc45
 800cb30:	0800ccc7 	.word	0x0800ccc7
 800cb34:	0800ccc7 	.word	0x0800ccc7
 800cb38:	0800ccc7 	.word	0x0800ccc7
 800cb3c:	0800cc85 	.word	0x0800cc85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	68b9      	ldr	r1, [r7, #8]
 800cb46:	4618      	mov	r0, r3
 800cb48:	f000 f98c 	bl	800ce64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	699a      	ldr	r2, [r3, #24]
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f042 0208 	orr.w	r2, r2, #8
 800cb5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	699a      	ldr	r2, [r3, #24]
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f022 0204 	bic.w	r2, r2, #4
 800cb6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	6999      	ldr	r1, [r3, #24]
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	691a      	ldr	r2, [r3, #16]
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	430a      	orrs	r2, r1
 800cb7c:	619a      	str	r2, [r3, #24]
      break;
 800cb7e:	e0a5      	b.n	800cccc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	68b9      	ldr	r1, [r7, #8]
 800cb86:	4618      	mov	r0, r3
 800cb88:	f000 f9fc 	bl	800cf84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	699a      	ldr	r2, [r3, #24]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	699a      	ldr	r2, [r3, #24]
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cbaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	6999      	ldr	r1, [r3, #24]
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	691b      	ldr	r3, [r3, #16]
 800cbb6:	021a      	lsls	r2, r3, #8
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	430a      	orrs	r2, r1
 800cbbe:	619a      	str	r2, [r3, #24]
      break;
 800cbc0:	e084      	b.n	800cccc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	68b9      	ldr	r1, [r7, #8]
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f000 fa65 	bl	800d098 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	69da      	ldr	r2, [r3, #28]
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f042 0208 	orr.w	r2, r2, #8
 800cbdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	69da      	ldr	r2, [r3, #28]
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f022 0204 	bic.w	r2, r2, #4
 800cbec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	69d9      	ldr	r1, [r3, #28]
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	691a      	ldr	r2, [r3, #16]
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	430a      	orrs	r2, r1
 800cbfe:	61da      	str	r2, [r3, #28]
      break;
 800cc00:	e064      	b.n	800cccc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	68b9      	ldr	r1, [r7, #8]
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f000 facd 	bl	800d1a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	69da      	ldr	r2, [r3, #28]
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	69da      	ldr	r2, [r3, #28]
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	69d9      	ldr	r1, [r3, #28]
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	691b      	ldr	r3, [r3, #16]
 800cc38:	021a      	lsls	r2, r3, #8
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	430a      	orrs	r2, r1
 800cc40:	61da      	str	r2, [r3, #28]
      break;
 800cc42:	e043      	b.n	800cccc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	68b9      	ldr	r1, [r7, #8]
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f000 fb16 	bl	800d27c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f042 0208 	orr.w	r2, r2, #8
 800cc5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f022 0204 	bic.w	r2, r2, #4
 800cc6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	691a      	ldr	r2, [r3, #16]
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	430a      	orrs	r2, r1
 800cc80:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cc82:	e023      	b.n	800cccc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	68b9      	ldr	r1, [r7, #8]
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f000 fb5a 	bl	800d344 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ccae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	691b      	ldr	r3, [r3, #16]
 800ccba:	021a      	lsls	r2, r3, #8
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	430a      	orrs	r2, r1
 800ccc2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ccc4:	e002      	b.n	800cccc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	75fb      	strb	r3, [r7, #23]
      break;
 800ccca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ccd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3718      	adds	r7, #24
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop

0800cce0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b083      	sub	sp, #12
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cce8:	bf00      	nop
 800ccea:	370c      	adds	r7, #12
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr

0800ccf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b083      	sub	sp, #12
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ccfc:	bf00      	nop
 800ccfe:	370c      	adds	r7, #12
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr

0800cd08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b083      	sub	sp, #12
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cd10:	bf00      	nop
 800cd12:	370c      	adds	r7, #12
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr

0800cd1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b083      	sub	sp, #12
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cd24:	bf00      	nop
 800cd26:	370c      	adds	r7, #12
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr

0800cd30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b085      	sub	sp, #20
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	4a40      	ldr	r2, [pc, #256]	; (800ce44 <TIM_Base_SetConfig+0x114>)
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d013      	beq.n	800cd70 <TIM_Base_SetConfig+0x40>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd4e:	d00f      	beq.n	800cd70 <TIM_Base_SetConfig+0x40>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	4a3d      	ldr	r2, [pc, #244]	; (800ce48 <TIM_Base_SetConfig+0x118>)
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d00b      	beq.n	800cd70 <TIM_Base_SetConfig+0x40>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	4a3c      	ldr	r2, [pc, #240]	; (800ce4c <TIM_Base_SetConfig+0x11c>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d007      	beq.n	800cd70 <TIM_Base_SetConfig+0x40>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	4a3b      	ldr	r2, [pc, #236]	; (800ce50 <TIM_Base_SetConfig+0x120>)
 800cd64:	4293      	cmp	r3, r2
 800cd66:	d003      	beq.n	800cd70 <TIM_Base_SetConfig+0x40>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	4a3a      	ldr	r2, [pc, #232]	; (800ce54 <TIM_Base_SetConfig+0x124>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d108      	bne.n	800cd82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	68fa      	ldr	r2, [r7, #12]
 800cd7e:	4313      	orrs	r3, r2
 800cd80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	4a2f      	ldr	r2, [pc, #188]	; (800ce44 <TIM_Base_SetConfig+0x114>)
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d01f      	beq.n	800cdca <TIM_Base_SetConfig+0x9a>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd90:	d01b      	beq.n	800cdca <TIM_Base_SetConfig+0x9a>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	4a2c      	ldr	r2, [pc, #176]	; (800ce48 <TIM_Base_SetConfig+0x118>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d017      	beq.n	800cdca <TIM_Base_SetConfig+0x9a>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	4a2b      	ldr	r2, [pc, #172]	; (800ce4c <TIM_Base_SetConfig+0x11c>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d013      	beq.n	800cdca <TIM_Base_SetConfig+0x9a>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	4a2a      	ldr	r2, [pc, #168]	; (800ce50 <TIM_Base_SetConfig+0x120>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d00f      	beq.n	800cdca <TIM_Base_SetConfig+0x9a>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	4a29      	ldr	r2, [pc, #164]	; (800ce54 <TIM_Base_SetConfig+0x124>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d00b      	beq.n	800cdca <TIM_Base_SetConfig+0x9a>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	4a28      	ldr	r2, [pc, #160]	; (800ce58 <TIM_Base_SetConfig+0x128>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d007      	beq.n	800cdca <TIM_Base_SetConfig+0x9a>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	4a27      	ldr	r2, [pc, #156]	; (800ce5c <TIM_Base_SetConfig+0x12c>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d003      	beq.n	800cdca <TIM_Base_SetConfig+0x9a>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	4a26      	ldr	r2, [pc, #152]	; (800ce60 <TIM_Base_SetConfig+0x130>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d108      	bne.n	800cddc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cdd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	68db      	ldr	r3, [r3, #12]
 800cdd6:	68fa      	ldr	r2, [r7, #12]
 800cdd8:	4313      	orrs	r3, r2
 800cdda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	695b      	ldr	r3, [r3, #20]
 800cde6:	4313      	orrs	r3, r2
 800cde8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	68fa      	ldr	r2, [r7, #12]
 800cdee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	689a      	ldr	r2, [r3, #8]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	681a      	ldr	r2, [r3, #0]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	4a10      	ldr	r2, [pc, #64]	; (800ce44 <TIM_Base_SetConfig+0x114>)
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d00f      	beq.n	800ce28 <TIM_Base_SetConfig+0xf8>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	4a12      	ldr	r2, [pc, #72]	; (800ce54 <TIM_Base_SetConfig+0x124>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d00b      	beq.n	800ce28 <TIM_Base_SetConfig+0xf8>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	4a11      	ldr	r2, [pc, #68]	; (800ce58 <TIM_Base_SetConfig+0x128>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d007      	beq.n	800ce28 <TIM_Base_SetConfig+0xf8>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	4a10      	ldr	r2, [pc, #64]	; (800ce5c <TIM_Base_SetConfig+0x12c>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d003      	beq.n	800ce28 <TIM_Base_SetConfig+0xf8>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	4a0f      	ldr	r2, [pc, #60]	; (800ce60 <TIM_Base_SetConfig+0x130>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d103      	bne.n	800ce30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	691a      	ldr	r2, [r3, #16]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2201      	movs	r2, #1
 800ce34:	615a      	str	r2, [r3, #20]
}
 800ce36:	bf00      	nop
 800ce38:	3714      	adds	r7, #20
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr
 800ce42:	bf00      	nop
 800ce44:	40010000 	.word	0x40010000
 800ce48:	40000400 	.word	0x40000400
 800ce4c:	40000800 	.word	0x40000800
 800ce50:	40000c00 	.word	0x40000c00
 800ce54:	40010400 	.word	0x40010400
 800ce58:	40014000 	.word	0x40014000
 800ce5c:	40014400 	.word	0x40014400
 800ce60:	40014800 	.word	0x40014800

0800ce64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b087      	sub	sp, #28
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6a1b      	ldr	r3, [r3, #32]
 800ce72:	f023 0201 	bic.w	r2, r3, #1
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6a1b      	ldr	r3, [r3, #32]
 800ce7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	699b      	ldr	r3, [r3, #24]
 800ce8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ce8c:	68fa      	ldr	r2, [r7, #12]
 800ce8e:	4b37      	ldr	r3, [pc, #220]	; (800cf6c <TIM_OC1_SetConfig+0x108>)
 800ce90:	4013      	ands	r3, r2
 800ce92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f023 0303 	bic.w	r3, r3, #3
 800ce9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	68fa      	ldr	r2, [r7, #12]
 800cea2:	4313      	orrs	r3, r2
 800cea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	f023 0302 	bic.w	r3, r3, #2
 800ceac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	689b      	ldr	r3, [r3, #8]
 800ceb2:	697a      	ldr	r2, [r7, #20]
 800ceb4:	4313      	orrs	r3, r2
 800ceb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	4a2d      	ldr	r2, [pc, #180]	; (800cf70 <TIM_OC1_SetConfig+0x10c>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d00f      	beq.n	800cee0 <TIM_OC1_SetConfig+0x7c>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	4a2c      	ldr	r2, [pc, #176]	; (800cf74 <TIM_OC1_SetConfig+0x110>)
 800cec4:	4293      	cmp	r3, r2
 800cec6:	d00b      	beq.n	800cee0 <TIM_OC1_SetConfig+0x7c>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	4a2b      	ldr	r2, [pc, #172]	; (800cf78 <TIM_OC1_SetConfig+0x114>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d007      	beq.n	800cee0 <TIM_OC1_SetConfig+0x7c>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	4a2a      	ldr	r2, [pc, #168]	; (800cf7c <TIM_OC1_SetConfig+0x118>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d003      	beq.n	800cee0 <TIM_OC1_SetConfig+0x7c>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	4a29      	ldr	r2, [pc, #164]	; (800cf80 <TIM_OC1_SetConfig+0x11c>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d10c      	bne.n	800cefa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	f023 0308 	bic.w	r3, r3, #8
 800cee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	68db      	ldr	r3, [r3, #12]
 800ceec:	697a      	ldr	r2, [r7, #20]
 800ceee:	4313      	orrs	r3, r2
 800cef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	f023 0304 	bic.w	r3, r3, #4
 800cef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	4a1c      	ldr	r2, [pc, #112]	; (800cf70 <TIM_OC1_SetConfig+0x10c>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d00f      	beq.n	800cf22 <TIM_OC1_SetConfig+0xbe>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	4a1b      	ldr	r2, [pc, #108]	; (800cf74 <TIM_OC1_SetConfig+0x110>)
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d00b      	beq.n	800cf22 <TIM_OC1_SetConfig+0xbe>
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	4a1a      	ldr	r2, [pc, #104]	; (800cf78 <TIM_OC1_SetConfig+0x114>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d007      	beq.n	800cf22 <TIM_OC1_SetConfig+0xbe>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	4a19      	ldr	r2, [pc, #100]	; (800cf7c <TIM_OC1_SetConfig+0x118>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d003      	beq.n	800cf22 <TIM_OC1_SetConfig+0xbe>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	4a18      	ldr	r2, [pc, #96]	; (800cf80 <TIM_OC1_SetConfig+0x11c>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d111      	bne.n	800cf46 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cf30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	695b      	ldr	r3, [r3, #20]
 800cf36:	693a      	ldr	r2, [r7, #16]
 800cf38:	4313      	orrs	r3, r2
 800cf3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	699b      	ldr	r3, [r3, #24]
 800cf40:	693a      	ldr	r2, [r7, #16]
 800cf42:	4313      	orrs	r3, r2
 800cf44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	693a      	ldr	r2, [r7, #16]
 800cf4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	68fa      	ldr	r2, [r7, #12]
 800cf50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	685a      	ldr	r2, [r3, #4]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	697a      	ldr	r2, [r7, #20]
 800cf5e:	621a      	str	r2, [r3, #32]
}
 800cf60:	bf00      	nop
 800cf62:	371c      	adds	r7, #28
 800cf64:	46bd      	mov	sp, r7
 800cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6a:	4770      	bx	lr
 800cf6c:	fffeff8f 	.word	0xfffeff8f
 800cf70:	40010000 	.word	0x40010000
 800cf74:	40010400 	.word	0x40010400
 800cf78:	40014000 	.word	0x40014000
 800cf7c:	40014400 	.word	0x40014400
 800cf80:	40014800 	.word	0x40014800

0800cf84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b087      	sub	sp, #28
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
 800cf8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6a1b      	ldr	r3, [r3, #32]
 800cf92:	f023 0210 	bic.w	r2, r3, #16
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6a1b      	ldr	r3, [r3, #32]
 800cf9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	685b      	ldr	r3, [r3, #4]
 800cfa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	699b      	ldr	r3, [r3, #24]
 800cfaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	4b34      	ldr	r3, [pc, #208]	; (800d080 <TIM_OC2_SetConfig+0xfc>)
 800cfb0:	4013      	ands	r3, r2
 800cfb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cfba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	021b      	lsls	r3, r3, #8
 800cfc2:	68fa      	ldr	r2, [r7, #12]
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	f023 0320 	bic.w	r3, r3, #32
 800cfce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	689b      	ldr	r3, [r3, #8]
 800cfd4:	011b      	lsls	r3, r3, #4
 800cfd6:	697a      	ldr	r2, [r7, #20]
 800cfd8:	4313      	orrs	r3, r2
 800cfda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	4a29      	ldr	r2, [pc, #164]	; (800d084 <TIM_OC2_SetConfig+0x100>)
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d003      	beq.n	800cfec <TIM_OC2_SetConfig+0x68>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	4a28      	ldr	r2, [pc, #160]	; (800d088 <TIM_OC2_SetConfig+0x104>)
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d10d      	bne.n	800d008 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	011b      	lsls	r3, r3, #4
 800cffa:	697a      	ldr	r2, [r7, #20]
 800cffc:	4313      	orrs	r3, r2
 800cffe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d006:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	4a1e      	ldr	r2, [pc, #120]	; (800d084 <TIM_OC2_SetConfig+0x100>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d00f      	beq.n	800d030 <TIM_OC2_SetConfig+0xac>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	4a1d      	ldr	r2, [pc, #116]	; (800d088 <TIM_OC2_SetConfig+0x104>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d00b      	beq.n	800d030 <TIM_OC2_SetConfig+0xac>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	4a1c      	ldr	r2, [pc, #112]	; (800d08c <TIM_OC2_SetConfig+0x108>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d007      	beq.n	800d030 <TIM_OC2_SetConfig+0xac>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	4a1b      	ldr	r2, [pc, #108]	; (800d090 <TIM_OC2_SetConfig+0x10c>)
 800d024:	4293      	cmp	r3, r2
 800d026:	d003      	beq.n	800d030 <TIM_OC2_SetConfig+0xac>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	4a1a      	ldr	r2, [pc, #104]	; (800d094 <TIM_OC2_SetConfig+0x110>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d113      	bne.n	800d058 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d036:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d038:	693b      	ldr	r3, [r7, #16]
 800d03a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d03e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	695b      	ldr	r3, [r3, #20]
 800d044:	009b      	lsls	r3, r3, #2
 800d046:	693a      	ldr	r2, [r7, #16]
 800d048:	4313      	orrs	r3, r2
 800d04a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	699b      	ldr	r3, [r3, #24]
 800d050:	009b      	lsls	r3, r3, #2
 800d052:	693a      	ldr	r2, [r7, #16]
 800d054:	4313      	orrs	r3, r2
 800d056:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	693a      	ldr	r2, [r7, #16]
 800d05c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	68fa      	ldr	r2, [r7, #12]
 800d062:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	685a      	ldr	r2, [r3, #4]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	697a      	ldr	r2, [r7, #20]
 800d070:	621a      	str	r2, [r3, #32]
}
 800d072:	bf00      	nop
 800d074:	371c      	adds	r7, #28
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop
 800d080:	feff8fff 	.word	0xfeff8fff
 800d084:	40010000 	.word	0x40010000
 800d088:	40010400 	.word	0x40010400
 800d08c:	40014000 	.word	0x40014000
 800d090:	40014400 	.word	0x40014400
 800d094:	40014800 	.word	0x40014800

0800d098 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d098:	b480      	push	{r7}
 800d09a:	b087      	sub	sp, #28
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6a1b      	ldr	r3, [r3, #32]
 800d0a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6a1b      	ldr	r3, [r3, #32]
 800d0b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	69db      	ldr	r3, [r3, #28]
 800d0be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d0c0:	68fa      	ldr	r2, [r7, #12]
 800d0c2:	4b33      	ldr	r3, [pc, #204]	; (800d190 <TIM_OC3_SetConfig+0xf8>)
 800d0c4:	4013      	ands	r3, r2
 800d0c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f023 0303 	bic.w	r3, r3, #3
 800d0ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	68fa      	ldr	r2, [r7, #12]
 800d0d6:	4313      	orrs	r3, r2
 800d0d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d0e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	689b      	ldr	r3, [r3, #8]
 800d0e6:	021b      	lsls	r3, r3, #8
 800d0e8:	697a      	ldr	r2, [r7, #20]
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	4a28      	ldr	r2, [pc, #160]	; (800d194 <TIM_OC3_SetConfig+0xfc>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d003      	beq.n	800d0fe <TIM_OC3_SetConfig+0x66>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	4a27      	ldr	r2, [pc, #156]	; (800d198 <TIM_OC3_SetConfig+0x100>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d10d      	bne.n	800d11a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d104:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	021b      	lsls	r3, r3, #8
 800d10c:	697a      	ldr	r2, [r7, #20]
 800d10e:	4313      	orrs	r3, r2
 800d110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	4a1d      	ldr	r2, [pc, #116]	; (800d194 <TIM_OC3_SetConfig+0xfc>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d00f      	beq.n	800d142 <TIM_OC3_SetConfig+0xaa>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	4a1c      	ldr	r2, [pc, #112]	; (800d198 <TIM_OC3_SetConfig+0x100>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d00b      	beq.n	800d142 <TIM_OC3_SetConfig+0xaa>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	4a1b      	ldr	r2, [pc, #108]	; (800d19c <TIM_OC3_SetConfig+0x104>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d007      	beq.n	800d142 <TIM_OC3_SetConfig+0xaa>
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	4a1a      	ldr	r2, [pc, #104]	; (800d1a0 <TIM_OC3_SetConfig+0x108>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d003      	beq.n	800d142 <TIM_OC3_SetConfig+0xaa>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	4a19      	ldr	r2, [pc, #100]	; (800d1a4 <TIM_OC3_SetConfig+0x10c>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d113      	bne.n	800d16a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d14a:	693b      	ldr	r3, [r7, #16]
 800d14c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	695b      	ldr	r3, [r3, #20]
 800d156:	011b      	lsls	r3, r3, #4
 800d158:	693a      	ldr	r2, [r7, #16]
 800d15a:	4313      	orrs	r3, r2
 800d15c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	699b      	ldr	r3, [r3, #24]
 800d162:	011b      	lsls	r3, r3, #4
 800d164:	693a      	ldr	r2, [r7, #16]
 800d166:	4313      	orrs	r3, r2
 800d168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	693a      	ldr	r2, [r7, #16]
 800d16e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	68fa      	ldr	r2, [r7, #12]
 800d174:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	685a      	ldr	r2, [r3, #4]
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	697a      	ldr	r2, [r7, #20]
 800d182:	621a      	str	r2, [r3, #32]
}
 800d184:	bf00      	nop
 800d186:	371c      	adds	r7, #28
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr
 800d190:	fffeff8f 	.word	0xfffeff8f
 800d194:	40010000 	.word	0x40010000
 800d198:	40010400 	.word	0x40010400
 800d19c:	40014000 	.word	0x40014000
 800d1a0:	40014400 	.word	0x40014400
 800d1a4:	40014800 	.word	0x40014800

0800d1a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b087      	sub	sp, #28
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6a1b      	ldr	r3, [r3, #32]
 800d1b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6a1b      	ldr	r3, [r3, #32]
 800d1c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	685b      	ldr	r3, [r3, #4]
 800d1c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	69db      	ldr	r3, [r3, #28]
 800d1ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d1d0:	68fa      	ldr	r2, [r7, #12]
 800d1d2:	4b24      	ldr	r3, [pc, #144]	; (800d264 <TIM_OC4_SetConfig+0xbc>)
 800d1d4:	4013      	ands	r3, r2
 800d1d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d1de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	021b      	lsls	r3, r3, #8
 800d1e6:	68fa      	ldr	r2, [r7, #12]
 800d1e8:	4313      	orrs	r3, r2
 800d1ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d1f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	689b      	ldr	r3, [r3, #8]
 800d1f8:	031b      	lsls	r3, r3, #12
 800d1fa:	693a      	ldr	r2, [r7, #16]
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	4a19      	ldr	r2, [pc, #100]	; (800d268 <TIM_OC4_SetConfig+0xc0>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d00f      	beq.n	800d228 <TIM_OC4_SetConfig+0x80>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	4a18      	ldr	r2, [pc, #96]	; (800d26c <TIM_OC4_SetConfig+0xc4>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d00b      	beq.n	800d228 <TIM_OC4_SetConfig+0x80>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	4a17      	ldr	r2, [pc, #92]	; (800d270 <TIM_OC4_SetConfig+0xc8>)
 800d214:	4293      	cmp	r3, r2
 800d216:	d007      	beq.n	800d228 <TIM_OC4_SetConfig+0x80>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	4a16      	ldr	r2, [pc, #88]	; (800d274 <TIM_OC4_SetConfig+0xcc>)
 800d21c:	4293      	cmp	r3, r2
 800d21e:	d003      	beq.n	800d228 <TIM_OC4_SetConfig+0x80>
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	4a15      	ldr	r2, [pc, #84]	; (800d278 <TIM_OC4_SetConfig+0xd0>)
 800d224:	4293      	cmp	r3, r2
 800d226:	d109      	bne.n	800d23c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d22e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	695b      	ldr	r3, [r3, #20]
 800d234:	019b      	lsls	r3, r3, #6
 800d236:	697a      	ldr	r2, [r7, #20]
 800d238:	4313      	orrs	r3, r2
 800d23a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	697a      	ldr	r2, [r7, #20]
 800d240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	68fa      	ldr	r2, [r7, #12]
 800d246:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	685a      	ldr	r2, [r3, #4]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	693a      	ldr	r2, [r7, #16]
 800d254:	621a      	str	r2, [r3, #32]
}
 800d256:	bf00      	nop
 800d258:	371c      	adds	r7, #28
 800d25a:	46bd      	mov	sp, r7
 800d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d260:	4770      	bx	lr
 800d262:	bf00      	nop
 800d264:	feff8fff 	.word	0xfeff8fff
 800d268:	40010000 	.word	0x40010000
 800d26c:	40010400 	.word	0x40010400
 800d270:	40014000 	.word	0x40014000
 800d274:	40014400 	.word	0x40014400
 800d278:	40014800 	.word	0x40014800

0800d27c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d27c:	b480      	push	{r7}
 800d27e:	b087      	sub	sp, #28
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6a1b      	ldr	r3, [r3, #32]
 800d28a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6a1b      	ldr	r3, [r3, #32]
 800d296:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	685b      	ldr	r3, [r3, #4]
 800d29c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d2a4:	68fa      	ldr	r2, [r7, #12]
 800d2a6:	4b21      	ldr	r3, [pc, #132]	; (800d32c <TIM_OC5_SetConfig+0xb0>)
 800d2a8:	4013      	ands	r3, r2
 800d2aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	68fa      	ldr	r2, [r7, #12]
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d2bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	689b      	ldr	r3, [r3, #8]
 800d2c2:	041b      	lsls	r3, r3, #16
 800d2c4:	693a      	ldr	r2, [r7, #16]
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	4a18      	ldr	r2, [pc, #96]	; (800d330 <TIM_OC5_SetConfig+0xb4>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d00f      	beq.n	800d2f2 <TIM_OC5_SetConfig+0x76>
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	4a17      	ldr	r2, [pc, #92]	; (800d334 <TIM_OC5_SetConfig+0xb8>)
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d00b      	beq.n	800d2f2 <TIM_OC5_SetConfig+0x76>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	4a16      	ldr	r2, [pc, #88]	; (800d338 <TIM_OC5_SetConfig+0xbc>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d007      	beq.n	800d2f2 <TIM_OC5_SetConfig+0x76>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	4a15      	ldr	r2, [pc, #84]	; (800d33c <TIM_OC5_SetConfig+0xc0>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d003      	beq.n	800d2f2 <TIM_OC5_SetConfig+0x76>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	4a14      	ldr	r2, [pc, #80]	; (800d340 <TIM_OC5_SetConfig+0xc4>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d109      	bne.n	800d306 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d2f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	695b      	ldr	r3, [r3, #20]
 800d2fe:	021b      	lsls	r3, r3, #8
 800d300:	697a      	ldr	r2, [r7, #20]
 800d302:	4313      	orrs	r3, r2
 800d304:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	697a      	ldr	r2, [r7, #20]
 800d30a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	68fa      	ldr	r2, [r7, #12]
 800d310:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	685a      	ldr	r2, [r3, #4]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	693a      	ldr	r2, [r7, #16]
 800d31e:	621a      	str	r2, [r3, #32]
}
 800d320:	bf00      	nop
 800d322:	371c      	adds	r7, #28
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr
 800d32c:	fffeff8f 	.word	0xfffeff8f
 800d330:	40010000 	.word	0x40010000
 800d334:	40010400 	.word	0x40010400
 800d338:	40014000 	.word	0x40014000
 800d33c:	40014400 	.word	0x40014400
 800d340:	40014800 	.word	0x40014800

0800d344 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d344:	b480      	push	{r7}
 800d346:	b087      	sub	sp, #28
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6a1b      	ldr	r3, [r3, #32]
 800d352:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6a1b      	ldr	r3, [r3, #32]
 800d35e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d36a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d36c:	68fa      	ldr	r2, [r7, #12]
 800d36e:	4b22      	ldr	r3, [pc, #136]	; (800d3f8 <TIM_OC6_SetConfig+0xb4>)
 800d370:	4013      	ands	r3, r2
 800d372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	021b      	lsls	r3, r3, #8
 800d37a:	68fa      	ldr	r2, [r7, #12]
 800d37c:	4313      	orrs	r3, r2
 800d37e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d386:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	689b      	ldr	r3, [r3, #8]
 800d38c:	051b      	lsls	r3, r3, #20
 800d38e:	693a      	ldr	r2, [r7, #16]
 800d390:	4313      	orrs	r3, r2
 800d392:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	4a19      	ldr	r2, [pc, #100]	; (800d3fc <TIM_OC6_SetConfig+0xb8>)
 800d398:	4293      	cmp	r3, r2
 800d39a:	d00f      	beq.n	800d3bc <TIM_OC6_SetConfig+0x78>
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	4a18      	ldr	r2, [pc, #96]	; (800d400 <TIM_OC6_SetConfig+0xbc>)
 800d3a0:	4293      	cmp	r3, r2
 800d3a2:	d00b      	beq.n	800d3bc <TIM_OC6_SetConfig+0x78>
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	4a17      	ldr	r2, [pc, #92]	; (800d404 <TIM_OC6_SetConfig+0xc0>)
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	d007      	beq.n	800d3bc <TIM_OC6_SetConfig+0x78>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	4a16      	ldr	r2, [pc, #88]	; (800d408 <TIM_OC6_SetConfig+0xc4>)
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	d003      	beq.n	800d3bc <TIM_OC6_SetConfig+0x78>
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	4a15      	ldr	r2, [pc, #84]	; (800d40c <TIM_OC6_SetConfig+0xc8>)
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d109      	bne.n	800d3d0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d3c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	695b      	ldr	r3, [r3, #20]
 800d3c8:	029b      	lsls	r3, r3, #10
 800d3ca:	697a      	ldr	r2, [r7, #20]
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	697a      	ldr	r2, [r7, #20]
 800d3d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	68fa      	ldr	r2, [r7, #12]
 800d3da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	685a      	ldr	r2, [r3, #4]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	693a      	ldr	r2, [r7, #16]
 800d3e8:	621a      	str	r2, [r3, #32]
}
 800d3ea:	bf00      	nop
 800d3ec:	371c      	adds	r7, #28
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f4:	4770      	bx	lr
 800d3f6:	bf00      	nop
 800d3f8:	feff8fff 	.word	0xfeff8fff
 800d3fc:	40010000 	.word	0x40010000
 800d400:	40010400 	.word	0x40010400
 800d404:	40014000 	.word	0x40014000
 800d408:	40014400 	.word	0x40014400
 800d40c:	40014800 	.word	0x40014800

0800d410 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d410:	b480      	push	{r7}
 800d412:	b087      	sub	sp, #28
 800d414:	af00      	add	r7, sp, #0
 800d416:	60f8      	str	r0, [r7, #12]
 800d418:	60b9      	str	r1, [r7, #8]
 800d41a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	f003 031f 	and.w	r3, r3, #31
 800d422:	2201      	movs	r2, #1
 800d424:	fa02 f303 	lsl.w	r3, r2, r3
 800d428:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	6a1a      	ldr	r2, [r3, #32]
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	43db      	mvns	r3, r3
 800d432:	401a      	ands	r2, r3
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	6a1a      	ldr	r2, [r3, #32]
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	f003 031f 	and.w	r3, r3, #31
 800d442:	6879      	ldr	r1, [r7, #4]
 800d444:	fa01 f303 	lsl.w	r3, r1, r3
 800d448:	431a      	orrs	r2, r3
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	621a      	str	r2, [r3, #32]
}
 800d44e:	bf00      	nop
 800d450:	371c      	adds	r7, #28
 800d452:	46bd      	mov	sp, r7
 800d454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d458:	4770      	bx	lr
	...

0800d45c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b085      	sub	sp, #20
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d101      	bne.n	800d474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d470:	2302      	movs	r3, #2
 800d472:	e06d      	b.n	800d550 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2201      	movs	r2, #1
 800d478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2202      	movs	r2, #2
 800d480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	685b      	ldr	r3, [r3, #4]
 800d48a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	689b      	ldr	r3, [r3, #8]
 800d492:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4a30      	ldr	r2, [pc, #192]	; (800d55c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d004      	beq.n	800d4a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	4a2f      	ldr	r2, [pc, #188]	; (800d560 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d108      	bne.n	800d4ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d4ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	68fa      	ldr	r2, [r7, #12]
 800d4b6:	4313      	orrs	r3, r2
 800d4b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	68fa      	ldr	r2, [r7, #12]
 800d4c8:	4313      	orrs	r3, r2
 800d4ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	68fa      	ldr	r2, [r7, #12]
 800d4d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	4a20      	ldr	r2, [pc, #128]	; (800d55c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d4da:	4293      	cmp	r3, r2
 800d4dc:	d022      	beq.n	800d524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4e6:	d01d      	beq.n	800d524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	4a1d      	ldr	r2, [pc, #116]	; (800d564 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d018      	beq.n	800d524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	4a1c      	ldr	r2, [pc, #112]	; (800d568 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d013      	beq.n	800d524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	4a1a      	ldr	r2, [pc, #104]	; (800d56c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d502:	4293      	cmp	r3, r2
 800d504:	d00e      	beq.n	800d524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	4a15      	ldr	r2, [pc, #84]	; (800d560 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d50c:	4293      	cmp	r3, r2
 800d50e:	d009      	beq.n	800d524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	4a16      	ldr	r2, [pc, #88]	; (800d570 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d516:	4293      	cmp	r3, r2
 800d518:	d004      	beq.n	800d524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	4a15      	ldr	r2, [pc, #84]	; (800d574 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d520:	4293      	cmp	r3, r2
 800d522:	d10c      	bne.n	800d53e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d52a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	689b      	ldr	r3, [r3, #8]
 800d530:	68ba      	ldr	r2, [r7, #8]
 800d532:	4313      	orrs	r3, r2
 800d534:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	68ba      	ldr	r2, [r7, #8]
 800d53c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2201      	movs	r2, #1
 800d542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2200      	movs	r2, #0
 800d54a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d54e:	2300      	movs	r3, #0
}
 800d550:	4618      	mov	r0, r3
 800d552:	3714      	adds	r7, #20
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr
 800d55c:	40010000 	.word	0x40010000
 800d560:	40010400 	.word	0x40010400
 800d564:	40000400 	.word	0x40000400
 800d568:	40000800 	.word	0x40000800
 800d56c:	40000c00 	.word	0x40000c00
 800d570:	40001800 	.word	0x40001800
 800d574:	40014000 	.word	0x40014000

0800d578 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d578:	b480      	push	{r7}
 800d57a:	b085      	sub	sp, #20
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d582:	2300      	movs	r3, #0
 800d584:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	d101      	bne.n	800d594 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d590:	2302      	movs	r3, #2
 800d592:	e065      	b.n	800d660 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2201      	movs	r2, #1
 800d598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	68db      	ldr	r3, [r3, #12]
 800d5a6:	4313      	orrs	r3, r2
 800d5a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	689b      	ldr	r3, [r3, #8]
 800d5b4:	4313      	orrs	r3, r2
 800d5b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	4313      	orrs	r3, r2
 800d5c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	4313      	orrs	r3, r2
 800d5d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	691b      	ldr	r3, [r3, #16]
 800d5de:	4313      	orrs	r3, r2
 800d5e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	695b      	ldr	r3, [r3, #20]
 800d5ec:	4313      	orrs	r3, r2
 800d5ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5fa:	4313      	orrs	r3, r2
 800d5fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	699b      	ldr	r3, [r3, #24]
 800d608:	041b      	lsls	r3, r3, #16
 800d60a:	4313      	orrs	r3, r2
 800d60c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	4a16      	ldr	r2, [pc, #88]	; (800d66c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d004      	beq.n	800d622 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4a14      	ldr	r2, [pc, #80]	; (800d670 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	d115      	bne.n	800d64e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d62c:	051b      	lsls	r3, r3, #20
 800d62e:	4313      	orrs	r3, r2
 800d630:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	69db      	ldr	r3, [r3, #28]
 800d63c:	4313      	orrs	r3, r2
 800d63e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	6a1b      	ldr	r3, [r3, #32]
 800d64a:	4313      	orrs	r3, r2
 800d64c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	68fa      	ldr	r2, [r7, #12]
 800d654:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2200      	movs	r2, #0
 800d65a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d65e:	2300      	movs	r3, #0
}
 800d660:	4618      	mov	r0, r3
 800d662:	3714      	adds	r7, #20
 800d664:	46bd      	mov	sp, r7
 800d666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66a:	4770      	bx	lr
 800d66c:	40010000 	.word	0x40010000
 800d670:	40010400 	.word	0x40010400

0800d674 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d674:	b480      	push	{r7}
 800d676:	b083      	sub	sp, #12
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d67c:	bf00      	nop
 800d67e:	370c      	adds	r7, #12
 800d680:	46bd      	mov	sp, r7
 800d682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d686:	4770      	bx	lr

0800d688 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d688:	b480      	push	{r7}
 800d68a:	b083      	sub	sp, #12
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d690:	bf00      	nop
 800d692:	370c      	adds	r7, #12
 800d694:	46bd      	mov	sp, r7
 800d696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69a:	4770      	bx	lr

0800d69c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d69c:	b480      	push	{r7}
 800d69e:	b083      	sub	sp, #12
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d6a4:	bf00      	nop
 800d6a6:	370c      	adds	r7, #12
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ae:	4770      	bx	lr

0800d6b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b082      	sub	sp, #8
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d101      	bne.n	800d6c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	e042      	b.n	800d748 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d106      	bne.n	800d6da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f7f4 ff3d 	bl	8002554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2224      	movs	r2, #36	; 0x24
 800d6de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	681a      	ldr	r2, [r3, #0]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f022 0201 	bic.w	r2, r2, #1
 800d6f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f000 fcd6 	bl	800e0a4 <UART_SetConfig>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d101      	bne.n	800d702 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d6fe:	2301      	movs	r3, #1
 800d700:	e022      	b.n	800d748 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d706:	2b00      	cmp	r3, #0
 800d708:	d002      	beq.n	800d710 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f001 fa32 	bl	800eb74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	685a      	ldr	r2, [r3, #4]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d71e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	689a      	ldr	r2, [r3, #8]
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d72e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	681a      	ldr	r2, [r3, #0]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f042 0201 	orr.w	r2, r2, #1
 800d73e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f001 fab9 	bl	800ecb8 <UART_CheckIdleState>
 800d746:	4603      	mov	r3, r0
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3708      	adds	r7, #8
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b08a      	sub	sp, #40	; 0x28
 800d754:	af02      	add	r7, sp, #8
 800d756:	60f8      	str	r0, [r7, #12]
 800d758:	60b9      	str	r1, [r7, #8]
 800d75a:	603b      	str	r3, [r7, #0]
 800d75c:	4613      	mov	r3, r2
 800d75e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d766:	2b20      	cmp	r3, #32
 800d768:	f040 8083 	bne.w	800d872 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d002      	beq.n	800d778 <HAL_UART_Transmit+0x28>
 800d772:	88fb      	ldrh	r3, [r7, #6]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d101      	bne.n	800d77c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d778:	2301      	movs	r3, #1
 800d77a:	e07b      	b.n	800d874 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d782:	2b01      	cmp	r3, #1
 800d784:	d101      	bne.n	800d78a <HAL_UART_Transmit+0x3a>
 800d786:	2302      	movs	r3, #2
 800d788:	e074      	b.n	800d874 <HAL_UART_Transmit+0x124>
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	2201      	movs	r2, #1
 800d78e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	2200      	movs	r2, #0
 800d796:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	2221      	movs	r2, #33	; 0x21
 800d79e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d7a2:	f7f5 f92d 	bl	8002a00 <HAL_GetTick>
 800d7a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	88fa      	ldrh	r2, [r7, #6]
 800d7ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	88fa      	ldrh	r2, [r7, #6]
 800d7b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	689b      	ldr	r3, [r3, #8]
 800d7bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7c0:	d108      	bne.n	800d7d4 <HAL_UART_Transmit+0x84>
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	691b      	ldr	r3, [r3, #16]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d104      	bne.n	800d7d4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	61bb      	str	r3, [r7, #24]
 800d7d2:	e003      	b.n	800d7dc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d7e4:	e02c      	b.n	800d840 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	9300      	str	r3, [sp, #0]
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	2180      	movs	r1, #128	; 0x80
 800d7f0:	68f8      	ldr	r0, [r7, #12]
 800d7f2:	f001 faac 	bl	800ed4e <UART_WaitOnFlagUntilTimeout>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d001      	beq.n	800d800 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d7fc:	2303      	movs	r3, #3
 800d7fe:	e039      	b.n	800d874 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d800:	69fb      	ldr	r3, [r7, #28]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d10b      	bne.n	800d81e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d806:	69bb      	ldr	r3, [r7, #24]
 800d808:	881b      	ldrh	r3, [r3, #0]
 800d80a:	461a      	mov	r2, r3
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d814:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d816:	69bb      	ldr	r3, [r7, #24]
 800d818:	3302      	adds	r3, #2
 800d81a:	61bb      	str	r3, [r7, #24]
 800d81c:	e007      	b.n	800d82e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d81e:	69fb      	ldr	r3, [r7, #28]
 800d820:	781a      	ldrb	r2, [r3, #0]
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	3301      	adds	r3, #1
 800d82c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d834:	b29b      	uxth	r3, r3
 800d836:	3b01      	subs	r3, #1
 800d838:	b29a      	uxth	r2, r3
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d846:	b29b      	uxth	r3, r3
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d1cc      	bne.n	800d7e6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	9300      	str	r3, [sp, #0]
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	2200      	movs	r2, #0
 800d854:	2140      	movs	r1, #64	; 0x40
 800d856:	68f8      	ldr	r0, [r7, #12]
 800d858:	f001 fa79 	bl	800ed4e <UART_WaitOnFlagUntilTimeout>
 800d85c:	4603      	mov	r3, r0
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d001      	beq.n	800d866 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d862:	2303      	movs	r3, #3
 800d864:	e006      	b.n	800d874 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2220      	movs	r2, #32
 800d86a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d86e:	2300      	movs	r3, #0
 800d870:	e000      	b.n	800d874 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d872:	2302      	movs	r3, #2
  }
}
 800d874:	4618      	mov	r0, r3
 800d876:	3720      	adds	r7, #32
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b08a      	sub	sp, #40	; 0x28
 800d880:	af00      	add	r7, sp, #0
 800d882:	60f8      	str	r0, [r7, #12]
 800d884:	60b9      	str	r1, [r7, #8]
 800d886:	4613      	mov	r3, r2
 800d888:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d890:	2b20      	cmp	r3, #32
 800d892:	d142      	bne.n	800d91a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d002      	beq.n	800d8a0 <HAL_UART_Receive_IT+0x24>
 800d89a:	88fb      	ldrh	r3, [r7, #6]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d101      	bne.n	800d8a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	e03b      	b.n	800d91c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d8aa:	2b01      	cmp	r3, #1
 800d8ac:	d101      	bne.n	800d8b2 <HAL_UART_Receive_IT+0x36>
 800d8ae:	2302      	movs	r3, #2
 800d8b0:	e034      	b.n	800d91c <HAL_UART_Receive_IT+0xa0>
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4a17      	ldr	r2, [pc, #92]	; (800d924 <HAL_UART_Receive_IT+0xa8>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d01f      	beq.n	800d90a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d018      	beq.n	800d90a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	e853 3f00 	ldrex	r3, [r3]
 800d8e4:	613b      	str	r3, [r7, #16]
   return(result);
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d8ec:	627b      	str	r3, [r7, #36]	; 0x24
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f6:	623b      	str	r3, [r7, #32]
 800d8f8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8fa:	69f9      	ldr	r1, [r7, #28]
 800d8fc:	6a3a      	ldr	r2, [r7, #32]
 800d8fe:	e841 2300 	strex	r3, r2, [r1]
 800d902:	61bb      	str	r3, [r7, #24]
   return(result);
 800d904:	69bb      	ldr	r3, [r7, #24]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d1e6      	bne.n	800d8d8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d90a:	88fb      	ldrh	r3, [r7, #6]
 800d90c:	461a      	mov	r2, r3
 800d90e:	68b9      	ldr	r1, [r7, #8]
 800d910:	68f8      	ldr	r0, [r7, #12]
 800d912:	f001 fae5 	bl	800eee0 <UART_Start_Receive_IT>
 800d916:	4603      	mov	r3, r0
 800d918:	e000      	b.n	800d91c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d91a:	2302      	movs	r3, #2
  }
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3728      	adds	r7, #40	; 0x28
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}
 800d924:	58000c00 	.word	0x58000c00

0800d928 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b0ba      	sub	sp, #232	; 0xe8
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	69db      	ldr	r3, [r3, #28]
 800d936:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	689b      	ldr	r3, [r3, #8]
 800d94a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d94e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d952:	f640 030f 	movw	r3, #2063	; 0x80f
 800d956:	4013      	ands	r3, r2
 800d958:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d95c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d960:	2b00      	cmp	r3, #0
 800d962:	d11b      	bne.n	800d99c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d968:	f003 0320 	and.w	r3, r3, #32
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d015      	beq.n	800d99c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d974:	f003 0320 	and.w	r3, r3, #32
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d105      	bne.n	800d988 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d97c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d984:	2b00      	cmp	r3, #0
 800d986:	d009      	beq.n	800d99c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	f000 835a 	beq.w	800e046 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	4798      	blx	r3
      }
      return;
 800d99a:	e354      	b.n	800e046 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d99c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	f000 811f 	beq.w	800dbe4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d9a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d9aa:	4b8b      	ldr	r3, [pc, #556]	; (800dbd8 <HAL_UART_IRQHandler+0x2b0>)
 800d9ac:	4013      	ands	r3, r2
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d106      	bne.n	800d9c0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d9b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d9b6:	4b89      	ldr	r3, [pc, #548]	; (800dbdc <HAL_UART_IRQHandler+0x2b4>)
 800d9b8:	4013      	ands	r3, r2
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	f000 8112 	beq.w	800dbe4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d9c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9c4:	f003 0301 	and.w	r3, r3, #1
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d011      	beq.n	800d9f0 <HAL_UART_IRQHandler+0xc8>
 800d9cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d00b      	beq.n	800d9f0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	2201      	movs	r2, #1
 800d9de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d9e6:	f043 0201 	orr.w	r2, r3, #1
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d9f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9f4:	f003 0302 	and.w	r3, r3, #2
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d011      	beq.n	800da20 <HAL_UART_IRQHandler+0xf8>
 800d9fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da00:	f003 0301 	and.w	r3, r3, #1
 800da04:	2b00      	cmp	r3, #0
 800da06:	d00b      	beq.n	800da20 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	2202      	movs	r2, #2
 800da0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da16:	f043 0204 	orr.w	r2, r3, #4
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800da20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da24:	f003 0304 	and.w	r3, r3, #4
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d011      	beq.n	800da50 <HAL_UART_IRQHandler+0x128>
 800da2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da30:	f003 0301 	and.w	r3, r3, #1
 800da34:	2b00      	cmp	r3, #0
 800da36:	d00b      	beq.n	800da50 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	2204      	movs	r2, #4
 800da3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da46:	f043 0202 	orr.w	r2, r3, #2
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800da50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da54:	f003 0308 	and.w	r3, r3, #8
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d017      	beq.n	800da8c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800da5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da60:	f003 0320 	and.w	r3, r3, #32
 800da64:	2b00      	cmp	r3, #0
 800da66:	d105      	bne.n	800da74 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800da68:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800da6c:	4b5a      	ldr	r3, [pc, #360]	; (800dbd8 <HAL_UART_IRQHandler+0x2b0>)
 800da6e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800da70:	2b00      	cmp	r3, #0
 800da72:	d00b      	beq.n	800da8c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	2208      	movs	r2, #8
 800da7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da82:	f043 0208 	orr.w	r2, r3, #8
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800da8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da94:	2b00      	cmp	r3, #0
 800da96:	d012      	beq.n	800dabe <HAL_UART_IRQHandler+0x196>
 800da98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d00c      	beq.n	800dabe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800daac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dab4:	f043 0220 	orr.w	r2, r3, #32
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	f000 82c0 	beq.w	800e04a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800daca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dace:	f003 0320 	and.w	r3, r3, #32
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d013      	beq.n	800dafe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dada:	f003 0320 	and.w	r3, r3, #32
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d105      	bne.n	800daee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800daea:	2b00      	cmp	r3, #0
 800daec:	d007      	beq.n	800dafe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d003      	beq.n	800dafe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	689b      	ldr	r3, [r3, #8]
 800db0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db12:	2b40      	cmp	r3, #64	; 0x40
 800db14:	d005      	beq.n	800db22 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800db16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800db1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d04f      	beq.n	800dbc2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f001 fb06 	bl	800f134 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	689b      	ldr	r3, [r3, #8]
 800db2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db32:	2b40      	cmp	r3, #64	; 0x40
 800db34:	d141      	bne.n	800dbba <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	3308      	adds	r3, #8
 800db3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800db44:	e853 3f00 	ldrex	r3, [r3]
 800db48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800db4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800db50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	3308      	adds	r3, #8
 800db5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800db62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800db66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800db6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800db72:	e841 2300 	strex	r3, r2, [r1]
 800db76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800db7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d1d9      	bne.n	800db36 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db86:	2b00      	cmp	r3, #0
 800db88:	d013      	beq.n	800dbb2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db8e:	4a14      	ldr	r2, [pc, #80]	; (800dbe0 <HAL_UART_IRQHandler+0x2b8>)
 800db90:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db96:	4618      	mov	r0, r3
 800db98:	f7f8 f88a 	bl	8005cb0 <HAL_DMA_Abort_IT>
 800db9c:	4603      	mov	r3, r0
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d017      	beq.n	800dbd2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dba8:	687a      	ldr	r2, [r7, #4]
 800dbaa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800dbac:	4610      	mov	r0, r2
 800dbae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbb0:	e00f      	b.n	800dbd2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f000 fa60 	bl	800e078 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbb8:	e00b      	b.n	800dbd2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f000 fa5c 	bl	800e078 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbc0:	e007      	b.n	800dbd2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f000 fa58 	bl	800e078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800dbd0:	e23b      	b.n	800e04a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbd2:	bf00      	nop
    return;
 800dbd4:	e239      	b.n	800e04a <HAL_UART_IRQHandler+0x722>
 800dbd6:	bf00      	nop
 800dbd8:	10000001 	.word	0x10000001
 800dbdc:	04000120 	.word	0x04000120
 800dbe0:	0800f201 	.word	0x0800f201

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbe8:	2b01      	cmp	r3, #1
 800dbea:	f040 81ce 	bne.w	800df8a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dbee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbf2:	f003 0310 	and.w	r3, r3, #16
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f000 81c7 	beq.w	800df8a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dbfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc00:	f003 0310 	and.w	r3, r3, #16
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	f000 81c0 	beq.w	800df8a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	2210      	movs	r2, #16
 800dc10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	689b      	ldr	r3, [r3, #8]
 800dc18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc1c:	2b40      	cmp	r3, #64	; 0x40
 800dc1e:	f040 813b 	bne.w	800de98 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	4a8b      	ldr	r2, [pc, #556]	; (800de58 <HAL_UART_IRQHandler+0x530>)
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	d059      	beq.n	800dce2 <HAL_UART_IRQHandler+0x3ba>
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4a89      	ldr	r2, [pc, #548]	; (800de5c <HAL_UART_IRQHandler+0x534>)
 800dc36:	4293      	cmp	r3, r2
 800dc38:	d053      	beq.n	800dce2 <HAL_UART_IRQHandler+0x3ba>
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4a87      	ldr	r2, [pc, #540]	; (800de60 <HAL_UART_IRQHandler+0x538>)
 800dc42:	4293      	cmp	r3, r2
 800dc44:	d04d      	beq.n	800dce2 <HAL_UART_IRQHandler+0x3ba>
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	4a85      	ldr	r2, [pc, #532]	; (800de64 <HAL_UART_IRQHandler+0x53c>)
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d047      	beq.n	800dce2 <HAL_UART_IRQHandler+0x3ba>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	4a83      	ldr	r2, [pc, #524]	; (800de68 <HAL_UART_IRQHandler+0x540>)
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	d041      	beq.n	800dce2 <HAL_UART_IRQHandler+0x3ba>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	4a81      	ldr	r2, [pc, #516]	; (800de6c <HAL_UART_IRQHandler+0x544>)
 800dc66:	4293      	cmp	r3, r2
 800dc68:	d03b      	beq.n	800dce2 <HAL_UART_IRQHandler+0x3ba>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4a7f      	ldr	r2, [pc, #508]	; (800de70 <HAL_UART_IRQHandler+0x548>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d035      	beq.n	800dce2 <HAL_UART_IRQHandler+0x3ba>
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	4a7d      	ldr	r2, [pc, #500]	; (800de74 <HAL_UART_IRQHandler+0x54c>)
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d02f      	beq.n	800dce2 <HAL_UART_IRQHandler+0x3ba>
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	4a7b      	ldr	r2, [pc, #492]	; (800de78 <HAL_UART_IRQHandler+0x550>)
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	d029      	beq.n	800dce2 <HAL_UART_IRQHandler+0x3ba>
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	4a79      	ldr	r2, [pc, #484]	; (800de7c <HAL_UART_IRQHandler+0x554>)
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d023      	beq.n	800dce2 <HAL_UART_IRQHandler+0x3ba>
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4a77      	ldr	r2, [pc, #476]	; (800de80 <HAL_UART_IRQHandler+0x558>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d01d      	beq.n	800dce2 <HAL_UART_IRQHandler+0x3ba>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	4a75      	ldr	r2, [pc, #468]	; (800de84 <HAL_UART_IRQHandler+0x55c>)
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	d017      	beq.n	800dce2 <HAL_UART_IRQHandler+0x3ba>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	4a73      	ldr	r2, [pc, #460]	; (800de88 <HAL_UART_IRQHandler+0x560>)
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d011      	beq.n	800dce2 <HAL_UART_IRQHandler+0x3ba>
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	4a71      	ldr	r2, [pc, #452]	; (800de8c <HAL_UART_IRQHandler+0x564>)
 800dcc6:	4293      	cmp	r3, r2
 800dcc8:	d00b      	beq.n	800dce2 <HAL_UART_IRQHandler+0x3ba>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4a6f      	ldr	r2, [pc, #444]	; (800de90 <HAL_UART_IRQHandler+0x568>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d005      	beq.n	800dce2 <HAL_UART_IRQHandler+0x3ba>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	4a6d      	ldr	r2, [pc, #436]	; (800de94 <HAL_UART_IRQHandler+0x56c>)
 800dcde:	4293      	cmp	r3, r2
 800dce0:	d105      	bne.n	800dcee <HAL_UART_IRQHandler+0x3c6>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	e004      	b.n	800dcf8 <HAL_UART_IRQHandler+0x3d0>
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	685b      	ldr	r3, [r3, #4]
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dcfc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	f000 81a4 	beq.w	800e04e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dd0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dd10:	429a      	cmp	r2, r3
 800dd12:	f080 819c 	bcs.w	800e04e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dd1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd24:	69db      	ldr	r3, [r3, #28]
 800dd26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd2a:	f000 8086 	beq.w	800de3a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dd3a:	e853 3f00 	ldrex	r3, [r3]
 800dd3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800dd42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dd46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	461a      	mov	r2, r3
 800dd54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dd58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dd5c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd60:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dd64:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dd68:	e841 2300 	strex	r3, r2, [r1]
 800dd6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dd70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d1da      	bne.n	800dd2e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	3308      	adds	r3, #8
 800dd7e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dd82:	e853 3f00 	ldrex	r3, [r3]
 800dd86:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dd88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dd8a:	f023 0301 	bic.w	r3, r3, #1
 800dd8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	3308      	adds	r3, #8
 800dd98:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dd9c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800dda0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dda2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dda4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dda8:	e841 2300 	strex	r3, r2, [r1]
 800ddac:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ddae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d1e1      	bne.n	800dd78 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	3308      	adds	r3, #8
 800ddba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddbe:	e853 3f00 	ldrex	r3, [r3]
 800ddc2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ddc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ddca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	3308      	adds	r3, #8
 800ddd4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ddd8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ddda:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dddc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ddde:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dde0:	e841 2300 	strex	r3, r2, [r1]
 800dde4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dde6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d1e3      	bne.n	800ddb4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2220      	movs	r2, #32
 800ddf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de02:	e853 3f00 	ldrex	r3, [r3]
 800de06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800de08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de0a:	f023 0310 	bic.w	r3, r3, #16
 800de0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	461a      	mov	r2, r3
 800de18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800de1c:	65bb      	str	r3, [r7, #88]	; 0x58
 800de1e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800de22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800de24:	e841 2300 	strex	r3, r2, [r1]
 800de28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800de2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d1e4      	bne.n	800ddfa <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de34:	4618      	mov	r0, r3
 800de36:	f7f7 fc1d 	bl	8005674 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de46:	b29b      	uxth	r3, r3
 800de48:	1ad3      	subs	r3, r2, r3
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	4619      	mov	r1, r3
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f000 f91c 	bl	800e08c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800de54:	e0fb      	b.n	800e04e <HAL_UART_IRQHandler+0x726>
 800de56:	bf00      	nop
 800de58:	40020010 	.word	0x40020010
 800de5c:	40020028 	.word	0x40020028
 800de60:	40020040 	.word	0x40020040
 800de64:	40020058 	.word	0x40020058
 800de68:	40020070 	.word	0x40020070
 800de6c:	40020088 	.word	0x40020088
 800de70:	400200a0 	.word	0x400200a0
 800de74:	400200b8 	.word	0x400200b8
 800de78:	40020410 	.word	0x40020410
 800de7c:	40020428 	.word	0x40020428
 800de80:	40020440 	.word	0x40020440
 800de84:	40020458 	.word	0x40020458
 800de88:	40020470 	.word	0x40020470
 800de8c:	40020488 	.word	0x40020488
 800de90:	400204a0 	.word	0x400204a0
 800de94:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	1ad3      	subs	r3, r2, r3
 800dea8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800deb2:	b29b      	uxth	r3, r3
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	f000 80cc 	beq.w	800e052 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800deba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800debe:	2b00      	cmp	r3, #0
 800dec0:	f000 80c7 	beq.w	800e052 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800decc:	e853 3f00 	ldrex	r3, [r3]
 800ded0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ded2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ded4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ded8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	461a      	mov	r2, r3
 800dee2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dee6:	647b      	str	r3, [r7, #68]	; 0x44
 800dee8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800deec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800deee:	e841 2300 	strex	r3, r2, [r1]
 800def2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800def4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800def6:	2b00      	cmp	r3, #0
 800def8:	d1e4      	bne.n	800dec4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	3308      	adds	r3, #8
 800df00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df04:	e853 3f00 	ldrex	r3, [r3]
 800df08:	623b      	str	r3, [r7, #32]
   return(result);
 800df0a:	6a3a      	ldr	r2, [r7, #32]
 800df0c:	4b54      	ldr	r3, [pc, #336]	; (800e060 <HAL_UART_IRQHandler+0x738>)
 800df0e:	4013      	ands	r3, r2
 800df10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	3308      	adds	r3, #8
 800df1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800df1e:	633a      	str	r2, [r7, #48]	; 0x30
 800df20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df26:	e841 2300 	strex	r3, r2, [r1]
 800df2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800df2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d1e3      	bne.n	800defa <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2220      	movs	r2, #32
 800df36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2200      	movs	r2, #0
 800df3e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2200      	movs	r2, #0
 800df44:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	e853 3f00 	ldrex	r3, [r3]
 800df52:	60fb      	str	r3, [r7, #12]
   return(result);
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f023 0310 	bic.w	r3, r3, #16
 800df5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	461a      	mov	r2, r3
 800df64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800df68:	61fb      	str	r3, [r7, #28]
 800df6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df6c:	69b9      	ldr	r1, [r7, #24]
 800df6e:	69fa      	ldr	r2, [r7, #28]
 800df70:	e841 2300 	strex	r3, r2, [r1]
 800df74:	617b      	str	r3, [r7, #20]
   return(result);
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d1e4      	bne.n	800df46 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800df7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800df80:	4619      	mov	r1, r3
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f000 f882 	bl	800e08c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800df88:	e063      	b.n	800e052 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800df8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800df92:	2b00      	cmp	r3, #0
 800df94:	d00e      	beq.n	800dfb4 <HAL_UART_IRQHandler+0x68c>
 800df96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d008      	beq.n	800dfb4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dfaa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f001 fdc5 	bl	800fb3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dfb2:	e051      	b.n	800e058 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800dfb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d014      	beq.n	800dfea <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dfc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dfc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d105      	bne.n	800dfd8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800dfcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dfd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d008      	beq.n	800dfea <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d03a      	beq.n	800e056 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	4798      	blx	r3
    }
    return;
 800dfe8:	e035      	b.n	800e056 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dfea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d009      	beq.n	800e00a <HAL_UART_IRQHandler+0x6e2>
 800dff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d003      	beq.n	800e00a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f001 f912 	bl	800f22c <UART_EndTransmit_IT>
    return;
 800e008:	e026      	b.n	800e058 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e00a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e00e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e012:	2b00      	cmp	r3, #0
 800e014:	d009      	beq.n	800e02a <HAL_UART_IRQHandler+0x702>
 800e016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e01a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d003      	beq.n	800e02a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f001 fd9e 	bl	800fb64 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e028:	e016      	b.n	800e058 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e02a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e02e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e032:	2b00      	cmp	r3, #0
 800e034:	d010      	beq.n	800e058 <HAL_UART_IRQHandler+0x730>
 800e036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	da0c      	bge.n	800e058 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f001 fd86 	bl	800fb50 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e044:	e008      	b.n	800e058 <HAL_UART_IRQHandler+0x730>
      return;
 800e046:	bf00      	nop
 800e048:	e006      	b.n	800e058 <HAL_UART_IRQHandler+0x730>
    return;
 800e04a:	bf00      	nop
 800e04c:	e004      	b.n	800e058 <HAL_UART_IRQHandler+0x730>
      return;
 800e04e:	bf00      	nop
 800e050:	e002      	b.n	800e058 <HAL_UART_IRQHandler+0x730>
      return;
 800e052:	bf00      	nop
 800e054:	e000      	b.n	800e058 <HAL_UART_IRQHandler+0x730>
    return;
 800e056:	bf00      	nop
  }
}
 800e058:	37e8      	adds	r7, #232	; 0xe8
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
 800e05e:	bf00      	nop
 800e060:	effffffe 	.word	0xeffffffe

0800e064 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e064:	b480      	push	{r7}
 800e066:	b083      	sub	sp, #12
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e06c:	bf00      	nop
 800e06e:	370c      	adds	r7, #12
 800e070:	46bd      	mov	sp, r7
 800e072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e076:	4770      	bx	lr

0800e078 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e078:	b480      	push	{r7}
 800e07a:	b083      	sub	sp, #12
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e080:	bf00      	nop
 800e082:	370c      	adds	r7, #12
 800e084:	46bd      	mov	sp, r7
 800e086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08a:	4770      	bx	lr

0800e08c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e08c:	b480      	push	{r7}
 800e08e:	b083      	sub	sp, #12
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	460b      	mov	r3, r1
 800e096:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e098:	bf00      	nop
 800e09a:	370c      	adds	r7, #12
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr

0800e0a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e0a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e0a8:	b092      	sub	sp, #72	; 0x48
 800e0aa:	af00      	add	r7, sp, #0
 800e0ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	689a      	ldr	r2, [r3, #8]
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	691b      	ldr	r3, [r3, #16]
 800e0bc:	431a      	orrs	r2, r3
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	695b      	ldr	r3, [r3, #20]
 800e0c2:	431a      	orrs	r2, r3
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	69db      	ldr	r3, [r3, #28]
 800e0c8:	4313      	orrs	r3, r2
 800e0ca:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	681a      	ldr	r2, [r3, #0]
 800e0d2:	4bbe      	ldr	r3, [pc, #760]	; (800e3cc <UART_SetConfig+0x328>)
 800e0d4:	4013      	ands	r3, r2
 800e0d6:	697a      	ldr	r2, [r7, #20]
 800e0d8:	6812      	ldr	r2, [r2, #0]
 800e0da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e0dc:	430b      	orrs	r3, r1
 800e0de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	685b      	ldr	r3, [r3, #4]
 800e0e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	68da      	ldr	r2, [r3, #12]
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	430a      	orrs	r2, r1
 800e0f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	699b      	ldr	r3, [r3, #24]
 800e0fa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4ab3      	ldr	r2, [pc, #716]	; (800e3d0 <UART_SetConfig+0x32c>)
 800e102:	4293      	cmp	r3, r2
 800e104:	d004      	beq.n	800e110 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	6a1b      	ldr	r3, [r3, #32]
 800e10a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e10c:	4313      	orrs	r3, r2
 800e10e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	689a      	ldr	r2, [r3, #8]
 800e116:	4baf      	ldr	r3, [pc, #700]	; (800e3d4 <UART_SetConfig+0x330>)
 800e118:	4013      	ands	r3, r2
 800e11a:	697a      	ldr	r2, [r7, #20]
 800e11c:	6812      	ldr	r2, [r2, #0]
 800e11e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e120:	430b      	orrs	r3, r1
 800e122:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e12a:	f023 010f 	bic.w	r1, r3, #15
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	430a      	orrs	r2, r1
 800e138:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	4aa6      	ldr	r2, [pc, #664]	; (800e3d8 <UART_SetConfig+0x334>)
 800e140:	4293      	cmp	r3, r2
 800e142:	d177      	bne.n	800e234 <UART_SetConfig+0x190>
 800e144:	4ba5      	ldr	r3, [pc, #660]	; (800e3dc <UART_SetConfig+0x338>)
 800e146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e148:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e14c:	2b28      	cmp	r3, #40	; 0x28
 800e14e:	d86d      	bhi.n	800e22c <UART_SetConfig+0x188>
 800e150:	a201      	add	r2, pc, #4	; (adr r2, 800e158 <UART_SetConfig+0xb4>)
 800e152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e156:	bf00      	nop
 800e158:	0800e1fd 	.word	0x0800e1fd
 800e15c:	0800e22d 	.word	0x0800e22d
 800e160:	0800e22d 	.word	0x0800e22d
 800e164:	0800e22d 	.word	0x0800e22d
 800e168:	0800e22d 	.word	0x0800e22d
 800e16c:	0800e22d 	.word	0x0800e22d
 800e170:	0800e22d 	.word	0x0800e22d
 800e174:	0800e22d 	.word	0x0800e22d
 800e178:	0800e205 	.word	0x0800e205
 800e17c:	0800e22d 	.word	0x0800e22d
 800e180:	0800e22d 	.word	0x0800e22d
 800e184:	0800e22d 	.word	0x0800e22d
 800e188:	0800e22d 	.word	0x0800e22d
 800e18c:	0800e22d 	.word	0x0800e22d
 800e190:	0800e22d 	.word	0x0800e22d
 800e194:	0800e22d 	.word	0x0800e22d
 800e198:	0800e20d 	.word	0x0800e20d
 800e19c:	0800e22d 	.word	0x0800e22d
 800e1a0:	0800e22d 	.word	0x0800e22d
 800e1a4:	0800e22d 	.word	0x0800e22d
 800e1a8:	0800e22d 	.word	0x0800e22d
 800e1ac:	0800e22d 	.word	0x0800e22d
 800e1b0:	0800e22d 	.word	0x0800e22d
 800e1b4:	0800e22d 	.word	0x0800e22d
 800e1b8:	0800e215 	.word	0x0800e215
 800e1bc:	0800e22d 	.word	0x0800e22d
 800e1c0:	0800e22d 	.word	0x0800e22d
 800e1c4:	0800e22d 	.word	0x0800e22d
 800e1c8:	0800e22d 	.word	0x0800e22d
 800e1cc:	0800e22d 	.word	0x0800e22d
 800e1d0:	0800e22d 	.word	0x0800e22d
 800e1d4:	0800e22d 	.word	0x0800e22d
 800e1d8:	0800e21d 	.word	0x0800e21d
 800e1dc:	0800e22d 	.word	0x0800e22d
 800e1e0:	0800e22d 	.word	0x0800e22d
 800e1e4:	0800e22d 	.word	0x0800e22d
 800e1e8:	0800e22d 	.word	0x0800e22d
 800e1ec:	0800e22d 	.word	0x0800e22d
 800e1f0:	0800e22d 	.word	0x0800e22d
 800e1f4:	0800e22d 	.word	0x0800e22d
 800e1f8:	0800e225 	.word	0x0800e225
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e202:	e222      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e204:	2304      	movs	r3, #4
 800e206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e20a:	e21e      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e20c:	2308      	movs	r3, #8
 800e20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e212:	e21a      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e214:	2310      	movs	r3, #16
 800e216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e21a:	e216      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e21c:	2320      	movs	r3, #32
 800e21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e222:	e212      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e224:	2340      	movs	r3, #64	; 0x40
 800e226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e22a:	e20e      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e22c:	2380      	movs	r3, #128	; 0x80
 800e22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e232:	e20a      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	4a69      	ldr	r2, [pc, #420]	; (800e3e0 <UART_SetConfig+0x33c>)
 800e23a:	4293      	cmp	r3, r2
 800e23c:	d130      	bne.n	800e2a0 <UART_SetConfig+0x1fc>
 800e23e:	4b67      	ldr	r3, [pc, #412]	; (800e3dc <UART_SetConfig+0x338>)
 800e240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e242:	f003 0307 	and.w	r3, r3, #7
 800e246:	2b05      	cmp	r3, #5
 800e248:	d826      	bhi.n	800e298 <UART_SetConfig+0x1f4>
 800e24a:	a201      	add	r2, pc, #4	; (adr r2, 800e250 <UART_SetConfig+0x1ac>)
 800e24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e250:	0800e269 	.word	0x0800e269
 800e254:	0800e271 	.word	0x0800e271
 800e258:	0800e279 	.word	0x0800e279
 800e25c:	0800e281 	.word	0x0800e281
 800e260:	0800e289 	.word	0x0800e289
 800e264:	0800e291 	.word	0x0800e291
 800e268:	2300      	movs	r3, #0
 800e26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e26e:	e1ec      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e270:	2304      	movs	r3, #4
 800e272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e276:	e1e8      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e278:	2308      	movs	r3, #8
 800e27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e27e:	e1e4      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e280:	2310      	movs	r3, #16
 800e282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e286:	e1e0      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e288:	2320      	movs	r3, #32
 800e28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e28e:	e1dc      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e290:	2340      	movs	r3, #64	; 0x40
 800e292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e296:	e1d8      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e298:	2380      	movs	r3, #128	; 0x80
 800e29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e29e:	e1d4      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	4a4f      	ldr	r2, [pc, #316]	; (800e3e4 <UART_SetConfig+0x340>)
 800e2a6:	4293      	cmp	r3, r2
 800e2a8:	d130      	bne.n	800e30c <UART_SetConfig+0x268>
 800e2aa:	4b4c      	ldr	r3, [pc, #304]	; (800e3dc <UART_SetConfig+0x338>)
 800e2ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2ae:	f003 0307 	and.w	r3, r3, #7
 800e2b2:	2b05      	cmp	r3, #5
 800e2b4:	d826      	bhi.n	800e304 <UART_SetConfig+0x260>
 800e2b6:	a201      	add	r2, pc, #4	; (adr r2, 800e2bc <UART_SetConfig+0x218>)
 800e2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2bc:	0800e2d5 	.word	0x0800e2d5
 800e2c0:	0800e2dd 	.word	0x0800e2dd
 800e2c4:	0800e2e5 	.word	0x0800e2e5
 800e2c8:	0800e2ed 	.word	0x0800e2ed
 800e2cc:	0800e2f5 	.word	0x0800e2f5
 800e2d0:	0800e2fd 	.word	0x0800e2fd
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2da:	e1b6      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e2dc:	2304      	movs	r3, #4
 800e2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2e2:	e1b2      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e2e4:	2308      	movs	r3, #8
 800e2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ea:	e1ae      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e2ec:	2310      	movs	r3, #16
 800e2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2f2:	e1aa      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e2f4:	2320      	movs	r3, #32
 800e2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2fa:	e1a6      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e2fc:	2340      	movs	r3, #64	; 0x40
 800e2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e302:	e1a2      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e304:	2380      	movs	r3, #128	; 0x80
 800e306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e30a:	e19e      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	4a35      	ldr	r2, [pc, #212]	; (800e3e8 <UART_SetConfig+0x344>)
 800e312:	4293      	cmp	r3, r2
 800e314:	d130      	bne.n	800e378 <UART_SetConfig+0x2d4>
 800e316:	4b31      	ldr	r3, [pc, #196]	; (800e3dc <UART_SetConfig+0x338>)
 800e318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e31a:	f003 0307 	and.w	r3, r3, #7
 800e31e:	2b05      	cmp	r3, #5
 800e320:	d826      	bhi.n	800e370 <UART_SetConfig+0x2cc>
 800e322:	a201      	add	r2, pc, #4	; (adr r2, 800e328 <UART_SetConfig+0x284>)
 800e324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e328:	0800e341 	.word	0x0800e341
 800e32c:	0800e349 	.word	0x0800e349
 800e330:	0800e351 	.word	0x0800e351
 800e334:	0800e359 	.word	0x0800e359
 800e338:	0800e361 	.word	0x0800e361
 800e33c:	0800e369 	.word	0x0800e369
 800e340:	2300      	movs	r3, #0
 800e342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e346:	e180      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e348:	2304      	movs	r3, #4
 800e34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e34e:	e17c      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e350:	2308      	movs	r3, #8
 800e352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e356:	e178      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e358:	2310      	movs	r3, #16
 800e35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e35e:	e174      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e360:	2320      	movs	r3, #32
 800e362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e366:	e170      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e368:	2340      	movs	r3, #64	; 0x40
 800e36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e36e:	e16c      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e370:	2380      	movs	r3, #128	; 0x80
 800e372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e376:	e168      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	4a1b      	ldr	r2, [pc, #108]	; (800e3ec <UART_SetConfig+0x348>)
 800e37e:	4293      	cmp	r3, r2
 800e380:	d142      	bne.n	800e408 <UART_SetConfig+0x364>
 800e382:	4b16      	ldr	r3, [pc, #88]	; (800e3dc <UART_SetConfig+0x338>)
 800e384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e386:	f003 0307 	and.w	r3, r3, #7
 800e38a:	2b05      	cmp	r3, #5
 800e38c:	d838      	bhi.n	800e400 <UART_SetConfig+0x35c>
 800e38e:	a201      	add	r2, pc, #4	; (adr r2, 800e394 <UART_SetConfig+0x2f0>)
 800e390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e394:	0800e3ad 	.word	0x0800e3ad
 800e398:	0800e3b5 	.word	0x0800e3b5
 800e39c:	0800e3bd 	.word	0x0800e3bd
 800e3a0:	0800e3c5 	.word	0x0800e3c5
 800e3a4:	0800e3f1 	.word	0x0800e3f1
 800e3a8:	0800e3f9 	.word	0x0800e3f9
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3b2:	e14a      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e3b4:	2304      	movs	r3, #4
 800e3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ba:	e146      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e3bc:	2308      	movs	r3, #8
 800e3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3c2:	e142      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e3c4:	2310      	movs	r3, #16
 800e3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ca:	e13e      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e3cc:	cfff69f3 	.word	0xcfff69f3
 800e3d0:	58000c00 	.word	0x58000c00
 800e3d4:	11fff4ff 	.word	0x11fff4ff
 800e3d8:	40011000 	.word	0x40011000
 800e3dc:	58024400 	.word	0x58024400
 800e3e0:	40004400 	.word	0x40004400
 800e3e4:	40004800 	.word	0x40004800
 800e3e8:	40004c00 	.word	0x40004c00
 800e3ec:	40005000 	.word	0x40005000
 800e3f0:	2320      	movs	r3, #32
 800e3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3f6:	e128      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e3f8:	2340      	movs	r3, #64	; 0x40
 800e3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3fe:	e124      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e400:	2380      	movs	r3, #128	; 0x80
 800e402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e406:	e120      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	4acb      	ldr	r2, [pc, #812]	; (800e73c <UART_SetConfig+0x698>)
 800e40e:	4293      	cmp	r3, r2
 800e410:	d176      	bne.n	800e500 <UART_SetConfig+0x45c>
 800e412:	4bcb      	ldr	r3, [pc, #812]	; (800e740 <UART_SetConfig+0x69c>)
 800e414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e416:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e41a:	2b28      	cmp	r3, #40	; 0x28
 800e41c:	d86c      	bhi.n	800e4f8 <UART_SetConfig+0x454>
 800e41e:	a201      	add	r2, pc, #4	; (adr r2, 800e424 <UART_SetConfig+0x380>)
 800e420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e424:	0800e4c9 	.word	0x0800e4c9
 800e428:	0800e4f9 	.word	0x0800e4f9
 800e42c:	0800e4f9 	.word	0x0800e4f9
 800e430:	0800e4f9 	.word	0x0800e4f9
 800e434:	0800e4f9 	.word	0x0800e4f9
 800e438:	0800e4f9 	.word	0x0800e4f9
 800e43c:	0800e4f9 	.word	0x0800e4f9
 800e440:	0800e4f9 	.word	0x0800e4f9
 800e444:	0800e4d1 	.word	0x0800e4d1
 800e448:	0800e4f9 	.word	0x0800e4f9
 800e44c:	0800e4f9 	.word	0x0800e4f9
 800e450:	0800e4f9 	.word	0x0800e4f9
 800e454:	0800e4f9 	.word	0x0800e4f9
 800e458:	0800e4f9 	.word	0x0800e4f9
 800e45c:	0800e4f9 	.word	0x0800e4f9
 800e460:	0800e4f9 	.word	0x0800e4f9
 800e464:	0800e4d9 	.word	0x0800e4d9
 800e468:	0800e4f9 	.word	0x0800e4f9
 800e46c:	0800e4f9 	.word	0x0800e4f9
 800e470:	0800e4f9 	.word	0x0800e4f9
 800e474:	0800e4f9 	.word	0x0800e4f9
 800e478:	0800e4f9 	.word	0x0800e4f9
 800e47c:	0800e4f9 	.word	0x0800e4f9
 800e480:	0800e4f9 	.word	0x0800e4f9
 800e484:	0800e4e1 	.word	0x0800e4e1
 800e488:	0800e4f9 	.word	0x0800e4f9
 800e48c:	0800e4f9 	.word	0x0800e4f9
 800e490:	0800e4f9 	.word	0x0800e4f9
 800e494:	0800e4f9 	.word	0x0800e4f9
 800e498:	0800e4f9 	.word	0x0800e4f9
 800e49c:	0800e4f9 	.word	0x0800e4f9
 800e4a0:	0800e4f9 	.word	0x0800e4f9
 800e4a4:	0800e4e9 	.word	0x0800e4e9
 800e4a8:	0800e4f9 	.word	0x0800e4f9
 800e4ac:	0800e4f9 	.word	0x0800e4f9
 800e4b0:	0800e4f9 	.word	0x0800e4f9
 800e4b4:	0800e4f9 	.word	0x0800e4f9
 800e4b8:	0800e4f9 	.word	0x0800e4f9
 800e4bc:	0800e4f9 	.word	0x0800e4f9
 800e4c0:	0800e4f9 	.word	0x0800e4f9
 800e4c4:	0800e4f1 	.word	0x0800e4f1
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ce:	e0bc      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e4d0:	2304      	movs	r3, #4
 800e4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4d6:	e0b8      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e4d8:	2308      	movs	r3, #8
 800e4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4de:	e0b4      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e4e0:	2310      	movs	r3, #16
 800e4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4e6:	e0b0      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e4e8:	2320      	movs	r3, #32
 800e4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ee:	e0ac      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e4f0:	2340      	movs	r3, #64	; 0x40
 800e4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4f6:	e0a8      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e4f8:	2380      	movs	r3, #128	; 0x80
 800e4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4fe:	e0a4      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	4a8f      	ldr	r2, [pc, #572]	; (800e744 <UART_SetConfig+0x6a0>)
 800e506:	4293      	cmp	r3, r2
 800e508:	d130      	bne.n	800e56c <UART_SetConfig+0x4c8>
 800e50a:	4b8d      	ldr	r3, [pc, #564]	; (800e740 <UART_SetConfig+0x69c>)
 800e50c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e50e:	f003 0307 	and.w	r3, r3, #7
 800e512:	2b05      	cmp	r3, #5
 800e514:	d826      	bhi.n	800e564 <UART_SetConfig+0x4c0>
 800e516:	a201      	add	r2, pc, #4	; (adr r2, 800e51c <UART_SetConfig+0x478>)
 800e518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e51c:	0800e535 	.word	0x0800e535
 800e520:	0800e53d 	.word	0x0800e53d
 800e524:	0800e545 	.word	0x0800e545
 800e528:	0800e54d 	.word	0x0800e54d
 800e52c:	0800e555 	.word	0x0800e555
 800e530:	0800e55d 	.word	0x0800e55d
 800e534:	2300      	movs	r3, #0
 800e536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e53a:	e086      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e53c:	2304      	movs	r3, #4
 800e53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e542:	e082      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e544:	2308      	movs	r3, #8
 800e546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e54a:	e07e      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e54c:	2310      	movs	r3, #16
 800e54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e552:	e07a      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e554:	2320      	movs	r3, #32
 800e556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e55a:	e076      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e55c:	2340      	movs	r3, #64	; 0x40
 800e55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e562:	e072      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e564:	2380      	movs	r3, #128	; 0x80
 800e566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e56a:	e06e      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	4a75      	ldr	r2, [pc, #468]	; (800e748 <UART_SetConfig+0x6a4>)
 800e572:	4293      	cmp	r3, r2
 800e574:	d130      	bne.n	800e5d8 <UART_SetConfig+0x534>
 800e576:	4b72      	ldr	r3, [pc, #456]	; (800e740 <UART_SetConfig+0x69c>)
 800e578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e57a:	f003 0307 	and.w	r3, r3, #7
 800e57e:	2b05      	cmp	r3, #5
 800e580:	d826      	bhi.n	800e5d0 <UART_SetConfig+0x52c>
 800e582:	a201      	add	r2, pc, #4	; (adr r2, 800e588 <UART_SetConfig+0x4e4>)
 800e584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e588:	0800e5a1 	.word	0x0800e5a1
 800e58c:	0800e5a9 	.word	0x0800e5a9
 800e590:	0800e5b1 	.word	0x0800e5b1
 800e594:	0800e5b9 	.word	0x0800e5b9
 800e598:	0800e5c1 	.word	0x0800e5c1
 800e59c:	0800e5c9 	.word	0x0800e5c9
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5a6:	e050      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e5a8:	2304      	movs	r3, #4
 800e5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ae:	e04c      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e5b0:	2308      	movs	r3, #8
 800e5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5b6:	e048      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e5b8:	2310      	movs	r3, #16
 800e5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5be:	e044      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e5c0:	2320      	movs	r3, #32
 800e5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5c6:	e040      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e5c8:	2340      	movs	r3, #64	; 0x40
 800e5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ce:	e03c      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e5d0:	2380      	movs	r3, #128	; 0x80
 800e5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5d6:	e038      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	4a5b      	ldr	r2, [pc, #364]	; (800e74c <UART_SetConfig+0x6a8>)
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d130      	bne.n	800e644 <UART_SetConfig+0x5a0>
 800e5e2:	4b57      	ldr	r3, [pc, #348]	; (800e740 <UART_SetConfig+0x69c>)
 800e5e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5e6:	f003 0307 	and.w	r3, r3, #7
 800e5ea:	2b05      	cmp	r3, #5
 800e5ec:	d826      	bhi.n	800e63c <UART_SetConfig+0x598>
 800e5ee:	a201      	add	r2, pc, #4	; (adr r2, 800e5f4 <UART_SetConfig+0x550>)
 800e5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5f4:	0800e60d 	.word	0x0800e60d
 800e5f8:	0800e615 	.word	0x0800e615
 800e5fc:	0800e61d 	.word	0x0800e61d
 800e600:	0800e625 	.word	0x0800e625
 800e604:	0800e62d 	.word	0x0800e62d
 800e608:	0800e635 	.word	0x0800e635
 800e60c:	2302      	movs	r3, #2
 800e60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e612:	e01a      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e614:	2304      	movs	r3, #4
 800e616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e61a:	e016      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e61c:	2308      	movs	r3, #8
 800e61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e622:	e012      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e624:	2310      	movs	r3, #16
 800e626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e62a:	e00e      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e62c:	2320      	movs	r3, #32
 800e62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e632:	e00a      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e634:	2340      	movs	r3, #64	; 0x40
 800e636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e63a:	e006      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e63c:	2380      	movs	r3, #128	; 0x80
 800e63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e642:	e002      	b.n	800e64a <UART_SetConfig+0x5a6>
 800e644:	2380      	movs	r3, #128	; 0x80
 800e646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	4a3f      	ldr	r2, [pc, #252]	; (800e74c <UART_SetConfig+0x6a8>)
 800e650:	4293      	cmp	r3, r2
 800e652:	f040 80f8 	bne.w	800e846 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e656:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e65a:	2b20      	cmp	r3, #32
 800e65c:	dc46      	bgt.n	800e6ec <UART_SetConfig+0x648>
 800e65e:	2b02      	cmp	r3, #2
 800e660:	f2c0 8082 	blt.w	800e768 <UART_SetConfig+0x6c4>
 800e664:	3b02      	subs	r3, #2
 800e666:	2b1e      	cmp	r3, #30
 800e668:	d87e      	bhi.n	800e768 <UART_SetConfig+0x6c4>
 800e66a:	a201      	add	r2, pc, #4	; (adr r2, 800e670 <UART_SetConfig+0x5cc>)
 800e66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e670:	0800e6f3 	.word	0x0800e6f3
 800e674:	0800e769 	.word	0x0800e769
 800e678:	0800e6fb 	.word	0x0800e6fb
 800e67c:	0800e769 	.word	0x0800e769
 800e680:	0800e769 	.word	0x0800e769
 800e684:	0800e769 	.word	0x0800e769
 800e688:	0800e70b 	.word	0x0800e70b
 800e68c:	0800e769 	.word	0x0800e769
 800e690:	0800e769 	.word	0x0800e769
 800e694:	0800e769 	.word	0x0800e769
 800e698:	0800e769 	.word	0x0800e769
 800e69c:	0800e769 	.word	0x0800e769
 800e6a0:	0800e769 	.word	0x0800e769
 800e6a4:	0800e769 	.word	0x0800e769
 800e6a8:	0800e71b 	.word	0x0800e71b
 800e6ac:	0800e769 	.word	0x0800e769
 800e6b0:	0800e769 	.word	0x0800e769
 800e6b4:	0800e769 	.word	0x0800e769
 800e6b8:	0800e769 	.word	0x0800e769
 800e6bc:	0800e769 	.word	0x0800e769
 800e6c0:	0800e769 	.word	0x0800e769
 800e6c4:	0800e769 	.word	0x0800e769
 800e6c8:	0800e769 	.word	0x0800e769
 800e6cc:	0800e769 	.word	0x0800e769
 800e6d0:	0800e769 	.word	0x0800e769
 800e6d4:	0800e769 	.word	0x0800e769
 800e6d8:	0800e769 	.word	0x0800e769
 800e6dc:	0800e769 	.word	0x0800e769
 800e6e0:	0800e769 	.word	0x0800e769
 800e6e4:	0800e769 	.word	0x0800e769
 800e6e8:	0800e75b 	.word	0x0800e75b
 800e6ec:	2b40      	cmp	r3, #64	; 0x40
 800e6ee:	d037      	beq.n	800e760 <UART_SetConfig+0x6bc>
 800e6f0:	e03a      	b.n	800e768 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e6f2:	f7fc fbe9 	bl	800aec8 <HAL_RCCEx_GetD3PCLK1Freq>
 800e6f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e6f8:	e03c      	b.n	800e774 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e6fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7fc fbf8 	bl	800aef4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e708:	e034      	b.n	800e774 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e70a:	f107 0318 	add.w	r3, r7, #24
 800e70e:	4618      	mov	r0, r3
 800e710:	f7fc fd44 	bl	800b19c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e714:	69fb      	ldr	r3, [r7, #28]
 800e716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e718:	e02c      	b.n	800e774 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e71a:	4b09      	ldr	r3, [pc, #36]	; (800e740 <UART_SetConfig+0x69c>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	f003 0320 	and.w	r3, r3, #32
 800e722:	2b00      	cmp	r3, #0
 800e724:	d016      	beq.n	800e754 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e726:	4b06      	ldr	r3, [pc, #24]	; (800e740 <UART_SetConfig+0x69c>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	08db      	lsrs	r3, r3, #3
 800e72c:	f003 0303 	and.w	r3, r3, #3
 800e730:	4a07      	ldr	r2, [pc, #28]	; (800e750 <UART_SetConfig+0x6ac>)
 800e732:	fa22 f303 	lsr.w	r3, r2, r3
 800e736:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e738:	e01c      	b.n	800e774 <UART_SetConfig+0x6d0>
 800e73a:	bf00      	nop
 800e73c:	40011400 	.word	0x40011400
 800e740:	58024400 	.word	0x58024400
 800e744:	40007800 	.word	0x40007800
 800e748:	40007c00 	.word	0x40007c00
 800e74c:	58000c00 	.word	0x58000c00
 800e750:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e754:	4b9d      	ldr	r3, [pc, #628]	; (800e9cc <UART_SetConfig+0x928>)
 800e756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e758:	e00c      	b.n	800e774 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e75a:	4b9d      	ldr	r3, [pc, #628]	; (800e9d0 <UART_SetConfig+0x92c>)
 800e75c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e75e:	e009      	b.n	800e774 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e760:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e764:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e766:	e005      	b.n	800e774 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e768:	2300      	movs	r3, #0
 800e76a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e76c:	2301      	movs	r3, #1
 800e76e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e772:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e776:	2b00      	cmp	r3, #0
 800e778:	f000 81de 	beq.w	800eb38 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e780:	4a94      	ldr	r2, [pc, #592]	; (800e9d4 <UART_SetConfig+0x930>)
 800e782:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e786:	461a      	mov	r2, r3
 800e788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e78a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e78e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	685a      	ldr	r2, [r3, #4]
 800e794:	4613      	mov	r3, r2
 800e796:	005b      	lsls	r3, r3, #1
 800e798:	4413      	add	r3, r2
 800e79a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d305      	bcc.n	800e7ac <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	685b      	ldr	r3, [r3, #4]
 800e7a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e7a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7a8:	429a      	cmp	r2, r3
 800e7aa:	d903      	bls.n	800e7b4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e7b2:	e1c1      	b.n	800eb38 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e7b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	60bb      	str	r3, [r7, #8]
 800e7ba:	60fa      	str	r2, [r7, #12]
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7c0:	4a84      	ldr	r2, [pc, #528]	; (800e9d4 <UART_SetConfig+0x930>)
 800e7c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	603b      	str	r3, [r7, #0]
 800e7cc:	607a      	str	r2, [r7, #4]
 800e7ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e7d6:	f7f1 fd7f 	bl	80002d8 <__aeabi_uldivmod>
 800e7da:	4602      	mov	r2, r0
 800e7dc:	460b      	mov	r3, r1
 800e7de:	4610      	mov	r0, r2
 800e7e0:	4619      	mov	r1, r3
 800e7e2:	f04f 0200 	mov.w	r2, #0
 800e7e6:	f04f 0300 	mov.w	r3, #0
 800e7ea:	020b      	lsls	r3, r1, #8
 800e7ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e7f0:	0202      	lsls	r2, r0, #8
 800e7f2:	6979      	ldr	r1, [r7, #20]
 800e7f4:	6849      	ldr	r1, [r1, #4]
 800e7f6:	0849      	lsrs	r1, r1, #1
 800e7f8:	2000      	movs	r0, #0
 800e7fa:	460c      	mov	r4, r1
 800e7fc:	4605      	mov	r5, r0
 800e7fe:	eb12 0804 	adds.w	r8, r2, r4
 800e802:	eb43 0905 	adc.w	r9, r3, r5
 800e806:	697b      	ldr	r3, [r7, #20]
 800e808:	685b      	ldr	r3, [r3, #4]
 800e80a:	2200      	movs	r2, #0
 800e80c:	469a      	mov	sl, r3
 800e80e:	4693      	mov	fp, r2
 800e810:	4652      	mov	r2, sl
 800e812:	465b      	mov	r3, fp
 800e814:	4640      	mov	r0, r8
 800e816:	4649      	mov	r1, r9
 800e818:	f7f1 fd5e 	bl	80002d8 <__aeabi_uldivmod>
 800e81c:	4602      	mov	r2, r0
 800e81e:	460b      	mov	r3, r1
 800e820:	4613      	mov	r3, r2
 800e822:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e826:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e82a:	d308      	bcc.n	800e83e <UART_SetConfig+0x79a>
 800e82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e832:	d204      	bcs.n	800e83e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e83a:	60da      	str	r2, [r3, #12]
 800e83c:	e17c      	b.n	800eb38 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e83e:	2301      	movs	r3, #1
 800e840:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e844:	e178      	b.n	800eb38 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	69db      	ldr	r3, [r3, #28]
 800e84a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e84e:	f040 80c5 	bne.w	800e9dc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e852:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e856:	2b20      	cmp	r3, #32
 800e858:	dc48      	bgt.n	800e8ec <UART_SetConfig+0x848>
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	db7b      	blt.n	800e956 <UART_SetConfig+0x8b2>
 800e85e:	2b20      	cmp	r3, #32
 800e860:	d879      	bhi.n	800e956 <UART_SetConfig+0x8b2>
 800e862:	a201      	add	r2, pc, #4	; (adr r2, 800e868 <UART_SetConfig+0x7c4>)
 800e864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e868:	0800e8f3 	.word	0x0800e8f3
 800e86c:	0800e8fb 	.word	0x0800e8fb
 800e870:	0800e957 	.word	0x0800e957
 800e874:	0800e957 	.word	0x0800e957
 800e878:	0800e903 	.word	0x0800e903
 800e87c:	0800e957 	.word	0x0800e957
 800e880:	0800e957 	.word	0x0800e957
 800e884:	0800e957 	.word	0x0800e957
 800e888:	0800e913 	.word	0x0800e913
 800e88c:	0800e957 	.word	0x0800e957
 800e890:	0800e957 	.word	0x0800e957
 800e894:	0800e957 	.word	0x0800e957
 800e898:	0800e957 	.word	0x0800e957
 800e89c:	0800e957 	.word	0x0800e957
 800e8a0:	0800e957 	.word	0x0800e957
 800e8a4:	0800e957 	.word	0x0800e957
 800e8a8:	0800e923 	.word	0x0800e923
 800e8ac:	0800e957 	.word	0x0800e957
 800e8b0:	0800e957 	.word	0x0800e957
 800e8b4:	0800e957 	.word	0x0800e957
 800e8b8:	0800e957 	.word	0x0800e957
 800e8bc:	0800e957 	.word	0x0800e957
 800e8c0:	0800e957 	.word	0x0800e957
 800e8c4:	0800e957 	.word	0x0800e957
 800e8c8:	0800e957 	.word	0x0800e957
 800e8cc:	0800e957 	.word	0x0800e957
 800e8d0:	0800e957 	.word	0x0800e957
 800e8d4:	0800e957 	.word	0x0800e957
 800e8d8:	0800e957 	.word	0x0800e957
 800e8dc:	0800e957 	.word	0x0800e957
 800e8e0:	0800e957 	.word	0x0800e957
 800e8e4:	0800e957 	.word	0x0800e957
 800e8e8:	0800e949 	.word	0x0800e949
 800e8ec:	2b40      	cmp	r3, #64	; 0x40
 800e8ee:	d02e      	beq.n	800e94e <UART_SetConfig+0x8aa>
 800e8f0:	e031      	b.n	800e956 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e8f2:	f7fa fea5 	bl	8009640 <HAL_RCC_GetPCLK1Freq>
 800e8f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e8f8:	e033      	b.n	800e962 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e8fa:	f7fa feb7 	bl	800966c <HAL_RCC_GetPCLK2Freq>
 800e8fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e900:	e02f      	b.n	800e962 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e906:	4618      	mov	r0, r3
 800e908:	f7fc faf4 	bl	800aef4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e910:	e027      	b.n	800e962 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e912:	f107 0318 	add.w	r3, r7, #24
 800e916:	4618      	mov	r0, r3
 800e918:	f7fc fc40 	bl	800b19c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e91c:	69fb      	ldr	r3, [r7, #28]
 800e91e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e920:	e01f      	b.n	800e962 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e922:	4b2d      	ldr	r3, [pc, #180]	; (800e9d8 <UART_SetConfig+0x934>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	f003 0320 	and.w	r3, r3, #32
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d009      	beq.n	800e942 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e92e:	4b2a      	ldr	r3, [pc, #168]	; (800e9d8 <UART_SetConfig+0x934>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	08db      	lsrs	r3, r3, #3
 800e934:	f003 0303 	and.w	r3, r3, #3
 800e938:	4a24      	ldr	r2, [pc, #144]	; (800e9cc <UART_SetConfig+0x928>)
 800e93a:	fa22 f303 	lsr.w	r3, r2, r3
 800e93e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e940:	e00f      	b.n	800e962 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e942:	4b22      	ldr	r3, [pc, #136]	; (800e9cc <UART_SetConfig+0x928>)
 800e944:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e946:	e00c      	b.n	800e962 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e948:	4b21      	ldr	r3, [pc, #132]	; (800e9d0 <UART_SetConfig+0x92c>)
 800e94a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e94c:	e009      	b.n	800e962 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e94e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e954:	e005      	b.n	800e962 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e956:	2300      	movs	r3, #0
 800e958:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e95a:	2301      	movs	r3, #1
 800e95c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e960:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e964:	2b00      	cmp	r3, #0
 800e966:	f000 80e7 	beq.w	800eb38 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e96e:	4a19      	ldr	r2, [pc, #100]	; (800e9d4 <UART_SetConfig+0x930>)
 800e970:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e974:	461a      	mov	r2, r3
 800e976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e978:	fbb3 f3f2 	udiv	r3, r3, r2
 800e97c:	005a      	lsls	r2, r3, #1
 800e97e:	697b      	ldr	r3, [r7, #20]
 800e980:	685b      	ldr	r3, [r3, #4]
 800e982:	085b      	lsrs	r3, r3, #1
 800e984:	441a      	add	r2, r3
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	685b      	ldr	r3, [r3, #4]
 800e98a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e98e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e992:	2b0f      	cmp	r3, #15
 800e994:	d916      	bls.n	800e9c4 <UART_SetConfig+0x920>
 800e996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e99c:	d212      	bcs.n	800e9c4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9a0:	b29b      	uxth	r3, r3
 800e9a2:	f023 030f 	bic.w	r3, r3, #15
 800e9a6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9aa:	085b      	lsrs	r3, r3, #1
 800e9ac:	b29b      	uxth	r3, r3
 800e9ae:	f003 0307 	and.w	r3, r3, #7
 800e9b2:	b29a      	uxth	r2, r3
 800e9b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e9b6:	4313      	orrs	r3, r2
 800e9b8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e9c0:	60da      	str	r2, [r3, #12]
 800e9c2:	e0b9      	b.n	800eb38 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e9c4:	2301      	movs	r3, #1
 800e9c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e9ca:	e0b5      	b.n	800eb38 <UART_SetConfig+0xa94>
 800e9cc:	03d09000 	.word	0x03d09000
 800e9d0:	003d0900 	.word	0x003d0900
 800e9d4:	08010064 	.word	0x08010064
 800e9d8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e9dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e9e0:	2b20      	cmp	r3, #32
 800e9e2:	dc49      	bgt.n	800ea78 <UART_SetConfig+0x9d4>
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	db7c      	blt.n	800eae2 <UART_SetConfig+0xa3e>
 800e9e8:	2b20      	cmp	r3, #32
 800e9ea:	d87a      	bhi.n	800eae2 <UART_SetConfig+0xa3e>
 800e9ec:	a201      	add	r2, pc, #4	; (adr r2, 800e9f4 <UART_SetConfig+0x950>)
 800e9ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9f2:	bf00      	nop
 800e9f4:	0800ea7f 	.word	0x0800ea7f
 800e9f8:	0800ea87 	.word	0x0800ea87
 800e9fc:	0800eae3 	.word	0x0800eae3
 800ea00:	0800eae3 	.word	0x0800eae3
 800ea04:	0800ea8f 	.word	0x0800ea8f
 800ea08:	0800eae3 	.word	0x0800eae3
 800ea0c:	0800eae3 	.word	0x0800eae3
 800ea10:	0800eae3 	.word	0x0800eae3
 800ea14:	0800ea9f 	.word	0x0800ea9f
 800ea18:	0800eae3 	.word	0x0800eae3
 800ea1c:	0800eae3 	.word	0x0800eae3
 800ea20:	0800eae3 	.word	0x0800eae3
 800ea24:	0800eae3 	.word	0x0800eae3
 800ea28:	0800eae3 	.word	0x0800eae3
 800ea2c:	0800eae3 	.word	0x0800eae3
 800ea30:	0800eae3 	.word	0x0800eae3
 800ea34:	0800eaaf 	.word	0x0800eaaf
 800ea38:	0800eae3 	.word	0x0800eae3
 800ea3c:	0800eae3 	.word	0x0800eae3
 800ea40:	0800eae3 	.word	0x0800eae3
 800ea44:	0800eae3 	.word	0x0800eae3
 800ea48:	0800eae3 	.word	0x0800eae3
 800ea4c:	0800eae3 	.word	0x0800eae3
 800ea50:	0800eae3 	.word	0x0800eae3
 800ea54:	0800eae3 	.word	0x0800eae3
 800ea58:	0800eae3 	.word	0x0800eae3
 800ea5c:	0800eae3 	.word	0x0800eae3
 800ea60:	0800eae3 	.word	0x0800eae3
 800ea64:	0800eae3 	.word	0x0800eae3
 800ea68:	0800eae3 	.word	0x0800eae3
 800ea6c:	0800eae3 	.word	0x0800eae3
 800ea70:	0800eae3 	.word	0x0800eae3
 800ea74:	0800ead5 	.word	0x0800ead5
 800ea78:	2b40      	cmp	r3, #64	; 0x40
 800ea7a:	d02e      	beq.n	800eada <UART_SetConfig+0xa36>
 800ea7c:	e031      	b.n	800eae2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea7e:	f7fa fddf 	bl	8009640 <HAL_RCC_GetPCLK1Freq>
 800ea82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea84:	e033      	b.n	800eaee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea86:	f7fa fdf1 	bl	800966c <HAL_RCC_GetPCLK2Freq>
 800ea8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea8c:	e02f      	b.n	800eaee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7fc fa2e 	bl	800aef4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ea98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea9c:	e027      	b.n	800eaee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea9e:	f107 0318 	add.w	r3, r7, #24
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f7fc fb7a 	bl	800b19c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eaa8:	69fb      	ldr	r3, [r7, #28]
 800eaaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eaac:	e01f      	b.n	800eaee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eaae:	4b2d      	ldr	r3, [pc, #180]	; (800eb64 <UART_SetConfig+0xac0>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	f003 0320 	and.w	r3, r3, #32
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d009      	beq.n	800eace <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eaba:	4b2a      	ldr	r3, [pc, #168]	; (800eb64 <UART_SetConfig+0xac0>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	08db      	lsrs	r3, r3, #3
 800eac0:	f003 0303 	and.w	r3, r3, #3
 800eac4:	4a28      	ldr	r2, [pc, #160]	; (800eb68 <UART_SetConfig+0xac4>)
 800eac6:	fa22 f303 	lsr.w	r3, r2, r3
 800eaca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eacc:	e00f      	b.n	800eaee <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800eace:	4b26      	ldr	r3, [pc, #152]	; (800eb68 <UART_SetConfig+0xac4>)
 800ead0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ead2:	e00c      	b.n	800eaee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ead4:	4b25      	ldr	r3, [pc, #148]	; (800eb6c <UART_SetConfig+0xac8>)
 800ead6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ead8:	e009      	b.n	800eaee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eae0:	e005      	b.n	800eaee <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800eae2:	2300      	movs	r3, #0
 800eae4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800eae6:	2301      	movs	r3, #1
 800eae8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800eaec:	bf00      	nop
    }

    if (pclk != 0U)
 800eaee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d021      	beq.n	800eb38 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaf8:	4a1d      	ldr	r2, [pc, #116]	; (800eb70 <UART_SetConfig+0xacc>)
 800eafa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eafe:	461a      	mov	r2, r3
 800eb00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb02:	fbb3 f2f2 	udiv	r2, r3, r2
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	685b      	ldr	r3, [r3, #4]
 800eb0a:	085b      	lsrs	r3, r3, #1
 800eb0c:	441a      	add	r2, r3
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	685b      	ldr	r3, [r3, #4]
 800eb12:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb16:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb1a:	2b0f      	cmp	r3, #15
 800eb1c:	d909      	bls.n	800eb32 <UART_SetConfig+0xa8e>
 800eb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb24:	d205      	bcs.n	800eb32 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800eb26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb28:	b29a      	uxth	r2, r3
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	60da      	str	r2, [r3, #12]
 800eb30:	e002      	b.n	800eb38 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800eb32:	2301      	movs	r3, #1
 800eb34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	2201      	movs	r2, #1
 800eb44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eb48:	697b      	ldr	r3, [r7, #20]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800eb4e:	697b      	ldr	r3, [r7, #20]
 800eb50:	2200      	movs	r2, #0
 800eb52:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800eb54:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3748      	adds	r7, #72	; 0x48
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eb62:	bf00      	nop
 800eb64:	58024400 	.word	0x58024400
 800eb68:	03d09000 	.word	0x03d09000
 800eb6c:	003d0900 	.word	0x003d0900
 800eb70:	08010064 	.word	0x08010064

0800eb74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800eb74:	b480      	push	{r7}
 800eb76:	b083      	sub	sp, #12
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb80:	f003 0301 	and.w	r3, r3, #1
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d00a      	beq.n	800eb9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	430a      	orrs	r2, r1
 800eb9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eba2:	f003 0302 	and.w	r3, r3, #2
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d00a      	beq.n	800ebc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	685b      	ldr	r3, [r3, #4]
 800ebb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	430a      	orrs	r2, r1
 800ebbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebc4:	f003 0304 	and.w	r3, r3, #4
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d00a      	beq.n	800ebe2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	685b      	ldr	r3, [r3, #4]
 800ebd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	430a      	orrs	r2, r1
 800ebe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebe6:	f003 0308 	and.w	r3, r3, #8
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d00a      	beq.n	800ec04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	430a      	orrs	r2, r1
 800ec02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec08:	f003 0310 	and.w	r3, r3, #16
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d00a      	beq.n	800ec26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	689b      	ldr	r3, [r3, #8]
 800ec16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	430a      	orrs	r2, r1
 800ec24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec2a:	f003 0320 	and.w	r3, r3, #32
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d00a      	beq.n	800ec48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	689b      	ldr	r3, [r3, #8]
 800ec38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	430a      	orrs	r2, r1
 800ec46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d01a      	beq.n	800ec8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	685b      	ldr	r3, [r3, #4]
 800ec5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	430a      	orrs	r2, r1
 800ec68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec72:	d10a      	bne.n	800ec8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	685b      	ldr	r3, [r3, #4]
 800ec7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	430a      	orrs	r2, r1
 800ec88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d00a      	beq.n	800ecac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	685b      	ldr	r3, [r3, #4]
 800ec9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	430a      	orrs	r2, r1
 800ecaa:	605a      	str	r2, [r3, #4]
  }
}
 800ecac:	bf00      	nop
 800ecae:	370c      	adds	r7, #12
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb6:	4770      	bx	lr

0800ecb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b086      	sub	sp, #24
 800ecbc:	af02      	add	r7, sp, #8
 800ecbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ecc8:	f7f3 fe9a 	bl	8002a00 <HAL_GetTick>
 800eccc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	f003 0308 	and.w	r3, r3, #8
 800ecd8:	2b08      	cmp	r3, #8
 800ecda:	d10e      	bne.n	800ecfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ecdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ece0:	9300      	str	r3, [sp, #0]
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	2200      	movs	r2, #0
 800ece6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f000 f82f 	bl	800ed4e <UART_WaitOnFlagUntilTimeout>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d001      	beq.n	800ecfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ecf6:	2303      	movs	r3, #3
 800ecf8:	e025      	b.n	800ed46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	f003 0304 	and.w	r3, r3, #4
 800ed04:	2b04      	cmp	r3, #4
 800ed06:	d10e      	bne.n	800ed26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ed08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ed0c:	9300      	str	r3, [sp, #0]
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	2200      	movs	r2, #0
 800ed12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f000 f819 	bl	800ed4e <UART_WaitOnFlagUntilTimeout>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d001      	beq.n	800ed26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ed22:	2303      	movs	r3, #3
 800ed24:	e00f      	b.n	800ed46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	2220      	movs	r2, #32
 800ed2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2220      	movs	r2, #32
 800ed32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2200      	movs	r2, #0
 800ed3a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2200      	movs	r2, #0
 800ed40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ed44:	2300      	movs	r3, #0
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3710      	adds	r7, #16
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}

0800ed4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ed4e:	b580      	push	{r7, lr}
 800ed50:	b09c      	sub	sp, #112	; 0x70
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	60f8      	str	r0, [r7, #12]
 800ed56:	60b9      	str	r1, [r7, #8]
 800ed58:	603b      	str	r3, [r7, #0]
 800ed5a:	4613      	mov	r3, r2
 800ed5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed5e:	e0a9      	b.n	800eeb4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ed60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed66:	f000 80a5 	beq.w	800eeb4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ed6a:	f7f3 fe49 	bl	8002a00 <HAL_GetTick>
 800ed6e:	4602      	mov	r2, r0
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	1ad3      	subs	r3, r2, r3
 800ed74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d302      	bcc.n	800ed80 <UART_WaitOnFlagUntilTimeout+0x32>
 800ed7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d140      	bne.n	800ee02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed88:	e853 3f00 	ldrex	r3, [r3]
 800ed8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ed8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ed94:	667b      	str	r3, [r7, #100]	; 0x64
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	461a      	mov	r2, r3
 800ed9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eda0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eda2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eda4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800eda6:	e841 2300 	strex	r3, r2, [r1]
 800edaa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800edac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d1e6      	bne.n	800ed80 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	3308      	adds	r3, #8
 800edb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edbc:	e853 3f00 	ldrex	r3, [r3]
 800edc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800edc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edc4:	f023 0301 	bic.w	r3, r3, #1
 800edc8:	663b      	str	r3, [r7, #96]	; 0x60
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	3308      	adds	r3, #8
 800edd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800edd2:	64ba      	str	r2, [r7, #72]	; 0x48
 800edd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800edd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800edda:	e841 2300 	strex	r3, r2, [r1]
 800edde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ede0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d1e5      	bne.n	800edb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	2220      	movs	r2, #32
 800edea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2220      	movs	r2, #32
 800edf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	2200      	movs	r2, #0
 800edfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800edfe:	2303      	movs	r3, #3
 800ee00:	e069      	b.n	800eed6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	f003 0304 	and.w	r3, r3, #4
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d051      	beq.n	800eeb4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	69db      	ldr	r3, [r3, #28]
 800ee16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ee1e:	d149      	bne.n	800eeb4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ee28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee32:	e853 3f00 	ldrex	r3, [r3]
 800ee36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ee38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ee3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	461a      	mov	r2, r3
 800ee46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee48:	637b      	str	r3, [r7, #52]	; 0x34
 800ee4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ee4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee50:	e841 2300 	strex	r3, r2, [r1]
 800ee54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ee56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d1e6      	bne.n	800ee2a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	3308      	adds	r3, #8
 800ee62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	e853 3f00 	ldrex	r3, [r3]
 800ee6a:	613b      	str	r3, [r7, #16]
   return(result);
 800ee6c:	693b      	ldr	r3, [r7, #16]
 800ee6e:	f023 0301 	bic.w	r3, r3, #1
 800ee72:	66bb      	str	r3, [r7, #104]	; 0x68
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	3308      	adds	r3, #8
 800ee7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ee7c:	623a      	str	r2, [r7, #32]
 800ee7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee80:	69f9      	ldr	r1, [r7, #28]
 800ee82:	6a3a      	ldr	r2, [r7, #32]
 800ee84:	e841 2300 	strex	r3, r2, [r1]
 800ee88:	61bb      	str	r3, [r7, #24]
   return(result);
 800ee8a:	69bb      	ldr	r3, [r7, #24]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d1e5      	bne.n	800ee5c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	2220      	movs	r2, #32
 800ee94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	2220      	movs	r2, #32
 800ee9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	2220      	movs	r2, #32
 800eea4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	2200      	movs	r2, #0
 800eeac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800eeb0:	2303      	movs	r3, #3
 800eeb2:	e010      	b.n	800eed6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	69da      	ldr	r2, [r3, #28]
 800eeba:	68bb      	ldr	r3, [r7, #8]
 800eebc:	4013      	ands	r3, r2
 800eebe:	68ba      	ldr	r2, [r7, #8]
 800eec0:	429a      	cmp	r2, r3
 800eec2:	bf0c      	ite	eq
 800eec4:	2301      	moveq	r3, #1
 800eec6:	2300      	movne	r3, #0
 800eec8:	b2db      	uxtb	r3, r3
 800eeca:	461a      	mov	r2, r3
 800eecc:	79fb      	ldrb	r3, [r7, #7]
 800eece:	429a      	cmp	r2, r3
 800eed0:	f43f af46 	beq.w	800ed60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eed4:	2300      	movs	r3, #0
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	3770      	adds	r7, #112	; 0x70
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}
	...

0800eee0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eee0:	b480      	push	{r7}
 800eee2:	b0a3      	sub	sp, #140	; 0x8c
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	60f8      	str	r0, [r7, #12]
 800eee8:	60b9      	str	r1, [r7, #8]
 800eeea:	4613      	mov	r3, r2
 800eeec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	68ba      	ldr	r2, [r7, #8]
 800eef2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	88fa      	ldrh	r2, [r7, #6]
 800eef8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	88fa      	ldrh	r2, [r7, #6]
 800ef00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	2200      	movs	r2, #0
 800ef08:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	689b      	ldr	r3, [r3, #8]
 800ef0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef12:	d10e      	bne.n	800ef32 <UART_Start_Receive_IT+0x52>
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	691b      	ldr	r3, [r3, #16]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d105      	bne.n	800ef28 <UART_Start_Receive_IT+0x48>
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ef22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef26:	e02d      	b.n	800ef84 <UART_Start_Receive_IT+0xa4>
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	22ff      	movs	r2, #255	; 0xff
 800ef2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef30:	e028      	b.n	800ef84 <UART_Start_Receive_IT+0xa4>
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	689b      	ldr	r3, [r3, #8]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d10d      	bne.n	800ef56 <UART_Start_Receive_IT+0x76>
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	691b      	ldr	r3, [r3, #16]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d104      	bne.n	800ef4c <UART_Start_Receive_IT+0x6c>
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	22ff      	movs	r2, #255	; 0xff
 800ef46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef4a:	e01b      	b.n	800ef84 <UART_Start_Receive_IT+0xa4>
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	227f      	movs	r2, #127	; 0x7f
 800ef50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef54:	e016      	b.n	800ef84 <UART_Start_Receive_IT+0xa4>
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	689b      	ldr	r3, [r3, #8]
 800ef5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ef5e:	d10d      	bne.n	800ef7c <UART_Start_Receive_IT+0x9c>
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	691b      	ldr	r3, [r3, #16]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d104      	bne.n	800ef72 <UART_Start_Receive_IT+0x92>
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	227f      	movs	r2, #127	; 0x7f
 800ef6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef70:	e008      	b.n	800ef84 <UART_Start_Receive_IT+0xa4>
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	223f      	movs	r2, #63	; 0x3f
 800ef76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef7a:	e003      	b.n	800ef84 <UART_Start_Receive_IT+0xa4>
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	2200      	movs	r2, #0
 800ef80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	2200      	movs	r2, #0
 800ef88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	2222      	movs	r2, #34	; 0x22
 800ef90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	3308      	adds	r3, #8
 800ef9a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef9e:	e853 3f00 	ldrex	r3, [r3]
 800efa2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800efa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800efa6:	f043 0301 	orr.w	r3, r3, #1
 800efaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	3308      	adds	r3, #8
 800efb4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800efb8:	673a      	str	r2, [r7, #112]	; 0x70
 800efba:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efbc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800efbe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800efc0:	e841 2300 	strex	r3, r2, [r1]
 800efc4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800efc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d1e3      	bne.n	800ef94 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800efd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800efd4:	d153      	bne.n	800f07e <UART_Start_Receive_IT+0x19e>
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800efdc:	88fa      	ldrh	r2, [r7, #6]
 800efde:	429a      	cmp	r2, r3
 800efe0:	d34d      	bcc.n	800f07e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	689b      	ldr	r3, [r3, #8]
 800efe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efea:	d107      	bne.n	800effc <UART_Start_Receive_IT+0x11c>
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	691b      	ldr	r3, [r3, #16]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d103      	bne.n	800effc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	4a4b      	ldr	r2, [pc, #300]	; (800f124 <UART_Start_Receive_IT+0x244>)
 800eff8:	671a      	str	r2, [r3, #112]	; 0x70
 800effa:	e002      	b.n	800f002 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	4a4a      	ldr	r2, [pc, #296]	; (800f128 <UART_Start_Receive_IT+0x248>)
 800f000:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	2200      	movs	r2, #0
 800f006:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	691b      	ldr	r3, [r3, #16]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d01a      	beq.n	800f048 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f01a:	e853 3f00 	ldrex	r3, [r3]
 800f01e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f026:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	461a      	mov	r2, r3
 800f030:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f034:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f036:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f038:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f03a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f03c:	e841 2300 	strex	r3, r2, [r1]
 800f040:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f044:	2b00      	cmp	r3, #0
 800f046:	d1e4      	bne.n	800f012 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	3308      	adds	r3, #8
 800f04e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f052:	e853 3f00 	ldrex	r3, [r3]
 800f056:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f05a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f05e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	3308      	adds	r3, #8
 800f066:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f068:	64ba      	str	r2, [r7, #72]	; 0x48
 800f06a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f06c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f06e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f070:	e841 2300 	strex	r3, r2, [r1]
 800f074:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d1e5      	bne.n	800f048 <UART_Start_Receive_IT+0x168>
 800f07c:	e04a      	b.n	800f114 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	689b      	ldr	r3, [r3, #8]
 800f082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f086:	d107      	bne.n	800f098 <UART_Start_Receive_IT+0x1b8>
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	691b      	ldr	r3, [r3, #16]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d103      	bne.n	800f098 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	4a26      	ldr	r2, [pc, #152]	; (800f12c <UART_Start_Receive_IT+0x24c>)
 800f094:	671a      	str	r2, [r3, #112]	; 0x70
 800f096:	e002      	b.n	800f09e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	4a25      	ldr	r2, [pc, #148]	; (800f130 <UART_Start_Receive_IT+0x250>)
 800f09c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	691b      	ldr	r3, [r3, #16]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d019      	beq.n	800f0e2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b6:	e853 3f00 	ldrex	r3, [r3]
 800f0ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0be:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f0c2:	677b      	str	r3, [r7, #116]	; 0x74
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	461a      	mov	r2, r3
 800f0ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f0cc:	637b      	str	r3, [r7, #52]	; 0x34
 800f0ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f0d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0d4:	e841 2300 	strex	r3, r2, [r1]
 800f0d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d1e6      	bne.n	800f0ae <UART_Start_Receive_IT+0x1ce>
 800f0e0:	e018      	b.n	800f114 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0e8:	697b      	ldr	r3, [r7, #20]
 800f0ea:	e853 3f00 	ldrex	r3, [r3]
 800f0ee:	613b      	str	r3, [r7, #16]
   return(result);
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	f043 0320 	orr.w	r3, r3, #32
 800f0f6:	67bb      	str	r3, [r7, #120]	; 0x78
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	461a      	mov	r2, r3
 800f0fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f100:	623b      	str	r3, [r7, #32]
 800f102:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f104:	69f9      	ldr	r1, [r7, #28]
 800f106:	6a3a      	ldr	r2, [r7, #32]
 800f108:	e841 2300 	strex	r3, r2, [r1]
 800f10c:	61bb      	str	r3, [r7, #24]
   return(result);
 800f10e:	69bb      	ldr	r3, [r7, #24]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d1e6      	bne.n	800f0e2 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800f114:	2300      	movs	r3, #0
}
 800f116:	4618      	mov	r0, r3
 800f118:	378c      	adds	r7, #140	; 0x8c
 800f11a:	46bd      	mov	sp, r7
 800f11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f120:	4770      	bx	lr
 800f122:	bf00      	nop
 800f124:	0800f83d 	.word	0x0800f83d
 800f128:	0800f545 	.word	0x0800f545
 800f12c:	0800f3e3 	.word	0x0800f3e3
 800f130:	0800f283 	.word	0x0800f283

0800f134 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f134:	b480      	push	{r7}
 800f136:	b095      	sub	sp, #84	; 0x54
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f144:	e853 3f00 	ldrex	r3, [r3]
 800f148:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f14c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f150:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	461a      	mov	r2, r3
 800f158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f15a:	643b      	str	r3, [r7, #64]	; 0x40
 800f15c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f15e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f160:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f162:	e841 2300 	strex	r3, r2, [r1]
 800f166:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d1e6      	bne.n	800f13c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	3308      	adds	r3, #8
 800f174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f176:	6a3b      	ldr	r3, [r7, #32]
 800f178:	e853 3f00 	ldrex	r3, [r3]
 800f17c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f17e:	69fa      	ldr	r2, [r7, #28]
 800f180:	4b1e      	ldr	r3, [pc, #120]	; (800f1fc <UART_EndRxTransfer+0xc8>)
 800f182:	4013      	ands	r3, r2
 800f184:	64bb      	str	r3, [r7, #72]	; 0x48
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	3308      	adds	r3, #8
 800f18c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f18e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f190:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f192:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f196:	e841 2300 	strex	r3, r2, [r1]
 800f19a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d1e5      	bne.n	800f16e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1a6:	2b01      	cmp	r3, #1
 800f1a8:	d118      	bne.n	800f1dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	e853 3f00 	ldrex	r3, [r3]
 800f1b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800f1b8:	68bb      	ldr	r3, [r7, #8]
 800f1ba:	f023 0310 	bic.w	r3, r3, #16
 800f1be:	647b      	str	r3, [r7, #68]	; 0x44
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	461a      	mov	r2, r3
 800f1c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1c8:	61bb      	str	r3, [r7, #24]
 800f1ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1cc:	6979      	ldr	r1, [r7, #20]
 800f1ce:	69ba      	ldr	r2, [r7, #24]
 800f1d0:	e841 2300 	strex	r3, r2, [r1]
 800f1d4:	613b      	str	r3, [r7, #16]
   return(result);
 800f1d6:	693b      	ldr	r3, [r7, #16]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d1e6      	bne.n	800f1aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2220      	movs	r2, #32
 800f1e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f1f0:	bf00      	nop
 800f1f2:	3754      	adds	r7, #84	; 0x54
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fa:	4770      	bx	lr
 800f1fc:	effffffe 	.word	0xeffffffe

0800f200 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b084      	sub	sp, #16
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f20c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	2200      	movs	r2, #0
 800f212:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	2200      	movs	r2, #0
 800f21a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f21e:	68f8      	ldr	r0, [r7, #12]
 800f220:	f7fe ff2a 	bl	800e078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f224:	bf00      	nop
 800f226:	3710      	adds	r7, #16
 800f228:	46bd      	mov	sp, r7
 800f22a:	bd80      	pop	{r7, pc}

0800f22c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b088      	sub	sp, #32
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	e853 3f00 	ldrex	r3, [r3]
 800f240:	60bb      	str	r3, [r7, #8]
   return(result);
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f248:	61fb      	str	r3, [r7, #28]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	461a      	mov	r2, r3
 800f250:	69fb      	ldr	r3, [r7, #28]
 800f252:	61bb      	str	r3, [r7, #24]
 800f254:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f256:	6979      	ldr	r1, [r7, #20]
 800f258:	69ba      	ldr	r2, [r7, #24]
 800f25a:	e841 2300 	strex	r3, r2, [r1]
 800f25e:	613b      	str	r3, [r7, #16]
   return(result);
 800f260:	693b      	ldr	r3, [r7, #16]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d1e6      	bne.n	800f234 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	2220      	movs	r2, #32
 800f26a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2200      	movs	r2, #0
 800f272:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f7fe fef5 	bl	800e064 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f27a:	bf00      	nop
 800f27c:	3720      	adds	r7, #32
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}

0800f282 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f282:	b580      	push	{r7, lr}
 800f284:	b096      	sub	sp, #88	; 0x58
 800f286:	af00      	add	r7, sp, #0
 800f288:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f290:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f29a:	2b22      	cmp	r3, #34	; 0x22
 800f29c:	f040 8095 	bne.w	800f3ca <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2a6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f2aa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f2ae:	b2d9      	uxtb	r1, r3
 800f2b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f2b4:	b2da      	uxtb	r2, r3
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2ba:	400a      	ands	r2, r1
 800f2bc:	b2d2      	uxtb	r2, r2
 800f2be:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2c4:	1c5a      	adds	r2, r3, #1
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f2d0:	b29b      	uxth	r3, r3
 800f2d2:	3b01      	subs	r3, #1
 800f2d4:	b29a      	uxth	r2, r3
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f2e2:	b29b      	uxth	r3, r3
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d178      	bne.n	800f3da <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f0:	e853 3f00 	ldrex	r3, [r3]
 800f2f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f2f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f2fc:	653b      	str	r3, [r7, #80]	; 0x50
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	461a      	mov	r2, r3
 800f304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f306:	647b      	str	r3, [r7, #68]	; 0x44
 800f308:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f30a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f30c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f30e:	e841 2300 	strex	r3, r2, [r1]
 800f312:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f316:	2b00      	cmp	r3, #0
 800f318:	d1e6      	bne.n	800f2e8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	3308      	adds	r3, #8
 800f320:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f324:	e853 3f00 	ldrex	r3, [r3]
 800f328:	623b      	str	r3, [r7, #32]
   return(result);
 800f32a:	6a3b      	ldr	r3, [r7, #32]
 800f32c:	f023 0301 	bic.w	r3, r3, #1
 800f330:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	3308      	adds	r3, #8
 800f338:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f33a:	633a      	str	r2, [r7, #48]	; 0x30
 800f33c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f33e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f342:	e841 2300 	strex	r3, r2, [r1]
 800f346:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d1e5      	bne.n	800f31a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2220      	movs	r2, #32
 800f352:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2200      	movs	r2, #0
 800f35a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f360:	2b01      	cmp	r3, #1
 800f362:	d12e      	bne.n	800f3c2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2200      	movs	r2, #0
 800f368:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	e853 3f00 	ldrex	r3, [r3]
 800f376:	60fb      	str	r3, [r7, #12]
   return(result);
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	f023 0310 	bic.w	r3, r3, #16
 800f37e:	64bb      	str	r3, [r7, #72]	; 0x48
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	461a      	mov	r2, r3
 800f386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f388:	61fb      	str	r3, [r7, #28]
 800f38a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f38c:	69b9      	ldr	r1, [r7, #24]
 800f38e:	69fa      	ldr	r2, [r7, #28]
 800f390:	e841 2300 	strex	r3, r2, [r1]
 800f394:	617b      	str	r3, [r7, #20]
   return(result);
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d1e6      	bne.n	800f36a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	69db      	ldr	r3, [r3, #28]
 800f3a2:	f003 0310 	and.w	r3, r3, #16
 800f3a6:	2b10      	cmp	r3, #16
 800f3a8:	d103      	bne.n	800f3b2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	2210      	movs	r2, #16
 800f3b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f3b8:	4619      	mov	r1, r3
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f7fe fe66 	bl	800e08c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f3c0:	e00b      	b.n	800f3da <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f7f1 fd26 	bl	8000e14 <HAL_UART_RxCpltCallback>
}
 800f3c8:	e007      	b.n	800f3da <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	699a      	ldr	r2, [r3, #24]
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	f042 0208 	orr.w	r2, r2, #8
 800f3d8:	619a      	str	r2, [r3, #24]
}
 800f3da:	bf00      	nop
 800f3dc:	3758      	adds	r7, #88	; 0x58
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}

0800f3e2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f3e2:	b580      	push	{r7, lr}
 800f3e4:	b096      	sub	sp, #88	; 0x58
 800f3e6:	af00      	add	r7, sp, #0
 800f3e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f3f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3fa:	2b22      	cmp	r3, #34	; 0x22
 800f3fc:	f040 8095 	bne.w	800f52a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f406:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f40e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f410:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f414:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f418:	4013      	ands	r3, r2
 800f41a:	b29a      	uxth	r2, r3
 800f41c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f41e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f424:	1c9a      	adds	r2, r3, #2
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f430:	b29b      	uxth	r3, r3
 800f432:	3b01      	subs	r3, #1
 800f434:	b29a      	uxth	r2, r3
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f442:	b29b      	uxth	r3, r3
 800f444:	2b00      	cmp	r3, #0
 800f446:	d178      	bne.n	800f53a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f450:	e853 3f00 	ldrex	r3, [r3]
 800f454:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f458:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f45c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	461a      	mov	r2, r3
 800f464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f466:	643b      	str	r3, [r7, #64]	; 0x40
 800f468:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f46a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f46c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f46e:	e841 2300 	strex	r3, r2, [r1]
 800f472:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f476:	2b00      	cmp	r3, #0
 800f478:	d1e6      	bne.n	800f448 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	3308      	adds	r3, #8
 800f480:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f482:	6a3b      	ldr	r3, [r7, #32]
 800f484:	e853 3f00 	ldrex	r3, [r3]
 800f488:	61fb      	str	r3, [r7, #28]
   return(result);
 800f48a:	69fb      	ldr	r3, [r7, #28]
 800f48c:	f023 0301 	bic.w	r3, r3, #1
 800f490:	64bb      	str	r3, [r7, #72]	; 0x48
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	3308      	adds	r3, #8
 800f498:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f49a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f49c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f49e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f4a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4a2:	e841 2300 	strex	r3, r2, [r1]
 800f4a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d1e5      	bne.n	800f47a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2220      	movs	r2, #32
 800f4b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4c0:	2b01      	cmp	r3, #1
 800f4c2:	d12e      	bne.n	800f522 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	e853 3f00 	ldrex	r3, [r3]
 800f4d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	f023 0310 	bic.w	r3, r3, #16
 800f4de:	647b      	str	r3, [r7, #68]	; 0x44
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	461a      	mov	r2, r3
 800f4e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4e8:	61bb      	str	r3, [r7, #24]
 800f4ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4ec:	6979      	ldr	r1, [r7, #20]
 800f4ee:	69ba      	ldr	r2, [r7, #24]
 800f4f0:	e841 2300 	strex	r3, r2, [r1]
 800f4f4:	613b      	str	r3, [r7, #16]
   return(result);
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d1e6      	bne.n	800f4ca <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	69db      	ldr	r3, [r3, #28]
 800f502:	f003 0310 	and.w	r3, r3, #16
 800f506:	2b10      	cmp	r3, #16
 800f508:	d103      	bne.n	800f512 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	2210      	movs	r2, #16
 800f510:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f518:	4619      	mov	r1, r3
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f7fe fdb6 	bl	800e08c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f520:	e00b      	b.n	800f53a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f7f1 fc76 	bl	8000e14 <HAL_UART_RxCpltCallback>
}
 800f528:	e007      	b.n	800f53a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	699a      	ldr	r2, [r3, #24]
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	f042 0208 	orr.w	r2, r2, #8
 800f538:	619a      	str	r2, [r3, #24]
}
 800f53a:	bf00      	nop
 800f53c:	3758      	adds	r7, #88	; 0x58
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}
	...

0800f544 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b0a6      	sub	sp, #152	; 0x98
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f552:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	69db      	ldr	r3, [r3, #28]
 800f55c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	689b      	ldr	r3, [r3, #8]
 800f570:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f57a:	2b22      	cmp	r3, #34	; 0x22
 800f57c:	f040 814d 	bne.w	800f81a <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f586:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f58a:	e0f4      	b.n	800f776 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f592:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f596:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800f59a:	b2d9      	uxtb	r1, r3
 800f59c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800f5a0:	b2da      	uxtb	r2, r3
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5a6:	400a      	ands	r2, r1
 800f5a8:	b2d2      	uxtb	r2, r2
 800f5aa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5b0:	1c5a      	adds	r2, r3, #1
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	3b01      	subs	r3, #1
 800f5c0:	b29a      	uxth	r2, r3
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	69db      	ldr	r3, [r3, #28]
 800f5ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f5d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f5d6:	f003 0307 	and.w	r3, r3, #7
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d053      	beq.n	800f686 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f5de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f5e2:	f003 0301 	and.w	r3, r3, #1
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d011      	beq.n	800f60e <UART_RxISR_8BIT_FIFOEN+0xca>
 800f5ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f5ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d00b      	beq.n	800f60e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	2201      	movs	r2, #1
 800f5fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f604:	f043 0201 	orr.w	r2, r3, #1
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f60e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f612:	f003 0302 	and.w	r3, r3, #2
 800f616:	2b00      	cmp	r3, #0
 800f618:	d011      	beq.n	800f63e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f61a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f61e:	f003 0301 	and.w	r3, r3, #1
 800f622:	2b00      	cmp	r3, #0
 800f624:	d00b      	beq.n	800f63e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	2202      	movs	r2, #2
 800f62c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f634:	f043 0204 	orr.w	r2, r3, #4
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f63e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f642:	f003 0304 	and.w	r3, r3, #4
 800f646:	2b00      	cmp	r3, #0
 800f648:	d011      	beq.n	800f66e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f64a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f64e:	f003 0301 	and.w	r3, r3, #1
 800f652:	2b00      	cmp	r3, #0
 800f654:	d00b      	beq.n	800f66e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	2204      	movs	r2, #4
 800f65c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f664:	f043 0202 	orr.w	r2, r3, #2
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f674:	2b00      	cmp	r3, #0
 800f676:	d006      	beq.n	800f686 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f7fe fcfd 	bl	800e078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2200      	movs	r2, #0
 800f682:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f68c:	b29b      	uxth	r3, r3
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d171      	bne.n	800f776 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f69a:	e853 3f00 	ldrex	r3, [r3]
 800f69e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f6a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f6a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	461a      	mov	r2, r3
 800f6b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f6b4:	66bb      	str	r3, [r7, #104]	; 0x68
 800f6b6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6b8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f6ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f6bc:	e841 2300 	strex	r3, r2, [r1]
 800f6c0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f6c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d1e4      	bne.n	800f692 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	3308      	adds	r3, #8
 800f6ce:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6d2:	e853 3f00 	ldrex	r3, [r3]
 800f6d6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f6d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f6da:	4b56      	ldr	r3, [pc, #344]	; (800f834 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800f6dc:	4013      	ands	r3, r2
 800f6de:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	3308      	adds	r3, #8
 800f6e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f6e8:	657a      	str	r2, [r7, #84]	; 0x54
 800f6ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f6ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f6f0:	e841 2300 	strex	r3, r2, [r1]
 800f6f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f6f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d1e5      	bne.n	800f6c8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2220      	movs	r2, #32
 800f700:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	2200      	movs	r2, #0
 800f708:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f70e:	2b01      	cmp	r3, #1
 800f710:	d12e      	bne.n	800f770 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	2200      	movs	r2, #0
 800f716:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f720:	e853 3f00 	ldrex	r3, [r3]
 800f724:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f728:	f023 0310 	bic.w	r3, r3, #16
 800f72c:	67bb      	str	r3, [r7, #120]	; 0x78
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	461a      	mov	r2, r3
 800f734:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f736:	643b      	str	r3, [r7, #64]	; 0x40
 800f738:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f73a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f73c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f73e:	e841 2300 	strex	r3, r2, [r1]
 800f742:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f746:	2b00      	cmp	r3, #0
 800f748:	d1e6      	bne.n	800f718 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	69db      	ldr	r3, [r3, #28]
 800f750:	f003 0310 	and.w	r3, r3, #16
 800f754:	2b10      	cmp	r3, #16
 800f756:	d103      	bne.n	800f760 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	2210      	movs	r2, #16
 800f75e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f766:	4619      	mov	r1, r3
 800f768:	6878      	ldr	r0, [r7, #4]
 800f76a:	f7fe fc8f 	bl	800e08c <HAL_UARTEx_RxEventCallback>
 800f76e:	e002      	b.n	800f776 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f7f1 fb4f 	bl	8000e14 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f776:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d006      	beq.n	800f78c <UART_RxISR_8BIT_FIFOEN+0x248>
 800f77e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f782:	f003 0320 	and.w	r3, r3, #32
 800f786:	2b00      	cmp	r3, #0
 800f788:	f47f af00 	bne.w	800f58c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f792:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f796:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d045      	beq.n	800f82a <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f7a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f7a8:	429a      	cmp	r2, r3
 800f7aa:	d23e      	bcs.n	800f82a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	3308      	adds	r3, #8
 800f7b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7b4:	6a3b      	ldr	r3, [r7, #32]
 800f7b6:	e853 3f00 	ldrex	r3, [r3]
 800f7ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800f7bc:	69fb      	ldr	r3, [r7, #28]
 800f7be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f7c2:	673b      	str	r3, [r7, #112]	; 0x70
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	3308      	adds	r3, #8
 800f7ca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f7cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f7ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f7d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7d4:	e841 2300 	strex	r3, r2, [r1]
 800f7d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d1e5      	bne.n	800f7ac <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	4a15      	ldr	r2, [pc, #84]	; (800f838 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800f7e4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	e853 3f00 	ldrex	r3, [r3]
 800f7f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	f043 0320 	orr.w	r3, r3, #32
 800f7fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	461a      	mov	r2, r3
 800f802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f804:	61bb      	str	r3, [r7, #24]
 800f806:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f808:	6979      	ldr	r1, [r7, #20]
 800f80a:	69ba      	ldr	r2, [r7, #24]
 800f80c:	e841 2300 	strex	r3, r2, [r1]
 800f810:	613b      	str	r3, [r7, #16]
   return(result);
 800f812:	693b      	ldr	r3, [r7, #16]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d1e6      	bne.n	800f7e6 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f818:	e007      	b.n	800f82a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	699a      	ldr	r2, [r3, #24]
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	f042 0208 	orr.w	r2, r2, #8
 800f828:	619a      	str	r2, [r3, #24]
}
 800f82a:	bf00      	nop
 800f82c:	3798      	adds	r7, #152	; 0x98
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}
 800f832:	bf00      	nop
 800f834:	effffffe 	.word	0xeffffffe
 800f838:	0800f283 	.word	0x0800f283

0800f83c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b0a8      	sub	sp, #160	; 0xa0
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f84a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	69db      	ldr	r3, [r3, #28]
 800f854:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	689b      	ldr	r3, [r3, #8]
 800f868:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f872:	2b22      	cmp	r3, #34	; 0x22
 800f874:	f040 8151 	bne.w	800fb1a <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f87e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f882:	e0f8      	b.n	800fa76 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f88a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f892:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800f896:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800f89a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800f89e:	4013      	ands	r3, r2
 800f8a0:	b29a      	uxth	r2, r3
 800f8a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8ac:	1c9a      	adds	r2, r3, #2
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f8b8:	b29b      	uxth	r3, r3
 800f8ba:	3b01      	subs	r3, #1
 800f8bc:	b29a      	uxth	r2, r3
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	69db      	ldr	r3, [r3, #28]
 800f8ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f8ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f8d2:	f003 0307 	and.w	r3, r3, #7
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d053      	beq.n	800f982 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f8da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f8de:	f003 0301 	and.w	r3, r3, #1
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d011      	beq.n	800f90a <UART_RxISR_16BIT_FIFOEN+0xce>
 800f8e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f8ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d00b      	beq.n	800f90a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	2201      	movs	r2, #1
 800f8f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f900:	f043 0201 	orr.w	r2, r3, #1
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f90a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f90e:	f003 0302 	and.w	r3, r3, #2
 800f912:	2b00      	cmp	r3, #0
 800f914:	d011      	beq.n	800f93a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f916:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f91a:	f003 0301 	and.w	r3, r3, #1
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d00b      	beq.n	800f93a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	2202      	movs	r2, #2
 800f928:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f930:	f043 0204 	orr.w	r2, r3, #4
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f93a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f93e:	f003 0304 	and.w	r3, r3, #4
 800f942:	2b00      	cmp	r3, #0
 800f944:	d011      	beq.n	800f96a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f946:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f94a:	f003 0301 	and.w	r3, r3, #1
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d00b      	beq.n	800f96a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	2204      	movs	r2, #4
 800f958:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f960:	f043 0202 	orr.w	r2, r3, #2
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f970:	2b00      	cmp	r3, #0
 800f972:	d006      	beq.n	800f982 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f7fe fb7f 	bl	800e078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2200      	movs	r2, #0
 800f97e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f988:	b29b      	uxth	r3, r3
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d173      	bne.n	800fa76 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f994:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f996:	e853 3f00 	ldrex	r3, [r3]
 800f99a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f99c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f99e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f9a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	461a      	mov	r2, r3
 800f9ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f9b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f9b2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f9b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f9b8:	e841 2300 	strex	r3, r2, [r1]
 800f9bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f9be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d1e4      	bne.n	800f98e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	3308      	adds	r3, #8
 800f9ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9ce:	e853 3f00 	ldrex	r3, [r3]
 800f9d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f9d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f9d6:	4b57      	ldr	r3, [pc, #348]	; (800fb34 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800f9d8:	4013      	ands	r3, r2
 800f9da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	3308      	adds	r3, #8
 800f9e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f9e8:	65ba      	str	r2, [r7, #88]	; 0x58
 800f9ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f9ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f9f0:	e841 2300 	strex	r3, r2, [r1]
 800f9f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f9f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d1e3      	bne.n	800f9c4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2220      	movs	r2, #32
 800fa00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2200      	movs	r2, #0
 800fa08:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa0e:	2b01      	cmp	r3, #1
 800fa10:	d12e      	bne.n	800fa70 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2200      	movs	r2, #0
 800fa16:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa20:	e853 3f00 	ldrex	r3, [r3]
 800fa24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fa26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa28:	f023 0310 	bic.w	r3, r3, #16
 800fa2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	461a      	mov	r2, r3
 800fa34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fa36:	647b      	str	r3, [r7, #68]	; 0x44
 800fa38:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fa3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa3e:	e841 2300 	strex	r3, r2, [r1]
 800fa42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fa44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d1e6      	bne.n	800fa18 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	69db      	ldr	r3, [r3, #28]
 800fa50:	f003 0310 	and.w	r3, r3, #16
 800fa54:	2b10      	cmp	r3, #16
 800fa56:	d103      	bne.n	800fa60 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	2210      	movs	r2, #16
 800fa5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fa66:	4619      	mov	r1, r3
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	f7fe fb0f 	bl	800e08c <HAL_UARTEx_RxEventCallback>
 800fa6e:	e002      	b.n	800fa76 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fa70:	6878      	ldr	r0, [r7, #4]
 800fa72:	f7f1 f9cf 	bl	8000e14 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fa76:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d006      	beq.n	800fa8c <UART_RxISR_16BIT_FIFOEN+0x250>
 800fa7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fa82:	f003 0320 	and.w	r3, r3, #32
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	f47f aefc 	bne.w	800f884 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fa92:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fa96:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d045      	beq.n	800fb2a <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800faa4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800faa8:	429a      	cmp	r2, r3
 800faaa:	d23e      	bcs.n	800fb2a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	3308      	adds	r3, #8
 800fab2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab6:	e853 3f00 	ldrex	r3, [r3]
 800faba:	623b      	str	r3, [r7, #32]
   return(result);
 800fabc:	6a3b      	ldr	r3, [r7, #32]
 800fabe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fac2:	677b      	str	r3, [r7, #116]	; 0x74
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	3308      	adds	r3, #8
 800faca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800facc:	633a      	str	r2, [r7, #48]	; 0x30
 800face:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fad0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fad4:	e841 2300 	strex	r3, r2, [r1]
 800fad8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d1e5      	bne.n	800faac <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	4a15      	ldr	r2, [pc, #84]	; (800fb38 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800fae4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faec:	693b      	ldr	r3, [r7, #16]
 800faee:	e853 3f00 	ldrex	r3, [r3]
 800faf2:	60fb      	str	r3, [r7, #12]
   return(result);
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	f043 0320 	orr.w	r3, r3, #32
 800fafa:	673b      	str	r3, [r7, #112]	; 0x70
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	461a      	mov	r2, r3
 800fb02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb04:	61fb      	str	r3, [r7, #28]
 800fb06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb08:	69b9      	ldr	r1, [r7, #24]
 800fb0a:	69fa      	ldr	r2, [r7, #28]
 800fb0c:	e841 2300 	strex	r3, r2, [r1]
 800fb10:	617b      	str	r3, [r7, #20]
   return(result);
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d1e6      	bne.n	800fae6 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fb18:	e007      	b.n	800fb2a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	699a      	ldr	r2, [r3, #24]
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	f042 0208 	orr.w	r2, r2, #8
 800fb28:	619a      	str	r2, [r3, #24]
}
 800fb2a:	bf00      	nop
 800fb2c:	37a0      	adds	r7, #160	; 0xa0
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}
 800fb32:	bf00      	nop
 800fb34:	effffffe 	.word	0xeffffffe
 800fb38:	0800f3e3 	.word	0x0800f3e3

0800fb3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	b083      	sub	sp, #12
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fb44:	bf00      	nop
 800fb46:	370c      	adds	r7, #12
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4e:	4770      	bx	lr

0800fb50 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fb50:	b480      	push	{r7}
 800fb52:	b083      	sub	sp, #12
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fb58:	bf00      	nop
 800fb5a:	370c      	adds	r7, #12
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb62:	4770      	bx	lr

0800fb64 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fb64:	b480      	push	{r7}
 800fb66:	b083      	sub	sp, #12
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fb6c:	bf00      	nop
 800fb6e:	370c      	adds	r7, #12
 800fb70:	46bd      	mov	sp, r7
 800fb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb76:	4770      	bx	lr

0800fb78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fb78:	b480      	push	{r7}
 800fb7a:	b085      	sub	sp, #20
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fb86:	2b01      	cmp	r3, #1
 800fb88:	d101      	bne.n	800fb8e <HAL_UARTEx_DisableFifoMode+0x16>
 800fb8a:	2302      	movs	r3, #2
 800fb8c:	e027      	b.n	800fbde <HAL_UARTEx_DisableFifoMode+0x66>
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2201      	movs	r2, #1
 800fb92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2224      	movs	r2, #36	; 0x24
 800fb9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	681a      	ldr	r2, [r3, #0]
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	f022 0201 	bic.w	r2, r2, #1
 800fbb4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fbbc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	68fa      	ldr	r2, [r7, #12]
 800fbca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2220      	movs	r2, #32
 800fbd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fbdc:	2300      	movs	r3, #0
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3714      	adds	r7, #20
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe8:	4770      	bx	lr

0800fbea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fbea:	b580      	push	{r7, lr}
 800fbec:	b084      	sub	sp, #16
 800fbee:	af00      	add	r7, sp, #0
 800fbf0:	6078      	str	r0, [r7, #4]
 800fbf2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fbfa:	2b01      	cmp	r3, #1
 800fbfc:	d101      	bne.n	800fc02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fbfe:	2302      	movs	r3, #2
 800fc00:	e02d      	b.n	800fc5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	2201      	movs	r2, #1
 800fc06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2224      	movs	r2, #36	; 0x24
 800fc0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	681a      	ldr	r2, [r3, #0]
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	f022 0201 	bic.w	r2, r2, #1
 800fc28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	689b      	ldr	r3, [r3, #8]
 800fc30:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	683a      	ldr	r2, [r7, #0]
 800fc3a:	430a      	orrs	r2, r1
 800fc3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fc3e:	6878      	ldr	r0, [r7, #4]
 800fc40:	f000 f850 	bl	800fce4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	68fa      	ldr	r2, [r7, #12]
 800fc4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	2220      	movs	r2, #32
 800fc50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	2200      	movs	r2, #0
 800fc58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fc5c:	2300      	movs	r3, #0
}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	3710      	adds	r7, #16
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}

0800fc66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc66:	b580      	push	{r7, lr}
 800fc68:	b084      	sub	sp, #16
 800fc6a:	af00      	add	r7, sp, #0
 800fc6c:	6078      	str	r0, [r7, #4]
 800fc6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fc76:	2b01      	cmp	r3, #1
 800fc78:	d101      	bne.n	800fc7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fc7a:	2302      	movs	r3, #2
 800fc7c:	e02d      	b.n	800fcda <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2201      	movs	r2, #1
 800fc82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2224      	movs	r2, #36	; 0x24
 800fc8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	681a      	ldr	r2, [r3, #0]
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	f022 0201 	bic.w	r2, r2, #1
 800fca4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	689b      	ldr	r3, [r3, #8]
 800fcac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	683a      	ldr	r2, [r7, #0]
 800fcb6:	430a      	orrs	r2, r1
 800fcb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f000 f812 	bl	800fce4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	68fa      	ldr	r2, [r7, #12]
 800fcc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2220      	movs	r2, #32
 800fccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fcd8:	2300      	movs	r3, #0
}
 800fcda:	4618      	mov	r0, r3
 800fcdc:	3710      	adds	r7, #16
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}
	...

0800fce4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fce4:	b480      	push	{r7}
 800fce6:	b085      	sub	sp, #20
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d108      	bne.n	800fd06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2201      	movs	r2, #1
 800fcf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2201      	movs	r2, #1
 800fd00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fd04:	e031      	b.n	800fd6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fd06:	2310      	movs	r3, #16
 800fd08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fd0a:	2310      	movs	r3, #16
 800fd0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	689b      	ldr	r3, [r3, #8]
 800fd14:	0e5b      	lsrs	r3, r3, #25
 800fd16:	b2db      	uxtb	r3, r3
 800fd18:	f003 0307 	and.w	r3, r3, #7
 800fd1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	689b      	ldr	r3, [r3, #8]
 800fd24:	0f5b      	lsrs	r3, r3, #29
 800fd26:	b2db      	uxtb	r3, r3
 800fd28:	f003 0307 	and.w	r3, r3, #7
 800fd2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd2e:	7bbb      	ldrb	r3, [r7, #14]
 800fd30:	7b3a      	ldrb	r2, [r7, #12]
 800fd32:	4911      	ldr	r1, [pc, #68]	; (800fd78 <UARTEx_SetNbDataToProcess+0x94>)
 800fd34:	5c8a      	ldrb	r2, [r1, r2]
 800fd36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fd3a:	7b3a      	ldrb	r2, [r7, #12]
 800fd3c:	490f      	ldr	r1, [pc, #60]	; (800fd7c <UARTEx_SetNbDataToProcess+0x98>)
 800fd3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd40:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd44:	b29a      	uxth	r2, r3
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd4c:	7bfb      	ldrb	r3, [r7, #15]
 800fd4e:	7b7a      	ldrb	r2, [r7, #13]
 800fd50:	4909      	ldr	r1, [pc, #36]	; (800fd78 <UARTEx_SetNbDataToProcess+0x94>)
 800fd52:	5c8a      	ldrb	r2, [r1, r2]
 800fd54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fd58:	7b7a      	ldrb	r2, [r7, #13]
 800fd5a:	4908      	ldr	r1, [pc, #32]	; (800fd7c <UARTEx_SetNbDataToProcess+0x98>)
 800fd5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd5e:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd62:	b29a      	uxth	r2, r3
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fd6a:	bf00      	nop
 800fd6c:	3714      	adds	r7, #20
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd74:	4770      	bx	lr
 800fd76:	bf00      	nop
 800fd78:	0801007c 	.word	0x0801007c
 800fd7c:	08010084 	.word	0x08010084

0800fd80 <__errno>:
 800fd80:	4b01      	ldr	r3, [pc, #4]	; (800fd88 <__errno+0x8>)
 800fd82:	6818      	ldr	r0, [r3, #0]
 800fd84:	4770      	bx	lr
 800fd86:	bf00      	nop
 800fd88:	2400003c 	.word	0x2400003c

0800fd8c <__libc_init_array>:
 800fd8c:	b570      	push	{r4, r5, r6, lr}
 800fd8e:	4d0d      	ldr	r5, [pc, #52]	; (800fdc4 <__libc_init_array+0x38>)
 800fd90:	4c0d      	ldr	r4, [pc, #52]	; (800fdc8 <__libc_init_array+0x3c>)
 800fd92:	1b64      	subs	r4, r4, r5
 800fd94:	10a4      	asrs	r4, r4, #2
 800fd96:	2600      	movs	r6, #0
 800fd98:	42a6      	cmp	r6, r4
 800fd9a:	d109      	bne.n	800fdb0 <__libc_init_array+0x24>
 800fd9c:	4d0b      	ldr	r5, [pc, #44]	; (800fdcc <__libc_init_array+0x40>)
 800fd9e:	4c0c      	ldr	r4, [pc, #48]	; (800fdd0 <__libc_init_array+0x44>)
 800fda0:	f000 f93c 	bl	801001c <_init>
 800fda4:	1b64      	subs	r4, r4, r5
 800fda6:	10a4      	asrs	r4, r4, #2
 800fda8:	2600      	movs	r6, #0
 800fdaa:	42a6      	cmp	r6, r4
 800fdac:	d105      	bne.n	800fdba <__libc_init_array+0x2e>
 800fdae:	bd70      	pop	{r4, r5, r6, pc}
 800fdb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800fdb4:	4798      	blx	r3
 800fdb6:	3601      	adds	r6, #1
 800fdb8:	e7ee      	b.n	800fd98 <__libc_init_array+0xc>
 800fdba:	f855 3b04 	ldr.w	r3, [r5], #4
 800fdbe:	4798      	blx	r3
 800fdc0:	3601      	adds	r6, #1
 800fdc2:	e7f2      	b.n	800fdaa <__libc_init_array+0x1e>
 800fdc4:	08010094 	.word	0x08010094
 800fdc8:	08010094 	.word	0x08010094
 800fdcc:	08010094 	.word	0x08010094
 800fdd0:	08010098 	.word	0x08010098

0800fdd4 <malloc>:
 800fdd4:	4b02      	ldr	r3, [pc, #8]	; (800fde0 <malloc+0xc>)
 800fdd6:	4601      	mov	r1, r0
 800fdd8:	6818      	ldr	r0, [r3, #0]
 800fdda:	f000 b88d 	b.w	800fef8 <_malloc_r>
 800fdde:	bf00      	nop
 800fde0:	2400003c 	.word	0x2400003c

0800fde4 <free>:
 800fde4:	4b02      	ldr	r3, [pc, #8]	; (800fdf0 <free+0xc>)
 800fde6:	4601      	mov	r1, r0
 800fde8:	6818      	ldr	r0, [r3, #0]
 800fdea:	f000 b819 	b.w	800fe20 <_free_r>
 800fdee:	bf00      	nop
 800fdf0:	2400003c 	.word	0x2400003c

0800fdf4 <memcpy>:
 800fdf4:	440a      	add	r2, r1
 800fdf6:	4291      	cmp	r1, r2
 800fdf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fdfc:	d100      	bne.n	800fe00 <memcpy+0xc>
 800fdfe:	4770      	bx	lr
 800fe00:	b510      	push	{r4, lr}
 800fe02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe06:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe0a:	4291      	cmp	r1, r2
 800fe0c:	d1f9      	bne.n	800fe02 <memcpy+0xe>
 800fe0e:	bd10      	pop	{r4, pc}

0800fe10 <memset>:
 800fe10:	4402      	add	r2, r0
 800fe12:	4603      	mov	r3, r0
 800fe14:	4293      	cmp	r3, r2
 800fe16:	d100      	bne.n	800fe1a <memset+0xa>
 800fe18:	4770      	bx	lr
 800fe1a:	f803 1b01 	strb.w	r1, [r3], #1
 800fe1e:	e7f9      	b.n	800fe14 <memset+0x4>

0800fe20 <_free_r>:
 800fe20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe22:	2900      	cmp	r1, #0
 800fe24:	d044      	beq.n	800feb0 <_free_r+0x90>
 800fe26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe2a:	9001      	str	r0, [sp, #4]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	f1a1 0404 	sub.w	r4, r1, #4
 800fe32:	bfb8      	it	lt
 800fe34:	18e4      	addlt	r4, r4, r3
 800fe36:	f000 f8e3 	bl	8010000 <__malloc_lock>
 800fe3a:	4a1e      	ldr	r2, [pc, #120]	; (800feb4 <_free_r+0x94>)
 800fe3c:	9801      	ldr	r0, [sp, #4]
 800fe3e:	6813      	ldr	r3, [r2, #0]
 800fe40:	b933      	cbnz	r3, 800fe50 <_free_r+0x30>
 800fe42:	6063      	str	r3, [r4, #4]
 800fe44:	6014      	str	r4, [r2, #0]
 800fe46:	b003      	add	sp, #12
 800fe48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe4c:	f000 b8de 	b.w	801000c <__malloc_unlock>
 800fe50:	42a3      	cmp	r3, r4
 800fe52:	d908      	bls.n	800fe66 <_free_r+0x46>
 800fe54:	6825      	ldr	r5, [r4, #0]
 800fe56:	1961      	adds	r1, r4, r5
 800fe58:	428b      	cmp	r3, r1
 800fe5a:	bf01      	itttt	eq
 800fe5c:	6819      	ldreq	r1, [r3, #0]
 800fe5e:	685b      	ldreq	r3, [r3, #4]
 800fe60:	1949      	addeq	r1, r1, r5
 800fe62:	6021      	streq	r1, [r4, #0]
 800fe64:	e7ed      	b.n	800fe42 <_free_r+0x22>
 800fe66:	461a      	mov	r2, r3
 800fe68:	685b      	ldr	r3, [r3, #4]
 800fe6a:	b10b      	cbz	r3, 800fe70 <_free_r+0x50>
 800fe6c:	42a3      	cmp	r3, r4
 800fe6e:	d9fa      	bls.n	800fe66 <_free_r+0x46>
 800fe70:	6811      	ldr	r1, [r2, #0]
 800fe72:	1855      	adds	r5, r2, r1
 800fe74:	42a5      	cmp	r5, r4
 800fe76:	d10b      	bne.n	800fe90 <_free_r+0x70>
 800fe78:	6824      	ldr	r4, [r4, #0]
 800fe7a:	4421      	add	r1, r4
 800fe7c:	1854      	adds	r4, r2, r1
 800fe7e:	42a3      	cmp	r3, r4
 800fe80:	6011      	str	r1, [r2, #0]
 800fe82:	d1e0      	bne.n	800fe46 <_free_r+0x26>
 800fe84:	681c      	ldr	r4, [r3, #0]
 800fe86:	685b      	ldr	r3, [r3, #4]
 800fe88:	6053      	str	r3, [r2, #4]
 800fe8a:	4421      	add	r1, r4
 800fe8c:	6011      	str	r1, [r2, #0]
 800fe8e:	e7da      	b.n	800fe46 <_free_r+0x26>
 800fe90:	d902      	bls.n	800fe98 <_free_r+0x78>
 800fe92:	230c      	movs	r3, #12
 800fe94:	6003      	str	r3, [r0, #0]
 800fe96:	e7d6      	b.n	800fe46 <_free_r+0x26>
 800fe98:	6825      	ldr	r5, [r4, #0]
 800fe9a:	1961      	adds	r1, r4, r5
 800fe9c:	428b      	cmp	r3, r1
 800fe9e:	bf04      	itt	eq
 800fea0:	6819      	ldreq	r1, [r3, #0]
 800fea2:	685b      	ldreq	r3, [r3, #4]
 800fea4:	6063      	str	r3, [r4, #4]
 800fea6:	bf04      	itt	eq
 800fea8:	1949      	addeq	r1, r1, r5
 800feaa:	6021      	streq	r1, [r4, #0]
 800feac:	6054      	str	r4, [r2, #4]
 800feae:	e7ca      	b.n	800fe46 <_free_r+0x26>
 800feb0:	b003      	add	sp, #12
 800feb2:	bd30      	pop	{r4, r5, pc}
 800feb4:	2400061c 	.word	0x2400061c

0800feb8 <sbrk_aligned>:
 800feb8:	b570      	push	{r4, r5, r6, lr}
 800feba:	4e0e      	ldr	r6, [pc, #56]	; (800fef4 <sbrk_aligned+0x3c>)
 800febc:	460c      	mov	r4, r1
 800febe:	6831      	ldr	r1, [r6, #0]
 800fec0:	4605      	mov	r5, r0
 800fec2:	b911      	cbnz	r1, 800feca <sbrk_aligned+0x12>
 800fec4:	f000 f88c 	bl	800ffe0 <_sbrk_r>
 800fec8:	6030      	str	r0, [r6, #0]
 800feca:	4621      	mov	r1, r4
 800fecc:	4628      	mov	r0, r5
 800fece:	f000 f887 	bl	800ffe0 <_sbrk_r>
 800fed2:	1c43      	adds	r3, r0, #1
 800fed4:	d00a      	beq.n	800feec <sbrk_aligned+0x34>
 800fed6:	1cc4      	adds	r4, r0, #3
 800fed8:	f024 0403 	bic.w	r4, r4, #3
 800fedc:	42a0      	cmp	r0, r4
 800fede:	d007      	beq.n	800fef0 <sbrk_aligned+0x38>
 800fee0:	1a21      	subs	r1, r4, r0
 800fee2:	4628      	mov	r0, r5
 800fee4:	f000 f87c 	bl	800ffe0 <_sbrk_r>
 800fee8:	3001      	adds	r0, #1
 800feea:	d101      	bne.n	800fef0 <sbrk_aligned+0x38>
 800feec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fef0:	4620      	mov	r0, r4
 800fef2:	bd70      	pop	{r4, r5, r6, pc}
 800fef4:	24000620 	.word	0x24000620

0800fef8 <_malloc_r>:
 800fef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fefc:	1ccd      	adds	r5, r1, #3
 800fefe:	f025 0503 	bic.w	r5, r5, #3
 800ff02:	3508      	adds	r5, #8
 800ff04:	2d0c      	cmp	r5, #12
 800ff06:	bf38      	it	cc
 800ff08:	250c      	movcc	r5, #12
 800ff0a:	2d00      	cmp	r5, #0
 800ff0c:	4607      	mov	r7, r0
 800ff0e:	db01      	blt.n	800ff14 <_malloc_r+0x1c>
 800ff10:	42a9      	cmp	r1, r5
 800ff12:	d905      	bls.n	800ff20 <_malloc_r+0x28>
 800ff14:	230c      	movs	r3, #12
 800ff16:	603b      	str	r3, [r7, #0]
 800ff18:	2600      	movs	r6, #0
 800ff1a:	4630      	mov	r0, r6
 800ff1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff20:	4e2e      	ldr	r6, [pc, #184]	; (800ffdc <_malloc_r+0xe4>)
 800ff22:	f000 f86d 	bl	8010000 <__malloc_lock>
 800ff26:	6833      	ldr	r3, [r6, #0]
 800ff28:	461c      	mov	r4, r3
 800ff2a:	bb34      	cbnz	r4, 800ff7a <_malloc_r+0x82>
 800ff2c:	4629      	mov	r1, r5
 800ff2e:	4638      	mov	r0, r7
 800ff30:	f7ff ffc2 	bl	800feb8 <sbrk_aligned>
 800ff34:	1c43      	adds	r3, r0, #1
 800ff36:	4604      	mov	r4, r0
 800ff38:	d14d      	bne.n	800ffd6 <_malloc_r+0xde>
 800ff3a:	6834      	ldr	r4, [r6, #0]
 800ff3c:	4626      	mov	r6, r4
 800ff3e:	2e00      	cmp	r6, #0
 800ff40:	d140      	bne.n	800ffc4 <_malloc_r+0xcc>
 800ff42:	6823      	ldr	r3, [r4, #0]
 800ff44:	4631      	mov	r1, r6
 800ff46:	4638      	mov	r0, r7
 800ff48:	eb04 0803 	add.w	r8, r4, r3
 800ff4c:	f000 f848 	bl	800ffe0 <_sbrk_r>
 800ff50:	4580      	cmp	r8, r0
 800ff52:	d13a      	bne.n	800ffca <_malloc_r+0xd2>
 800ff54:	6821      	ldr	r1, [r4, #0]
 800ff56:	3503      	adds	r5, #3
 800ff58:	1a6d      	subs	r5, r5, r1
 800ff5a:	f025 0503 	bic.w	r5, r5, #3
 800ff5e:	3508      	adds	r5, #8
 800ff60:	2d0c      	cmp	r5, #12
 800ff62:	bf38      	it	cc
 800ff64:	250c      	movcc	r5, #12
 800ff66:	4629      	mov	r1, r5
 800ff68:	4638      	mov	r0, r7
 800ff6a:	f7ff ffa5 	bl	800feb8 <sbrk_aligned>
 800ff6e:	3001      	adds	r0, #1
 800ff70:	d02b      	beq.n	800ffca <_malloc_r+0xd2>
 800ff72:	6823      	ldr	r3, [r4, #0]
 800ff74:	442b      	add	r3, r5
 800ff76:	6023      	str	r3, [r4, #0]
 800ff78:	e00e      	b.n	800ff98 <_malloc_r+0xa0>
 800ff7a:	6822      	ldr	r2, [r4, #0]
 800ff7c:	1b52      	subs	r2, r2, r5
 800ff7e:	d41e      	bmi.n	800ffbe <_malloc_r+0xc6>
 800ff80:	2a0b      	cmp	r2, #11
 800ff82:	d916      	bls.n	800ffb2 <_malloc_r+0xba>
 800ff84:	1961      	adds	r1, r4, r5
 800ff86:	42a3      	cmp	r3, r4
 800ff88:	6025      	str	r5, [r4, #0]
 800ff8a:	bf18      	it	ne
 800ff8c:	6059      	strne	r1, [r3, #4]
 800ff8e:	6863      	ldr	r3, [r4, #4]
 800ff90:	bf08      	it	eq
 800ff92:	6031      	streq	r1, [r6, #0]
 800ff94:	5162      	str	r2, [r4, r5]
 800ff96:	604b      	str	r3, [r1, #4]
 800ff98:	4638      	mov	r0, r7
 800ff9a:	f104 060b 	add.w	r6, r4, #11
 800ff9e:	f000 f835 	bl	801000c <__malloc_unlock>
 800ffa2:	f026 0607 	bic.w	r6, r6, #7
 800ffa6:	1d23      	adds	r3, r4, #4
 800ffa8:	1af2      	subs	r2, r6, r3
 800ffaa:	d0b6      	beq.n	800ff1a <_malloc_r+0x22>
 800ffac:	1b9b      	subs	r3, r3, r6
 800ffae:	50a3      	str	r3, [r4, r2]
 800ffb0:	e7b3      	b.n	800ff1a <_malloc_r+0x22>
 800ffb2:	6862      	ldr	r2, [r4, #4]
 800ffb4:	42a3      	cmp	r3, r4
 800ffb6:	bf0c      	ite	eq
 800ffb8:	6032      	streq	r2, [r6, #0]
 800ffba:	605a      	strne	r2, [r3, #4]
 800ffbc:	e7ec      	b.n	800ff98 <_malloc_r+0xa0>
 800ffbe:	4623      	mov	r3, r4
 800ffc0:	6864      	ldr	r4, [r4, #4]
 800ffc2:	e7b2      	b.n	800ff2a <_malloc_r+0x32>
 800ffc4:	4634      	mov	r4, r6
 800ffc6:	6876      	ldr	r6, [r6, #4]
 800ffc8:	e7b9      	b.n	800ff3e <_malloc_r+0x46>
 800ffca:	230c      	movs	r3, #12
 800ffcc:	603b      	str	r3, [r7, #0]
 800ffce:	4638      	mov	r0, r7
 800ffd0:	f000 f81c 	bl	801000c <__malloc_unlock>
 800ffd4:	e7a1      	b.n	800ff1a <_malloc_r+0x22>
 800ffd6:	6025      	str	r5, [r4, #0]
 800ffd8:	e7de      	b.n	800ff98 <_malloc_r+0xa0>
 800ffda:	bf00      	nop
 800ffdc:	2400061c 	.word	0x2400061c

0800ffe0 <_sbrk_r>:
 800ffe0:	b538      	push	{r3, r4, r5, lr}
 800ffe2:	4d06      	ldr	r5, [pc, #24]	; (800fffc <_sbrk_r+0x1c>)
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	4604      	mov	r4, r0
 800ffe8:	4608      	mov	r0, r1
 800ffea:	602b      	str	r3, [r5, #0]
 800ffec:	f7f2 fb9a 	bl	8002724 <_sbrk>
 800fff0:	1c43      	adds	r3, r0, #1
 800fff2:	d102      	bne.n	800fffa <_sbrk_r+0x1a>
 800fff4:	682b      	ldr	r3, [r5, #0]
 800fff6:	b103      	cbz	r3, 800fffa <_sbrk_r+0x1a>
 800fff8:	6023      	str	r3, [r4, #0]
 800fffa:	bd38      	pop	{r3, r4, r5, pc}
 800fffc:	24000624 	.word	0x24000624

08010000 <__malloc_lock>:
 8010000:	4801      	ldr	r0, [pc, #4]	; (8010008 <__malloc_lock+0x8>)
 8010002:	f000 b809 	b.w	8010018 <__retarget_lock_acquire_recursive>
 8010006:	bf00      	nop
 8010008:	24000628 	.word	0x24000628

0801000c <__malloc_unlock>:
 801000c:	4801      	ldr	r0, [pc, #4]	; (8010014 <__malloc_unlock+0x8>)
 801000e:	f000 b804 	b.w	801001a <__retarget_lock_release_recursive>
 8010012:	bf00      	nop
 8010014:	24000628 	.word	0x24000628

08010018 <__retarget_lock_acquire_recursive>:
 8010018:	4770      	bx	lr

0801001a <__retarget_lock_release_recursive>:
 801001a:	4770      	bx	lr

0801001c <_init>:
 801001c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801001e:	bf00      	nop
 8010020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010022:	bc08      	pop	{r3}
 8010024:	469e      	mov	lr, r3
 8010026:	4770      	bx	lr

08010028 <_fini>:
 8010028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801002a:	bf00      	nop
 801002c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801002e:	bc08      	pop	{r3}
 8010030:	469e      	mov	lr, r3
 8010032:	4770      	bx	lr
